

absorb :: But in the short-term it will absorb a lot of top management 's energy and attention , '' says Philippe Haspeslagh , a business professor at the European management school , Insead , in Paris ./.
cc(absorb-7, But-1)
case(short-term-4, in-2)
det(short-term-4, the-3)
nmod:in(absorb-7, short-term-4)
nsubj(absorb-7, it-5)
aux(absorb-7, will-6)
ccomp(says-19, absorb-7)
det(lot-9, a-8)
dobj(absorb-7, lot-9)
case(energy-14, of-10)
amod(management-12, top-11)
nmod:poss(energy-14, management-12)
case(management-12, 's-13)
nmod:of(lot-9, energy-14)
cc(energy-14, and-15)
nmod:of(lot-9, attention-16)
conj:and(energy-14, attention-16)
punct(says-19, ,-17)
punct(says-19, ''-18)
root(ROOT-0, says-19)
compound(Haspeslagh-21, Philippe-20)
nsubj(says-19, Haspeslagh-21)
punct(Haspeslagh-21, ,-22)
det(professor-25, a-23)
compound(professor-25, business-24)
appos(Haspeslagh-21, professor-25)
case(school-30, at-26)
det(school-30, the-27)
amod(school-30, European-28)
compound(school-30, management-29)
nmod:at(professor-25, school-30)
punct(school-30, ,-31)
appos(school-30, Insead-32)
punct(school-30, ,-33)
case(Paris-35, in-34)
nmod:in(school-30, Paris-35)
punct(says-19, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#energy

absorb :: Shocks from one-time changes in the terms of trade should be absorbed by adjustments in exchange-rate terms -- not price levels ./.
nsubjpass(absorbed-12, Shocks-1)
case(changes-4, from-2)
amod(changes-4, one-time-3)
nmod:from(Shocks-1, changes-4)
case(terms-7, in-5)
det(terms-7, the-6)
nmod:in(changes-4, terms-7)
case(trade-9, of-8)
nmod:of(terms-7, trade-9)
aux(absorbed-12, should-10)
auxpass(absorbed-12, be-11)
root(ROOT-0, absorbed-12)
case(adjustments-14, by-13)
nmod:agent(absorbed-12, adjustments-14)
case(terms-17, in-15)
compound(terms-17, exchange-rate-16)
nmod:in(adjustments-14, terms-17)
punct(adjustments-14, ---18)
neg(levels-21, not-19)
compound(levels-21, price-20)
dep(adjustments-14, levels-21)
punct(absorbed-12, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#shocks

absorb :: During the past 18 months , the Houston-based unit of Texas Air Corp. absorbed several carriers , in the process inheriting a hodge-podge of different aircraft ./.
case(months-5, During-1)
det(months-5, the-2)
amod(months-5, past-3)
nummod(months-5, 18-4)
nmod:during(absorbed-14, months-5)
punct(absorbed-14, ,-6)
det(unit-9, the-7)
amod(unit-9, Houston-based-8)
nsubj(absorbed-14, unit-9)
case(Corp.-13, of-10)
compound(Corp.-13, Texas-11)
compound(Corp.-13, Air-12)
nmod:of(unit-9, Corp.-13)
root(ROOT-0, absorbed-14)
amod(carriers-16, several-15)
dobj(absorbed-14, carriers-16)
punct(absorbed-14, ,-17)
case(process-20, in-18)
det(process-20, the-19)
nmod:in(absorbed-14, process-20)
acl(process-20, inheriting-21)
det(hodge-podge-23, a-22)
dobj(inheriting-21, hodge-podge-23)
case(aircraft-26, of-24)
amod(aircraft-26, different-25)
nmod:of(hodge-podge-23, aircraft-26)
punct(absorbed-14, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#carriers

absorb :: In the years since 1853 , when 4 , 058 steamboats arrived at the Cincinnati waterfront loaded with `` foreign '' people and exotic merchandise , Cincinnati residents have absorbed chili and pizza and wontons and dirty rice while adjusting to electric music and jet lag ./.
case(years-3, In-1)
det(years-3, the-2)
root(ROOT-0, years-3)
case(1853-5, since-4)
nmod:since(years-3, 1853-5)
punct(years-3, ,-6)
root(,-6, when-7)
dep(when-7, 4-8)
punct(4-8, ,-9)
nummod(steamboats-11, 058-10)
conj(4-8, steamboats-11)
acl(steamboats-11, arrived-12)
case(waterfront-16, at-13)
det(waterfront-16, the-14)
compound(waterfront-16, Cincinnati-15)
nmod:at(arrived-12, waterfront-16)
acl(waterfront-16, loaded-17)
case(people-22, with-18)
punct(people-22, ``-19)
amod(people-22, foreign-20)
punct(people-22, ''-21)
nmod:with(loaded-17, people-22)
cc(people-22, and-23)
amod(merchandise-25, exotic-24)
nmod:with(loaded-17, merchandise-25)
conj:and(people-22, merchandise-25)
punct(4-8, ,-26)
compound(residents-28, Cincinnati-27)
nsubj(absorbed-30, residents-28)
aux(absorbed-30, have-29)
acl:relcl(4-8, absorbed-30)
dobj(absorbed-30, chili-31)
cc(chili-31, and-32)
dobj(absorbed-30, pizza-33)
conj:and(chili-31, pizza-33)
cc(chili-31, and-34)
dobj(absorbed-30, wontons-35)
conj:and(chili-31, wontons-35)
cc(chili-31, and-36)
amod(rice-38, dirty-37)
dobj(absorbed-30, rice-38)
conj:and(chili-31, rice-38)
mark(adjusting-40, while-39)
advcl(absorbed-30, adjusting-40)
case(music-43, to-41)
amod(music-43, electric-42)
nmod:to(adjusting-40, music-43)
cc(music-43, and-44)
compound(lag-46, jet-45)
nmod:to(adjusting-40, lag-46)
conj:and(music-43, lag-46)
punct(when-7, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#chili

absorb :: Mr. Wyss of Data Resources suggested that factories may be having difficulty hiring new workers at a time of such low unemployment or may simply not be able to absorb as many new workers as they would like ./.
compound(Wyss-2, Mr.-1)
nsubj(suggested-6, Wyss-2)
case(Resources-5, of-3)
compound(Resources-5, Data-4)
nmod:of(Wyss-2, Resources-5)
root(ROOT-0, suggested-6)
mark(having-11, that-7)
nsubj(having-11, factories-8)
nsubj(able-28, factories-8)
nsubj:xsubj(absorb-30, factories-8)
aux(having-11, may-9)
aux(having-11, be-10)
ccomp(suggested-6, having-11)
dobj(having-11, difficulty-12)
acl(difficulty-12, hiring-13)
amod(workers-15, new-14)
dobj(hiring-13, workers-15)
case(time-18, at-16)
det(time-18, a-17)
nmod:at(hiring-13, time-18)
case(unemployment-22, of-19)
amod(unemployment-22, such-20)
amod(unemployment-22, low-21)
nmod:of(time-18, unemployment-22)
cc(having-11, or-23)
aux(able-28, may-24)
advmod(able-28, simply-25)
neg(able-28, not-26)
cop(able-28, be-27)
ccomp(suggested-6, able-28)
conj:or(having-11, able-28)
mark(absorb-30, to-29)
xcomp(able-28, absorb-30)
advmod(workers-34, as-31)
amod(workers-34, many-32)
amod(workers-34, new-33)
dobj(absorb-30, workers-34)
mark(like-38, as-35)
nsubj(like-38, they-36)
aux(like-38, would-37)
acl:relcl(workers-34, like-38)
punct(suggested-6, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#workers

absorb :: Management of three of the five highest yielding general purpose funds , as ranked by the Donoghue Organization , absorb a portion of fund expenses ./.
root(ROOT-0, Management-1)
case(three-3, of-2)
nmod:of(Management-1, three-3)
amod(three-3, of-4)
dep(of-4, the-5)
dep(the-5, five-6)
dep(absorb-20, highest-7)
dep(highest-7, yielding-8)
amod(funds-11, general-9)
compound(funds-11, purpose-10)
dobj(yielding-8, funds-11)
punct(highest-7, ,-12)
mark(ranked-14, as-13)
dep(highest-7, ranked-14)
case(Organization-18, by-15)
det(Organization-18, the-16)
compound(Organization-18, Donoghue-17)
nmod:by(ranked-14, Organization-18)
punct(highest-7, ,-19)
acl(five-6, absorb-20)
det(portion-22, a-21)
dobj(absorb-20, portion-22)
case(expenses-25, of-23)
compound(expenses-25, fund-24)
nmod:of(portion-22, expenses-25)
punct(Management-1, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#expenses

absorb :: Meanwhile , Democratic nominee Michael Dukakis -- after a month of absorbing Republican blows on his patriotism and being portrayed as a big taxer -- tried to gain the offensive with an old Democratic chestnut: the Republicans are going to take away your Social Security ./.
advmod(tried-26, Meanwhile-1)
punct(tried-26, ,-2)
amod(Dukakis-6, Democratic-3)
compound(Dukakis-6, nominee-4)
compound(Dukakis-6, Michael-5)
nsubj(tried-26, Dukakis-6)
nsubj:xsubj(gain-28, Dukakis-6)
punct(month-10, ---7)
case(month-10, after-8)
det(month-10, a-9)
dep(tried-26, month-10)
mark(absorbing-12, of-11)
acl(month-10, absorbing-12)
amod(blows-14, Republican-13)
dobj(absorbing-12, blows-14)
case(patriotism-17, on-15)
nmod:poss(patriotism-17, his-16)
nmod:on(blows-14, patriotism-17)
cc(month-10, and-18)
auxpass(portrayed-20, being-19)
conj:and(month-10, portrayed-20)
dep(tried-26, portrayed-20)
case(taxer-24, as-21)
det(taxer-24, a-22)
amod(taxer-24, big-23)
nmod:as(portrayed-20, taxer-24)
punct(month-10, ---25)
root(ROOT-0, tried-26)
mark(gain-28, to-27)
xcomp(tried-26, gain-28)
det(offensive-30, the-29)
dobj(gain-28, offensive-30)
case(chestnut-35, with-31)
det(chestnut-35, an-32)
amod(chestnut-35, old-33)
amod(chestnut-35, Democratic-34)
nmod:with(gain-28, chestnut-35)
punct(tried-26, :-36)
det(Republicans-38, the-37)
nsubj(going-40, Republicans-38)
nsubj:xsubj(take-42, Republicans-38)
aux(going-40, are-39)
parataxis(tried-26, going-40)
mark(take-42, to-41)
xcomp(going-40, take-42)
compound:prt(take-42, away-43)
nmod:poss(Security-46, your-44)
amod(Security-46, Social-45)
dobj(take-42, Security-46)
punct(tried-26, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#blows

absorb :: And even when that loophole was closed , in 1980 , the Japanese decided to absorb the tariff rather than boost prices ./.
cc(decided-14, And-1)
advmod(when-3, even-2)
advmod(closed-7, when-3)
det(loophole-5, that-4)
nsubjpass(closed-7, loophole-5)
auxpass(closed-7, was-6)
advcl(decided-14, closed-7)
punct(closed-7, ,-8)
case(1980-10, in-9)
nmod:in(closed-7, 1980-10)
punct(decided-14, ,-11)
det(Japanese-13, the-12)
nsubj(decided-14, Japanese-13)
nsubj:xsubj(absorb-16, Japanese-13)
root(ROOT-0, decided-14)
mark(absorb-16, to-15)
xcomp(decided-14, absorb-16)
det(tariff-18, the-17)
dobj(absorb-16, tariff-18)
cc(absorb-16, rather-19)
mwe(rather-19, than-20)
xcomp(decided-14, boost-21)
conj:negcc(absorb-16, boost-21)
dobj(boost-21, prices-22)
punct(decided-14, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#tariff

absorb :: While the rest of the nation watched with mere curiosity or slight concern , the nation 's fourth-largest city was thoroughly absorbed by the approach of Hurricane Gilbert ./.
mark(watched-7, While-1)
det(rest-3, the-2)
nsubj(watched-7, rest-3)
case(nation-6, of-4)
det(nation-6, the-5)
nmod:of(rest-3, nation-6)
advcl(absorbed-22, watched-7)
case(curiosity-10, with-8)
amod(curiosity-10, mere-9)
nmod:with(watched-7, curiosity-10)
cc(curiosity-10, or-11)
amod(concern-13, slight-12)
nmod:with(watched-7, concern-13)
conj:or(curiosity-10, concern-13)
punct(absorbed-22, ,-14)
det(nation-16, the-15)
nmod:poss(city-19, nation-16)
case(nation-16, 's-17)
amod(city-19, fourth-largest-18)
nsubjpass(absorbed-22, city-19)
auxpass(absorbed-22, was-20)
advmod(absorbed-22, thoroughly-21)
root(ROOT-0, absorbed-22)
case(approach-25, by-23)
det(approach-25, the-24)
nmod:agent(absorbed-22, approach-25)
case(Gilbert-28, of-26)
compound(Gilbert-28, Hurricane-27)
nmod:of(approach-25, Gilbert-28)
punct(absorbed-22, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#city

absorb :: Mr. Ennis said he believes Rockwood got into financial difficulty because its expansion efforts `` outstripped its ability to absorb those activities . ''/''
compound(Ennis-2, Mr.-1)
nsubj(said-3, Ennis-2)
root(ROOT-0, said-3)
nsubj(believes-5, he-4)
ccomp(said-3, believes-5)
nsubj(got-7, Rockwood-6)
ccomp(believes-5, got-7)
case(difficulty-10, into-8)
amod(difficulty-10, financial-9)
nmod:into(got-7, difficulty-10)
mark(outstripped-16, because-11)
nmod:poss(efforts-14, its-12)
compound(efforts-14, expansion-13)
nsubj(outstripped-16, efforts-14)
punct(outstripped-16, ``-15)
advcl(got-7, outstripped-16)
nmod:poss(ability-18, its-17)
dobj(outstripped-16, ability-18)
mark(absorb-20, to-19)
acl(ability-18, absorb-20)
det(activities-22, those-21)
dobj(absorb-20, activities-22)
punct(said-3, .-23)
punct(said-3, ''-24)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: absorb#activities

absorb :: The clearance came as a notary approved Ferruzzi 's plan to absorb Iniziativa Me.T.A ./.
det(clearance-2, The-1)
nsubj(came-3, clearance-2)
root(ROOT-0, came-3)
case(plan-10, as-4)
det(plan-10, a-5)
amod(plan-10, notary-6)
amod(plan-10, approved-7)
nmod:poss(plan-10, Ferruzzi-8)
case(Ferruzzi-8, 's-9)
nmod:as(came-3, plan-10)
mark(absorb-12, to-11)
acl(plan-10, absorb-12)
compound(Me.T.A-14, Iniziativa-13)
dobj(absorb-12, Me.T.A-14)
punct(came-3, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#me.t.a

absorb :: If his style after the strikes of last May indicates anything , Gen. Jaruzelski has n't absorbed that ./.
mark(indicates-10, If-1)
nmod:poss(style-3, his-2)
nsubj(indicates-10, style-3)
case(strikes-6, after-4)
det(strikes-6, the-5)
nmod:after(style-3, strikes-6)
case(May-9, of-7)
amod(May-9, last-8)
nmod:of(strikes-6, May-9)
advcl(absorbed-17, indicates-10)
dobj(indicates-10, anything-11)
punct(absorbed-17, ,-12)
compound(Jaruzelski-14, Gen.-13)
nsubj(absorbed-17, Jaruzelski-14)
aux(absorbed-17, has-15)
neg(absorbed-17, n't-16)
root(ROOT-0, absorbed-17)
dobj(absorbed-17, that-18)
punct(absorbed-17, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#that

absorb :: Remics are absorbing the bulk of newly issued mortgage securities as institutional buyers , such as thrifts and insurance companies , prefer the more tailored investment features of structured mortgage securities to the greater payment uncertainties of ordinary pass-throughs issued by Ginnie Mae , Freddie Mac and Fannie Mae ./.
nsubj(absorbing-3, Remics-1)
aux(absorbing-3, are-2)
root(ROOT-0, absorbing-3)
det(bulk-5, the-4)
dobj(absorbing-3, bulk-5)
case(securities-10, of-6)
advmod(issued-8, newly-7)
amod(securities-10, issued-8)
compound(securities-10, mortgage-9)
nmod:of(bulk-5, securities-10)
case(buyers-13, as-11)
amod(buyers-13, institutional-12)
nmod:as(absorbing-3, buyers-13)
punct(buyers-13, ,-14)
case(thrifts-17, such-15)
mwe(such-15, as-16)
nmod:such_as(buyers-13, thrifts-17)
cc(thrifts-17, and-18)
compound(companies-20, insurance-19)
nmod:such_as(buyers-13, companies-20)
conj:and(thrifts-17, companies-20)
punct(absorbing-3, ,-21)
dep(absorbing-3, prefer-22)
det(features-27, the-23)
advmod(tailored-25, more-24)
amod(features-27, tailored-25)
compound(features-27, investment-26)
dobj(prefer-22, features-27)
case(securities-31, of-28)
amod(securities-31, structured-29)
compound(securities-31, mortgage-30)
nmod:of(features-27, securities-31)
case(uncertainties-36, to-32)
det(uncertainties-36, the-33)
amod(uncertainties-36, greater-34)
compound(uncertainties-36, payment-35)
nmod:to(prefer-22, uncertainties-36)
case(pass-throughs-39, of-37)
amod(pass-throughs-39, ordinary-38)
nmod:of(uncertainties-36, pass-throughs-39)
acl(pass-throughs-39, issued-40)
case(Mae-43, by-41)
compound(Mae-43, Ginnie-42)
nmod:by(issued-40, Mae-43)
punct(Mae-43, ,-44)
compound(Mac-46, Freddie-45)
nmod:by(issued-40, Mac-46)
conj:and(Mae-43, Mac-46)
cc(Mae-43, and-47)
compound(Mae-49, Fannie-48)
nmod:by(issued-40, Mae-49)
conj:and(Mae-43, Mae-49)
punct(absorbing-3, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#securities

absorb :: Robert K. Heady , publisher of Bank Rate Monitor , a North Palm Beach , Fla . , interest rate newsletter , said banks `` did n't jump through hoops to raise savings yields 24 hours after absorbing the news of the Federal discount rate . ''/''
compound(K.-2, Robert-1)
root(ROOT-0, K.-2)
dep(K.-2, Heady-3)
punct(Heady-3, ,-4)
root(,-4, publisher-5)
case(Monitor-9, of-6)
compound(Monitor-9, Bank-7)
compound(Monitor-9, Rate-8)
nmod:of(publisher-5, Monitor-9)
punct(Monitor-9, ,-10)
det(Beach-14, a-11)
compound(Beach-14, North-12)
compound(Beach-14, Palm-13)
appos(Monitor-9, Beach-14)
punct(Beach-14, ,-15)
appos(Beach-14, Fla-16)
punct(publisher-5, .-17)
punct(said-6, ,-1)
compound(newsletter-4, interest-2)
compound(newsletter-4, rate-3)
nsubj(said-6, newsletter-4)
punct(said-6, ,-5)
root(ROOT-0, said-6)
nsubj(jump-11, banks-7)
nsubj:xsubj(raise-15, banks-7)
punct(jump-11, ``-8)
aux(jump-11, did-9)
neg(jump-11, n't-10)
ccomp(said-6, jump-11)
case(hoops-13, through-12)
nmod:through(jump-11, hoops-13)
mark(raise-15, to-14)
xcomp(jump-11, raise-15)
compound(yields-17, savings-16)
iobj(raise-15, yields-17)
nummod(hours-19, 24-18)
dobj(raise-15, hours-19)
mark(absorbing-21, after-20)
advcl(raise-15, absorbing-21)
det(news-23, the-22)
dobj(absorbing-21, news-23)
case(rate-28, of-24)
det(rate-28, the-25)
amod(rate-28, Federal-26)
compound(rate-28, discount-27)
nmod:of(news-23, rate-28)
punct(said-6, .-29)
punct(said-6, ''-30)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: absorb#rate

absorb :: Now , do all of them absorb it and grab it ?/.
advmod(do-3, Now-1)
punct(do-3, ,-2)
root(ROOT-0, do-3)
nsubj(absorb-7, all-4)
nsubj(grab-10, all-4)
case(them-6, of-5)
nmod:of(all-4, them-6)
dobj(do-3, absorb-7)
dobj(absorb-7, it-8)
cc(absorb-7, and-9)
dobj(do-3, grab-10)
conj:and(absorb-7, grab-10)
dobj(grab-10, it-11)
punct(do-3, ?-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#it

absorb :: `` In a small company , the CEO and his people become so absorbed in the Eleven that it dominates the existence of the company . ''/''
root(ROOT-0, ``-1)
case(company-5, In-2)
det(company-5, a-3)
amod(company-5, small-4)
nmod:in(become-12, company-5)
punct(become-12, ,-6)
det(CEO-8, the-7)
nsubj(become-12, CEO-8)
cc(CEO-8, and-9)
nmod:poss(people-11, his-10)
conj:and(CEO-8, people-11)
nsubj(become-12, people-11)
root(``-1, become-12)
advmod(absorbed-14, so-13)
xcomp(become-12, absorbed-14)
case(Eleven-17, in-15)
det(Eleven-17, the-16)
nmod:in(absorbed-14, Eleven-17)
mark(dominates-20, that-18)
nsubj(dominates-20, it-19)
ccomp(absorbed-14, dominates-20)
det(existence-22, the-21)
dobj(dominates-20, existence-22)
case(company-25, of-23)
det(company-25, the-24)
nmod:of(existence-22, company-25)
punct(become-12, .-26)
punct(become-12, ''-27)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: absorb#eleven

absorb :: The House-passed version also includes the 4 % raise , but would require agencies to absorb only half of the cost ./.
det(version-3, The-1)
amod(version-3, House-passed-2)
nsubj(includes-5, version-3)
nsubj(require-13, version-3)
advmod(includes-5, also-4)
root(ROOT-0, includes-5)
det(raise-9, the-6)
compound(%-8, 4-7)
amod(raise-9, %-8)
dobj(includes-5, raise-9)
punct(includes-5, ,-10)
cc(includes-5, but-11)
aux(require-13, would-12)
conj:but(includes-5, require-13)
dobj(require-13, agencies-14)
nsubj:xsubj(absorb-16, agencies-14)
mark(absorb-16, to-15)
xcomp(require-13, absorb-16)
advmod(half-18, only-17)
dobj(absorb-16, half-18)
case(cost-21, of-19)
det(cost-21, the-20)
nmod:of(half-18, cost-21)
punct(includes-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#cost

absorb :: In 1946 , Stalin in his campaign to break Ukrainian nationalism brutally forced the Russian Orthodox Church to absorb the Ukrainian Catholic Church ./.
case(1946-2, In-1)
nmod:in(forced-13, 1946-2)
punct(forced-13, ,-3)
nsubj(forced-13, Stalin-4)
case(campaign-7, in-5)
nmod:poss(campaign-7, his-6)
nmod:in(Stalin-4, campaign-7)
mark(break-9, to-8)
acl(campaign-7, break-9)
amod(nationalism-11, Ukrainian-10)
dobj(break-9, nationalism-11)
advmod(break-9, brutally-12)
root(ROOT-0, forced-13)
det(Church-17, the-14)
amod(Church-17, Russian-15)
compound(Church-17, Orthodox-16)
dobj(forced-13, Church-17)
nsubj:xsubj(absorb-19, Church-17)
mark(absorb-19, to-18)
xcomp(forced-13, absorb-19)
det(Church-23, the-20)
amod(Church-23, Ukrainian-21)
amod(Church-23, Catholic-22)
dobj(absorb-19, Church-23)
punct(forced-13, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#church

absorb :: And the $ 300 million sunflower industry is faring far worse than the $ 10.5 billion soybean industry , which is large enough to absorb short-term setbacks ./.
cc(faring-9, And-1)
det(industry-7, the-2)
amod(industry-7, $-3)
compound(million-5, 300-4)
nummod($-3, million-5)
compound(industry-7, sunflower-6)
nsubj(faring-9, industry-7)
aux(faring-9, is-8)
root(ROOT-0, faring-9)
advmod(worse-11, far-10)
xcomp(faring-9, worse-11)
case(industry-18, than-12)
det(industry-18, the-13)
amod(industry-18, $-14)
compound(billion-16, 10.5-15)
nummod($-14, billion-16)
compound(industry-18, soybean-17)
nmod:than(worse-11, industry-18)
nsubj(large-22, industry-18)
nsubj:xsubj(absorb-25, industry-18)
punct(industry-18, ,-19)
ref(industry-18, which-20)
cop(large-22, is-21)
acl:relcl(industry-18, large-22)
advmod(large-22, enough-23)
mark(absorb-25, to-24)
xcomp(large-22, absorb-25)
amod(setbacks-27, short-term-26)
dobj(absorb-25, setbacks-27)
punct(faring-9, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#setbacks

absorb :: The cost , about $ 250 a month , absorbs almost a third of her $ 1 , 400 monthly take-home pay ./.
det(cost-2, The-1)
nsubj(absorbs-10, cost-2)
punct(cost-2, ,-3)
advmod($-5, about-4)
appos(cost-2, $-5)
nummod($-5, 250-6)
det(month-8, a-7)
nmod:npmod($-5, month-8)
punct(cost-2, ,-9)
root(ROOT-0, absorbs-10)
advmod(third-13, almost-11)
advmod(third-13, a-12)
dobj(absorbs-10, third-13)
case(1-17, of-14)
dep(1-17, her-15)
dep(1-17, $-16)
nmod:of(third-13, 1-17)
punct(third-13, ,-18)
nummod(pay-22, 400-19)
amod(pay-22, monthly-20)
amod(pay-22, take-home-21)
appos(third-13, pay-22)
punct(absorbs-10, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#1

absorb :: `` When the market absorbs heavy selling , as this one did , and still comes back , it indicates to me that it wants to go higher , '' Mr. Radoccia said ./.
punct(said-33, ``-1)
advmod(absorbs-5, When-2)
det(market-4, the-3)
nsubj(absorbs-5, market-4)
nsubj(comes-16, market-4)
advcl(indicates-20, absorbs-5)
amod(selling-7, heavy-6)
dobj(absorbs-5, selling-7)
punct(did-12, ,-8)
mark(did-12, as-9)
det(one-11, this-10)
nsubj(did-12, one-11)
parataxis(absorbs-5, did-12)
punct(did-12, ,-13)
cc(absorbs-5, and-14)
advmod(comes-16, still-15)
conj:and(absorbs-5, comes-16)
advcl(indicates-20, comes-16)
advmod(comes-16, back-17)
punct(indicates-20, ,-18)
nsubj(indicates-20, it-19)
ccomp(said-33, indicates-20)
case(me-22, to-21)
nmod:to(indicates-20, me-22)
mark(wants-25, that-23)
nsubj(wants-25, it-24)
nsubj:xsubj(go-27, it-24)
ccomp(indicates-20, wants-25)
mark(go-27, to-26)
xcomp(wants-25, go-27)
advmod(go-27, higher-28)
punct(said-33, ,-29)
punct(said-33, ''-30)
compound(Radoccia-32, Mr.-31)
nsubj(said-33, Radoccia-32)
root(ROOT-0, said-33)
punct(said-33, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#selling

absorb :: Jordan , with a flagging economy and a 4.2 % annual birth-rate , could n't absorb another influx of refugees no matter how sympathetically it viewed their plight ./.
nsubj(absorb-16, Jordan-1)
punct(Jordan-1, ,-2)
case(economy-6, with-3)
det(economy-6, a-4)
amod(economy-6, flagging-5)
nmod:with(Jordan-1, economy-6)
cc(economy-6, and-7)
det(birth-rate-12, a-8)
compound(%-10, 4.2-9)
amod(birth-rate-12, %-10)
amod(birth-rate-12, annual-11)
nmod:with(Jordan-1, birth-rate-12)
conj:and(economy-6, birth-rate-12)
punct(Jordan-1, ,-13)
aux(absorb-16, could-14)
neg(absorb-16, n't-15)
root(ROOT-0, absorb-16)
det(influx-18, another-17)
dobj(absorb-16, influx-18)
case(refugees-20, of-19)
nmod:of(influx-18, refugees-20)
neg(matter-22, no-21)
advmod(absorb-16, matter-22)
advmod(sympathetically-24, how-23)
advmod(viewed-26, sympathetically-24)
nsubj(viewed-26, it-25)
ccomp(matter-22, viewed-26)
nmod:poss(plight-28, their-27)
dobj(viewed-26, plight-28)
punct(absorb-16, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#refugees

absorb :: Some diamond analysts said dealers may find it difficult to absorb De Beers latest price increase , particularly since it followed a 10 % rise in prices in early October ./.
det(analysts-3, Some-1)
compound(analysts-3, diamond-2)
nsubj(said-4, analysts-3)
root(ROOT-0, said-4)
nsubj(find-7, dealers-5)
aux(find-7, may-6)
ccomp(said-4, find-7)
nsubj(absorb-11, it-8)
dep(absorb-11, difficult-9)
mark(absorb-11, to-10)
xcomp(find-7, absorb-11)
compound(Beers-13, De-12)
dobj(absorb-11, Beers-13)
amod(increase-16, latest-14)
compound(increase-16, price-15)
dep(Beers-13, increase-16)
punct(Beers-13, ,-17)
advmod(followed-21, particularly-18)
mark(followed-21, since-19)
nsubj(followed-21, it-20)
advcl(absorb-11, followed-21)
det(rise-25, a-22)
compound(%-24, 10-23)
amod(rise-25, %-24)
dobj(followed-21, rise-25)
case(prices-27, in-26)
nmod:in(rise-25, prices-27)
case(October-30, in-28)
amod(October-30, early-29)
nmod:in(rise-25, October-30)
punct(said-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#beers

absorb :: By 1983 he had become so absorbed in his quest that he resigned as China correspondent for The Wall Street Journal and spent much of the next four years in China visiting relatives , searching libraries and scrabbling through underbrush looking for grave sites ./.
case(1983-2, By-1)
nmod:by(become-5, 1983-2)
nsubj(become-5, he-3)
aux(become-5, had-4)
root(ROOT-0, become-5)
advmod(absorbed-7, so-6)
xcomp(become-5, absorbed-7)
case(quest-10, in-8)
nmod:poss(quest-10, his-9)
nmod:in(absorbed-7, quest-10)
mark(resigned-13, that-11)
nsubj(resigned-13, he-12)
nsubj(spent-23, he-12)
ccomp(become-5, resigned-13)
case(correspondent-16, as-14)
compound(correspondent-16, China-15)
nmod:as(resigned-13, correspondent-16)
case(Journal-21, for-17)
det(Journal-21, The-18)
compound(Journal-21, Wall-19)
compound(Journal-21, Street-20)
nmod:for(correspondent-16, Journal-21)
cc(resigned-13, and-22)
ccomp(become-5, spent-23)
conj:and(resigned-13, spent-23)
dobj(spent-23, much-24)
case(years-29, of-25)
det(years-29, the-26)
amod(years-29, next-27)
nummod(years-29, four-28)
nmod:of(much-24, years-29)
case(China-31, in-30)
nmod:in(years-29, China-31)
xcomp(spent-23, visiting-32)
dobj(visiting-32, relatives-33)
punct(resigned-13, ,-34)
dep(resigned-13, searching-35)
dobj(searching-35, libraries-36)
cc(searching-35, and-37)
dep(resigned-13, scrabbling-38)
conj:and(searching-35, scrabbling-38)
case(underbrush-40, through-39)
nmod:through(scrabbling-38, underbrush-40)
acl(underbrush-40, looking-41)
case(sites-44, for-42)
amod(sites-44, grave-43)
nmod:for(looking-41, sites-44)
punct(become-5, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#quest

absorb :: Mr. Jackson has absorbed whatever the press will give him , the useful along with the condescending ./.
compound(Jackson-2, Mr.-1)
nsubj(absorbed-4, Jackson-2)
aux(absorbed-4, has-3)
root(ROOT-0, absorbed-4)
dobj(give-9, whatever-5)
det(press-7, the-6)
nsubj(give-9, press-7)
aux(give-9, will-8)
ccomp(absorbed-4, give-9)
dobj(give-9, him-10)
punct(absorbed-4, ,-11)
det(useful-13, the-12)
root(,-11, useful-13)
case(condescending-17, along-14)
mwe(along-14, with-15)
det(condescending-17, the-16)
nmod:along_with(useful-13, condescending-17)
punct(useful-13, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#jackson

absorb :: The Monitor 's losses are absorbed by the church 's working fund , which reportedly has declined during the past two years to about $ 200 million from more than $ 280 million , largely because of the stock-market crash ./.
det(Monitor-2, The-1)
nmod:poss(losses-4, Monitor-2)
case(Monitor-2, 's-3)
nsubjpass(absorbed-6, losses-4)
auxpass(absorbed-6, are-5)
root(ROOT-0, absorbed-6)
case(fund-12, by-7)
det(church-9, the-8)
nmod:poss(fund-12, church-9)
case(church-9, 's-10)
compound(fund-12, working-11)
nmod:agent(absorbed-6, fund-12)
nsubj(declined-17, fund-12)
punct(fund-12, ,-13)
ref(fund-12, which-14)
advmod(declined-17, reportedly-15)
aux(declined-17, has-16)
acl:relcl(fund-12, declined-17)
case(years-22, during-18)
det(years-22, the-19)
amod(years-22, past-20)
nummod(years-22, two-21)
nmod:during(declined-17, years-22)
case($-25, to-23)
advmod($-25, about-24)
nmod:to(declined-17, $-25)
compound(million-27, 200-26)
nummod($-25, million-27)
case($-31, from-28)
advmod($-31, more-29)
mwe(more-29, than-30)
nmod:from(declined-17, $-31)
compound(million-33, 280-32)
nummod($-31, million-33)
punct(fund-12, ,-34)
advmod(crash-40, largely-35)
case(crash-40, because-36)
mwe(because-36, of-37)
det(crash-40, the-38)
compound(crash-40, stock-market-39)
nmod:because_of(absorbed-6, crash-40)
punct(absorbed-6, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#losses

absorb :: The difference: An ever wealthier South Korea can imagine absorbing the poorer , less-populated Communist North , but Taiwan , no matter how rich , would be swallowed whole by the massive Chinese mainland ./.
det(difference-2, The-1)
root(ROOT-0, difference-2)
punct(difference-2, :-3)
det(Korea-8, An-4)
advmod(wealthier-6, ever-5)
amod(Korea-8, wealthier-6)
compound(Korea-8, South-7)
nsubj(imagine-10, Korea-8)
aux(imagine-10, can-9)
dep(difference-2, imagine-10)
xcomp(imagine-10, absorbing-11)
det(North-17, the-12)
amod(North-17, poorer-13)
punct(North-17, ,-14)
amod(North-17, less-populated-15)
amod(North-17, Communist-16)
dobj(absorbing-11, North-17)
punct(imagine-10, ,-18)
cc(imagine-10, but-19)
nsubjpass(swallowed-29, Taiwan-20)
punct(Taiwan-20, ,-21)
neg(matter-23, no-22)
appos(Taiwan-20, matter-23)
advmod(rich-25, how-24)
amod(matter-23, rich-25)
punct(Taiwan-20, ,-26)
aux(swallowed-29, would-27)
auxpass(swallowed-29, be-28)
dep(difference-2, swallowed-29)
conj:but(imagine-10, swallowed-29)
xcomp(swallowed-29, whole-30)
case(mainland-35, by-31)
det(mainland-35, the-32)
amod(mainland-35, massive-33)
amod(mainland-35, Chinese-34)
nmod:agent(swallowed-29, mainland-35)
punct(difference-2, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#north

absorb :: In most instances , executives at the absorbed companies are the merger casualties , says Steven Potter of Russell Reynolds Associates ./.
case(instances-3, In-1)
amod(instances-3, most-2)
nmod:in(casualties-13, instances-3)
punct(casualties-13, ,-4)
nsubj(casualties-13, executives-5)
case(companies-9, at-6)
det(companies-9, the-7)
amod(companies-9, absorbed-8)
nmod:at(executives-5, companies-9)
cop(casualties-13, are-10)
det(casualties-13, the-11)
compound(casualties-13, merger-12)
ccomp(says-15, casualties-13)
punct(says-15, ,-14)
root(ROOT-0, says-15)
compound(Potter-17, Steven-16)
nsubj(says-15, Potter-17)
case(Associates-21, of-18)
compound(Associates-21, Russell-19)
compound(Associates-21, Reynolds-20)
nmod:of(Potter-17, Associates-21)
punct(says-15, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#companies

absorb :: Burt Sugarman , chairman of the cement company , said third-quarter earnings were hurt by unrealized losses on stocks in its investment portfolio of about $ 2 million , and by having to absorb about $ 3.9 million of a $ 6.9 million net loss recently posted by Barris Industries Inc. with no associated tax benefits ./.
compound(Sugarman-2, Burt-1)
nsubj(said-10, Sugarman-2)
punct(Sugarman-2, ,-3)
appos(Sugarman-2, chairman-4)
case(company-8, of-5)
det(company-8, the-6)
compound(company-8, cement-7)
nmod:of(chairman-4, company-8)
punct(Sugarman-2, ,-9)
root(ROOT-0, said-10)
amod(earnings-12, third-quarter-11)
nsubjpass(hurt-14, earnings-12)
nsubjpass(having-32, earnings-12)
nsubj:xsubj(absorb-34, earnings-12)
auxpass(hurt-14, were-13)
ccomp(said-10, hurt-14)
case(losses-17, by-15)
amod(losses-17, unrealized-16)
nmod:agent(hurt-14, losses-17)
case(stocks-19, on-18)
nmod:on(losses-17, stocks-19)
case(portfolio-23, in-20)
nmod:poss(portfolio-23, its-21)
compound(portfolio-23, investment-22)
nmod:in(losses-17, portfolio-23)
case($-26, of-24)
advmod($-26, about-25)
nmod:of(portfolio-23, $-26)
compound(million-28, 2-27)
nummod($-26, million-28)
punct(hurt-14, ,-29)
cc(hurt-14, and-30)
mark(having-32, by-31)
ccomp(said-10, having-32)
conj:and(hurt-14, having-32)
mark(absorb-34, to-33)
xcomp(having-32, absorb-34)
advmod($-36, about-35)
dobj(absorb-34, $-36)
compound(million-38, 3.9-37)
nummod($-36, million-38)
case(loss-45, of-39)
det(loss-45, a-40)
amod(loss-45, $-41)
compound(million-43, 6.9-42)
nummod($-41, million-43)
amod(loss-45, net-44)
nmod:of($-36, loss-45)
advmod(posted-47, recently-46)
acl(loss-45, posted-47)
case(Inc.-51, by-48)
compound(Inc.-51, Barris-49)
compound(Inc.-51, Industries-50)
nmod:by(posted-47, Inc.-51)
case(benefits-56, with-52)
neg(benefits-56, no-53)
amod(benefits-56, associated-54)
compound(benefits-56, tax-55)
nmod:with(posted-47, benefits-56)
punct(said-10, .-57)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#loss

absorb :: Emulating Japan 's broad-based conglomerates , Samsung Electronics Co. will officially absorb Samsung Semiconductor & Telecommunications Co ./.
advcl(absorb-12, Emulating-1)
nmod:poss(conglomerates-5, Japan-2)
case(Japan-2, 's-3)
amod(conglomerates-5, broad-based-4)
dobj(Emulating-1, conglomerates-5)
punct(absorb-12, ,-6)
compound(Co.-9, Samsung-7)
compound(Co.-9, Electronics-8)
nsubj(absorb-12, Co.-9)
aux(absorb-12, will-10)
advmod(absorb-12, officially-11)
root(ROOT-0, absorb-12)
compound(Semiconductor-14, Samsung-13)
dobj(absorb-12, Semiconductor-14)
cc(Semiconductor-14, &-15)
compound(Co-17, Telecommunications-16)
dobj(absorb-12, Co-17)
conj:&(Semiconductor-14, Co-17)
punct(absorb-12, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#semiconductor

absorb :: As a result , total investment from all sources , domestic and foreign , of about 16 % of gross national product is still way short of the 25 % analysts believe is needed to absorb a fast-expanding labor force ./.
case(result-3, As-1)
det(result-3, a-2)
nmod:as(short-26, result-3)
punct(short-26, ,-4)
amod(investment-6, total-5)
nsubj(short-26, investment-6)
case(sources-9, from-7)
det(sources-9, all-8)
nmod:from(investment-6, sources-9)
punct(sources-9, ,-10)
amod(sources-9, domestic-11)
cc(domestic-11, and-12)
amod(sources-9, foreign-13)
conj:and(domestic-11, foreign-13)
punct(sources-9, ,-14)
case(%-18, of-15)
advmod(16-17, about-16)
nummod(%-18, 16-17)
nmod:of(sources-9, %-18)
case(product-22, of-19)
amod(product-22, gross-20)
amod(product-22, national-21)
nmod:of(%-18, product-22)
cop(short-26, is-23)
advmod(short-26, still-24)
advmod(short-26, way-25)
root(ROOT-0, short-26)
case(analysts-31, of-27)
det(analysts-31, the-28)
compound(%-30, 25-29)
amod(analysts-31, %-30)
nmod:of(short-26, analysts-31)
nsubjpass(needed-34, believe-32)
nsubj:xsubj(absorb-36, believe-32)
auxpass(needed-34, is-33)
ccomp(short-26, needed-34)
mark(absorb-36, to-35)
xcomp(needed-34, absorb-36)
det(force-40, a-37)
amod(force-40, fast-expanding-38)
compound(force-40, labor-39)
dobj(absorb-36, force-40)
punct(short-26, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#force

absorb :: Operations at metal and wood coffin manufacturing plants in Missouri , Indiana and Pennsylvania will remain open and , in fact , be expanded with additional shifts to absorb some of the workers and production idled elsewhere ./.
nsubj(remain-16, Operations-1)
nsubjpass(expanded-24, Operations-1)
case(plants-8, at-2)
compound(plants-8, metal-3)
cc(metal-3, and-4)
conj:and(metal-3, wood-5)
compound(plants-8, wood-5)
compound(plants-8, coffin-6)
compound(plants-8, manufacturing-7)
nmod:at(Operations-1, plants-8)
case(Missouri-10, in-9)
nmod:in(plants-8, Missouri-10)
punct(Missouri-10, ,-11)
nmod:in(plants-8, Indiana-12)
conj:and(Missouri-10, Indiana-12)
cc(Missouri-10, and-13)
nmod:in(plants-8, Pennsylvania-14)
conj:and(Missouri-10, Pennsylvania-14)
aux(remain-16, will-15)
root(ROOT-0, remain-16)
xcomp(remain-16, open-17)
cc(remain-16, and-18)
punct(expanded-24, ,-19)
case(fact-21, in-20)
nmod:in(expanded-24, fact-21)
punct(expanded-24, ,-22)
auxpass(expanded-24, be-23)
conj:and(remain-16, expanded-24)
case(shifts-27, with-25)
amod(shifts-27, additional-26)
nmod:with(expanded-24, shifts-27)
mark(absorb-29, to-28)
acl(shifts-27, absorb-29)
dobj(absorb-29, some-30)
case(workers-33, of-31)
det(workers-33, the-32)
nmod:of(some-30, workers-33)
cc(workers-33, and-34)
nmod:of(some-30, production-35)
conj:and(workers-33, production-35)
dep(expanded-24, idled-36)
advmod(idled-36, elsewhere-37)
punct(remain-16, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#workers

absorb :: It 's the smile of a man who has wit , but is too absorbed to indulge himself in humor ./.
nsubj(smile-4, It-1)
nsubjpass(absorbed-15, It-1)
nsubj:xsubj(indulge-17, It-1)
cop(smile-4, 's-2)
det(smile-4, the-3)
root(ROOT-0, smile-4)
case(man-7, of-5)
det(man-7, a-6)
nmod:of(smile-4, man-7)
nsubj(has-9, man-7)
ref(man-7, who-8)
acl:relcl(man-7, has-9)
dobj(has-9, wit-10)
punct(smile-4, ,-11)
cc(smile-4, but-12)
auxpass(absorbed-15, is-13)
advmod(absorbed-15, too-14)
conj:but(smile-4, absorbed-15)
mark(indulge-17, to-16)
xcomp(absorbed-15, indulge-17)
dobj(indulge-17, himself-18)
case(humor-20, in-19)
nmod:in(indulge-17, humor-20)
punct(smile-4, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#it

absorb :: A U.S. Department of Labor report prepared by the U.S. Embassy here said the country `` continues to rely heavily on export of labor , tramsmigration and the capability of the informal sector to absorb surplus manpower to take up each year 's slack in unemployment opportunities . ''/''
det(Department-3, A-1)
compound(Department-3, U.S.-2)
nsubj(said-13, Department-3)
case(report-6, of-4)
compound(report-6, Labor-5)
nmod:of(Department-3, report-6)
acl(Department-3, prepared-7)
case(Embassy-11, by-8)
det(Embassy-11, the-9)
compound(Embassy-11, U.S.-10)
nmod:by(prepared-7, Embassy-11)
advmod(said-13, here-12)
root(ROOT-0, said-13)
det(country-15, the-14)
nsubj(continues-17, country-15)
nsubj:xsubj(rely-19, country-15)
punct(continues-17, ``-16)
ccomp(said-13, continues-17)
mark(rely-19, to-18)
xcomp(continues-17, rely-19)
advmod(rely-19, heavily-20)
case(export-22, on-21)
nmod:on(rely-19, export-22)
case(labor-24, of-23)
nmod:of(export-22, labor-24)
punct(labor-24, ,-25)
nmod:of(export-22, tramsmigration-26)
conj:and(labor-24, tramsmigration-26)
cc(labor-24, and-27)
det(capability-29, the-28)
nmod:of(export-22, capability-29)
conj:and(labor-24, capability-29)
case(sector-33, of-30)
det(sector-33, the-31)
amod(sector-33, informal-32)
nmod:of(capability-29, sector-33)
mark(absorb-35, to-34)
acl(capability-29, absorb-35)
amod(manpower-37, surplus-36)
dobj(absorb-35, manpower-37)
mark(take-39, to-38)
advcl(absorb-35, take-39)
compound:prt(take-39, up-40)
det(year-42, each-41)
nmod:poss(slack-44, year-42)
case(year-42, 's-43)
dobj(take-39, slack-44)
case(opportunities-47, in-45)
compound(opportunities-47, unemployment-46)
nmod:in(slack-44, opportunities-47)
punct(said-13, .-48)
punct(said-13, ''-49)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: absorb#manpower

absorb :: An Energy Department spokesman says the sulfur dioxide might be simultaneously recoverable through the use of powdered limestone , which tends to absorb the sulfur ./.
det(spokesman-4, An-1)
compound(spokesman-4, Energy-2)
compound(spokesman-4, Department-3)
nsubj(says-5, spokesman-4)
root(ROOT-0, says-5)
det(dioxide-8, the-6)
compound(dioxide-8, sulfur-7)
nsubj(recoverable-12, dioxide-8)
aux(recoverable-12, might-9)
cop(recoverable-12, be-10)
advmod(recoverable-12, simultaneously-11)
ccomp(says-5, recoverable-12)
case(use-15, through-13)
det(use-15, the-14)
nmod:through(recoverable-12, use-15)
case(limestone-18, of-16)
amod(limestone-18, powdered-17)
nmod:of(use-15, limestone-18)
nsubj(tends-21, limestone-18)
nsubj:xsubj(absorb-23, limestone-18)
punct(limestone-18, ,-19)
ref(limestone-18, which-20)
acl:relcl(limestone-18, tends-21)
mark(absorb-23, to-22)
xcomp(tends-21, absorb-23)
det(sulfur-25, the-24)
dobj(absorb-23, sulfur-25)
punct(says-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#sulfur

absorb :: He said that MMWEC will have to absorb only $ 4 million in additional annual costs now paid by the Vermont utilities ./.
nsubj(said-2, He-1)
root(ROOT-0, said-2)
mark(have-6, that-3)
nsubj(have-6, MMWEC-4)
nsubj:xsubj(absorb-8, MMWEC-4)
aux(have-6, will-5)
ccomp(said-2, have-6)
mark(absorb-8, to-7)
xcomp(have-6, absorb-8)
advmod($-10, only-9)
dobj(absorb-8, $-10)
compound(million-12, 4-11)
nummod($-10, million-12)
case(costs-16, in-13)
amod(costs-16, additional-14)
amod(costs-16, annual-15)
nmod:in($-10, costs-16)
advmod(paid-18, now-17)
acl(costs-16, paid-18)
case(utilities-22, by-19)
det(utilities-22, the-20)
compound(utilities-22, Vermont-21)
nmod:by(paid-18, utilities-22)
punct(said-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#$

absorb :: To expect banks to absorb a cost without a commensurate charge defies logic ./.
mark(expect-2, To-1)
root(ROOT-0, expect-2)
dobj(expect-2, banks-3)
nsubj:xsubj(absorb-5, banks-3)
mark(absorb-5, to-4)
xcomp(expect-2, absorb-5)
det(cost-7, a-6)
dobj(absorb-5, cost-7)
case(charge-11, without-8)
det(charge-11, a-9)
amod(charge-11, commensurate-10)
nmod:without(absorb-5, charge-11)
dep(expect-2, defies-12)
dobj(defies-12, logic-13)
punct(expect-2, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#cost

absorb :: Switzerland is an example of a country that has pursued a domestic price rule and achieved price stability while allowing fluctuations in the exchange rate to absorb real shocks ./.
nsubj(example-4, Switzerland-1)
cop(example-4, is-2)
det(example-4, an-3)
root(ROOT-0, example-4)
case(country-7, of-5)
det(country-7, a-6)
nmod:of(example-4, country-7)
nsubj(pursued-10, country-7)
nsubj(achieved-16, country-7)
ref(country-7, that-8)
aux(pursued-10, has-9)
acl:relcl(country-7, pursued-10)
det(rule-14, a-11)
amod(rule-14, domestic-12)
compound(rule-14, price-13)
dobj(pursued-10, rule-14)
cc(pursued-10, and-15)
acl:relcl(country-7, achieved-16)
conj:and(pursued-10, achieved-16)
compound(stability-18, price-17)
dobj(achieved-16, stability-18)
mark(allowing-20, while-19)
advcl(pursued-10, allowing-20)
dobj(allowing-20, fluctuations-21)
nsubj:xsubj(absorb-27, fluctuations-21)
case(rate-25, in-22)
det(rate-25, the-23)
compound(rate-25, exchange-24)
nmod:in(fluctuations-21, rate-25)
mark(absorb-27, to-26)
xcomp(allowing-20, absorb-27)
amod(shocks-29, real-28)
dobj(absorb-27, shocks-29)
punct(example-4, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#shocks

absorb :: At this year 's rate of $ 3.25 billion a month as tracked by IDD , it would take nearly four years for buy-outs to absorb $ 150 billion ./.
case(rate-5, At-1)
det(year-3, this-2)
nmod:poss(rate-5, year-3)
case(year-3, 's-4)
nmod:at(take-19, rate-5)
case($-7, of-6)
nmod:of(rate-5, $-7)
compound(billion-9, 3.25-8)
nummod($-7, billion-9)
det(month-11, a-10)
nmod:npmod($-7, month-11)
mark(tracked-13, as-12)
acl(rate-5, tracked-13)
case(IDD-15, by-14)
nmod:by(tracked-13, IDD-15)
punct(take-19, ,-16)
nsubj(take-19, it-17)
aux(take-19, would-18)
root(ROOT-0, take-19)
advmod(four-21, nearly-20)
nummod(years-22, four-21)
nmod:tmod(take-19, years-22)
mark(absorb-26, for-23)
nsubj(absorb-26, buy-outs-24)
mark(absorb-26, to-25)
advcl(take-19, absorb-26)
dobj(absorb-26, $-27)
compound(billion-29, 150-28)
nummod($-27, billion-29)
punct(take-19, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#$

absorb :: While reconstruction projects may initially absorb many of the workers , the need to find work for men demobilized from Iraq 's million-strong army makes it unlikely that guest labor will remain at current levels ./.
mark(absorb-6, While-1)
compound(projects-3, reconstruction-2)
nsubj(absorb-6, projects-3)
aux(absorb-6, may-4)
advmod(absorb-6, initially-5)
advcl(makes-25, absorb-6)
dobj(absorb-6, many-7)
case(workers-10, of-8)
det(workers-10, the-9)
nmod:of(many-7, workers-10)
punct(makes-25, ,-11)
det(need-13, the-12)
nsubj(makes-25, need-13)
mark(find-15, to-14)
acl(need-13, find-15)
dobj(find-15, work-16)
case(men-18, for-17)
nmod:for(work-16, men-18)
acl(men-18, demobilized-19)
case(army-24, from-20)
nmod:poss(army-24, Iraq-21)
case(Iraq-21, 's-22)
amod(army-24, million-strong-23)
nmod:from(demobilized-19, army-24)
root(ROOT-0, makes-25)
nsubj(remain-32, it-26)
dep(remain-32, unlikely-27)
mark(remain-32, that-28)
compound(labor-30, guest-29)
nsubj(remain-32, labor-30)
aux(remain-32, will-31)
xcomp(makes-25, remain-32)
case(levels-35, at-33)
amod(levels-35, current-34)
nmod:at(remain-32, levels-35)
punct(makes-25, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#workers

absorb :: It had been long assumed that the agency would n't act until late on a Friday afternoon in order to give market participants a weekend to absorb the news ./.
nsubjpass(assumed-5, It-1)
aux(assumed-5, had-2)
auxpass(assumed-5, been-3)
advmod(assumed-5, long-4)
root(ROOT-0, assumed-5)
mark(act-11, that-6)
det(agency-8, the-7)
nsubj(act-11, agency-8)
aux(act-11, would-9)
neg(act-11, n't-10)
ccomp(assumed-5, act-11)
case(late-13, until-12)
advcl(act-11, late-13)
case(afternoon-17, on-14)
det(afternoon-17, a-15)
compound(afternoon-17, Friday-16)
nmod:on(late-13, afternoon-17)
mark(give-21, in-18)
mwe(in-18, order-19)
mark(give-21, to-20)
advcl(act-11, give-21)
compound(participants-23, market-22)
iobj(give-21, participants-23)
det(weekend-25, a-24)
dobj(give-21, weekend-25)
mark(absorb-27, to-26)
acl(weekend-25, absorb-27)
det(news-29, the-28)
dobj(absorb-27, news-29)
punct(assumed-5, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#news

absorb :: -- The peaceful absorption into the world economy and polity of nations now moving swiftly to absorb all the major technologies , a group including among others , China and India , Brazil and Mexico ./.
punct(moving-14, ---1)
det(absorption-4, The-2)
amod(absorption-4, peaceful-3)
nsubj(moving-14, absorption-4)
case(economy-8, into-5)
det(economy-8, the-6)
compound(economy-8, world-7)
nmod:into(absorption-4, economy-8)
cc(economy-8, and-9)
nmod:into(absorption-4, polity-10)
conj:and(economy-8, polity-10)
case(nations-12, of-11)
nmod:of(economy-8, nations-12)
advmod(moving-14, now-13)
root(ROOT-0, moving-14)
advmod(moving-14, swiftly-15)
mark(absorb-17, to-16)
xcomp(moving-14, absorb-17)
det:predet(technologies-21, all-18)
det(technologies-21, the-19)
amod(technologies-21, major-20)
dobj(absorb-17, technologies-21)
punct(moving-14, ,-22)
det(group-24, a-23)
dobj(moving-14, group-24)
nsubj:xsubj(absorb-17, group-24)
case(others-27, including-25)
case(others-27, among-26)
nmod:among(group-24, others-27)
punct(others-27, ,-28)
nmod:among(group-24, China-29)
conj:and(others-27, China-29)
cc(others-27, and-30)
nmod:among(group-24, India-31)
conj:and(others-27, India-31)
punct(group-24, ,-32)
appos(group-24, Brazil-33)
cc(Brazil-33, and-34)
appos(group-24, Mexico-35)
conj:and(Brazil-33, Mexico-35)
punct(moving-14, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#technologies

absorb :: The yellow beta carotene pigment absorbs blue -LRB- not yellow -RRB- laser light ./.
det(pigment-5, The-1)
amod(pigment-5, yellow-2)
compound(pigment-5, beta-3)
compound(pigment-5, carotene-4)
nsubj(absorbs-6, pigment-5)
root(ROOT-0, absorbs-6)
amod(light-13, blue-7)
punct(yellow-10, -LRB--8)
dep(yellow-10, not-9)
dep(blue-7, yellow-10)
punct(yellow-10, -RRB--11)
compound(light-13, laser-12)
dobj(absorbs-6, light-13)
punct(absorbs-6, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#light

absorb :: With its strength in the Old South , the Rocky Mountain and northern plains states and such dependable GOP bastions as Indiana , the party can absorb some losses and still accumulate close to 200 electoral votes ./.
case(strength-3, With-1)
nmod:poss(strength-3, its-2)
root(ROOT-0, strength-3)
case(South-7, in-4)
det(South-7, the-5)
amod(South-7, Old-6)
nmod:in(strength-3, South-7)
punct(strength-3, ,-8)
det(Mountain-11, the-9)
compound(Mountain-11, Rocky-10)
root(,-8, Mountain-11)
cc(Mountain-11, and-12)
compound(states-15, northern-13)
compound(states-15, plains-14)
root(,-8, states-15)
conj:and(Mountain-11, states-15)
cc(Mountain-11, and-16)
amod(bastions-20, such-17)
amod(bastions-20, dependable-18)
compound(bastions-20, GOP-19)
root(,-8, bastions-20)
conj:and(Mountain-11, bastions-20)
case(Indiana-22, as-21)
nmod:as(bastions-20, Indiana-22)
punct(Indiana-22, ,-23)
det(party-25, the-24)
nsubj(absorb-27, party-25)
nsubj(accumulate-32, party-25)
aux(absorb-27, can-26)
acl:relcl(Indiana-22, absorb-27)
det(losses-29, some-28)
dobj(absorb-27, losses-29)
cc(absorb-27, and-30)
advmod(accumulate-32, still-31)
acl:relcl(Indiana-22, accumulate-32)
conj:and(absorb-27, accumulate-32)
advmod(200-35, close-33)
dep(200-35, to-34)
nummod(votes-37, 200-35)
amod(votes-37, electoral-36)
dobj(accumulate-32, votes-37)
punct(Mountain-11, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#losses

absorb :: The FDIC staff also noted that Wells Fargo would have given the agency no control over the selection and management of bad loans for which the agency would have to absorb all losses ./.
det(staff-3, The-1)
compound(staff-3, FDIC-2)
nsubj(noted-5, staff-3)
advmod(noted-5, also-4)
root(ROOT-0, noted-5)
mark(given-11, that-6)
compound(Fargo-8, Wells-7)
nsubj(given-11, Fargo-8)
aux(given-11, would-9)
aux(given-11, have-10)
ccomp(noted-5, given-11)
det(agency-13, the-12)
iobj(given-11, agency-13)
neg(control-15, no-14)
dobj(given-11, control-15)
case(selection-18, over-16)
det(selection-18, the-17)
nmod:over(control-15, selection-18)
cc(selection-18, and-19)
nmod:over(control-15, management-20)
conj:and(selection-18, management-20)
case(loans-23, of-21)
amod(loans-23, bad-22)
nmod:of(selection-18, loans-23)
nmod:for(have-29, loans-23)
case(which-25, for-24)
ref(loans-23, which-25)
det(agency-27, the-26)
nsubj(have-29, agency-27)
nsubj:xsubj(absorb-31, agency-27)
aux(have-29, would-28)
acl:relcl(loans-23, have-29)
mark(absorb-31, to-30)
xcomp(have-29, absorb-31)
det(losses-33, all-32)
dobj(absorb-31, losses-33)
punct(noted-5, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#losses

absorb :: `` We 're talking about $ 50 billion to $ 60 billion of debt that the taxpayer will have to absorb , '' Emory University 's Mr. Benston says ./.
punct(says-29, ``-1)
nsubj(talking-4, We-2)
aux(talking-4, 're-3)
ccomp(says-29, talking-4)
advmod($-6, about-5)
dep($-10, $-6)
compound($-10, 50-7)
compound($-10, billion-8)
dep($-10, to-9)
dobj(talking-4, $-10)
dobj(have-19, $-10)
nsubj:xsubj(absorb-21, $-10)
compound(billion-12, 60-11)
nummod($-10, billion-12)
case(debt-14, of-13)
nmod:of($-10, debt-14)
ref($-10, that-15)
det(taxpayer-17, the-16)
nsubj(have-19, taxpayer-17)
aux(have-19, will-18)
acl:relcl($-10, have-19)
mark(absorb-21, to-20)
xcomp(have-19, absorb-21)
punct(says-29, ,-22)
punct(says-29, ''-23)
compound(University-25, Emory-24)
nmod:poss(Benston-28, University-25)
case(University-25, 's-26)
compound(Benston-28, Mr.-27)
nsubj(says-29, Benston-28)
root(ROOT-0, says-29)
punct(says-29, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#$

absorb :: Its value depends on how quickly you can bring it to market , and there are problems like zoning and water and the ability of the market to absorb inventory . ''/''
nmod:poss(value-2, Its-1)
nsubj(depends-3, value-2)
root(ROOT-0, depends-3)
mark(bring-9, on-4)
advmod(quickly-6, how-5)
advmod(bring-9, quickly-6)
nsubj(bring-9, you-7)
aux(bring-9, can-8)
advcl(depends-3, bring-9)
dobj(bring-9, it-10)
case(market-12, to-11)
nmod:to(bring-9, market-12)
punct(bring-9, ,-13)
cc(bring-9, and-14)
expl(are-16, there-15)
advcl(depends-3, are-16)
conj:and(bring-9, are-16)
nsubj(are-16, problems-17)
mark(zoning-19, like-18)
acl(problems-17, zoning-19)
cc(zoning-19, and-20)
acl(problems-17, water-21)
conj:and(zoning-19, water-21)
cc(zoning-19, and-22)
det(ability-24, the-23)
acl(problems-17, ability-24)
conj:and(zoning-19, ability-24)
case(market-27, of-25)
det(market-27, the-26)
nmod:of(ability-24, market-27)
mark(absorb-29, to-28)
acl(ability-24, absorb-29)
dobj(absorb-29, inventory-30)
punct(depends-3, .-31)
punct(depends-3, ''-32)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: absorb#inventory

absorb :: The FDIC package would sharply boost the merged institution 's capital and give it a huge cushion to absorb future loan losses ./.
det(package-3, The-1)
compound(package-3, FDIC-2)
nsubj(boost-6, package-3)
nsubj(give-13, package-3)
aux(boost-6, would-4)
advmod(boost-6, sharply-5)
root(ROOT-0, boost-6)
det(institution-9, the-7)
amod(institution-9, merged-8)
nmod:poss(capital-11, institution-9)
case(institution-9, 's-10)
dobj(boost-6, capital-11)
cc(boost-6, and-12)
conj:and(boost-6, give-13)
iobj(give-13, it-14)
det(cushion-17, a-15)
amod(cushion-17, huge-16)
dobj(give-13, cushion-17)
mark(absorb-19, to-18)
acl(cushion-17, absorb-19)
amod(losses-22, future-20)
compound(losses-22, loan-21)
dobj(absorb-19, losses-22)
punct(boost-6, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#losses

absorb :: In spite of her wifely obligations -LRB- which ceased upon her official separation from Teddy in 1911 , followed by divorce -RRB- , her wealth and social standing allowed her to go where she pleased , read what she liked , and enjoy all she could absorb of a world that seemed to her to overflow with richness and beauty ./.
case(obligations-6, In-1)
mwe(In-1, spite-2)
mwe(In-1, of-3)
nmod:poss(obligations-6, her-4)
amod(obligations-6, wifely-5)
nmod:in_spite_of(allowed-29, obligations-6)
punct(ceased-9, -LRB--7)
nsubj(ceased-9, which-8)
dep(obligations-6, ceased-9)
case(separation-13, upon-10)
nmod:poss(separation-13, her-11)
amod(separation-13, official-12)
nmod:upon(ceased-9, separation-13)
case(Teddy-15, from-14)
nmod:from(separation-13, Teddy-15)
case(1911-17, in-16)
nmod:in(separation-13, 1911-17)
punct(ceased-9, ,-18)
dep(ceased-9, followed-19)
case(divorce-21, by-20)
nmod:by(followed-19, divorce-21)
punct(ceased-9, -RRB--22)
punct(allowed-29, ,-23)
nmod:poss(wealth-25, her-24)
nsubj(allowed-29, wealth-25)
nsubj(read-37, wealth-25)
nsubj(enjoy-43, wealth-25)
cc(wealth-25, and-26)
amod(standing-28, social-27)
conj:and(wealth-25, standing-28)
nsubj(allowed-29, standing-28)
root(ROOT-0, allowed-29)
dobj(allowed-29, her-30)
nsubj:xsubj(go-32, her-30)
mark(go-32, to-31)
xcomp(allowed-29, go-32)
advmod(pleased-35, where-33)
nsubj(pleased-35, she-34)
advcl(go-32, pleased-35)
punct(allowed-29, ,-36)
conj:and(allowed-29, read-37)
dobj(liked-40, what-38)
nsubj(liked-40, she-39)
ccomp(read-37, liked-40)
punct(allowed-29, ,-41)
cc(allowed-29, and-42)
conj:and(allowed-29, enjoy-43)
dobj(enjoy-43, all-44)
nsubj(absorb-47, she-45)
aux(absorb-47, could-46)
acl:relcl(all-44, absorb-47)
case(world-50, of-48)
det(world-50, a-49)
nmod:of(absorb-47, world-50)
nsubj(seemed-52, world-50)
ref(world-50, that-51)
acl:relcl(world-50, seemed-52)
case(overflow-56, to-53)
dep(overflow-56, her-54)
case(overflow-56, to-55)
nmod:to(seemed-52, overflow-56)
case(richness-58, with-57)
nmod:with(overflow-56, richness-58)
cc(richness-58, and-59)
nmod:with(overflow-56, beauty-60)
conj:and(richness-58, beauty-60)
punct(allowed-29, .-61)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#she

absorb :: In no case did expenditures rise enough after the war to absorb the revenue that would have been available if the war taxes had been retained ./.
case(case-3, In-1)
neg(case-3, no-2)
nmod:in(rise-6, case-3)
aux(rise-6, did-4)
nsubj(rise-6, expenditures-5)
nsubj:xsubj(absorb-12, expenditures-5)
root(ROOT-0, rise-6)
advmod(rise-6, enough-7)
case(war-10, after-8)
det(war-10, the-9)
nmod:after(rise-6, war-10)
mark(absorb-12, to-11)
xcomp(rise-6, absorb-12)
det(revenue-14, the-13)
dobj(absorb-12, revenue-14)
nsubj(available-19, revenue-14)
ref(revenue-14, that-15)
aux(available-19, would-16)
aux(available-19, have-17)
cop(available-19, been-18)
acl:relcl(revenue-14, available-19)
mark(retained-26, if-20)
det(taxes-23, the-21)
compound(taxes-23, war-22)
nsubjpass(retained-26, taxes-23)
aux(retained-26, had-24)
auxpass(retained-26, been-25)
advcl(available-19, retained-26)
punct(rise-6, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#revenue

absorb :: This time , the ground absorbed the shock waves enough to transfer her images to the metal in bas-relief ./.
det(time-2, This-1)
nmod:tmod(absorbed-6, time-2)
punct(absorbed-6, ,-3)
det(ground-5, the-4)
nsubj(absorbed-6, ground-5)
root(ROOT-0, absorbed-6)
det(waves-9, the-7)
compound(waves-9, shock-8)
dobj(absorbed-6, waves-9)
advmod(absorbed-6, enough-10)
mark(transfer-12, to-11)
dep(enough-10, transfer-12)
nmod:poss(images-14, her-13)
dobj(transfer-12, images-14)
case(metal-17, to-15)
det(metal-17, the-16)
nmod:to(transfer-12, metal-17)
case(bas-relief-19, in-18)
nmod:in(transfer-12, bas-relief-19)
punct(absorbed-6, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#waves

absorb :: He added that employees who do n't move to the rival 's factory in Chicago probably will be absorbed by Bally 's growing fitness-equipment manufacturing businesses ./.
nsubj(added-2, He-1)
root(ROOT-0, added-2)
mark(absorbed-19, that-3)
nsubj(move-8, employees-4)
nsubjpass(absorbed-19, employees-4)
ref(employees-4, who-5)
aux(move-8, do-6)
neg(move-8, n't-7)
acl:relcl(employees-4, move-8)
case(factory-13, to-9)
det(rival-11, the-10)
nmod:poss(factory-13, rival-11)
case(rival-11, 's-12)
nmod:to(move-8, factory-13)
case(Chicago-15, in-14)
nmod:in(factory-13, Chicago-15)
advmod(absorbed-19, probably-16)
aux(absorbed-19, will-17)
auxpass(absorbed-19, be-18)
ccomp(added-2, absorbed-19)
case(businesses-26, by-20)
nmod:poss(businesses-26, Bally-21)
case(Bally-21, 's-22)
amod(businesses-26, growing-23)
compound(businesses-26, fitness-equipment-24)
compound(businesses-26, manufacturing-25)
nmod:agent(absorbed-19, businesses-26)
punct(added-2, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#employees

absorb :: Most of these losses must be absorbed by the FSLIC , the industry 's insurer , analysts said ./.
nsubjpass(absorbed-7, Most-1)
case(losses-4, of-2)
det(losses-4, these-3)
nmod:of(Most-1, losses-4)
aux(absorbed-7, must-5)
auxpass(absorbed-7, be-6)
ccomp(said-18, absorbed-7)
case(FSLIC-10, by-8)
det(FSLIC-10, the-9)
nmod:agent(absorbed-7, FSLIC-10)
punct(FSLIC-10, ,-11)
det(industry-13, the-12)
nmod:poss(insurer-15, industry-13)
case(industry-13, 's-14)
appos(FSLIC-10, insurer-15)
punct(said-18, ,-16)
nsubj(said-18, analysts-17)
root(ROOT-0, said-18)
punct(said-18, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#most

absorb :: It is the growth of the Hidden Economy -- these millions of small , private businesses -- that cushions the shock of a crashing Dow , that absorbs the workers cut loose by big firms when they restructure and that created most of those 17 million jobs ./.
nsubj(growth-4, It-1)
cop(growth-4, is-2)
det(growth-4, the-3)
root(ROOT-0, growth-4)
case(Economy-8, of-5)
det(Economy-8, the-6)
amod(Economy-8, Hidden-7)
nmod:of(growth-4, Economy-8)
punct(growth-4, ---9)
det(millions-11, these-10)
dep(growth-4, millions-11)
case(businesses-16, of-12)
amod(businesses-16, small-13)
punct(businesses-16, ,-14)
amod(businesses-16, private-15)
nmod:of(millions-11, businesses-16)
punct(growth-4, ---17)
dep(growth-4, that-18)
dep(that-18, cushions-19)
det(shock-21, the-20)
dobj(cushions-19, shock-21)
case(Dow-25, of-22)
det(Dow-25, a-23)
amod(Dow-25, crashing-24)
nmod:of(shock-21, Dow-25)
nsubj(absorbs-28, Dow-25)
punct(Dow-25, ,-26)
ref(Dow-25, that-27)
acl:relcl(Dow-25, absorbs-28)
det(workers-30, the-29)
nsubj(cut-31, workers-30)
ccomp(absorbs-28, cut-31)
xcomp(cut-31, loose-32)
case(firms-35, by-33)
amod(firms-35, big-34)
nmod:by(cut-31, firms-35)
advmod(restructure-38, when-36)
nsubj(restructure-38, they-37)
advcl(cut-31, restructure-38)
cc(restructure-38, and-39)
advcl(cut-31, that-40)
conj:and(restructure-38, that-40)
acl(that-40, created-41)
dobj(created-41, most-42)
case(jobs-47, of-43)
det(jobs-47, those-44)
compound(million-46, 17-45)
nummod(jobs-47, million-46)
nmod:of(most-42, jobs-47)
punct(growth-4, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#dow

absorb :: `` The market is absorbing all of the mill 's output of supercalender paper , '' Mr. Nugent said ./.
punct(said-19, ``-1)
det(market-3, The-2)
nsubj(absorbing-5, market-3)
aux(absorbing-5, is-4)
ccomp(said-19, absorbing-5)
dobj(absorbing-5, all-6)
case(output-11, of-7)
det(mill-9, the-8)
nmod:poss(output-11, mill-9)
case(mill-9, 's-10)
nmod:of(all-6, output-11)
case(paper-14, of-12)
compound(paper-14, supercalender-13)
nmod:of(output-11, paper-14)
punct(said-19, ,-15)
punct(said-19, ''-16)
compound(Nugent-18, Mr.-17)
nsubj(said-19, Nugent-18)
root(ROOT-0, said-19)
punct(said-19, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#output

absorb :: Longtime American expatriates here like to recall what happened in the 1970s when Japan easily absorbed the same heavy body blows from the organization of Petroleum Exporting Countries that bring other developed nations to their knees ./.
amod(expatriates-3, Longtime-1)
compound(expatriates-3, American-2)
root(ROOT-0, expatriates-3)
advmod(expatriates-3, here-4)
dep(expatriates-3, like-5)
mark(recall-7, to-6)
xcomp(like-5, recall-7)
nsubj(happened-9, what-8)
ccomp(recall-7, happened-9)
case(1970s-12, in-10)
det(1970s-12, the-11)
nmod:in(happened-9, 1970s-12)
advmod(absorbed-16, when-13)
nsubj(absorbed-16, Japan-14)
advmod(absorbed-16, easily-15)
advcl(happened-9, absorbed-16)
det(blows-21, the-17)
amod(blows-21, same-18)
amod(blows-21, heavy-19)
compound(blows-21, body-20)
dobj(absorbed-16, blows-21)
case(organization-24, from-22)
det(organization-24, the-23)
nmod:from(absorbed-16, organization-24)
case(Countries-28, of-25)
compound(Countries-28, Petroleum-26)
amod(Countries-28, Exporting-27)
nmod:of(organization-24, Countries-28)
nsubj(bring-30, Countries-28)
ref(Countries-28, that-29)
acl:relcl(Countries-28, bring-30)
amod(nations-33, other-31)
amod(nations-33, developed-32)
dobj(bring-30, nations-33)
case(knees-36, to-34)
nmod:poss(knees-36, their-35)
nmod:to(bring-30, knees-36)
punct(expatriates-3, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#blows

absorb :: An early new accord would absorb the existing one ./.
det(accord-4, An-1)
amod(accord-4, early-2)
amod(accord-4, new-3)
nsubj(absorb-6, accord-4)
aux(absorb-6, would-5)
root(ROOT-0, absorb-6)
det(one-9, the-7)
amod(one-9, existing-8)
dobj(absorb-6, one-9)
punct(absorb-6, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#one

absorb :: GM ca n't continue to absorb indefinitely the large fixed costs represented by unused capacity , he says ./.
nsubj(continue-4, GM-1)
nsubj:xsubj(absorb-6, GM-1)
aux(continue-4, ca-2)
neg(continue-4, n't-3)
ccomp(says-18, continue-4)
mark(absorb-6, to-5)
xcomp(continue-4, absorb-6)
advmod(absorb-6, indefinitely-7)
det(costs-11, the-8)
amod(costs-11, large-9)
amod(costs-11, fixed-10)
dobj(absorb-6, costs-11)
acl(costs-11, represented-12)
case(capacity-15, by-13)
amod(capacity-15, unused-14)
nmod:by(represented-12, capacity-15)
punct(says-18, ,-16)
nsubj(says-18, he-17)
root(ROOT-0, says-18)
punct(says-18, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#costs

absorb :: `` It is actually easier for this market to absorb small increases for the yen -LRB- against the dollar -RRB- , '' Mr. Nakaharu said , `` although of course a sudden fall for the dollar would be a problem . ''/''
punct(said-25, ``-1)
nsubj(easier-5, It-2)
cop(easier-5, is-3)
advmod(easier-5, actually-4)
ccomp(said-25, easier-5)
mark(absorb-10, for-6)
det(market-8, this-7)
nsubj(absorb-10, market-8)
mark(absorb-10, to-9)
advcl(easier-5, absorb-10)
amod(increases-12, small-11)
dobj(absorb-10, increases-12)
case(yen-15, for-13)
det(yen-15, the-14)
nmod:for(increases-12, yen-15)
punct(yen-15, -LRB--16)
case(dollar-19, against-17)
det(dollar-19, the-18)
nmod:against(yen-15, dollar-19)
punct(yen-15, -RRB--20)
punct(said-25, ,-21)
punct(said-25, ''-22)
compound(Nakaharu-24, Mr.-23)
nsubj(said-25, Nakaharu-24)
root(ROOT-0, said-25)
punct(said-25, ,-26)
punct(said-25, ``-27)
case(course-30, although-28)
mwe(although-28, of-29)
nmod:although_of(problem-40, course-30)
det(fall-33, a-31)
amod(fall-33, sudden-32)
nsubj(problem-40, fall-33)
case(dollar-36, for-34)
det(dollar-36, the-35)
nmod:for(fall-33, dollar-36)
aux(problem-40, would-37)
cop(problem-40, be-38)
det(problem-40, a-39)
ccomp(said-25, problem-40)
punct(said-25, .-41)
punct(said-25, ''-42)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: absorb#increases

absorb :: Nearly all of this growth is in the developing countries of Africa , Asia and Latin America , which are least capable of absorbing it , the report said ./.
advmod(all-2, Nearly-1)
nsubj(countries-10, all-2)
case(growth-5, of-3)
det(growth-5, this-4)
nmod:of(all-2, growth-5)
cop(countries-10, is-6)
case(countries-10, in-7)
det(countries-10, the-8)
amod(countries-10, developing-9)
nsubj(capable-22, countries-10)
ccomp(said-29, countries-10)
case(Africa-12, of-11)
nmod:of(countries-10, Africa-12)
punct(Africa-12, ,-13)
nmod:of(countries-10, Asia-14)
conj:and(Africa-12, Asia-14)
cc(Africa-12, and-15)
compound(America-17, Latin-16)
nmod:of(countries-10, America-17)
conj:and(Africa-12, America-17)
punct(countries-10, ,-18)
ref(countries-10, which-19)
cop(capable-22, are-20)
advmod(capable-22, least-21)
acl:relcl(countries-10, capable-22)
mark(absorbing-24, of-23)
advcl(capable-22, absorbing-24)
dobj(absorbing-24, it-25)
punct(said-29, ,-26)
det(report-28, the-27)
nsubj(said-29, report-28)
root(ROOT-0, said-29)
punct(said-29, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#it

absorb :: Nearly four-fifths of this increase would be absorbed by the rising cost of Social Security benefits and the cost of keeping outlays for defense and education even with inflation , as Mr. Bush has proposed ./.
advmod(four-fifths-2, Nearly-1)
nsubjpass(absorbed-8, four-fifths-2)
case(increase-5, of-3)
det(increase-5, this-4)
nmod:of(four-fifths-2, increase-5)
aux(absorbed-8, would-6)
auxpass(absorbed-8, be-7)
root(ROOT-0, absorbed-8)
case(cost-12, by-9)
det(cost-12, the-10)
amod(cost-12, rising-11)
nmod:agent(absorbed-8, cost-12)
case(benefits-16, of-13)
compound(benefits-16, Social-14)
compound(benefits-16, Security-15)
nmod:of(cost-12, benefits-16)
cc(cost-12, and-17)
det(cost-19, the-18)
nmod:agent(absorbed-8, cost-19)
conj:and(cost-12, cost-19)
mark(keeping-21, of-20)
acl(cost-19, keeping-21)
dobj(keeping-21, outlays-22)
case(defense-24, for-23)
nmod:for(outlays-22, defense-24)
cc(defense-24, and-25)
nmod:for(outlays-22, education-26)
conj:and(defense-24, education-26)
advmod(inflation-29, even-27)
case(inflation-29, with-28)
nmod:with(keeping-21, inflation-29)
punct(absorbed-8, ,-30)
mark(proposed-35, as-31)
compound(Bush-33, Mr.-32)
nsubj(proposed-35, Bush-33)
aux(proposed-35, has-34)
advcl(absorbed-8, proposed-35)
punct(absorbed-8, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#four-fifths

absorb :: With its large stock of sober , muscular buildings , Chicago has been able to absorb Mr. Jahn 's work ; there , Xerox Centre 's sweeping curve of white metal and reflective glass , or One South Wacker 's long grids of pale pink and pale blue glass can seem like light relief . -LRB- For similar reasons , his recent Chryslerlike blue-glass tower can be accommodated in downtown Philadelphia -RRB- ./.
case(stock-4, With-1)
nmod:poss(stock-4, its-2)
amod(stock-4, large-3)
nmod:with(able-14, stock-4)
case(buildings-9, of-5)
amod(buildings-9, sober-6)
punct(buildings-9, ,-7)
amod(buildings-9, muscular-8)
nmod:of(stock-4, buildings-9)
punct(able-14, ,-10)
nsubj(able-14, Chicago-11)
nsubj:xsubj(absorb-16, Chicago-11)
aux(able-14, has-12)
cop(able-14, been-13)
root(ROOT-0, able-14)
mark(absorb-16, to-15)
xcomp(able-14, absorb-16)
compound(Jahn-18, Mr.-17)
nmod:poss(work-20, Jahn-18)
case(Jahn-18, 's-19)
dobj(absorb-16, work-20)
punct(able-14, ;-21)
expl(seem-51, there-22)
punct(seem-51, ,-23)
compound(Centre-25, Xerox-24)
nmod:poss(curve-28, Centre-25)
case(Centre-25, 's-26)
amod(curve-28, sweeping-27)
nsubj(seem-51, curve-28)
case(metal-31, of-29)
compound(metal-31, white-30)
nmod:of(curve-28, metal-31)
cc(metal-31, and-32)
amod(glass-34, reflective-33)
nmod:of(curve-28, glass-34)
conj:and(metal-31, glass-34)
punct(metal-31, ,-35)
cc(metal-31, or-36)
nummod(Wacker-39, One-37)
compound(Wacker-39, South-38)
nmod:poss(grids-42, Wacker-39)
case(Wacker-39, 's-40)
amod(grids-42, long-41)
nmod:of(curve-28, grids-42)
conj:or(metal-31, grids-42)
case(pink-45, of-43)
amod(pink-45, pale-44)
nmod:of(grids-42, pink-45)
cc(pink-45, and-46)
compound(glass-49, pale-47)
amod(glass-49, blue-48)
nmod:of(grids-42, glass-49)
conj:and(pink-45, glass-49)
aux(seem-51, can-50)
parataxis(able-14, seem-51)
case(relief-54, like-52)
amod(relief-54, light-53)
nmod:like(seem-51, relief-54)
punct(able-14, .-55)
punct(accommodated-13, -LRB--1)
case(reasons-4, For-2)
amod(reasons-4, similar-3)
nmod:for(accommodated-13, reasons-4)
punct(accommodated-13, ,-5)
nmod:poss(tower-10, his-6)
amod(tower-10, recent-7)
amod(tower-10, Chryslerlike-8)
amod(tower-10, blue-glass-9)
nsubjpass(accommodated-13, tower-10)
aux(accommodated-13, can-11)
auxpass(accommodated-13, be-12)
root(ROOT-0, accommodated-13)
case(Philadelphia-16, in-14)
compound(Philadelphia-16, downtown-15)
nmod:in(accommodated-13, Philadelphia-16)
punct(accommodated-13, -RRB--17)
punct(accommodated-13, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#work

absorb :: Anyone who spends a few hours reading his speeches and talking to Democrats familiar with his views learns quickly that Mr. Dukakis has absorbed many of the dovish obsessions of his party 's left ./.
nsubj(spends-3, Anyone-1)
nsubj(learns-18, Anyone-1)
ref(Anyone-1, who-2)
acl:relcl(Anyone-1, spends-3)
det(hours-6, a-4)
amod(hours-6, few-5)
dobj(spends-3, hours-6)
dep(hours-6, reading-7)
nmod:poss(speeches-9, his-8)
dobj(reading-7, speeches-9)
cc(reading-7, and-10)
dep(hours-6, talking-11)
conj:and(reading-7, talking-11)
case(Democrats-13, to-12)
nmod:to(talking-11, Democrats-13)
amod(Democrats-13, familiar-14)
case(views-17, with-15)
nmod:poss(views-17, his-16)
nmod:with(familiar-14, views-17)
root(ROOT-0, learns-18)
advmod(learns-18, quickly-19)
mark(absorbed-24, that-20)
compound(Dukakis-22, Mr.-21)
nsubj(absorbed-24, Dukakis-22)
aux(absorbed-24, has-23)
ccomp(learns-18, absorbed-24)
dobj(absorbed-24, many-25)
case(obsessions-29, of-26)
det(obsessions-29, the-27)
amod(obsessions-29, dovish-28)
nmod:of(many-25, obsessions-29)
case(left-34, of-30)
nmod:poss(party-32, his-31)
nmod:poss(left-34, party-32)
case(party-32, 's-33)
nmod:of(obsessions-29, left-34)
punct(learns-18, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#obsessions

absorb :: It said it expects to absorb `` the vast majority '' of those jobs in its private health-care business ./.
nsubj(said-2, It-1)
root(ROOT-0, said-2)
nsubj(expects-4, it-3)
nsubj:xsubj(absorb-6, it-3)
ccomp(said-2, expects-4)
mark(absorb-6, to-5)
xcomp(expects-4, absorb-6)
punct(absorb-6, ``-7)
det(majority-10, the-8)
amod(majority-10, vast-9)
dobj(absorb-6, majority-10)
punct(absorb-6, ''-11)
case(jobs-14, of-12)
det(jobs-14, those-13)
nmod:of(absorb-6, jobs-14)
case(business-19, in-15)
nmod:poss(business-19, its-16)
amod(business-19, private-17)
compound(business-19, health-care-18)
nmod:in(jobs-14, business-19)
punct(said-2, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#majority

absorb :: First Federal was then to absorb several other troubled thrifts in federally assisted mergers , as part of the Federal Savings and Loan Insurance Corp. 's so-called Southwest Plan to rescue the many ailing savings and loans based in the region ./.
compound(Federal-2, First-1)
nsubj(absorb-6, Federal-2)
aux(absorb-6, was-3)
advmod(absorb-6, then-4)
mark(absorb-6, to-5)
root(ROOT-0, absorb-6)
amod(thrifts-10, several-7)
amod(thrifts-10, other-8)
amod(thrifts-10, troubled-9)
dobj(absorb-6, thrifts-10)
case(mergers-14, in-11)
advmod(assisted-13, federally-12)
amod(mergers-14, assisted-13)
nmod:in(absorb-6, mergers-14)
punct(absorb-6, ,-15)
case(part-17, as-16)
nmod:as(absorb-6, part-17)
case(Savings-21, of-18)
det(Savings-21, the-19)
amod(Savings-21, Federal-20)
nmod:of(part-17, Savings-21)
cc(Savings-21, and-22)
compound(Corp.-25, Loan-23)
compound(Corp.-25, Insurance-24)
nmod:poss(Plan-29, Corp.-25)
case(Corp.-25, 's-26)
amod(Plan-29, so-called-27)
compound(Plan-29, Southwest-28)
nmod:of(part-17, Plan-29)
conj:and(Savings-21, Plan-29)
mark(rescue-31, to-30)
acl(part-17, rescue-31)
det(savings-35, the-32)
amod(savings-35, many-33)
amod(savings-35, ailing-34)
dobj(rescue-31, savings-35)
cc(savings-35, and-36)
dobj(rescue-31, loans-37)
conj:and(savings-35, loans-37)
acl(savings-35, based-38)
case(region-41, in-39)
det(region-41, the-40)
nmod:in(based-38, region-41)
punct(absorb-6, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#thrifts

absorb :: The pension agency , which had briefly absorbed LTV 's $ 2 billion pension shortfall , subsequently returned responsibility for the plans to the steelmaker ./.
det(agency-3, The-1)
compound(agency-3, pension-2)
nsubj(had-6, agency-3)
nsubj(returned-18, agency-3)
punct(agency-3, ,-4)
ref(agency-3, which-5)
acl:relcl(agency-3, had-6)
advmod(absorbed-8, briefly-7)
ccomp(had-6, absorbed-8)
nmod:poss(shortfall-15, LTV-9)
case(LTV-9, 's-10)
amod(shortfall-15, $-11)
compound(billion-13, 2-12)
nummod($-11, billion-13)
compound(shortfall-15, pension-14)
dobj(absorbed-8, shortfall-15)
punct(agency-3, ,-16)
advmod(returned-18, subsequently-17)
root(ROOT-0, returned-18)
dobj(returned-18, responsibility-19)
case(plans-22, for-20)
det(plans-22, the-21)
nmod:for(responsibility-19, plans-22)
case(steelmaker-25, to-23)
det(steelmaker-25, the-24)
nmod:to(plans-22, steelmaker-25)
punct(returned-18, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#shortfall

absorb :: Districts jump back and forth over mountain ranges , cross large bodies of water , send out little tentacles to absorb special communities and ensure safe seats . ''/''
nsubj(jump-2, Districts-1)
root(ROOT-0, jump-2)
advmod(jump-2, back-3)
cc(back-3, and-4)
advmod(jump-2, forth-5)
conj:and(back-3, forth-5)
case(ranges-8, over-6)
compound(ranges-8, mountain-7)
nmod:over(jump-2, ranges-8)
punct(jump-2, ,-9)
conj(jump-2, cross-10)
amod(bodies-12, large-11)
dobj(cross-10, bodies-12)
case(water-14, of-13)
nmod:of(bodies-12, water-14)
punct(jump-2, ,-15)
conj(jump-2, send-16)
compound:prt(send-16, out-17)
amod(tentacles-19, little-18)
dobj(send-16, tentacles-19)
mark(absorb-21, to-20)
advcl(send-16, absorb-21)
amod(communities-23, special-22)
dobj(absorb-21, communities-23)
cc(absorb-21, and-24)
advcl(send-16, ensure-25)
conj:and(absorb-21, ensure-25)
amod(seats-27, safe-26)
dobj(ensure-25, seats-27)
punct(jump-2, .-28)
punct(jump-2, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: absorb#communities

absorb :: Previously , Olivetti refused to make such cuts , forcing AT & T 's computer business to absorb the shortfalls ./.
advmod(refused-4, Previously-1)
punct(refused-4, ,-2)
nsubj(refused-4, Olivetti-3)
nsubj:xsubj(make-6, Olivetti-3)
root(ROOT-0, refused-4)
mark(make-6, to-5)
xcomp(refused-4, make-6)
amod(cuts-8, such-7)
dobj(make-6, cuts-8)
punct(refused-4, ,-9)
xcomp(refused-4, forcing-10)
nmod:poss(business-16, AT-11)
cc(AT-11, &-12)
conj:&(AT-11, T-13)
nmod:poss(business-16, T-13)
case(T-13, 's-14)
compound(business-16, computer-15)
dobj(forcing-10, business-16)
nsubj:xsubj(absorb-18, business-16)
mark(absorb-18, to-17)
xcomp(forcing-10, absorb-18)
det(shortfalls-20, the-19)
dobj(absorb-18, shortfalls-20)
punct(refused-4, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#shortfalls

absorb :: But he said Cigna 's after-tax gain wo n't be material because the company will absorb certain deferred taxes of the division ./.
cc(said-3, But-1)
nsubj(said-3, he-2)
root(ROOT-0, said-3)
nmod:poss(gain-7, Cigna-4)
case(Cigna-4, 's-5)
amod(gain-7, after-tax-6)
nsubj(material-11, gain-7)
aux(material-11, wo-8)
neg(material-11, n't-9)
cop(material-11, be-10)
ccomp(said-3, material-11)
mark(absorb-16, because-12)
det(company-14, the-13)
nsubj(absorb-16, company-14)
aux(absorb-16, will-15)
advcl(material-11, absorb-16)
amod(taxes-19, certain-17)
amod(taxes-19, deferred-18)
dobj(absorb-16, taxes-19)
case(division-22, of-20)
det(division-22, the-21)
nmod:of(taxes-19, division-22)
punct(said-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#taxes

absorb :: Equally important , his Socialist government absorbed and then , in effect , destroyed the French Communist Party ./.
advmod(important-2, Equally-1)
dep(absorbed-7, important-2)
punct(absorbed-7, ,-3)
nmod:poss(government-6, his-4)
amod(government-6, Socialist-5)
nsubj(absorbed-7, government-6)
root(ROOT-0, absorbed-7)
cc(absorbed-7, and-8)
advmod(absorbed-7, then-9)
punct(absorbed-7, ,-10)
case(effect-12, in-11)
nmod:in(absorbed-7, effect-12)
punct(absorbed-7, ,-13)
dep(absorbed-7, destroyed-14)
det(Party-18, the-15)
compound(Party-18, French-16)
compound(Party-18, Communist-17)
dobj(destroyed-14, Party-18)
punct(absorbed-7, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#government

absorb :: Reserving enables banks to absorb losses on bad credits ./.
nsubj(enables-2, Reserving-1)
root(ROOT-0, enables-2)
dobj(enables-2, banks-3)
nsubj:xsubj(absorb-5, banks-3)
mark(absorb-5, to-4)
xcomp(enables-2, absorb-5)
dobj(absorb-5, losses-6)
case(credits-9, on-7)
amod(credits-9, bad-8)
nmod:on(losses-6, credits-9)
punct(enables-2, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#losses

absorb :: One can not help but be absorbed by portions of Mr. Bouwsma 's diligent labor , but readers should be warned that the Calvin of this book is presented not as a dramatic heretic , but as a rather schematic schismatic ./.
nsubj(help-4, One-1)
nsubjpass(absorbed-7, One-1)
aux(help-4, can-2)
neg(help-4, not-3)
root(ROOT-0, help-4)
cc(help-4, but-5)
auxpass(absorbed-7, be-6)
conj:but(help-4, absorbed-7)
case(portions-9, by-8)
nmod:agent(absorbed-7, portions-9)
case(labor-15, of-10)
compound(Bouwsma-12, Mr.-11)
nmod:poss(labor-15, Bouwsma-12)
case(Bouwsma-12, 's-13)
amod(labor-15, diligent-14)
nmod:of(portions-9, labor-15)
punct(help-4, ,-16)
cc(help-4, but-17)
nsubjpass(warned-21, readers-18)
aux(warned-21, should-19)
auxpass(warned-21, be-20)
conj:but(help-4, warned-21)
mark(presented-29, that-22)
det(Calvin-24, the-23)
nsubjpass(presented-29, Calvin-24)
nsubjpass(presented-29', Calvin-24)
case(book-27, of-25)
det(book-27, this-26)
nmod:of(Calvin-24, book-27)
auxpass(presented-29, is-28)
ccomp(warned-21, presented-29)
ccomp(warned-21, presented-29')
conj:but(presented-29, presented-29')
neg(heretic-34, not-30)
case(heretic-34, as-31)
det(heretic-34, a-32)
amod(heretic-34, dramatic-33)
nmod:as(presented-29, heretic-34)
punct(heretic-34, ,-35)
cc(presented-29, but-36)
case(schismatic-41, as-37)
det(schismatic-41, a-38)
advmod(schematic-40, rather-39)
amod(schismatic-41, schematic-40)
nmod:as(presented-29', schismatic-41)
punct(help-4, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#one

absorb :: DESPITE A modest rise in sales of luxury units , Miami 's glut of condominiums is n't expected to be absorbed for three years , according to RealData Information Systems , a local consultant ./.
case(rise-4, DESPITE-1)
det(rise-4, A-2)
amod(rise-4, modest-3)
nmod:despite(expected-18, rise-4)
case(sales-6, in-5)
nmod:in(rise-4, sales-6)
case(units-9, of-7)
compound(units-9, luxury-8)
nmod:of(sales-6, units-9)
punct(expected-18, ,-10)
nmod:poss(glut-13, Miami-11)
case(Miami-11, 's-12)
nsubjpass(expected-18, glut-13)
nsubjpass:xsubj(absorbed-21, glut-13)
case(condominiums-15, of-14)
nmod:of(glut-13, condominiums-15)
auxpass(expected-18, is-16)
neg(expected-18, n't-17)
root(ROOT-0, expected-18)
mark(absorbed-21, to-19)
auxpass(absorbed-21, be-20)
xcomp(expected-18, absorbed-21)
case(years-24, for-22)
nummod(years-24, three-23)
nmod:for(absorbed-21, years-24)
punct(expected-18, ,-25)
case(Systems-30, according-26)
mwe(according-26, to-27)
compound(Systems-30, RealData-28)
compound(Systems-30, Information-29)
nmod:according_to(expected-18, Systems-30)
punct(Systems-30, ,-31)
det(consultant-34, a-32)
amod(consultant-34, local-33)
appos(Systems-30, consultant-34)
punct(expected-18, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#be

absorb :: Mr. Thunberg of Ried Thunberg said the Fed has `` aggressively '' absorbed reserves over each of the past three days , creating some confusion about its intentions ./.
compound(Thunberg-2, Mr.-1)
nsubj(said-6, Thunberg-2)
case(Thunberg-5, of-3)
compound(Thunberg-5, Ried-4)
nmod:of(Thunberg-2, Thunberg-5)
root(ROOT-0, said-6)
det(Fed-8, the-7)
nsubj(has-9, Fed-8)
ccomp(said-6, has-9)
punct(has-9, ``-10)
advmod(has-9, aggressively-11)
punct(has-9, ''-12)
amod(reserves-14, absorbed-13)
dobj(has-9, reserves-14)
case(each-16, over-15)
nmod:over(reserves-14, each-16)
case(days-21, of-17)
det(days-21, the-18)
amod(days-21, past-19)
nummod(days-21, three-20)
nmod:of(each-16, days-21)
punct(has-9, ,-22)
advcl(has-9, creating-23)
det(confusion-25, some-24)
dobj(creating-23, confusion-25)
case(intentions-28, about-26)
nmod:poss(intentions-28, its-27)
nmod:about(confusion-25, intentions-28)
punct(said-6, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#reserves

absorb :: Canadian National said that Canadian Pacific Hotels agreed to maintain all existing labor contracts and pension benefits and to absorb all of CN Hotels ' current employees ./.
compound(National-2, Canadian-1)
nsubj(said-3, National-2)
root(ROOT-0, said-3)
mark(agreed-8, that-4)
compound(Hotels-7, Canadian-5)
compound(Hotels-7, Pacific-6)
nsubj(agreed-8, Hotels-7)
nsubj:xsubj(maintain-10, Hotels-7)
nsubj:xsubj(absorb-20, Hotels-7)
ccomp(said-3, agreed-8)
mark(maintain-10, to-9)
xcomp(agreed-8, maintain-10)
det(contracts-14, all-11)
amod(contracts-14, existing-12)
compound(contracts-14, labor-13)
dobj(maintain-10, contracts-14)
cc(contracts-14, and-15)
compound(benefits-17, pension-16)
dobj(maintain-10, benefits-17)
conj:and(contracts-14, benefits-17)
cc(maintain-10, and-18)
mark(absorb-20, to-19)
xcomp(agreed-8, absorb-20)
conj:and(maintain-10, absorb-20)
dobj(absorb-20, all-21)
case(employees-27, of-22)
compound(Hotels-24, CN-23)
nmod:poss(employees-27, Hotels-24)
case(Hotels-24, '-25)
amod(employees-27, current-26)
nmod:of(all-21, employees-27)
punct(said-3, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#employees

absorb :: Under the proposed merger , Wheelabrator Technologies will absorb Waste Management 's Tampa , Fla . , incinerator and three other waste-to-energy projects the company has under development in Broward County , Fla . ; Dakota County , Minn . ; and Falls Township , Pa ./.
case(merger-4, Under-1)
det(merger-4, the-2)
amod(merger-4, proposed-3)
nmod:under(absorb-9, merger-4)
punct(absorb-9, ,-5)
compound(Technologies-7, Wheelabrator-6)
nsubj(absorb-9, Technologies-7)
aux(absorb-9, will-8)
root(ROOT-0, absorb-9)
compound(Management-11, Waste-10)
dobj(absorb-9, Management-11)
case(Management-11, 's-12)
dep(Management-11, Tampa-13)
punct(Tampa-13, ,-14)
appos(Tampa-13, Fla-15)
punct(absorb-9, .-16)
root(ROOT-0, ,-1)
root(,-1, incinerator-2)
cc(incinerator-2, and-3)
nummod(projects-7, three-4)
amod(projects-7, other-5)
amod(projects-7, waste-to-energy-6)
root(,-1, projects-7)
conj:and(incinerator-2, projects-7)
det(company-9, the-8)
nsubj(has-10, company-9)
acl:relcl(projects-7, has-10)
case(development-12, under-11)
nmod:under(has-10, development-12)
case(County-15, in-13)
compound(County-15, Broward-14)
nmod:in(development-12, County-15)
punct(County-15, ,-16)
appos(County-15, Fla-17)
punct(incinerator-2, .-18)
root(ROOT-0, ;-1)
compound(County-3, Dakota-2)
root(;-1, County-3)
punct(County-3, ,-4)
appos(County-3, Minn-5)
punct(County-3, .-6)
punct(Falls-3, ;-1)
cc(Falls-3, and-2)
root(ROOT-0, Falls-3)
dobj(Falls-3, Township-4)
punct(Township-4, ,-5)
appos(Township-4, Pa-6)
punct(Falls-3, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#management

absorb :: But Korea 's booming economy can absorb them , economists say ./.
cc(absorb-7, But-1)
nmod:poss(economy-5, Korea-2)
case(Korea-2, 's-3)
amod(economy-5, booming-4)
nsubj(absorb-7, economy-5)
aux(absorb-7, can-6)
ccomp(say-11, absorb-7)
dobj(absorb-7, them-8)
punct(say-11, ,-9)
nsubj(say-11, economists-10)
root(ROOT-0, say-11)
punct(say-11, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#them

absorb :: Equity capital is the clearest picture of a bank 's net worth and its ability to absorb additional losses ./.
compound(capital-2, Equity-1)
nsubj(picture-6, capital-2)
cop(picture-6, is-3)
det(picture-6, the-4)
amod(picture-6, clearest-5)
root(ROOT-0, picture-6)
case(worth-12, of-7)
det(bank-9, a-8)
nmod:poss(worth-12, bank-9)
case(bank-9, 's-10)
amod(worth-12, net-11)
nmod:of(picture-6, worth-12)
cc(worth-12, and-13)
nmod:poss(ability-15, its-14)
nmod:of(picture-6, ability-15)
conj:and(worth-12, ability-15)
mark(absorb-17, to-16)
acl(ability-15, absorb-17)
amod(losses-19, additional-18)
dobj(absorb-17, losses-19)
punct(picture-6, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#losses

absorb :: It said it expects to absorb `` the vast majority '' of those jobs in its private health-care business ./.
nsubj(said-2, It-1)
root(ROOT-0, said-2)
nsubj(expects-4, it-3)
nsubj:xsubj(absorb-6, it-3)
ccomp(said-2, expects-4)
mark(absorb-6, to-5)
xcomp(expects-4, absorb-6)
punct(absorb-6, ``-7)
det(majority-10, the-8)
amod(majority-10, vast-9)
dobj(absorb-6, majority-10)
punct(absorb-6, ''-11)
case(jobs-14, of-12)
det(jobs-14, those-13)
nmod:of(absorb-6, jobs-14)
case(business-19, in-15)
nmod:poss(business-19, its-16)
amod(business-19, private-17)
compound(business-19, health-care-18)
nmod:in(jobs-14, business-19)
punct(said-2, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#majority

absorb :: If the latest auditors ' recommendation is adopted , Illinois Power could add $ 1.84 billion to its rate base , but apparently would have to absorb the balance ./.
mark(adopted-8, If-1)
det(auditors-4, the-2)
amod(auditors-4, latest-3)
nmod:poss(recommendation-6, auditors-4)
case(auditors-4, '-5)
nsubjpass(adopted-8, recommendation-6)
auxpass(adopted-8, is-7)
advcl(add-13, adopted-8)
punct(add-13, ,-9)
compound(Power-11, Illinois-10)
nsubj(add-13, Power-11)
nsubj(have-25, Power-11)
nsubj:xsubj(absorb-27, Power-11)
aux(add-13, could-12)
root(ROOT-0, add-13)
dobj(add-13, $-14)
compound(billion-16, 1.84-15)
nummod($-14, billion-16)
case(base-20, to-17)
nmod:poss(base-20, its-18)
compound(base-20, rate-19)
nmod:to(add-13, base-20)
punct(add-13, ,-21)
cc(add-13, but-22)
advmod(have-25, apparently-23)
aux(have-25, would-24)
conj:but(add-13, have-25)
mark(absorb-27, to-26)
xcomp(have-25, absorb-27)
det(balance-29, the-28)
dobj(absorb-27, balance-29)
punct(add-13, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#balance

absorb :: This cost has been absorbed by me in the hope that the FDA would reward my efforts with its favor ./.
det(cost-2, This-1)
nsubjpass(absorbed-5, cost-2)
aux(absorbed-5, has-3)
auxpass(absorbed-5, been-4)
root(ROOT-0, absorbed-5)
case(me-7, by-6)
nmod:agent(absorbed-5, me-7)
case(hope-10, in-8)
det(hope-10, the-9)
nmod:in(absorbed-5, hope-10)
mark(reward-15, that-11)
det(FDA-13, the-12)
nsubj(reward-15, FDA-13)
aux(reward-15, would-14)
ccomp(hope-10, reward-15)
nmod:poss(efforts-17, my-16)
dobj(reward-15, efforts-17)
case(favor-20, with-18)
nmod:poss(favor-20, its-19)
nmod:with(efforts-17, favor-20)
punct(absorbed-5, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#cost

absorb :: For Koppers , selling off part of its construction-materials business is seen as crucial , because no matter how it decides to improve upon Beazer 's bid , it is likely to absorb considerable debt ./.
case(Koppers-2, For-1)
nmod:for(seen-12, Koppers-2)
punct(seen-12, ,-3)
csubjpass(seen-12, selling-4)
compound:prt(selling-4, off-5)
dobj(selling-4, part-6)
case(business-10, of-7)
nmod:poss(business-10, its-8)
compound(business-10, construction-materials-9)
nmod:of(part-6, business-10)
auxpass(seen-12, is-11)
root(ROOT-0, seen-12)
case(crucial-14, as-13)
advcl(seen-12, crucial-14)
punct(seen-12, ,-15)
mark(likely-31, because-16)
neg(matter-18, no-17)
advcl(likely-31, matter-18)
advmod(decides-21, how-19)
nsubj(decides-21, it-20)
nsubj:xsubj(improve-23, it-20)
ccomp(matter-18, decides-21)
mark(improve-23, to-22)
xcomp(decides-21, improve-23)
case(bid-27, upon-24)
nmod:poss(bid-27, Beazer-25)
case(Beazer-25, 's-26)
nmod:upon(improve-23, bid-27)
punct(likely-31, ,-28)
nsubj(likely-31, it-29)
nsubj:xsubj(absorb-33, it-29)
cop(likely-31, is-30)
advcl(seen-12, likely-31)
mark(absorb-33, to-32)
xcomp(likely-31, absorb-33)
amod(debt-35, considerable-34)
dobj(absorb-33, debt-35)
punct(seen-12, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#debt

absorb :: But he said Cigna 's after-tax gain wo n't be material because the company will absorb certain deferred taxes of the division ./.
cc(said-3, But-1)
nsubj(said-3, he-2)
root(ROOT-0, said-3)
nmod:poss(gain-7, Cigna-4)
case(Cigna-4, 's-5)
amod(gain-7, after-tax-6)
nsubj(material-11, gain-7)
aux(material-11, wo-8)
neg(material-11, n't-9)
cop(material-11, be-10)
ccomp(said-3, material-11)
mark(absorb-16, because-12)
det(company-14, the-13)
nsubj(absorb-16, company-14)
aux(absorb-16, will-15)
advcl(material-11, absorb-16)
amod(taxes-19, certain-17)
amod(taxes-19, deferred-18)
dobj(absorb-16, taxes-19)
case(division-22, of-20)
det(division-22, the-21)
nmod:of(taxes-19, division-22)
punct(said-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#taxes

absorb :: Equally important , his Socialist government absorbed and then , in effect , destroyed the French Communist Party ./.
advmod(important-2, Equally-1)
dep(absorbed-7, important-2)
punct(absorbed-7, ,-3)
nmod:poss(government-6, his-4)
amod(government-6, Socialist-5)
nsubj(absorbed-7, government-6)
root(ROOT-0, absorbed-7)
cc(absorbed-7, and-8)
advmod(absorbed-7, then-9)
punct(absorbed-7, ,-10)
case(effect-12, in-11)
nmod:in(absorbed-7, effect-12)
punct(absorbed-7, ,-13)
dep(absorbed-7, destroyed-14)
det(Party-18, the-15)
compound(Party-18, French-16)
compound(Party-18, Communist-17)
dobj(destroyed-14, Party-18)
punct(absorbed-7, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#government

absorb :: The plan calls for Ferruzzi Finanziaria , the family holding company that controls the Ferruzzi-Montedison group and is now closely held , to absorb Iniziativa Me.T.A. unit in a stock swap ./.
det(plan-2, The-1)
nsubj(calls-3, plan-2)
root(ROOT-0, calls-3)
case(Finanziaria-6, for-4)
compound(Finanziaria-6, Ferruzzi-5)
nmod:for(calls-3, Finanziaria-6)
punct(Finanziaria-6, ,-7)
det(company-11, the-8)
compound(company-11, family-9)
amod(company-11, holding-10)
appos(Finanziaria-6, company-11)
nsubj(controls-13, company-11)
nsubjpass(held-21, company-11)
nsubj:xsubj(absorb-24, company-11)
ref(company-11, that-12)
acl:relcl(company-11, controls-13)
det(group-16, the-14)
compound(group-16, Ferruzzi-Montedison-15)
dobj(controls-13, group-16)
cc(controls-13, and-17)
auxpass(held-21, is-18)
advmod(held-21, now-19)
advmod(held-21, closely-20)
acl:relcl(company-11, held-21)
conj:and(controls-13, held-21)
punct(held-21, ,-22)
mark(absorb-24, to-23)
xcomp(held-21, absorb-24)
compound(Me.T.A-26, Iniziativa-25)
dobj(absorb-24, Me.T.A-26)
punct(calls-3, .-27)
root(ROOT-0, unit-1)
case(swap-5, in-2)
det(swap-5, a-3)
compound(swap-5, stock-4)
nmod:in(unit-1, swap-5)
punct(unit-1, .-6)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#me.t.a

absorb :: E.F. HUTTON & CO.: Now in the process of being absorbed by Shearson Lehman Brothers , Hutton does n't seem to have picked stocks as well as Shearson did ./.
compound(HUTTON-2, E.F.-1)
root(ROOT-0, HUTTON-2)
cc(HUTTON-2, &-3)
conj:&(HUTTON-2, CO.-4)
punct(HUTTON-2, :-5)
advmod(process-9, Now-6)
case(process-9, in-7)
det(process-9, the-8)
nmod:in(seem-21, process-9)
mark(absorbed-12, of-10)
auxpass(absorbed-12, being-11)
acl(process-9, absorbed-12)
case(Brothers-16, by-13)
compound(Brothers-16, Shearson-14)
compound(Brothers-16, Lehman-15)
nmod:agent(absorbed-12, Brothers-16)
punct(seem-21, ,-17)
nsubj(seem-21, Hutton-18)
nsubj:xsubj(picked-24, Hutton-18)
aux(seem-21, does-19)
neg(seem-21, n't-20)
dep(HUTTON-2, seem-21)
mark(picked-24, to-22)
aux(picked-24, have-23)
xcomp(seem-21, picked-24)
dobj(picked-24, stocks-25)
cc(picked-24, as-26)
mwe(as-26, well-27)
mwe(as-26, as-28)
nsubj(did-30, Shearson-29)
xcomp(seem-21, did-30)
conj:and(picked-24, did-30)
punct(HUTTON-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#being

absorb :: Montedison 's Iniziativa Me.T.A. unit , which Ferruzzi is to absorb in its restructuring , dropped 7.2 % to 8 , 310 lire ./.
nmod:poss(Me.T.A-4, Montedison-1)
case(Montedison-1, 's-2)
compound(Me.T.A-4, Iniziativa-3)
root(ROOT-0, Me.T.A-4)
punct(Me.T.A-4, .-5)
dobj(is-5, unit-1)
nsubj:xsubj(absorb-7, unit-1)
nsubj(dropped-12, unit-1)
punct(unit-1, ,-2)
ref(unit-1, which-3)
nsubj(is-5, Ferruzzi-4)
acl:relcl(unit-1, is-5)
mark(absorb-7, to-6)
xcomp(is-5, absorb-7)
case(restructuring-10, in-8)
nmod:poss(restructuring-10, its-9)
nmod:in(absorb-7, restructuring-10)
punct(unit-1, ,-11)
root(ROOT-0, dropped-12)
nummod(%-14, 7.2-13)
dobj(dropped-12, %-14)
case(8-16, to-15)
nmod:to(dropped-12, 8-16)
punct(dropped-12, ,-17)
nummod(lire-19, 310-18)
dobj(dropped-12, lire-19)
punct(dropped-12, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#unit

absorb :: `` Vitamins could be passed right out of the body without being absorbed , '' he says ./.
punct(passed-5, ``-1)
nsubjpass(passed-5, Vitamins-2)
aux(passed-5, could-3)
auxpass(passed-5, be-4)
ccomp(says-17, passed-5)
advmod(body-10, right-6)
case(body-10, out-7)
mwe(out-7, of-8)
det(body-10, the-9)
nmod:out_of(passed-5, body-10)
mark(absorbed-13, without-11)
auxpass(absorbed-13, being-12)
advcl(passed-5, absorbed-13)
punct(says-17, ,-14)
punct(says-17, ''-15)
nsubj(says-17, he-16)
root(ROOT-0, says-17)
punct(says-17, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#being

absorb :: The court ruled , however , that the trust will now have to absorb more of that cost ./.
det(court-2, The-1)
nsubj(ruled-3, court-2)
root(ROOT-0, ruled-3)
punct(ruled-3, ,-4)
advmod(ruled-3, however-5)
punct(ruled-3, ,-6)
mark(have-12, that-7)
det(trust-9, the-8)
nsubj(have-12, trust-9)
nsubj:xsubj(absorb-14, trust-9)
aux(have-12, will-10)
advmod(have-12, now-11)
ccomp(ruled-3, have-12)
mark(absorb-14, to-13)
xcomp(have-12, absorb-14)
dobj(absorb-14, more-15)
case(cost-18, of-16)
det(cost-18, that-17)
nmod:of(more-15, cost-18)
punct(ruled-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#cost

absorb :: He added: `` There is so much space out there that people are making deals at good prices , absorbing space ./.
nsubj(added-2, He-1)
root(ROOT-0, added-2)
punct(added-2, :-3)
punct(added-2, ``-4)
expl(is-6, There-5)
ccomp(added-2, is-6)
advmod(much-8, so-7)
amod(space-9, much-8)
nsubj(is-6, space-9)
case(there-11, out-10)
advmod(is-6, there-11)
mark(making-15, that-12)
nsubj(making-15, people-13)
aux(making-15, are-14)
ccomp(is-6, making-15)
dobj(making-15, deals-16)
case(prices-19, at-17)
amod(prices-19, good-18)
nmod:at(making-15, prices-19)
punct(making-15, ,-20)
advcl(making-15, absorbing-21)
dobj(absorbing-21, space-22)
punct(added-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#space

absorb :: -- Futures dealers on the floors of the various exchanges `` absorbed some selling pressure '' but they were n't `` able to counterbalance the public selling pressure . ''/''
punct(absorbed-12, ---1)
compound(dealers-3, Futures-2)
nsubj(absorbed-12, dealers-3)
case(floors-6, on-4)
det(floors-6, the-5)
nmod:on(dealers-3, floors-6)
case(exchanges-10, of-7)
det(exchanges-10, the-8)
amod(exchanges-10, various-9)
nmod:of(floors-6, exchanges-10)
punct(absorbed-12, ``-11)
root(ROOT-0, absorbed-12)
det(pressure-15, some-13)
compound(pressure-15, selling-14)
dobj(absorbed-12, pressure-15)
punct(absorbed-12, ''-16)
cc(absorbed-12, but-17)
nsubj(able-22, they-18)
nsubj:xsubj(counterbalance-24, they-18)
cop(able-22, were-19)
neg(able-22, n't-20)
punct(able-22, ``-21)
conj:but(absorbed-12, able-22)
mark(counterbalance-24, to-23)
xcomp(able-22, counterbalance-24)
det(pressure-28, the-25)
amod(pressure-28, public-26)
compound(pressure-28, selling-27)
dobj(counterbalance-24, pressure-28)
punct(absorbed-12, .-29)
punct(absorbed-12, ''-30)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: absorb#pressure

absorb :: As Eliot wrote: `` In a warm haze , the sultry light is absorbed , not refracted , by grey stone . . . . '' and flowers do indeed `` sleep in empty silence . ''/''
mark(wrote-3, As-1)
nsubj(wrote-3, Eliot-2)
root(ROOT-0, wrote-3)
punct(wrote-3, :-4)
punct(wrote-3, ``-5)
case(haze-9, In-6)
det(haze-9, a-7)
amod(haze-9, warm-8)
nmod:in(absorbed-15, haze-9)
punct(absorbed-15, ,-10)
det(light-13, the-11)
amod(light-13, sultry-12)
nsubjpass(absorbed-15, light-13)
auxpass(absorbed-15, is-14)
parataxis(wrote-3, absorbed-15)
punct(absorbed-15, ,-16)
neg(refracted-18, not-17)
conj(absorbed-15, refracted-18)
punct(absorbed-15, ,-19)
case(stone-22, by-20)
compound(stone-22, grey-21)
nmod:by(sleep-30, stone-22)
punct(stone-22, ...-23)
punct(stone-22, ''-24)
cc(stone-22, and-25)
conj:and(stone-22, flowers-26)
nmod:by(sleep-30, flowers-26)
aux(sleep-30, do-27)
advmod(sleep-30, indeed-28)
punct(sleep-30, ``-29)
parataxis(absorbed-15, sleep-30)
case(silence-33, in-31)
amod(silence-33, empty-32)
nmod:in(sleep-30, silence-33)
punct(wrote-3, .-34)
punct(wrote-3, ''-35)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: absorb#light

absorb :: New Pig Corp . , Tipton , Pa . , offers a hot-dog-shaped sponge that absorbs polluting liquids around factory machines ./.
compound(Corp-3, New-1)
compound(Corp-3, Pig-2)
root(ROOT-0, Corp-3)
punct(Corp-3, .-4)
root(ROOT-0, ,-1)
root(,-1, Tipton-2)
punct(Tipton-2, ,-3)
appos(Tipton-2, Pa-4)
punct(Tipton-2, .-5)
punct(offers-2, ,-1)
root(ROOT-0, offers-2)
det(sponge-5, a-3)
amod(sponge-5, hot-dog-shaped-4)
dobj(offers-2, sponge-5)
nsubj(absorbs-7, sponge-5)
ref(sponge-5, that-6)
acl:relcl(sponge-5, absorbs-7)
amod(liquids-9, polluting-8)
dobj(absorbs-7, liquids-9)
case(machines-12, around-10)
compound(machines-12, factory-11)
nmod:around(liquids-9, machines-12)
punct(offers-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#liquids

absorb :: Mr. Gallas says he began looking into melanin about five years ago when he was working on solar energy and was looking for materials that absorb sunlight ./.
compound(Gallas-2, Mr.-1)
nsubj(says-3, Gallas-2)
root(ROOT-0, says-3)
nsubj(began-5, he-4)
nsubj(looking-22, he-4)
ccomp(says-3, began-5)
xcomp(began-5, looking-6)
case(melanin-8, into-7)
nmod:into(looking-6, melanin-8)
advmod(five-10, about-9)
nummod(years-11, five-10)
nmod:npmod(ago-12, years-11)
advmod(looking-6, ago-12)
advmod(working-16, when-13)
nsubj(working-16, he-14)
aux(working-16, was-15)
advcl(looking-6, working-16)
case(energy-19, on-17)
amod(energy-19, solar-18)
nmod:on(working-16, energy-19)
cc(began-5, and-20)
aux(looking-22, was-21)
ccomp(says-3, looking-22)
conj:and(began-5, looking-22)
case(materials-24, for-23)
nmod:for(looking-22, materials-24)
nsubj(absorb-26, materials-24)
ref(materials-24, that-25)
acl:relcl(materials-24, absorb-26)
dobj(absorb-26, sunlight-27)
punct(says-3, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#sunlight

absorb :: The fatty deposits have a yellowish hue and therefore absorb more of the yellow laser energy than the surrounding , almost colorless artery wall ./.
det(deposits-3, The-1)
compound(deposits-3, fatty-2)
nsubj(have-4, deposits-3)
nsubj(absorb-10, deposits-3)
root(ROOT-0, have-4)
det(hue-7, a-5)
amod(hue-7, yellowish-6)
dobj(have-4, hue-7)
cc(have-4, and-8)
advmod(absorb-10, therefore-9)
conj:and(have-4, absorb-10)
dobj(absorb-10, more-11)
case(energy-16, of-12)
det(energy-16, the-13)
amod(energy-16, yellow-14)
compound(energy-16, laser-15)
nmod:of(more-11, energy-16)
case(surrounding-19, than-17)
det(surrounding-19, the-18)
nmod:than(more-11, surrounding-19)
punct(have-4, ,-20)
advmod(colorless-22, almost-21)
amod(wall-24, colorless-22)
compound(wall-24, artery-23)
conj:and(have-4, wall-24)
punct(have-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#energy

absorb :: Mr. Filisko says his fluids do n't rely on absorbed water , and perform better as temperatures rise ./.
compound(Filisko-2, Mr.-1)
nsubj(says-3, Filisko-2)
root(ROOT-0, says-3)
nmod:poss(fluids-5, his-4)
nsubj(rely-8, fluids-5)
nsubj(perform-14, fluids-5)
aux(rely-8, do-6)
neg(rely-8, n't-7)
ccomp(says-3, rely-8)
case(water-11, on-9)
amod(water-11, absorbed-10)
nmod:on(rely-8, water-11)
punct(rely-8, ,-12)
cc(rely-8, and-13)
ccomp(says-3, perform-14)
conj:and(rely-8, perform-14)
advmod(perform-14, better-15)
mark(rise-18, as-16)
nsubj(rise-18, temperatures-17)
advcl(perform-14, rise-18)
punct(says-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: absorb#water

assault :: The scenes two weeks ago of ordinary people in Krasnoyarsk verbally assaulting Mikhail Gorbachev because of the shortage of goods in the shops reflect how deep popular disappointment is over the results of `` perestroika '' thus far ./.
det(scenes-2, The-1)
nsubj(reflect-24, scenes-2)
nummod(weeks-4, two-3)
nmod:npmod(ago-5, weeks-4)
advmod(scenes-2, ago-5)
case(people-8, of-6)
amod(people-8, ordinary-7)
nmod:of(ago-5, people-8)
case(Krasnoyarsk-10, in-9)
nmod:in(people-8, Krasnoyarsk-10)
advmod(assaulting-12, verbally-11)
acl(scenes-2, assaulting-12)
compound(Gorbachev-14, Mikhail-13)
dobj(assaulting-12, Gorbachev-14)
case(shortage-18, because-15)
mwe(because-15, of-16)
det(shortage-18, the-17)
nmod:because_of(scenes-2, shortage-18)
case(goods-20, of-19)
nmod:of(shortage-18, goods-20)
case(shops-23, in-21)
det(shops-23, the-22)
nmod:in(goods-20, shops-23)
root(ROOT-0, reflect-24)
advmod(deep-26, how-25)
amod(disappointment-28, deep-26)
amod(disappointment-28, popular-27)
nsubj(is-29, disappointment-28)
ccomp(reflect-24, is-29)
case(results-32, over-30)
det(results-32, the-31)
nmod:over(is-29, results-32)
case(perestroika-35, of-33)
punct(perestroika-35, ``-34)
nmod:of(results-32, perestroika-35)
punct(perestroika-35, ''-36)
advmod(far-38, thus-37)
advmod(perestroika-35, far-38)
punct(reflect-24, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: assault#gorbachev

assault :: The bill admits that the key to winning the drug war is assaulting the demand side ./.
det(bill-2, The-1)
nsubj(admits-3, bill-2)
root(ROOT-0, admits-3)
mark(assaulting-13, that-4)
det(key-6, the-5)
nsubj(assaulting-13, key-6)
mark(winning-8, to-7)
acl(key-6, winning-8)
det(war-11, the-9)
compound(war-11, drug-10)
dobj(winning-8, war-11)
aux(assaulting-13, is-12)
ccomp(admits-3, assaulting-13)
det(side-16, the-14)
compound(side-16, demand-15)
dobj(assaulting-13, side-16)
punct(admits-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: assault#side

assault :: For the past 10 years the House Subcommittee on Africa , first under Stephen Solarz -LRB- D . , N.Y. -RRB- and now under Howard Wolpe -LRB- D . , Mich. -RRB- , has annually assaulted White House requests for aid appropriations ./.
case(years-5, For-1)
det(years-5, the-2)
amod(years-5, past-3)
nummod(years-5, 10-4)
root(ROOT-0, years-5)
det(Subcommittee-8, the-6)
compound(Subcommittee-8, House-7)
dep(years-5, Subcommittee-8)
case(Africa-10, on-9)
nmod:on(Subcommittee-8, Africa-10)
punct(Subcommittee-8, ,-11)
advmod(Subcommittee-8, first-12)
case(Solarz-15, under-13)
compound(Solarz-15, Stephen-14)
nmod:under(first-12, Solarz-15)
punct(D-17, -LRB--16)
appos(Solarz-15, D-17)
punct(D-17, .-18)
punct(N.Y.-2, ,-1)
root(ROOT-0, N.Y.-2)
punct(N.Y.-2, -RRB--3)
cc(N.Y.-2, and-4)
advmod(Wolpe-8, now-5)
case(Wolpe-8, under-6)
compound(Wolpe-8, Howard-7)
conj:and(N.Y.-2, Wolpe-8)
punct(D-10, -LRB--9)
appos(Wolpe-8, D-10)
punct(D-10, .-11)
punct(assaulted-7, ,-1)
dep(assaulted-7, Mich.-2)
punct(Mich.-2, -RRB--3)
punct(assaulted-7, ,-4)
aux(assaulted-7, has-5)
advmod(assaulted-7, annually-6)
root(ROOT-0, assaulted-7)
compound(requests-10, White-8)
compound(requests-10, House-9)
dobj(assaulted-7, requests-10)
case(appropriations-13, for-11)
compound(appropriations-13, aid-12)
nmod:for(requests-10, appropriations-13)
punct(assaulted-7, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: assault#requests

assault :: Sound is not the only thing with which the audience is assaulted at `` Chess . ''/''
nsubj(thing-6, Sound-1)
cop(thing-6, is-2)
neg(thing-6, not-3)
det(thing-6, the-4)
amod(thing-6, only-5)
root(ROOT-0, thing-6)
nmod:with(assaulted-12, thing-6)
case(which-8, with-7)
ref(thing-6, which-8)
det(audience-10, the-9)
nsubjpass(assaulted-12, audience-10)
auxpass(assaulted-12, is-11)
acl:relcl(thing-6, assaulted-12)
case(Chess-15, at-13)
punct(Chess-15, ``-14)
nmod:at(assaulted-12, Chess-15)
punct(thing-6, .-16)
punct(thing-6, ''-17)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: assault#audience

assault :: BEST -- Baker: Attempted in each post to make government function using , not assaulting , the democratic process ./.
root(ROOT-0, BEST-1)
punct(Baker-3, ---2)
dep(BEST-1, Baker-3)
punct(Baker-3, :-4)
dep(Baker-3, Attempted-5)
case(post-8, in-6)
det(post-8, each-7)
nmod:in(Attempted-5, post-8)
mark(make-10, to-9)
xcomp(Attempted-5, make-10)
compound(function-12, government-11)
dobj(make-10, function-12)
xcomp(make-10, using-13)
punct(using-13, ,-14)
neg(assaulting-16, not-15)
dep(using-13, assaulting-16)
punct(using-13, ,-17)
det(process-20, the-18)
amod(process-20, democratic-19)
dobj(using-13, process-20)
punct(BEST-1, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

assault :: For example , he carefully steered clear of controversies such as New York 's Tawana Brawley case , where some rabble-rousing lawyers are charging that a young black woman was assaulted and raped by whites ./.
case(example-2, For-1)
nmod:for(steered-6, example-2)
punct(steered-6, ,-3)
nsubj(steered-6, he-4)
advmod(steered-6, carefully-5)
root(ROOT-0, steered-6)
xcomp(steered-6, clear-7)
case(controversies-9, of-8)
nmod:of(clear-7, controversies-9)
case(case-17, such-10)
mwe(such-10, as-11)
compound(York-13, New-12)
nmod:poss(case-17, York-13)
case(York-13, 's-14)
compound(case-17, Tawana-15)
compound(case-17, Brawley-16)
nmod:such_as(controversies-9, case-17)
mark(assaulted-31, case-17)
punct(case-17, ,-18)
advmod(charging-24, where-19)
det(lawyers-22, some-20)
amod(lawyers-22, rabble-rousing-21)
nsubj(charging-24, lawyers-22)
aux(charging-24, are-23)
acl:relcl(case-17, charging-24)
ref(case-17, that-25)
det(woman-29, a-26)
amod(woman-29, young-27)
amod(woman-29, black-28)
nsubjpass(assaulted-31, woman-29)
nsubjpass(raped-33, woman-29)
auxpass(assaulted-31, was-30)
ccomp(charging-24, assaulted-31)
cc(assaulted-31, and-32)
ccomp(charging-24, raped-33)
conj:and(assaulted-31, raped-33)
case(whites-35, by-34)
nmod:agent(assaulted-31, whites-35)
punct(steered-6, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: assault#woman

assault :: Last year , the NRA ran a newspaper ad featuring a harrowing photo of a frightened woman and asserting that a 20-year-old American woman has a 72 % chance of being raped , robbed or assaulted in her lifetime ./.
amod(year-2, Last-1)
nmod:tmod(ran-6, year-2)
punct(ran-6, ,-3)
det(NRA-5, the-4)
nsubj(ran-6, NRA-5)
nsubj(asserting-19, NRA-5)
root(ROOT-0, ran-6)
det(ad-9, a-7)
compound(ad-9, newspaper-8)
dobj(ran-6, ad-9)
acl(ad-9, featuring-10)
det(photo-13, a-11)
amod(photo-13, harrowing-12)
dobj(featuring-10, photo-13)
case(woman-17, of-14)
det(woman-17, a-15)
amod(woman-17, frightened-16)
nmod:of(photo-13, woman-17)
cc(ran-6, and-18)
conj:and(ran-6, asserting-19)
mark(has-25, that-20)
det(woman-24, a-21)
amod(woman-24, 20-year-old-22)
amod(woman-24, American-23)
nsubj(has-25, woman-24)
ccomp(asserting-19, has-25)
det(chance-29, a-26)
compound(%-28, 72-27)
amod(chance-29, %-28)
dobj(has-25, chance-29)
mark(raped-32, of-30)
auxpass(raped-32, being-31)
acl(chance-29, raped-32)
punct(raped-32, ,-33)
acl(chance-29, robbed-34)
conj:or(raped-32, robbed-34)
cc(raped-32, or-35)
acl(chance-29, assaulted-36)
conj:or(raped-32, assaulted-36)
case(lifetime-39, in-37)
nmod:poss(lifetime-39, her-38)
nmod:in(raped-32, lifetime-39)
punct(ran-6, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

assault :: Among the tantrums he admits: heaving a faulty phone across the control room , kicking in a TV screen to force NBC to buy a new one , and assaulting construction workers who were too noisy during taping ./.
case(tantrums-3, Among-1)
det(tantrums-3, the-2)
nmod:among(heaving-7, tantrums-3)
nsubj(admits-5, he-4)
acl:relcl(tantrums-3, admits-5)
punct(heaving-7, :-6)
root(ROOT-0, heaving-7)
det(phone-10, a-8)
amod(phone-10, faulty-9)
dobj(heaving-7, phone-10)
case(room-14, across-11)
det(room-14, the-12)
compound(room-14, control-13)
nmod:across(phone-10, room-14)
punct(heaving-7, ,-15)
conj:and(heaving-7, kicking-16)
case(screen-20, in-17)
det(screen-20, a-18)
compound(screen-20, TV-19)
nmod:in(kicking-16, screen-20)
mark(force-22, to-21)
xcomp(kicking-16, force-22)
dobj(force-22, NBC-23)
nsubj:xsubj(buy-25, NBC-23)
mark(buy-25, to-24)
xcomp(force-22, buy-25)
det(one-28, a-26)
amod(one-28, new-27)
dobj(buy-25, one-28)
punct(heaving-7, ,-29)
cc(heaving-7, and-30)
conj:and(heaving-7, assaulting-31)
compound(workers-33, construction-32)
dobj(assaulting-31, workers-33)
nsubj(noisy-37, workers-33)
ref(workers-33, who-34)
cop(noisy-37, were-35)
advmod(noisy-37, too-36)
acl:relcl(workers-33, noisy-37)
mark(taping-39, during-38)
advcl(noisy-37, taping-39)
punct(heaving-7, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: assault#workers

assault :: Mr. Tyson has denied that he tried to kill himself and that he assaulted his wife ./.
compound(Tyson-2, Mr.-1)
nsubj(denied-4, Tyson-2)
aux(denied-4, has-3)
root(ROOT-0, denied-4)
mark(tried-7, that-5)
nsubj(tried-7, he-6)
nsubj:xsubj(kill-9, he-6)
ccomp(denied-4, tried-7)
mark(kill-9, to-8)
xcomp(tried-7, kill-9)
dobj(kill-9, himself-10)
cc(tried-7, and-11)
mark(assaulted-14, that-12)
nsubj(assaulted-14, he-13)
ccomp(denied-4, assaulted-14)
conj:and(tried-7, assaulted-14)
nmod:poss(wife-16, his-15)
dobj(assaulted-14, wife-16)
punct(denied-4, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: assault#wife

assault :: He was detained on June 23 , and for two weeks he was regularly assaulted by South African police ./.
nsubjpass(detained-3, He-1)
auxpass(detained-3, was-2)
root(ROOT-0, detained-3)
case(June-5, on-4)
nmod:on(detained-3, June-5)
nummod(June-5, 23-6)
punct(detained-3, ,-7)
cc(detained-3, and-8)
case(weeks-11, for-9)
nummod(weeks-11, two-10)
conj:and(detained-3, weeks-11)
nsubjpass(assaulted-15, he-12)
auxpass(assaulted-15, was-13)
advmod(assaulted-15, regularly-14)
acl:relcl(weeks-11, assaulted-15)
case(police-19, by-16)
amod(African-18, South-17)
amod(police-19, African-18)
nmod:agent(assaulted-15, police-19)
punct(detained-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: assault#he

assault :: John Gil , a San Diego landlord , and Mike Black , an apartment manager , were sued in state Superior Court in San Diego by a tenant who was assaulted by a pet monkey owned by two other renters ./.
compound(Gil-2, John-1)
nsubjpass(sued-18, Gil-2)
punct(Gil-2, ,-3)
det(landlord-7, a-4)
compound(landlord-7, San-5)
compound(landlord-7, Diego-6)
appos(Gil-2, landlord-7)
punct(Gil-2, ,-8)
cc(Gil-2, and-9)
compound(Black-11, Mike-10)
conj:and(Gil-2, Black-11)
nsubjpass(sued-18, Black-11)
punct(Black-11, ,-12)
det(manager-15, an-13)
compound(manager-15, apartment-14)
appos(Black-11, manager-15)
punct(Black-11, ,-16)
auxpass(sued-18, were-17)
root(ROOT-0, sued-18)
case(Court-22, in-19)
compound(Court-22, state-20)
amod(Court-22, Superior-21)
nmod:in(sued-18, Court-22)
case(Diego-25, in-23)
compound(Diego-25, San-24)
nmod:in(Court-22, Diego-25)
case(tenant-28, by-26)
det(tenant-28, a-27)
nmod:agent(sued-18, tenant-28)
nsubjpass(assaulted-31, tenant-28)
ref(tenant-28, who-29)
auxpass(assaulted-31, was-30)
acl:relcl(tenant-28, assaulted-31)
case(monkey-35, by-32)
det(monkey-35, a-33)
compound(monkey-35, pet-34)
nmod:agent(assaulted-31, monkey-35)
acl(monkey-35, owned-36)
case(renters-40, by-37)
nummod(renters-40, two-38)
amod(renters-40, other-39)
nmod:by(owned-36, renters-40)
punct(sued-18, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: assault#tenant

assault :: Mr. Guez , of Old Westbury , N.Y . , also is currently under indictment and awaiting trial for allegedly assaulting a deputy U.S. marshal who tried to seize Sasson records last year at the posh $ 5.5 million Manhattan townhouse where Mr. Guez once resided ./.
compound(Guez-2, Mr.-1)
root(ROOT-0, Guez-2)
punct(Guez-2, ,-3)
case(Westbury-6, of-4)
amod(Westbury-6, Old-5)
nmod:of(Guez-2, Westbury-6)
punct(Westbury-6, ,-7)
appos(Westbury-6, N.Y-8)
punct(Guez-2, .-9)
punct(indictment-6, ,-1)
advmod(indictment-6, also-2)
cop(indictment-6, is-3)
advmod(indictment-6, currently-4)
case(indictment-6, under-5)
root(ROOT-0, indictment-6)
cc(indictment-6, and-7)
conj:and(indictment-6, awaiting-8)
dobj(awaiting-8, trial-9)
mark(assaulting-12, for-10)
advmod(assaulting-12, allegedly-11)
acl(trial-9, assaulting-12)
det(marshal-16, a-13)
amod(marshal-16, deputy-14)
compound(marshal-16, U.S.-15)
dobj(assaulting-12, marshal-16)
nsubj(tried-18, marshal-16)
nsubj:xsubj(seize-20, marshal-16)
ref(marshal-16, who-17)
acl:relcl(marshal-16, tried-18)
mark(seize-20, to-19)
xcomp(tried-18, seize-20)
compound(records-22, Sasson-21)
dobj(seize-20, records-22)
amod(year-24, last-23)
nmod:tmod(tried-18, year-24)
case(townhouse-32, at-25)
det(townhouse-32, the-26)
amod(townhouse-32, posh-27)
amod(townhouse-32, $-28)
compound(million-30, 5.5-29)
nummod($-28, million-30)
compound(townhouse-32, Manhattan-31)
nmod:at(tried-18, townhouse-32)
advmod(resided-37, where-33)
compound(Guez-35, Mr.-34)
nsubj(resided-37, Guez-35)
advmod(resided-37, once-36)
acl:relcl(townhouse-32, resided-37)
punct(indictment-6, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: assault#marshal

attack :: Then two industry trade groups sued the state , attacking the lemon law 's constitutionality ./.
advmod(sued-6, Then-1)
nummod(groups-5, two-2)
compound(groups-5, industry-3)
compound(groups-5, trade-4)
nsubj(sued-6, groups-5)
root(ROOT-0, sued-6)
det(state-8, the-7)
dobj(sued-6, state-8)
punct(sued-6, ,-9)
advcl(sued-6, attacking-10)
det(law-13, the-11)
compound(law-13, lemon-12)
nmod:poss(constitutionality-15, law-13)
case(law-13, 's-14)
dobj(attacking-10, constitutionality-15)
punct(sued-6, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#constitutionality

attack :: And so it is on the grounds of insufficient candor that the resourceful Mr. Goldman , hot to debunk , attacks his subject ./.
root(ROOT-0, And-1)
advmod(grounds-7, so-2)
nsubj(grounds-7, it-3)
cop(grounds-7, is-4)
case(grounds-7, on-5)
det(grounds-7, the-6)
dep(And-1, grounds-7)
case(candor-10, of-8)
amod(candor-10, insufficient-9)
nmod:of(grounds-7, candor-10)
mark(attacks-21, that-11)
det(Goldman-15, the-12)
amod(Goldman-15, resourceful-13)
compound(Goldman-15, Mr.-14)
nsubj(attacks-21, Goldman-15)
punct(Goldman-15, ,-16)
amod(Goldman-15, hot-17)
mark(debunk-19, to-18)
xcomp(hot-17, debunk-19)
punct(Goldman-15, ,-20)
ccomp(candor-10, attacks-21)
nmod:poss(subject-23, his-22)
dobj(attacks-21, subject-23)
punct(grounds-7, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#subject

attack :: `` Otherwise we will also be attacked . ''/''
punct(attacked-7, ``-1)
advmod(attacked-7, Otherwise-2)
nsubjpass(attacked-7, we-3)
aux(attacked-7, will-4)
advmod(attacked-7, also-5)
auxpass(attacked-7, be-6)
root(ROOT-0, attacked-7)
punct(attacked-7, .-8)
punct(attacked-7, ''-9)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: attack#we

attack :: `` A Bright Shining Lie '' will be attacked by those who have trimmed their judgments to this decade 's prevailing winds ./.
punct(attacked-9, ``-1)
det(Lie-5, A-2)
amod(Lie-5, Bright-3)
amod(Lie-5, Shining-4)
nsubjpass(attacked-9, Lie-5)
punct(attacked-9, ''-6)
aux(attacked-9, will-7)
auxpass(attacked-9, be-8)
root(ROOT-0, attacked-9)
case(those-11, by-10)
nmod:agent(attacked-9, those-11)
nsubj(trimmed-14, those-11)
ref(those-11, who-12)
aux(trimmed-14, have-13)
acl:relcl(those-11, trimmed-14)
nmod:poss(judgments-16, their-15)
dobj(trimmed-14, judgments-16)
case(winds-22, to-17)
det(decade-19, this-18)
nmod:poss(winds-22, decade-19)
case(decade-19, 's-20)
amod(winds-22, prevailing-21)
nmod:to(trimmed-14, winds-22)
punct(attacked-9, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#lie

attack :: The approach is raising eyebrows in the cigarette industry , which generally refrains from attacking the competition by name ./.
det(approach-2, The-1)
nsubj(raising-4, approach-2)
aux(raising-4, is-3)
root(ROOT-0, raising-4)
dobj(raising-4, eyebrows-5)
case(industry-9, in-6)
det(industry-9, the-7)
compound(industry-9, cigarette-8)
nmod:in(raising-4, industry-9)
nsubj(refrains-13, industry-9)
punct(industry-9, ,-10)
ref(industry-9, which-11)
advmod(refrains-13, generally-12)
acl:relcl(industry-9, refrains-13)
mark(attacking-15, from-14)
advcl(refrains-13, attacking-15)
det(competition-17, the-16)
dobj(attacking-15, competition-17)
case(name-19, by-18)
nmod:by(attacking-15, name-19)
punct(raising-4, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#competition

attack :: Their report , to be published here Saturday in the Lancet , a leading British medical journal , immediately was attacked by some radiation specialists as too optimistic ./.
nmod:poss(report-2, Their-1)
nsubjpass(attacked-21, report-2)
punct(report-2, ,-3)
mark(published-6, to-4)
auxpass(published-6, be-5)
acl(report-2, published-6)
advmod(published-6, here-7)
nmod:tmod(published-6, Saturday-8)
case(Lancet-11, in-9)
det(Lancet-11, the-10)
nmod:in(published-6, Lancet-11)
punct(report-2, ,-12)
det(journal-17, a-13)
amod(journal-17, leading-14)
compound(journal-17, British-15)
compound(journal-17, medical-16)
appos(report-2, journal-17)
punct(report-2, ,-18)
advmod(attacked-21, immediately-19)
auxpass(attacked-21, was-20)
root(ROOT-0, attacked-21)
case(specialists-25, by-22)
det(specialists-25, some-23)
compound(specialists-25, radiation-24)
nmod:agent(attacked-21, specialists-25)
advmod(optimistic-28, as-26)
advmod(optimistic-28, too-27)
advcl(attacked-21, optimistic-28)
punct(attacked-21, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#report

attack :: He predicted the opinion `` will open up a can of worms because now any trade organization can attack any trademark claimed by someone else in the industry . ''/''
nsubj(predicted-2, He-1)
root(ROOT-0, predicted-2)
det(opinion-4, the-3)
nsubj(open-7, opinion-4)
punct(open-7, ``-5)
aux(open-7, will-6)
ccomp(predicted-2, open-7)
compound:prt(open-7, up-8)
det(can-10, a-9)
dobj(open-7, can-10)
case(worms-12, of-11)
nmod:of(can-10, worms-12)
mark(attack-19, because-13)
advmod(attack-19, now-14)
det(organization-17, any-15)
compound(organization-17, trade-16)
nsubj(attack-19, organization-17)
aux(attack-19, can-18)
advcl(open-7, attack-19)
det(trademark-21, any-20)
dobj(attack-19, trademark-21)
acl(trademark-21, claimed-22)
case(someone-24, by-23)
nmod:by(claimed-22, someone-24)
advmod(someone-24, else-25)
case(industry-28, in-26)
det(industry-28, the-27)
nmod:in(someone-24, industry-28)
punct(predicted-2, .-29)
punct(predicted-2, ''-30)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: attack#trademark

attack :: On the stage , looking tired from ceaseless concertizing at just about every summer festival there is , Vladimir Feltsman attacked his recital program with typical confidence and power ./.
case(stage-3, On-1)
det(stage-3, the-2)
nmod:on(attacked-21, stage-3)
punct(attacked-21, ,-4)
advcl(attacked-21, looking-5)
xcomp(looking-5, tired-6)
case(ceaseless-8, from-7)
nmod:from(tired-6, ceaseless-8)
acl(ceaseless-8, concertizing-9)
case(festival-15, at-10)
advmod(festival-15, just-11)
advmod(festival-15, about-12)
det(festival-15, every-13)
compound(festival-15, summer-14)
nmod:at(concertizing-9, festival-15)
expl(is-17, there-16)
ccomp(concertizing-9, is-17)
punct(attacked-21, ,-18)
compound(Feltsman-20, Vladimir-19)
nsubj(attacked-21, Feltsman-20)
root(ROOT-0, attacked-21)
nmod:poss(program-24, his-22)
compound(program-24, recital-23)
dobj(attacked-21, program-24)
case(confidence-27, with-25)
amod(confidence-27, typical-26)
nmod:with(attacked-21, confidence-27)
cc(confidence-27, and-28)
nmod:with(attacked-21, power-29)
conj:and(confidence-27, power-29)
punct(attacked-21, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#program

attack :: Recriminations already are beginning to fly in Israel as Foreign Minister Shimon Peres , who hopes to be Israel 's next prime minister , attacks the present one for lost opportunities to make peace while Iraq was distracted ./.
nsubj(beginning-4, Recriminations-1)
nsubj:xsubj(fly-6, Recriminations-1)
advmod(beginning-4, already-2)
aux(beginning-4, are-3)
csubj(attacks-25, beginning-4)
mark(fly-6, to-5)
xcomp(beginning-4, fly-6)
case(Israel-8, in-7)
nmod:in(fly-6, Israel-8)
case(Peres-13, as-9)
compound(Peres-13, Foreign-10)
compound(Peres-13, Minister-11)
compound(Peres-13, Shimon-12)
nmod:as(fly-6, Peres-13)
nsubj(hopes-16, Peres-13)
nsubj:xsubj(minister-23, Peres-13)
punct(Peres-13, ,-14)
ref(Peres-13, who-15)
acl:relcl(Peres-13, hopes-16)
mark(minister-23, to-17)
cop(minister-23, be-18)
nmod:poss(minister-23, Israel-19)
case(Israel-19, 's-20)
amod(minister-23, next-21)
compound(minister-23, prime-22)
xcomp(hopes-16, minister-23)
punct(Peres-13, ,-24)
root(ROOT-0, attacks-25)
det(one-28, the-26)
amod(one-28, present-27)
dobj(attacks-25, one-28)
case(opportunities-31, for-29)
amod(opportunities-31, lost-30)
nmod:for(one-28, opportunities-31)
mark(make-33, to-32)
acl(opportunities-31, make-33)
dobj(make-33, peace-34)
mark(distracted-38, while-35)
nsubjpass(distracted-38, Iraq-36)
auxpass(distracted-38, was-37)
advcl(attacks-25, distracted-38)
punct(attacks-25, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#one

attack :: He returned to attack bats , helmets and pitched balls with equal gusto -LRB- he 's in the league 's Top 10 in five offensive categories -RRB- , and gave the club a needed injection of esprit ./.
nsubj(returned-2, He-1)
nsubj:xsubj(attack-4, He-1)
nsubj(gave-30, He-1)
root(ROOT-0, returned-2)
mark(attack-4, to-3)
xcomp(returned-2, attack-4)
dobj(attack-4, bats-5)
punct(bats-5, ,-6)
dobj(attack-4, helmets-7)
conj:and(bats-5, helmets-7)
cc(bats-5, and-8)
dobj(attack-4, pitched-9)
conj:and(bats-5, pitched-9)
dobj(pitched-9, balls-10)
case(gusto-13, with-11)
amod(gusto-13, equal-12)
nmod:with(balls-10, gusto-13)
punct(10-22, -LRB--14)
nsubj(10-22, he-15)
cop(10-22, 's-16)
case(10-22, in-17)
det(league-19, the-18)
nmod:poss(10-22, league-19)
case(league-19, 's-20)
amod(10-22, Top-21)
dep(returned-2, 10-22)
case(categories-26, in-23)
nummod(categories-26, five-24)
amod(categories-26, offensive-25)
nmod:in(10-22, categories-26)
punct(10-22, -RRB--27)
punct(returned-2, ,-28)
cc(returned-2, and-29)
conj:and(returned-2, gave-30)
det(club-32, the-31)
iobj(gave-30, club-32)
det(injection-35, a-33)
amod(injection-35, needed-34)
dobj(gave-30, injection-35)
case(esprit-37, of-36)
nmod:of(injection-35, esprit-37)
punct(returned-2, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#bats

attack :: If so , human cells may also make similar proteins -- potentially confusing immune cells that target foreign stress proteins and inducing them to attack a person 's own cells ./.
mark(so-2, If-1)
advmod(make-8, so-2)
punct(make-8, ,-3)
amod(cells-5, human-4)
nsubj(make-8, cells-5)
aux(make-8, may-6)
advmod(make-8, also-7)
root(ROOT-0, make-8)
amod(proteins-10, similar-9)
dobj(make-8, proteins-10)
punct(cells-15, ---11)
advmod(confusing-13, potentially-12)
amod(cells-15, confusing-13)
amod(cells-15, immune-14)
dep(proteins-10, cells-15)
nsubj(target-17, cells-15)
nsubj(inducing-22, cells-15)
ref(cells-15, that-16)
acl:relcl(cells-15, target-17)
amod(proteins-20, foreign-18)
compound(proteins-20, stress-19)
dobj(target-17, proteins-20)
cc(target-17, and-21)
acl:relcl(cells-15, inducing-22)
conj:and(target-17, inducing-22)
dobj(inducing-22, them-23)
nsubj:xsubj(attack-25, them-23)
mark(attack-25, to-24)
xcomp(inducing-22, attack-25)
det(person-27, a-26)
nmod:poss(cells-30, person-27)
case(person-27, 's-28)
amod(cells-30, own-29)
dobj(attack-25, cells-30)
punct(make-8, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#cells

attack :: The specialist system has been attacked frequently since the October market crash , especially by the Chicago-based futures markets ./.
det(system-3, The-1)
compound(system-3, specialist-2)
nsubjpass(attacked-6, system-3)
aux(attacked-6, has-4)
auxpass(attacked-6, been-5)
root(ROOT-0, attacked-6)
advmod(attacked-6, frequently-7)
case(crash-12, since-8)
det(crash-12, the-9)
compound(crash-12, October-10)
compound(crash-12, market-11)
nmod:since(attacked-6, crash-12)
punct(attacked-6, ,-13)
advmod(markets-19, especially-14)
case(markets-19, by-15)
det(markets-19, the-16)
amod(markets-19, Chicago-based-17)
compound(markets-19, futures-18)
nmod:agent(attacked-6, markets-19)
punct(attacked-6, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#system

attack :: It turned out that a protein segment in cartilage is similar to the bacterial protein segment , which explained why the white cells also attacked the cartilage ./.
nsubj(turned-2, It-1)
root(ROOT-0, turned-2)
compound:prt(turned-2, out-3)
mark(similar-11, that-4)
det(segment-7, a-5)
compound(segment-7, protein-6)
nsubj(similar-11, segment-7)
case(cartilage-9, in-8)
nmod:in(segment-7, cartilage-9)
cop(similar-11, is-10)
ccomp(turned-2, similar-11)
case(segment-16, to-12)
det(segment-16, the-13)
amod(segment-16, bacterial-14)
compound(segment-16, protein-15)
nmod:to(similar-11, segment-16)
nsubj(explained-19, segment-16)
punct(segment-16, ,-17)
ref(segment-16, which-18)
acl:relcl(segment-16, explained-19)
advmod(attacked-25, why-20)
det(cells-23, the-21)
amod(cells-23, white-22)
nsubj(attacked-25, cells-23)
advmod(attacked-25, also-24)
advcl(explained-19, attacked-25)
det(cartilage-27, the-26)
dobj(attacked-25, cartilage-27)
punct(turned-2, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#cartilage

attack :: These pamphlets were among dozens written just after the Tulipmania by anti-speculative partisans attacking the speculative markets and especially futures trading ./.
det(pamphlets-2, These-1)
nsubj(dozens-5, pamphlets-2)
cop(dozens-5, were-3)
case(dozens-5, among-4)
root(ROOT-0, dozens-5)
acl(dozens-5, written-6)
advmod(Tulipmania-10, just-7)
case(Tulipmania-10, after-8)
det(Tulipmania-10, the-9)
nmod:after(written-6, Tulipmania-10)
case(partisans-13, by-11)
amod(partisans-13, anti-speculative-12)
nmod:by(written-6, partisans-13)
acl(partisans-13, attacking-14)
det(markets-17, the-15)
amod(markets-17, speculative-16)
dobj(attacking-14, markets-17)
cc(markets-17, and-18)
advmod(trading-21, especially-19)
compound(trading-21, futures-20)
dobj(attacking-14, trading-21)
conj:and(markets-17, trading-21)
punct(dozens-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#markets

attack :: The filing also reported two lawsuits brought by Staley shareholders attacking the company 's extensive anti-takeover arsenal ./.
det(filing-2, The-1)
nsubj(reported-4, filing-2)
advmod(reported-4, also-3)
root(ROOT-0, reported-4)
nummod(lawsuits-6, two-5)
dobj(reported-4, lawsuits-6)
acl(lawsuits-6, brought-7)
case(shareholders-10, by-8)
compound(shareholders-10, Staley-9)
nmod:by(brought-7, shareholders-10)
acl(lawsuits-6, attacking-11)
det(company-13, the-12)
nmod:poss(arsenal-17, company-13)
case(company-13, 's-14)
amod(arsenal-17, extensive-15)
amod(arsenal-17, anti-takeover-16)
dobj(attacking-11, arsenal-17)
punct(reported-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#arsenal

attack :: According to this view , a work of art is an extension of the personality of the artist ; to alter or mutilate it is to attack the very personality of the artist ./.
case(view-4, According-1)
mwe(According-1, to-2)
det(view-4, this-3)
nmod:according_to(extension-12, view-4)
punct(extension-12, ,-5)
det(work-7, a-6)
nsubj(extension-12, work-7)
case(art-9, of-8)
nmod:of(work-7, art-9)
cop(extension-12, is-10)
det(extension-12, an-11)
root(ROOT-0, extension-12)
case(personality-15, of-13)
det(personality-15, the-14)
nmod:of(extension-12, personality-15)
case(artist-18, of-16)
det(artist-18, the-17)
nmod:of(personality-15, artist-18)
punct(extension-12, ;-19)
mark(alter-21, to-20)
parataxis(extension-12, alter-21)
cc(alter-21, or-22)
parataxis(extension-12, mutilate-23)
conj:or(alter-21, mutilate-23)
dobj(alter-21, it-24)
dep(alter-21, is-25)
mark(attack-27, to-26)
xcomp(is-25, attack-27)
det(personality-30, the-28)
amod(personality-30, very-29)
dobj(attack-27, personality-30)
case(artist-33, of-31)
det(artist-33, the-32)
nmod:of(personality-30, artist-33)
punct(extension-12, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#artist

attack :: In his previous handling of the case , Judge Brieant roundly attacked the merits of the Pennzoil judgment ./.
case(handling-4, In-1)
nmod:poss(handling-4, his-2)
amod(handling-4, previous-3)
nmod:in(attacked-12, handling-4)
case(case-7, of-5)
det(case-7, the-6)
nmod:of(handling-4, case-7)
punct(attacked-12, ,-8)
compound(Brieant-10, Judge-9)
nsubj(attacked-12, Brieant-10)
advmod(attacked-12, roundly-11)
root(ROOT-0, attacked-12)
det(merits-14, the-13)
dobj(attacked-12, merits-14)
case(judgment-18, of-15)
det(judgment-18, the-16)
compound(judgment-18, Pennzoil-17)
nmod:of(merits-14, judgment-18)
punct(attacked-12, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#merits

attack :: These pamphlets were among dozens written just after the Tulipmania by anti-speculative partisans attacking the speculative markets and especially futures trading ./.
det(pamphlets-2, These-1)
nsubj(dozens-5, pamphlets-2)
cop(dozens-5, were-3)
case(dozens-5, among-4)
root(ROOT-0, dozens-5)
acl(dozens-5, written-6)
advmod(Tulipmania-10, just-7)
case(Tulipmania-10, after-8)
det(Tulipmania-10, the-9)
nmod:after(written-6, Tulipmania-10)
case(partisans-13, by-11)
amod(partisans-13, anti-speculative-12)
nmod:by(written-6, partisans-13)
acl(partisans-13, attacking-14)
det(markets-17, the-15)
amod(markets-17, speculative-16)
dobj(attacking-14, markets-17)
cc(markets-17, and-18)
advmod(trading-21, especially-19)
compound(trading-21, futures-20)
dobj(attacking-14, trading-21)
conj:and(markets-17, trading-21)
punct(dozens-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#markets

attack :: The virus attacked Argonne National Laboratory outside Chicago starting at 11:54 p.m. EST Wednesday and throughout the night ./.
det(virus-2, The-1)
nsubj(attacked-3, virus-2)
root(ROOT-0, attacked-3)
compound(Laboratory-6, Argonne-4)
compound(Laboratory-6, National-5)
dobj(attacked-3, Laboratory-6)
case(Chicago-8, outside-7)
nmod:outside(attacked-3, Chicago-8)
dep(attacked-3, starting-9)
case(p.m.-12, at-10)
nummod(p.m.-12, 11:54-11)
nmod:at(starting-9, p.m.-12)
compound(Wednesday-14, EST-13)
dep(p.m.-12, Wednesday-14)
cc(starting-9, and-15)
case(night-18, throughout-16)
det(night-18, the-17)
dep(attacked-3, night-18)
conj:and(starting-9, night-18)
punct(attacked-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#laboratory

attack :: `` The big question is whether the pest problems are happening by themselves or whether opportunistic insects are attacking weakened trees , '' said David Marvin , a maple syrup producer in Johnson , Vt ./.
punct(said-24, ``-1)
det(question-4, The-2)
amod(question-4, big-3)
nsubj(is-5, question-4)
ccomp(said-24, is-5)
mark(happening-11, whether-6)
det(problems-9, the-7)
compound(problems-9, pest-8)
nsubj(happening-11, problems-9)
aux(happening-11, are-10)
ccomp(is-5, happening-11)
case(themselves-13, by-12)
nmod:by(happening-11, themselves-13)
cc(happening-11, or-14)
mark(attacking-19, whether-15)
amod(insects-17, opportunistic-16)
nsubj(attacking-19, insects-17)
aux(attacking-19, are-18)
ccomp(is-5, attacking-19)
conj:or(happening-11, attacking-19)
ccomp(attacking-19, weakened-20)
dobj(weakened-20, trees-21)
punct(said-24, ,-22)
punct(said-24, ''-23)
root(ROOT-0, said-24)
compound(Marvin-26, David-25)
nsubj(said-24, Marvin-26)
punct(Marvin-26, ,-27)
det(producer-31, a-28)
compound(producer-31, maple-29)
compound(producer-31, syrup-30)
appos(Marvin-26, producer-31)
case(Johnson-33, in-32)
nmod:in(producer-31, Johnson-33)
punct(Johnson-33, ,-34)
appos(Johnson-33, Vt-35)
punct(said-24, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#insects

attack :: His psyche was attacked first by New York Mets pitcher David Cone , who in print called his curveball `` high school , '' and then by A 's vet Don Baylor , who called him a `` choker , '' the ultimate ball-player insult ./.
nmod:poss(psyche-2, His-1)
nsubjpass(attacked-4, psyche-2)
auxpass(attacked-4, was-3)
root(ROOT-0, attacked-4)
advmod(attacked-4, first-5)
case(Cone-12, by-6)
compound(Cone-12, New-7)
compound(Cone-12, York-8)
compound(Cone-12, Mets-9)
compound(Cone-12, pitcher-10)
compound(Cone-12, David-11)
nmod:agent(attacked-4, Cone-12)
nsubj(called-17, Cone-12)
punct(Cone-12, ,-13)
ref(Cone-12, who-14)
case(print-16, in-15)
nmod:in(called-17, print-16)
acl:relcl(Cone-12, called-17)
nmod:poss(curveball-19, his-18)
dep(school-22, curveball-19)
punct(school-22, ``-20)
amod(school-22, high-21)
xcomp(called-17, school-22)
punct(Cone-12, ,-23)
punct(Cone-12, ''-24)
cc(Cone-12, and-25)
nmod:agent(attacked-4, then-26)
conj:and(Cone-12, then-26)
nsubj(called-17, then-26)
case(Baylor-32, by-27)
nmod:poss(Baylor-32, A-28)
case(A-28, 's-29)
compound(Baylor-32, vet-30)
compound(Baylor-32, Don-31)
nmod:by(then-26, Baylor-32)
nsubj(called-35, Baylor-32)
punct(Baylor-32, ,-33)
ref(Baylor-32, who-34)
acl:relcl(Baylor-32, called-35)
nsubj(choker-39, him-36)
det(choker-39, a-37)
punct(choker-39, ``-38)
xcomp(called-35, choker-39)
punct(Baylor-32, ,-40)
punct(Baylor-32, ''-41)
det(insult-45, the-42)
amod(insult-45, ultimate-43)
compound(insult-45, ball-player-44)
dep(Baylor-32, insult-45)
punct(attacked-4, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#psyche

attack :: It 's not enough to attack the ACLU simply by reciting its 10 most eccentric opinions , nor is it enough to defend the ACLU by recalling its occasional defense of unpopular groups and viewpoints ./.
nsubj(enough-4, It-1)
nsubj:xsubj(attack-6, It-1)
cop(enough-4, 's-2)
neg(enough-4, not-3)
root(ROOT-0, enough-4)
mark(attack-6, to-5)
xcomp(enough-4, attack-6)
det(ACLU-8, the-7)
dobj(attack-6, ACLU-8)
advmod(attack-6, simply-9)
mark(reciting-11, by-10)
advcl(attack-6, reciting-11)
nmod:poss(opinions-16, its-12)
nummod(opinions-16, 10-13)
advmod(eccentric-15, most-14)
amod(opinions-16, eccentric-15)
dobj(reciting-11, opinions-16)
punct(enough-4, ,-17)
cc(enough-4, nor-18)
aux(defend-23, is-19)
nsubj(defend-23, it-20)
advmod(defend-23, enough-21)
mark(defend-23, to-22)
conj:nor(enough-4, defend-23)
det(ACLU-25, the-24)
dobj(defend-23, ACLU-25)
mark(recalling-27, by-26)
advcl(defend-23, recalling-27)
nmod:poss(defense-30, its-28)
amod(defense-30, occasional-29)
dobj(recalling-27, defense-30)
case(groups-33, of-31)
amod(groups-33, unpopular-32)
nmod:of(defense-30, groups-33)
cc(groups-33, and-34)
nmod:of(defense-30, viewpoints-35)
conj:and(groups-33, viewpoints-35)
punct(enough-4, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#aclu

attack :: According to a recently unsealed transcript of a closed meeting in Judge Pollack 's chambers with defense attorneys on Sept. 13 , the judge claimed he was being attacked `` professionally '' and threatened to impose sanctions if the lawyers pursued the issue of removing him ./.
case(transcript-6, According-1)
mwe(According-1, to-2)
det(transcript-6, a-3)
advmod(unsealed-5, recently-4)
amod(transcript-6, unsealed-5)
nmod:according_to(claimed-25, transcript-6)
case(meeting-10, of-7)
det(meeting-10, a-8)
amod(meeting-10, closed-9)
nmod:of(transcript-6, meeting-10)
case(chambers-15, in-11)
compound(Pollack-13, Judge-12)
nmod:poss(chambers-15, Pollack-13)
case(Pollack-13, 's-14)
nmod:in(meeting-10, chambers-15)
case(attorneys-18, with-16)
compound(attorneys-18, defense-17)
nmod:with(meeting-10, attorneys-18)
case(Sept.-20, on-19)
nmod:on(meeting-10, Sept.-20)
nummod(Sept.-20, 13-21)
punct(claimed-25, ,-22)
det(judge-24, the-23)
nsubj(claimed-25, judge-24)
nsubj(threatened-34, judge-24)
nsubj:xsubj(impose-36, judge-24)
root(ROOT-0, claimed-25)
nsubjpass(attacked-29, he-26)
aux(attacked-29, was-27)
auxpass(attacked-29, being-28)
ccomp(claimed-25, attacked-29)
punct(attacked-29, ``-30)
advmod(attacked-29, professionally-31)
punct(attacked-29, ''-32)
cc(claimed-25, and-33)
conj:and(claimed-25, threatened-34)
mark(impose-36, to-35)
xcomp(threatened-34, impose-36)
dobj(impose-36, sanctions-37)
mark(pursued-41, if-38)
det(lawyers-40, the-39)
nsubj(pursued-41, lawyers-40)
advcl(impose-36, pursued-41)
det(issue-43, the-42)
dobj(pursued-41, issue-43)
mark(removing-45, of-44)
acl(issue-43, removing-45)
dobj(removing-45, him-46)
punct(claimed-25, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#he

attack :: Inflation , attacked in the abortive Austral Plan of 1985 and now the target of new economic measures , has exceeded 300 % over the past year ./.
nsubj(exceeded-21, Inflation-1)
punct(Inflation-1, ,-2)
acl(Inflation-1, attacked-3)
case(Plan-8, in-4)
det(Plan-8, the-5)
amod(Plan-8, abortive-6)
amod(Plan-8, Austral-7)
nmod:in(attacked-3, Plan-8)
case(1985-10, of-9)
nmod:of(Plan-8, 1985-10)
cc(attacked-3, and-11)
advmod(target-14, now-12)
det(target-14, the-13)
acl(Inflation-1, target-14)
conj:and(attacked-3, target-14)
case(measures-18, of-15)
amod(measures-18, new-16)
amod(measures-18, economic-17)
nmod:of(target-14, measures-18)
punct(Inflation-1, ,-19)
aux(exceeded-21, has-20)
root(ROOT-0, exceeded-21)
nummod(%-23, 300-22)
dobj(exceeded-21, %-23)
case(year-27, over-24)
det(year-27, the-25)
amod(year-27, past-26)
nmod:over(exceeded-21, year-27)
punct(exceeded-21, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#plan

attack :: The drought is spawning an explosion in the spider mite population by harming a plant fungus that attacks the tiny insects ./.
det(drought-2, The-1)
nsubj(spawning-4, drought-2)
aux(spawning-4, is-3)
root(ROOT-0, spawning-4)
det(explosion-6, an-5)
dobj(spawning-4, explosion-6)
case(population-11, in-7)
det(population-11, the-8)
compound(population-11, spider-9)
amod(population-11, mite-10)
nmod:in(explosion-6, population-11)
mark(harming-13, by-12)
advcl(spawning-4, harming-13)
det(fungus-16, a-14)
compound(fungus-16, plant-15)
dobj(harming-13, fungus-16)
nsubj(attacks-18, fungus-16)
ref(fungus-16, that-17)
acl:relcl(fungus-16, attacks-18)
det(insects-21, the-19)
amod(insects-21, tiny-20)
dobj(attacks-18, insects-21)
punct(spawning-4, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#insects

attack :: They suggested that their genetic variability may affect the infectiousness of the virus and its `` preference '' for attacking one type of cell over another ./.
nsubj(suggested-2, They-1)
root(ROOT-0, suggested-2)
mark(affect-8, that-3)
nmod:poss(variability-6, their-4)
amod(variability-6, genetic-5)
nsubj(affect-8, variability-6)
aux(affect-8, may-7)
ccomp(suggested-2, affect-8)
det(infectiousness-10, the-9)
dobj(affect-8, infectiousness-10)
case(virus-13, of-11)
det(virus-13, the-12)
nmod:of(infectiousness-10, virus-13)
cc(virus-13, and-14)
nmod:poss(preference-17, its-15)
punct(preference-17, ``-16)
nmod:of(infectiousness-10, preference-17)
conj:and(virus-13, preference-17)
punct(preference-17, ''-18)
mark(attacking-20, for-19)
acl(preference-17, attacking-20)
nummod(type-22, one-21)
dobj(attacking-20, type-22)
case(cell-24, of-23)
nmod:of(type-22, cell-24)
case(another-26, over-25)
nmod:over(attacking-20, another-26)
punct(suggested-2, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#cell

attack :: Mr. Cardenas 's stunning success in this month 's presidential election , when he took close to a third of the vote and loosened the traditional stranglehold of the Institutional Revolutionary Party , or PRI , illustrated that attacking debt payments wins votes ./.
compound(Cardenas-2, Mr.-1)
nmod:poss(success-5, Cardenas-2)
case(Cardenas-2, 's-3)
amod(success-5, stunning-4)
nsubj(illustrated-37, success-5)
case(election-11, in-6)
det(month-8, this-7)
nmod:poss(election-11, month-8)
case(month-8, 's-9)
amod(election-11, presidential-10)
nmod:in(success-5, election-11)
punct(election-11, ,-12)
advmod(took-15, when-13)
nsubj(took-15, he-14)
nsubj(loosened-24, he-14)
acl:relcl(election-11, took-15)
advmod(took-15, close-16)
case(third-19, to-17)
det(third-19, a-18)
nmod:to(took-15, third-19)
case(vote-22, of-20)
det(vote-22, the-21)
nmod:of(third-19, vote-22)
cc(took-15, and-23)
acl:relcl(election-11, loosened-24)
conj:and(took-15, loosened-24)
det(stranglehold-27, the-25)
amod(stranglehold-27, traditional-26)
dobj(loosened-24, stranglehold-27)
case(Party-32, of-28)
det(Party-32, the-29)
amod(Party-32, Institutional-30)
amod(Party-32, Revolutionary-31)
nmod:of(stranglehold-27, Party-32)
punct(stranglehold-27, ,-33)
cc(stranglehold-27, or-34)
dobj(loosened-24, PRI-35)
conj:or(stranglehold-27, PRI-35)
punct(election-11, ,-36)
root(ROOT-0, illustrated-37)
mark(wins-42, that-38)
amod(payments-41, attacking-39)
compound(payments-41, debt-40)
nsubj(wins-42, payments-41)
ccomp(illustrated-37, wins-42)
dobj(wins-42, votes-43)
punct(illustrated-37, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#payments

attack :: Similar in appearance and texture to petroleum-based plastics , the plastic decomposes into water and carbon dioxide when attacked by certain enzymes in the soil ./.
ccomp(decomposes-12, Similar-1)
case(appearance-3, in-2)
nmod:in(Similar-1, appearance-3)
cc(appearance-3, and-4)
nmod:in(Similar-1, texture-5)
conj:and(appearance-3, texture-5)
case(plastics-8, to-6)
amod(plastics-8, petroleum-based-7)
nmod:to(Similar-1, plastics-8)
punct(decomposes-12, ,-9)
det(plastic-11, the-10)
nsubj(decomposes-12, plastic-11)
root(ROOT-0, decomposes-12)
case(water-14, into-13)
nmod:into(decomposes-12, water-14)
cc(water-14, and-15)
compound(dioxide-17, carbon-16)
nmod:into(decomposes-12, dioxide-17)
conj:and(water-14, dioxide-17)
advmod(attacked-19, when-18)
advcl(decomposes-12, attacked-19)
case(enzymes-22, by-20)
amod(enzymes-22, certain-21)
nmod:by(attacked-19, enzymes-22)
case(soil-25, in-23)
det(soil-25, the-24)
nmod:in(enzymes-22, soil-25)
punct(decomposes-12, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#enzymes

attack :: The dissident group plans to attack several provisions that block claimants ' ability to seek compensation from any source other than the special trust fund ./.
det(plans-4, The-1)
amod(plans-4, dissident-2)
compound(plans-4, group-3)
root(ROOT-0, plans-4)
mark(attack-6, to-5)
acl(plans-4, attack-6)
amod(provisions-8, several-7)
dobj(attack-6, provisions-8)
nsubj(block-10, provisions-8)
ref(provisions-8, that-9)
acl:relcl(provisions-8, block-10)
nmod:poss(ability-13, claimants-11)
case(claimants-11, '-12)
dobj(block-10, ability-13)
mark(seek-15, to-14)
acl(ability-13, seek-15)
dobj(seek-15, compensation-16)
case(source-19, from-17)
det(source-19, any-18)
nmod:from(seek-15, source-19)
amod(source-19, other-20)
case(fund-25, than-21)
det(fund-25, the-22)
amod(fund-25, special-23)
compound(fund-25, trust-24)
nmod:than(other-20, fund-25)
punct(plans-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#provisions

attack :: In his own opinion , Chairman Ruder attacked both dissents as attempting to reduce the customer 's protection not only below the level set in the securities laws , but even below the standard set by common law ./.
case(opinion-4, In-1)
nmod:poss(opinion-4, his-2)
amod(opinion-4, own-3)
nmod:in(attacked-8, opinion-4)
punct(attacked-8, ,-5)
compound(Ruder-7, Chairman-6)
nsubj(attacked-8, Ruder-7)
root(ROOT-0, attacked-8)
det(dissents-10, both-9)
dobj(attacked-8, dissents-10)
mark(attempting-12, as-11)
advcl(attacked-8, attempting-12)
mark(reduce-14, to-13)
xcomp(attempting-12, reduce-14)
xcomp(attempting-12, reduce-14')
conj:but(reduce-14, reduce-14')
det(customer-16, the-15)
nmod:poss(protection-18, customer-16)
case(customer-16, 's-17)
dobj(reduce-14, protection-18)
neg(only-20, not-19)
cc:preconj(level-23, only-20)
case(level-23, below-21)
det(level-23, the-22)
nmod:below(reduce-14, level-23)
acl(level-23, set-24)
case(laws-28, in-25)
det(laws-28, the-26)
compound(laws-28, securities-27)
nmod:in(set-24, laws-28)
punct(level-23, ,-29)
cc(reduce-14, but-30)
advmod(standard-34, even-31)
case(standard-34, below-32)
det(standard-34, the-33)
nmod:below(reduce-14', standard-34)
acl(standard-34, set-35)
case(law-38, by-36)
amod(law-38, common-37)
nmod:by(set-35, law-38)
punct(attacked-8, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#dissents

attack :: `` We 're not attacking the core assets ; we 're looking at what we consider to be our less-profitable assets , '' the spokesman said ./.
punct(said-26, ``-1)
nsubj(attacking-5, We-2)
aux(attacking-5, 're-3)
neg(attacking-5, not-4)
ccomp(said-26, attacking-5)
det(assets-8, the-6)
compound(assets-8, core-7)
dobj(attacking-5, assets-8)
punct(attacking-5, ;-9)
nsubj(looking-12, we-10)
aux(looking-12, 're-11)
parataxis(attacking-5, looking-12)
mark(consider-16, at-13)
dobj(consider-16, what-14)
nsubj:xsubj(assets-21, what-14)
nsubj(consider-16, we-15)
advcl(looking-12, consider-16)
mark(assets-21, to-17)
cop(assets-21, be-18)
nmod:poss(assets-21, our-19)
amod(assets-21, less-profitable-20)
xcomp(consider-16, assets-21)
punct(said-26, ,-22)
punct(said-26, ''-23)
det(spokesman-25, the-24)
nsubj(said-26, spokesman-25)
root(ROOT-0, said-26)
punct(said-26, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#assets

attack :: Farmers also has questioned B.A.T 's ability to manage insurance operations and attacked its presence in South Africa ./.
nsubj(questioned-4, Farmers-1)
advmod(questioned-4, also-2)
aux(questioned-4, has-3)
root(ROOT-0, questioned-4)
nmod:poss(ability-7, B.A.T-5)
case(B.A.T-5, 's-6)
dobj(questioned-4, ability-7)
mark(manage-9, to-8)
acl(ability-7, manage-9)
compound(operations-11, insurance-10)
dobj(manage-9, operations-11)
cc(manage-9, and-12)
acl(ability-7, attacked-13)
conj:and(manage-9, attacked-13)
nmod:poss(presence-15, its-14)
dobj(attacked-13, presence-15)
case(Africa-18, in-16)
compound(Africa-18, South-17)
nmod:in(presence-15, Africa-18)
punct(questioned-4, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#presence

attack :: The rate found by the study , which is designed to be definitive and to squelch second guessing , already is being attacked as too low ./.
det(rate-2, The-1)
nsubjpass(attacked-23, rate-2)
acl(rate-2, found-3)
case(study-6, by-4)
det(study-6, the-5)
nmod:by(found-3, study-6)
nsubjpass(designed-10, study-6)
nsubj:xsubj(definitive-13, study-6)
nsubj:xsubj(squelch-16, study-6)
punct(study-6, ,-7)
ref(study-6, which-8)
auxpass(designed-10, is-9)
acl:relcl(study-6, designed-10)
mark(definitive-13, to-11)
cop(definitive-13, be-12)
xcomp(designed-10, definitive-13)
cc(definitive-13, and-14)
mark(squelch-16, to-15)
xcomp(designed-10, squelch-16)
conj:and(definitive-13, squelch-16)
amod(guessing-18, second-17)
dobj(squelch-16, guessing-18)
punct(attacked-23, ,-19)
advmod(attacked-23, already-20)
aux(attacked-23, is-21)
auxpass(attacked-23, being-22)
root(ROOT-0, attacked-23)
advmod(low-26, as-24)
advmod(low-26, too-25)
advcl(attacked-23, low-26)
punct(attacked-23, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#rate

attack :: Mr. Schnittke is also a composer of extremes , and in the new Fourth Piano Sonata he has Mr. Feltsman achieving kinetic climaxes at the highest and lowest registers simultaneously , the pianist 's arms widely extended and lunging at the piano like a hawk attacking his prey ./.
compound(Schnittke-2, Mr.-1)
nsubj(composer-6, Schnittke-2)
cop(composer-6, is-3)
advmod(composer-6, also-4)
det(composer-6, a-5)
root(ROOT-0, composer-6)
case(extremes-8, of-7)
nmod:of(composer-6, extremes-8)
punct(composer-6, ,-9)
cc(composer-6, and-10)
case(Sonata-16, in-11)
det(Sonata-16, the-12)
amod(Sonata-16, new-13)
amod(Sonata-16, Fourth-14)
compound(Sonata-16, Piano-15)
nmod:in(extended-37, Sonata-16)
nsubj(has-18, he-17)
acl:relcl(Sonata-16, has-18)
compound(Feltsman-20, Mr.-19)
nsubj(achieving-21, Feltsman-20)
ccomp(has-18, achieving-21)
amod(climaxes-23, kinetic-22)
dobj(achieving-21, climaxes-23)
case(highest-26, at-24)
det(highest-26, the-25)
nmod:at(achieving-21, highest-26)
cc(achieving-21, and-27)
nsubj(registers-29, lowest-28)
ccomp(has-18, registers-29)
conj:and(achieving-21, registers-29)
advmod(registers-29, simultaneously-30)
punct(extended-37, ,-31)
det(pianist-33, the-32)
nmod:poss(arms-35, pianist-33)
case(pianist-33, 's-34)
nsubj(extended-37, arms-35)
nsubj(lunging-39, arms-35)
advmod(extended-37, widely-36)
conj:and(composer-6, extended-37)
cc(extended-37, and-38)
conj:and(composer-6, lunging-39)
conj:and(extended-37, lunging-39)
case(piano-42, at-40)
det(piano-42, the-41)
nmod:at(extended-37, piano-42)
case(hawk-45, like-43)
det(hawk-45, a-44)
nmod:like(piano-42, hawk-45)
acl(hawk-45, attacking-46)
nmod:poss(prey-48, his-47)
dobj(attacking-46, prey-48)
punct(composer-6, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#prey

attack :: He also attacked a House panel for disclosing at least three pending SEC inquiries ./.
nsubj(attacked-3, He-1)
advmod(attacked-3, also-2)
root(ROOT-0, attacked-3)
det(panel-6, a-4)
compound(panel-6, House-5)
dobj(attacked-3, panel-6)
mark(disclosing-8, for-7)
advcl(attacked-3, disclosing-8)
case(least-10, at-9)
nmod:npmod(three-11, least-10)
nummod(inquiries-14, three-11)
amod(inquiries-14, pending-12)
compound(inquiries-14, SEC-13)
dobj(disclosing-8, inquiries-14)
punct(attacked-3, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#panel

attack :: During the debate , when Mr. Chirac derided Mr. Mitterrand for having changed his mind from time to time during a 40-year political career , Mr. Mitterrand , clearly well coached , retorted with some 10-year-old quotations from Mr. Chirac attacking the European Community , which Mr. Chirac now warmly embraces ./.
case(debate-3, During-1)
det(debate-3, the-2)
nmod:during(coached-31, debate-3)
punct(coached-31, ,-4)
advmod(derided-8, when-5)
compound(Chirac-7, Mr.-6)
nsubj(derided-8, Chirac-7)
advcl(coached-31, derided-8)
compound(Mitterrand-10, Mr.-9)
dobj(derided-8, Mitterrand-10)
mark(changed-13, for-11)
aux(changed-13, having-12)
advcl(derided-8, changed-13)
nmod:poss(mind-15, his-14)
dobj(changed-13, mind-15)
case(time-17, from-16)
nmod:from(changed-13, time-17)
case(time-19, to-18)
nmod:to(time-17, time-19)
case(career-24, during-20)
det(career-24, a-21)
amod(career-24, 40-year-22)
amod(career-24, political-23)
nmod:during(changed-13, career-24)
punct(coached-31, ,-25)
compound(Mitterrand-27, Mr.-26)
nsubj(coached-31, Mitterrand-27)
punct(Mitterrand-27, ,-28)
advmod(coached-31, clearly-29)
advmod(coached-31, well-30)
root(ROOT-0, coached-31)
punct(coached-31, ,-32)
dep(coached-31, retorted-33)
case(quotations-37, with-34)
det(quotations-37, some-35)
amod(quotations-37, 10-year-old-36)
nmod:with(retorted-33, quotations-37)
case(Chirac-40, from-38)
compound(Chirac-40, Mr.-39)
nmod:from(quotations-37, Chirac-40)
acl(Chirac-40, attacking-41)
det(Community-44, the-42)
compound(Community-44, European-43)
dobj(attacking-41, Community-44)
dobj(embraces-51, Community-44)
punct(Community-44, ,-45)
ref(Community-44, which-46)
compound(Chirac-48, Mr.-47)
nsubj(embraces-51, Chirac-48)
advmod(embraces-51, now-49)
advmod(embraces-51, warmly-50)
acl:relcl(Community-44, embraces-51)
punct(coached-31, .-52)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#community

attack :: I have dined out long enough on the strength of being attacked from the left by The Wall Street Journal editorial staff -LRB- it long being thought that nothing could exist to the right of that august body -RRB- ./.
nsubj(dined-3, I-1)
aux(dined-3, have-2)
root(ROOT-0, dined-3)
compound:prt(dined-3, out-4)
advmod(enough-6, long-5)
advmod(dined-3, enough-6)
case(strength-9, on-7)
det(strength-9, the-8)
nmod:on(dined-3, strength-9)
mark(attacked-12, of-10)
auxpass(attacked-12, being-11)
acl(strength-9, attacked-12)
case(left-15, from-13)
det(left-15, the-14)
nmod:from(attacked-12, left-15)
case(staff-22, by-16)
det(staff-22, The-17)
compound(staff-22, Wall-18)
compound(staff-22, Street-19)
compound(staff-22, Journal-20)
compound(staff-22, editorial-21)
nmod:by(left-15, staff-22)
punct(thought-27, -LRB--23)
nsubjpass(thought-27, it-24)
advmod(thought-27, long-25)
auxpass(thought-27, being-26)
dep(left-15, thought-27)
mark(exist-31, that-28)
nsubj(exist-31, nothing-29)
aux(exist-31, could-30)
ccomp(thought-27, exist-31)
case(right-34, to-32)
det(right-34, the-33)
nmod:to(exist-31, right-34)
case(body-38, of-35)
det(body-38, that-36)
compound(body-38, august-37)
nmod:of(right-34, body-38)
punct(thought-27, -RRB--39)
punct(dined-3, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#being

attack :: In addition , Mr. Joseph said , referring to the subcommittee 's questions about Beatrice , Texstyrene and one other junk-bond issue , by Hanover Petroleum Corp . , `` I do n't think it 's fair at all to attack the firm over two or three instances . ''/''
case(addition-2, In-1)
root(ROOT-0, addition-2)
punct(said-6, ,-3)
compound(Joseph-5, Mr.-4)
nsubj(said-6, Joseph-5)
acl:relcl(addition-2, said-6)
punct(said-6, ,-7)
xcomp(said-6, referring-8)
case(questions-13, to-9)
det(subcommittee-11, the-10)
nmod:poss(questions-13, subcommittee-11)
case(subcommittee-11, 's-12)
nmod:to(referring-8, questions-13)
case(Beatrice-15, about-14)
nmod:about(questions-13, Beatrice-15)
punct(Beatrice-15, ,-16)
nmod:about(questions-13, Texstyrene-17)
conj:and(Beatrice-15, Texstyrene-17)
cc(Beatrice-15, and-18)
nummod(issue-22, one-19)
amod(issue-22, other-20)
compound(issue-22, junk-bond-21)
nmod:about(questions-13, issue-22)
conj:and(Beatrice-15, issue-22)
punct(questions-13, ,-23)
case(Corp-27, by-24)
compound(Corp-27, Hanover-25)
compound(Corp-27, Petroleum-26)
nmod:by(questions-13, Corp-27)
punct(addition-2, .-28)
punct(think-6, ,-1)
punct(think-6, ``-2)
nsubj(think-6, I-3)
aux(think-6, do-4)
neg(think-6, n't-5)
root(ROOT-0, think-6)
nsubj(fair-9, it-7)
nsubj:xsubj(attack-13, it-7)
cop(fair-9, 's-8)
ccomp(think-6, fair-9)
case(all-11, at-10)
nmod:at(fair-9, all-11)
mark(attack-13, to-12)
xcomp(fair-9, attack-13)
det(firm-15, the-14)
dobj(attack-13, firm-15)
case(instances-20, over-16)
nummod(instances-20, two-17)
cc(two-17, or-18)
conj:or(two-17, three-19)
nummod(instances-20, three-19)
nmod:over(attack-13, instances-20)
punct(think-6, .-21)
punct(think-6, ''-22)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: attack#firm

attack :: But international groups that attacked Mr. Jenninger 's remarks may find themselves among the losers ./.
cc(find-11, But-1)
amod(groups-3, international-2)
nsubj(attacked-5, groups-3)
nsubj(find-11, groups-3)
ref(groups-3, that-4)
acl:relcl(groups-3, attacked-5)
compound(Jenninger-7, Mr.-6)
nmod:poss(remarks-9, Jenninger-7)
case(Jenninger-7, 's-8)
dobj(attacked-5, remarks-9)
aux(find-11, may-10)
root(ROOT-0, find-11)
dobj(find-11, themselves-12)
case(losers-15, among-13)
det(losers-15, the-14)
nmod:among(find-11, losers-15)
punct(find-11, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#remarks

attack :: One sure sign has reappeared to attest that the interests of the United States must be taking a turn for the good in El Salvador: The country is being attacked ./.
nummod(sign-3, One-1)
amod(sign-3, sure-2)
nsubj(reappeared-5, sign-3)
nsubj:xsubj(attest-7, sign-3)
aux(reappeared-5, has-4)
root(ROOT-0, reappeared-5)
mark(attest-7, to-6)
xcomp(reappeared-5, attest-7)
mark(taking-17, that-8)
det(interests-10, the-9)
nsubj(taking-17, interests-10)
case(States-14, of-11)
det(States-14, the-12)
compound(States-14, United-13)
nmod:of(interests-10, States-14)
aux(taking-17, must-15)
aux(taking-17, be-16)
ccomp(attest-7, taking-17)
det(turn-19, a-18)
dobj(taking-17, turn-19)
case(good-22, for-20)
det(good-22, the-21)
nmod:for(turn-19, good-22)
case(Salvador-25, in-23)
compound(Salvador-25, El-24)
nmod:in(good-22, Salvador-25)
punct(reappeared-5, :-26)
det(country-28, The-27)
nsubjpass(attacked-31, country-28)
aux(attacked-31, is-29)
auxpass(attacked-31, being-30)
parataxis(reappeared-5, attacked-31)
punct(reappeared-5, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#country

attack :: From the 14th century to Corregidor in 1942 , such forts had to be taken by storm before attacking ships could pass ./.
case(century-4, From-1)
det(century-4, the-2)
amod(century-4, 14th-3)
nmod:from(had-12, century-4)
case(Corregidor-6, to-5)
nmod:to(century-4, Corregidor-6)
case(1942-8, in-7)
nmod:in(century-4, 1942-8)
punct(had-12, ,-9)
amod(forts-11, such-10)
nsubj(had-12, forts-11)
nsubjpass:xsubj(taken-15, forts-11)
root(ROOT-0, had-12)
mark(taken-15, to-13)
auxpass(taken-15, be-14)
xcomp(had-12, taken-15)
case(storm-17, by-16)
nmod:agent(taken-15, storm-17)
mark(attacking-19, before-18)
advcl(had-12, attacking-19)
dobj(attacking-19, ships-20)
aux(pass-22, could-21)
dep(had-12, pass-22)
punct(had-12, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#ships

attack :: Justice Abrams , so viciously attacked by Mr. Cooper , was earlier a hard-nosed career prosecutor ./.
compound(Abrams-2, Justice-1)
nsubjpass(attacked-6, Abrams-2)
punct(attacked-6, ,-3)
advmod(viciously-5, so-4)
advmod(attacked-6, viciously-5)
root(ROOT-0, attacked-6)
case(Cooper-9, by-7)
compound(Cooper-9, Mr.-8)
nmod:by(attacked-6, Cooper-9)
punct(attacked-6, ,-10)
cop(prosecutor-16, was-11)
advmod(prosecutor-16, earlier-12)
det(prosecutor-16, a-13)
amod(prosecutor-16, hard-nosed-14)
compound(prosecutor-16, career-15)
parataxis(attacked-6, prosecutor-16)
punct(attacked-6, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#abrams

attack :: He strongly attacked the Massachusetts governor , asserting that he would lead the nation toward higher taxes , economic stagnation and a weaker defense ./.
nsubj(attacked-3, He-1)
advmod(attacked-3, strongly-2)
root(ROOT-0, attacked-3)
det(governor-6, the-4)
compound(governor-6, Massachusetts-5)
dobj(attacked-3, governor-6)
punct(attacked-3, ,-7)
advcl(attacked-3, asserting-8)
mark(lead-12, that-9)
nsubj(lead-12, he-10)
aux(lead-12, would-11)
ccomp(asserting-8, lead-12)
det(nation-14, the-13)
dobj(lead-12, nation-14)
case(taxes-17, toward-15)
amod(taxes-17, higher-16)
nmod:toward(lead-12, taxes-17)
punct(taxes-17, ,-18)
amod(stagnation-20, economic-19)
nmod:toward(lead-12, stagnation-20)
conj:and(taxes-17, stagnation-20)
cc(taxes-17, and-21)
det(defense-24, a-22)
amod(defense-24, weaker-23)
nmod:toward(lead-12, defense-24)
conj:and(taxes-17, defense-24)
punct(attacked-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#governor

attack :: Already , President-elect Carlos Salinas de Gortari has found himself and his closest advisers attacked by the nation 's two strongest labor leaders: Fidel Velazquez , boss of the Confederation of Mexican Workers -LRB- CTM -RRB- , and oil union chief Joaquin Hernandez Galicia ./.
advmod(found-9, Already-1)
punct(found-9, ,-2)
compound(Gortari-7, President-elect-3)
compound(Gortari-7, Carlos-4)
compound(Gortari-7, Salinas-5)
amod(Gortari-7, de-6)
nsubj(found-9, Gortari-7)
aux(found-9, has-8)
root(ROOT-0, found-9)
nsubj(attacked-15, himself-10)
cc(himself-10, and-11)
nmod:poss(advisers-14, his-12)
amod(advisers-14, closest-13)
conj:and(himself-10, advisers-14)
nsubj(attacked-15, advisers-14)
dep(found-9, attacked-15)
case(leaders-23, by-16)
det(nation-18, the-17)
nmod:poss(leaders-23, nation-18)
case(nation-18, 's-19)
nummod(leaders-23, two-20)
amod(leaders-23, strongest-21)
compound(leaders-23, labor-22)
nmod:by(attacked-15, leaders-23)
punct(found-9, :-24)
compound(Velazquez-26, Fidel-25)
dep(found-9, Velazquez-26)
punct(Velazquez-26, ,-27)
appos(Velazquez-26, boss-28)
case(Confederation-31, of-29)
det(Confederation-31, the-30)
nmod:of(boss-28, Confederation-31)
case(Workers-34, of-32)
compound(Workers-34, Mexican-33)
nmod:of(Confederation-31, Workers-34)
punct(CTM-36, -LRB--35)
appos(Workers-34, CTM-36)
punct(CTM-36, -RRB--37)
punct(Velazquez-26, ,-38)
cc(Velazquez-26, and-39)
compound(Galicia-45, oil-40)
compound(Galicia-45, union-41)
compound(Galicia-45, chief-42)
compound(Galicia-45, Joaquin-43)
compound(Galicia-45, Hernandez-44)
dep(found-9, Galicia-45)
conj:and(Velazquez-26, Galicia-45)
punct(found-9, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#himself

attack :: In Idaho last week , the Indiana conservative attacked the Carter administration for having shown an `` insensitivity to Western needs '' and having tried to `` cancel vital water projects . ''/''
case(Idaho-2, In-1)
nmod:in(attacked-9, Idaho-2)
amod(week-4, last-3)
nmod:tmod(attacked-9, week-4)
punct(attacked-9, ,-5)
det(conservative-8, the-6)
compound(conservative-8, Indiana-7)
nsubj(attacked-9, conservative-8)
root(ROOT-0, attacked-9)
det(administration-12, the-10)
compound(administration-12, Carter-11)
dobj(attacked-9, administration-12)
mark(shown-15, for-13)
aux(shown-15, having-14)
advcl(attacked-9, shown-15)
det(insensitivity-18, an-16)
punct(insensitivity-18, ``-17)
dobj(shown-15, insensitivity-18)
case(needs-21, to-19)
amod(needs-21, Western-20)
nmod:to(insensitivity-18, needs-21)
punct(insensitivity-18, ''-22)
cc(shown-15, and-23)
aux(tried-25, having-24)
advcl(attacked-9, tried-25)
conj:and(shown-15, tried-25)
mark(cancel-28, to-26)
punct(cancel-28, ``-27)
xcomp(tried-25, cancel-28)
amod(projects-31, vital-29)
compound(projects-31, water-30)
dobj(cancel-28, projects-31)
punct(attacked-9, .-32)
punct(attacked-9, ''-33)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: attack#administration

attack :: Insects begin attacking the snags almost immediately after a fire , and the charred trunks are likely to be toppled by the wind ./.
nsubj(begin-2, Insects-1)
root(ROOT-0, begin-2)
xcomp(begin-2, attacking-3)
det(snags-5, the-4)
dobj(attacking-3, snags-5)
advmod(immediately-7, almost-6)
advmod(attacking-3, immediately-7)
case(fire-10, after-8)
det(fire-10, a-9)
nmod:after(attacking-3, fire-10)
punct(begin-2, ,-11)
cc(begin-2, and-12)
det(trunks-15, the-13)
amod(trunks-15, charred-14)
nsubj(likely-17, trunks-15)
nsubjpass:xsubj(toppled-20, trunks-15)
cop(likely-17, are-16)
conj:and(begin-2, likely-17)
mark(toppled-20, to-18)
auxpass(toppled-20, be-19)
xcomp(likely-17, toppled-20)
case(wind-23, by-21)
det(wind-23, the-22)
nmod:agent(toppled-20, wind-23)
punct(begin-2, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#snags

attack :: Labor unions , too , attack the underground economy ./.
compound(unions-2, Labor-1)
root(ROOT-0, unions-2)
punct(unions-2, ,-3)
root(,-3, too-4)
punct(too-4, ,-5)
root(,-5, attack-6)
det(economy-9, the-7)
amod(economy-9, underground-8)
dobj(attack-6, economy-9)
punct(attack-6, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#economy

attack :: Mr. Bush attacked the Massachusetts governor for vetoing a bill to require school teachers to lead pupils in the pledge of allegiance and for Massachusetts ' prisoner-furlough program ./.
compound(Bush-2, Mr.-1)
nsubj(attacked-3, Bush-2)
root(ROOT-0, attacked-3)
det(governor-6, the-4)
compound(governor-6, Massachusetts-5)
dobj(attacked-3, governor-6)
mark(vetoing-8, for-7)
advcl(attacked-3, vetoing-8)
det(bill-10, a-9)
dobj(vetoing-8, bill-10)
mark(require-12, to-11)
acl(bill-10, require-12)
compound(teachers-14, school-13)
dobj(require-12, teachers-14)
nsubj:xsubj(lead-16, teachers-14)
mark(lead-16, to-15)
xcomp(require-12, lead-16)
dobj(lead-16, pupils-17)
dobj(lead-16, pupils-17')
conj:and(pupils-17, pupils-17')
case(pledge-20, in-18)
det(pledge-20, the-19)
nmod:in(pupils-17, pledge-20)
case(allegiance-22, of-21)
nmod:of(pledge-20, allegiance-22)
cc(pupils-17, and-23)
case(program-28, for-24)
nmod:poss(program-28, Massachusetts-25)
case(Massachusetts-25, '-26)
amod(program-28, prisoner-furlough-27)
nmod:for(pupils-17', program-28)
punct(attacked-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#governor

attack :: The administration has been reluctant , for a number of reasons , to attack Tokyo on rice , historically Japan 's most sacrosanct product ./.
det(administration-2, The-1)
nsubj(reluctant-5, administration-2)
nsubj:xsubj(attack-14, administration-2)
aux(reluctant-5, has-3)
cop(reluctant-5, been-4)
root(ROOT-0, reluctant-5)
punct(reluctant-5, ,-6)
case(number-9, for-7)
det(number-9, a-8)
nmod:for(reluctant-5, number-9)
case(reasons-11, of-10)
nmod:of(number-9, reasons-11)
punct(reluctant-5, ,-12)
mark(attack-14, to-13)
xcomp(reluctant-5, attack-14)
dobj(attack-14, Tokyo-15)
case(rice-17, on-16)
nmod:on(attack-14, rice-17)
punct(attack-14, ,-18)
advmod(product-24, historically-19)
nmod:poss(product-24, Japan-20)
case(Japan-20, 's-21)
amod(product-24, most-22)
amod(product-24, sacrosanct-23)
dobj(attack-14, product-24)
punct(reluctant-5, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#tokyo

attack :: The union leaders also will attack one of Wall Street 's most dearly held beliefs about Texas Air -- something that has long helped to sustain its stock price: that for all its losses and labor travails , the company still sits on a motherlode of cash ./.
det(leaders-3, The-1)
compound(leaders-3, union-2)
nsubj(attack-6, leaders-3)
advmod(attack-6, also-4)
aux(attack-6, will-5)
root(ROOT-0, attack-6)
nsubjpass(held-14, one-7)
case(Street-10, of-8)
compound(Street-10, Wall-9)
nmod:of(one-7, Street-10)
auxpass(held-14, 's-11)
advmod(dearly-13, most-12)
advmod(held-14, dearly-13)
ccomp(attack-6, held-14)
dobj(held-14, beliefs-15)
case(Air-18, about-16)
compound(Air-18, Texas-17)
nmod:about(beliefs-15, Air-18)
punct(held-14, ---19)
dep(held-14, something-20)
nsubj(helped-24, something-20)
nsubj:xsubj(sustain-26, something-20)
ref(something-20, that-21)
aux(helped-24, has-22)
advmod(helped-24, long-23)
acl:relcl(something-20, helped-24)
mark(sustain-26, to-25)
xcomp(helped-24, sustain-26)
nmod:poss(price-29, its-27)
compound(price-29, stock-28)
dobj(sustain-26, price-29)
punct(something-20, :-30)
mark(sits-43, that-31)
case(losses-35, for-32)
cc:preconj(losses-35, all-33)
nmod:poss(losses-35, its-34)
nmod:for(sits-43, losses-35)
cc(losses-35, and-36)
compound(travails-38, labor-37)
conj:and(losses-35, travails-38)
nmod:for(sits-43, travails-38)
punct(sits-43, ,-39)
det(company-41, the-40)
nsubj(sits-43, company-41)
advmod(sits-43, still-42)
dep(something-20, sits-43)
case(motherlode-46, on-44)
det(motherlode-46, a-45)
nmod:on(sits-43, motherlode-46)
case(cash-48, of-47)
nmod:of(motherlode-46, cash-48)
punct(attack-6, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#leaders

attack :: By hitching a ride on these proteins , drugs can be very narrowly targeted to attack diseased cells , Mr. McCamant says ./.
mark(hitching-2, By-1)
advcl(targeted-14, hitching-2)
det(ride-4, a-3)
dobj(hitching-2, ride-4)
case(proteins-7, on-5)
det(proteins-7, these-6)
nmod:on(ride-4, proteins-7)
punct(targeted-14, ,-8)
nsubjpass(targeted-14, drugs-9)
nsubj:xsubj(attack-16, drugs-9)
aux(targeted-14, can-10)
auxpass(targeted-14, be-11)
advmod(narrowly-13, very-12)
advmod(targeted-14, narrowly-13)
ccomp(says-22, targeted-14)
mark(attack-16, to-15)
xcomp(targeted-14, attack-16)
amod(cells-18, diseased-17)
dobj(attack-16, cells-18)
punct(says-22, ,-19)
compound(McCamant-21, Mr.-20)
nsubj(says-22, McCamant-21)
root(ROOT-0, says-22)
punct(says-22, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#cells

attack :: An Agence France Press dispatch on August 8 reported that an Afghan air force plane was shot down by a Pakistani F-16 while attacking Afghan refugee camps 30 kilometers inside Pakistan territory , near Miram Shah ./.
det(Press-4, An-1)
compound(Press-4, Agence-2)
compound(Press-4, France-3)
nsubj(dispatch-5, Press-4)
root(ROOT-0, dispatch-5)
case(August-7, on-6)
nmod:on(dispatch-5, August-7)
nummod(August-7, 8-8)
dep(dispatch-5, reported-9)
mark(shot-17, that-10)
det(plane-15, an-11)
compound(plane-15, Afghan-12)
compound(plane-15, air-13)
compound(plane-15, force-14)
nsubjpass(shot-17, plane-15)
auxpass(shot-17, was-16)
ccomp(reported-9, shot-17)
advmod(shot-17, down-18)
case(F-16-22, by-19)
det(F-16-22, a-20)
amod(F-16-22, Pakistani-21)
nmod:agent(shot-17, F-16-22)
mark(attacking-24, while-23)
advcl(shot-17, attacking-24)
amod(camps-27, Afghan-25)
compound(camps-27, refugee-26)
dobj(attacking-24, camps-27)
nummod(kilometers-29, 30-28)
dep(camps-27, kilometers-29)
case(territory-32, inside-30)
compound(territory-32, Pakistan-31)
nmod:inside(kilometers-29, territory-32)
punct(reported-9, ,-33)
case(Shah-36, near-34)
compound(Shah-36, Miram-35)
nmod:near(reported-9, Shah-36)
punct(dispatch-5, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#camps

attack :: And , to slash costs , he is attacking United 's slow-moving , free-spending ways , even banning fresh flowers from his office ./.
cc(attacking-9, And-1)
punct(attacking-9, ,-2)
mark(slash-4, to-3)
advcl(attacking-9, slash-4)
dobj(slash-4, costs-5)
punct(attacking-9, ,-6)
nsubj(attacking-9, he-7)
aux(attacking-9, is-8)
root(ROOT-0, attacking-9)
nmod:poss(ways-15, United-10)
case(United-10, 's-11)
amod(ways-15, slow-moving-12)
punct(ways-15, ,-13)
amod(ways-15, free-spending-14)
dobj(attacking-9, ways-15)
punct(attacking-9, ,-16)
advmod(banning-18, even-17)
advcl(attacking-9, banning-18)
amod(flowers-20, fresh-19)
dobj(banning-18, flowers-20)
case(office-23, from-21)
nmod:poss(office-23, his-22)
nmod:from(banning-18, office-23)
punct(attacking-9, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#ways

attack :: This avoidance of tradition gets reinforced by the many critics who attack as unrealistic , and possibly immoral , any effort to portray the Vietnam experience as similar to that of World War I , World War II or Korea ./.
det(avoidance-2, This-1)
nsubj(gets-5, avoidance-2)
case(tradition-4, of-3)
nmod:of(avoidance-2, tradition-4)
root(ROOT-0, gets-5)
dep(gets-5, reinforced-6)
case(critics-10, by-7)
det(critics-10, the-8)
amod(critics-10, many-9)
nmod:by(reinforced-6, critics-10)
nsubj(attack-12, critics-10)
ref(critics-10, who-11)
acl:relcl(critics-10, attack-12)
case(unrealistic-14, as-13)
advcl(attack-12, unrealistic-14)
punct(reinforced-6, ,-15)
cc(reinforced-6, and-16)
advmod(immoral-18, possibly-17)
dep(gets-5, immoral-18)
conj:and(reinforced-6, immoral-18)
punct(reinforced-6, ,-19)
det(effort-21, any-20)
dep(gets-5, effort-21)
conj:and(reinforced-6, effort-21)
mark(portray-23, to-22)
acl(effort-21, portray-23)
det(experience-26, the-24)
compound(experience-26, Vietnam-25)
dobj(portray-23, experience-26)
case(similar-28, as-27)
advcl(portray-23, similar-28)
case(that-30, to-29)
nmod:to(similar-28, that-30)
case(I-34, of-31)
compound(I-34, World-32)
compound(I-34, War-33)
nmod:of(that-30, I-34)
punct(I-34, ,-35)
compound(II-38, World-36)
compound(II-38, War-37)
nmod:of(that-30, II-38)
conj:or(I-34, II-38)
cc(I-34, or-39)
nmod:of(that-30, Korea-40)
conj:or(I-34, Korea-40)
punct(gets-5, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#critics

attack :: -- The other day , U.S. helicopters fired on Iranian gunboats that were preparing to attack a Panamanian ship near Farsi Island ./.
punct(fired-8, ---1)
det(day-4, The-2)
amod(day-4, other-3)
nmod:tmod(fired-8, day-4)
punct(fired-8, ,-5)
compound(helicopters-7, U.S.-6)
nsubj(fired-8, helicopters-7)
root(ROOT-0, fired-8)
case(gunboats-11, on-9)
amod(gunboats-11, Iranian-10)
nmod:on(fired-8, gunboats-11)
nsubj(preparing-14, gunboats-11)
nsubj:xsubj(attack-16, gunboats-11)
ref(gunboats-11, that-12)
aux(preparing-14, were-13)
acl:relcl(gunboats-11, preparing-14)
mark(attack-16, to-15)
xcomp(preparing-14, attack-16)
det(ship-19, a-17)
amod(ship-19, Panamanian-18)
dobj(attack-16, ship-19)
case(Island-22, near-20)
compound(Island-22, Farsi-21)
nmod:near(ship-19, Island-22)
punct(fired-8, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#ship

attack :: Prince Norodom Sihanouk , the former Cambodian leader , said this week he was withdrawing from the resistance because the Khmer Rouge continues to attack his forces along the Thai-Cambodia border ./.
compound(Sihanouk-3, Prince-1)
compound(Sihanouk-3, Norodom-2)
nsubj(said-10, Sihanouk-3)
punct(Sihanouk-3, ,-4)
det(leader-8, the-5)
amod(leader-8, former-6)
amod(leader-8, Cambodian-7)
appos(Sihanouk-3, leader-8)
punct(Sihanouk-3, ,-9)
root(ROOT-0, said-10)
det(week-12, this-11)
nmod:tmod(said-10, week-12)
nsubj(withdrawing-15, he-13)
aux(withdrawing-15, was-14)
ccomp(said-10, withdrawing-15)
case(resistance-18, from-16)
det(resistance-18, the-17)
nmod:from(withdrawing-15, resistance-18)
mark(continues-23, because-19)
det(Rouge-22, the-20)
compound(Rouge-22, Khmer-21)
nsubj(continues-23, Rouge-22)
nsubj:xsubj(attack-25, Rouge-22)
advcl(withdrawing-15, continues-23)
mark(attack-25, to-24)
xcomp(continues-23, attack-25)
nmod:poss(forces-27, his-26)
dobj(attack-25, forces-27)
case(border-31, along-28)
det(border-31, the-29)
compound(border-31, Thai-Cambodia-30)
nmod:along(attack-25, border-31)
punct(said-10, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#forces

attack :: They point out that three members of Abu Nidal 's organization are in jail in Greece on separate charges of attacking a synagogue in Rome , weapons smuggling , plotting to assassinate the Jordanian charge d'affairs in Greece , and possessing weapons in prison ./.
nsubj(point-2, They-1)
root(ROOT-0, point-2)
compound:prt(point-2, out-3)
mark(jail-14, that-4)
nummod(members-6, three-5)
nsubj(jail-14, members-6)
case(organization-11, of-7)
compound(Nidal-9, Abu-8)
nmod:poss(organization-11, Nidal-9)
case(Nidal-9, 's-10)
nmod:of(members-6, organization-11)
cop(jail-14, are-12)
case(jail-14, in-13)
ccomp(point-2, jail-14)
case(Greece-16, in-15)
nmod:in(jail-14, Greece-16)
case(charges-19, on-17)
amod(charges-19, separate-18)
nmod:on(jail-14, charges-19)
mark(attacking-21, of-20)
acl(charges-19, attacking-21)
det(synagogue-23, a-22)
dobj(attacking-21, synagogue-23)
case(Rome-25, in-24)
nmod:in(attacking-21, Rome-25)
punct(point-2, ,-26)
compound(smuggling-28, weapons-27)
root(,-26, smuggling-28)
punct(smuggling-28, ,-29)
root(,-29, plotting-30)
mark(assassinate-32, to-31)
xcomp(plotting-30, assassinate-32)
det(d'affairs-36, the-33)
amod(d'affairs-36, Jordanian-34)
compound(d'affairs-36, charge-35)
dobj(assassinate-32, d'affairs-36)
case(Greece-38, in-37)
nmod:in(d'affairs-36, Greece-38)
punct(plotting-30, ,-39)
cc(plotting-30, and-40)
root(,-29, possessing-41)
conj:and(plotting-30, possessing-41)
dobj(possessing-41, weapons-42)
case(prison-44, in-43)
nmod:in(possessing-41, prison-44)
punct(plotting-30, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#synagogue

attack :: The Sandinistas have now offered reasons for attacking and arresting anti-government demonstrators Sunday -LRB- `` Somocista Bands Invade Nandaime '' -RRB- ; for closing Radio Catolica -LRB- `` lack of respect for constitutional order '' -RRB- ; for arresting a Conservative Party leader -LRB- `` the principal instigator '' -RRB- ./.
det(Sandinistas-2, The-1)
nsubj(offered-5, Sandinistas-2)
aux(offered-5, have-3)
advmod(offered-5, now-4)
root(ROOT-0, offered-5)
dobj(offered-5, reasons-6)
mark(attacking-8, for-7)
acl(reasons-6, attacking-8)
cc(attacking-8, and-9)
acl(reasons-6, arresting-10)
conj:and(attacking-8, arresting-10)
amod(demonstrators-12, anti-government-11)
dobj(attacking-8, demonstrators-12)
nmod:tmod(reasons-6, Sunday-13)
punct(Invade-18, -LRB--14)
punct(Invade-18, ``-15)
compound(Bands-17, Somocista-16)
nsubj(Invade-18, Bands-17)
parataxis(offered-5, Invade-18)
dobj(Invade-18, Nandaime-19)
punct(Invade-18, ''-20)
punct(Invade-18, -RRB--21)
punct(offered-5, ;-22)
mark(closing-24, for-23)
advcl(offered-5, closing-24)
compound(Catolica-26, Radio-25)
dobj(closing-24, Catolica-26)
punct(lack-29, -LRB--27)
punct(lack-29, ``-28)
dep(Catolica-26, lack-29)
case(respect-31, of-30)
nmod:of(lack-29, respect-31)
case(order-34, for-32)
amod(order-34, constitutional-33)
nmod:for(lack-29, order-34)
punct(lack-29, ''-35)
punct(lack-29, -RRB--36)
punct(closing-24, ;-37)
mark(arresting-39, for-38)
advcl(closing-24, arresting-39)
det(leader-43, a-40)
amod(leader-43, Conservative-41)
compound(leader-43, Party-42)
dobj(arresting-39, leader-43)
punct(instigator-48, -LRB--44)
punct(instigator-48, ``-45)
det(instigator-48, the-46)
amod(instigator-48, principal-47)
dep(leader-43, instigator-48)
punct(instigator-48, ''-49)
punct(instigator-48, -RRB--50)
punct(offered-5, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#demonstrators

attack :: In Greece , an official said the terrorists who attacked the liner in the Aegean Sea may have been pro-Iranian Arabs trying to hijack it ./.
case(Greece-2, In-1)
nmod:in(said-6, Greece-2)
punct(said-6, ,-3)
det(official-5, an-4)
nsubj(said-6, official-5)
root(ROOT-0, said-6)
det(terrorists-8, the-7)
nsubj(attacked-10, terrorists-8)
nsubj(Arabs-21, terrorists-8)
ref(terrorists-8, who-9)
acl:relcl(terrorists-8, attacked-10)
det(liner-12, the-11)
dobj(attacked-10, liner-12)
case(Sea-16, in-13)
det(Sea-16, the-14)
compound(Sea-16, Aegean-15)
nmod:in(attacked-10, Sea-16)
aux(Arabs-21, may-17)
aux(Arabs-21, have-18)
cop(Arabs-21, been-19)
amod(Arabs-21, pro-Iranian-20)
ccomp(said-6, Arabs-21)
acl(Arabs-21, trying-22)
mark(hijack-24, to-23)
xcomp(trying-22, hijack-24)
dobj(hijack-24, it-25)
punct(said-6, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#liner

attack :: Their plans were immediately attacked by the so-called social wing of the ruling Christian Democratic Union , which wanted more tax revenue to go to the poor ./.
nmod:poss(plans-2, Their-1)
nsubjpass(attacked-5, plans-2)
auxpass(attacked-5, were-3)
advmod(attacked-5, immediately-4)
root(ROOT-0, attacked-5)
case(wing-10, by-6)
det(wing-10, the-7)
amod(wing-10, so-called-8)
amod(wing-10, social-9)
nmod:agent(attacked-5, wing-10)
case(Union-16, of-11)
det(Union-16, the-12)
amod(Union-16, ruling-13)
compound(Union-16, Christian-14)
compound(Union-16, Democratic-15)
nmod:of(wing-10, Union-16)
nsubj(wanted-19, Union-16)
punct(Union-16, ,-17)
ref(Union-16, which-18)
acl:relcl(Union-16, wanted-19)
amod(revenue-22, more-20)
compound(revenue-22, tax-21)
dobj(wanted-19, revenue-22)
nsubj:xsubj(go-24, revenue-22)
mark(go-24, to-23)
xcomp(wanted-19, go-24)
case(poor-27, to-25)
det(poor-27, the-26)
nmod:to(go-24, poor-27)
punct(attacked-5, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#plans

attack :: The incident occurred after an Aegis cruiser mistook the large passenger jet for an attacking F-14 fighter ./.
det(incident-2, The-1)
nsubj(occurred-3, incident-2)
root(ROOT-0, occurred-3)
mark(mistook-8, after-4)
det(cruiser-7, an-5)
compound(cruiser-7, Aegis-6)
nsubj(mistook-8, cruiser-7)
advcl(occurred-3, mistook-8)
det(jet-12, the-9)
amod(jet-12, large-10)
compound(jet-12, passenger-11)
dobj(mistook-8, jet-12)
case(fighter-17, for-13)
det(fighter-17, an-14)
amod(fighter-17, attacking-15)
compound(fighter-17, F-14-16)
nmod:for(mistook-8, fighter-17)
punct(occurred-3, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#fighter

attack :: Common Cause has attacked the Ways and Means Committee 's proposal to repeal the $ 3 , 000 limit on the deductibility of congressional living expenses in Washington , D.C ./.
amod(Cause-2, Common-1)
nsubj(attacked-4, Cause-2)
nsubj(Means-8, Cause-2)
aux(attacked-4, has-3)
root(ROOT-0, attacked-4)
det(Ways-6, the-5)
dobj(attacked-4, Ways-6)
cc(attacked-4, and-7)
conj:and(attacked-4, Means-8)
nmod:poss(proposal-11, Committee-9)
case(Committee-9, 's-10)
dobj(Means-8, proposal-11)
mark(repeal-13, to-12)
acl(proposal-11, repeal-13)
det(3-16, the-14)
dep(3-16, $-15)
dobj(repeal-13, 3-16)
punct(3-16, ,-17)
nummod(limit-19, 000-18)
appos(3-16, limit-19)
case(deductibility-22, on-20)
det(deductibility-22, the-21)
nmod:on(limit-19, deductibility-22)
case(expenses-26, of-23)
amod(expenses-26, congressional-24)
compound(expenses-26, living-25)
nmod:of(deductibility-22, expenses-26)
case(Washington-28, in-27)
nmod:in(expenses-26, Washington-28)
punct(Washington-28, ,-29)
appos(Washington-28, D.C-30)
punct(attacked-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#ways

attack :: He said he intends to push the party to endorse raising the top personal-income-tax rate , perhaps to 38 % from the current 28 % , to attack the federal deficit accumulated during the Reagan years ./.
nsubj(said-2, He-1)
root(ROOT-0, said-2)
nsubj(intends-4, he-3)
nsubj:xsubj(push-6, he-3)
ccomp(said-2, intends-4)
mark(push-6, to-5)
xcomp(intends-4, push-6)
det(party-8, the-7)
dobj(push-6, party-8)
nsubj:xsubj(endorse-10, party-8)
nsubj:xsubj(attack-28, party-8)
mark(endorse-10, to-9)
xcomp(push-6, endorse-10)
xcomp(endorse-10, raising-11)
det(rate-15, the-12)
amod(rate-15, top-13)
compound(rate-15, personal-income-tax-14)
dobj(raising-11, rate-15)
punct(push-6, ,-16)
advmod(%-20, perhaps-17)
case(%-20, to-18)
nummod(%-20, 38-19)
nmod:to(push-6, %-20)
case(%-25, from-21)
det(%-25, the-22)
amod(%-25, current-23)
nummod(%-25, 28-24)
nmod:from(%-20, %-25)
punct(push-6, ,-26)
mark(attack-28, to-27)
xcomp(push-6, attack-28)
det(deficit-31, the-29)
amod(deficit-31, federal-30)
dobj(attack-28, deficit-31)
acl(deficit-31, accumulated-32)
case(years-36, during-33)
det(years-36, the-34)
compound(years-36, Reagan-35)
nmod:during(accumulated-32, years-36)
punct(said-2, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#deficit

attack :: Secretary of State George Shultz last week attacked as `` shocking '' Mr. Dukakis 's willingness to recognize Jerusalem rather than Tel Aviv as Israel 's capital -- a move that has been long sought by the Israelis and would be popular with Jewish voters in the U.S . , but that Mr. Shultz asserts would complicate efforts to find a Mideast peace ./.
dep(Shultz-5, Secretary-1)
case(State-3, of-2)
nmod:of(Secretary-1, State-3)
compound(Shultz-5, George-4)
nsubj(attacked-8, Shultz-5)
amod(week-7, last-6)
nmod:tmod(attacked-8, week-7)
root(ROOT-0, attacked-8)
case(willingness-16, as-9)
punct(willingness-16, ``-10)
amod(willingness-16, shocking-11)
punct(willingness-16, ''-12)
compound(Dukakis-14, Mr.-13)
nmod:poss(willingness-16, Dukakis-14)
case(Dukakis-14, 's-15)
nmod:as(attacked-8, willingness-16)
mark(recognize-18, to-17)
acl(willingness-16, recognize-18)
dobj(recognize-18, Jerusalem-19)
case(Aviv-23, rather-20)
mwe(rather-20, than-21)
compound(Aviv-23, Tel-22)
nmod:rather_than(recognize-18, Aviv-23)
case(capital-27, as-24)
nmod:poss(capital-27, Israel-25)
case(Israel-25, 's-26)
nmod:as(recognize-18, capital-27)
punct(attacked-8, ---28)
det(move-30, a-29)
dobj(attacked-8, move-30)
nsubjpass(sought-35, move-30)
nsubj(popular-42, move-30)
ref(move-30, that-31)
aux(sought-35, has-32)
auxpass(sought-35, been-33)
advmod(sought-35, long-34)
acl:relcl(move-30, sought-35)
case(Israelis-38, by-36)
det(Israelis-38, the-37)
nmod:agent(sought-35, Israelis-38)
cc(sought-35, and-39)
aux(popular-42, would-40)
cop(popular-42, be-41)
acl:relcl(move-30, popular-42)
conj:and(sought-35, popular-42)
case(voters-45, with-43)
amod(voters-45, Jewish-44)
nmod:with(popular-42, voters-45)
case(U.S-48, in-46)
det(U.S-48, the-47)
nmod:in(voters-45, U.S-48)
punct(attacked-8, .-49)
punct(asserts-6, ,-1)
cc(asserts-6, but-2)
dobj(asserts-6, that-3)
compound(Shultz-5, Mr.-4)
nsubj(asserts-6, Shultz-5)
parataxis(complicate-8, asserts-6)
aux(complicate-8, would-7)
root(ROOT-0, complicate-8)
dobj(complicate-8, efforts-9)
mark(find-11, to-10)
acl(efforts-9, find-11)
det(peace-14, a-12)
amod(peace-14, Mideast-13)
dobj(find-11, peace-14)
punct(complicate-8, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#move

attack :: Phalanx can be overwhelmed when a ship is attacked by several missiles at once -LRB- the Stark was struck by two Exocets -RRB- ./.
nsubjpass(overwhelmed-4, Phalanx-1)
aux(overwhelmed-4, can-2)
auxpass(overwhelmed-4, be-3)
root(ROOT-0, overwhelmed-4)
advmod(attacked-9, when-5)
det(ship-7, a-6)
nsubjpass(attacked-9, ship-7)
auxpass(attacked-9, is-8)
advcl(overwhelmed-4, attacked-9)
case(missiles-12, by-10)
amod(missiles-12, several-11)
nmod:agent(attacked-9, missiles-12)
case(once-14, at-13)
nmod:at(attacked-9, once-14)
punct(struck-19, -LRB--15)
det(Stark-17, the-16)
nsubjpass(struck-19, Stark-17)
auxpass(struck-19, was-18)
dep(once-14, struck-19)
case(Exocets-22, by-20)
nummod(Exocets-22, two-21)
nmod:agent(struck-19, Exocets-22)
punct(struck-19, -RRB--23)
punct(overwhelmed-4, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#ship

attack :: MINOR MEMOS: Texas Sen. Gramm , who last year bitterly attacked federal financing of a weed center in North Dakota , pushes to establish a `` plant stress '' lab in Lubbock . . . ./.
amod(MEMOS-2, MINOR-1)
root(ROOT-0, MEMOS-2)
punct(MEMOS-2, :-3)
compound(Gramm-6, Texas-4)
compound(Gramm-6, Sen.-5)
nsubj(attacked-12, Gramm-6)
nsubj(pushes-23, Gramm-6)
nsubj:xsubj(establish-25, Gramm-6)
punct(Gramm-6, ,-7)
ref(Gramm-6, who-8)
amod(year-10, last-9)
dep(attacked-12, year-10)
advmod(attacked-12, bitterly-11)
acl:relcl(Gramm-6, attacked-12)
amod(financing-14, federal-13)
dobj(attacked-12, financing-14)
case(center-18, of-15)
det(center-18, a-16)
compound(center-18, weed-17)
nmod:of(financing-14, center-18)
case(Dakota-21, in-19)
amod(Dakota-21, North-20)
nmod:in(center-18, Dakota-21)
punct(Gramm-6, ,-22)
dep(MEMOS-2, pushes-23)
mark(establish-25, to-24)
xcomp(pushes-23, establish-25)
det(lab-31, a-26)
punct(lab-31, ``-27)
compound(lab-31, plant-28)
compound(lab-31, stress-29)
punct(lab-31, ''-30)
dobj(establish-25, lab-31)
case(Lubbock-33, in-32)
nmod:in(lab-31, Lubbock-33)
punct(pushes-23, ...-34)
punct(pushes-23, /-35)
punct(MEMOS-2, .-36)
Return str :: attack#financing

attack :: Pull out the big stick , of course , and attack the Democrats ./.
root(ROOT-0, Pull-1)
compound:prt(Pull-1, out-2)
det(stick-5, the-3)
amod(stick-5, big-4)
dobj(Pull-1, stick-5)
punct(stick-5, ,-6)
case(course-8, of-7)
nmod:of(stick-5, course-8)
punct(stick-5, ,-9)
cc(stick-5, and-10)
compound(Democrats-13, attack-11)
det(Democrats-13, the-12)
dobj(Pull-1, Democrats-13)
conj:and(stick-5, Democrats-13)
punct(Pull-1, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

attack :: Coke is even directly attacking coffee 's breakfast appeal with radio ads urging people to drink something cold to come `` alive in the morning . ''/''
nsubj(attacking-5, Coke-1)
aux(attacking-5, is-2)
advmod(attacking-5, even-3)
advmod(attacking-5, directly-4)
root(ROOT-0, attacking-5)
nmod:poss(appeal-9, coffee-6)
case(coffee-6, 's-7)
compound(appeal-9, breakfast-8)
dobj(attacking-5, appeal-9)
case(ads-12, with-10)
compound(ads-12, radio-11)
nmod:with(attacking-5, ads-12)
acl(ads-12, urging-13)
dobj(urging-13, people-14)
nsubj:xsubj(drink-16, people-14)
mark(drink-16, to-15)
xcomp(urging-13, drink-16)
dobj(drink-16, something-17)
amod(something-17, cold-18)
mark(come-20, to-19)
advcl(drink-16, come-20)
punct(come-20, ``-21)
xcomp(come-20, alive-22)
case(morning-25, in-23)
det(morning-25, the-24)
nmod:in(alive-22, morning-25)
punct(attacking-5, .-26)
punct(attacking-5, ''-27)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: attack#appeal

attack :: `` We 're going to keep attacking . ''/''
root(ROOT-0, ``-1)
nsubj(going-4, We-2)
nsubj:xsubj(keep-6, We-2)
aux(going-4, 're-3)
root(``-1, going-4)
mark(keep-6, to-5)
xcomp(going-4, keep-6)
xcomp(keep-6, attacking-7)
punct(going-4, .-8)
punct(going-4, ''-9)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

attack :: Outraged at the sentence , the black community mounted an international campaign attacking the country 's legal system ./.
advcl(mounted-9, Outraged-1)
case(sentence-4, at-2)
det(sentence-4, the-3)
nmod:at(Outraged-1, sentence-4)
punct(mounted-9, ,-5)
det(community-8, the-6)
amod(community-8, black-7)
nsubj(mounted-9, community-8)
root(ROOT-0, mounted-9)
det(campaign-12, an-10)
amod(campaign-12, international-11)
dobj(mounted-9, campaign-12)
acl(campaign-12, attacking-13)
det(country-15, the-14)
nmod:poss(system-18, country-15)
case(country-15, 's-16)
amod(system-18, legal-17)
dobj(attacking-13, system-18)
punct(mounted-9, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#system

attack :: By spreading the benefits of economic development into depressed regions , Massachusetts economic policy has attacked structural unemployment ./.
mark(spreading-2, By-1)
advcl(attacked-16, spreading-2)
det(benefits-4, the-3)
dobj(spreading-2, benefits-4)
case(development-7, of-5)
amod(development-7, economic-6)
nmod:of(benefits-4, development-7)
case(regions-10, into-8)
amod(regions-10, depressed-9)
nmod:into(spreading-2, regions-10)
punct(attacked-16, ,-11)
compound(policy-14, Massachusetts-12)
amod(policy-14, economic-13)
nsubj(attacked-16, policy-14)
aux(attacked-16, has-15)
root(ROOT-0, attacked-16)
amod(unemployment-18, structural-17)
dobj(attacked-16, unemployment-18)
punct(attacked-16, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#unemployment

attack :: `` I think glasnost is bad when they attack Stalin . ''/''
root(ROOT-0, ``-1)
nsubj(think-3, I-2)
root(``-1, think-3)
nsubj(bad-6, glasnost-4)
cop(bad-6, is-5)
ccomp(think-3, bad-6)
advmod(attack-9, when-7)
nsubj(attack-9, they-8)
advcl(bad-6, attack-9)
dobj(attack-9, Stalin-10)
punct(think-3, .-11)
punct(think-3, ''-12)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: attack#stalin

attack :: The administration tried again in mid-1987 , suspending military and economic aid to Panama after rioters , led by some government officials , attacked the American Embassy in Panama City ./.
det(administration-2, The-1)
nsubj(tried-3, administration-2)
root(ROOT-0, tried-3)
advmod(tried-3, again-4)
case(mid-1987-6, in-5)
nmod:in(tried-3, mid-1987-6)
punct(tried-3, ,-7)
xcomp(tried-3, suspending-8)
amod(aid-12, military-9)
cc(military-9, and-10)
conj:and(military-9, economic-11)
amod(aid-12, economic-11)
dobj(suspending-8, aid-12)
case(Panama-14, to-13)
nmod:to(aid-12, Panama-14)
case(rioters-16, after-15)
nmod:after(suspending-8, rioters-16)
punct(suspending-8, ,-17)
dep(suspending-8, led-18)
case(officials-22, by-19)
det(officials-22, some-20)
compound(officials-22, government-21)
nmod:by(led-18, officials-22)
punct(suspending-8, ,-23)
dep(suspending-8, attacked-24)
det(Embassy-27, the-25)
compound(Embassy-27, American-26)
dobj(attacked-24, Embassy-27)
case(City-30, in-28)
compound(City-30, Panama-29)
nmod:in(Embassy-27, City-30)
punct(tried-3, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#embassy

attack :: U.S. officials said evidence suggests that a Japanese terrorist arrested last month in New Jersey with homemade bombs was on his way to attack a target in New York City ./.
compound(officials-2, U.S.-1)
nsubj(said-3, officials-2)
root(ROOT-0, said-3)
nsubj(suggests-5, evidence-4)
ccomp(said-3, suggests-5)
mark(arrested-10, that-6)
det(terrorist-9, a-7)
amod(terrorist-9, Japanese-8)
nsubj(arrested-10, terrorist-9)
ccomp(suggests-5, arrested-10)
amod(month-12, last-11)
nmod:tmod(arrested-10, month-12)
case(Jersey-15, in-13)
compound(Jersey-15, New-14)
nmod:in(arrested-10, Jersey-15)
case(bombs-18, with-16)
compound(bombs-18, homemade-17)
nmod:with(arrested-10, bombs-18)
cop(way-22, was-19)
case(way-22, on-20)
nmod:poss(way-22, his-21)
dep(arrested-10, way-22)
mark(attack-24, to-23)
acl(way-22, attack-24)
det(target-26, a-25)
dobj(attack-24, target-26)
case(City-30, in-27)
compound(City-30, New-28)
compound(City-30, York-29)
nmod:in(target-26, City-30)
punct(said-3, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#target

attack :: And when Mr. Chirac did get an opponent , he attacked the Francois Mitterrand of 1981 , not the one of 1988 ./.
cc(attacked-11, And-1)
advmod(get-6, when-2)
compound(Chirac-4, Mr.-3)
nsubj(get-6, Chirac-4)
aux(get-6, did-5)
advcl(attacked-11, get-6)
det(opponent-8, an-7)
dobj(get-6, opponent-8)
punct(attacked-11, ,-9)
nsubj(attacked-11, he-10)
root(ROOT-0, attacked-11)
det(Mitterrand-14, the-12)
compound(Mitterrand-14, Francois-13)
dobj(attacked-11, Mitterrand-14)
case(1981-16, of-15)
nmod:of(Mitterrand-14, 1981-16)
punct(Mitterrand-14, ,-17)
neg(one-20, not-18)
det(one-20, the-19)
appos(Mitterrand-14, one-20)
case(1988-22, of-21)
nmod:of(one-20, 1988-22)
punct(attacked-11, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#1981

attack :: The preacher and civil rights leader went after Mr. Dukakis yesterday , attacking him for failing to give specifics on budget questions ./.
det(preacher-2, The-1)
nsubj(went-7, preacher-2)
cc(preacher-2, and-3)
amod(leader-6, civil-4)
compound(leader-6, rights-5)
conj:and(preacher-2, leader-6)
nsubj(went-7, leader-6)
root(ROOT-0, went-7)
case(Dukakis-10, after-8)
compound(Dukakis-10, Mr.-9)
nmod:after(went-7, Dukakis-10)
nmod:tmod(went-7, yesterday-11)
punct(went-7, ,-12)
advcl(went-7, attacking-13)
dobj(attacking-13, him-14)
mark(failing-16, for-15)
advcl(attacking-13, failing-16)
mark(give-18, to-17)
xcomp(failing-16, give-18)
dobj(give-18, specifics-19)
case(questions-22, on-20)
compound(questions-22, budget-21)
nmod:on(give-18, questions-22)
punct(went-7, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#him

attack :: But critics complain that the blitz of big fines , which generally are settled for half or less of the proposed amount , was a bombastic gimmick that did little to attack the root problems of workplace illness and injury ./.
cc(complain-3, But-1)
nsubj(complain-3, critics-2)
root(ROOT-0, complain-3)
mark(gimmick-27, that-4)
det(blitz-6, the-5)
nsubj(gimmick-27, blitz-6)
case(fines-9, of-7)
amod(fines-9, big-8)
nmod:of(blitz-6, fines-9)
nsubjpass(settled-14, fines-9)
punct(fines-9, ,-10)
ref(fines-9, which-11)
advmod(settled-14, generally-12)
auxpass(settled-14, are-13)
acl:relcl(fines-9, settled-14)
case(half-16, for-15)
nmod:for(settled-14, half-16)
cc(half-16, or-17)
nmod:for(settled-14, less-18)
conj:or(half-16, less-18)
case(amount-22, of-19)
det(amount-22, the-20)
amod(amount-22, proposed-21)
nmod:of(half-16, amount-22)
punct(fines-9, ,-23)
cop(gimmick-27, was-24)
det(gimmick-27, a-25)
amod(gimmick-27, bombastic-26)
ccomp(complain-3, gimmick-27)
nsubj(did-29, gimmick-27)
ref(gimmick-27, that-28)
acl:relcl(gimmick-27, did-29)
dobj(did-29, little-30)
mark(attack-32, to-31)
advcl(did-29, attack-32)
det(problems-35, the-33)
compound(problems-35, root-34)
dobj(attack-32, problems-35)
case(illness-38, of-36)
compound(illness-38, workplace-37)
nmod:of(problems-35, illness-38)
cc(illness-38, and-39)
nmod:of(problems-35, injury-40)
conj:and(illness-38, injury-40)
punct(complain-3, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#illness

attack :: The ship had n't attacked U.S.-flag vessels or been involved in mine-laying ./.
det(ship-2, The-1)
nsubj(attacked-5, ship-2)
nsubjpass(involved-10, ship-2)
aux(attacked-5, had-3)
neg(attacked-5, n't-4)
root(ROOT-0, attacked-5)
amod(vessels-7, U.S.-flag-6)
dobj(attacked-5, vessels-7)
cc(attacked-5, or-8)
auxpass(involved-10, been-9)
conj:or(attacked-5, involved-10)
case(mine-laying-12, in-11)
nmod:in(involved-10, mine-laying-12)
punct(attacked-5, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#vessels

attack :: Only American policy in Vietnam has been as maligned , vilified and attacked as U.S. policy toward Iran ./.
advmod(policy-3, Only-1)
amod(policy-3, American-2)
nsubj(maligned-9, policy-3)
nsubj(vilified-11, policy-3)
nsubj(attacked-13, policy-3)
case(Vietnam-5, in-4)
nmod:in(policy-3, Vietnam-5)
aux(maligned-9, has-6)
cop(maligned-9, been-7)
case(maligned-9, as-8)
root(ROOT-0, maligned-9)
punct(maligned-9, ,-10)
conj:and(maligned-9, vilified-11)
cc(maligned-9, and-12)
conj:and(maligned-9, attacked-13)
case(policy-16, as-14)
compound(policy-16, U.S.-15)
nmod:as(attacked-13, policy-16)
case(Iran-18, toward-17)
nmod:toward(policy-16, Iran-18)
punct(maligned-9, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#policy

attack :: Here in Masaya , supporters of a group known as the Mothers of Political Prisoners were brutally attacked by turbas in a well-documented incident in March ./.
nsubjpass(attacked-18, Here-1)
case(Masaya-3, in-2)
nmod:in(Here-1, Masaya-3)
punct(Masaya-3, ,-4)
appos(Masaya-3, supporters-5)
case(group-8, of-6)
det(group-8, a-7)
nmod:of(supporters-5, group-8)
acl(group-8, known-9)
case(Mothers-12, as-10)
det(Mothers-12, the-11)
nmod:as(known-9, Mothers-12)
case(Prisoners-15, of-13)
amod(Prisoners-15, Political-14)
nmod:of(Mothers-12, Prisoners-15)
auxpass(attacked-18, were-16)
advmod(attacked-18, brutally-17)
root(ROOT-0, attacked-18)
case(turbas-20, by-19)
nmod:agent(attacked-18, turbas-20)
case(incident-24, in-21)
det(incident-24, a-22)
amod(incident-24, well-documented-23)
nmod:in(attacked-18, incident-24)
case(March-26, in-25)
nmod:in(attacked-18, March-26)
punct(attacked-18, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#here

attack :: Sparrows used to have a rep for selectively attacking yellow crocuses such as `` E.A ./.
root(ROOT-0, Sparrows-1)
acl(Sparrows-1, used-2)
mark(have-4, to-3)
xcomp(used-2, have-4)
det(rep-6, a-5)
dobj(have-4, rep-6)
mark(attacking-9, for-7)
advmod(attacking-9, selectively-8)
acl(rep-6, attacking-9)
amod(crocuses-11, yellow-10)
dobj(attacking-9, crocuses-11)
case(E.A-15, such-12)
mwe(such-12, as-13)
punct(E.A-15, ``-14)
nmod:such_as(crocuses-11, E.A-15)
punct(Sparrows-1, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#crocuses

attack :: American officials have concluded that the Kuwaiti hijacking is the work of a Lebanese Shiite terrorist named Imad Mugniyah who has been trying for more than four years to free his wife 's brother from prison in Kuwait , where he was convicted in 1984 of building a bomb used to attack the U.S. Embassy ./.
amod(officials-2, American-1)
nsubj(concluded-4, officials-2)
aux(concluded-4, have-3)
root(ROOT-0, concluded-4)
mark(work-11, that-5)
det(hijacking-8, the-6)
compound(hijacking-8, Kuwaiti-7)
nsubj(work-11, hijacking-8)
cop(work-11, is-9)
det(work-11, the-10)
ccomp(concluded-4, work-11)
case(terrorist-16, of-12)
det(terrorist-16, a-13)
amod(terrorist-16, Lebanese-14)
amod(terrorist-16, Shiite-15)
nmod:of(work-11, terrorist-16)
nsubj(trying-23, terrorist-16)
nsubj:xsubj(free-30, terrorist-16)
acl(terrorist-16, named-17)
compound(Mugniyah-19, Imad-18)
xcomp(named-17, Mugniyah-19)
ref(terrorist-16, who-20)
aux(trying-23, has-21)
aux(trying-23, been-22)
acl:relcl(terrorist-16, trying-23)
case(years-28, for-24)
advmod(four-27, more-25)
mwe(more-25, than-26)
nummod(years-28, four-27)
nmod:for(trying-23, years-28)
mark(free-30, to-29)
xcomp(trying-23, free-30)
nmod:poss(wife-32, his-31)
nmod:poss(brother-34, wife-32)
case(wife-32, 's-33)
dobj(free-30, brother-34)
case(prison-36, from-35)
nmod:from(free-30, prison-36)
case(Kuwait-38, in-37)
nmod:in(free-30, Kuwait-38)
punct(Kuwait-38, ,-39)
advmod(convicted-43, where-40)
nsubjpass(convicted-43, he-41)
auxpass(convicted-43, was-42)
acl:relcl(Kuwait-38, convicted-43)
case(1984-45, in-44)
nmod:in(convicted-43, 1984-45)
mark(building-47, of-46)
advcl(convicted-43, building-47)
det(bomb-49, a-48)
dobj(building-47, bomb-49)
acl(bomb-49, used-50)
mark(attack-52, to-51)
xcomp(used-50, attack-52)
det(Embassy-55, the-53)
compound(Embassy-55, U.S.-54)
dobj(attack-52, Embassy-55)
punct(concluded-4, .-56)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#embassy

attack :: Indeed , Richard Gephardt , Jesse Jackson and Michael Dukakis have all made public appearances in support of Eastern 's union -- sometimes sharply attacking Mr. Lorenzo ./.
advmod(made-13, Indeed-1)
punct(made-13, ,-2)
compound(Gephardt-4, Richard-3)
nsubj(made-13, Gephardt-4)
punct(Gephardt-4, ,-5)
compound(Jackson-7, Jesse-6)
conj:and(Gephardt-4, Jackson-7)
nsubj(made-13, Jackson-7)
cc(Gephardt-4, and-8)
compound(Dukakis-10, Michael-9)
conj:and(Gephardt-4, Dukakis-10)
nsubj(made-13, Dukakis-10)
aux(made-13, have-11)
advmod(made-13, all-12)
root(ROOT-0, made-13)
amod(appearances-15, public-14)
dobj(made-13, appearances-15)
case(support-17, in-16)
nmod:in(made-13, support-17)
case(union-21, of-18)
nmod:poss(union-21, Eastern-19)
case(Eastern-19, 's-20)
nmod:of(support-17, union-21)
punct(made-13, ---22)
advmod(attacking-25, sometimes-23)
advmod(attacking-25, sharply-24)
parataxis(made-13, attacking-25)
compound(Lorenzo-27, Mr.-26)
dobj(attacking-25, Lorenzo-27)
punct(made-13, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#lorenzo

attack :: Iran said its jets bombarded an Iraqi military base and oil refinery in Baghdad , and Iraq said its forces attacked 10 Iranian towns ./.
nsubj(said-2, Iran-1)
root(ROOT-0, said-2)
nmod:poss(jets-4, its-3)
nsubj(bombarded-5, jets-4)
ccomp(said-2, bombarded-5)
det(base-9, an-6)
amod(base-9, Iraqi-7)
amod(base-9, military-8)
dobj(bombarded-5, base-9)
cc(base-9, and-10)
compound(refinery-12, oil-11)
dobj(bombarded-5, refinery-12)
conj:and(base-9, refinery-12)
case(Baghdad-14, in-13)
nmod:in(base-9, Baghdad-14)
punct(bombarded-5, ,-15)
cc(bombarded-5, and-16)
nsubj(said-18, Iraq-17)
ccomp(said-2, said-18)
conj:and(bombarded-5, said-18)
nmod:poss(forces-20, its-19)
nsubj(attacked-21, forces-20)
ccomp(said-18, attacked-21)
nummod(towns-24, 10-22)
amod(towns-24, Iranian-23)
dobj(attacked-21, towns-24)
punct(said-2, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#towns

attack :: Finally , Texas Air 's financing has left Mr. Lorenzo some breathing room to wage his cost war with organized labor and to attack his operating problems ./.
advmod(left-8, Finally-1)
punct(left-8, ,-2)
compound(Air-4, Texas-3)
nmod:poss(financing-6, Air-4)
case(Air-4, 's-5)
nsubj(left-8, financing-6)
aux(left-8, has-7)
root(ROOT-0, left-8)
compound(Lorenzo-10, Mr.-9)
iobj(left-8, Lorenzo-10)
det(room-13, some-11)
compound(room-13, breathing-12)
dobj(left-8, room-13)
mark(wage-15, to-14)
acl(room-13, wage-15)
nmod:poss(war-18, his-16)
compound(war-18, cost-17)
dobj(wage-15, war-18)
case(labor-21, with-19)
amod(labor-21, organized-20)
nmod:with(wage-15, labor-21)
cc(wage-15, and-22)
mark(attack-24, to-23)
acl(room-13, attack-24)
conj:and(wage-15, attack-24)
nmod:poss(problems-27, his-25)
compound(problems-27, operating-26)
dobj(attack-24, problems-27)
punct(left-8, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#problems

attack :: The World Wildlife Fund is trying to attack the problem at its source , by working with developing countries to control the poaching and set up wildlife management programs ./.
det(Fund-4, The-1)
compound(Fund-4, World-2)
compound(Fund-4, Wildlife-3)
nsubj(trying-6, Fund-4)
nsubj:xsubj(attack-8, Fund-4)
aux(trying-6, is-5)
root(ROOT-0, trying-6)
mark(attack-8, to-7)
xcomp(trying-6, attack-8)
det(problem-10, the-9)
dobj(attack-8, problem-10)
case(source-13, at-11)
nmod:poss(source-13, its-12)
nmod:at(attack-8, source-13)
punct(attack-8, ,-14)
mark(working-16, by-15)
advcl(attack-8, working-16)
case(countries-19, with-17)
amod(countries-19, developing-18)
nmod:with(working-16, countries-19)
mark(control-21, to-20)
xcomp(working-16, control-21)
det(poaching-23, the-22)
dobj(control-21, poaching-23)
cc(control-21, and-24)
xcomp(working-16, set-25)
conj:and(control-21, set-25)
compound:prt(set-25, up-26)
compound(programs-29, wildlife-27)
compound(programs-29, management-28)
dobj(set-25, programs-29)
punct(trying-6, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#problem

attack :: Tamil militants attacked and set fire to two Moslem fishing villages in eastern Sri Lanka ./.
compound(militants-2, Tamil-1)
nsubj(attacked-3, militants-2)
nsubj(set-5, militants-2)
root(ROOT-0, attacked-3)
cc(attacked-3, and-4)
conj:and(attacked-3, set-5)
dobj(set-5, fire-6)
case(villages-11, to-7)
nummod(villages-11, two-8)
compound(villages-11, Moslem-9)
compound(villages-11, fishing-10)
nmod:to(set-5, villages-11)
case(Lanka-15, in-12)
compound(Lanka-15, eastern-13)
compound(Lanka-15, Sri-14)
nmod:in(villages-11, Lanka-15)
punct(attacked-3, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#militants

attack :: Iranian gunboats attacked an Indian tanker in the Persian Gulf , setting the vessel ablaze and wounding at least one crew member , gulf-based shipping executives reported ./.
amod(gunboats-2, Iranian-1)
nsubj(attacked-3, gunboats-2)
root(ROOT-0, attacked-3)
det(tanker-6, an-4)
amod(tanker-6, Indian-5)
dobj(attacked-3, tanker-6)
case(Gulf-10, in-7)
det(Gulf-10, the-8)
compound(Gulf-10, Persian-9)
nmod:in(tanker-6, Gulf-10)
punct(attacked-3, ,-11)
dep(reported-27, setting-12)
det(ablaze-15, the-13)
compound(ablaze-15, vessel-14)
dobj(setting-12, ablaze-15)
cc(ablaze-15, and-16)
dobj(setting-12, wounding-17)
conj:and(ablaze-15, wounding-17)
case(least-19, at-18)
nmod:npmod(one-20, least-19)
nummod(member-22, one-20)
compound(member-22, crew-21)
nsubj(reported-27, member-22)
punct(member-22, ,-23)
amod(executives-26, gulf-based-24)
compound(executives-26, shipping-25)
appos(member-22, executives-26)
advcl(attacked-3, reported-27)
punct(attacked-3, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#tanker

attack :: Suzy says she almost did n't answer the Revson column: `` But nobody , especially nobody of this ilk , can attack the queen ./.
nsubj(says-2, Suzy-1)
root(ROOT-0, says-2)
nsubj(answer-7, she-3)
advmod(answer-7, almost-4)
aux(answer-7, did-5)
neg(answer-7, n't-6)
ccomp(says-2, answer-7)
det(column-10, the-8)
compound(column-10, Revson-9)
dobj(answer-7, column-10)
punct(says-2, :-11)
punct(says-2, ``-12)
cc(attack-23, But-13)
nsubj(attack-23, nobody-14)
punct(attack-23, ,-15)
advmod(nobody-17, especially-16)
dep(attack-23, nobody-17)
case(ilk-20, of-18)
det(ilk-20, this-19)
nmod:of(nobody-17, ilk-20)
punct(attack-23, ,-21)
aux(attack-23, can-22)
ccomp(says-2, attack-23)
det(queen-25, the-24)
dobj(attack-23, queen-25)
punct(says-2, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#queen

attack :: Major newspapers generally endorse the notion of liberalization , but they are n't attacking the GATT solution ./.
amod(newspapers-2, Major-1)
nsubj(endorse-4, newspapers-2)
advmod(endorse-4, generally-3)
root(ROOT-0, endorse-4)
det(notion-6, the-5)
dobj(endorse-4, notion-6)
case(liberalization-8, of-7)
nmod:of(notion-6, liberalization-8)
punct(endorse-4, ,-9)
cc(endorse-4, but-10)
nsubj(attacking-14, they-11)
aux(attacking-14, are-12)
neg(attacking-14, n't-13)
conj:but(endorse-4, attacking-14)
det(solution-17, the-15)
compound(solution-17, GATT-16)
dobj(attacking-14, solution-17)
punct(endorse-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#solution

attack :: In northern Nicaragua , Honduran jets attacked a Sandinista military headquarters ./.
case(Nicaragua-3, In-1)
amod(Nicaragua-3, northern-2)
nmod:in(attacked-7, Nicaragua-3)
punct(attacked-7, ,-4)
amod(jets-6, Honduran-5)
nsubj(attacked-7, jets-6)
root(ROOT-0, attacked-7)
det(headquarters-11, a-8)
compound(headquarters-11, Sandinista-9)
amod(headquarters-11, military-10)
dobj(attacked-7, headquarters-11)
punct(attacked-7, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#headquarters

attack :: An analogous appeal attacking similar treatment of future claims in the Manville case is pending before a federal appellate court in Manhattan ./.
det(appeal-3, An-1)
amod(appeal-3, analogous-2)
nsubj(pending-15, appeal-3)
acl(appeal-3, attacking-4)
amod(treatment-6, similar-5)
dobj(attacking-4, treatment-6)
case(claims-9, of-7)
amod(claims-9, future-8)
nmod:of(treatment-6, claims-9)
case(case-13, in-10)
det(case-13, the-11)
compound(case-13, Manville-12)
nmod:in(claims-9, case-13)
cop(pending-15, is-14)
root(ROOT-0, pending-15)
case(court-20, before-16)
det(court-20, a-17)
amod(court-20, federal-18)
amod(court-20, appellate-19)
nmod:before(pending-15, court-20)
case(Manhattan-22, in-21)
nmod:in(court-20, Manhattan-22)
punct(pending-15, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#claims

attack :: Rioting Iranians attacked the Soviet Union 's Embassy in Tehran , accusing Moscow of supplying Iraq with missiles used in recent raids on Iran ./.
compound(Iranians-2, Rioting-1)
nsubj(attacked-3, Iranians-2)
root(ROOT-0, attacked-3)
det(Union-6, the-4)
compound(Union-6, Soviet-5)
nmod:poss(Embassy-8, Union-6)
case(Union-6, 's-7)
dobj(attacked-3, Embassy-8)
case(Tehran-10, in-9)
nmod:in(attacked-3, Tehran-10)
punct(attacked-3, ,-11)
xcomp(attacked-3, accusing-12)
dobj(accusing-12, Moscow-13)
mark(supplying-15, of-14)
advcl(accusing-12, supplying-15)
dobj(supplying-15, Iraq-16)
case(missiles-18, with-17)
nmod:with(supplying-15, missiles-18)
acl(missiles-18, used-19)
case(raids-22, in-20)
amod(raids-22, recent-21)
nmod:in(used-19, raids-22)
case(Iran-24, on-23)
nmod:on(raids-22, Iran-24)
punct(attacked-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#embassy

attack :: Meanwhile , the U.S. quietly tries to persuade former Israeli Defense Minister Sharon not to undercut Shamir by attacking the peace effort ./.
advmod(tries-6, Meanwhile-1)
punct(tries-6, ,-2)
det(U.S.-4, the-3)
nsubj(tries-6, U.S.-4)
nsubj:xsubj(persuade-8, U.S.-4)
advmod(tries-6, quietly-5)
root(ROOT-0, tries-6)
mark(persuade-8, to-7)
xcomp(tries-6, persuade-8)
amod(Sharon-13, former-9)
compound(Sharon-13, Israeli-10)
compound(Sharon-13, Defense-11)
compound(Sharon-13, Minister-12)
dobj(persuade-8, Sharon-13)
nsubj:xsubj(undercut-16, Sharon-13)
neg(undercut-16, not-14)
mark(undercut-16, to-15)
xcomp(persuade-8, undercut-16)
dobj(undercut-16, Shamir-17)
mark(attacking-19, by-18)
advcl(undercut-16, attacking-19)
det(effort-22, the-20)
compound(effort-22, peace-21)
dobj(attacking-19, effort-22)
punct(tries-6, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#effort

attack :: While proposing such cuts to attack the current deficit , Mr. Jackson is vague on how the expensive new social programs he proposes would pay for themselves ./.
mark(proposing-2, While-1)
advcl(vague-14, proposing-2)
amod(cuts-4, such-3)
dobj(proposing-2, cuts-4)
mark(attack-6, to-5)
acl(cuts-4, attack-6)
det(deficit-9, the-7)
amod(deficit-9, current-8)
dobj(attack-6, deficit-9)
punct(vague-14, ,-10)
compound(Jackson-12, Mr.-11)
nsubj(vague-14, Jackson-12)
cop(vague-14, is-13)
root(ROOT-0, vague-14)
mark(pay-25, on-15)
advmod(pay-25, how-16)
det(programs-21, the-17)
amod(programs-21, expensive-18)
amod(programs-21, new-19)
amod(programs-21, social-20)
nsubj(pay-25, programs-21)
nsubj(proposes-23, he-22)
acl:relcl(programs-21, proposes-23)
aux(pay-25, would-24)
advcl(vague-14, pay-25)
case(themselves-27, for-26)
nmod:for(pay-25, themselves-27)
punct(vague-14, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#deficit

attack :: The PLO said it would attack Israeli targets to avenge Sunday 's killing of three guerrillas and Monday 's bombing of a ship intended to carry Palestinian deportees to Israel ./.
det(PLO-2, The-1)
nsubj(said-3, PLO-2)
root(ROOT-0, said-3)
nsubj(attack-6, it-4)
aux(attack-6, would-5)
ccomp(said-3, attack-6)
amod(targets-8, Israeli-7)
dobj(attack-6, targets-8)
mark(avenge-10, to-9)
advcl(attack-6, avenge-10)
nmod:poss(killing-13, Sunday-11)
case(Sunday-11, 's-12)
dobj(avenge-10, killing-13)
case(guerrillas-16, of-14)
nummod(guerrillas-16, three-15)
nmod:of(killing-13, guerrillas-16)
cc(killing-13, and-17)
nmod:poss(bombing-20, Monday-18)
case(Monday-18, 's-19)
dobj(avenge-10, bombing-20)
conj:and(killing-13, bombing-20)
case(ship-23, of-21)
det(ship-23, a-22)
nmod:of(bombing-20, ship-23)
acl(ship-23, intended-24)
mark(carry-26, to-25)
xcomp(intended-24, carry-26)
amod(deportees-28, Palestinian-27)
dobj(carry-26, deportees-28)
case(Israel-30, to-29)
nmod:to(carry-26, Israel-30)
punct(said-3, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#targets

attack :: In the Persian Gulf , Iran twice attacked a Norwegian tanker ./.
case(Gulf-4, In-1)
det(Gulf-4, the-2)
compound(Gulf-4, Persian-3)
nmod:in(attacked-8, Gulf-4)
punct(attacked-8, ,-5)
nsubj(attacked-8, Iran-6)
advmod(attacked-8, twice-7)
root(ROOT-0, attacked-8)
det(tanker-11, a-9)
amod(tanker-11, Norwegian-10)
dobj(attacked-8, tanker-11)
punct(attacked-8, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#tanker

attack :: They have agreed to attack only the Socalists , not each other , so Mr. Barre must find a way to beat Mr. Chirac without talking about him ./.
nsubj(agreed-3, They-1)
nsubj:xsubj(attack-5, They-1)
aux(agreed-3, have-2)
root(ROOT-0, agreed-3)
mark(attack-5, to-4)
xcomp(agreed-3, attack-5)
advmod(Socalists-8, only-6)
det(Socalists-8, the-7)
dobj(attack-5, Socalists-8)
punct(Socalists-8, ,-9)
neg(other-12, not-10)
det(other-12, each-11)
appos(Socalists-8, other-12)
punct(agreed-3, ,-13)
dep(agreed-3, so-14)
compound(Barre-16, Mr.-15)
nsubj(find-18, Barre-16)
aux(find-18, must-17)
parataxis(agreed-3, find-18)
det(way-20, a-19)
dobj(find-18, way-20)
mark(beat-22, to-21)
acl(way-20, beat-22)
compound(Chirac-24, Mr.-23)
dobj(beat-22, Chirac-24)
mark(talking-26, without-25)
advcl(beat-22, talking-26)
case(him-28, about-27)
nmod:about(talking-26, him-28)
punct(agreed-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#socalists

attack :: Sen. Brock Adams -LRB- D . , Wash. -RRB- attacked what he called `` sweatshop conditions '' in some labs ./.
compound(Adams-3, Sen.-1)
compound(Adams-3, Brock-2)
root(ROOT-0, Adams-3)
punct(D-5, -LRB--4)
appos(Adams-3, D-5)
punct(D-5, .-6)
punct(attacked-4, ,-1)
nsubj(attacked-4, Wash.-2)
punct(attacked-4, -RRB--3)
root(ROOT-0, attacked-4)
dobj(called-7, what-5)
nsubj(called-7, he-6)
ccomp(attacked-4, called-7)
punct(conditions-10, ``-8)
compound(conditions-10, sweatshop-9)
xcomp(called-7, conditions-10)
punct(conditions-10, ''-11)
case(labs-14, in-12)
det(labs-14, some-13)
nmod:in(called-7, labs-14)
punct(attacked-4, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#wash.

attack :: After a few years of relative calm , Burger King is about to start a new advertising campaign that attacks the way McDonald 's cooks ./.
case(years-4, After-1)
det(years-4, a-2)
amod(years-4, few-3)
nmod:after(about-12, years-4)
case(calm-7, of-5)
amod(calm-7, relative-6)
nmod:of(years-4, calm-7)
punct(about-12, ,-8)
compound(King-10, Burger-9)
nsubj(about-12, King-10)
nsubj:xsubj(start-14, King-10)
aux(about-12, is-11)
root(ROOT-0, about-12)
mark(start-14, to-13)
xcomp(about-12, start-14)
det(campaign-18, a-15)
amod(campaign-18, new-16)
compound(campaign-18, advertising-17)
dobj(start-14, campaign-18)
nsubj(attacks-20, campaign-18)
ref(campaign-18, that-19)
acl:relcl(campaign-18, attacks-20)
det(way-22, the-21)
dobj(attacks-20, way-22)
nmod:poss(cooks-25, McDonald-23)
case(McDonald-23, 's-24)
dep(way-22, cooks-25)
punct(about-12, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#way

attack :: This expert also believes that Pyongyang might use helicopters it has bought from the West , which are identical to those used by the Seoul army , to attack student demonstrators ./.
det(expert-2, This-1)
nsubj(believes-4, expert-2)
advmod(believes-4, also-3)
root(ROOT-0, believes-4)
mark(use-8, that-5)
nsubj(use-8, Pyongyang-6)
aux(use-8, might-7)
ccomp(believes-4, use-8)
dobj(use-8, helicopters-9)
nsubj(bought-12, it-10)
aux(bought-12, has-11)
acl:relcl(helicopters-9, bought-12)
case(West-15, from-13)
det(West-15, the-14)
nmod:from(bought-12, West-15)
nsubj(identical-19, West-15)
punct(West-15, ,-16)
ref(West-15, which-17)
cop(identical-19, are-18)
acl:relcl(West-15, identical-19)
case(those-21, to-20)
nmod:to(identical-19, those-21)
acl(those-21, used-22)
case(army-26, by-23)
det(army-26, the-24)
compound(army-26, Seoul-25)
nmod:by(used-22, army-26)
punct(use-8, ,-27)
mark(attack-29, to-28)
advcl(use-8, attack-29)
compound(demonstrators-31, student-30)
dobj(attack-29, demonstrators-31)
punct(believes-4, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#demonstrators

attack :: His antics once provoked an elderly ruling-party legislator to attack him with a cane ./.
nmod:poss(antics-2, His-1)
nsubj(provoked-4, antics-2)
advmod(provoked-4, once-3)
root(ROOT-0, provoked-4)
det(legislator-8, an-5)
amod(legislator-8, elderly-6)
compound(legislator-8, ruling-party-7)
dobj(provoked-4, legislator-8)
mark(attack-10, to-9)
advcl(provoked-4, attack-10)
dobj(attack-10, him-11)
case(cane-14, with-12)
det(cane-14, a-13)
nmod:with(attack-10, cane-14)
punct(provoked-4, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#him

attack :: It was one of the congressional spending programs President Reagan attacked in his State of the Union address ./.
nsubj(one-3, It-1)
cop(one-3, was-2)
root(ROOT-0, one-3)
case(programs-8, of-4)
det(programs-8, the-5)
amod(programs-8, congressional-6)
compound(programs-8, spending-7)
nmod:of(one-3, programs-8)
compound(Reagan-10, President-9)
nsubj(attacked-11, Reagan-10)
acl:relcl(programs-8, attacked-11)
case(State-14, in-12)
nmod:poss(State-14, his-13)
nmod:in(attacked-11, State-14)
case(address-18, of-15)
det(address-18, the-16)
compound(address-18, Union-17)
nmod:of(State-14, address-18)
punct(one-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#reagan

attack :: The view contradicts administration claims that Moscow knew it was attacking a non-military target ./.
det(view-2, The-1)
nsubj(contradicts-3, view-2)
root(ROOT-0, contradicts-3)
compound(claims-5, administration-4)
dobj(contradicts-3, claims-5)
mark(knew-8, that-6)
nsubj(knew-8, Moscow-7)
ccomp(claims-5, knew-8)
nsubj(attacking-11, it-9)
aux(attacking-11, was-10)
ccomp(knew-8, attacking-11)
det(target-14, a-12)
amod(target-14, non-military-13)
dobj(attacking-11, target-14)
punct(contradicts-3, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#target

attack :: It is to this purpose that SDI laser technology can be uniquely directed , where moving targets can be attacked almost immediately after they are detected ./.
nsubj(is-2, It-1)
root(ROOT-0, is-2)
case(purpose-5, to-3)
det(purpose-5, this-4)
nmod:to(is-2, purpose-5)
mark(directed-13, that-6)
compound(technology-9, SDI-7)
compound(technology-9, laser-8)
nsubjpass(directed-13, technology-9)
aux(directed-13, can-10)
auxpass(directed-13, be-11)
advmod(directed-13, uniquely-12)
ccomp(purpose-5, directed-13)
punct(directed-13, ,-14)
advmod(attacked-20, where-15)
amod(targets-17, moving-16)
nsubjpass(attacked-20, targets-17)
aux(attacked-20, can-18)
auxpass(attacked-20, be-19)
advcl(directed-13, attacked-20)
advmod(immediately-22, almost-21)
advmod(attacked-20, immediately-22)
mark(detected-26, after-23)
nsubjpass(detected-26, they-24)
auxpass(detected-26, are-25)
advcl(attacked-20, detected-26)
punct(is-2, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#targets

attack :: Here in Masaya , supporters of a group known as the Mothers of Political Prisoners were brutally attacked by turbas in a well-documented incident in March ./.
nsubjpass(attacked-18, Here-1)
case(Masaya-3, in-2)
nmod:in(Here-1, Masaya-3)
punct(Masaya-3, ,-4)
appos(Masaya-3, supporters-5)
case(group-8, of-6)
det(group-8, a-7)
nmod:of(supporters-5, group-8)
acl(group-8, known-9)
case(Mothers-12, as-10)
det(Mothers-12, the-11)
nmod:as(known-9, Mothers-12)
case(Prisoners-15, of-13)
amod(Prisoners-15, Political-14)
nmod:of(Mothers-12, Prisoners-15)
auxpass(attacked-18, were-16)
advmod(attacked-18, brutally-17)
root(ROOT-0, attacked-18)
case(turbas-20, by-19)
nmod:agent(attacked-18, turbas-20)
case(incident-24, in-21)
det(incident-24, a-22)
amod(incident-24, well-documented-23)
nmod:in(attacked-18, incident-24)
case(March-26, in-25)
nmod:in(attacked-18, March-26)
punct(attacked-18, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#here

attack :: U.S. conservatives attacked the accord , but it helps clear the way for an upbeat superpower summit in Moscow at the end of May ./.
compound(conservatives-2, U.S.-1)
nsubj(attacked-3, conservatives-2)
root(ROOT-0, attacked-3)
det(accord-5, the-4)
dobj(attacked-3, accord-5)
punct(attacked-3, ,-6)
cc(attacked-3, but-7)
nsubj(helps-9, it-8)
conj:but(attacked-3, helps-9)
xcomp(helps-9, clear-10)
det(way-12, the-11)
dobj(clear-10, way-12)
case(summit-17, for-13)
det(summit-17, an-14)
amod(summit-17, upbeat-15)
compound(summit-17, superpower-16)
nmod:for(way-12, summit-17)
case(Moscow-19, in-18)
nmod:in(summit-17, Moscow-19)
case(end-22, at-20)
det(end-22, the-21)
nmod:at(summit-17, end-22)
case(May-24, of-23)
nmod:of(end-22, May-24)
punct(attacked-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#accord

attack :: Pakistani cheating could prompt Moscow to declare the accords void or to attack Afghan-resistance camps in Pakistan ./.
amod(cheating-2, Pakistani-1)
nsubj(prompt-4, cheating-2)
aux(prompt-4, could-3)
root(ROOT-0, prompt-4)
dobj(prompt-4, Moscow-5)
nsubj:xsubj(declare-7, Moscow-5)
nsubj:xsubj(attack-13, Moscow-5)
mark(declare-7, to-6)
xcomp(prompt-4, declare-7)
det(void-10, the-8)
compound(void-10, accords-9)
dobj(declare-7, void-10)
cc(declare-7, or-11)
mark(attack-13, to-12)
xcomp(prompt-4, attack-13)
conj:or(declare-7, attack-13)
amod(camps-15, Afghan-resistance-14)
dobj(attack-13, camps-15)
case(Pakistan-17, in-16)
nmod:in(attack-13, Pakistan-17)
punct(prompt-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#camps

attack :: Packages of `` fight material '' attacking Mr. Icahn are almost ready to be mailed to shareholders ./.
nsubj(ready-12, Packages-1)
nsubjpass:xsubj(mailed-15, Packages-1)
case(material-5, of-2)
punct(material-5, ``-3)
compound(material-5, fight-4)
nmod:of(Packages-1, material-5)
punct(material-5, ''-6)
acl(material-5, attacking-7)
compound(Icahn-9, Mr.-8)
dobj(attacking-7, Icahn-9)
cop(ready-12, are-10)
advmod(ready-12, almost-11)
root(ROOT-0, ready-12)
mark(mailed-15, to-13)
auxpass(mailed-15, be-14)
xcomp(ready-12, mailed-15)
case(shareholders-17, to-16)
nmod:to(mailed-15, shareholders-17)
punct(ready-12, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#icahn

attack :: IBP attacked the report as not factual and full of innuendo and as `` egotistical '' grandstanding by the subcommittee chairman , Rep. Tom Lantos -LRB- D . , Calif. -RRB- ./.
nsubj(attacked-2, IBP-1)
nsubj(attacked-2', IBP-1)
nsubj(attacked-2'', IBP-1)
root(ROOT-0, attacked-2)
conj:and(attacked-2, attacked-2')
conj:and(attacked-2, attacked-2'')
det(report-4, the-3)
dobj(attacked-2, report-4)
case(factual-7, as-5)
neg(factual-7, not-6)
nmod:as(attacked-2, factual-7)
cc(attacked-2, and-8)
conj(factual-7, full-9)
case(innuendo-11, of-10)
nmod:of(full-9, innuendo-11)
cc(attacked-2, and-12)
case(grandstanding-17, as-13)
punct(grandstanding-17, ``-14)
amod(grandstanding-17, egotistical-15)
punct(grandstanding-17, ''-16)
nmod:as(attacked-2', grandstanding-17)
case(chairman-21, by-18)
det(chairman-21, the-19)
compound(chairman-21, subcommittee-20)
nmod:by(grandstanding-17, chairman-21)
punct(chairman-21, ,-22)
compound(Lantos-25, Rep.-23)
compound(Lantos-25, Tom-24)
appos(chairman-21, Lantos-25)
punct(D-27, -LRB--26)
appos(Lantos-25, D-27)
punct(D-27, .-28)
punct(Calif.-2, ,-1)
root(ROOT-0, Calif.-2)
punct(Calif.-2, -RRB--3)
punct(Calif.-2, .-4)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#report

attack :: None of the Democratic leadership in the House or Senate was notified about the move , unlike when the U.S. ordered troops into Grenada in 1983 or last October when U.S. forces in the Persian Gulf attacked an oil platform that had been converted to a military facility ./.
nsubjpass(notified-12, None-1)
case(leadership-5, of-2)
det(leadership-5, the-3)
amod(leadership-5, Democratic-4)
nmod:of(None-1, leadership-5)
case(House-8, in-6)
det(House-8, the-7)
nmod:in(leadership-5, House-8)
cc(House-8, or-9)
nmod:in(leadership-5, Senate-10)
conj:or(House-8, Senate-10)
auxpass(notified-12, was-11)
root(ROOT-0, notified-12)
case(move-15, about-13)
det(move-15, the-14)
nmod:about(notified-12, move-15)
punct(notified-12, ,-16)
advmod(notified-12, unlike-17)
advmod(ordered-21, when-18)
det(U.S.-20, the-19)
nsubj(ordered-21, U.S.-20)
advcl(unlike-17, ordered-21)
dobj(ordered-21, troops-22)
case(Grenada-24, into-23)
nmod:into(ordered-21, Grenada-24)
case(1983-26, in-25)
nmod:in(ordered-21, 1983-26)
cc(1983-26, or-27)
amod(October-29, last-28)
nmod:in(ordered-21, October-29)
conj:or(1983-26, October-29)
advmod(attacked-37, when-30)
compound(forces-32, U.S.-31)
nsubj(attacked-37, forces-32)
case(Gulf-36, in-33)
det(Gulf-36, the-34)
compound(Gulf-36, Persian-35)
nmod:in(forces-32, Gulf-36)
advcl(ordered-21, attacked-37)
det(platform-40, an-38)
compound(platform-40, oil-39)
dobj(attacked-37, platform-40)
nsubjpass(converted-44, platform-40)
ref(platform-40, that-41)
aux(converted-44, had-42)
auxpass(converted-44, been-43)
acl:relcl(platform-40, converted-44)
case(facility-48, to-45)
det(facility-48, a-46)
amod(facility-48, military-47)
nmod:to(converted-44, facility-48)
punct(notified-12, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#platform

attack :: Tamil rebels attacked a village in eastern Sri Lanka , killing at least 16 people in the assault on homes of the majority Sinhalese ./.
compound(rebels-2, Tamil-1)
nsubj(attacked-3, rebels-2)
root(ROOT-0, attacked-3)
det(village-5, a-4)
dobj(attacked-3, village-5)
case(Lanka-9, in-6)
compound(Lanka-9, eastern-7)
compound(Lanka-9, Sri-8)
nmod:in(village-5, Lanka-9)
punct(attacked-3, ,-10)
advcl(attacked-3, killing-11)
case(least-13, at-12)
nmod:npmod(16-14, least-13)
nummod(people-15, 16-14)
dobj(killing-11, people-15)
case(assault-18, in-16)
det(assault-18, the-17)
nmod:in(killing-11, assault-18)
case(homes-20, on-19)
nmod:on(assault-18, homes-20)
case(Sinhalese-24, of-21)
det(Sinhalese-24, the-22)
compound(Sinhalese-24, majority-23)
nmod:of(homes-20, Sinhalese-24)
punct(attacked-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#village

attack :: A Treasury official yesterday attacked Mr. Robinson 's proposal as `` clearly a commercial venture on the part of American Express '' and one that contains nothing new ./.
det(official-3, A-1)
compound(official-3, Treasury-2)
nsubj(attacked-5, official-3)
nmod:tmod(attacked-5, yesterday-4)
root(ROOT-0, attacked-5)
compound(Robinson-7, Mr.-6)
nmod:poss(proposal-9, Robinson-7)
case(Robinson-7, 's-8)
dobj(attacked-5, proposal-9)
case(venture-15, as-10)
punct(venture-15, ``-11)
advmod(venture-15, clearly-12)
det(venture-15, a-13)
amod(venture-15, commercial-14)
nmod:as(attacked-5, venture-15)
case(part-18, on-16)
det(part-18, the-17)
nmod:on(venture-15, part-18)
case(Express-21, of-19)
compound(Express-21, American-20)
nmod:of(part-18, Express-21)
punct(venture-15, ''-22)
cc(venture-15, and-23)
nmod:as(attacked-5, one-24)
conj:and(venture-15, one-24)
nsubj(contains-26, one-24)
ref(one-24, that-25)
acl:relcl(one-24, contains-26)
dobj(contains-26, nothing-27)
amod(nothing-27, new-28)
punct(attacked-5, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#proposal

attack :: Dukakis plans to attack Gephardt for taking special-interest money ./.
nsubj(plans-2, Dukakis-1)
nsubj:xsubj(attack-4, Dukakis-1)
root(ROOT-0, plans-2)
mark(attack-4, to-3)
xcomp(plans-2, attack-4)
dobj(attack-4, Gephardt-5)
mark(taking-7, for-6)
advcl(attack-4, taking-7)
amod(money-9, special-interest-8)
dobj(taking-7, money-9)
punct(plans-2, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#gephardt

attack :: So Mr. Tribe of Justice will file a brief arguing for independent counsels ; Justice itself has filed briefs attacking these prosecutors , and both arguments are supposed to represent the view of the executive branch ./.
advmod(file-7, So-1)
compound(Tribe-3, Mr.-2)
nsubj(file-7, Tribe-3)
case(Justice-5, of-4)
nmod:of(Tribe-3, Justice-5)
aux(file-7, will-6)
root(ROOT-0, file-7)
det(arguing-10, a-8)
amod(arguing-10, brief-9)
dobj(file-7, arguing-10)
case(counsels-13, for-11)
amod(counsels-13, independent-12)
nmod:for(arguing-10, counsels-13)
punct(file-7, ;-14)
nsubj(filed-18, Justice-15)
nmod:npmod(Justice-15, itself-16)
aux(filed-18, has-17)
parataxis(file-7, filed-18)
dobj(filed-18, briefs-19)
acl(briefs-19, attacking-20)
det(prosecutors-22, these-21)
dobj(attacking-20, prosecutors-22)
punct(filed-18, ,-23)
cc(filed-18, and-24)
det(arguments-26, both-25)
nsubjpass(supposed-28, arguments-26)
nsubj:xsubj(represent-30, arguments-26)
auxpass(supposed-28, are-27)
parataxis(file-7, supposed-28)
conj:and(filed-18, supposed-28)
mark(represent-30, to-29)
xcomp(supposed-28, represent-30)
det(view-32, the-31)
dobj(represent-30, view-32)
case(branch-36, of-33)
det(branch-36, the-34)
amod(branch-36, executive-35)
nmod:of(view-32, branch-36)
punct(file-7, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#prosecutors

attack :: Most budget experts agree that any credible solution to the deficit problem will have to attack two political sacred cows: taxes and Social Security ./.
amod(experts-3, Most-1)
compound(experts-3, budget-2)
nsubj(agree-4, experts-3)
root(ROOT-0, agree-4)
mark(have-14, that-5)
det(solution-8, any-6)
amod(solution-8, credible-7)
nsubj(have-14, solution-8)
nsubj:xsubj(attack-16, solution-8)
case(problem-12, to-9)
det(problem-12, the-10)
compound(problem-12, deficit-11)
nmod:to(solution-8, problem-12)
aux(have-14, will-13)
ccomp(agree-4, have-14)
mark(attack-16, to-15)
xcomp(have-14, attack-16)
nummod(cows-20, two-17)
amod(cows-20, political-18)
amod(cows-20, sacred-19)
dobj(attack-16, cows-20)
punct(cows-20, :-21)
dep(cows-20, taxes-22)
cc(taxes-22, and-23)
amod(Security-25, Social-24)
dep(cows-20, Security-25)
conj:and(taxes-22, Security-25)
punct(agree-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#cows

attack :: But Mr. Dole has so far spent much of his campaign attacking Vice President Bush for , among other things , having the effrontery to attack Congress ./.
cc(spent-7, But-1)
compound(Dole-3, Mr.-2)
nsubj(spent-7, Dole-3)
aux(spent-7, has-4)
advmod(far-6, so-5)
advmod(spent-7, far-6)
root(ROOT-0, spent-7)
dobj(spent-7, much-8)
case(campaign-11, of-9)
nmod:poss(campaign-11, his-10)
nmod:of(much-8, campaign-11)
acl(campaign-11, attacking-12)
compound(Bush-15, Vice-13)
compound(Bush-15, President-14)
dobj(attacking-12, Bush-15)
nmod(attacking-12, for-16)
punct(things-20, ,-17)
case(things-20, among-18)
amod(things-20, other-19)
nmod:among(for-16, things-20)
punct(things-20, ,-21)
acl(things-20, having-22)
det(effrontery-24, the-23)
dobj(having-22, effrontery-24)
mark(attack-26, to-25)
acl(effrontery-24, attack-26)
dobj(attack-26, Congress-27)
punct(spent-7, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#bush

attack :: The Bush strategists insist they will not attack Mr. Robertson , noting that much of their own support in the South is conservative and evangelical ./.
det(strategists-3, The-1)
compound(strategists-3, Bush-2)
nsubj(insist-4, strategists-3)
root(ROOT-0, insist-4)
nsubj(attack-8, they-5)
aux(attack-8, will-6)
neg(attack-8, not-7)
ccomp(insist-4, attack-8)
compound(Robertson-10, Mr.-9)
dobj(attack-8, Robertson-10)
punct(insist-4, ,-11)
xcomp(insist-4, noting-12)
mark(conservative-23, that-13)
nsubj(conservative-23, much-14)
nsubj(evangelical-25, much-14)
case(support-18, of-15)
nmod:poss(support-18, their-16)
amod(support-18, own-17)
nmod:of(much-14, support-18)
case(South-21, in-19)
det(South-21, the-20)
nmod:in(support-18, South-21)
cop(conservative-23, is-22)
ccomp(noting-12, conservative-23)
cc(conservative-23, and-24)
ccomp(noting-12, evangelical-25)
conj:and(conservative-23, evangelical-25)
punct(insist-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#robertson

attack :: They have agreed to attack only the Socalists , not each other , so Mr. Barre must find a way to beat Mr. Chirac without talking about him ./.
nsubj(agreed-3, They-1)
nsubj:xsubj(attack-5, They-1)
aux(agreed-3, have-2)
root(ROOT-0, agreed-3)
mark(attack-5, to-4)
xcomp(agreed-3, attack-5)
advmod(Socalists-8, only-6)
det(Socalists-8, the-7)
dobj(attack-5, Socalists-8)
punct(Socalists-8, ,-9)
neg(other-12, not-10)
det(other-12, each-11)
appos(Socalists-8, other-12)
punct(agreed-3, ,-13)
dep(agreed-3, so-14)
compound(Barre-16, Mr.-15)
nsubj(find-18, Barre-16)
aux(find-18, must-17)
parataxis(agreed-3, find-18)
det(way-20, a-19)
dobj(find-18, way-20)
mark(beat-22, to-21)
acl(way-20, beat-22)
compound(Chirac-24, Mr.-23)
dobj(beat-22, Chirac-24)
mark(talking-26, without-25)
advcl(beat-22, talking-26)
case(him-28, about-27)
nmod:about(talking-26, him-28)
punct(agreed-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#socalists

attack :: Without the boost in the capital-gains rate , congressional liberals would have attacked the tax reform plan for leaning too far in favor of the rich ./.
case(boost-3, Without-1)
det(boost-3, the-2)
nmod:without(attacked-13, boost-3)
case(rate-7, in-4)
det(rate-7, the-5)
compound(rate-7, capital-gains-6)
nmod:in(boost-3, rate-7)
punct(attacked-13, ,-8)
amod(liberals-10, congressional-9)
nsubj(attacked-13, liberals-10)
aux(attacked-13, would-11)
aux(attacked-13, have-12)
root(ROOT-0, attacked-13)
det(plan-17, the-14)
compound(plan-17, tax-15)
compound(plan-17, reform-16)
dobj(attacked-13, plan-17)
mark(leaning-19, for-18)
acl(plan-17, leaning-19)
advmod(far-21, too-20)
advmod(leaning-19, far-21)
case(favor-23, in-22)
nmod:in(leaning-19, favor-23)
case(rich-26, of-24)
det(rich-26, the-25)
nmod:of(favor-23, rich-26)
punct(attacked-13, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#plan

attack :: As the recent Ikle-Wohlstetter report , `` Discriminate Deterrence '' -LRB- the source of the nearby maps -RRB- , to President Reagan makes clear , it 's far more likely that the Soviets would attack first on the more vulnerable fringes of the alliance , perhaps in the Persian Gulf or Norway ./.
case(report-5, As-1)
det(report-5, the-2)
amod(report-5, recent-3)
compound(report-5, Ikle-Wohlstetter-4)
nmod:as(makes-23, report-5)
punct(makes-23, ,-6)
punct(makes-23, ``-7)
nsubj(makes-23, Discriminate-8)
dobj(Discriminate-8, Deterrence-9)
punct(Deterrence-9, ''-10)
punct(source-13, -LRB--11)
det(source-13, the-12)
dep(Deterrence-9, source-13)
case(maps-17, of-14)
det(maps-17, the-15)
amod(maps-17, nearby-16)
nmod:of(source-13, maps-17)
punct(source-13, -RRB--18)
punct(Discriminate-8, ,-19)
case(Reagan-22, to-20)
compound(Reagan-22, President-21)
nmod:to(Discriminate-8, Reagan-22)
root(ROOT-0, makes-23)
xcomp(makes-23, clear-24)
punct(makes-23, ,-25)
nsubj(likely-30, it-26)
cop(likely-30, 's-27)
advmod(more-29, far-28)
advmod(likely-30, more-29)
parataxis(makes-23, likely-30)
mark(attack-35, that-31)
det(Soviets-33, the-32)
nsubj(attack-35, Soviets-33)
aux(attack-35, would-34)
ccomp(likely-30, attack-35)
advmod(attack-35, first-36)
case(fringes-41, on-37)
det(fringes-41, the-38)
advmod(vulnerable-40, more-39)
amod(fringes-41, vulnerable-40)
nmod:on(attack-35, fringes-41)
case(alliance-44, of-42)
det(alliance-44, the-43)
nmod:of(fringes-41, alliance-44)
punct(fringes-41, ,-45)
advmod(Gulf-50, perhaps-46)
case(Gulf-50, in-47)
det(Gulf-50, the-48)
compound(Gulf-50, Persian-49)
nmod:in(fringes-41, Gulf-50)
cc(Gulf-50, or-51)
nmod:in(fringes-41, Norway-52)
conj:or(Gulf-50, Norway-52)
punct(makes-23, .-53)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#soviets

attack :: Because a commitment to hold open the 74.4 miles of supply road to Khost from Gardez would require even more Soviet casualties and force , the optimists surmise that the Soviets are attacking Khost to get out of Afghanistan ./.
mark(require-18, Because-1)
det(commitment-3, a-2)
nsubj(require-18, commitment-3)
mark(hold-5, to-4)
acl(commitment-3, hold-5)
compound:prt(hold-5, open-6)
det(miles-9, the-7)
nummod(miles-9, 74.4-8)
dobj(hold-5, miles-9)
case(road-12, of-10)
compound(road-12, supply-11)
nmod:of(miles-9, road-12)
case(Khost-14, to-13)
nmod:to(hold-5, Khost-14)
case(Gardez-16, from-15)
nmod:from(hold-5, Gardez-16)
aux(require-18, would-17)
advcl(surmise-28, require-18)
advmod(more-20, even-19)
amod(casualties-22, more-20)
amod(casualties-22, Soviet-21)
dobj(require-18, casualties-22)
cc(casualties-22, and-23)
dobj(require-18, force-24)
conj:and(casualties-22, force-24)
punct(surmise-28, ,-25)
det(optimists-27, the-26)
nsubj(surmise-28, optimists-27)
root(ROOT-0, surmise-28)
mark(attacking-33, that-29)
det(Soviets-31, the-30)
nsubj(attacking-33, Soviets-31)
aux(attacking-33, are-32)
ccomp(surmise-28, attacking-33)
dobj(attacking-33, Khost-34)
mark(get-36, to-35)
advcl(attacking-33, get-36)
case(Afghanistan-39, out-37)
mwe(out-37, of-38)
nmod:out_of(get-36, Afghanistan-39)
punct(surmise-28, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#khost

attack :: The point of this review is not necessarily to let off the Eritreans , who have recently come under deservedly strong criticism for attacking two food convoys , but to demonstrate how famine in northern Ethiopia is part of something much broader and more complex than drought ./.
det(point-2, The-1)
nsubj(necessarily-8, point-2)
nsubj:xsubj(let-10, point-2)
nsubj:xsubj(demonstrate-31, point-2)
case(review-5, of-3)
det(review-5, this-4)
nmod:of(point-2, review-5)
cop(necessarily-8, is-6)
neg(necessarily-8, not-7)
root(ROOT-0, necessarily-8)
mark(let-10, to-9)
xcomp(necessarily-8, let-10)
compound:prt(let-10, off-11)
det(Eritreans-13, the-12)
dobj(let-10, Eritreans-13)
nsubj(come-18, Eritreans-13)
punct(Eritreans-13, ,-14)
ref(Eritreans-13, who-15)
aux(come-18, have-16)
advmod(come-18, recently-17)
acl:relcl(Eritreans-13, come-18)
case(criticism-22, under-19)
advmod(strong-21, deservedly-20)
amod(criticism-22, strong-21)
nmod:under(come-18, criticism-22)
mark(attacking-24, for-23)
acl(criticism-22, attacking-24)
nummod(convoys-27, two-25)
compound(convoys-27, food-26)
dobj(attacking-24, convoys-27)
punct(Eritreans-13, ,-28)
cc(let-10, but-29)
mark(demonstrate-31, to-30)
xcomp(necessarily-8, demonstrate-31)
conj:but(let-10, demonstrate-31)
advmod(part-38, how-32)
nsubj(part-38, famine-33)
case(Ethiopia-36, in-34)
amod(Ethiopia-36, northern-35)
nmod:in(famine-33, Ethiopia-36)
cop(part-38, is-37)
ccomp(demonstrate-31, part-38)
case(something-40, of-39)
nmod:of(part-38, something-40)
advmod(broader-42, much-41)
amod(something-40, broader-42)
cc(broader-42, and-43)
advmod(complex-45, more-44)
amod(something-40, complex-45)
conj:and(broader-42, complex-45)
case(drought-47, than-46)
nmod:than(broader-42, drought-47)
punct(necessarily-8, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#convoys

attack :: In hearings before Mr. Needelman last August , the lawyers attacked the seeming contradictions between the papers ' earlier upbeat statements and ambitious spending , and their more recent statements that the Free Press is failing ./.
case(hearings-2, In-1)
nmod:in(attacked-11, hearings-2)
case(Needelman-5, before-3)
compound(Needelman-5, Mr.-4)
nmod:before(hearings-2, Needelman-5)
amod(August-7, last-6)
nmod:tmod(hearings-2, August-7)
punct(attacked-11, ,-8)
det(lawyers-10, the-9)
nsubj(attacked-11, lawyers-10)
root(ROOT-0, attacked-11)
det(contradictions-14, the-12)
amod(contradictions-14, seeming-13)
dobj(attacked-11, contradictions-14)
case(statements-21, between-15)
det(papers-17, the-16)
nmod:poss(statements-21, papers-17)
case(papers-17, '-18)
amod(statements-21, earlier-19)
amod(statements-21, upbeat-20)
nmod:between(contradictions-14, statements-21)
cc(statements-21, and-22)
amod(spending-24, ambitious-23)
nmod:between(contradictions-14, spending-24)
conj:and(statements-21, spending-24)
punct(attacked-11, ,-25)
cc(attacked-11, and-26)
nmod:poss(statements-30, their-27)
advmod(recent-29, more-28)
amod(statements-30, recent-29)
conj:and(attacked-11, statements-30)
mark(failing-36, that-31)
det(Press-34, the-32)
amod(Press-34, Free-33)
nsubj(failing-36, Press-34)
aux(failing-36, is-35)
ccomp(statements-30, failing-36)
punct(attacked-11, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#contradictions

attack :: The only thing certain is that a Korean merchant wholly dependent on the good will of his customers would be crazy to attack a black grandmother in a virtually all-black neighborhood -- and Mr. Chung , who cleaned fish for three years to scrape together the money to buy his market , seems anything but crazy ./.
det(thing-3, The-1)
amod(thing-3, only-2)
nsubj(is-5, thing-3)
amod(thing-3, certain-4)
root(ROOT-0, is-5)
mark(crazy-21, that-6)
det(merchant-9, a-7)
amod(merchant-9, Korean-8)
nsubj(crazy-21, merchant-9)
nsubj:xsubj(attack-23, merchant-9)
advmod(dependent-11, wholly-10)
amod(merchant-9, dependent-11)
case(will-15, on-12)
det(will-15, the-13)
amod(will-15, good-14)
nmod:on(dependent-11, will-15)
case(customers-18, of-16)
nmod:poss(customers-18, his-17)
nmod:of(will-15, customers-18)
aux(crazy-21, would-19)
cop(crazy-21, be-20)
ccomp(is-5, crazy-21)
mark(attack-23, to-22)
xcomp(crazy-21, attack-23)
det(grandmother-26, a-24)
amod(grandmother-26, black-25)
dobj(attack-23, grandmother-26)
case(neighborhood-31, in-27)
det(neighborhood-31, a-28)
advmod(all-black-30, virtually-29)
amod(neighborhood-31, all-black-30)
nmod:in(attack-23, neighborhood-31)
punct(crazy-21, ---32)
cc(crazy-21, and-33)
compound(Chung-35, Mr.-34)
nsubj(cleaned-38, Chung-35)
nsubj(seems-53, Chung-35)
punct(Chung-35, ,-36)
ref(Chung-35, who-37)
acl:relcl(Chung-35, cleaned-38)
dobj(cleaned-38, fish-39)
case(years-42, for-40)
nummod(years-42, three-41)
nmod:for(cleaned-38, years-42)
mark(scrape-44, to-43)
advcl(cleaned-38, scrape-44)
advmod(scrape-44, together-45)
det(money-47, the-46)
dobj(scrape-44, money-47)
mark(buy-49, to-48)
acl(money-47, buy-49)
nmod:poss(market-51, his-50)
dobj(buy-49, market-51)
punct(Chung-35, ,-52)
ccomp(is-5, seems-53)
conj:and(crazy-21, seems-53)
xcomp(seems-53, anything-54)
cc(anything-54, but-55)
xcomp(seems-53, crazy-56)
conj:but(anything-54, crazy-56)
punct(is-5, .-57)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#grandmother

attack :: These Protestants retaliate by physically attacking Catholics , Mr. Donnelly says ./.
det(Protestants-2, These-1)
nsubj(retaliate-3, Protestants-2)
ccomp(says-11, retaliate-3)
mark(attacking-6, by-4)
advmod(attacking-6, physically-5)
advcl(retaliate-3, attacking-6)
dobj(attacking-6, Catholics-7)
punct(says-11, ,-8)
compound(Donnelly-10, Mr.-9)
nsubj(says-11, Donnelly-10)
root(ROOT-0, says-11)
punct(says-11, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#catholics

attack :: These do n't protect anything and are n't designed to kill attacking guerrillas ./.
nsubj(protect-4, These-1)
nsubjpass(designed-9, These-1)
nsubj:xsubj(kill-11, These-1)
aux(protect-4, do-2)
neg(protect-4, n't-3)
root(ROOT-0, protect-4)
dobj(protect-4, anything-5)
cc(protect-4, and-6)
auxpass(designed-9, are-7)
neg(designed-9, n't-8)
conj:and(protect-4, designed-9)
mark(kill-11, to-10)
xcomp(designed-9, kill-11)
xcomp(kill-11, attacking-12)
dobj(attacking-12, guerrillas-13)
punct(protect-4, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#guerrillas

attack :: I arrived in Vietnam in early 1968 , as green as the beret I wore , and was assigned to the Special Forces `` A '' team that had the dubious distinction , two weeks later , of being one of the first attacked during the Tet offensive ./.
nsubj(arrived-2, I-1)
nsubjpass(assigned-19, I-1)
root(ROOT-0, arrived-2)
case(Vietnam-4, in-3)
nmod:in(arrived-2, Vietnam-4)
case(1968-7, in-5)
amod(1968-7, early-6)
nmod:in(arrived-2, 1968-7)
punct(arrived-2, ,-8)
advmod(green-10, as-9)
advcl(arrived-2, green-10)
case(beret-13, as-11)
det(beret-13, the-12)
nmod:as(green-10, beret-13)
nsubj(wore-15, I-14)
acl:relcl(beret-13, wore-15)
punct(arrived-2, ,-16)
cc(arrived-2, and-17)
auxpass(assigned-19, was-18)
conj:and(arrived-2, assigned-19)
case(Forces-23, to-20)
det(Forces-23, the-21)
amod(Forces-23, Special-22)
nmod:to(assigned-19, Forces-23)
punct(Forces-23, ``-24)
det(team-27, A-25)
punct(team-27, ''-26)
dep(Forces-23, team-27)
nsubj(had-29, team-27)
ref(team-27, that-28)
acl:relcl(team-27, had-29)
det(distinction-32, the-30)
amod(distinction-32, dubious-31)
dobj(had-29, distinction-32)
punct(team-27, ,-33)
nummod(weeks-35, two-34)
nmod:npmod(later-36, weeks-35)
advmod(team-27, later-36)
punct(team-27, ,-37)
mark(one-40, of-38)
cop(one-40, being-39)
acl(team-27, one-40)
case(first-43, of-41)
det(first-43, the-42)
nmod:of(one-40, first-43)
acl(first-43, attacked-44)
case(offensive-48, during-45)
det(offensive-48, the-46)
compound(offensive-48, Tet-47)
nmod:during(attacked-44, offensive-48)
punct(arrived-2, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#offensive

attack :: Next , a member of his audience , attired in a garment resembling the flag , attacked him ./.
advmod(attacked-17, Next-1)
punct(attacked-17, ,-2)
det(member-4, a-3)
nsubj(attacked-17, member-4)
case(audience-7, of-5)
nmod:poss(audience-7, his-6)
nmod:of(member-4, audience-7)
punct(member-4, ,-8)
acl(member-4, attired-9)
case(garment-12, in-10)
det(garment-12, a-11)
nmod:in(attired-9, garment-12)
acl(garment-12, resembling-13)
det(flag-15, the-14)
xcomp(resembling-13, flag-15)
punct(member-4, ,-16)
root(ROOT-0, attacked-17)
dobj(attacked-17, him-18)
punct(attacked-17, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#him

attack :: This suggests a panicky response from the Vincennes , particularly since a Pentagon air-combat specialist quoted by Mr. Kaplan in the Boston Globe said that an attacking F-14 probably would be traveling `` at at least 550 to 580 knots , '' 100 knots faster than Adm. Crow says the Airbus was flying , and `` well under 1 , 000 feet . . . ./.
nsubj(suggests-2, This-1)
root(ROOT-0, suggests-2)
det(response-5, a-3)
amod(response-5, panicky-4)
dobj(suggests-2, response-5)
case(Vincennes-8, from-6)
det(Vincennes-8, the-7)
nmod:from(response-5, Vincennes-8)
punct(response-5, ,-9)
advmod(said-24, particularly-10)
mark(said-24, since-11)
det(specialist-15, a-12)
compound(specialist-15, Pentagon-13)
compound(specialist-15, air-combat-14)
nsubj(said-24, specialist-15)
acl(specialist-15, quoted-16)
case(Kaplan-19, by-17)
compound(Kaplan-19, Mr.-18)
nmod:by(quoted-16, Kaplan-19)
case(Globe-23, in-20)
det(Globe-23, the-21)
compound(Globe-23, Boston-22)
nmod:in(quoted-16, Globe-23)
acl(response-5, said-24)
mark(traveling-32, that-25)
det(F-14-28, an-26)
amod(F-14-28, attacking-27)
nsubj(traveling-32, F-14-28)
advmod(traveling-32, probably-29)
aux(traveling-32, would-30)
aux(traveling-32, be-31)
ccomp(said-24, traveling-32)
punct(traveling-32, ``-33)
case(knots-40, at-34)
case(least-36, at-35)
nmod:npmod(580-39, least-36)
compound(580-39, 550-37)
dep(580-39, to-38)
nummod(knots-40, 580-39)
nmod:at(traveling-32, knots-40)
punct(traveling-32, ,-41)
punct(traveling-32, ''-42)
nummod(knots-44, 100-43)
nmod:npmod(faster-45, knots-44)
advmod(traveling-32, faster-45)
mark(says-49, than-46)
compound(Crow-48, Adm.-47)
nsubj(says-49, Crow-48)
advcl(faster-45, says-49)
det(Airbus-51, the-50)
nsubj(flying-53, Airbus-51)
aux(flying-53, was-52)
ccomp(says-49, flying-53)
punct(traveling-32, ,-54)
cc(traveling-32, and-55)
punct(traveling-32, ``-56)
advmod(1-59, well-57)
case(1-59, under-58)
nmod:under(traveling-32, 1-59)
punct(1-59, ,-60)
nummod(feet-62, 000-61)
appos(1-59, feet-62)
punct(suggests-2, ...-63)
punct(suggests-2, /-64)
punct(suggests-2, .-65)
Return str :: attack#f-14

attack :: But Iran 's positions , overrun in last Saturday 's attack on Majnoon , were just a few thin lines of hillocks ; the fortifications of an army that expects to attack rather than defend ./.
cc(lines-20, But-1)
nmod:poss(positions-4, Iran-2)
case(Iran-2, 's-3)
nsubj(lines-20, positions-4)
punct(positions-4, ,-5)
appos(positions-4, overrun-6)
case(attack-11, in-7)
amod(Saturday-9, last-8)
nmod:poss(attack-11, Saturday-9)
case(Saturday-9, 's-10)
nmod:in(overrun-6, attack-11)
case(Majnoon-13, on-12)
nmod:on(attack-11, Majnoon-13)
punct(positions-4, ,-14)
cop(lines-20, were-15)
advmod(lines-20, just-16)
det(lines-20, a-17)
amod(lines-20, few-18)
amod(lines-20, thin-19)
root(ROOT-0, lines-20)
case(hillocks-22, of-21)
nmod:of(lines-20, hillocks-22)
punct(lines-20, ;-23)
det(fortifications-25, the-24)
dep(lines-20, fortifications-25)
case(army-28, of-26)
det(army-28, an-27)
nmod:of(fortifications-25, army-28)
nsubj(expects-30, army-28)
nsubj:xsubj(attack-32, army-28)
ref(army-28, that-29)
acl:relcl(army-28, expects-30)
mark(attack-32, to-31)
xcomp(expects-30, attack-32)
cc(attack-32, rather-33)
mwe(rather-33, than-34)
xcomp(expects-30, defend-35)
conj:negcc(attack-32, defend-35)
punct(lines-20, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#army

attack :: On Friday , Commander Abdul Haq 's troops attacked Kabul Airport with new Sacher incendiary rockets ./.
case(Friday-2, On-1)
nmod:on(attacked-9, Friday-2)
punct(attacked-9, ,-3)
compound(Haq-6, Commander-4)
compound(Haq-6, Abdul-5)
nmod:poss(troops-8, Haq-6)
case(Haq-6, 's-7)
nsubj(attacked-9, troops-8)
root(ROOT-0, attacked-9)
compound(Airport-11, Kabul-10)
dobj(attacked-9, Airport-11)
case(rockets-16, with-12)
amod(rockets-16, new-13)
compound(rockets-16, Sacher-14)
amod(rockets-16, incendiary-15)
nmod:with(attacked-9, rockets-16)
punct(attacked-9, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#airport

attack :: The best of show in painting , Oleg Stavrowsky 's 40-inch by 72-inch oil of a stagecoach being attacked by bandits , went for $ 14 , 000 ./.
det(best-2, The-1)
ccomp(went-23, best-2)
case(show-4, of-3)
nmod:of(best-2, show-4)
case(painting-6, in-5)
nmod:in(show-4, painting-6)
punct(went-23, ,-7)
compound(Stavrowsky-9, Oleg-8)
nmod:poss(40-inch-11, Stavrowsky-9)
case(Stavrowsky-9, 's-10)
nsubj(went-23, 40-inch-11)
case(oil-14, by-12)
amod(oil-14, 72-inch-13)
nmod:by(40-inch-11, oil-14)
case(stagecoach-17, of-15)
det(stagecoach-17, a-16)
nmod:of(oil-14, stagecoach-17)
auxpass(attacked-19, being-18)
acl(stagecoach-17, attacked-19)
case(bandits-21, by-20)
nmod:agent(attacked-19, bandits-21)
punct(went-23, ,-22)
root(ROOT-0, went-23)
case(14-26, for-24)
dep(14-26, $-25)
nmod:for(went-23, 14-26)
punct(14-26, ,-27)
appos(14-26, 000-28)
punct(went-23, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#being

attack :: Preassembling attacking teams on a number of single bases , so that the loss of no one base could mess things up too badly , would help , although it would be a logistical nightmare ./.
csubj(help-27, Preassembling-1)
xcomp(Preassembling-1, attacking-2)
dobj(attacking-2, teams-3)
case(number-6, on-4)
det(number-6, a-5)
nmod:on(attacking-2, number-6)
case(bases-9, of-7)
amod(bases-9, single-8)
nmod:of(number-6, bases-9)
punct(Preassembling-1, ,-10)
mark(mess-20, so-11)
mwe(so-11, that-12)
det(loss-14, the-13)
nsubj(mess-20, loss-14)
case(base-18, of-15)
neg(base-18, no-16)
nummod(base-18, one-17)
nmod:of(loss-14, base-18)
aux(mess-20, could-19)
advcl(Preassembling-1, mess-20)
dobj(mess-20, things-21)
compound:prt(mess-20, up-22)
advmod(badly-24, too-23)
advmod(mess-20, badly-24)
punct(Preassembling-1, ,-25)
aux(help-27, would-26)
root(ROOT-0, help-27)
punct(help-27, ,-28)
mark(nightmare-35, although-29)
nsubj(nightmare-35, it-30)
aux(nightmare-35, would-31)
cop(nightmare-35, be-32)
det(nightmare-35, a-33)
amod(nightmare-35, logistical-34)
advcl(help-27, nightmare-35)
punct(help-27, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: attack#teams

besiege :: `` I 'd heard about Powelson from another classicist at the University of Maryland , and then Powelson began to besiege me with letters asking for an invitation , '' Mr. Ambrose says ./.
punct(says-33, ``-1)
nsubj(heard-4, I-2)
aux(heard-4, 'd-3)
ccomp(says-33, heard-4)
case(Powelson-6, about-5)
nmod:about(heard-4, Powelson-6)
case(classicist-9, from-7)
det(classicist-9, another-8)
nmod:from(heard-4, classicist-9)
case(University-12, at-10)
det(University-12, the-11)
nmod:at(classicist-9, University-12)
case(Maryland-14, of-13)
nmod:of(University-12, Maryland-14)
punct(heard-4, ,-15)
cc(heard-4, and-16)
advmod(began-19, then-17)
nsubj(began-19, Powelson-18)
nsubj:xsubj(besiege-21, Powelson-18)
conj:and(heard-4, began-19)
ccomp(says-33, began-19)
mark(besiege-21, to-20)
xcomp(began-19, besiege-21)
dobj(besiege-21, me-22)
case(letters-24, with-23)
nmod:with(besiege-21, letters-24)
acl(letters-24, asking-25)
case(invitation-28, for-26)
det(invitation-28, an-27)
nmod:for(asking-25, invitation-28)
punct(says-33, ,-29)
punct(says-33, ''-30)
compound(Ambrose-32, Mr.-31)
nsubj(says-33, Ambrose-32)
root(ROOT-0, says-33)
punct(says-33, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#me

besiege :: NTN Toyo Bearing Co . , a Japanese firm with plants in the U.S . , is being besieged by potential buyers and has lead times of seven to 13 months ./.
compound(Toyo-2, NTN-1)
root(ROOT-0, Toyo-2)
compound(Co-4, Bearing-3)
dep(Toyo-2, Co-4)
punct(Toyo-2, .-5)
root(ROOT-0, ,-1)
det(firm-4, a-2)
amod(firm-4, Japanese-3)
root(,-1, firm-4)
case(plants-6, with-5)
nmod:with(firm-4, plants-6)
case(U.S-9, in-7)
det(U.S-9, the-8)
nmod:in(plants-6, U.S-9)
punct(firm-4, .-10)
punct(besieged-4, ,-1)
aux(besieged-4, is-2)
auxpass(besieged-4, being-3)
root(ROOT-0, besieged-4)
case(buyers-7, by-5)
amod(buyers-7, potential-6)
nmod:agent(besieged-4, buyers-7)
cc(besieged-4, and-8)
aux(lead-10, has-9)
conj:and(besieged-4, lead-10)
nmod:tmod(lead-10, times-11)
case(months-16, of-12)
compound(13-15, seven-13)
dep(13-15, to-14)
nummod(months-16, 13-15)
nmod:of(times-11, months-16)
punct(besieged-4, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#being

besiege :: The marauding huns of the takeover game are besieging ever-larger corporate kingdoms ./.
det(huns-3, The-1)
amod(huns-3, marauding-2)
nsubj(besieging-9, huns-3)
case(game-7, of-4)
det(game-7, the-5)
compound(game-7, takeover-6)
nmod:of(huns-3, game-7)
aux(besieging-9, are-8)
root(ROOT-0, besieging-9)
amod(kingdoms-12, ever-larger-10)
amod(kingdoms-12, corporate-11)
dobj(besieging-9, kingdoms-12)
punct(besieging-9, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#kingdoms

besiege :: For their part , though , Chicago aldermen have been too busy functioning as art critics to besiege the statehouse in Springfield on behalf of the team , and state legislators have shown more inclination to clown than to move quickly or positively ./.
case(part-3, For-1)
nmod:poss(part-3, their-2)
nmod:for(busy-12, part-3)
punct(busy-12, ,-4)
advmod(busy-12, though-5)
punct(busy-12, ,-6)
compound(aldermen-8, Chicago-7)
nsubj(busy-12, aldermen-8)
aux(busy-12, have-9)
cop(busy-12, been-10)
advmod(busy-12, too-11)
root(ROOT-0, busy-12)
xcomp(busy-12, functioning-13)
case(critics-16, as-14)
compound(critics-16, art-15)
nmod:as(functioning-13, critics-16)
mark(besiege-18, to-17)
xcomp(functioning-13, besiege-18)
det(statehouse-20, the-19)
dobj(besiege-18, statehouse-20)
case(Springfield-22, in-21)
nmod:in(statehouse-20, Springfield-22)
case(team-27, on-23)
mwe(on-23, behalf-24)
mwe(on-23, of-25)
det(team-27, the-26)
nmod:on_behalf_of(besiege-18, team-27)
punct(busy-12, ,-28)
cc(busy-12, and-29)
compound(legislators-31, state-30)
nsubj(shown-33, legislators-31)
aux(shown-33, have-32)
conj:and(busy-12, shown-33)
amod(inclination-35, more-34)
dobj(shown-33, inclination-35)
case(clown-37, to-36)
nmod:to(inclination-35, clown-37)
mark(move-40, than-38)
mark(move-40, to-39)
acl(inclination-35, move-40)
advmod(move-40, quickly-41)
cc(quickly-41, or-42)
advmod(move-40, positively-43)
conj:or(quickly-41, positively-43)
punct(busy-12, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#statehouse

besiege :: At Russell Field here he is besieged for autographs and his ears are bent relentlessly by people , mostly older ones , who want to share baseball memories ./.
case(Field-3, At-1)
compound(Field-3, Russell-2)
nmod:at(besieged-7, Field-3)
advmod(Field-3, here-4)
nsubjpass(besieged-7, he-5)
auxpass(besieged-7, is-6)
csubj(bent-14, besieged-7)
case(autographs-9, for-8)
nmod:for(besieged-7, autographs-9)
cc(autographs-9, and-10)
nmod:poss(ears-12, his-11)
nmod:for(besieged-7, ears-12)
conj:and(autographs-9, ears-12)
cop(bent-14, are-13)
root(ROOT-0, bent-14)
advmod(bent-14, relentlessly-15)
case(people-17, by-16)
nmod:by(bent-14, people-17)
punct(bent-14, ,-18)
advmod(older-20, mostly-19)
amod(ones-21, older-20)
appos(bent-14, ones-21)
nsubj(want-24, ones-21)
nsubj:xsubj(share-26, ones-21)
punct(ones-21, ,-22)
ref(ones-21, who-23)
acl:relcl(ones-21, want-24)
mark(share-26, to-25)
xcomp(want-24, share-26)
compound(memories-28, baseball-27)
dobj(share-26, memories-28)
punct(bent-14, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#he

besiege :: People split their tickets from the presidential line to the House line because they know who the incumbent is , having been besieged by mail from the House member 's office and ads from his campaign and having been helped by his constituent case workers ./.
nsubj(split-2, People-1)
root(ROOT-0, split-2)
nmod:poss(tickets-4, their-3)
dobj(split-2, tickets-4)
case(line-8, from-5)
det(line-8, the-6)
amod(line-8, presidential-7)
nmod:from(split-2, line-8)
case(line-12, to-9)
det(line-12, the-10)
compound(line-12, House-11)
nmod:to(split-2, line-12)
mark(know-15, because-13)
nsubj(know-15, they-14)
advcl(split-2, know-15)
dobj(is-19, who-16)
det(incumbent-18, the-17)
nsubj(is-19, incumbent-18)
ccomp(know-15, is-19)
punct(split-2, ,-20)
aux(besieged-23, having-21)
auxpass(besieged-23, been-22)
dep(split-2, besieged-23)
case(mail-25, by-24)
nmod:agent(besieged-23, mail-25)
case(office-31, from-26)
det(member-29, the-27)
compound(member-29, House-28)
nmod:poss(office-31, member-29)
case(member-29, 's-30)
nmod:from(besieged-23, office-31)
cc(besieged-23, and-32)
dep(split-2, ads-33)
conj:and(besieged-23, ads-33)
case(campaign-36, from-34)
nmod:poss(campaign-36, his-35)
nmod:from(ads-33, campaign-36)
cc(besieged-23, and-37)
aux(helped-40, having-38)
auxpass(helped-40, been-39)
dep(split-2, helped-40)
conj:and(besieged-23, helped-40)
case(workers-45, by-41)
nmod:poss(workers-45, his-42)
amod(workers-45, constituent-43)
compound(workers-45, case-44)
nmod:agent(helped-40, workers-45)
punct(split-2, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#been

besiege :: Budgetary gridlock , a possible financial crisis , and a presidency besieged almost immediately by pressing domestic and international economic problems ./.
amod(gridlock-2, Budgetary-1)
nsubj(besieged-12, gridlock-2)
punct(gridlock-2, ,-3)
det(crisis-7, a-4)
amod(crisis-7, possible-5)
amod(crisis-7, financial-6)
appos(gridlock-2, crisis-7)
punct(gridlock-2, ,-8)
cc(gridlock-2, and-9)
det(presidency-11, a-10)
conj:and(gridlock-2, presidency-11)
nsubj(besieged-12, presidency-11)
root(ROOT-0, besieged-12)
advmod(immediately-14, almost-13)
advmod(besieged-12, immediately-14)
mark(pressing-16, by-15)
advcl(besieged-12, pressing-16)
amod(problems-21, domestic-17)
cc(domestic-17, and-18)
conj:and(domestic-17, international-19)
amod(problems-21, international-19)
amod(problems-21, economic-20)
dobj(pressing-16, problems-21)
punct(besieged-12, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#gridlock

besiege :: Public judges could appear , in the public imagination , as nothing more than besieged bureaucrats ./.
amod(judges-2, Public-1)
nsubj(appear-4, judges-2)
aux(appear-4, could-3)
root(ROOT-0, appear-4)
punct(appear-4, ,-5)
case(imagination-9, in-6)
det(imagination-9, the-7)
amod(imagination-9, public-8)
nmod:in(appear-4, imagination-9)
punct(appear-4, ,-10)
case(nothing-12, as-11)
nmod:as(appear-4, nothing-12)
advmod(besieged-15, more-13)
case(more-13, than-14)
amod(bureaucrats-16, besieged-15)
dep(nothing-12, bureaucrats-16)
punct(appear-4, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#bureaucrats

besiege :: `` USA Today , '' in only its fifth week on the air , has been besieged by lackluster ratings , savage reviews , rumors -- fed by competitors -- that the show will be canceled , and a spate of new rival programs aimed at replacing it ./.
punct(besieged-17, ``-1)
compound(Today-3, USA-2)
nsubjpass(besieged-17, Today-3)
punct(besieged-17, ,-4)
punct(besieged-17, ''-5)
case(week-10, in-6)
advmod(week-10, only-7)
nmod:poss(week-10, its-8)
amod(week-10, fifth-9)
nmod:in(besieged-17, week-10)
case(air-13, on-11)
det(air-13, the-12)
nmod:on(week-10, air-13)
punct(besieged-17, ,-14)
aux(besieged-17, has-15)
auxpass(besieged-17, been-16)
root(ROOT-0, besieged-17)
case(ratings-20, by-18)
amod(ratings-20, lackluster-19)
nmod:agent(besieged-17, ratings-20)
punct(ratings-20, ,-21)
amod(reviews-23, savage-22)
conj(ratings-20, reviews-23)
punct(ratings-20, ,-24)
appos(ratings-20, rumors-25)
punct(ratings-20, ---26)
dep(ratings-20, fed-27)
case(competitors-29, by-28)
nmod:by(fed-27, competitors-29)
punct(ratings-20, ---30)
mark(canceled-36, that-31)
det(show-33, the-32)
nsubjpass(canceled-36, show-33)
aux(canceled-36, will-34)
auxpass(canceled-36, be-35)
dep(ratings-20, canceled-36)
punct(canceled-36, ,-37)
cc(canceled-36, and-38)
det(spate-40, a-39)
dep(ratings-20, spate-40)
conj:and(canceled-36, spate-40)
case(programs-44, of-41)
amod(programs-44, new-42)
amod(programs-44, rival-43)
nmod:of(spate-40, programs-44)
acl(programs-44, aimed-45)
mark(replacing-47, at-46)
advcl(aimed-45, replacing-47)
dobj(replacing-47, it-48)
punct(besieged-17, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#today

besiege :: In 1347 , Mongols besieging the Black Sea port of Caffa began to sicken and die from the plague ./.
case(1347-2, In-1)
nmod:in(began-12, 1347-2)
punct(began-12, ,-3)
nsubj(began-12, Mongols-4)
nsubj:xsubj(sicken-14, Mongols-4)
acl(Mongols-4, besieging-5)
det(port-9, the-6)
amod(port-9, Black-7)
compound(port-9, Sea-8)
dobj(besieging-5, port-9)
case(Caffa-11, of-10)
nmod:of(port-9, Caffa-11)
root(ROOT-0, began-12)
mark(sicken-14, to-13)
xcomp(began-12, sicken-14)
cc(sicken-14, and-15)
xcomp(began-12, die-16)
conj:and(sicken-14, die-16)
case(plague-19, from-17)
det(plague-19, the-18)
nmod:from(sicken-14, plague-19)
punct(began-12, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#caffa

besiege :: The park has been besieged for nearly three months by dry weather and fires that have charred more than half its 2.2 million acres ./.
det(park-2, The-1)
nsubjpass(besieged-5, park-2)
aux(besieged-5, has-3)
auxpass(besieged-5, been-4)
root(ROOT-0, besieged-5)
case(months-9, for-6)
advmod(three-8, nearly-7)
nummod(months-9, three-8)
nmod:for(besieged-5, months-9)
case(weather-12, by-10)
amod(weather-12, dry-11)
nmod:agent(besieged-5, weather-12)
nsubj(charred-17, weather-12)
cc(weather-12, and-13)
nmod:agent(besieged-5, fires-14)
conj:and(weather-12, fires-14)
nsubj(charred-17, fires-14)
ref(weather-12, that-15)
aux(charred-17, have-16)
acl:relcl(weather-12, charred-17)
advmod(half-20, more-18)
mwe(more-18, than-19)
nummod(acres-24, half-20)
nmod:poss(acres-24, its-21)
compound(million-23, 2.2-22)
nummod(acres-24, million-23)
dobj(charred-17, acres-24)
punct(besieged-5, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#park

besiege :: Though besieged by friends who `` want me to pick them a winner , '' he does n't bet often ./.
mark(besieged-2, Though-1)
advcl(bet-19, besieged-2)
case(friends-4, by-3)
nmod:by(besieged-2, friends-4)
nsubj(want-7, friends-4)
ref(friends-4, who-5)
punct(want-7, ``-6)
acl:relcl(friends-4, want-7)
dobj(want-7, me-8)
nsubj:xsubj(pick-10, me-8)
mark(pick-10, to-9)
xcomp(want-7, pick-10)
iobj(pick-10, them-11)
det(winner-13, a-12)
dobj(pick-10, winner-13)
punct(bet-19, ,-14)
punct(bet-19, ''-15)
nsubj(bet-19, he-16)
aux(bet-19, does-17)
neg(bet-19, n't-18)
root(ROOT-0, bet-19)
advmod(bet-19, often-20)
punct(bet-19, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#friends

besiege :: Ever since , Banner has been besieged by hundreds of thrill-seeking callers ./.
advmod(besieged-7, Ever-1)
mark(besieged-7, since-2)
punct(besieged-7, ,-3)
nsubjpass(besieged-7, Banner-4)
aux(besieged-7, has-5)
auxpass(besieged-7, been-6)
root(ROOT-0, besieged-7)
case(hundreds-9, by-8)
nmod:agent(besieged-7, hundreds-9)
case(callers-12, of-10)
amod(callers-12, thrill-seeking-11)
nmod:of(hundreds-9, callers-12)
punct(besieged-7, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#banner

besiege :: When radicals besieged his hotel while he was visiting Seoul last week , he promised them he would make yet another effort to play up to North Korea -- by renewing the offer to let the North host several Olympic events ./.
advmod(besieged-3, When-1)
nsubj(besieged-3, radicals-2)
advcl(promised-15, besieged-3)
nmod:poss(hotel-5, his-4)
dobj(besieged-3, hotel-5)
mark(visiting-9, while-6)
nsubj(visiting-9, he-7)
aux(visiting-9, was-8)
advcl(besieged-3, visiting-9)
dobj(visiting-9, Seoul-10)
amod(week-12, last-11)
nmod:tmod(visiting-9, week-12)
punct(promised-15, ,-13)
nsubj(promised-15, he-14)
root(ROOT-0, promised-15)
dobj(promised-15, them-16)
nsubj(make-19, he-17)
aux(make-19, would-18)
ccomp(promised-15, make-19)
advmod(effort-22, yet-20)
det(effort-22, another-21)
dobj(make-19, effort-22)
mark(play-24, to-23)
acl(effort-22, play-24)
compound:prt(play-24, up-25)
case(Korea-28, to-26)
compound(Korea-28, North-27)
nmod:to(play-24, Korea-28)
punct(effort-22, ---29)
mark(renewing-31, by-30)
acl(effort-22, renewing-31)
det(offer-33, the-32)
dobj(renewing-31, offer-33)
mark(let-35, to-34)
acl(offer-33, let-35)
det(host-38, the-36)
amod(host-38, North-37)
dobj(let-35, host-38)
amod(events-41, several-39)
amod(events-41, Olympic-40)
dep(host-38, events-41)
punct(promised-15, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#hotel

besiege :: Thousands of Chinese soccer fans battled police and besieged a rival team 's hotel during a riot Monday night ./.
nsubj(battled-6, Thousands-1)
nsubj(besieged-9, Thousands-1)
case(fans-5, of-2)
amod(fans-5, Chinese-3)
compound(fans-5, soccer-4)
nmod:of(Thousands-1, fans-5)
root(ROOT-0, battled-6)
dobj(battled-6, police-7)
cc(battled-6, and-8)
conj:and(battled-6, besieged-9)
det(team-12, a-10)
amod(team-12, rival-11)
nmod:poss(hotel-14, team-12)
case(team-12, 's-13)
dobj(besieged-9, hotel-14)
case(riot-17, during-15)
det(riot-17, a-16)
nmod:during(besieged-9, riot-17)
compound(night-19, Monday-18)
nmod:tmod(besieged-9, night-19)
punct(battled-6, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#hotel

besiege :: A Congress besieged by special interests passed Smoot-Hawley , and a Republican President too sensitive to business interests signed it ./.
det(Congress-2, A-1)
nsubj(besieged-3, Congress-2)
nsubj(passed-7, Congress-2)
root(ROOT-0, besieged-3)
case(interests-6, by-4)
amod(interests-6, special-5)
nmod:by(besieged-3, interests-6)
conj:and(besieged-3, passed-7)
xcomp(passed-7, Smoot-Hawley-8)
punct(besieged-3, ,-9)
cc(besieged-3, and-10)
det(President-13, a-11)
amod(President-13, Republican-12)
nsubj(signed-19, President-13)
advmod(sensitive-15, too-14)
amod(President-13, sensitive-15)
case(interests-18, to-16)
compound(interests-18, business-17)
nmod:to(sensitive-15, interests-18)
conj:and(besieged-3, signed-19)
dobj(signed-19, it-20)
punct(besieged-3, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#congress

besiege :: The U.S. armed forces are being besieged these days -- not by foreign military aggressors -- but by aggressive consumer-product marketers ./.
det(forces-4, The-1)
compound(forces-4, U.S.-2)
amod(forces-4, armed-3)
nsubjpass(besieged-7, forces-4)
nsubjpass(besieged-7', forces-4)
aux(besieged-7, are-5)
auxpass(besieged-7, being-6)
root(ROOT-0, besieged-7)
conj:but(besieged-7, besieged-7')
det(days-9, these-8)
nmod:tmod(besieged-7, days-9)
punct(besieged-7, ---10)
neg(aggressors-15, not-11)
case(aggressors-15, by-12)
amod(aggressors-15, foreign-13)
amod(aggressors-15, military-14)
nmod:agent(besieged-7, aggressors-15)
punct(aggressors-15, ---16)
cc(besieged-7, but-17)
case(marketers-21, by-18)
amod(marketers-21, aggressive-19)
compound(marketers-21, consumer-product-20)
nmod:by(besieged-7', marketers-21)
punct(besieged-7, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#forces

besiege :: The picture painted in the annual report shows one of the nation 's largest banking corporations besieged by problems that it seems unable to control ./.
det(picture-2, The-1)
nsubj(shows-8, picture-2)
acl(picture-2, painted-3)
case(report-7, in-4)
det(report-7, the-5)
amod(report-7, annual-6)
nmod:in(painted-3, report-7)
root(ROOT-0, shows-8)
dobj(shows-8, one-9)
case(corporations-16, of-10)
det(nation-12, the-11)
nmod:poss(corporations-16, nation-12)
case(nation-12, 's-13)
amod(corporations-16, largest-14)
compound(corporations-16, banking-15)
nmod:of(one-9, corporations-16)
acl(corporations-16, besieged-17)
case(problems-19, by-18)
nmod:by(besieged-17, problems-19)
mark(seems-22, that-20)
nsubj(seems-22, it-21)
ccomp(problems-19, seems-22)
xcomp(seems-22, unable-23)
mark(control-25, to-24)
xcomp(unable-23, control-25)
punct(shows-8, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#problems

besiege :: First RepublicBank , besieged with rumors about a possible failure or takeover , said it would n't have any comment on the FDIC 's activity ./.
amod(RepublicBank-2, First-1)
nsubj(said-14, RepublicBank-2)
punct(RepublicBank-2, ,-3)
acl(RepublicBank-2, besieged-4)
case(rumors-6, with-5)
nmod:with(besieged-4, rumors-6)
case(failure-10, about-7)
det(failure-10, a-8)
amod(failure-10, possible-9)
nmod:about(rumors-6, failure-10)
cc(failure-10, or-11)
nmod:about(rumors-6, takeover-12)
conj:or(failure-10, takeover-12)
punct(RepublicBank-2, ,-13)
root(ROOT-0, said-14)
nsubj(have-18, it-15)
aux(have-18, would-16)
neg(have-18, n't-17)
ccomp(said-14, have-18)
det(comment-20, any-19)
dobj(have-18, comment-20)
case(activity-25, on-21)
det(FDIC-23, the-22)
nmod:poss(activity-25, FDIC-23)
case(FDIC-23, 's-24)
nmod:on(comment-20, activity-25)
punct(said-14, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#rumors

besiege :: LAW SCHOOLS are besieged by applicants , after a five-year slump ./.
compound(SCHOOLS-2, LAW-1)
nsubjpass(besieged-4, SCHOOLS-2)
auxpass(besieged-4, are-3)
root(ROOT-0, besieged-4)
case(applicants-6, by-5)
nmod:agent(besieged-4, applicants-6)
punct(besieged-4, ,-7)
case(slump-11, after-8)
det(slump-11, a-9)
amod(slump-11, five-year-10)
nmod:after(besieged-4, slump-11)
punct(besieged-4, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#schools

besiege :: Democratic candidates are plagued by confusion over the lessons of Vietnam , reluctant to take on new military obligations , troubled by the buildup in American military power in the Reagan years and besieged here in Iowa by interest groups assailing even the current level of U.S. engagements ./.
amod(candidates-2, Democratic-1)
nsubjpass(plagued-4, candidates-2)
auxpass(plagued-4, are-3)
root(ROOT-0, plagued-4)
case(confusion-6, by-5)
nmod:agent(plagued-4, confusion-6)
case(lessons-9, over-7)
det(lessons-9, the-8)
nmod:over(confusion-6, lessons-9)
case(Vietnam-11, of-10)
nmod:of(lessons-9, Vietnam-11)
punct(plagued-4, ,-12)
xcomp(plagued-4, reluctant-13)
mark(take-15, to-14)
xcomp(reluctant-13, take-15)
compound:prt(take-15, on-16)
amod(obligations-19, new-17)
amod(obligations-19, military-18)
dobj(take-15, obligations-19)
punct(plagued-4, ,-20)
dep(plagued-4, troubled-21)
case(buildup-24, by-22)
det(buildup-24, the-23)
nmod:by(troubled-21, buildup-24)
case(power-28, in-25)
amod(power-28, American-26)
amod(power-28, military-27)
nmod:in(buildup-24, power-28)
case(years-32, in-29)
det(years-32, the-30)
compound(years-32, Reagan-31)
nmod:in(buildup-24, years-32)
cc(troubled-21, and-33)
dep(plagued-4, besieged-34)
conj:and(troubled-21, besieged-34)
advmod(besieged-34, here-35)
case(Iowa-37, in-36)
nmod:in(besieged-34, Iowa-37)
case(groups-40, by-38)
compound(groups-40, interest-39)
nmod:by(besieged-34, groups-40)
acl(groups-40, assailing-41)
advmod(level-45, even-42)
det(level-45, the-43)
amod(level-45, current-44)
dobj(assailing-41, level-45)
case(engagements-48, of-46)
compound(engagements-48, U.S.-47)
nmod:of(level-45, engagements-48)
punct(plagued-4, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: besiege#iowa

cool :: A surprisingly strong October employment report , implying that the economy is n't cooling off as fast as many investors had hoped , could force a sharp retreat in stock prices today , he said ./.
det(report-6, A-1)
advmod(strong-3, surprisingly-2)
amod(report-6, strong-3)
compound(report-6, October-4)
compound(report-6, employment-5)
nsubj(force-25, report-6)
punct(report-6, ,-7)
acl(report-6, implying-8)
mark(cooling-14, that-9)
det(economy-11, the-10)
nsubj(cooling-14, economy-11)
aux(cooling-14, is-12)
neg(cooling-14, n't-13)
ccomp(implying-8, cooling-14)
compound:prt(cooling-14, off-15)
advmod(fast-17, as-16)
advmod(cooling-14, fast-17)
mark(hoped-22, as-18)
amod(investors-20, many-19)
nsubj(hoped-22, investors-20)
aux(hoped-22, had-21)
advcl(fast-17, hoped-22)
punct(report-6, ,-23)
aux(force-25, could-24)
ccomp(said-35, force-25)
det(retreat-28, a-26)
amod(retreat-28, sharp-27)
dobj(force-25, retreat-28)
case(prices-31, in-29)
compound(prices-31, stock-30)
nmod:in(retreat-28, prices-31)
nmod:tmod(force-25, today-32)
punct(said-35, ,-33)
nsubj(said-35, he-34)
root(ROOT-0, said-35)
punct(said-35, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#economy

cool :: The last time China tried to cool its economy , in 1985 and 1986 , foreign exporters and investors suffered ./.
det(time-3, The-1)
amod(time-3, last-2)
nsubj(suffered-20, time-3)
nsubj(tried-5, China-4)
nsubj:xsubj(cool-7, China-4)
acl:relcl(time-3, tried-5)
mark(cool-7, to-6)
xcomp(tried-5, cool-7)
nmod:poss(economy-9, its-8)
dobj(cool-7, economy-9)
punct(suffered-20, ,-10)
case(1985-12, in-11)
nmod:in(suffered-20, 1985-12)
cc(1985-12, and-13)
conj:and(1985-12, 1986-14)
nmod:in(suffered-20, 1986-14)
punct(suffered-20, ,-15)
amod(exporters-17, foreign-16)
nsubj(suffered-20, exporters-17)
cc(exporters-17, and-18)
conj:and(exporters-17, investors-19)
nsubj(suffered-20, investors-19)
root(ROOT-0, suffered-20)
punct(suffered-20, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#economy

cool :: Company officials could n't be reached for elaboration , but Gary P. Smaby , who follows the industry for Needham & Co . , said he understood that cooling problems had developed that could delay delivery of the machine ./.
compound(officials-2, Company-1)
nsubjpass(reached-6, officials-2)
aux(reached-6, could-3)
neg(reached-6, n't-4)
auxpass(reached-6, be-5)
root(ROOT-0, reached-6)
case(elaboration-8, for-7)
nmod:for(reached-6, elaboration-8)
punct(reached-6, ,-9)
cc(reached-6, but-10)
compound(Smaby-13, Gary-11)
compound(Smaby-13, P.-12)
conj:but(reached-6, Smaby-13)
nsubj(follows-16, Smaby-13)
punct(Smaby-13, ,-14)
ref(Smaby-13, who-15)
acl:relcl(Smaby-13, follows-16)
det(industry-18, the-17)
dobj(follows-16, industry-18)
case(Needham-20, for-19)
nmod:for(follows-16, Needham-20)
cc(Needham-20, &-21)
nmod:for(follows-16, Co-22)
conj:&(Needham-20, Co-22)
punct(reached-6, .-23)
punct(said-2, ,-1)
root(ROOT-0, said-2)
nsubj(understood-4, he-3)
ccomp(said-2, understood-4)
mark(developed-9, that-5)
amod(problems-7, cooling-6)
nsubj(developed-9, problems-7)
aux(developed-9, had-8)
ccomp(understood-4, developed-9)
nsubj(delay-12, that-10)
aux(delay-12, could-11)
ccomp(developed-9, delay-12)
dobj(delay-12, delivery-13)
case(machine-16, of-14)
det(machine-16, the-15)
nmod:of(delivery-13, machine-16)
punct(said-2, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#problems

cool :: `` They do it to cool off the market , so to speak , because they need the copper and when they 're buying they find themselves chasing the market upward , '' he said ./.
punct(said-35, ``-1)
nsubj(do-3, They-2)
ccomp(said-35, do-3)
dobj(do-3, it-4)
nsubj:xsubj(cool-6, it-4)
mark(cool-6, to-5)
xcomp(do-3, cool-6)
compound:prt(cool-6, off-7)
det(market-9, the-8)
dobj(cool-6, market-9)
punct(cool-6, ,-10)
advmod(speak-13, so-11)
mark(speak-13, to-12)
advcl(cool-6, speak-13)
punct(cool-6, ,-14)
mark(need-17, because-15)
nsubj(need-17, they-16)
advcl(cool-6, need-17)
det(copper-19, the-18)
dobj(need-17, copper-19)
cc(need-17, and-20)
advmod(buying-24, when-21)
nsubj(buying-24, they-22)
aux(buying-24, 're-23)
advcl(cool-6, buying-24)
conj:and(need-17, buying-24)
nsubj(find-26, they-25)
ccomp(buying-24, find-26)
nsubj(chasing-28, themselves-27)
ccomp(find-26, chasing-28)
det(market-30, the-29)
dobj(chasing-28, market-30)
advmod(chasing-28, upward-31)
punct(said-35, ,-32)
punct(said-35, ''-33)
nsubj(said-35, he-34)
root(ROOT-0, said-35)
punct(said-35, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#market

cool :: Mr. Lawson insists the acceleration is but `` a blip '' and says recently imposed higher interest rates will cool things off without interrupting growth ./.
compound(Lawson-2, Mr.-1)
nsubj(insists-3, Lawson-2)
nsubj(imposed-15, Lawson-2)
root(ROOT-0, insists-3)
det(acceleration-5, the-4)
nsubj(blip-10, acceleration-5)
cop(blip-10, is-6)
cc(blip-10, but-7)
punct(blip-10, ``-8)
det(blip-10, a-9)
ccomp(insists-3, blip-10)
punct(blip-10, ''-11)
cc(insists-3, and-12)
aux(imposed-15, says-13)
advmod(imposed-15, recently-14)
conj:and(insists-3, imposed-15)
amod(rates-18, higher-16)
compound(rates-18, interest-17)
dobj(imposed-15, rates-18)
aux(cool-20, will-19)
ccomp(insists-3, cool-20)
dobj(cool-20, things-21)
compound:prt(cool-20, off-22)
mark(interrupting-24, without-23)
advcl(cool-20, interrupting-24)
dobj(interrupting-24, growth-25)
punct(insists-3, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#things

cool :: But after several months of talks with each other and with clients , their ardor has cooled considerably ./.
root(ROOT-0, But-1)
case(months-4, after-2)
amod(months-4, several-3)
nmod:after(But-1, months-4)
nmod:after(But-1, months-4')
conj:and(months-4, months-4')
case(talks-6, of-5)
nmod:of(months-4, talks-6)
case(other-9, with-7)
det(other-9, each-8)
nmod:with(talks-6, other-9)
cc(months-4, and-10)
case(clients-12, with-11)
nmod:with(months-4', clients-12)
punct(clients-12, ,-13)
nmod:poss(ardor-15, their-14)
nsubj(cooled-17, ardor-15)
aux(cooled-17, has-16)
acl:relcl(clients-12, cooled-17)
advmod(cooled-17, considerably-18)
punct(months-4, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#ardor

cool :: But at some point the market will cool , so Siemens figures it had better start selling to tomorrow 's customers today ./.
cc(cool-8, But-1)
case(point-4, at-2)
det(point-4, some-3)
nmod:at(cool-8, point-4)
det(market-6, the-5)
nsubj(cool-8, market-6)
aux(cool-8, will-7)
root(ROOT-0, cool-8)
punct(cool-8, ,-9)
advmod(cool-8, so-10)
nsubj(figures-12, Siemens-11)
parataxis(cool-8, figures-12)
nsubj(start-16, it-13)
aux(start-16, had-14)
advmod(start-16, better-15)
ccomp(figures-12, start-16)
xcomp(start-16, selling-17)
case(customers-21, to-18)
nmod:poss(customers-21, tomorrow-19)
case(tomorrow-19, 's-20)
nmod:to(selling-17, customers-21)
nmod:tmod(selling-17, today-22)
punct(cool-8, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#market

cool :: Mr. Feldt insisted that the need to cool the high-flying capital markets -- and placate his party 's union supporters at a sensitive juncture in the election campaign -- outweighed the Riksbank 's arguments ./.
compound(Feldt-2, Mr.-1)
nsubj(insisted-3, Feldt-2)
root(ROOT-0, insisted-3)
dobj(insisted-3, that-4)
det(need-6, the-5)
dep(that-4, need-6)
mark(cool-8, to-7)
acl(need-6, cool-8)
det(markets-12, the-9)
amod(markets-12, high-flying-10)
compound(markets-12, capital-11)
dobj(cool-8, markets-12)
punct(need-6, ---13)
cc(need-6, and-14)
dep(that-4, placate-15)
conj:and(need-6, placate-15)
nmod:poss(party-17, his-16)
nmod:poss(supporters-20, party-17)
case(party-17, 's-18)
compound(supporters-20, union-19)
dobj(placate-15, supporters-20)
case(juncture-24, at-21)
det(juncture-24, a-22)
amod(juncture-24, sensitive-23)
nmod:at(placate-15, juncture-24)
case(campaign-28, in-25)
det(campaign-28, the-26)
compound(campaign-28, election-27)
nmod:in(juncture-24, campaign-28)
punct(outweighed-30, ---29)
dep(need-6, outweighed-30)
det(Riksbank-32, the-31)
nmod:poss(arguments-34, Riksbank-32)
case(Riksbank-32, 's-33)
dobj(outweighed-30, arguments-34)
punct(insisted-3, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#markets

cool :: Some say interest rates may have to rise further to cool domestic demand , while others say the problem is more deep-rooted and requires greater investment by United Kingdom industry ./.
nsubj(say-2, Some-1)
root(ROOT-0, say-2)
compound(rates-4, interest-3)
nsubj(have-6, rates-4)
nsubj:xsubj(rise-8, rates-4)
aux(have-6, may-5)
ccomp(say-2, have-6)
mark(rise-8, to-7)
xcomp(have-6, rise-8)
advmod(rise-8, further-9)
mark(cool-11, to-10)
xcomp(rise-8, cool-11)
amod(demand-13, domestic-12)
dobj(cool-11, demand-13)
punct(have-6, ,-14)
mark(say-17, while-15)
nsubj(say-17, others-16)
advcl(have-6, say-17)
det(problem-19, the-18)
nsubj(deep-rooted-22, problem-19)
nsubj(requires-24, problem-19)
cop(deep-rooted-22, is-20)
advmod(deep-rooted-22, more-21)
ccomp(say-17, deep-rooted-22)
cc(deep-rooted-22, and-23)
ccomp(say-17, requires-24)
conj:and(deep-rooted-22, requires-24)
amod(investment-26, greater-25)
dobj(requires-24, investment-26)
case(industry-30, by-27)
compound(industry-30, United-28)
compound(industry-30, Kingdom-29)
nmod:by(investment-26, industry-30)
punct(say-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#demand

cool :: Since the middle of August , there have been some signs that the economy has begun to cool off ./.
case(middle-3, Since-1)
det(middle-3, the-2)
nmod:since(signs-11, middle-3)
case(August-5, of-4)
nmod:of(middle-3, August-5)
punct(signs-11, ,-6)
expl(signs-11, there-7)
aux(signs-11, have-8)
cop(signs-11, been-9)
det(signs-11, some-10)
root(ROOT-0, signs-11)
mark(begun-16, that-12)
det(economy-14, the-13)
nsubj(begun-16, economy-14)
nsubj:xsubj(cool-18, economy-14)
aux(begun-16, has-15)
ccomp(signs-11, begun-16)
mark(cool-18, to-17)
xcomp(begun-16, cool-18)
compound:prt(cool-18, off-19)
punct(signs-11, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#economy

cool :: But several analysts predict the Fed will push short-term rates slightly higher later this year in hopes of cooling the economy and restraining inflation pressures ./.
cc(predict-4, But-1)
amod(analysts-3, several-2)
nsubj(predict-4, analysts-3)
root(ROOT-0, predict-4)
det(Fed-6, the-5)
nsubj(push-8, Fed-6)
aux(push-8, will-7)
ccomp(predict-4, push-8)
amod(rates-10, short-term-9)
dobj(push-8, rates-10)
advmod(higher-12, slightly-11)
advmod(push-8, higher-12)
advmod(year-15, later-13)
det(year-15, this-14)
nmod:tmod(push-8, year-15)
case(hopes-17, in-16)
nmod:in(push-8, hopes-17)
mark(cooling-19, of-18)
acl(hopes-17, cooling-19)
det(economy-21, the-20)
dobj(cooling-19, economy-21)
cc(cooling-19, and-22)
acl(hopes-17, restraining-23)
conj:and(cooling-19, restraining-23)
compound(pressures-25, inflation-24)
dobj(restraining-23, pressures-25)
punct(predict-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#economy

cool :: He thinks equity investors are bothered that short-term interest rates have n't eased despite the evidence of a cooling economy ./.
nsubj(thinks-2, He-1)
root(ROOT-0, thinks-2)
compound(investors-4, equity-3)
nsubjpass(bothered-6, investors-4)
auxpass(bothered-6, are-5)
ccomp(thinks-2, bothered-6)
mark(eased-13, that-7)
amod(rates-10, short-term-8)
compound(rates-10, interest-9)
nsubj(eased-13, rates-10)
aux(eased-13, have-11)
neg(eased-13, n't-12)
ccomp(bothered-6, eased-13)
case(evidence-16, despite-14)
det(evidence-16, the-15)
nmod:despite(eased-13, evidence-16)
case(economy-20, of-17)
det(economy-20, a-18)
amod(economy-20, cooling-19)
nmod:of(evidence-16, economy-20)
punct(thinks-2, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#economy

cool :: The drought is expected to draw down agricultural stockpiles , which could help `` cool '' the third-quarter-GNP report , economists said ./.
det(drought-2, The-1)
nsubjpass(expected-4, drought-2)
nsubj:xsubj(draw-6, drought-2)
auxpass(expected-4, is-3)
ccomp(said-22, expected-4)
mark(draw-6, to-5)
xcomp(expected-4, draw-6)
compound:prt(draw-6, down-7)
amod(stockpiles-9, agricultural-8)
dobj(draw-6, stockpiles-9)
nsubj(help-13, stockpiles-9)
punct(stockpiles-9, ,-10)
ref(stockpiles-9, which-11)
aux(help-13, could-12)
acl:relcl(stockpiles-9, help-13)
punct(cool-15, ``-14)
xcomp(help-13, cool-15)
punct(cool-15, ''-16)
det(report-19, the-17)
amod(report-19, third-quarter-GNP-18)
dep(cool-15, report-19)
punct(said-22, ,-20)
nsubj(said-22, economists-21)
root(ROOT-0, said-22)
punct(said-22, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

cool :: Takeover speculative ardor cooled in Information Resources ./.
compound(ardor-3, Takeover-1)
amod(ardor-3, speculative-2)
nsubj(cooled-4, ardor-3)
root(ROOT-0, cooled-4)
case(Resources-7, in-5)
compound(Resources-7, Information-6)
nmod:in(cooled-4, Resources-7)
punct(cooled-4, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#ardor

cool :: The delay agreed to by the railroad and the United Transportation Union will give Congress a chance to take final action today on a bill reinstating a government-ordered cooling off period in the long-running labor dispute ./.
det(delay-2, The-1)
nsubj(agreed-3, delay-2)
root(ROOT-0, agreed-3)
case(railroad-7, to-4)
case(railroad-7, by-5)
det(railroad-7, the-6)
nmod:by(agreed-3, railroad-7)
cc(railroad-7, and-8)
det(Union-12, the-9)
compound(Union-12, United-10)
compound(Union-12, Transportation-11)
nsubj(give-14, Union-12)
aux(give-14, will-13)
nmod:by(agreed-3, give-14)
conj:and(railroad-7, give-14)
iobj(give-14, Congress-15)
det(chance-17, a-16)
dobj(give-14, chance-17)
mark(take-19, to-18)
acl(chance-17, take-19)
amod(action-21, final-20)
dobj(take-19, action-21)
nmod:tmod(take-19, today-22)
case(bill-25, on-23)
det(bill-25, a-24)
nmod:on(take-19, bill-25)
acl(bill-25, reinstating-26)
det(cooling-29, a-27)
amod(cooling-29, government-ordered-28)
dobj(reinstating-26, cooling-29)
case(period-31, off-30)
nmod:off(reinstating-26, period-31)
case(dispute-36, in-32)
det(dispute-36, the-33)
amod(dispute-36, long-running-34)
compound(dispute-36, labor-35)
nmod:in(period-31, dispute-36)
punct(agreed-3, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

cool :: Fed officials hope for signs soon that the economy is slowing , which would cool the need for further rate increases ./.
compound(officials-2, Fed-1)
nsubj(hope-3, officials-2)
root(ROOT-0, hope-3)
case(signs-5, for-4)
nmod:for(hope-3, signs-5)
advmod(hope-3, soon-6)
mark(slowing-11, that-7)
det(economy-9, the-8)
nsubj(slowing-11, economy-9)
aux(slowing-11, is-10)
ccomp(hope-3, slowing-11)
punct(slowing-11, ,-12)
nsubj(cool-15, which-13)
aux(cool-15, would-14)
ccomp(slowing-11, cool-15)
det(need-17, the-16)
dobj(cool-15, need-17)
case(increases-21, for-18)
amod(increases-21, further-19)
compound(increases-21, rate-20)
nmod:for(need-17, increases-21)
punct(hope-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#need

cool :: The suit alleged that Tamiami Gun Shop broke Florida gun laws by selling Mr. Katz the gun without the required 48-hour `` cooling off '' period ./.
det(suit-2, The-1)
nsubj(alleged-3, suit-2)
root(ROOT-0, alleged-3)
mark(broke-8, that-4)
compound(Shop-7, Tamiami-5)
compound(Shop-7, Gun-6)
nsubj(broke-8, Shop-7)
ccomp(alleged-3, broke-8)
compound(laws-11, Florida-9)
compound(laws-11, gun-10)
dobj(broke-8, laws-11)
mark(selling-13, by-12)
advcl(broke-8, selling-13)
compound(Katz-15, Mr.-14)
iobj(selling-13, Katz-15)
det(gun-17, the-16)
dobj(selling-13, gun-17)
nmod(selling-13, without-18)
dep(without-18, the-19)
acl(the-19, required-20)
xcomp(required-20, 48-hour-21)
punct(cooling-23, ``-22)
dep(48-hour-21, cooling-23)
compound:prt(cooling-23, off-24)
punct(cooling-23, ''-25)
dobj(cooling-23, period-26)
punct(alleged-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#period

cool :: Some U.S. officials believe that in time emotions will cool , and necessity once more will draw Iran toward normalizing relations with the U.S ./.
det(officials-3, Some-1)
compound(officials-3, U.S.-2)
nsubj(believe-4, officials-3)
root(ROOT-0, believe-4)
mark(cool-10, that-5)
case(time-7, in-6)
nmod:in(cool-10, time-7)
nsubj(cool-10, emotions-8)
aux(cool-10, will-9)
ccomp(believe-4, cool-10)
punct(cool-10, ,-11)
cc(cool-10, and-12)
ccomp(believe-4, necessity-13)
conj:and(cool-10, necessity-13)
advmod(draw-17, once-14)
advmod(draw-17, more-15)
aux(draw-17, will-16)
acl(necessity-13, draw-17)
dobj(draw-17, Iran-18)
mark(normalizing-20, toward-19)
advcl(draw-17, normalizing-20)
dobj(normalizing-20, relations-21)
case(U.S-24, with-22)
det(U.S-24, the-23)
nmod:with(normalizing-20, U.S-24)
punct(believe-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#emotions

cool :: The sell-off cooled inflation fears , but farm futures prices are now expected to be volatile ./.
det(sell-off-2, The-1)
nsubj(cooled-3, sell-off-2)
root(ROOT-0, cooled-3)
compound(fears-5, inflation-4)
dobj(cooled-3, fears-5)
punct(cooled-3, ,-6)
cc(cooled-3, but-7)
compound(prices-10, farm-8)
compound(prices-10, futures-9)
nsubjpass(expected-13, prices-10)
nsubj:xsubj(volatile-16, prices-10)
auxpass(expected-13, are-11)
advmod(expected-13, now-12)
conj:but(cooled-3, expected-13)
mark(volatile-16, to-14)
cop(volatile-16, be-15)
xcomp(expected-13, volatile-16)
punct(cooled-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#fears

cool :: If the story has cooled , it is because Speaker Wright and the Democratic caucus pulled the plug at the right moment ./.
mark(cooled-5, If-1)
det(story-3, the-2)
nsubj(cooled-5, story-3)
aux(cooled-5, has-4)
advcl(is-8, cooled-5)
punct(is-8, ,-6)
nsubj(is-8, it-7)
root(ROOT-0, is-8)
mark(pulled-16, because-9)
compound(Wright-11, Speaker-10)
nsubj(pulled-16, Wright-11)
cc(Wright-11, and-12)
det(caucus-15, the-13)
amod(caucus-15, Democratic-14)
conj:and(Wright-11, caucus-15)
nsubj(pulled-16, caucus-15)
advcl(is-8, pulled-16)
det(plug-18, the-17)
dobj(pulled-16, plug-18)
case(moment-22, at-19)
det(moment-22, the-20)
amod(moment-22, right-21)
nmod:at(pulled-16, moment-22)
punct(is-8, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#story

cool :: The Tokyo Stock Exchange has twice this year raised margin requirements in an effort to cool the Tokyo market 's sharp rally , but share prices have continued upward as the moves were widely viewed as , if anything , healthy and reassuring ./.
det(Exchange-4, The-1)
compound(Exchange-4, Tokyo-2)
compound(Exchange-4, Stock-3)
nsubj(has-5, Exchange-4)
root(ROOT-0, has-5)
advmod(year-8, twice-6)
det(year-8, this-7)
nmod:tmod(raised-9, year-8)
ccomp(has-5, raised-9)
compound(requirements-11, margin-10)
dobj(raised-9, requirements-11)
case(effort-14, in-12)
det(effort-14, an-13)
nmod:in(raised-9, effort-14)
mark(cool-16, to-15)
acl(effort-14, cool-16)
det(market-19, the-17)
compound(market-19, Tokyo-18)
nmod:poss(rally-22, market-19)
case(market-19, 's-20)
amod(rally-22, sharp-21)
dobj(cool-16, rally-22)
punct(raised-9, ,-23)
cc(raised-9, but-24)
compound(prices-26, share-25)
nsubj(continued-28, prices-26)
aux(continued-28, have-27)
ccomp(has-5, continued-28)
conj:but(raised-9, continued-28)
advmod(continued-28, upward-29)
mark(viewed-35, as-30)
det(moves-32, the-31)
nsubjpass(viewed-35, moves-32)
auxpass(viewed-35, were-33)
advmod(viewed-35, widely-34)
advcl(continued-28, viewed-35)
case(healthy-41, as-36)
punct(anything-39, ,-37)
mark(anything-39, if-38)
dep(healthy-41, anything-39)
punct(anything-39, ,-40)
advcl(viewed-35, healthy-41)
cc(healthy-41, and-42)
advcl(viewed-35, reassuring-43)
conj:and(healthy-41, reassuring-43)
punct(has-5, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#rally

cool :: Pakistan has served as a conduit for U.S. aid to Afghan rebels , but the settlement may cause its relations with Washington to cool ./.
nsubj(served-3, Pakistan-1)
aux(served-3, has-2)
root(ROOT-0, served-3)
case(conduit-6, as-4)
det(conduit-6, a-5)
nmod:as(served-3, conduit-6)
case(aid-9, for-7)
compound(aid-9, U.S.-8)
nmod:for(conduit-6, aid-9)
case(rebels-12, to-10)
amod(rebels-12, Afghan-11)
nmod:to(aid-9, rebels-12)
punct(served-3, ,-13)
cc(served-3, but-14)
det(settlement-16, the-15)
nsubj(cause-18, settlement-16)
aux(cause-18, may-17)
conj:but(served-3, cause-18)
nmod:poss(relations-20, its-19)
dobj(cause-18, relations-20)
nsubj:xsubj(cool-24, relations-20)
case(Washington-22, with-21)
nmod:with(relations-20, Washington-22)
mark(cool-24, to-23)
xcomp(cause-18, cool-24)
punct(served-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#relations

cool :: Tighter credit could help narrow the trade deficit by cooling consumer spending , but high interest rates have bleaker implications for other areas , such as housing ./.
amod(credit-2, Tighter-1)
nsubj(help-4, credit-2)
aux(help-4, could-3)
root(ROOT-0, help-4)
xcomp(help-4, narrow-5)
det(deficit-8, the-6)
compound(deficit-8, trade-7)
dobj(narrow-5, deficit-8)
mark(cooling-10, by-9)
advcl(narrow-5, cooling-10)
compound(spending-12, consumer-11)
dobj(cooling-10, spending-12)
punct(help-4, ,-13)
cc(help-4, but-14)
amod(rates-17, high-15)
compound(rates-17, interest-16)
nsubj(have-18, rates-17)
conj:but(help-4, have-18)
amod(implications-20, bleaker-19)
dobj(have-18, implications-20)
case(areas-23, for-21)
amod(areas-23, other-22)
nmod:for(implications-20, areas-23)
punct(areas-23, ,-24)
case(housing-27, such-25)
mwe(such-25, as-26)
nmod:such_as(areas-23, housing-27)
punct(help-4, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#spending

cool :: The result: Some car makers are cooling their hot rods ./.
det(result-2, The-1)
root(ROOT-0, result-2)
punct(result-2, :-3)
det(makers-6, Some-4)
compound(makers-6, car-5)
nsubj(cooling-8, makers-6)
aux(cooling-8, are-7)
dep(result-2, cooling-8)
nmod:poss(rods-11, their-9)
amod(rods-11, hot-10)
dobj(cooling-8, rods-11)
punct(result-2, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#rods

cool :: A Wall Street Journal story yesterday said sales of the company 's clot-dissolving drug TPA have cooled a bit from the fast pace in December ./.
det(story-5, A-1)
compound(story-5, Wall-2)
compound(story-5, Street-3)
compound(story-5, Journal-4)
nsubj(said-7, story-5)
nmod:tmod(said-7, yesterday-6)
root(ROOT-0, said-7)
nsubj(cooled-17, sales-8)
case(TPA-15, of-9)
det(company-11, the-10)
nmod:poss(TPA-15, company-11)
case(company-11, 's-12)
amod(TPA-15, clot-dissolving-13)
compound(TPA-15, drug-14)
nmod:of(sales-8, TPA-15)
aux(cooled-17, have-16)
ccomp(said-7, cooled-17)
det(bit-19, a-18)
dobj(cooled-17, bit-19)
case(pace-23, from-20)
det(pace-23, the-21)
amod(pace-23, fast-22)
nmod:from(cooled-17, pace-23)
case(December-25, in-24)
nmod:in(cooled-17, December-25)
punct(said-7, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#bit

cool :: The United Kingdom 's chancellor of the exchequer , Nigel Lawson , said the country has tightened its monetary policy to cool a consumer spending spree and bolster weak savings and investment levels ./.
det(Kingdom-3, The-1)
compound(Kingdom-3, United-2)
nmod:poss(chancellor-5, Kingdom-3)
case(Kingdom-3, 's-4)
nsubj(said-13, chancellor-5)
case(exchequer-8, of-6)
det(exchequer-8, the-7)
nmod:of(chancellor-5, exchequer-8)
punct(chancellor-5, ,-9)
compound(Lawson-11, Nigel-10)
appos(chancellor-5, Lawson-11)
punct(chancellor-5, ,-12)
root(ROOT-0, said-13)
det(country-15, the-14)
nsubj(tightened-17, country-15)
aux(tightened-17, has-16)
ccomp(said-13, tightened-17)
nmod:poss(policy-20, its-18)
amod(policy-20, monetary-19)
dobj(tightened-17, policy-20)
mark(cool-22, to-21)
advcl(tightened-17, cool-22)
det(spree-26, a-23)
compound(spree-26, consumer-24)
compound(spree-26, spending-25)
dobj(cool-22, spree-26)
cc(cool-22, and-27)
advcl(tightened-17, bolster-28)
conj:and(cool-22, bolster-28)
amod(savings-30, weak-29)
dobj(bolster-28, savings-30)
cc(savings-30, and-31)
compound(levels-33, investment-32)
dobj(bolster-28, levels-33)
conj:and(savings-30, levels-33)
punct(said-13, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#spree

cool :: The stock-market crash had little cooling effect on one of the world 's hottest property markets ./.
det(crash-3, The-1)
compound(crash-3, stock-market-2)
nsubj(had-4, crash-3)
root(ROOT-0, had-4)
amod(effect-7, little-5)
amod(effect-7, cooling-6)
dobj(had-4, effect-7)
case(one-9, on-8)
nmod:on(had-4, one-9)
case(markets-16, of-10)
det(world-12, the-11)
nmod:poss(markets-16, world-12)
case(world-12, 's-13)
amod(markets-16, hottest-14)
compound(markets-16, property-15)
nmod:of(one-9, markets-16)
punct(had-4, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#effect

cool :: There is suspicion in U.S. industry and government that the latest effort is a political exercise to cool American complaints about subsidies and avert a trade war ./.
expl(is-2, There-1)
root(ROOT-0, is-2)
nsubj(is-2, suspicion-3)
case(industry-6, in-4)
compound(industry-6, U.S.-5)
nmod:in(is-2, industry-6)
cc(industry-6, and-7)
nmod:in(is-2, government-8)
conj:and(industry-6, government-8)
mark(exercise-16, that-9)
det(effort-12, the-10)
amod(effort-12, latest-11)
nsubj(exercise-16, effort-12)
cop(exercise-16, is-13)
det(exercise-16, a-14)
amod(exercise-16, political-15)
ccomp(is-2, exercise-16)
mark(cool-18, to-17)
acl(exercise-16, cool-18)
amod(complaints-20, American-19)
dobj(cool-18, complaints-20)
case(subsidies-22, about-21)
nmod:about(complaints-20, subsidies-22)
cc(cool-18, and-23)
acl(exercise-16, avert-24)
conj:and(cool-18, avert-24)
det(war-27, a-25)
compound(war-27, trade-26)
dobj(avert-24, war-27)
punct(is-2, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#complaints

cool :: If it cools off , they worry about lower earnings , which also would hurt the market ./.
mark(cools-3, If-1)
nsubj(cools-3, it-2)
advcl(worry-7, cools-3)
compound:prt(cools-3, off-4)
punct(worry-7, ,-5)
nsubj(worry-7, they-6)
root(ROOT-0, worry-7)
case(earnings-10, about-8)
amod(earnings-10, lower-9)
nmod:about(worry-7, earnings-10)
nsubj(hurt-15, earnings-10)
punct(earnings-10, ,-11)
ref(earnings-10, which-12)
advmod(hurt-15, also-13)
aux(hurt-15, would-14)
acl:relcl(earnings-10, hurt-15)
det(market-17, the-16)
dobj(hurt-15, market-17)
punct(worry-7, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#it

cool :: Business confidence remains buoyant despite the October market crash , according to the survey , though it has cooled somewhat since the previous poll ./.
compound(confidence-2, Business-1)
nsubj(remains-3, confidence-2)
root(ROOT-0, remains-3)
xcomp(remains-3, buoyant-4)
case(crash-9, despite-5)
det(crash-9, the-6)
compound(crash-9, October-7)
compound(crash-9, market-8)
nmod:despite(remains-3, crash-9)
punct(remains-3, ,-10)
case(survey-14, according-11)
mwe(according-11, to-12)
det(survey-14, the-13)
nmod:according_to(remains-3, survey-14)
punct(remains-3, ,-15)
mark(cooled-19, though-16)
nsubj(cooled-19, it-17)
aux(cooled-19, has-18)
advcl(remains-3, cooled-19)
advmod(cooled-19, somewhat-20)
case(poll-24, since-21)
det(poll-24, the-22)
amod(poll-24, previous-23)
nmod:since(cooled-19, poll-24)
punct(remains-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#it

cool :: `` That remark -LRB- of the official -RRB- definitely cooled the heels of the bulls , '' said Paul Clohesy , chief dealer at Australia and New Zealand Banking Group Ltd. in New York ./.
punct(said-18, ``-1)
det(remark-3, That-2)
nsubj(cooled-10, remark-3)
punct(official-7, -LRB--4)
case(official-7, of-5)
det(official-7, the-6)
nmod:of(remark-3, official-7)
punct(official-7, -RRB--8)
advmod(cooled-10, definitely-9)
ccomp(said-18, cooled-10)
det(heels-12, the-11)
dobj(cooled-10, heels-12)
case(bulls-15, of-13)
det(bulls-15, the-14)
nmod:of(heels-12, bulls-15)
punct(said-18, ,-16)
punct(said-18, ''-17)
root(ROOT-0, said-18)
compound(Clohesy-20, Paul-19)
nsubj(said-18, Clohesy-20)
punct(Clohesy-20, ,-21)
amod(dealer-23, chief-22)
appos(Clohesy-20, dealer-23)
case(Australia-25, at-24)
nmod:at(dealer-23, Australia-25)
cc(Australia-25, and-26)
compound(Ltd.-31, New-27)
compound(Ltd.-31, Zealand-28)
compound(Ltd.-31, Banking-29)
compound(Ltd.-31, Group-30)
nmod:at(dealer-23, Ltd.-31)
conj:and(Australia-25, Ltd.-31)
case(York-34, in-32)
compound(York-34, New-33)
nmod:in(Australia-25, York-34)
punct(said-18, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#heels

cool :: One trader said that the rumors of the Finance Ministry 's efforts to cool trading of the large-capitalization issues triggered the losses in the steel and heavy industrial sectors ./.
nummod(trader-2, One-1)
nsubj(said-3, trader-2)
root(ROOT-0, said-3)
mark(triggered-20, that-4)
det(rumors-6, the-5)
nsubj(triggered-20, rumors-6)
case(efforts-12, of-7)
det(Ministry-10, the-8)
compound(Ministry-10, Finance-9)
nmod:poss(efforts-12, Ministry-10)
case(Ministry-10, 's-11)
nmod:of(rumors-6, efforts-12)
mark(cool-14, to-13)
acl(efforts-12, cool-14)
dobj(cool-14, trading-15)
case(issues-19, of-16)
det(issues-19, the-17)
amod(issues-19, large-capitalization-18)
nmod:of(trading-15, issues-19)
ccomp(said-3, triggered-20)
det(losses-22, the-21)
dobj(triggered-20, losses-22)
case(sectors-29, in-23)
det(sectors-29, the-24)
compound(sectors-29, steel-25)
cc(steel-25, and-26)
conj:and(steel-25, heavy-27)
compound(sectors-29, heavy-27)
amod(sectors-29, industrial-28)
nmod:in(losses-22, sectors-29)
punct(said-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#trading

cool :: The report cooled bullish sentiment brought about by a smaller Brazilian crop this year , analysts said ./.
det(report-2, The-1)
nsubj(cooled-3, report-2)
ccomp(said-17, cooled-3)
amod(sentiment-5, bullish-4)
nsubj(brought-6, sentiment-5)
ccomp(cooled-3, brought-6)
advmod(brought-6, about-7)
case(crop-12, by-8)
det(crop-12, a-9)
amod(crop-12, smaller-10)
amod(crop-12, Brazilian-11)
nmod:by(brought-6, crop-12)
det(year-14, this-13)
nmod:tmod(brought-6, year-14)
punct(said-17, ,-15)
nsubj(said-17, analysts-16)
root(ROOT-0, said-17)
punct(said-17, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#report

cool :: Justin makes building products , cooling towers and boots ./.
nsubj(makes-2, Justin-1)
root(ROOT-0, makes-2)
compound(products-4, building-3)
dobj(makes-2, products-4)
punct(makes-2, ,-5)
advcl(makes-2, cooling-6)
dobj(cooling-6, towers-7)
cc(towers-7, and-8)
dobj(cooling-6, boots-9)
conj:and(towers-7, boots-9)
punct(makes-2, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#towers

cool :: Investor enthusiasm cooled considerably in the wake of reports that Lilco 's demand was a bargaining tactic aimed at getting its talks with the state back in high gear ./.
compound(enthusiasm-2, Investor-1)
nsubj(cooled-3, enthusiasm-2)
root(ROOT-0, cooled-3)
advmod(cooled-3, considerably-4)
case(wake-7, in-5)
det(wake-7, the-6)
nmod:in(cooled-3, wake-7)
case(reports-9, of-8)
nmod:of(wake-7, reports-9)
mark(tactic-17, that-10)
nmod:poss(demand-13, Lilco-11)
case(Lilco-11, 's-12)
nsubj(tactic-17, demand-13)
cop(tactic-17, was-14)
det(tactic-17, a-15)
compound(tactic-17, bargaining-16)
ccomp(reports-9, tactic-17)
acl(tactic-17, aimed-18)
mark(getting-20, at-19)
advcl(aimed-18, getting-20)
nmod:poss(talks-22, its-21)
dobj(getting-20, talks-22)
case(state-25, with-23)
det(state-25, the-24)
nmod:with(talks-22, state-25)
advmod(getting-20, back-26)
case(gear-29, in-27)
amod(gear-29, high-28)
nmod:in(back-26, gear-29)
punct(cooled-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#enthusiasm

cool :: The Nuclear Regulatory Commission fined Detroit Edison Co . $ 25 , 000 for the faulty design of a core cooling system at the Detroit-based utility 's Fermi 2 nuclear reactor ./.
det(Commission-4, The-1)
amod(Commission-4, Nuclear-2)
amod(Commission-4, Regulatory-3)
nsubj(fined-5, Commission-4)
root(ROOT-0, fined-5)
compound(Co-8, Detroit-6)
compound(Co-8, Edison-7)
dobj(fined-5, Co-8)
punct(fined-5, .-9)
dep(25-2, $-1)
root(ROOT-0, 25-2)
punct(25-2, ,-3)
appos(25-2, 000-4)
case(design-8, for-5)
det(design-8, the-6)
amod(design-8, faulty-7)
nmod:for(000-4, design-8)
case(system-13, of-9)
det(system-13, a-10)
compound(system-13, core-11)
compound(system-13, cooling-12)
nmod:of(design-8, system-13)
case(reactor-22, at-14)
det(utility-17, the-15)
amod(utility-17, Detroit-based-16)
nmod:poss(reactor-22, utility-17)
case(utility-17, 's-18)
compound(reactor-22, Fermi-19)
nummod(reactor-22, 2-20)
amod(reactor-22, nuclear-21)
nmod:at(system-13, reactor-22)
punct(25-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

cool :: Jack Laporte , a mutual-fund manager at T. Rowe Price Associates Inc. in Baltimore , says people can find a reason to worry whether the economy shows signs of heating up or cooling off ./.
compound(Laporte-2, Jack-1)
nsubj(says-16, Laporte-2)
punct(Laporte-2, ,-3)
det(manager-6, a-4)
amod(manager-6, mutual-fund-5)
appos(Laporte-2, manager-6)
case(Inc.-12, at-7)
compound(Inc.-12, T.-8)
compound(Inc.-12, Rowe-9)
compound(Inc.-12, Price-10)
compound(Inc.-12, Associates-11)
nmod:at(manager-6, Inc.-12)
case(Baltimore-14, in-13)
nmod:in(Inc.-12, Baltimore-14)
punct(Laporte-2, ,-15)
root(ROOT-0, says-16)
nsubj(find-19, people-17)
aux(find-19, can-18)
ccomp(says-16, find-19)
det(reason-21, a-20)
dobj(find-19, reason-21)
mark(worry-23, to-22)
acl(reason-21, worry-23)
mark(shows-27, whether-24)
det(economy-26, the-25)
nsubj(shows-27, economy-26)
ccomp(worry-23, shows-27)
dobj(shows-27, signs-28)
mark(heating-30, of-29)
acl(signs-28, heating-30)
compound:prt(heating-30, up-31)
cc(heating-30, or-32)
acl(signs-28, cooling-33)
conj:or(heating-30, cooling-33)
compound:prt(cooling-33, off-34)
punct(says-16, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

cool :: Watson 's rhetoric is purged of offensive racial references and cooled to a sympathetic refrain about the misery of dispossessed country folk forced to sell their youngsters ' lifeblood to money-grubbing factory owners from the North ./.
nmod:poss(rhetoric-3, Watson-1)
case(Watson-1, 's-2)
nsubjpass(purged-5, rhetoric-3)
auxpass(purged-5, is-4)
root(ROOT-0, purged-5)
case(references-9, of-6)
amod(references-9, offensive-7)
amod(references-9, racial-8)
nmod:of(purged-5, references-9)
cc(purged-5, and-10)
nsubj(forced-23, cooled-11)
nsubj:xsubj(sell-25, cooled-11)
case(refrain-15, to-12)
det(refrain-15, a-13)
amod(refrain-15, sympathetic-14)
nmod:to(cooled-11, refrain-15)
case(misery-18, about-16)
det(misery-18, the-17)
nmod:about(refrain-15, misery-18)
case(folk-22, of-19)
amod(folk-22, dispossessed-20)
compound(folk-22, country-21)
nmod:of(misery-18, folk-22)
conj:and(purged-5, forced-23)
mark(sell-25, to-24)
xcomp(forced-23, sell-25)
nmod:poss(youngsters-27, their-26)
nmod:poss(lifeblood-29, youngsters-27)
case(youngsters-27, '-28)
dobj(sell-25, lifeblood-29)
case(owners-33, to-30)
amod(owners-33, money-grubbing-31)
compound(owners-33, factory-32)
nmod:to(sell-25, owners-33)
case(North-36, from-34)
det(North-36, the-35)
nmod:from(sell-25, North-36)
punct(purged-5, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#refrain

cool :: The Oct. 19 stock market crash , however , cooled Home Group 's enthusiasm for the deal ./.
det(crash-6, The-1)
compound(crash-6, Oct.-2)
nummod(crash-6, 19-3)
compound(crash-6, stock-4)
compound(crash-6, market-5)
root(ROOT-0, crash-6)
punct(crash-6, ,-7)
root(,-7, however-8)
punct(however-8, ,-9)
amod(Group-12, cooled-10)
compound(Group-12, Home-11)
nmod:poss(enthusiasm-14, Group-12)
case(Group-12, 's-13)
root(,-9, enthusiasm-14)
case(deal-17, for-15)
det(deal-17, the-16)
nmod:for(enthusiasm-14, deal-17)
punct(enthusiasm-14, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#group

cool :: Still , pension plans appeared to be cooling off on their earlier infatuation with small-stock strategies ./.
advmod(appeared-5, Still-1)
punct(appeared-5, ,-2)
compound(plans-4, pension-3)
nsubj(appeared-5, plans-4)
nsubj:xsubj(cooling-8, plans-4)
root(ROOT-0, appeared-5)
mark(cooling-8, to-6)
aux(cooling-8, be-7)
xcomp(appeared-5, cooling-8)
compound:prt(cooling-8, off-9)
case(infatuation-13, on-10)
nmod:poss(infatuation-13, their-11)
amod(infatuation-13, earlier-12)
nmod:on(cooling-8, infatuation-13)
case(strategies-16, with-14)
amod(strategies-16, small-stock-15)
nmod:with(infatuation-13, strategies-16)
punct(appeared-5, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#plans

cool :: On the other hand , the potential for the dollar to resume its recent slide if the trade report is disappointing raises the possibility that the Federal Reserve could push interest rates higher , both to boost the dollar and to cool the economy ./.
case(hand-4, On-1)
det(hand-4, the-2)
amod(hand-4, other-3)
nmod:on(raises-22, hand-4)
punct(raises-22, ,-5)
det(potential-7, the-6)
nsubj(raises-22, potential-7)
mark(resume-12, for-8)
det(dollar-10, the-9)
nsubj(resume-12, dollar-10)
mark(resume-12, to-11)
acl(potential-7, resume-12)
nmod:poss(slide-15, its-13)
amod(slide-15, recent-14)
dobj(resume-12, slide-15)
mark(disappointing-21, if-16)
det(report-19, the-17)
compound(report-19, trade-18)
nsubj(disappointing-21, report-19)
cop(disappointing-21, is-20)
advcl(resume-12, disappointing-21)
root(ROOT-0, raises-22)
det(possibility-24, the-23)
dobj(raises-22, possibility-24)
mark(push-30, that-25)
det(Reserve-28, the-26)
compound(Reserve-28, Federal-27)
nsubj(push-30, Reserve-28)
aux(push-30, could-29)
ccomp(possibility-24, push-30)
compound(rates-32, interest-31)
dobj(push-30, rates-32)
advmod(push-30, higher-33)
punct(raises-22, ,-34)
cc:preconj(boost-37, both-35)
mark(boost-37, to-36)
dep(raises-22, boost-37)
det(dollar-39, the-38)
dobj(boost-37, dollar-39)
cc(boost-37, and-40)
mark(cool-42, to-41)
dep(raises-22, cool-42)
conj:and(boost-37, cool-42)
det(economy-44, the-43)
dobj(cool-42, economy-44)
punct(raises-22, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#economy

cool :: Not only are they being replaced by younger politicians without roots on the mainland , but Taiwan 's recently eased political atmosphere has cooled the obsession with reunification ./.
neg(only-2, Not-1)
dep(replaced-6, only-2)
aux(replaced-6, are-3)
nsubjpass(replaced-6, they-4)
auxpass(replaced-6, being-5)
root(ROOT-0, replaced-6)
case(politicians-9, by-7)
amod(politicians-9, younger-8)
nmod:agent(replaced-6, politicians-9)
case(roots-11, without-10)
nmod:without(replaced-6, roots-11)
case(mainland-14, on-12)
det(mainland-14, the-13)
nmod:on(roots-11, mainland-14)
punct(replaced-6, ,-15)
cc(replaced-6, but-16)
nmod:poss(atmosphere-22, Taiwan-17)
case(Taiwan-17, 's-18)
advmod(eased-20, recently-19)
amod(atmosphere-22, eased-20)
amod(atmosphere-22, political-21)
nsubj(cooled-24, atmosphere-22)
aux(cooled-24, has-23)
conj:but(replaced-6, cooled-24)
det(obsession-26, the-25)
dobj(cooled-24, obsession-26)
case(reunification-28, with-27)
nmod:with(cooled-24, reunification-28)
punct(replaced-6, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#obsession

cool :: Instead , they spend much of their time fighting brush fires , and although Mr. Baker inherits a world in which a number of major crises appear to be cooling off , plenty of hot spots remain ./.
advmod(spend-4, Instead-1)
punct(spend-4, ,-2)
nsubj(spend-4, they-3)
root(ROOT-0, spend-4)
dobj(spend-4, much-5)
case(time-8, of-6)
nmod:poss(time-8, their-7)
nmod:of(much-5, time-8)
xcomp(spend-4, fighting-9)
compound(fires-11, brush-10)
dobj(fighting-9, fires-11)
punct(spend-4, ,-12)
cc(spend-4, and-13)
mark(inherits-17, although-14)
compound(Baker-16, Mr.-15)
nsubj(inherits-17, Baker-16)
conj:and(spend-4, inherits-17)
det(world-19, a-18)
dobj(inherits-17, world-19)
nmod:in(appear-27, world-19)
case(which-21, in-20)
ref(world-19, which-21)
det(number-23, a-22)
nsubj(appear-27, number-23)
nsubj:xsubj(cooling-30, number-23)
case(crises-26, of-24)
amod(crises-26, major-25)
nmod:of(number-23, crises-26)
acl:relcl(world-19, appear-27)
mark(cooling-30, to-28)
aux(cooling-30, be-29)
xcomp(appear-27, cooling-30)
compound:prt(cooling-30, off-31)
punct(inherits-17, ,-32)
nsubj(remain-37, plenty-33)
case(spots-36, of-34)
amod(spots-36, hot-35)
nmod:of(plenty-33, spots-36)
parataxis(inherits-17, remain-37)
punct(spend-4, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#number

cool :: The Bank of England added that it is `` too early to be sure '' whether the British government 's recent efforts to cool down Britain 's overheated economy `` will prove sufficient to restore the economy to a sustainable path . ''/''
det(Bank-2, The-1)
nsubj(added-5, Bank-2)
case(England-4, of-3)
nmod:of(Bank-2, England-4)
root(ROOT-0, added-5)
mark(early-11, that-6)
nsubj(early-11, it-7)
nsubj:xsubj(sure-14, it-7)
cop(early-11, is-8)
punct(early-11, ``-9)
advmod(early-11, too-10)
ccomp(added-5, early-11)
mark(sure-14, to-12)
cop(sure-14, be-13)
xcomp(early-11, sure-14)
punct(sure-14, ''-15)
mark(prove-32, whether-16)
det(government-19, the-17)
amod(government-19, British-18)
nmod:poss(efforts-22, government-19)
case(government-19, 's-20)
amod(efforts-22, recent-21)
nsubj(prove-32, efforts-22)
mark(cool-24, to-23)
acl(efforts-22, cool-24)
advmod(cool-24, down-25)
nmod:poss(economy-29, Britain-26)
case(Britain-26, 's-27)
amod(economy-29, overheated-28)
dobj(cool-24, economy-29)
punct(prove-32, ``-30)
aux(prove-32, will-31)
ccomp(sure-14, prove-32)
xcomp(prove-32, sufficient-33)
mark(restore-35, to-34)
xcomp(sufficient-33, restore-35)
det(economy-37, the-36)
dobj(restore-35, economy-37)
case(path-41, to-38)
det(path-41, a-39)
amod(path-41, sustainable-40)
nmod:to(restore-35, path-41)
punct(added-5, .-42)
punct(added-5, ''-43)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: cool#economy

cool :: But the latest-quarter results were about flat with the second quarter 's $ 7.2 million , or 17 cents a share , as the rate of new orders cooled a bit from the previous period 's hot pace ./.
cc(flat-7, But-1)
det(results-4, the-2)
amod(results-4, latest-quarter-3)
nsubj(flat-7, results-4)
cop(flat-7, were-5)
advmod(flat-7, about-6)
root(ROOT-0, flat-7)
dep(flat-7, with-8)
det(quarter-11, the-9)
amod(quarter-11, second-10)
dobj(with-8, quarter-11)
case(quarter-11, 's-12)
nummod(quarter-11, $-13)
compound(million-15, 7.2-14)
nummod($-13, million-15)
punct(quarter-11, ,-16)
cc(quarter-11, or-17)
nummod(cents-19, 17-18)
dobj(with-8, cents-19)
conj:or(quarter-11, cents-19)
det(share-21, a-20)
nmod:npmod(cents-19, share-21)
punct(quarter-11, ,-22)
mark(cooled-29, as-23)
det(rate-25, the-24)
nsubj(cooled-29, rate-25)
case(orders-28, of-26)
amod(orders-28, new-27)
nmod:of(rate-25, orders-28)
acl:relcl(quarter-11, cooled-29)
det(bit-31, a-30)
dobj(cooled-29, bit-31)
case(pace-38, from-32)
det(period-35, the-33)
amod(period-35, previous-34)
nmod:poss(pace-38, period-35)
case(period-35, 's-36)
amod(pace-38, hot-37)
nmod:from(bit-31, pace-38)
punct(flat-7, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#bit

cool :: The latest rumor yesterday was that International Business Machines Corp . , which earlier had been reported to be planning to license certain Next software programs , is cooling to the idea of using the programs extensively ./.
det(rumor-3, The-1)
amod(rumor-3, latest-2)
nsubj(was-5, rumor-3)
nmod:tmod(was-5, yesterday-4)
root(ROOT-0, was-5)
det(Corp-10, that-6)
compound(Corp-10, International-7)
compound(Corp-10, Business-8)
compound(Corp-10, Machines-9)
nsubj(was-5, Corp-10)
punct(was-5, .-11)
punct(reported-6, ,-1)
nsubjpass(reported-6, which-2)
nsubj:xsubj(planning-9, which-2)
advmod(reported-6, earlier-3)
aux(reported-6, had-4)
auxpass(reported-6, been-5)
parataxis(cooling-18, reported-6)
mark(planning-9, to-7)
aux(planning-9, be-8)
xcomp(reported-6, planning-9)
mark(license-11, to-10)
xcomp(planning-9, license-11)
amod(programs-15, certain-12)
amod(programs-15, Next-13)
compound(programs-15, software-14)
dobj(license-11, programs-15)
punct(reported-6, ,-16)
aux(cooling-18, is-17)
root(ROOT-0, cooling-18)
case(idea-21, to-19)
det(idea-21, the-20)
nmod:to(cooling-18, idea-21)
mark(using-23, of-22)
acl(idea-21, using-23)
det(programs-25, the-24)
dobj(using-23, programs-25)
advmod(using-23, extensively-26)
punct(cooling-18, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#idea

cool :: Observers said the surprise move , just before the four-day midautumn festival holiday , was designed to cool the stock market investment craze ./.
nsubj(said-2, Observers-1)
root(ROOT-0, said-2)
det(move-5, the-3)
compound(move-5, surprise-4)
nsubjpass(designed-16, move-5)
nsubj:xsubj(cool-18, move-5)
punct(move-5, ,-6)
advmod(holiday-13, just-7)
case(holiday-13, before-8)
det(holiday-13, the-9)
amod(holiday-13, four-day-10)
amod(holiday-13, midautumn-11)
compound(holiday-13, festival-12)
nmod:before(move-5, holiday-13)
punct(move-5, ,-14)
auxpass(designed-16, was-15)
ccomp(said-2, designed-16)
mark(cool-18, to-17)
xcomp(designed-16, cool-18)
det(craze-23, the-19)
compound(craze-23, stock-20)
compound(craze-23, market-21)
compound(craze-23, investment-22)
dobj(cool-18, craze-23)
punct(said-2, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#craze

cool :: Nasdaq indexes -- which he says are overrated as proxies for small-stock performance -- `` did cool off since the end of May , but their superior performance in the beginning of the year was so good , that should n't be any surprise to anyone . ''/''
compound(indexes-2, Nasdaq-1)
dobj(says-6, indexes-2)
nsubj(cool-17, indexes-2)
punct(indexes-2, ---3)
ref(indexes-2, which-4)
nsubj(says-6, he-5)
acl:relcl(indexes-2, says-6)
auxpass(overrated-8, are-7)
ccomp(says-6, overrated-8)
case(proxies-10, as-9)
nmod:as(overrated-8, proxies-10)
case(performance-13, for-11)
amod(performance-13, small-stock-12)
nmod:for(proxies-10, performance-13)
punct(indexes-2, ---14)
punct(cool-17, ``-15)
aux(cool-17, did-16)
root(ROOT-0, cool-17)
compound:prt(cool-17, off-18)
case(end-21, since-19)
det(end-21, the-20)
nmod:since(cool-17, end-21)
case(May-23, of-22)
nmod:of(end-21, May-23)
punct(cool-17, ,-24)
cc(cool-17, but-25)
nmod:poss(performance-28, their-26)
amod(performance-28, superior-27)
nsubj(good-37, performance-28)
case(beginning-31, in-29)
det(beginning-31, the-30)
nmod:in(performance-28, beginning-31)
case(year-34, of-32)
det(year-34, the-33)
nmod:of(beginning-31, year-34)
cop(good-37, was-35)
advmod(good-37, so-36)
conj:but(cool-17, good-37)
punct(good-37, ,-38)
nsubj(surprise-44, that-39)
aux(surprise-44, should-40)
neg(surprise-44, n't-41)
cop(surprise-44, be-42)
det(surprise-44, any-43)
ccomp(good-37, surprise-44)
case(anyone-46, to-45)
nmod:to(surprise-44, anyone-46)
punct(cool-17, .-47)
punct(cool-17, ''-48)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: cool#indexes

cool :: Foreign central bankers like to think that with U.S. economic growth apparently cooling , the Federal Reserve is less compelled to further tighten monetary policy before the November presidential election ./.
amod(bankers-3, Foreign-1)
amod(bankers-3, central-2)
root(ROOT-0, bankers-3)
mark(think-6, like-4)
mark(think-6, to-5)
acl(bankers-3, think-6)
mark(compelled-20, that-7)
case(growth-11, with-8)
compound(growth-11, U.S.-9)
amod(growth-11, economic-10)
nmod:with(compelled-20, growth-11)
advmod(cooling-13, apparently-12)
acl(growth-11, cooling-13)
punct(compelled-20, ,-14)
det(Reserve-17, the-15)
compound(Reserve-17, Federal-16)
nsubjpass(compelled-20, Reserve-17)
nsubj:xsubj(tighten-23, Reserve-17)
auxpass(compelled-20, is-18)
advmod(compelled-20, less-19)
ccomp(think-6, compelled-20)
mark(tighten-23, to-21)
advmod(tighten-23, further-22)
xcomp(compelled-20, tighten-23)
amod(policy-25, monetary-24)
dobj(tighten-23, policy-25)
case(election-30, before-26)
det(election-30, the-27)
compound(election-30, November-28)
amod(election-30, presidential-29)
nmod:before(tighten-23, election-30)
punct(bankers-3, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

cool :: But Madison Avenue 's interest in Mr. Tyson is cooling because of the barrage of negative publicity about an alleged suicide attempt and his stormy marriage to actress Robin Givens ./.
cc(cooling-10, But-1)
compound(Avenue-3, Madison-2)
nmod:poss(interest-5, Avenue-3)
case(Avenue-3, 's-4)
nsubj(cooling-10, interest-5)
case(Tyson-8, in-6)
compound(Tyson-8, Mr.-7)
nmod:in(interest-5, Tyson-8)
aux(cooling-10, is-9)
root(ROOT-0, cooling-10)
case(barrage-14, because-11)
mwe(because-11, of-12)
det(barrage-14, the-13)
nmod:because_of(cooling-10, barrage-14)
case(publicity-17, of-15)
amod(publicity-17, negative-16)
nmod:of(barrage-14, publicity-17)
case(attempt-22, about-18)
det(attempt-22, an-19)
amod(attempt-22, alleged-20)
compound(attempt-22, suicide-21)
nmod:about(publicity-17, attempt-22)
cc(attempt-22, and-23)
nmod:poss(marriage-26, his-24)
amod(marriage-26, stormy-25)
nmod:about(publicity-17, marriage-26)
conj:and(attempt-22, marriage-26)
case(Givens-30, to-27)
compound(Givens-30, actress-28)
compound(Givens-30, Robin-29)
nmod:to(marriage-26, Givens-30)
punct(cooling-10, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#interest

cool :: Britain , expected to be the European growth `` locomotive '' at more than 3.5 % , recently raised interest rates again to cool off its `` overheating '' economy ./.
nsubj(raised-19, Britain-1)
punct(Britain-1, ,-2)
acl(Britain-1, expected-3)
mark(growth-8, to-4)
cop(growth-8, be-5)
det(growth-8, the-6)
amod(growth-8, European-7)
xcomp(expected-3, growth-8)
punct(locomotive-10, ``-9)
dobj(growth-8, locomotive-10)
punct(locomotive-10, ''-11)
case(%-16, at-12)
advmod(3.5-15, more-13)
mwe(more-13, than-14)
nummod(%-16, 3.5-15)
nmod:at(locomotive-10, %-16)
punct(Britain-1, ,-17)
advmod(raised-19, recently-18)
root(ROOT-0, raised-19)
compound(rates-21, interest-20)
dobj(raised-19, rates-21)
advmod(raised-19, again-22)
mark(cool-24, to-23)
advcl(raised-19, cool-24)
compound:prt(cool-24, off-25)
nmod:poss(economy-30, its-26)
punct(economy-30, ``-27)
compound(economy-30, overheating-28)
punct(economy-30, ''-29)
dobj(cool-24, economy-30)
punct(raised-19, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#economy

cool :: The Federal Reserve has shown its alarm over wage inflation by nudging interest rates higher in an attempt to cool economic growth ./.
det(Reserve-3, The-1)
compound(Reserve-3, Federal-2)
nsubj(shown-5, Reserve-3)
aux(shown-5, has-4)
root(ROOT-0, shown-5)
nmod:poss(alarm-7, its-6)
dobj(shown-5, alarm-7)
case(inflation-10, over-8)
compound(inflation-10, wage-9)
nmod:over(alarm-7, inflation-10)
mark(nudging-12, by-11)
advcl(shown-5, nudging-12)
compound(rates-14, interest-13)
nsubj(higher-15, rates-14)
xcomp(nudging-12, higher-15)
case(attempt-18, in-16)
det(attempt-18, an-17)
nmod:in(nudging-12, attempt-18)
mark(cool-20, to-19)
acl(attempt-18, cool-20)
amod(growth-22, economic-21)
dobj(cool-20, growth-22)
punct(shown-5, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#growth

cool :: The rate increase by West Germany was a surprise , however , because some economists thought the Bundesbank would n't risk cooling its domestic economy ./.
det(increase-3, The-1)
compound(increase-3, rate-2)
nsubj(surprise-9, increase-3)
case(Germany-6, by-4)
compound(Germany-6, West-5)
nmod:by(increase-3, Germany-6)
cop(surprise-9, was-7)
det(surprise-9, a-8)
root(ROOT-0, surprise-9)
punct(surprise-9, ,-10)
advmod(surprise-9, however-11)
punct(surprise-9, ,-12)
mark(thought-16, because-13)
det(economists-15, some-14)
nsubj(thought-16, economists-15)
advcl(surprise-9, thought-16)
det(Bundesbank-18, the-17)
nsubj(risk-21, Bundesbank-18)
aux(risk-21, would-19)
neg(risk-21, n't-20)
ccomp(thought-16, risk-21)
xcomp(risk-21, cooling-22)
nmod:poss(economy-25, its-23)
amod(economy-25, domestic-24)
dobj(cooling-22, economy-25)
punct(surprise-9, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#economy

cool :: `` The army would n't be able to cool it down or control it ./.
root(ROOT-0, ``-1)
det(army-3, The-2)
nsubj(able-7, army-3)
nsubj:xsubj(cool-9, army-3)
aux(able-7, would-4)
neg(able-7, n't-5)
cop(able-7, be-6)
root(``-1, able-7)
mark(cool-9, to-8)
xcomp(able-7, cool-9)
dobj(cool-9, it-10)
compound:prt(cool-9, down-11)
cc(cool-9, or-12)
xcomp(able-7, control-13)
conj:or(cool-9, control-13)
dobj(cool-9, it-14)
punct(able-7, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#it

cool :: Several analysts wondered if the rise was ordered to cool down an overheating economy or rather to present a clear signal to the market that British Chancellor of the Exchequer Nigel Lawson is in command of interest rate policy ./.
amod(analysts-2, Several-1)
nsubj(wondered-3, analysts-2)
root(ROOT-0, wondered-3)
mark(ordered-8, if-4)
det(rise-6, the-5)
nsubjpass(ordered-8, rise-6)
nsubj:xsubj(cool-10, rise-6)
nsubj:xsubj(present-18, rise-6)
auxpass(ordered-8, was-7)
advcl(wondered-3, ordered-8)
mark(cool-10, to-9)
xcomp(ordered-8, cool-10)
compound:prt(cool-10, down-11)
det(economy-14, an-12)
amod(economy-14, overheating-13)
dobj(cool-10, economy-14)
cc(cool-10, or-15)
advmod(present-18, rather-16)
mark(present-18, to-17)
xcomp(ordered-8, present-18)
conj:or(cool-10, present-18)
det(signal-21, a-19)
amod(signal-21, clear-20)
dobj(present-18, signal-21)
case(market-24, to-22)
det(market-24, the-23)
nmod:to(signal-21, market-24)
mark(command-35, that-25)
compound(Chancellor-27, British-26)
dep(Lawson-32, Chancellor-27)
case(Exchequer-30, of-28)
det(Exchequer-30, the-29)
nmod:of(Chancellor-27, Exchequer-30)
compound(Lawson-32, Nigel-31)
nsubj(command-35, Lawson-32)
cop(command-35, is-33)
case(command-35, in-34)
ccomp(signal-21, command-35)
case(policy-39, of-36)
compound(policy-39, interest-37)
compound(policy-39, rate-38)
nmod:of(command-35, policy-39)
punct(wondered-3, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#economy

cool :: But some marketing consultants see signs that the 1980s new-product boom is cooling a bit ./.
cc(see-5, But-1)
det(consultants-4, some-2)
compound(consultants-4, marketing-3)
nsubj(see-5, consultants-4)
root(ROOT-0, see-5)
dobj(see-5, signs-6)
mark(cooling-13, that-7)
det(boom-11, the-8)
nummod(boom-11, 1980s-9)
compound(boom-11, new-product-10)
nsubj(cooling-13, boom-11)
aux(cooling-13, is-12)
ccomp(signs-6, cooling-13)
det(bit-15, a-14)
dobj(cooling-13, bit-15)
punct(see-5, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#bit

cool :: He also said that if the dispute ca n't be settled by the end of the new cooling off period , Messrs ./.
nsubj(said-3, He-1)
advmod(said-3, also-2)
root(ROOT-0, said-3)
dep(said-3, that-4)
mark(settled-11, if-5)
det(dispute-7, the-6)
nsubjpass(settled-11, dispute-7)
aux(settled-11, ca-8)
neg(settled-11, n't-9)
auxpass(settled-11, be-10)
dep(that-4, settled-11)
case(end-14, by-12)
det(end-14, the-13)
nmod:agent(settled-11, end-14)
case(cooling-18, of-15)
det(cooling-18, the-16)
amod(cooling-18, new-17)
nmod:of(end-14, cooling-18)
case(period-20, off-19)
nmod:off(cooling-18, period-20)
punct(period-20, ,-21)
appos(period-20, Messrs-22)
punct(said-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#period

cool :: But profit-taking helped cool the rally ./.
cc(helped-3, But-1)
nsubj(helped-3, profit-taking-2)
root(ROOT-0, helped-3)
ccomp(helped-3, cool-4)
det(rally-6, the-5)
dobj(cool-4, rally-6)
punct(helped-3, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#rally

cool :: While the 17 male supers who play guards and courtiers cool our heels , we are shoehorned into a room 15 feet square , reading newspapers and exchanging small talk ./.
mark(shoehorned-17, While-1)
det(supers-5, the-2)
nummod(supers-5, 17-3)
amod(supers-5, male-4)
nsubj(play-7, supers-5)
nsubjpass(shoehorned-17, supers-5)
ref(supers-5, who-6)
acl:relcl(supers-5, play-7)
dobj(play-7, guards-8)
cc(play-7, and-9)
nsubj(cool-11, courtiers-10)
acl:relcl(supers-5, cool-11)
conj:and(play-7, cool-11)
nmod:poss(heels-13, our-12)
dobj(cool-11, heels-13)
punct(shoehorned-17, ,-14)
nsubjpass(shoehorned-17, we-15)
auxpass(shoehorned-17, are-16)
root(ROOT-0, shoehorned-17)
case(feet-22, into-18)
det(feet-22, a-19)
compound(feet-22, room-20)
nummod(feet-22, 15-21)
nmod:into(shoehorned-17, feet-22)
amod(feet-22, square-23)
punct(shoehorned-17, ,-24)
root(,-24, reading-25)
dobj(reading-25, newspapers-26)
cc(reading-25, and-27)
root(,-24, exchanging-28)
conj:and(reading-25, exchanging-28)
amod(talk-30, small-29)
dobj(exchanging-28, talk-30)
punct(reading-25, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#heels

cool :: Today 's slogan: `` The fever of war will not cool down while -LRB- Iraqi President -RRB- Saddam Hussein is in power . ''/''
nmod:poss(slogan-3, Today-1)
case(Today-1, 's-2)
root(ROOT-0, slogan-3)
punct(slogan-3, :-4)
punct(slogan-3, ``-5)
det(fever-7, The-6)
nsubj(cool-12, fever-7)
case(war-9, of-8)
nmod:of(fever-7, war-9)
aux(cool-12, will-10)
neg(cool-12, not-11)
ccomp(slogan-3, cool-12)
advmod(cool-12, down-13)
mark(power-23, while-14)
punct(President-17, -LRB--15)
amod(President-17, Iraqi-16)
dep(power-23, President-17)
punct(President-17, -RRB--18)
compound(Hussein-20, Saddam-19)
nsubj(power-23, Hussein-20)
cop(power-23, is-21)
case(power-23, in-22)
advcl(cool-12, power-23)
punct(slogan-3, .-24)
punct(slogan-3, ''-25)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: cool#fever

cool :: The Boston-area condominium market , for years one of the hottest in the country , has finally cooled off ./.
det(market-4, The-1)
amod(market-4, Boston-area-2)
compound(market-4, condominium-3)
nsubj(cooled-18, market-4)
punct(cooled-18, ,-5)
case(years-7, for-6)
nmod:for(cooled-18, years-7)
nummod(years-7, one-8)
case(hottest-11, of-9)
det(hottest-11, the-10)
nmod:of(years-7, hottest-11)
case(country-14, in-12)
det(country-14, the-13)
nmod:in(hottest-11, country-14)
punct(cooled-18, ,-15)
aux(cooled-18, has-16)
advmod(cooled-18, finally-17)
root(ROOT-0, cooled-18)
compound:prt(cooled-18, off-19)
punct(cooled-18, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#market

cool :: Yesterday 's half-point increase in base rates to 9.5 % is n't likely to be enough to cool inflationary pressures because it did n't trigger a rise in mortgage rates , said Gwyn Hacche , an economist at James Capel & Co . `` Mortgage rates are one of the main mechanisms by which a change in interest rates affects the demand for consumer credit , '' he said ./.
nmod:poss(increase-4, Yesterday-1)
case(Yesterday-1, 's-2)
amod(increase-4, half-point-3)
nsubj(likely-13, increase-4)
nsubj:xsubj(enough-16, increase-4)
case(rates-7, in-5)
compound(rates-7, base-6)
nmod:in(increase-4, rates-7)
case(%-10, to-8)
nummod(%-10, 9.5-9)
nmod:to(increase-4, %-10)
cop(likely-13, is-11)
neg(likely-13, n't-12)
ccomp(said-32, likely-13)
mark(enough-16, to-14)
cop(enough-16, be-15)
xcomp(likely-13, enough-16)
mark(cool-18, to-17)
xcomp(enough-16, cool-18)
amod(pressures-20, inflationary-19)
dobj(cool-18, pressures-20)
mark(trigger-25, because-21)
nsubj(trigger-25, it-22)
aux(trigger-25, did-23)
neg(trigger-25, n't-24)
advcl(enough-16, trigger-25)
det(rise-27, a-26)
dobj(trigger-25, rise-27)
case(rates-30, in-28)
compound(rates-30, mortgage-29)
nmod:in(rise-27, rates-30)
punct(said-32, ,-31)
root(ROOT-0, said-32)
compound(Hacche-34, Gwyn-33)
nsubj(said-32, Hacche-34)
punct(Hacche-34, ,-35)
det(economist-37, an-36)
appos(Hacche-34, economist-37)
case(Capel-40, at-38)
compound(Capel-40, James-39)
nmod:at(economist-37, Capel-40)
cc(Capel-40, &-41)
nmod:at(economist-37, Co-42)
conj:&(Capel-40, Co-42)
punct(said-32, .-43)
punct(said-26, ``-1)
compound(rates-3, Mortgage-2)
nsubj(one-5, rates-3)
cop(one-5, are-4)
ccomp(said-26, one-5)
case(mechanisms-9, of-6)
det(mechanisms-9, the-7)
amod(mechanisms-9, main-8)
nmod:of(one-5, mechanisms-9)
nmod:by(affects-17, mechanisms-9)
case(which-11, by-10)
ref(mechanisms-9, which-11)
det(change-13, a-12)
nsubj(affects-17, change-13)
case(rates-16, in-14)
compound(rates-16, interest-15)
nmod:in(change-13, rates-16)
acl:relcl(mechanisms-9, affects-17)
det(demand-19, the-18)
dobj(affects-17, demand-19)
case(credit-22, for-20)
compound(credit-22, consumer-21)
nmod:for(demand-19, credit-22)
punct(said-26, ,-23)
punct(said-26, ''-24)
nsubj(said-26, he-25)
root(ROOT-0, said-26)
punct(said-26, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#pressures

cool :: Yesterday 's sell-off cooled inflationary fears throughout the financial markets ./.
nmod:poss(sell-off-3, Yesterday-1)
case(Yesterday-1, 's-2)
nsubj(cooled-4, sell-off-3)
root(ROOT-0, cooled-4)
amod(fears-6, inflationary-5)
dobj(cooled-4, fears-6)
case(markets-10, throughout-7)
det(markets-10, the-8)
amod(markets-10, financial-9)
nmod:throughout(fears-6, markets-10)
punct(cooled-4, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#fears

cool :: Trying to cool controversies fueled by his visit with dissidents and with Jews denied the opportunity to leave the Soviet Union , he suggested in his news conference that emigration restrictions were largely bureaucratic obstacles that he and the Soviet leader could jointly overcome ./.
csubj(denied-14, Trying-1)
mark(cool-3, to-2)
xcomp(Trying-1, cool-3)
dobj(cool-3, controversies-4)
acl(controversies-4, fueled-5)
acl(controversies-4, fueled-5')
conj:and(fueled-5, fueled-5')
case(visit-8, by-6)
nmod:poss(visit-8, his-7)
nmod:by(fueled-5, visit-8)
case(dissidents-10, with-9)
nmod:with(visit-8, dissidents-10)
cc(fueled-5, and-11)
case(Jews-13, with-12)
nmod:with(fueled-5', Jews-13)
ccomp(suggested-24, denied-14)
det(opportunity-16, the-15)
dobj(denied-14, opportunity-16)
mark(leave-18, to-17)
acl(opportunity-16, leave-18)
det(Union-21, the-19)
compound(Union-21, Soviet-20)
dobj(leave-18, Union-21)
punct(suggested-24, ,-22)
nsubj(suggested-24, he-23)
root(ROOT-0, suggested-24)
case(conference-28, in-25)
nmod:poss(conference-28, his-26)
compound(conference-28, news-27)
nmod:in(suggested-24, conference-28)
mark(obstacles-35, that-29)
compound(restrictions-31, emigration-30)
nsubj(obstacles-35, restrictions-31)
cop(obstacles-35, were-32)
advmod(bureaucratic-34, largely-33)
amod(obstacles-35, bureaucratic-34)
ccomp(suggested-24, obstacles-35)
dobj(overcome-44, obstacles-35)
ref(obstacles-35, that-36)
nsubj(overcome-44, he-37)
cc(he-37, and-38)
det(leader-41, the-39)
amod(leader-41, Soviet-40)
conj:and(he-37, leader-41)
nsubj(overcome-44, leader-41)
aux(overcome-44, could-42)
advmod(overcome-44, jointly-43)
acl:relcl(obstacles-35, overcome-44)
punct(suggested-24, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#controversies

cool :: Zero makes cases , cabinets and cooling equipment for the electronics industry and industrial and consumer use ./.
nsubj(makes-2, Zero-1)
root(ROOT-0, makes-2)
dobj(makes-2, cases-3)
punct(cases-3, ,-4)
dobj(makes-2, cabinets-5)
conj:and(cases-3, cabinets-5)
cc(cases-3, and-6)
amod(equipment-8, cooling-7)
dobj(makes-2, equipment-8)
conj:and(cases-3, equipment-8)
case(industry-12, for-9)
det(industry-12, the-10)
compound(industry-12, electronics-11)
nmod:for(makes-2, industry-12)
cc(industry-12, and-13)
amod(use-17, industrial-14)
cc(industrial-14, and-15)
conj:and(industrial-14, consumer-16)
amod(use-17, consumer-16)
nmod:for(makes-2, use-17)
conj:and(industry-12, use-17)
punct(makes-2, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#equipment

cool :: You have to build up the equipment to a certain power level , test it , cool it down , then possibly repair it , and it may take months to bring it up again . ''/''
nsubj(have-2, You-1)
root(ROOT-0, have-2)
mark(build-4, to-3)
xcomp(have-2, build-4)
compound:prt(build-4, up-5)
det(equipment-7, the-6)
dobj(build-4, equipment-7)
case(level-12, to-8)
det(level-12, a-9)
amod(level-12, certain-10)
compound(level-12, power-11)
nmod:to(build-4, level-12)
punct(have-2, ,-13)
dobj(have-2, test-14)
nsubj:xsubj(build-4, test-14)
dobj(test-14, it-15)
punct(test-14, ,-16)
dep(test-14, cool-17)
dobj(cool-17, it-18)
compound:prt(cool-17, down-19)
punct(test-14, ,-20)
advmod(repair-23, then-21)
advmod(repair-23, possibly-22)
dep(test-14, repair-23)
dobj(repair-23, it-24)
punct(test-14, ,-25)
cc(test-14, and-26)
nsubj(take-29, it-27)
aux(take-29, may-28)
dobj(have-2, take-29)
nsubj:xsubj(build-4, take-29)
conj:and(test-14, take-29)
nmod:tmod(take-29, months-30)
mark(bring-32, to-31)
advcl(take-29, bring-32)
dobj(bring-32, it-33)
compound:prt(bring-32, up-34)
advmod(bring-32, again-35)
punct(have-2, .-36)
punct(have-2, ''-37)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: cool#it

cool :: For an auto , Mr. Loehrke envisions the warm end of the pipe heated by the radiator and the condenser end cooled by the outside air ./.
case(auto-3, For-1)
det(auto-3, an-2)
nmod:for(envisions-7, auto-3)
punct(envisions-7, ,-4)
compound(Loehrke-6, Mr.-5)
nsubj(envisions-7, Loehrke-6)
root(ROOT-0, envisions-7)
det(end-10, the-8)
amod(end-10, warm-9)
dobj(envisions-7, end-10)
case(pipe-13, of-11)
det(pipe-13, the-12)
nmod:of(end-10, pipe-13)
acl(pipe-13, heated-14)
case(radiator-17, by-15)
det(radiator-17, the-16)
nmod:by(heated-14, radiator-17)
cc(radiator-17, and-18)
det(end-21, the-19)
compound(end-21, condenser-20)
nmod:by(heated-14, end-21)
conj:and(radiator-17, end-21)
acl(radiator-17, cooled-22)
case(air-26, by-23)
det(air-26, the-24)
amod(air-26, outside-25)
nmod:by(cooled-22, air-26)
punct(envisions-7, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#air

cool :: Then again , other gases might cause a lot of clouds to form , blocking sunlight and cooling things off ./.
advmod(again-2, Then-1)
advmod(cause-7, again-2)
punct(cause-7, ,-3)
amod(gases-5, other-4)
nsubj(cause-7, gases-5)
aux(cause-7, might-6)
root(ROOT-0, cause-7)
det(lot-9, a-8)
dobj(cause-7, lot-9)
nsubj:xsubj(form-13, lot-9)
case(clouds-11, of-10)
nmod:of(lot-9, clouds-11)
mark(form-13, to-12)
xcomp(cause-7, form-13)
punct(form-13, ,-14)
xcomp(cause-7, blocking-15)
conj:and(form-13, blocking-15)
dobj(blocking-15, sunlight-16)
cc(form-13, and-17)
xcomp(cause-7, cooling-18)
conj:and(form-13, cooling-18)
dobj(cooling-18, things-19)
compound:prt(cooling-18, off-20)
punct(cause-7, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#things

cool :: They can generate such heat they need cooling fans ; trunk-mounting avoids turning the passenger compartment into a blast furnace ./.
nsubj(generate-3, They-1)
aux(generate-3, can-2)
root(ROOT-0, generate-3)
amod(heat-5, such-4)
dobj(generate-3, heat-5)
nsubj(need-7, they-6)
acl:relcl(heat-5, need-7)
amod(fans-9, cooling-8)
dobj(need-7, fans-9)
punct(generate-3, ;-10)
nsubj(avoids-12, trunk-mounting-11)
parataxis(generate-3, avoids-12)
xcomp(avoids-12, turning-13)
det(compartment-16, the-14)
compound(compartment-16, passenger-15)
dobj(turning-13, compartment-16)
case(furnace-20, into-17)
det(furnace-20, a-18)
compound(furnace-20, blast-19)
nmod:into(turning-13, furnace-20)
punct(generate-3, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#fans

cool :: But , he said , armed troops loyal to the Panamanian dictator `` kind of cooled that down . ''/''
root(ROOT-0, But-1)
punct(said-4, ,-2)
nsubj(said-4, he-3)
root(But-1, said-4)
punct(said-4, ,-5)
amod(troops-7, armed-6)
nsubj(said-4, troops-7)
amod(troops-7, loyal-8)
case(dictator-12, to-9)
det(dictator-12, the-10)
amod(dictator-12, Panamanian-11)
nmod:to(loyal-8, dictator-12)
punct(dictator-12, ``-13)
dep(down-18, kind-14)
case(cooled-16, of-15)
nmod:of(kind-14, cooled-16)
advmod(down-18, that-17)
advmod(dictator-12, down-18)
punct(said-4, .-19)
punct(said-4, ''-20)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

cool :: Heavy water is used to control and cool the reaction of small research reactors ./.
amod(water-2, Heavy-1)
nsubjpass(used-4, water-2)
nsubj:xsubj(control-6, water-2)
auxpass(used-4, is-3)
root(ROOT-0, used-4)
mark(control-6, to-5)
xcomp(used-4, control-6)
cc(control-6, and-7)
xcomp(used-4, cool-8)
conj:and(control-6, cool-8)
det(reaction-10, the-9)
dobj(control-6, reaction-10)
case(reactors-14, of-11)
amod(reactors-14, small-12)
compound(reactors-14, research-13)
nmod:of(reaction-10, reactors-14)
punct(used-4, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

cool :: Japanese companies already are at the forefront of development of an older generation of superconductors , those that have to be cooled almost to absolute zero ./.
amod(companies-2, Japanese-1)
nsubj(forefront-7, companies-2)
advmod(forefront-7, already-3)
cop(forefront-7, are-4)
case(forefront-7, at-5)
det(forefront-7, the-6)
root(ROOT-0, forefront-7)
case(development-9, of-8)
nmod:of(forefront-7, development-9)
case(generation-13, of-10)
det(generation-13, an-11)
amod(generation-13, older-12)
nmod:of(development-9, generation-13)
case(superconductors-15, of-14)
nmod:of(generation-13, superconductors-15)
punct(forefront-7, ,-16)
appos(forefront-7, those-17)
nsubj(have-19, those-17)
nsubjpass:xsubj(cooled-22, those-17)
ref(those-17, that-18)
acl:relcl(those-17, have-19)
mark(cooled-22, to-20)
auxpass(cooled-22, be-21)
xcomp(have-19, cooled-22)
advmod(cooled-22, almost-23)
case(zero-26, to-24)
amod(zero-26, absolute-25)
nmod:to(cooled-22, zero-26)
punct(forefront-7, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#be

cool :: When the Detroit Free Press cools down ./.
advmod(cools-6, When-1)
det(Press-5, the-2)
compound(Press-5, Detroit-3)
compound(Press-5, Free-4)
nsubj(cools-6, Press-5)
root(ROOT-0, cools-6)
compound:prt(cools-6, down-7)
punct(cools-6, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#press

cool :: Beer flowed from big pitchers as a cooling obbligato to the hot sounds ./.
nsubj(flowed-2, Beer-1)
root(ROOT-0, flowed-2)
case(pitchers-5, from-3)
amod(pitchers-5, big-4)
nmod:from(flowed-2, pitchers-5)
case(obbligato-9, as-6)
det(obbligato-9, a-7)
compound(obbligato-9, cooling-8)
nmod:as(flowed-2, obbligato-9)
case(sounds-13, to-10)
det(sounds-13, the-11)
amod(sounds-13, hot-12)
nmod:to(obbligato-9, sounds-13)
punct(flowed-2, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

cool :: Engineers in uniforms and hardhats are everywhere , many maintaining the technological heart of the levitating train: its roadbed of specially cooled superconducting magnets ./.
nsubj(maintaining-10, Engineers-1)
case(uniforms-3, in-2)
nmod:in(Engineers-1, uniforms-3)
cc(uniforms-3, and-4)
nmod:in(Engineers-1, hardhats-5)
conj:and(uniforms-3, hardhats-5)
aux(maintaining-10, are-6)
advmod(maintaining-10, everywhere-7)
punct(maintaining-10, ,-8)
nsubj(maintaining-10, many-9)
root(ROOT-0, maintaining-10)
det(heart-13, the-11)
amod(heart-13, technological-12)
dobj(maintaining-10, heart-13)
case(train-17, of-14)
det(train-17, the-15)
amod(train-17, levitating-16)
nmod:of(heart-13, train-17)
punct(maintaining-10, :-18)
nmod:poss(roadbed-20, its-19)
parataxis(maintaining-10, roadbed-20)
amod(roadbed-20, of-21)
advmod(cooled-23, specially-22)
dep(of-21, cooled-23)
xcomp(cooled-23, superconducting-24)
dobj(superconducting-24, magnets-25)
punct(maintaining-10, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

cool :: The revolutionary gallium arsenide circuits used in a forthcoming model , the Cray-3 , experienced cooling problems that resulted in millions of dollars of added costs ./.
det(circuits-5, The-1)
amod(circuits-5, revolutionary-2)
compound(circuits-5, gallium-3)
compound(circuits-5, arsenide-4)
nsubj(experienced-15, circuits-5)
acl(circuits-5, used-6)
case(model-10, in-7)
det(model-10, a-8)
amod(model-10, forthcoming-9)
nmod:in(used-6, model-10)
punct(circuits-5, ,-11)
det(Cray-3-13, the-12)
appos(circuits-5, Cray-3-13)
punct(circuits-5, ,-14)
root(ROOT-0, experienced-15)
amod(problems-17, cooling-16)
dobj(experienced-15, problems-17)
nsubj(resulted-19, problems-17)
ref(problems-17, that-18)
acl:relcl(problems-17, resulted-19)
case(millions-21, in-20)
nmod:in(resulted-19, millions-21)
case(dollars-23, of-22)
nmod:of(millions-21, dollars-23)
case(costs-26, of-24)
amod(costs-26, added-25)
nmod:of(dollars-23, costs-26)
punct(experienced-15, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#problems

cool :: Normal cooling costs are defined as the expected costs to cool a residence in average August weather , which is based on temperature records for the past 30 years ./.
amod(costs-3, Normal-1)
compound(costs-3, cooling-2)
nsubjpass(defined-5, costs-3)
auxpass(defined-5, are-4)
root(ROOT-0, defined-5)
case(costs-9, as-6)
det(costs-9, the-7)
amod(costs-9, expected-8)
nmod:as(defined-5, costs-9)
nsubjpass(based-21, costs-9)
mark(cool-11, to-10)
acl(costs-9, cool-11)
det(residence-13, a-12)
dobj(cool-11, residence-13)
case(weather-17, in-14)
amod(weather-17, average-15)
compound(weather-17, August-16)
nmod:in(cool-11, weather-17)
punct(costs-9, ,-18)
ref(costs-9, which-19)
auxpass(based-21, is-20)
acl:relcl(costs-9, based-21)
case(records-24, on-22)
compound(records-24, temperature-23)
nmod:on(based-21, records-24)
case(years-29, for-25)
det(years-29, the-26)
amod(years-29, past-27)
nummod(years-29, 30-28)
nmod:for(records-24, years-29)
punct(defined-5, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#residence

cool :: The mold is then cooled and dried and the lid peeled off ./.
det(mold-2, The-1)
nsubjpass(cooled-5, mold-2)
nsubjpass(dried-7, mold-2)
auxpass(cooled-5, is-3)
advmod(cooled-5, then-4)
root(ROOT-0, cooled-5)
cc(cooled-5, and-6)
conj:and(cooled-5, dried-7)
cc(cooled-5, and-8)
det(lid-10, the-9)
nsubj(peeled-11, lid-10)
conj:and(cooled-5, peeled-11)
compound:prt(peeled-11, off-12)
punct(cooled-5, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#mold

cool :: Home here is a 12-by-15-foot room , cooled by two portable fans and crowded with three beds and boxes of clothes ./.
nsubj(room-6, Home-1)
advmod(Home-1, here-2)
cop(room-6, is-3)
det(room-6, a-4)
amod(room-6, 12-by-15-foot-5)
root(ROOT-0, room-6)
punct(room-6, ,-7)
dep(room-6, cooled-8)
case(fans-12, by-9)
nummod(fans-12, two-10)
amod(fans-12, portable-11)
nmod:by(cooled-8, fans-12)
cc(cooled-8, and-13)
dep(room-6, crowded-14)
conj:and(cooled-8, crowded-14)
case(beds-17, with-15)
nummod(beds-17, three-16)
nmod:with(crowded-14, beds-17)
cc(beds-17, and-18)
nmod:with(crowded-14, boxes-19)
conj:and(beds-17, boxes-19)
case(clothes-21, of-20)
nmod:of(boxes-19, clothes-21)
punct(room-6, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#fans

cool :: A front is then expected to move in but it will cool temperatures only slightly , to 40 to 50 degrees ./.
det(front-2, A-1)
nsubjpass(expected-5, front-2)
nsubj:xsubj(move-7, front-2)
auxpass(expected-5, is-3)
advmod(expected-5, then-4)
root(ROOT-0, expected-5)
mark(move-7, to-6)
xcomp(expected-5, move-7)
advmod(move-7, in-8)
cc(expected-5, but-9)
nsubj(cool-12, it-10)
aux(cool-12, will-11)
conj:but(expected-5, cool-12)
dobj(cool-12, temperatures-13)
advmod(slightly-15, only-14)
advmod(cool-12, slightly-15)
punct(cool-12, ,-16)
case(degrees-21, to-17)
compound(50-20, 40-18)
dep(50-20, to-19)
nummod(degrees-21, 50-20)
nmod:to(cool-12, degrees-21)
punct(expected-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: cool#temperatures

dance :: `` You 're not going to be able to dance and diddle here . ''/''
root(ROOT-0, ``-1)
nsubj(going-5, You-2)
nsubj:xsubj(able-8, You-2)
aux(going-5, 're-3)
neg(going-5, not-4)
root(``-1, going-5)
mark(able-8, to-6)
cop(able-8, be-7)
xcomp(going-5, able-8)
mark(dance-10, to-9)
xcomp(able-8, dance-10)
cc(dance-10, and-11)
xcomp(able-8, diddle-12)
conj:and(dance-10, diddle-12)
advmod(dance-10, here-13)
punct(going-5, .-14)
punct(going-5, ''-15)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

dance :: He just might dance into the 1990s ./.
nsubj(dance-4, He-1)
advmod(dance-4, just-2)
aux(dance-4, might-3)
root(ROOT-0, dance-4)
case(1990s-7, into-5)
det(1990s-7, the-6)
nmod:into(dance-4, 1990s-7)
punct(dance-4, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#he

dance :: He proposed what ministers in many countries have only danced around -- movement toward a global fixed-rate system , possibly linked to gold ./.
nsubj(proposed-2, He-1)
root(ROOT-0, proposed-2)
det(ministers-4, what-3)
nsubj(danced-10, ministers-4)
case(countries-7, in-5)
amod(countries-7, many-6)
nmod:in(ministers-4, countries-7)
aux(danced-10, have-8)
advmod(danced-10, only-9)
ccomp(proposed-2, danced-10)
advmod(danced-10, around-11)
punct(danced-10, ---12)
dobj(danced-10, movement-13)
case(system-18, toward-14)
det(system-18, a-15)
amod(system-18, global-16)
amod(system-18, fixed-rate-17)
nmod:toward(movement-13, system-18)
punct(movement-13, ,-19)
advmod(linked-21, possibly-20)
acl(movement-13, linked-21)
case(gold-23, to-22)
nmod:to(linked-21, gold-23)
punct(proposed-2, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#movement

dance :: Mr. McMillin doubts a rash of food takeovers will occur , because many companies already are dancing to Wall Street 's tune ./.
compound(McMillin-2, Mr.-1)
nsubj(doubts-3, McMillin-2)
root(ROOT-0, doubts-3)
det(rash-5, a-4)
nsubj(occur-10, rash-5)
case(takeovers-8, of-6)
compound(takeovers-8, food-7)
nmod:of(rash-5, takeovers-8)
aux(occur-10, will-9)
ccomp(doubts-3, occur-10)
punct(occur-10, ,-11)
mark(dancing-17, because-12)
amod(companies-14, many-13)
nsubj(dancing-17, companies-14)
advmod(dancing-17, already-15)
aux(dancing-17, are-16)
advcl(occur-10, dancing-17)
case(tune-22, to-18)
compound(Street-20, Wall-19)
nmod:poss(tune-22, Street-20)
case(Street-20, 's-21)
nmod:to(dancing-17, tune-22)
punct(doubts-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#companies

dance :: He has been in public life a long time , and no large skeletons have come dancing out of the closet yet ./.
nsubj(life-6, He-1)
aux(life-6, has-2)
cop(life-6, been-3)
case(life-6, in-4)
amod(life-6, public-5)
root(ROOT-0, life-6)
det(time-9, a-7)
amod(time-9, long-8)
nmod:npmod(life-6, time-9)
punct(life-6, ,-10)
cc(life-6, and-11)
neg(skeletons-14, no-12)
amod(skeletons-14, large-13)
nsubj(come-16, skeletons-14)
aux(come-16, have-15)
conj:and(life-6, come-16)
xcomp(come-16, dancing-17)
case(closet-21, out-18)
mwe(out-18, of-19)
det(closet-21, the-20)
nmod:out_of(dancing-17, closet-21)
advmod(come-16, yet-22)
punct(life-6, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#closet

dance :: Mr. McVeigh , a seven-year Smith Barney veteran , said his department was profitable until the crash and until Primerica `` started dancing on my head . ''/''
compound(McVeigh-2, Mr.-1)
nsubj(said-10, McVeigh-2)
punct(McVeigh-2, ,-3)
det(veteran-8, a-4)
amod(veteran-8, seven-year-5)
compound(veteran-8, Smith-6)
compound(veteran-8, Barney-7)
appos(McVeigh-2, veteran-8)
punct(McVeigh-2, ,-9)
root(ROOT-0, said-10)
nmod:poss(department-12, his-11)
nsubj(profitable-14, department-12)
cop(profitable-14, was-13)
ccomp(said-10, profitable-14)
case(crash-17, until-15)
det(crash-17, the-16)
nmod:until(profitable-14, crash-17)
cc(profitable-14, and-18)
mark(started-22, until-19)
nsubj(started-22, Primerica-20)
punct(started-22, ``-21)
ccomp(said-10, started-22)
conj:and(profitable-14, started-22)
xcomp(started-22, dancing-23)
case(head-26, on-24)
nmod:poss(head-26, my-25)
nmod:on(dancing-23, head-26)
punct(said-10, .-27)
punct(said-10, ''-28)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: dance#head

dance :: The picture spans the quarter-century between the mid-'50s and the early '80s , which gives Ms. Lange the chance to frequently change her hair style , to wear a variety of clothes and to dance the Twist ./.
det(picture-2, The-1)
nsubj(spans-3, picture-2)
root(ROOT-0, spans-3)
det(quarter-century-5, the-4)
dobj(spans-3, quarter-century-5)
case(the-7, between-6)
nmod:between(quarter-century-5, the-7)
amod(the-7, mid-8)
punct(mid-8, --9)
dep(mid-8, '50s-10)
cc('50s-10, and-11)
det('80s-14, the-12)
amod('80s-14, early-13)
dep(mid-8, '80s-14)
conj:and('50s-10, '80s-14)
nsubj(gives-17, '80s-14)
punct('80s-14, ,-15)
ref('80s-14, which-16)
acl:relcl('80s-14, gives-17)
compound(Lange-19, Ms.-18)
iobj(gives-17, Lange-19)
det(chance-21, the-20)
dobj(gives-17, chance-21)
mark(change-24, to-22)
advmod(change-24, frequently-23)
acl(chance-21, change-24)
nmod:poss(style-27, her-25)
compound(style-27, hair-26)
dobj(change-24, style-27)
punct(change-24, ,-28)
mark(wear-30, to-29)
acl(chance-21, wear-30)
conj:and(change-24, wear-30)
det(variety-32, a-31)
dobj(wear-30, variety-32)
case(clothes-34, of-33)
nmod:of(variety-32, clothes-34)
cc(change-24, and-35)
mark(dance-37, to-36)
acl(chance-21, dance-37)
conj:and(change-24, dance-37)
det(Twist-39, the-38)
dobj(dance-37, Twist-39)
punct(spans-3, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#twist

dance :: They were greeted by dancing pigs , flying pigs and several hundred thousand people pigging out ./.
nsubjpass(greeted-3, They-1)
auxpass(greeted-3, were-2)
root(ROOT-0, greeted-3)
mark(dancing-5, by-4)
advcl(greeted-3, dancing-5)
dobj(dancing-5, pigs-6)
punct(dancing-5, ,-7)
amod(pigs-9, flying-8)
dobj(dancing-5, pigs-9)
cc(pigs-9, and-10)
advmod(thousand-13, several-11)
compound(thousand-13, hundred-12)
nummod(people-14, thousand-13)
nsubj(pigging-15, people-14)
dobj(dancing-5, pigging-15)
conj:and(pigs-9, pigging-15)
compound:prt(pigging-15, out-16)
punct(greeted-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#pigs

dance :: Joffrey Ballet: The bicoastal company dances its first Manhattan season since the death of founder Robert Joffrey , whose own `` Remembrances '' pas de deux will be revived ./.
compound(Ballet-2, Joffrey-1)
root(ROOT-0, Ballet-2)
punct(Ballet-2, :-3)
det(dances-7, The-4)
amod(dances-7, bicoastal-5)
compound(dances-7, company-6)
dep(Ballet-2, dances-7)
nmod:poss(season-11, its-8)
amod(season-11, first-9)
compound(season-11, Manhattan-10)
dep(dances-7, season-11)
case(death-14, since-12)
det(death-14, the-13)
nmod:since(season-11, death-14)
case(Joffrey-18, of-15)
compound(Joffrey-18, founder-16)
compound(Joffrey-18, Robert-17)
nmod:of(death-14, Joffrey-18)
nmod:poss(pas-25, Joffrey-18)
punct(Joffrey-18, ,-19)
ref(Joffrey-18, whose-20)
amod(pas-25, own-21)
punct(pas-25, ``-22)
compound(pas-25, Remembrances-23)
punct(pas-25, ''-24)
nsubjpass(revived-30, pas-25)
amod(deux-27, de-26)
dep(pas-25, deux-27)
aux(revived-30, will-28)
auxpass(revived-30, be-29)
acl:relcl(Joffrey-18, revived-30)
punct(Ballet-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

dance :: Bill Byron , a regional sales manager for Columbus Wallcovering Co . , danced wildly down the runway in a purple `` country kitchen '' material ./.
compound(Byron-2, Bill-1)
root(ROOT-0, Byron-2)
punct(Byron-2, ,-3)
det(manager-7, a-4)
amod(manager-7, regional-5)
compound(manager-7, sales-6)
appos(Byron-2, manager-7)
case(Co-11, for-8)
compound(Co-11, Columbus-9)
compound(Co-11, Wallcovering-10)
nmod:for(manager-7, Co-11)
punct(Byron-2, .-12)
punct(danced-2, ,-1)
root(ROOT-0, danced-2)
advmod(runway-6, wildly-3)
case(runway-6, down-4)
det(runway-6, the-5)
nmod:down(danced-2, runway-6)
case(material-14, in-7)
det(material-14, a-8)
amod(material-14, purple-9)
punct(material-14, ``-10)
compound(material-14, country-11)
compound(material-14, kitchen-12)
punct(material-14, ''-13)
nmod:in(runway-6, material-14)
punct(danced-2, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#runway

dance :: Twenty-eight thousand buildings were leveled in the quake , but a few years later , 20 , 500 new ones had been built , and people of the reborn city were dancing in the streets ./.
compound(thousand-2, Twenty-eight-1)
nummod(buildings-3, thousand-2)
nsubjpass(leveled-5, buildings-3)
auxpass(leveled-5, were-4)
root(ROOT-0, leveled-5)
case(quake-8, in-6)
det(quake-8, the-7)
nmod:in(leveled-5, quake-8)
punct(leveled-5, ,-9)
cc(leveled-5, but-10)
det(years-13, a-11)
amod(years-13, few-12)
nmod:npmod(later-14, years-13)
advmod(built-23, later-14)
punct(built-23, ,-15)
dep(built-23, 20-16)
punct(built-23, ,-17)
nummod(ones-20, 500-18)
amod(ones-20, new-19)
nsubjpass(built-23, ones-20)
aux(built-23, had-21)
auxpass(built-23, been-22)
conj:but(leveled-5, built-23)
punct(leveled-5, ,-24)
cc(leveled-5, and-25)
nsubj(dancing-32, people-26)
case(city-30, of-27)
det(city-30, the-28)
amod(city-30, reborn-29)
nmod:of(people-26, city-30)
aux(dancing-32, were-31)
conj:but(leveled-5, dancing-32)
case(streets-35, in-33)
det(streets-35, the-34)
nmod:in(dancing-32, streets-35)
punct(leveled-5, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#people

dance :: And for those of you planning ahead , this year the troupe will dance `` The Nutcracker '' Dec. 1-31 . -LRB- 212 -RRB- 870-5690 ./.
cc(dance-14, And-1)
case(those-3, for-2)
nmod:for(dance-14, those-3)
case(you-5, of-4)
nmod:of(those-3, you-5)
acl(you-5, planning-6)
advmod(planning-6, ahead-7)
punct(dance-14, ,-8)
det(year-10, this-9)
nmod:tmod(dance-14, year-10)
det(troupe-12, the-11)
nsubj(dance-14, troupe-12)
aux(dance-14, will-13)
root(ROOT-0, dance-14)
punct(dance-14, ``-15)
det(Nutcracker-17, The-16)
dobj(dance-14, Nutcracker-17)
punct(dance-14, ''-18)
nmod:tmod(dance-14, Dec.-19)
nummod(Dec.-19, 1-31-20)
punct(dance-14, .-21)
punct(212-2, -LRB--1)
root(ROOT-0, 212-2)
punct(212-2, -RRB--3)
dep(212-2, 870-5690-4)
punct(212-2, .-5)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#nutcracker

dance :: Anyone can dance the hokey-pokey ./.
nsubj(dance-3, Anyone-1)
aux(dance-3, can-2)
root(ROOT-0, dance-3)
det(hokey-pokey-5, the-4)
dobj(dance-3, hokey-pokey-5)
punct(dance-3, .-6)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#hokey-pokey

dance :: `` This music is n't meant to be watched , it 's intended to be danced , '' Mr. Gutierrez pleads from the stage ./.
punct(intended-13, ``-1)
det(music-3, This-2)
nsubjpass(meant-6, music-3)
nsubjpass:xsubj(watched-9, music-3)
auxpass(meant-6, is-4)
neg(meant-6, n't-5)
ccomp(intended-13, meant-6)
mark(watched-9, to-7)
auxpass(watched-9, be-8)
xcomp(meant-6, watched-9)
punct(intended-13, ,-10)
nsubjpass(intended-13, it-11)
nsubjpass:xsubj(danced-16, it-11)
auxpass(intended-13, 's-12)
root(ROOT-0, intended-13)
mark(danced-16, to-14)
auxpass(danced-16, be-15)
xcomp(intended-13, danced-16)
punct(pleads-21, ,-17)
punct(pleads-21, ''-18)
compound(Gutierrez-20, Mr.-19)
nsubj(pleads-21, Gutierrez-20)
dep(intended-13, pleads-21)
case(stage-24, from-22)
det(stage-24, the-23)
nmod:from(pleads-21, stage-24)
punct(intended-13, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#be

dance :: At the end of the group 's 40-minute set , the audience members have decided they do n't care about the museum 's rules either , and they 're dancing in the aisles ./.
case(end-3, At-1)
det(end-3, the-2)
nmod:at(decided-15, end-3)
case(set-9, of-4)
det(group-6, the-5)
nmod:poss(set-9, group-6)
case(group-6, 's-7)
amod(set-9, 40-minute-8)
nmod:of(end-3, set-9)
punct(decided-15, ,-10)
det(members-13, the-11)
compound(members-13, audience-12)
nsubj(decided-15, members-13)
aux(decided-15, have-14)
root(ROOT-0, decided-15)
nsubj(care-19, they-16)
aux(care-19, do-17)
neg(care-19, n't-18)
ccomp(decided-15, care-19)
case(rules-24, about-20)
det(museum-22, the-21)
nmod:poss(rules-24, museum-22)
case(museum-22, 's-23)
nmod:about(care-19, rules-24)
advmod(care-19, either-25)
punct(decided-15, ,-26)
cc(decided-15, and-27)
nsubj(dancing-30, they-28)
aux(dancing-30, 're-29)
conj:and(decided-15, dancing-30)
case(aisles-33, in-31)
det(aisles-33, the-32)
nmod:in(dancing-30, aisles-33)
punct(decided-15, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#they

dance :: `` I have undergraduate degrees in chemistry and marketing , but I 'm going to law school in the fall and I hope this will pay for it , '' says Sasha , who wears eyeglasses when she dances . -LRB- `` These glasses are fake , '' she explains ./.
punct(says-31, ``-1)
nsubj(have-3, I-2)
ccomp(says-31, have-3)
amod(degrees-5, undergraduate-4)
dobj(have-3, degrees-5)
case(chemistry-7, in-6)
nmod:in(degrees-5, chemistry-7)
cc(chemistry-7, and-8)
nmod:in(degrees-5, marketing-9)
conj:and(chemistry-7, marketing-9)
punct(have-3, ,-10)
cc(have-3, but-11)
nsubj(going-14, I-12)
aux(going-14, 'm-13)
conj:but(have-3, going-14)
ccomp(says-31, going-14)
case(school-17, to-15)
compound(school-17, law-16)
nmod:to(going-14, school-17)
case(fall-20, in-18)
det(fall-20, the-19)
nmod:in(going-14, fall-20)
cc(going-14, and-21)
nsubj(hope-23, I-22)
conj:but(have-3, hope-23)
conj:and(going-14, hope-23)
nsubj(pay-26, this-24)
aux(pay-26, will-25)
ccomp(hope-23, pay-26)
case(it-28, for-27)
nmod:for(pay-26, it-28)
punct(says-31, ,-29)
punct(says-31, ''-30)
root(ROOT-0, says-31)
nsubj(says-31, Sasha-32)
nsubj(wears-35, Sasha-32)
punct(Sasha-32, ,-33)
ref(Sasha-32, who-34)
acl:relcl(Sasha-32, wears-35)
dobj(wears-35, eyeglasses-36)
advmod(dances-39, when-37)
nsubj(dances-39, she-38)
advcl(wears-35, dances-39)
punct(says-31, .-40)
punct(explains-10, -LRB--1)
punct(explains-10, ``-2)
det(glasses-4, These-3)
nsubj(fake-6, glasses-4)
cop(fake-6, are-5)
ccomp(explains-10, fake-6)
punct(explains-10, ,-7)
punct(explains-10, ''-8)
nsubj(explains-10, she-9)
root(ROOT-0, explains-10)
punct(explains-10, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#she

dance :: Most of the rules are left unspoken: Do n't move , do n't talk , do n't laugh , do n't sneeze -- and , definitely , do n't dance ./.
nsubjpass(left-6, Most-1)
case(rules-4, of-2)
det(rules-4, the-3)
nmod:of(Most-1, rules-4)
auxpass(left-6, are-5)
root(ROOT-0, left-6)
xcomp(left-6, unspoken-7)
punct(left-6, :-8)
aux(move-11, Do-9)
neg(move-11, n't-10)
parataxis(left-6, move-11)
punct(move-11, ,-12)
aux(talk-15, do-13)
neg(talk-15, n't-14)
ccomp(move-11, talk-15)
punct(move-11, ,-16)
aux(laugh-19, do-17)
neg(laugh-19, n't-18)
dep(move-11, laugh-19)
punct(move-11, ,-20)
aux(sneeze-23, do-21)
neg(sneeze-23, n't-22)
dep(move-11, sneeze-23)
punct(sneeze-23, ---24)
cc(move-11, and-25)
punct(move-11, ,-26)
advmod(move-11, definitely-27)
punct(move-11, ,-28)
aux(dance-31, do-29)
neg(dance-31, n't-30)
dep(move-11, dance-31)
punct(left-6, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

dance :: Then watch women dancing nude at Tattletales , a blue-collar strip joint down the road with trucks outside and a Welcome Democrats sign on the roof ./.
advmod(watch-2, Then-1)
root(ROOT-0, watch-2)
dobj(watch-2, women-3)
acl(women-3, dancing-4)
xcomp(dancing-4, nude-5)
case(Tattletales-7, at-6)
nmod:at(nude-5, Tattletales-7)
punct(Tattletales-7, ,-8)
det(joint-12, a-9)
amod(joint-12, blue-collar-10)
compound(joint-12, strip-11)
appos(Tattletales-7, joint-12)
case(road-15, down-13)
det(road-15, the-14)
nmod:down(joint-12, road-15)
case(trucks-17, with-16)
nmod:with(road-15, trucks-17)
mark(sign-23, outside-18)
cc(outside-18, and-19)
det(Democrats-22, a-20)
amod(Democrats-22, Welcome-21)
conj:and(outside-18, Democrats-22)
mark(sign-23, Democrats-22)
acl(joint-12, sign-23)
case(roof-26, on-24)
det(roof-26, the-25)
nmod:on(sign-23, roof-26)
punct(watch-2, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

dance :: Even more inadvertently hilarious is Alexander Godunov , the Soviet defector who used to dance for a living ./.
advmod(more-2, Even-1)
advmod(inadvertently-3, more-2)
advmod(hilarious-4, inadvertently-3)
dep(is-5, hilarious-4)
root(ROOT-0, is-5)
compound(Godunov-7, Alexander-6)
nsubj(is-5, Godunov-7)
punct(Godunov-7, ,-8)
det(defector-11, the-9)
amod(defector-11, Soviet-10)
appos(Godunov-7, defector-11)
nsubj(used-13, defector-11)
nsubj:xsubj(dance-15, defector-11)
ref(defector-11, who-12)
acl:relcl(defector-11, used-13)
mark(dance-15, to-14)
xcomp(used-13, dance-15)
case(living-18, for-16)
det(living-18, a-17)
nmod:for(dance-15, living-18)
punct(is-5, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#defector

dance :: Charles Jude , Mr. Nureyev 's partner , danced with a youthful resilience that reflected unfavorably on the latter 's growing infirmity ./.
compound(Jude-2, Charles-1)
nsubj(danced-9, Jude-2)
punct(Jude-2, ,-3)
compound(Nureyev-5, Mr.-4)
nmod:poss(partner-7, Nureyev-5)
case(Nureyev-5, 's-6)
appos(Jude-2, partner-7)
punct(Jude-2, ,-8)
root(ROOT-0, danced-9)
case(resilience-13, with-10)
det(resilience-13, a-11)
amod(resilience-13, youthful-12)
nmod:with(danced-9, resilience-13)
nsubj(reflected-15, resilience-13)
ref(resilience-13, that-14)
acl:relcl(resilience-13, reflected-15)
advmod(reflected-15, unfavorably-16)
case(infirmity-22, on-17)
det(latter-19, the-18)
nmod:poss(infirmity-22, latter-19)
case(latter-19, 's-20)
amod(infirmity-22, growing-21)
nmod:on(reflected-15, infirmity-22)
punct(danced-9, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#jude

dance :: When they 're not in front of the camera , the Toons sing and dance at their version of Harlem 's Cotton Club ./.
advmod(camera-9, When-1)
nsubj(camera-9, they-2)
cop(camera-9, 're-3)
neg(camera-9, not-4)
case(camera-9, in-5)
mwe(in-5, front-6)
mwe(in-5, of-7)
det(camera-9, the-8)
advcl(sing-13, camera-9)
punct(sing-13, ,-10)
det(Toons-12, the-11)
nsubj(sing-13, Toons-12)
nsubj(dance-15, Toons-12)
root(ROOT-0, sing-13)
cc(sing-13, and-14)
conj:and(sing-13, dance-15)
case(version-18, at-16)
nmod:poss(version-18, their-17)
nmod:at(dance-15, version-18)
case(Club-23, of-19)
nmod:poss(Club-23, Harlem-20)
case(Harlem-20, 's-21)
compound(Club-23, Cotton-22)
nmod:of(version-18, Club-23)
punct(sing-13, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#toons

dance :: Even as danced by four of ABT 's most talented males , John Gardner , Robert Hill , Kevin McKenzie and the astonishingly agile Robert Wallace , Mr. Tippet 's latest work is tough going ./.
advmod(danced-3, Even-1)
mark(danced-3, as-2)
advcl(tough-34, danced-3)
case(four-5, by-4)
nmod:by(danced-3, four-5)
case(males-11, of-6)
nmod:poss(males-11, ABT-7)
case(ABT-7, 's-8)
amod(males-11, most-9)
amod(males-11, talented-10)
nmod:of(four-5, males-11)
punct(tough-34, ,-12)
compound(Gardner-14, John-13)
nsubj(tough-34, Gardner-14)
punct(Gardner-14, ,-15)
compound(Hill-17, Robert-16)
conj:and(Gardner-14, Hill-17)
nsubj(tough-34, Hill-17)
punct(Gardner-14, ,-18)
compound(McKenzie-20, Kevin-19)
conj:and(Gardner-14, McKenzie-20)
nsubj(tough-34, McKenzie-20)
cc(Gardner-14, and-21)
det(Wallace-26, the-22)
advmod(agile-24, astonishingly-23)
amod(Wallace-26, agile-24)
compound(Wallace-26, Robert-25)
conj:and(Gardner-14, Wallace-26)
nsubj(tough-34, Wallace-26)
punct(Gardner-14, ,-27)
compound(Tippet-29, Mr.-28)
nmod:poss(work-32, Tippet-29)
case(Tippet-29, 's-30)
amod(work-32, latest-31)
appos(Gardner-14, work-32)
cop(tough-34, is-33)
root(ROOT-0, tough-34)
xcomp(tough-34, going-35)
punct(tough-34, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#four

dance :: Racism has gone largely unnoticed as images of Brazilians of all shades dancing the samba at Carnival created a sense of racial harmony ./.
nsubj(gone-3, Racism-1)
aux(gone-3, has-2)
csubj(created-18, gone-3)
advmod(unnoticed-5, largely-4)
xcomp(gone-3, unnoticed-5)
case(images-7, as-6)
nmod:as(gone-3, images-7)
case(Brazilians-9, of-8)
nmod:of(images-7, Brazilians-9)
case(shades-12, of-10)
det(shades-12, all-11)
nmod:of(Brazilians-9, shades-12)
acl(shades-12, dancing-13)
det(samba-15, the-14)
dobj(dancing-13, samba-15)
case(Carnival-17, at-16)
nmod:at(dancing-13, Carnival-17)
root(ROOT-0, created-18)
det(sense-20, a-19)
dobj(created-18, sense-20)
case(harmony-23, of-21)
amod(harmony-23, racial-22)
nmod:of(sense-20, harmony-23)
punct(created-18, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#samba

dance :: The leads in the second performance -LRB- Ludmila Lopukhova and Simon Dow -RRB- were better than those at the premiere -LRB- Karin Averty and Jean-Charles Gil -RRB- , but there were more enjoyable performances from younger members of the company , such as Joanna Berman , Wendy Van Dyck and Mikko Nissinen , who danced the first act pas de trois on opening night , and Andre Reyes , who replaced the latter on the following afternoon ./.
det(leads-2, The-1)
nsubj(better-15, leads-2)
case(performance-6, in-3)
det(performance-6, the-4)
amod(performance-6, second-5)
nmod:in(leads-2, performance-6)
punct(Lopukhova-9, -LRB--7)
compound(Lopukhova-9, Ludmila-8)
dep(performance-6, Lopukhova-9)
cc(Lopukhova-9, and-10)
compound(Dow-12, Simon-11)
dep(performance-6, Dow-12)
conj:and(Lopukhova-9, Dow-12)
punct(Lopukhova-9, -RRB--13)
cop(better-15, were-14)
root(ROOT-0, better-15)
case(those-17, than-16)
nmod:than(better-15, those-17)
case(premiere-20, at-18)
det(premiere-20, the-19)
nmod:at(those-17, premiere-20)
punct(Averty-23, -LRB--21)
compound(Averty-23, Karin-22)
dep(better-15, Averty-23)
cc(Averty-23, and-24)
compound(Gil-26, Jean-Charles-25)
dep(better-15, Gil-26)
conj:and(Averty-23, Gil-26)
punct(Averty-23, -RRB--27)
punct(better-15, ,-28)
cc(better-15, but-29)
expl(were-31, there-30)
conj:but(better-15, were-31)
amod(performances-34, more-32)
amod(performances-34, enjoyable-33)
nsubj(were-31, performances-34)
case(members-37, from-35)
amod(members-37, younger-36)
nmod:from(performances-34, members-37)
nsubj(danced-55, members-37)
case(company-40, of-38)
det(company-40, the-39)
nmod:of(members-37, company-40)
punct(members-37, ,-41)
case(Berman-45, such-42)
mwe(such-42, as-43)
compound(Berman-45, Joanna-44)
nmod:such_as(members-37, Berman-45)
punct(Berman-45, ,-46)
compound(Dyck-49, Wendy-47)
compound(Dyck-49, Van-48)
nmod:such_as(members-37, Dyck-49)
conj:and(Berman-45, Dyck-49)
cc(Berman-45, and-50)
compound(Nissinen-52, Mikko-51)
nmod:such_as(members-37, Nissinen-52)
conj:and(Berman-45, Nissinen-52)
punct(members-37, ,-53)
ref(members-37, who-54)
acl:relcl(members-37, danced-55)
det(pas-59, the-56)
amod(pas-59, first-57)
compound(pas-59, act-58)
dobj(danced-55, pas-59)
amod(trois-61, de-60)
dep(pas-59, trois-61)
case(night-64, on-62)
amod(night-64, opening-63)
nmod:on(trois-61, night-64)
punct(members-37, ,-65)
cc(members-37, and-66)
compound(Reyes-68, Andre-67)
nmod:from(performances-34, Reyes-68)
conj:and(members-37, Reyes-68)
nsubj(replaced-71, Reyes-68)
punct(Reyes-68, ,-69)
ref(Reyes-68, who-70)
acl:relcl(Reyes-68, replaced-71)
det(latter-73, the-72)
dobj(replaced-71, latter-73)
case(afternoon-77, on-74)
det(afternoon-77, the-75)
amod(afternoon-77, following-76)
nmod:on(replaced-71, afternoon-77)
punct(better-15, .-78)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#pas

dance :: He tap-danced around the stage to his own falsetto and flopped to the floor to the accompaniment of his booming bass ./.
nsubj(tap-danced-2, He-1)
nsubj(flopped-11, He-1)
root(ROOT-0, tap-danced-2)
case(stage-5, around-3)
det(stage-5, the-4)
nmod:around(tap-danced-2, stage-5)
case(falsetto-9, to-6)
nmod:poss(falsetto-9, his-7)
amod(falsetto-9, own-8)
nmod:to(tap-danced-2, falsetto-9)
cc(tap-danced-2, and-10)
conj:and(tap-danced-2, flopped-11)
case(floor-14, to-12)
det(floor-14, the-13)
nmod:to(flopped-11, floor-14)
case(accompaniment-17, to-15)
det(accompaniment-17, the-16)
nmod:to(flopped-11, accompaniment-17)
case(bass-21, of-18)
nmod:poss(bass-21, his-19)
amod(bass-21, booming-20)
nmod:of(accompaniment-17, bass-21)
punct(tap-danced-2, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

dance :: When Danny dances with Helen , who is dubious about the whole enterprise , he tells her that it 's all a surprise for her , it 's her Valentine 's Day card ./.
advmod(tells-16, When-1)
compound(dances-3, Danny-2)
nsubj(tells-16, dances-3)
case(Helen-5, with-4)
nmod:with(dances-3, Helen-5)
nsubj(dubious-9, Helen-5)
punct(Helen-5, ,-6)
ref(Helen-5, who-7)
cop(dubious-9, is-8)
acl:relcl(Helen-5, dubious-9)
case(enterprise-13, about-10)
det(enterprise-13, the-11)
amod(enterprise-13, whole-12)
nmod:about(dubious-9, enterprise-13)
punct(tells-16, ,-14)
nsubj(tells-16, he-15)
advcl(card-33, tells-16)
dobj(tells-16, her-17)
mark(surprise-23, that-18)
nsubj(surprise-23, it-19)
cop(surprise-23, 's-20)
det:predet(surprise-23, all-21)
det(surprise-23, a-22)
ccomp(tells-16, surprise-23)
case(her-25, for-24)
nmod:for(surprise-23, her-25)
punct(card-33, ,-26)
nsubj(card-33, it-27)
cop(card-33, 's-28)
nmod:poss(Valentine-30, her-29)
nmod:poss(card-33, Valentine-30)
case(Valentine-30, 's-31)
compound(card-33, Day-32)
root(ROOT-0, card-33)
punct(card-33, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#helen

dance :: Whether these dancers could ever meet the requirements of `` Raymonda Variations '' and `` Symphony in C , '' the ballets they danced in New York , is doubtful ./.
mark(meet-6, Whether-1)
det(dancers-3, these-2)
nsubj(meet-6, dancers-3)
aux(meet-6, could-4)
advmod(meet-6, ever-5)
advcl(doubtful-30, meet-6)
det(requirements-8, the-7)
dobj(meet-6, requirements-8)
case(Variations-12, of-9)
punct(Variations-12, ``-10)
compound(Variations-12, Raymonda-11)
nmod:of(requirements-8, Variations-12)
punct(Variations-12, ''-13)
cc(Variations-12, and-14)
punct(Variations-12, ``-15)
nmod:of(requirements-8, Symphony-16)
conj:and(Variations-12, Symphony-16)
case(C-18, in-17)
nmod:in(Symphony-16, C-18)
punct(Variations-12, ,-19)
punct(Variations-12, ''-20)
det(ballets-22, the-21)
dep(Variations-12, ballets-22)
nsubj(danced-24, they-23)
acl:relcl(ballets-22, danced-24)
case(York-27, in-25)
compound(York-27, New-26)
nmod:in(danced-24, York-27)
punct(doubtful-30, ,-28)
cop(doubtful-30, is-29)
root(ROOT-0, doubtful-30)
punct(doubtful-30, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#they

dance :: Television commercials expected to air in mid-April in New York and Miami will feature the homespun pair dancing the salsa , advertising sources said ./.
compound(commercials-2, Television-1)
nsubj(feature-14, commercials-2)
acl(commercials-2, expected-3)
mark(air-5, to-4)
xcomp(expected-3, air-5)
case(mid-April-7, in-6)
nmod:in(air-5, mid-April-7)
case(York-10, in-8)
compound(York-10, New-9)
nmod:in(air-5, York-10)
cc(York-10, and-11)
nmod:in(air-5, Miami-12)
conj:and(York-10, Miami-12)
aux(feature-14, will-13)
root(ROOT-0, feature-14)
det(pair-17, the-15)
amod(pair-17, homespun-16)
dobj(feature-14, pair-17)
acl(pair-17, dancing-18)
det(salsa-20, the-19)
dobj(dancing-18, salsa-20)
punct(pair-17, ,-21)
compound(sources-23, advertising-22)
nsubj(said-24, sources-23)
acl:relcl(pair-17, said-24)
punct(feature-14, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#salsa

dance :: Khopa and Ticha danced and juggled soccer balls at a Radio City Music Hall press preview announcing an upcoming tour of the Moscow circus ./.
nsubj(danced-4, Khopa-1)
nsubj(juggled-6, Khopa-1)
cc(Khopa-1, and-2)
conj:and(Khopa-1, Ticha-3)
nsubj(danced-4, Ticha-3)
root(ROOT-0, danced-4)
cc(danced-4, and-5)
conj:and(danced-4, juggled-6)
compound(balls-8, soccer-7)
dobj(danced-4, balls-8)
case(preview-16, at-9)
det(preview-16, a-10)
compound(preview-16, Radio-11)
compound(preview-16, City-12)
compound(preview-16, Music-13)
compound(preview-16, Hall-14)
compound(preview-16, press-15)
nmod:at(danced-4, preview-16)
acl(preview-16, announcing-17)
det(tour-20, an-18)
amod(tour-20, upcoming-19)
dobj(announcing-17, tour-20)
case(circus-24, of-21)
det(circus-24, the-22)
compound(circus-24, Moscow-23)
nmod:of(tour-20, circus-24)
punct(danced-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#balls

dance :: Mr. Waters sets his sights on the `` hairhoppers , '' the polished amateurs who dance on `` The Corny Collins Show , '' his version of `` American Bandstand . ''/''
compound(Waters-2, Mr.-1)
nsubj(sets-3, Waters-2)
root(ROOT-0, sets-3)
nmod:poss(sights-5, his-4)
dobj(sets-3, sights-5)
case(hairhoppers-9, on-6)
det(hairhoppers-9, the-7)
punct(hairhoppers-9, ``-8)
nmod:on(sets-3, hairhoppers-9)
punct(sets-3, ,-10)
punct(sets-3, ''-11)
det(amateurs-14, the-12)
amod(amateurs-14, polished-13)
dobj(sets-3, amateurs-14)
nsubj(dance-16, amateurs-14)
ref(amateurs-14, who-15)
acl:relcl(amateurs-14, dance-16)
case(Show-22, on-17)
punct(Show-22, ``-18)
det(Show-22, The-19)
compound(Show-22, Corny-20)
compound(Show-22, Collins-21)
nmod:on(dance-16, Show-22)
punct(Show-22, ,-23)
punct(Show-22, ''-24)
nmod:poss(version-26, his-25)
dep(Show-22, version-26)
case(Bandstand-30, of-27)
punct(Bandstand-30, ``-28)
amod(Bandstand-30, American-29)
nmod:of(version-26, Bandstand-30)
punct(sets-3, .-31)
punct(sets-3, ''-32)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: dance#amateurs

dance :: The pas de deux danced the past week by Secretary of State Shultz and Senator Sam Nunn has been dreadful political ballet , with the Reagan administration discovering what happens when you choose to dance with your political enemies ./.
det(pas-2, The-1)
nsubj(danced-5, pas-2)
amod(deux-4, de-3)
nsubj(danced-5, deux-4)
csubj(ballet-22, danced-5)
det(week-8, the-6)
amod(week-8, past-7)
nmod:tmod(danced-5, week-8)
case(Secretary-10, by-9)
nmod:by(danced-5, Secretary-10)
case(Shultz-13, of-11)
compound(Shultz-13, State-12)
nmod:of(Secretary-10, Shultz-13)
cc(Shultz-13, and-14)
compound(Nunn-17, Senator-15)
compound(Nunn-17, Sam-16)
nmod:of(Secretary-10, Nunn-17)
conj:and(Shultz-13, Nunn-17)
aux(ballet-22, has-18)
cop(ballet-22, been-19)
advmod(ballet-22, dreadful-20)
amod(ballet-22, political-21)
root(ROOT-0, ballet-22)
punct(ballet-22, ,-23)
mark(discovering-28, with-24)
det(administration-27, the-25)
compound(administration-27, Reagan-26)
nsubj(discovering-28, administration-27)
advcl(ballet-22, discovering-28)
nsubj(happens-30, what-29)
ccomp(discovering-28, happens-30)
advmod(choose-33, when-31)
nsubj(choose-33, you-32)
nsubj:xsubj(dance-35, you-32)
advcl(happens-30, choose-33)
mark(dance-35, to-34)
xcomp(choose-33, dance-35)
case(enemies-39, with-36)
nmod:poss(enemies-39, your-37)
amod(enemies-39, political-38)
nmod:with(dance-35, enemies-39)
punct(ballet-22, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#pas

dance :: They began from scratch , amateurs learning to sing and dance and act , working up to 18 hours a day , almost every day ./.
nsubj(began-2, They-1)
root(ROOT-0, began-2)
case(scratch-4, from-3)
nmod:from(began-2, scratch-4)
punct(began-2, ,-5)
dobj(began-2, amateurs-6)
acl(amateurs-6, learning-7)
mark(sing-9, to-8)
xcomp(learning-7, sing-9)
cc(sing-9, and-10)
xcomp(learning-7, dance-11)
conj:and(sing-9, dance-11)
cc(sing-9, and-12)
xcomp(learning-7, act-13)
conj:and(sing-9, act-13)
punct(sing-9, ,-14)
advcl(sing-9, working-15)
advmod(18-18, up-16)
dep(18-18, to-17)
nummod(hours-19, 18-18)
dobj(working-15, hours-19)
det(day-21, a-20)
nmod:npmod(hours-19, day-21)
punct(working-15, ,-22)
advmod(day-25, almost-23)
det(day-25, every-24)
nmod:tmod(working-15, day-25)
punct(began-2, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

dance :: Plucking bonbons with a pinkie in the air , or daintily miming a billiard shot , he seems almost to be dancing through the role , a rosy cherub in grownup clothing ./.
advcl(seems-18, Plucking-1)
dobj(Plucking-1, bonbons-2)
case(pinkie-5, with-3)
det(pinkie-5, a-4)
nmod:with(Plucking-1, pinkie-5)
case(air-8, in-6)
det(air-8, the-7)
nmod:in(pinkie-5, air-8)
punct(pinkie-5, ,-9)
cc(pinkie-5, or-10)
advmod(miming-12, daintily-11)
nmod:with(Plucking-1, miming-12)
conj:or(pinkie-5, miming-12)
det(shot-15, a-13)
amod(shot-15, billiard-14)
dobj(miming-12, shot-15)
punct(seems-18, ,-16)
nsubj(seems-18, he-17)
nsubj:xsubj(dancing-22, he-17)
root(ROOT-0, seems-18)
advmod(seems-18, almost-19)
mark(dancing-22, to-20)
aux(dancing-22, be-21)
xcomp(seems-18, dancing-22)
case(role-25, through-23)
det(role-25, the-24)
nmod:through(dancing-22, role-25)
punct(role-25, ,-26)
det(cherub-29, a-27)
amod(cherub-29, rosy-28)
appos(role-25, cherub-29)
case(clothing-32, in-30)
amod(clothing-32, grownup-31)
nmod:in(cherub-29, clothing-32)
punct(seems-18, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#he

dance :: Upstairs over the bufyet is the ballroom where Natasha danced ./.
nsubj(ballroom-7, Upstairs-1)
case(bufyet-4, over-2)
det(bufyet-4, the-3)
nmod:over(Upstairs-1, bufyet-4)
cop(ballroom-7, is-5)
det(ballroom-7, the-6)
root(ROOT-0, ballroom-7)
advmod(danced-10, where-8)
nsubj(danced-10, Natasha-9)
acl:relcl(ballroom-7, danced-10)
punct(ballroom-7, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#natasha

dance :: With their wives and girlfriends in Mexico , it 's common to see men dancing alone here ./.
case(wives-3, With-1)
nmod:poss(wives-3, their-2)
nmod:with(common-11, wives-3)
cc(wives-3, and-4)
conj:and(wives-3, girlfriends-5)
nmod:with(common-11, girlfriends-5)
case(Mexico-7, in-6)
nmod:in(wives-3, Mexico-7)
punct(common-11, ,-8)
nsubj(common-11, it-9)
nsubj:xsubj(see-13, it-9)
cop(common-11, 's-10)
root(ROOT-0, common-11)
mark(see-13, to-12)
xcomp(common-11, see-13)
nsubj(dancing-15, men-14)
dep(see-13, dancing-15)
advmod(dancing-15, alone-16)
advmod(dancing-15, here-17)
punct(common-11, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#men

dance :: `` I was so happy that I practically danced back into the house , '' Mr. Popejoy says ./.
punct(says-18, ``-1)
nsubj(happy-5, I-2)
cop(happy-5, was-3)
advmod(happy-5, so-4)
ccomp(says-18, happy-5)
mark(danced-9, that-6)
nsubj(danced-9, I-7)
advmod(danced-9, practically-8)
ccomp(happy-5, danced-9)
advmod(danced-9, back-10)
case(house-13, into-11)
det(house-13, the-12)
nmod:into(danced-9, house-13)
punct(says-18, ,-14)
punct(says-18, ''-15)
compound(Popejoy-17, Mr.-16)
nsubj(says-18, Popejoy-17)
root(ROOT-0, says-18)
punct(says-18, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#i

dance :: In interviews , he says , `` you 're always dancing , always having to show your best side , every day trying to be up when you already know what the outcome will be . ''/''
case(interviews-2, In-1)
nmod:in(dancing-11, interviews-2)
punct(says-5, ,-3)
nsubj(says-5, he-4)
parataxis(dancing-11, says-5)
punct(says-5, ,-6)
punct(dancing-11, ``-7)
nsubj(dancing-11, you-8)
aux(dancing-11, 're-9)
advmod(dancing-11, always-10)
root(ROOT-0, dancing-11)
punct(dancing-11, ,-12)
advmod(having-14, always-13)
advcl(dancing-11, having-14)
mark(show-16, to-15)
xcomp(having-14, show-16)
nmod:poss(side-19, your-17)
amod(side-19, best-18)
dobj(show-16, side-19)
punct(dancing-11, ,-20)
det(day-22, every-21)
nmod:tmod(dancing-11, day-22)
acl(day-22, trying-23)
mark(be-25, to-24)
xcomp(trying-23, be-25)
advmod(be-25, up-26)
advmod(know-30, when-27)
nsubj(know-30, you-28)
advmod(know-30, already-29)
advcl(up-26, know-30)
dobj(be-35, what-31)
det(outcome-33, the-32)
nsubj(be-35, outcome-33)
aux(be-35, will-34)
ccomp(know-30, be-35)
punct(dancing-11, .-36)
punct(dancing-11, ''-37)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: dance#you

dance :: Whether these dancers could ever meet the requirements of `` Raymonda Variations '' and `` Symphony in C , '' the ballets they danced in New York , is doubtful ./.
mark(meet-6, Whether-1)
det(dancers-3, these-2)
nsubj(meet-6, dancers-3)
aux(meet-6, could-4)
advmod(meet-6, ever-5)
advcl(doubtful-30, meet-6)
det(requirements-8, the-7)
dobj(meet-6, requirements-8)
case(Variations-12, of-9)
punct(Variations-12, ``-10)
compound(Variations-12, Raymonda-11)
nmod:of(requirements-8, Variations-12)
punct(Variations-12, ''-13)
cc(Variations-12, and-14)
punct(Variations-12, ``-15)
nmod:of(requirements-8, Symphony-16)
conj:and(Variations-12, Symphony-16)
case(C-18, in-17)
nmod:in(Symphony-16, C-18)
punct(Variations-12, ,-19)
punct(Variations-12, ''-20)
det(ballets-22, the-21)
dep(Variations-12, ballets-22)
nsubj(danced-24, they-23)
acl:relcl(ballets-22, danced-24)
case(York-27, in-25)
compound(York-27, New-26)
nmod:in(danced-24, York-27)
punct(doubtful-30, ,-28)
cop(doubtful-30, is-29)
root(ROOT-0, doubtful-30)
punct(doubtful-30, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#they

dance :: Television commercials expected to air in mid-April in New York and Miami will feature the homespun pair dancing the salsa , advertising sources said ./.
compound(commercials-2, Television-1)
nsubj(feature-14, commercials-2)
acl(commercials-2, expected-3)
mark(air-5, to-4)
xcomp(expected-3, air-5)
case(mid-April-7, in-6)
nmod:in(air-5, mid-April-7)
case(York-10, in-8)
compound(York-10, New-9)
nmod:in(air-5, York-10)
cc(York-10, and-11)
nmod:in(air-5, Miami-12)
conj:and(York-10, Miami-12)
aux(feature-14, will-13)
root(ROOT-0, feature-14)
det(pair-17, the-15)
amod(pair-17, homespun-16)
dobj(feature-14, pair-17)
acl(pair-17, dancing-18)
det(salsa-20, the-19)
dobj(dancing-18, salsa-20)
punct(pair-17, ,-21)
compound(sources-23, advertising-22)
nsubj(said-24, sources-23)
acl:relcl(pair-17, said-24)
punct(feature-14, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#salsa

dance :: `` Seems like you 'll never make it to the top unless you know how to dance , '' the announcer intones ./.
punct(intones-22, ``-1)
ccomp(intones-22, Seems-2)
mark(make-7, like-3)
nsubj(make-7, you-4)
aux(make-7, 'll-5)
neg(make-7, never-6)
advcl(Seems-2, make-7)
dobj(make-7, it-8)
case(top-11, to-9)
det(top-11, the-10)
nmod:to(make-7, top-11)
mark(know-14, unless-12)
nsubj(know-14, you-13)
advcl(make-7, know-14)
advmod(dance-17, how-15)
mark(dance-17, to-16)
ccomp(know-14, dance-17)
punct(intones-22, ,-18)
punct(intones-22, ''-19)
det(announcer-21, the-20)
nsubj(intones-22, announcer-21)
root(ROOT-0, intones-22)
punct(intones-22, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

dance :: I , for one , am `` dancing on the ceiling . ''/''
nsubj(dancing-8, I-1)
punct(dancing-8, ,-2)
case(one-4, for-3)
nmod:for(dancing-8, one-4)
punct(dancing-8, ,-5)
cop(dancing-8, am-6)
punct(dancing-8, ``-7)
root(ROOT-0, dancing-8)
case(ceiling-11, on-9)
det(ceiling-11, the-10)
nmod:on(dancing-8, ceiling-11)
punct(dancing-8, .-12)
punct(dancing-8, ''-13)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: dance#i

dance :: Mr. Waters sets his sights on the `` hairhoppers , '' the polished amateurs who dance on `` The Corny Collins Show , '' his version of `` American Bandstand . ''/''
compound(Waters-2, Mr.-1)
nsubj(sets-3, Waters-2)
root(ROOT-0, sets-3)
nmod:poss(sights-5, his-4)
dobj(sets-3, sights-5)
case(hairhoppers-9, on-6)
det(hairhoppers-9, the-7)
punct(hairhoppers-9, ``-8)
nmod:on(sets-3, hairhoppers-9)
punct(sets-3, ,-10)
punct(sets-3, ''-11)
det(amateurs-14, the-12)
amod(amateurs-14, polished-13)
dobj(sets-3, amateurs-14)
nsubj(dance-16, amateurs-14)
ref(amateurs-14, who-15)
acl:relcl(amateurs-14, dance-16)
case(Show-22, on-17)
punct(Show-22, ``-18)
det(Show-22, The-19)
compound(Show-22, Corny-20)
compound(Show-22, Collins-21)
nmod:on(dance-16, Show-22)
punct(Show-22, ,-23)
punct(Show-22, ''-24)
nmod:poss(version-26, his-25)
dep(Show-22, version-26)
case(Bandstand-30, of-27)
punct(Bandstand-30, ``-28)
amod(Bandstand-30, American-29)
nmod:of(version-26, Bandstand-30)
punct(sets-3, .-31)
punct(sets-3, ''-32)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: dance#amateurs

dance :: This three-part `` Nature '' miniseries presents the history of the area and its amazingly rich flora and fauna , including bat-eared foxes , dancing ostriches , shrimp-eating flamingos and leaping bush babies ./.
det(miniseries-6, This-1)
amod(miniseries-6, three-part-2)
punct(miniseries-6, ``-3)
compound(miniseries-6, Nature-4)
punct(miniseries-6, ''-5)
nsubj(presents-7, miniseries-6)
root(ROOT-0, presents-7)
det(history-9, the-8)
dobj(presents-7, history-9)
case(area-12, of-10)
det(area-12, the-11)
nmod:of(history-9, area-12)
cc(area-12, and-13)
nmod:poss(flora-17, its-14)
advmod(rich-16, amazingly-15)
amod(flora-17, rich-16)
nmod:of(history-9, flora-17)
conj:and(area-12, flora-17)
cc(flora-17, and-18)
conj:and(area-12, fauna-19)
conj:and(flora-17, fauna-19)
punct(history-9, ,-20)
case(foxes-23, including-21)
amod(foxes-23, bat-eared-22)
nmod:including(history-9, foxes-23)
punct(foxes-23, ,-24)
amod(ostriches-26, dancing-25)
nmod:including(history-9, ostriches-26)
conj:and(foxes-23, ostriches-26)
punct(foxes-23, ,-27)
amod(flamingos-29, shrimp-eating-28)
nmod:including(history-9, flamingos-29)
conj:and(foxes-23, flamingos-29)
cc(foxes-23, and-30)
nmod:including(history-9, leaping-31)
conj:and(foxes-23, leaping-31)
compound(babies-33, bush-32)
dobj(leaping-31, babies-33)
punct(presents-7, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#ostriches

dance :: `` Sam is one of a kind , '' Mr. Glass said , adding that he was n't `` going to dance the hula on Wall Street . ''/''
punct(said-12, ``-1)
nsubj(one-4, Sam-2)
cop(one-4, is-3)
ccomp(said-12, one-4)
case(kind-7, of-5)
det(kind-7, a-6)
nmod:of(one-4, kind-7)
punct(said-12, ,-8)
punct(said-12, ''-9)
compound(Glass-11, Mr.-10)
nsubj(said-12, Glass-11)
root(ROOT-0, said-12)
punct(said-12, ,-13)
xcomp(said-12, adding-14)
mark(going-20, that-15)
nsubj(going-20, he-16)
nsubj:xsubj(dance-22, he-16)
aux(going-20, was-17)
neg(going-20, n't-18)
punct(going-20, ``-19)
ccomp(adding-14, going-20)
mark(dance-22, to-21)
xcomp(going-20, dance-22)
det(hula-24, the-23)
dobj(dance-22, hula-24)
case(Street-27, on-25)
compound(Street-27, Wall-26)
nmod:on(dance-22, Street-27)
punct(said-12, .-28)
punct(said-12, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: dance#hula

dance :: Yet a stroll through any department store makes it plain that `` yuppie puppies '' have visions of dollar-signs dancing in their heads ./.
advmod(stroll-3, Yet-1)
det(stroll-3, a-2)
nsubj(makes-8, stroll-3)
case(store-7, through-4)
det(store-7, any-5)
compound(store-7, department-6)
nmod:through(stroll-3, store-7)
root(ROOT-0, makes-8)
nsubj(have-16, it-9)
dep(have-16, plain-10)
mark(have-16, that-11)
punct(puppies-14, ``-12)
compound(puppies-14, yuppie-13)
nsubj(have-16, puppies-14)
punct(puppies-14, ''-15)
xcomp(makes-8, have-16)
dobj(have-16, visions-17)
case(dancing-20, of-18)
amod(dancing-20, dollar-signs-19)
nmod:of(visions-17, dancing-20)
case(heads-23, in-21)
nmod:poss(heads-23, their-22)
nmod:in(have-16, heads-23)
punct(makes-8, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

dance :: Tomorrow night at New York 's swank Pierre Hotel , 200 advertising executives in black tie will dance to the jazz of Ann Hampton Callaway and dine on grilled salmon , filet of beef Peregourdine and pastry tulips filled with praline ice cream ./.
compound(night-2, Tomorrow-1)
nsubj(dance-18, night-2)
nsubj(dine-27, night-2)
case(Hotel-9, at-3)
compound(York-5, New-4)
nmod:poss(Hotel-9, York-5)
case(York-5, 's-6)
compound(Hotel-9, swank-7)
compound(Hotel-9, Pierre-8)
nmod:at(night-2, Hotel-9)
punct(Hotel-9, ,-10)
nummod(executives-13, 200-11)
compound(executives-13, advertising-12)
appos(Hotel-9, executives-13)
case(tie-16, in-14)
amod(tie-16, black-15)
nmod:in(executives-13, tie-16)
aux(dance-18, will-17)
root(ROOT-0, dance-18)
case(jazz-21, to-19)
det(jazz-21, the-20)
nmod:to(dance-18, jazz-21)
case(Callaway-25, of-22)
compound(Callaway-25, Ann-23)
compound(Callaway-25, Hampton-24)
nmod:of(jazz-21, Callaway-25)
cc(dance-18, and-26)
conj:and(dance-18, dine-27)
case(salmon-30, on-28)
amod(salmon-30, grilled-29)
nmod:on(dine-27, salmon-30)
punct(salmon-30, ,-31)
appos(salmon-30, filet-32)
case(Peregourdine-35, of-33)
compound(Peregourdine-35, beef-34)
nmod:of(filet-32, Peregourdine-35)
cc(Peregourdine-35, and-36)
compound(tulips-38, pastry-37)
nmod:of(filet-32, tulips-38)
conj:and(Peregourdine-35, tulips-38)
acl(filet-32, filled-39)
case(cream-43, with-40)
compound(cream-43, praline-41)
compound(cream-43, ice-42)
nmod:with(filled-39, cream-43)
punct(dance-18, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#night

dance :: As the wiry Mr. Rios dances with a plump , middle-age woman , he yells in Spanish , `` I 'm legal now . ''/''
mark(dances-6, As-1)
det(Rios-5, the-2)
amod(Rios-5, wiry-3)
compound(Rios-5, Mr.-4)
nsubj(dances-6, Rios-5)
advcl(yells-15, dances-6)
case(woman-12, with-7)
det(woman-12, a-8)
amod(woman-12, plump-9)
punct(woman-12, ,-10)
amod(woman-12, middle-age-11)
nmod:with(dances-6, woman-12)
punct(yells-15, ,-13)
nsubj(yells-15, he-14)
root(ROOT-0, yells-15)
case(Spanish-17, in-16)
nmod:in(yells-15, Spanish-17)
punct(yells-15, ,-18)
punct(yells-15, ``-19)
nsubj(legal-22, I-20)
cop(legal-22, 'm-21)
ccomp(yells-15, legal-22)
advmod(legal-22, now-23)
punct(yells-15, .-24)
punct(yells-15, ''-25)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: dance#rios

dance :: With their wives and girlfriends in Mexico , it 's common to see men dancing alone here ./.
case(wives-3, With-1)
nmod:poss(wives-3, their-2)
nmod:with(common-11, wives-3)
cc(wives-3, and-4)
conj:and(wives-3, girlfriends-5)
nmod:with(common-11, girlfriends-5)
case(Mexico-7, in-6)
nmod:in(wives-3, Mexico-7)
punct(common-11, ,-8)
nsubj(common-11, it-9)
nsubj:xsubj(see-13, it-9)
cop(common-11, 's-10)
root(ROOT-0, common-11)
mark(see-13, to-12)
xcomp(common-11, see-13)
nsubj(dancing-15, men-14)
dep(see-13, dancing-15)
advmod(dancing-15, alone-16)
advmod(dancing-15, here-17)
punct(common-11, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#men

dance :: And a family in adjacent Hamilton County turned to him after it got little response from local authorities to its complaints about people dancing and praying in a nearby graveyard ./.
cc(turned-8, And-1)
det(family-3, a-2)
nsubj(turned-8, family-3)
case(County-7, in-4)
amod(County-7, adjacent-5)
compound(County-7, Hamilton-6)
nmod:in(family-3, County-7)
root(ROOT-0, turned-8)
case(him-10, to-9)
nmod:to(turned-8, him-10)
mark(got-13, after-11)
nsubj(got-13, it-12)
advcl(turned-8, got-13)
amod(response-15, little-14)
dobj(got-13, response-15)
case(authorities-18, from-16)
amod(authorities-18, local-17)
nmod:from(response-15, authorities-18)
case(complaints-21, to-19)
nmod:poss(complaints-21, its-20)
nmod:to(got-13, complaints-21)
case(people-23, about-22)
nmod:about(complaints-21, people-23)
acl(people-23, dancing-24)
cc(dancing-24, and-25)
acl(people-23, praying-26)
conj:and(dancing-24, praying-26)
case(graveyard-30, in-27)
det(graveyard-30, a-28)
amod(graveyard-30, nearby-29)
nmod:in(dancing-24, graveyard-30)
punct(turned-8, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#graveyard

dance :: Yet when ordered to dance by his master , he gamely sprinkles a little sand on the ground and shuffles through a series of rapid dance steps ending in a pathetic little pawing motion that symbolizes his entrapment ./.
advmod(sprinkles-12, Yet-1)
advmod(ordered-3, when-2)
advcl(sprinkles-12, ordered-3)
mark(dance-5, to-4)
xcomp(ordered-3, dance-5)
case(master-8, by-6)
nmod:poss(master-8, his-7)
nmod:by(dance-5, master-8)
punct(sprinkles-12, ,-9)
nsubj(sprinkles-12, he-10)
nsubj(shuffles-20, he-10)
advmod(sprinkles-12, gamely-11)
root(ROOT-0, sprinkles-12)
det(sand-15, a-13)
amod(sand-15, little-14)
dobj(sprinkles-12, sand-15)
case(ground-18, on-16)
det(ground-18, the-17)
nmod:on(sprinkles-12, ground-18)
cc(sprinkles-12, and-19)
conj:and(sprinkles-12, shuffles-20)
case(series-23, through-21)
det(series-23, a-22)
nmod:through(shuffles-20, series-23)
case(steps-27, of-24)
amod(steps-27, rapid-25)
compound(steps-27, dance-26)
nmod:of(series-23, steps-27)
acl(steps-27, ending-28)
case(little-32, in-29)
det(little-32, a-30)
amod(little-32, pathetic-31)
nmod:in(ending-28, little-32)
amod(motion-34, pawing-33)
dep(little-32, motion-34)
nsubj(symbolizes-36, motion-34)
ref(motion-34, that-35)
acl:relcl(motion-34, symbolizes-36)
nmod:poss(entrapment-38, his-37)
dobj(symbolizes-36, entrapment-38)
punct(sprinkles-12, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#master

dance :: She watched an older couple dancing outside in the restaurant 's courtyard ./.
nsubj(watched-2, She-1)
root(ROOT-0, watched-2)
det(dancing-6, an-3)
amod(dancing-6, older-4)
compound(dancing-6, couple-5)
dobj(watched-2, dancing-6)
case(courtyard-12, outside-7)
case(courtyard-12, in-8)
det(restaurant-10, the-9)
nmod:poss(courtyard-12, restaurant-10)
case(restaurant-10, 's-11)
nmod:in(dancing-6, courtyard-12)
punct(watched-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#courtyard

dance :: They danced to the funk rock of a live band and grilled hot dogs and ribs ./.
nsubj(danced-2, They-1)
root(ROOT-0, danced-2)
case(rock-6, to-3)
det(rock-6, the-4)
compound(rock-6, funk-5)
nmod:to(danced-2, rock-6)
case(band-10, of-7)
det(band-10, a-8)
amod(band-10, live-9)
nmod:of(rock-6, band-10)
cc(band-10, and-11)
amod(dogs-14, grilled-12)
amod(dogs-14, hot-13)
nmod:of(rock-6, dogs-14)
conj:and(band-10, dogs-14)
cc(dogs-14, and-15)
conj:and(band-10, ribs-16)
conj:and(dogs-14, ribs-16)
punct(danced-2, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#they

dance :: `` And there 's Sam Nunn dancing presumably with his wife , '' she says , squinting hard from her distant perch ./.
punct('s-4, ``-1)
cc('s-4, And-2)
expl('s-4, there-3)
dep(says-15, 's-4)
compound(Nunn-6, Sam-5)
nsubj(dancing-7, Nunn-6)
dep('s-4, dancing-7)
advmod(dancing-7, presumably-8)
case(wife-11, with-9)
nmod:poss(wife-11, his-10)
nmod:with(dancing-7, wife-11)
punct('s-4, ,-12)
punct('s-4, ''-13)
nsubj(says-15, she-14)
root(ROOT-0, says-15)
punct(says-15, ,-16)
xcomp(says-15, squinting-17)
advmod(squinting-17, hard-18)
case(perch-22, from-19)
nmod:poss(perch-22, her-20)
amod(perch-22, distant-21)
nmod:from(squinting-17, perch-22)
punct(says-15, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#nunn

dance :: In the third `` mansion , '' the lascivious emperor , Diocletian -LRB- Patrick Dupond -RRB- , dances a pas de deux with the youth and then repeats it , almost step for step , with the queen ./.
case(mansion-5, In-1)
det(mansion-5, the-2)
amod(mansion-5, third-3)
punct(mansion-5, ``-4)
root(ROOT-0, mansion-5)
punct(mansion-5, ,-6)
root(,-6, ''-7)
det(emperor-10, the-8)
amod(emperor-10, lascivious-9)
root(''-7, emperor-10)
punct(emperor-10, ,-11)
appos(emperor-10, Diocletian-12)
punct(Dupond-15, -LRB--13)
compound(Dupond-15, Patrick-14)
appos(Diocletian-12, Dupond-15)
punct(Dupond-15, -RRB--16)
punct(emperor-10, ,-17)
appos(emperor-10, dances-18)
det(pas-20, a-19)
dep(dances-18, pas-20)
amod(deux-22, de-21)
dep(pas-20, deux-22)
case(youth-25, with-23)
det(youth-25, the-24)
nmod:with(deux-22, youth-25)
cc(emperor-10, and-26)
advmod(repeats-28, then-27)
root(''-7, repeats-28)
conj:and(emperor-10, repeats-28)
dobj(repeats-28, it-29)
punct(emperor-10, ,-30)
advmod(step-32, almost-31)
appos(emperor-10, step-32)
case(step-34, for-33)
nmod:for(step-32, step-34)
punct(emperor-10, ,-35)
case(queen-38, with-36)
det(queen-38, the-37)
nmod:with(emperor-10, queen-38)
punct(emperor-10, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

dance :: Set up on a strobe-lighted stage , Barbie and her buddies appear to move all by themselves , holding guitars and dancing up a storm amid flashing blue and pink lights ./.
nsubj(appear-12, Set-1)
nsubj:xsubj(move-14, Set-1)
compound:prt(Set-1, up-2)
case(stage-6, on-3)
det(stage-6, a-4)
amod(stage-6, strobe-lighted-5)
nmod:on(Set-1, stage-6)
punct(stage-6, ,-7)
nmod:on(Set-1, Barbie-8)
conj:and(stage-6, Barbie-8)
cc(stage-6, and-9)
nmod:poss(buddies-11, her-10)
nmod:on(Set-1, buddies-11)
conj:and(stage-6, buddies-11)
root(ROOT-0, appear-12)
mark(move-14, to-13)
xcomp(appear-12, move-14)
dobj(move-14, all-15)
case(themselves-17, by-16)
nmod:by(move-14, themselves-17)
punct(appear-12, ,-18)
ccomp(appear-12, holding-19)
dobj(holding-19, guitars-20)
cc(holding-19, and-21)
ccomp(appear-12, dancing-22)
conj:and(holding-19, dancing-22)
compound:prt(dancing-22, up-23)
det(storm-25, a-24)
dobj(dancing-22, storm-25)
mark(flashing-27, amid-26)
advcl(holding-19, flashing-27)
amod(lights-31, blue-28)
cc(blue-28, and-29)
conj:and(blue-28, pink-30)
amod(lights-31, pink-30)
dobj(flashing-27, lights-31)
punct(appear-12, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#storm

dance :: Meanwhile , though , we may ask what will happen to dance back here , where the facilities Brussels has offered Mr. Morris , including a $ 1.5 million annual budget , are apparently not to be thought of ./.
advmod(ask-7, Meanwhile-1)
punct(ask-7, ,-2)
advmod(ask-7, though-3)
punct(ask-7, ,-4)
nsubj(ask-7, we-5)
aux(ask-7, may-6)
root(ROOT-0, ask-7)
nsubj(happen-10, what-8)
nsubj:xsubj(dance-12, what-8)
aux(happen-10, will-9)
ccomp(ask-7, happen-10)
mark(dance-12, to-11)
xcomp(happen-10, dance-12)
advmod(dance-12, back-13)
advmod(dance-12, here-14)
punct(happen-10, ,-15)
advmod(thought-38, where-16)
det(facilities-18, the-17)
nsubjpass(thought-38, facilities-18)
nsubj(offered-21, Brussels-19)
aux(offered-21, has-20)
acl:relcl(facilities-18, offered-21)
compound(Morris-23, Mr.-22)
dobj(offered-21, Morris-23)
punct(Morris-23, ,-24)
case(budget-31, including-25)
det(budget-31, a-26)
amod(budget-31, $-27)
compound(million-29, 1.5-28)
nummod($-27, million-29)
amod(budget-31, annual-30)
nmod:including(Morris-23, budget-31)
punct(facilities-18, ,-32)
auxpass(thought-38, are-33)
advmod(thought-38, apparently-34)
neg(thought-38, not-35)
mark(thought-38, to-36)
auxpass(thought-38, be-37)
advcl(happen-10, thought-38)
nmod(thought-38, of-39)
punct(ask-7, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#what

dance :: And one of the congregation 's most remarkable and fervent prayers came from worshipers toward the back of the church who began dancing and chanting: `` Come , Tambo , come . ''/''
cc(came-12, And-1)
nsubj(came-12, one-2)
case(prayers-11, of-3)
det(congregation-5, the-4)
nmod:poss(prayers-11, congregation-5)
case(congregation-5, 's-6)
advmod(remarkable-8, most-7)
amod(prayers-11, remarkable-8)
cc(remarkable-8, and-9)
conj:and(remarkable-8, fervent-10)
amod(prayers-11, fervent-10)
nmod:of(one-2, prayers-11)
root(ROOT-0, came-12)
case(worshipers-14, from-13)
nmod:from(came-12, worshipers-14)
case(back-17, toward-15)
det(back-17, the-16)
nmod:toward(worshipers-14, back-17)
case(church-20, of-18)
det(church-20, the-19)
nmod:of(back-17, church-20)
nsubj(began-22, church-20)
ref(church-20, who-21)
acl:relcl(church-20, began-22)
ccomp(began-22, dancing-23)
cc(dancing-23, and-24)
ccomp(began-22, chanting-25)
conj:and(dancing-23, chanting-25)
punct(came-12, :-26)
punct(came-12, ``-27)
xcomp(came-12, Come-28)
punct(Come-28, ,-29)
dep(Come-28, Tambo-30)
punct(Tambo-30, ,-31)
dep(Tambo-30, come-32)
punct(came-12, .-33)
punct(came-12, ''-34)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

dance :: In company with Susan Jaffe , Christine Dunham and Leslie Browne , Mikhail Baryshnikov , formerly of Leningrad 's Kirov Ballet , and now director of American Ballet Theatre , danced the revised version of Balanchine 's sublime `` Apollo '' with a blend of spontaneity and concentration that charged the entire evening with wonder ./.
case(company-2, In-1)
nmod:in(danced-31, company-2)
case(Jaffe-5, with-3)
compound(Jaffe-5, Susan-4)
nmod:with(company-2, Jaffe-5)
punct(Jaffe-5, ,-6)
compound(Dunham-8, Christine-7)
nmod:with(company-2, Dunham-8)
conj:and(Jaffe-5, Dunham-8)
cc(Jaffe-5, and-9)
compound(Browne-11, Leslie-10)
nmod:with(company-2, Browne-11)
conj:and(Jaffe-5, Browne-11)
punct(Browne-11, ,-12)
compound(Baryshnikov-14, Mikhail-13)
appos(Browne-11, Baryshnikov-14)
punct(Browne-11, ,-15)
advmod(Ballet-21, formerly-16)
case(Ballet-21, of-17)
nmod:poss(Ballet-21, Leningrad-18)
case(Leningrad-18, 's-19)
compound(Ballet-21, Kirov-20)
nmod:of(company-2, Ballet-21)
punct(Ballet-21, ,-22)
cc(Ballet-21, and-23)
advmod(director-25, now-24)
nmod:of(company-2, director-25)
conj:and(Ballet-21, director-25)
case(Theatre-29, of-26)
amod(Theatre-29, American-27)
amod(Theatre-29, Ballet-28)
nmod:of(director-25, Theatre-29)
punct(danced-31, ,-30)
root(ROOT-0, danced-31)
det(version-34, the-32)
amod(version-34, revised-33)
dobj(danced-31, version-34)
case(Apollo-40, of-35)
nmod:poss(Apollo-40, Balanchine-36)
case(Balanchine-36, 's-37)
amod(Apollo-40, sublime-38)
punct(Apollo-40, ``-39)
nmod:of(version-34, Apollo-40)
punct(Apollo-40, ''-41)
case(blend-44, with-42)
det(blend-44, a-43)
nmod:with(danced-31, blend-44)
case(spontaneity-46, of-45)
nmod:of(blend-44, spontaneity-46)
nsubj(charged-50, spontaneity-46)
cc(spontaneity-46, and-47)
nmod:of(blend-44, concentration-48)
conj:and(spontaneity-46, concentration-48)
nsubj(charged-50, concentration-48)
ref(spontaneity-46, that-49)
acl:relcl(spontaneity-46, charged-50)
det(evening-53, the-51)
amod(evening-53, entire-52)
dobj(charged-50, evening-53)
case(wonder-55, with-54)
nmod:with(charged-50, wonder-55)
punct(danced-31, .-56)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#apollo

dance :: Indeed , the musical 's whole point is expressed through a single climactic , apocalyptic number called `` Rockland , '' in which the cast , suddenly dressed in hip , punky clothes , leather jackets and army fatigues , sings `` We dance together in a bar to the same creeping sense of ennui . ''/''
advmod(expressed-9, Indeed-1)
punct(expressed-9, ,-2)
det(musical-4, the-3)
nmod:poss(point-7, musical-4)
case(musical-4, 's-5)
amod(point-7, whole-6)
nsubjpass(expressed-9, point-7)
auxpass(expressed-9, is-8)
root(ROOT-0, expressed-9)
case(number-16, through-10)
det(number-16, a-11)
amod(number-16, single-12)
amod(number-16, climactic-13)
punct(number-16, ,-14)
amod(number-16, apocalyptic-15)
nmod:through(expressed-9, number-16)
acl(number-16, called-17)
punct(Rockland-19, ``-18)
xcomp(called-17, Rockland-19)
punct(expressed-9, ,-20)
punct(expressed-9, ''-21)
case(which-23, in-22)
nmod:in(sings-41, which-23)
det(cast-25, the-24)
nsubj(sings-41, cast-25)
punct(cast-25, ,-26)
advmod(dressed-28, suddenly-27)
acl(cast-25, dressed-28)
case(hip-30, in-29)
nmod:in(dressed-28, hip-30)
punct(hip-30, ,-31)
amod(clothes-33, punky-32)
nmod:in(dressed-28, clothes-33)
conj:and(hip-30, clothes-33)
punct(hip-30, ,-34)
compound(jackets-36, leather-35)
nmod:in(dressed-28, jackets-36)
conj:and(hip-30, jackets-36)
cc(hip-30, and-37)
compound(fatigues-39, army-38)
nmod:in(dressed-28, fatigues-39)
conj:and(hip-30, fatigues-39)
punct(cast-25, ,-40)
ccomp(expressed-9, sings-41)
punct(sings-41, ``-42)
nsubj(dance-44, We-43)
ccomp(sings-41, dance-44)
advmod(dance-44, together-45)
case(bar-48, in-46)
det(bar-48, a-47)
nmod:in(dance-44, bar-48)
case(sense-53, to-49)
det(sense-53, the-50)
amod(sense-53, same-51)
amod(sense-53, creeping-52)
nmod:to(dance-44, sense-53)
case(ennui-55, of-54)
nmod:of(sense-53, ennui-55)
punct(expressed-9, .-56)
punct(expressed-9, ''-57)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: dance#we

dance :: Instead of dancing they watch rock video . ''/''
mark(dancing-3, Instead-1)
mwe(Instead-1, of-2)
root(ROOT-0, dancing-3)
nsubj(watch-5, they-4)
ccomp(dancing-3, watch-5)
compound(video-7, rock-6)
dobj(watch-5, video-7)
punct(dancing-3, .-8)
punct(dancing-3, ''-9)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

dance :: In his own weird way , Mr. Waters has captured the gleeful garishness of the early '60s , when high-school girls wore demure bows in their ratted hair and deadened their lips with palest pink lip gloss -- and believed that racial harmony was inevitable if teens of all flavors could dance together on TV ./.
case(way-5, In-1)
nmod:poss(way-5, his-2)
amod(way-5, own-3)
amod(way-5, weird-4)
nmod:in(captured-10, way-5)
punct(captured-10, ,-6)
compound(Waters-8, Mr.-7)
nsubj(captured-10, Waters-8)
nsubj(believed-40, Waters-8)
aux(captured-10, has-9)
root(ROOT-0, captured-10)
det(garishness-13, the-11)
amod(garishness-13, gleeful-12)
dobj(captured-10, garishness-13)
case('60s-17, of-14)
det('60s-17, the-15)
amod('60s-17, early-16)
nmod:of(garishness-13, '60s-17)
punct(garishness-13, ,-18)
advmod(wore-22, when-19)
compound(girls-21, high-school-20)
nsubj(wore-22, girls-21)
nsubj(deadened-30, girls-21)
acl:relcl(garishness-13, wore-22)
amod(bows-24, demure-23)
dobj(wore-22, bows-24)
case(hair-28, in-25)
nmod:poss(hair-28, their-26)
amod(hair-28, ratted-27)
nmod:in(wore-22, hair-28)
cc(wore-22, and-29)
acl:relcl(garishness-13, deadened-30)
conj:and(wore-22, deadened-30)
nmod:poss(lips-32, their-31)
dobj(deadened-30, lips-32)
case(lip-36, with-33)
compound(lip-36, palest-34)
compound(lip-36, pink-35)
nmod:with(deadened-30, lip-36)
dep(wore-22, gloss-37)
punct(captured-10, ---38)
cc(captured-10, and-39)
conj:and(captured-10, believed-40)
mark(inevitable-45, that-41)
amod(harmony-43, racial-42)
nsubj(inevitable-45, harmony-43)
cop(inevitable-45, was-44)
ccomp(believed-40, inevitable-45)
mark(dance-52, if-46)
nsubj(dance-52, teens-47)
case(flavors-50, of-48)
det(flavors-50, all-49)
nmod:of(teens-47, flavors-50)
aux(dance-52, could-51)
advcl(inevitable-45, dance-52)
advmod(dance-52, together-53)
case(TV-55, on-54)
nmod:on(dance-52, TV-55)
punct(captured-10, .-56)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#teens

dance :: For the group dances , Mr. Morris devised choreography that was more athletic and no less compelling ./.
case(dances-4, For-1)
det(dances-4, the-2)
compound(dances-4, group-3)
nmod:for(devised-8, dances-4)
punct(devised-8, ,-5)
compound(Morris-7, Mr.-6)
nsubj(devised-8, Morris-7)
root(ROOT-0, devised-8)
dobj(devised-8, choreography-9)
nsubj(athletic-13, choreography-9)
nsubj(compelling-17, choreography-9)
ref(choreography-9, that-10)
cop(athletic-13, was-11)
advmod(athletic-13, more-12)
acl:relcl(choreography-9, athletic-13)
cc(athletic-13, and-14)
neg(less-16, no-15)
advmod(compelling-17, less-16)
acl:relcl(choreography-9, compelling-17)
conj:and(athletic-13, compelling-17)
punct(devised-8, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

dance :: In the third round , though , Holmes got up on his toes , danced some , and flicked a few punches ./.
case(round-4, In-1)
det(round-4, the-2)
amod(round-4, third-3)
nmod:in(got-9, round-4)
punct(got-9, ,-5)
advmod(got-9, though-6)
punct(got-9, ,-7)
nsubj(got-9, Holmes-8)
nsubj(danced-15, Holmes-8)
nsubj(flicked-19, Holmes-8)
root(ROOT-0, got-9)
compound:prt(got-9, up-10)
case(toes-13, on-11)
nmod:poss(toes-13, his-12)
nmod:on(got-9, toes-13)
punct(got-9, ,-14)
conj:and(got-9, danced-15)
dobj(danced-15, some-16)
punct(got-9, ,-17)
cc(got-9, and-18)
conj:and(got-9, flicked-19)
det(punches-22, a-20)
amod(punches-22, few-21)
dobj(flicked-19, punches-22)
punct(got-9, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dance#some

destroy :: Mr. Davis openly has a bone to pick with urban renewal , but this hardly seems a prejudice on his part: Urban renewal did in fact come into Fulton and systematically destroyed the old neighborhood , and there was n't anything subtle about it ./.
compound(Davis-2, Mr.-1)
nsubj(has-4, Davis-2)
advmod(has-4, openly-3)
root(ROOT-0, has-4)
det(bone-6, a-5)
dobj(has-4, bone-6)
mark(pick-8, to-7)
acl(bone-6, pick-8)
case(renewal-11, with-9)
amod(renewal-11, urban-10)
nmod:with(pick-8, renewal-11)
punct(has-4, ,-12)
cc(has-4, but-13)
nsubj(seems-16, this-14)
advmod(seems-16, hardly-15)
conj:but(has-4, seems-16)
det(prejudice-18, a-17)
dobj(seems-16, prejudice-18)
case(part-21, on-19)
nmod:poss(part-21, his-20)
nmod:on(prejudice-18, part-21)
punct(prejudice-18, :-22)
compound(renewal-24, Urban-23)
nsubj(come-28, renewal-24)
nsubj(destroyed-33, renewal-24)
nsubj(was-40, renewal-24)
aux(come-28, did-25)
case(fact-27, in-26)
nmod:in(come-28, fact-27)
dep(prejudice-18, come-28)
case(Fulton-30, into-29)
nmod:into(come-28, Fulton-30)
cc(come-28, and-31)
advmod(destroyed-33, systematically-32)
dep(prejudice-18, destroyed-33)
conj:and(come-28, destroyed-33)
det(neighborhood-36, the-34)
amod(neighborhood-36, old-35)
dobj(destroyed-33, neighborhood-36)
punct(come-28, ,-37)
cc(come-28, and-38)
expl(was-40, there-39)
dep(prejudice-18, was-40)
conj:and(come-28, was-40)
neg(was-40, n't-41)
nsubj(subtle-43, anything-42)
xcomp(was-40, subtle-43)
case(it-45, about-44)
nmod:about(subtle-43, it-45)
punct(has-4, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#neighborhood

destroy :: `` Any company in this market that hiccups is just destroyed ./.
root(ROOT-0, ``-1)
det(company-3, Any-2)
root(``-1, company-3)
case(market-6, in-4)
det(market-6, this-5)
nmod:in(company-3, market-6)
mark(destroyed-11, that-7)
nsubjpass(destroyed-11, hiccups-8)
auxpass(destroyed-11, is-9)
advmod(destroyed-11, just-10)
dep(company-3, destroyed-11)
punct(company-3, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#hiccups

destroy :: The two-year-old program designed principally to stem soil erosion is reducing American exports , destroying jobs , and squandering billions of dollars on a pseudo-problem ./.
det(program-3, The-1)
amod(program-3, two-year-old-2)
nsubj(reducing-11, program-3)
nsubj(destroying-15, program-3)
nsubj(squandering-19, program-3)
acl(program-3, designed-4)
advmod(designed-4, principally-5)
mark(stem-7, to-6)
xcomp(designed-4, stem-7)
compound(erosion-9, soil-8)
dobj(stem-7, erosion-9)
aux(reducing-11, is-10)
root(ROOT-0, reducing-11)
amod(exports-13, American-12)
dobj(reducing-11, exports-13)
punct(reducing-11, ,-14)
conj:and(reducing-11, destroying-15)
dobj(destroying-15, jobs-16)
punct(reducing-11, ,-17)
cc(reducing-11, and-18)
conj:and(reducing-11, squandering-19)
dobj(squandering-19, billions-20)
case(dollars-22, of-21)
nmod:of(billions-20, dollars-22)
case(pseudo-problem-25, on-23)
det(pseudo-problem-25, a-24)
nmod:on(squandering-19, pseudo-problem-25)
punct(reducing-11, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#jobs

destroy :: This destroys cancerous cells but also wipes out the patient 's `` good '' white blood cells that guard the immune system , leaving a patient vulnerable for almost a month to death by infection ./.
nsubj(destroys-2, This-1)
nsubj(wipes-7, This-1)
root(ROOT-0, destroys-2)
amod(cells-4, cancerous-3)
dobj(destroys-2, cells-4)
cc(destroys-2, but-5)
advmod(wipes-7, also-6)
conj:and(destroys-2, wipes-7)
compound:prt(wipes-7, out-8)
det(patient-10, the-9)
nmod:poss(cells-17, patient-10)
case(patient-10, 's-11)
punct(cells-17, ``-12)
amod(cells-17, good-13)
punct(cells-17, ''-14)
amod(cells-17, white-15)
compound(cells-17, blood-16)
dobj(wipes-7, cells-17)
nsubj(guard-19, cells-17)
ref(cells-17, that-18)
acl:relcl(cells-17, guard-19)
det(system-22, the-20)
amod(system-22, immune-21)
dobj(guard-19, system-22)
punct(destroys-2, ,-23)
advcl(destroys-2, leaving-24)
det(patient-26, a-25)
nsubj(vulnerable-27, patient-26)
xcomp(leaving-24, vulnerable-27)
case(month-31, for-28)
advmod(month-31, almost-29)
det(month-31, a-30)
nmod:for(vulnerable-27, month-31)
case(death-33, to-32)
nmod:to(vulnerable-27, death-33)
case(infection-35, by-34)
nmod:by(death-33, infection-35)
punct(destroys-2, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#cells

destroy :: Excessive rates of income tax destroy enterprise , encourage avoidance , and drive talent to more hospitable shores overseas ./.
amod(rates-2, Excessive-1)
nsubj(destroy-6, rates-2)
nsubj(encourage-9, rates-2)
case(tax-5, of-3)
compound(tax-5, income-4)
nmod:of(rates-2, tax-5)
root(ROOT-0, destroy-6)
dobj(destroy-6, enterprise-7)
punct(destroy-6, ,-8)
conj:and(destroy-6, encourage-9)
dobj(encourage-9, avoidance-10)
punct(destroy-6, ,-11)
cc(destroy-6, and-12)
compound(talent-14, drive-13)
conj:and(destroy-6, talent-14)
case(shores-18, to-15)
advmod(hospitable-17, more-16)
amod(shores-18, hospitable-17)
nmod:to(talent-14, shores-18)
advmod(talent-14, overseas-19)
punct(destroy-6, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#enterprise

destroy :: Claiborne had said in its complaint last month that Avon 's failure to meet its obligation for the Fall and Christmas seasons , which together account for more than 70 % of annual sales for the venture , would `` irreparably harm and likely destroy the business . ''/''
nsubj(said-3, Claiborne-1)
aux(said-3, had-2)
root(ROOT-0, said-3)
case(complaint-6, in-4)
nmod:poss(complaint-6, its-5)
nmod:in(said-3, complaint-6)
amod(month-8, last-7)
nmod:tmod(said-3, month-8)
mark(harm-42, that-9)
nmod:poss(failure-12, Avon-10)
case(Avon-10, 's-11)
nsubj(harm-42, failure-12)
nsubj(destroy-45, failure-12)
mark(meet-14, to-13)
acl(failure-12, meet-14)
nmod:poss(obligation-16, its-15)
dobj(meet-14, obligation-16)
case(Fall-19, for-17)
det(Fall-19, the-18)
nmod:for(obligation-16, Fall-19)
nsubj(account-26, Fall-19)
cc(Fall-19, and-20)
compound(seasons-22, Christmas-21)
nmod:for(obligation-16, seasons-22)
conj:and(Fall-19, seasons-22)
nsubj(account-26, seasons-22)
punct(Fall-19, ,-23)
ref(Fall-19, which-24)
advmod(account-26, together-25)
acl:relcl(Fall-19, account-26)
case(%-31, for-27)
advmod(70-30, more-28)
mwe(more-28, than-29)
nummod(%-31, 70-30)
nmod:for(account-26, %-31)
case(sales-34, of-32)
amod(sales-34, annual-33)
nmod:of(%-31, sales-34)
case(venture-37, for-35)
det(venture-37, the-36)
nmod:for(sales-34, venture-37)
punct(Fall-19, ,-38)
aux(harm-42, would-39)
punct(harm-42, ``-40)
advmod(harm-42, irreparably-41)
ccomp(said-3, harm-42)
cc(harm-42, and-43)
advmod(destroy-45, likely-44)
ccomp(said-3, destroy-45)
conj:and(harm-42, destroy-45)
det(business-47, the-46)
dobj(destroy-45, business-47)
punct(said-3, .-48)
punct(said-3, ''-49)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: destroy#business

destroy :: Claiborne says in the complaint that Avon 's failure to meet its obligations for the `` crucial 1988 Fall Christmas seasons , which together account for over 70 % of annual sales , '' would `` irreparably harm and likely destroy the business . ''/''
nsubj(says-2, Claiborne-1)
root(ROOT-0, says-2)
case(complaint-5, in-3)
det(complaint-5, the-4)
nmod:in(says-2, complaint-5)
dep(says-2, that-6)
nmod:poss(failure-9, Avon-7)
case(Avon-7, 's-8)
dep(that-6, failure-9)
mark(meet-11, to-10)
acl(failure-9, meet-11)
nmod:poss(obligations-13, its-12)
dobj(meet-11, obligations-13)
case(seasons-21, for-14)
det(seasons-21, the-15)
punct(seasons-21, ``-16)
amod(seasons-21, crucial-17)
nummod(seasons-21, 1988-18)
compound(seasons-21, Fall-19)
compound(seasons-21, Christmas-20)
nmod:for(obligations-13, seasons-21)
nsubj(account-25, seasons-21)
punct(seasons-21, ,-22)
ref(seasons-21, which-23)
advmod(account-25, together-24)
acl:relcl(seasons-21, account-25)
case(%-29, for-26)
advmod(70-28, over-27)
nummod(%-29, 70-28)
nmod:for(account-25, %-29)
case(sales-32, of-30)
amod(sales-32, annual-31)
nmod:of(%-29, sales-32)
punct(harm-38, ,-33)
punct(harm-38, ''-34)
aux(harm-38, would-35)
punct(harm-38, ``-36)
advmod(harm-38, irreparably-37)
dep(failure-9, harm-38)
cc(harm-38, and-39)
advmod(destroy-41, likely-40)
dep(failure-9, destroy-41)
conj:and(harm-38, destroy-41)
det(business-43, the-42)
dobj(harm-38, business-43)
punct(says-2, .-44)
punct(says-2, ''-45)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

destroy :: `` The Jew and the bank now dominate everything: Europe and enlightenment , the whole civilization and socialism -- especially socialism , for with its help the Jew will eradicate Christianity and destroy the Christian civilization . ''/''
punct(dominate-8, ``-1)
det(Jew-3, The-2)
nsubj(dominate-8, Jew-3)
cc(Jew-3, and-4)
det(bank-6, the-5)
conj:and(Jew-3, bank-6)
nsubj(dominate-8, bank-6)
advmod(dominate-8, now-7)
root(ROOT-0, dominate-8)
dobj(dominate-8, everything-9)
punct(everything-9, :-10)
dep(everything-9, Europe-11)
cc(Europe-11, and-12)
dep(everything-9, enlightenment-13)
conj:and(Europe-11, enlightenment-13)
punct(Europe-11, ,-14)
det(civilization-17, the-15)
amod(civilization-17, whole-16)
appos(Europe-11, civilization-17)
cc(civilization-17, and-18)
appos(Europe-11, socialism-19)
conj:and(civilization-17, socialism-19)
punct(Europe-11, ---20)
advmod(socialism-22, especially-21)
dep(Europe-11, socialism-22)
punct(socialism-22, ,-23)
case(help-27, for-24)
case(help-27, with-25)
nmod:poss(help-27, its-26)
nmod:with(socialism-22, help-27)
det(Jew-29, the-28)
nsubj(eradicate-31, Jew-29)
nsubj(destroy-34, Jew-29)
aux(eradicate-31, will-30)
acl:relcl(help-27, eradicate-31)
dobj(eradicate-31, Christianity-32)
cc(eradicate-31, and-33)
acl:relcl(help-27, destroy-34)
conj:and(eradicate-31, destroy-34)
det(civilization-37, the-35)
amod(civilization-37, Christian-36)
dobj(destroy-34, civilization-37)
punct(dominate-8, .-38)
punct(dominate-8, ''-39)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: destroy#civilization

destroy :: `` If Roger had purposely set out to destroy all morale in what was once the most confident and secure company going , he could n't have done a better job , '' Mr. Lee quotes an unnamed GM executive ./.
punct(quotes-36, ``-1)
mark(set-6, If-2)
nsubj(set-6, Roger-3)
nsubj:xsubj(destroy-9, Roger-3)
aux(set-6, had-4)
advmod(set-6, purposely-5)
advcl(done-28, set-6)
compound:prt(set-6, out-7)
mark(destroy-9, to-8)
xcomp(set-6, destroy-9)
det(morale-11, all-10)
dobj(destroy-9, morale-11)
mark(going-22, in-12)
nsubj(going-22, what-13)
aux(going-22, was-14)
advmod(going-22, once-15)
det(company-21, the-16)
advmod(confident-18, most-17)
amod(company-21, confident-18)
cc(confident-18, and-19)
conj:and(confident-18, secure-20)
amod(company-21, secure-20)
nsubj(going-22, company-21)
acl(morale-11, going-22)
punct(done-28, ,-23)
nsubj(done-28, he-24)
aux(done-28, could-25)
neg(done-28, n't-26)
aux(done-28, have-27)
ccomp(quotes-36, done-28)
det(job-31, a-29)
amod(job-31, better-30)
dobj(done-28, job-31)
punct(quotes-36, ,-32)
punct(quotes-36, ''-33)
compound(Lee-35, Mr.-34)
nsubj(quotes-36, Lee-35)
root(ROOT-0, quotes-36)
det(executive-40, an-37)
amod(executive-40, unnamed-38)
compound(executive-40, GM-39)
nsubj(quotes-36, executive-40)
punct(quotes-36, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#morale

destroy :: After a recent Barron 's magazine article about the fund 's woes , Kenneth Edlund , a Delmar , N.Y . , investor , groused in a letter to the publication 's editor that for five years he `` watched in disbelief as , during the great secular bull market , David Baker destroyed my young son 's $ 17 , 000 college nest egg . ''/''
case(article-7, After-1)
det(article-7, a-2)
amod(article-7, recent-3)
nmod:poss(article-7, Barron-4)
case(Barron-4, 's-5)
compound(article-7, magazine-6)
root(ROOT-0, article-7)
case(woes-12, about-8)
det(fund-10, the-9)
nmod:poss(woes-12, fund-10)
case(fund-10, 's-11)
nmod:about(article-7, woes-12)
punct(article-7, ,-13)
compound(Edlund-15, Kenneth-14)
root(,-13, Edlund-15)
punct(Edlund-15, ,-16)
det(Delmar-18, a-17)
appos(Edlund-15, Delmar-18)
punct(Edlund-15, ,-19)
appos(Edlund-15, N.Y-20)
punct(Edlund-15, .-21)
punct(groused-4, ,-1)
nsubj(groused-4, investor-2)
punct(groused-4, ,-3)
root(ROOT-0, groused-4)
case(letter-7, in-5)
det(letter-7, a-6)
nmod:in(groused-4, letter-7)
case(editor-12, to-8)
det(publication-10, the-9)
nmod:poss(editor-12, publication-10)
case(publication-10, 's-11)
nmod:to(letter-7, editor-12)
mark(watched-19, that-13)
case(years-16, for-14)
nummod(years-16, five-15)
nmod:for(watched-19, years-16)
nsubj(watched-19, he-17)
punct(watched-19, ``-18)
acl(letter-7, watched-19)
case(disbelief-21, in-20)
nmod:in(watched-19, disbelief-21)
mark(destroyed-33, as-22)
punct(destroyed-33, ,-23)
case(market-29, during-24)
det(market-29, the-25)
amod(market-29, great-26)
amod(market-29, secular-27)
compound(market-29, bull-28)
nmod:during(destroyed-33, market-29)
punct(destroyed-33, ,-30)
compound(Baker-32, David-31)
nsubj(destroyed-33, Baker-32)
advcl(watched-19, destroyed-33)
nmod:poss(son-36, my-34)
amod(son-36, young-35)
nmod:poss(17-39, son-36)
case(son-36, 's-37)
dep(17-39, $-38)
dobj(destroyed-33, 17-39)
punct(17-39, ,-40)
nummod(egg-44, 000-41)
compound(egg-44, college-42)
compound(egg-44, nest-43)
appos(17-39, egg-44)
punct(groused-4, .-45)
punct(groused-4, ''-46)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: destroy#17

destroy :: The rollback destroyed this steady progress ./.
det(rollback-2, The-1)
nsubj(destroyed-3, rollback-2)
root(ROOT-0, destroyed-3)
det(progress-6, this-4)
amod(progress-6, steady-5)
dobj(destroyed-3, progress-6)
punct(destroyed-3, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#progress

destroy :: {Ethiopian strongman Mengistu Haile Mariam} has destroyed the traditional farming economy with communist controls on prices , by confiscating all land , and by making the state the sole buyer and seller of food ./.
punct(destroyed-9, -LCB--1)
amod(Mariam-6, Ethiopian-2)
compound(Mariam-6, strongman-3)
compound(Mariam-6, Mengistu-4)
compound(Mariam-6, Haile-5)
nsubj(destroyed-9, Mariam-6)
punct(destroyed-9, -RCB--7)
aux(destroyed-9, has-8)
root(ROOT-0, destroyed-9)
det(economy-13, the-10)
amod(economy-13, traditional-11)
compound(economy-13, farming-12)
dobj(destroyed-9, economy-13)
case(controls-16, with-14)
amod(controls-16, communist-15)
nmod:with(destroyed-9, controls-16)
case(prices-18, on-17)
nmod:on(controls-16, prices-18)
punct(destroyed-9, ,-19)
mark(confiscating-21, by-20)
advcl(destroyed-9, confiscating-21)
det(land-23, all-22)
dobj(confiscating-21, land-23)
punct(confiscating-21, ,-24)
cc(confiscating-21, and-25)
mark(making-27, by-26)
advcl(destroyed-9, making-27)
conj:and(confiscating-21, making-27)
det(state-29, the-28)
nsubj(buyer-32, state-29)
det(buyer-32, the-30)
amod(buyer-32, sole-31)
xcomp(making-27, buyer-32)
cc(buyer-32, and-33)
xcomp(making-27, seller-34)
conj:and(buyer-32, seller-34)
case(food-36, of-35)
nmod:of(buyer-32, food-36)
punct(destroyed-9, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#economy

destroy :: In any event , Mr. Dhlomo understands better than do most U.S. congressmen that if the South African economy is destroyed by sanctions , so , too , will be the prospects for revolutionary , or even evolutionary , change ./.
case(event-3, In-1)
det(event-3, any-2)
nmod:in(understands-7, event-3)
punct(understands-7, ,-4)
compound(Dhlomo-6, Mr.-5)
nsubj(understands-7, Dhlomo-6)
root(ROOT-0, understands-7)
advmod(understands-7, better-8)
dep(do-10, than-9)
advcl(better-8, do-10)
amod(congressmen-13, most-11)
compound(congressmen-13, U.S.-12)
nsubj(do-10, congressmen-13)
mark(prospects-32, that-14)
mark(destroyed-21, if-15)
det(economy-19, the-16)
amod(African-18, South-17)
amod(economy-19, African-18)
nsubjpass(destroyed-21, economy-19)
auxpass(destroyed-21, is-20)
advcl(prospects-32, destroyed-21)
case(sanctions-23, by-22)
nmod:agent(destroyed-21, sanctions-23)
punct(prospects-32, ,-24)
advmod(prospects-32, so-25)
punct(prospects-32, ,-26)
advmod(prospects-32, too-27)
punct(prospects-32, ,-28)
aux(prospects-32, will-29)
cop(prospects-32, be-30)
det(prospects-32, the-31)
dep(congressmen-13, prospects-32)
case(revolutionary-34, for-33)
nmod:for(prospects-32, revolutionary-34)
punct(revolutionary-34, ,-35)
cc(revolutionary-34, or-36)
advmod(evolutionary-38, even-37)
nmod:for(prospects-32, evolutionary-38)
conj:or(revolutionary-34, evolutionary-38)
punct(revolutionary-34, ,-39)
nmod:for(prospects-32, change-40)
conj:or(revolutionary-34, change-40)
punct(understands-7, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#economy

destroy :: Mr. Meese of course had good personal reasons for the infernal device he left behind ; Washington 's Democrats have been trying to destroy Ed Meese since the day he arrived in town , for no reason other than that he looked like an easier target than Ronald Reagan ./.
compound(Meese-2, Mr.-1)
nsubj(had-5, Meese-2)
case(course-4, of-3)
nmod:of(Meese-2, course-4)
root(ROOT-0, had-5)
amod(reasons-8, good-6)
amod(reasons-8, personal-7)
dobj(had-5, reasons-8)
case(device-12, for-9)
det(device-12, the-10)
amod(device-12, infernal-11)
nmod:for(reasons-8, device-12)
nsubj(left-14, he-13)
acl:relcl(device-12, left-14)
advmod(left-14, behind-15)
punct(had-5, ;-16)
nmod:poss(Democrats-19, Washington-17)
case(Washington-17, 's-18)
nsubj(trying-22, Democrats-19)
nsubj:xsubj(destroy-24, Democrats-19)
aux(trying-22, have-20)
aux(trying-22, been-21)
parataxis(had-5, trying-22)
mark(destroy-24, to-23)
xcomp(trying-22, destroy-24)
compound(Meese-26, Ed-25)
dobj(destroy-24, Meese-26)
case(day-29, since-27)
det(day-29, the-28)
nmod:since(trying-22, day-29)
nsubj(arrived-31, he-30)
acl:relcl(day-29, arrived-31)
case(town-33, in-32)
nmod:in(arrived-31, town-33)
punct(trying-22, ,-34)
case(reason-37, for-35)
neg(reason-37, no-36)
nmod:for(trying-22, reason-37)
amod(reason-37, other-38)
mark(looked-42, than-39)
mark(looked-42, that-40)
nsubj(looked-42, he-41)
advcl(other-38, looked-42)
case(target-46, like-43)
det(target-46, an-44)
amod(target-46, easier-45)
nmod:like(looked-42, target-46)
case(Reagan-49, than-47)
compound(Reagan-49, Ronald-48)
nmod:than(target-46, Reagan-49)
punct(had-5, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#course

destroy :: One man who felt the brunt of Mr. Atwater 's tactics is liberal Thomas Turnipseed , whose bid for Congress was effectively destroyed when Mr. Atwater surreptitiously revived a three-year-old story about the Democrat 's psychiatric treatment for depression as a young man ./.
nummod(man-2, One-1)
nsubj(felt-4, man-2)
nsubj(Turnipseed-15, man-2)
ref(man-2, who-3)
acl:relcl(man-2, felt-4)
det(brunt-6, the-5)
dobj(felt-4, brunt-6)
case(tactics-11, of-7)
compound(Atwater-9, Mr.-8)
nmod:poss(tactics-11, Atwater-9)
case(Atwater-9, 's-10)
nmod:of(brunt-6, tactics-11)
cop(Turnipseed-15, is-12)
amod(Turnipseed-15, liberal-13)
compound(Turnipseed-15, Thomas-14)
root(ROOT-0, Turnipseed-15)
nmod:poss(bid-18, Turnipseed-15)
punct(Turnipseed-15, ,-16)
ref(Turnipseed-15, whose-17)
nsubjpass(destroyed-23, bid-18)
case(Congress-20, for-19)
nmod:for(bid-18, Congress-20)
auxpass(destroyed-23, was-21)
advmod(destroyed-23, effectively-22)
acl:relcl(Turnipseed-15, destroyed-23)
advmod(revived-28, when-24)
compound(Atwater-26, Mr.-25)
nsubj(revived-28, Atwater-26)
advmod(revived-28, surreptitiously-27)
advcl(destroyed-23, revived-28)
det(story-31, a-29)
amod(story-31, three-year-old-30)
dobj(revived-28, story-31)
case(treatment-37, about-32)
det(Democrat-34, the-33)
nmod:poss(treatment-37, Democrat-34)
case(Democrat-34, 's-35)
amod(treatment-37, psychiatric-36)
nmod:about(story-31, treatment-37)
case(depression-39, for-38)
nmod:for(treatment-37, depression-39)
case(man-43, as-40)
det(man-43, a-41)
amod(man-43, young-42)
nmod:as(treatment-37, man-43)
punct(Turnipseed-15, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#bid

destroy :: Second , the U.S. has tried to squeeze Panama 's economy without destroying it , both to spare ordinary Panamanians further suffering and to permit recovery once Gen. Noriega goes ./.
dep(tried-6, Second-1)
punct(tried-6, ,-2)
det(U.S.-4, the-3)
nsubj(tried-6, U.S.-4)
nsubj:xsubj(squeeze-8, U.S.-4)
aux(tried-6, has-5)
advcl(suffering-22, tried-6)
mark(squeeze-8, to-7)
xcomp(tried-6, squeeze-8)
nmod:poss(economy-11, Panama-9)
case(Panama-9, 's-10)
dobj(squeeze-8, economy-11)
mark(destroying-13, without-12)
advcl(squeeze-8, destroying-13)
dobj(destroying-13, it-14)
punct(suffering-22, ,-15)
dep(Panamanians-20, both-16)
case(Panamanians-20, to-17)
amod(Panamanians-20, spare-18)
amod(Panamanians-20, ordinary-19)
nsubj(suffering-22, Panamanians-20)
nsubj(permit-25, Panamanians-20)
advmod(suffering-22, further-21)
root(ROOT-0, suffering-22)
cc(suffering-22, and-23)
mark(permit-25, to-24)
conj:and(suffering-22, permit-25)
dobj(permit-25, recovery-26)
advmod(goes-30, once-27)
compound(Noriega-29, Gen.-28)
nsubj(goes-30, Noriega-29)
dep(permit-25, goes-30)
punct(suffering-22, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#it

destroy :: `` It would be much too much to say this will destroy either the parent company or {Cosmos} , '' says Dan Nielsen , an analyst with SBCI Securities -LRB- Asia -RRB- Ltd ./.
punct(says-23, ``-1)
nsubj(much-7, It-2)
aux(much-7, would-3)
cop(much-7, be-4)
advmod(much-7, much-5)
advmod(much-7, too-6)
ccomp(says-23, much-7)
mark(say-9, to-8)
acl(much-7, say-9)
nsubj(destroy-12, this-10)
aux(destroy-12, will-11)
ccomp(say-9, destroy-12)
cc:preconj(company-16, either-13)
det(company-16, the-14)
compound(company-16, parent-15)
dobj(destroy-12, company-16)
cc(company-16, or-17)
punct(Cosmos-19, -LCB--18)
dobj(destroy-12, Cosmos-19)
conj:or(company-16, Cosmos-19)
punct(Cosmos-19, -RCB--20)
punct(says-23, ,-21)
punct(says-23, ''-22)
root(ROOT-0, says-23)
compound(Nielsen-25, Dan-24)
nsubj(says-23, Nielsen-25)
punct(Nielsen-25, ,-26)
det(analyst-28, an-27)
appos(Nielsen-25, analyst-28)
case(Ltd-35, with-29)
compound(Ltd-35, SBCI-30)
compound(Ltd-35, Securities-31)
punct(Asia-33, -LRB--32)
appos(Ltd-35, Asia-33)
punct(Asia-33, -RRB--34)
nmod:with(analyst-28, Ltd-35)
punct(says-23, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#company

destroy :: But really it is the day that all four Tyrones come face to face with the ghosts that have haunted them and the demons that have nearly destroyed them ./.
root(ROOT-0, But-1)
advmod(day-6, really-2)
nsubj(day-6, it-3)
cop(day-6, is-4)
det(day-6, the-5)
root(But-1, day-6)
mark(come-11, that-7)
det(Tyrones-10, all-8)
nummod(Tyrones-10, four-9)
nsubj(come-11, Tyrones-10)
ccomp(day-6, come-11)
dobj(come-11, face-12)
mark(face-14, to-13)
acl(face-12, face-14)
case(ghosts-17, with-15)
det(ghosts-17, the-16)
nmod:with(face-14, ghosts-17)
nsubj(haunted-20, ghosts-17)
ref(ghosts-17, that-18)
aux(haunted-20, have-19)
acl:relcl(ghosts-17, haunted-20)
dobj(haunted-20, them-21)
cc(ghosts-17, and-22)
det(demons-24, the-23)
nmod:with(face-14, demons-24)
conj:and(ghosts-17, demons-24)
nsubj(destroyed-28, demons-24)
ref(demons-24, that-25)
aux(destroyed-28, have-26)
advmod(destroyed-28, nearly-27)
acl:relcl(demons-24, destroyed-28)
dobj(destroyed-28, them-29)
punct(day-6, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#them

destroy :: Public reaction to this melodrama nearly destroyed the administration and solidified the belief that no moderates existed in Iran ./.
amod(reaction-2, Public-1)
nsubj(destroyed-7, reaction-2)
nsubj(solidified-11, reaction-2)
case(melodrama-5, to-3)
det(melodrama-5, this-4)
nmod:to(reaction-2, melodrama-5)
advmod(destroyed-7, nearly-6)
root(ROOT-0, destroyed-7)
det(administration-9, the-8)
dobj(destroyed-7, administration-9)
cc(destroyed-7, and-10)
conj:and(destroyed-7, solidified-11)
det(belief-13, the-12)
dobj(solidified-11, belief-13)
mark(existed-17, that-14)
neg(moderates-16, no-15)
nsubj(existed-17, moderates-16)
ccomp(belief-13, existed-17)
case(Iran-19, in-18)
nmod:in(existed-17, Iran-19)
punct(destroyed-7, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#administration

destroy :: Finally , that act would streamline procedures , allowing states to set or change individual permits without needless EPA review ; EPA to issue targeted requirements rather than comprehensive federal cleanup plans that destroy local initiatives ; and enforcement to become both swifter and fairer through self-executing citations reviewed by expert administrative law judges , not cases pursued in hundreds of backlogged district courts ./.
advmod(streamline-6, Finally-1)
punct(streamline-6, ,-2)
det(act-4, that-3)
nsubj(streamline-6, act-4)
aux(streamline-6, would-5)
root(ROOT-0, streamline-6)
dobj(streamline-6, procedures-7)
punct(streamline-6, ,-8)
advcl(streamline-6, allowing-9)
dobj(allowing-9, states-10)
nsubj:xsubj(set-12, states-10)
mark(set-12, to-11)
xcomp(allowing-9, set-12)
cc(set-12, or-13)
xcomp(allowing-9, change-14)
conj:or(set-12, change-14)
amod(permits-16, individual-15)
dobj(set-12, permits-16)
case(review-20, without-17)
amod(review-20, needless-18)
compound(review-20, EPA-19)
nmod:without(set-12, review-20)
punct(streamline-6, ;-21)
conj:and(streamline-6, EPA-22)
mark(issue-24, to-23)
acl(EPA-22, issue-24)
amod(requirements-26, targeted-25)
dobj(issue-24, requirements-26)
case(plans-32, rather-27)
mwe(rather-27, than-28)
amod(plans-32, comprehensive-29)
amod(plans-32, federal-30)
compound(plans-32, cleanup-31)
nmod:rather_than(EPA-22, plans-32)
nsubj(destroy-34, plans-32)
ref(plans-32, that-33)
acl:relcl(plans-32, destroy-34)
amod(initiatives-36, local-35)
dobj(destroy-34, initiatives-36)
punct(streamline-6, ;-37)
cc(streamline-6, and-38)
conj:and(streamline-6, enforcement-39)
mark(become-41, to-40)
acl(enforcement-39, become-41)
cc:preconj(swifter-43, both-42)
xcomp(become-41, swifter-43)
cc(swifter-43, and-44)
xcomp(become-41, fairer-45)
conj:and(swifter-43, fairer-45)
case(citations-48, through-46)
amod(citations-48, self-executing-47)
nmod:through(become-41, citations-48)
acl(citations-48, reviewed-49)
case(judges-54, by-50)
compound(judges-54, expert-51)
amod(judges-54, administrative-52)
compound(judges-54, law-53)
nmod:by(reviewed-49, judges-54)
punct(citations-48, ,-55)
neg(cases-57, not-56)
appos(citations-48, cases-57)
acl(cases-57, pursued-58)
case(hundreds-60, in-59)
nmod:in(pursued-58, hundreds-60)
case(courts-64, of-61)
amod(courts-64, backlogged-62)
compound(courts-64, district-63)
nmod:of(hundreds-60, courts-64)
punct(streamline-6, .-65)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#initiatives

destroy :: And the Australians felt they could tinker with their beer without destroying that image ./.
cc(felt-4, And-1)
det(Australians-3, the-2)
nsubj(felt-4, Australians-3)
root(ROOT-0, felt-4)
nsubj(tinker-7, they-5)
aux(tinker-7, could-6)
ccomp(felt-4, tinker-7)
case(beer-10, with-8)
nmod:poss(beer-10, their-9)
nmod:with(tinker-7, beer-10)
mark(destroying-12, without-11)
advcl(tinker-7, destroying-12)
det(image-14, that-13)
dobj(destroying-12, image-14)
punct(felt-4, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#image

destroy :: An example: Last fall , Joseph Biden 's campaign was destroyed after a leaked videotape showed similarities between his speech and one given by British Labor Party leader Neil Kinnock ./.
det(example-2, An-1)
root(ROOT-0, example-2)
punct(example-2, :-3)
amod(fall-5, Last-4)
nmod:tmod(destroyed-12, fall-5)
punct(destroyed-12, ,-6)
compound(Biden-8, Joseph-7)
nmod:poss(campaign-10, Biden-8)
case(Biden-8, 's-9)
nsubjpass(destroyed-12, campaign-10)
auxpass(destroyed-12, was-11)
dep(example-2, destroyed-12)
mark(showed-17, after-13)
det(videotape-16, a-14)
amod(videotape-16, leaked-15)
nsubj(showed-17, videotape-16)
advcl(destroyed-12, showed-17)
dobj(showed-17, similarities-18)
case(speech-21, between-19)
nmod:poss(speech-21, his-20)
nmod:between(similarities-18, speech-21)
cc(speech-21, and-22)
nmod:between(similarities-18, one-23)
conj:and(speech-21, one-23)
acl(one-23, given-24)
case(Kinnock-31, by-25)
amod(Kinnock-31, British-26)
compound(Kinnock-31, Labor-27)
compound(Kinnock-31, Party-28)
compound(Kinnock-31, leader-29)
compound(Kinnock-31, Neil-30)
nmod:by(given-24, Kinnock-31)
punct(example-2, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#campaign

destroy :: Weeks later , `` Penthouse finally realized that Dominion was intentionally destroying the deal , '' sought other financing , failed , and had to abandon the project , the judge said ./.
nsubj(realized-7, Weeks-1)
advmod(realized-7, later-2)
punct(realized-7, ,-3)
punct(realized-7, ``-4)
nsubj(realized-7, Penthouse-5)
advmod(realized-7, finally-6)
ccomp(sought-17, realized-7)
mark(destroying-12, that-8)
nsubj(destroying-12, Dominion-9)
aux(destroying-12, was-10)
advmod(destroying-12, intentionally-11)
ccomp(realized-7, destroying-12)
det(deal-14, the-13)
dobj(destroying-12, deal-14)
punct(sought-17, ,-15)
punct(sought-17, ''-16)
ccomp(said-32, sought-17)
amod(financing-19, other-18)
dobj(sought-17, financing-19)
punct(sought-17, ,-20)
conj:and(sought-17, failed-21)
ccomp(said-32, failed-21)
punct(sought-17, ,-22)
cc(sought-17, and-23)
conj:and(sought-17, had-24)
ccomp(said-32, had-24)
mark(abandon-26, to-25)
xcomp(had-24, abandon-26)
det(project-28, the-27)
dobj(abandon-26, project-28)
punct(said-32, ,-29)
det(judge-31, the-30)
nsubj(said-32, judge-31)
root(ROOT-0, said-32)
punct(said-32, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#deal

destroy :: Pace Industries Inc. was in the process of selling its Rheem Manufacturing Co. unit , a maker of water heaters , when the stock market collapsed last year and destroyed the buyer 's financing plans ./.
compound(Inc.-3, Pace-1)
compound(Inc.-3, Industries-2)
nsubj(process-7, Inc.-3)
cop(process-7, was-4)
case(process-7, in-5)
det(process-7, the-6)
root(ROOT-0, process-7)
mark(selling-9, of-8)
acl(process-7, selling-9)
nmod:poss(unit-14, its-10)
compound(unit-14, Rheem-11)
compound(unit-14, Manufacturing-12)
compound(unit-14, Co.-13)
dobj(selling-9, unit-14)
punct(unit-14, ,-15)
det(maker-17, a-16)
appos(unit-14, maker-17)
case(heaters-20, of-18)
compound(heaters-20, water-19)
nmod:of(maker-17, heaters-20)
punct(unit-14, ,-21)
advmod(collapsed-26, when-22)
det(market-25, the-23)
compound(market-25, stock-24)
nsubj(collapsed-26, market-25)
nsubj(destroyed-30, market-25)
advcl(selling-9, collapsed-26)
amod(year-28, last-27)
nmod:tmod(collapsed-26, year-28)
cc(collapsed-26, and-29)
advcl(selling-9, destroyed-30)
conj:and(collapsed-26, destroyed-30)
det(buyer-32, the-31)
nmod:poss(plans-35, buyer-32)
case(buyer-32, 's-33)
compound(plans-35, financing-34)
dobj(destroyed-30, plans-35)
punct(process-7, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#plans

destroy :: He said incinerator temperatures of as much as 1 , 000 degrees Celsius are enough to destroy the mineral ./.
nsubj(said-2, He-1)
root(ROOT-0, said-2)
compound(temperatures-4, incinerator-3)
dobj(said-2, temperatures-4)
case(enough-15, of-5)
advmod(enough-15, as-6)
advmod(enough-15, much-7)
case(enough-15, as-8)
nummod(enough-15, 1-9)
punct(enough-15, ,-10)
nummod(Celsius-13, 000-11)
compound(Celsius-13, degrees-12)
nsubj(enough-15, Celsius-13)
cop(enough-15, are-14)
nmod:as(temperatures-4, enough-15)
mark(destroy-17, to-16)
acl(enough-15, destroy-17)
det(mineral-19, the-18)
dobj(destroy-17, mineral-19)
punct(said-2, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#mineral

destroy :: But a KKR spokesman , saying the RJR-Shearson group would sell more RJR assets in a takeover than KKR , denied any such plan: `` They think we want to destroy Atlanta ?/.
cc(denied-21, But-1)
det(spokesman-4, a-2)
compound(spokesman-4, KKR-3)
nsubj(denied-21, spokesman-4)
punct(spokesman-4, ,-5)
acl(spokesman-4, saying-6)
det(group-9, the-7)
amod(group-9, RJR-Shearson-8)
nsubj(sell-11, group-9)
aux(sell-11, would-10)
ccomp(saying-6, sell-11)
amod(assets-14, more-12)
compound(assets-14, RJR-13)
dobj(sell-11, assets-14)
case(takeover-17, in-15)
det(takeover-17, a-16)
nmod:in(sell-11, takeover-17)
case(KKR-19, than-18)
nmod:than(takeover-17, KKR-19)
punct(spokesman-4, ,-20)
root(ROOT-0, denied-21)
det(plan-24, any-22)
amod(plan-24, such-23)
dobj(denied-21, plan-24)
punct(denied-21, :-25)
punct(denied-21, ``-26)
nsubj(think-28, They-27)
ccomp(denied-21, think-28)
nsubj(want-30, we-29)
nsubj:xsubj(destroy-32, we-29)
ccomp(think-28, want-30)
mark(destroy-32, to-31)
xcomp(want-30, destroy-32)
dobj(destroy-32, Atlanta-33)
punct(denied-21, ?-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#atlanta

destroy :: Police , meanwhile , raided Arab villages and destroyed the homes of suspected activists ./.
nsubj(raided-5, Police-1)
nsubj(destroyed-9, Police-1)
punct(raided-5, ,-2)
advmod(raided-5, meanwhile-3)
punct(raided-5, ,-4)
root(ROOT-0, raided-5)
compound(villages-7, Arab-6)
dobj(raided-5, villages-7)
cc(raided-5, and-8)
conj:and(raided-5, destroyed-9)
det(homes-11, the-10)
dobj(destroyed-9, homes-11)
case(activists-14, of-12)
amod(activists-14, suspected-13)
nmod:of(homes-11, activists-14)
punct(raided-5, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#homes

destroy :: `` This memo was withdrawn and destroyed and someone got it by going through our trash and resurrecting it , '' the EDS spokesman said ./.
punct(said-25, ``-1)
det(memo-3, This-2)
nsubjpass(withdrawn-5, memo-3)
nsubjpass(destroyed-7, memo-3)
auxpass(withdrawn-5, was-4)
ccomp(said-25, withdrawn-5)
cc(withdrawn-5, and-6)
conj:and(withdrawn-5, destroyed-7)
ccomp(said-25, destroyed-7)
cc(withdrawn-5, and-8)
nsubj(got-10, someone-9)
conj:and(withdrawn-5, got-10)
ccomp(said-25, got-10)
dobj(got-10, it-11)
mark(going-13, by-12)
advcl(got-10, going-13)
case(trash-16, through-14)
nmod:poss(trash-16, our-15)
nmod:through(going-13, trash-16)
cc(going-13, and-17)
advcl(got-10, resurrecting-18)
conj:and(going-13, resurrecting-18)
dobj(resurrecting-18, it-19)
punct(said-25, ,-20)
punct(said-25, ''-21)
det(spokesman-24, the-22)
compound(spokesman-24, EDS-23)
nsubj(said-25, spokesman-24)
root(ROOT-0, said-25)
punct(said-25, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#memo

destroy :: A virus is a computer program , often hidden in apparently normal computer software , that instructs the computer to change or destroy information at a given time or after a certain sequence of commands ./.
det(virus-2, A-1)
nsubj(program-6, virus-2)
cop(program-6, is-3)
det(program-6, a-4)
compound(program-6, computer-5)
root(ROOT-0, program-6)
nsubj(instructs-17, program-6)
punct(program-6, ,-7)
advmod(hidden-9, often-8)
acl(program-6, hidden-9)
case(software-14, in-10)
advmod(normal-12, apparently-11)
amod(software-14, normal-12)
compound(software-14, computer-13)
nmod:in(hidden-9, software-14)
punct(program-6, ,-15)
ref(program-6, that-16)
acl:relcl(program-6, instructs-17)
det(computer-19, the-18)
dobj(instructs-17, computer-19)
nsubj:xsubj(change-21, computer-19)
mark(change-21, to-20)
xcomp(instructs-17, change-21)
xcomp(instructs-17, change-21')
conj:or(change-21, change-21')
cc(change-21, or-22)
xcomp(instructs-17, destroy-23)
conj:or(change-21, destroy-23)
dobj(change-21, information-24)
case(time-28, at-25)
det(time-28, a-26)
amod(time-28, given-27)
nmod:at(change-21, time-28)
cc(change-21, or-29)
case(sequence-33, after-30)
det(sequence-33, a-31)
amod(sequence-33, certain-32)
nmod:after(change-21', sequence-33)
case(commands-35, of-34)
nmod:of(sequence-33, commands-35)
punct(program-6, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

destroy :: `` You have to destroy another human being , '' Mr. Espinosa says ./.
punct(says-13, ``-1)
nsubj(have-3, You-2)
nsubj:xsubj(destroy-5, You-2)
ccomp(says-13, have-3)
mark(destroy-5, to-4)
xcomp(have-3, destroy-5)
det(being-8, another-6)
amod(being-8, human-7)
dobj(destroy-5, being-8)
punct(says-13, ,-9)
punct(says-13, ''-10)
compound(Espinosa-12, Mr.-11)
nsubj(says-13, Espinosa-12)
root(ROOT-0, says-13)
punct(says-13, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#being

destroy :: Soybean seed sales skidded last spring in South Carolina , and dealers were forced to destroy tens of thousands of bags ./.
compound(sales-3, Soybean-1)
compound(sales-3, seed-2)
nsubj(skidded-4, sales-3)
root(ROOT-0, skidded-4)
amod(spring-6, last-5)
nmod:tmod(skidded-4, spring-6)
case(Carolina-9, in-7)
compound(Carolina-9, South-8)
nmod:in(skidded-4, Carolina-9)
punct(skidded-4, ,-10)
cc(skidded-4, and-11)
nsubjpass(forced-14, dealers-12)
nsubj:xsubj(destroy-16, dealers-12)
auxpass(forced-14, were-13)
conj:and(skidded-4, forced-14)
mark(destroy-16, to-15)
xcomp(forced-14, destroy-16)
dobj(destroy-16, tens-17)
case(thousands-19, of-18)
nmod:of(tens-17, thousands-19)
case(bags-21, of-20)
nmod:of(thousands-19, bags-21)
punct(skidded-4, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#thousands

destroy :: Horace Furumoto , chairman and chief executive officer , said the company recently has completed its first phase as a public company , which included the development of lasers for removing birthmarks and for destroying kidney stones without surgery ./.
compound(Furumoto-2, Horace-1)
nsubj(said-10, Furumoto-2)
punct(Furumoto-2, ,-3)
appos(Furumoto-2, chairman-4)
cc(chairman-4, and-5)
amod(officer-8, chief-6)
compound(officer-8, executive-7)
appos(Furumoto-2, officer-8)
conj:and(chairman-4, officer-8)
punct(Furumoto-2, ,-9)
root(ROOT-0, said-10)
det(company-12, the-11)
nsubj(completed-15, company-12)
advmod(completed-15, recently-13)
aux(completed-15, has-14)
ccomp(said-10, completed-15)
nmod:poss(phase-18, its-16)
amod(phase-18, first-17)
dobj(completed-15, phase-18)
case(company-22, as-19)
det(company-22, a-20)
amod(company-22, public-21)
nmod:as(phase-18, company-22)
nsubj(included-25, company-22)
punct(company-22, ,-23)
ref(company-22, which-24)
acl:relcl(company-22, included-25)
det(development-27, the-26)
dobj(included-25, development-27)
case(lasers-29, of-28)
nmod:of(development-27, lasers-29)
mark(removing-31, for-30)
acl(development-27, removing-31)
dobj(removing-31, birthmarks-32)
cc(removing-31, and-33)
mark(destroying-35, for-34)
acl(development-27, destroying-35)
conj:and(removing-31, destroying-35)
compound(stones-37, kidney-36)
dobj(destroying-35, stones-37)
case(surgery-39, without-38)
nmod:without(destroying-35, surgery-39)
punct(said-10, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#stones

destroy :: R.G. Barry Corp. said that fire destroyed one of its Mexican plants and that as a result projected 1988 sales are expected to be reduced 3 % to 4 % ./.
compound(Corp.-3, R.G.-1)
compound(Corp.-3, Barry-2)
nsubj(said-4, Corp.-3)
root(ROOT-0, said-4)
mark(destroyed-7, that-5)
nsubj(destroyed-7, fire-6)
nsubj(projected-18, fire-6)
ccomp(said-4, destroyed-7)
dobj(destroyed-7, one-8)
case(plants-12, of-9)
nmod:poss(plants-12, its-10)
amod(plants-12, Mexican-11)
nmod:of(one-8, plants-12)
cc(destroyed-7, and-13)
mark(projected-18, that-14)
case(result-17, as-15)
det(result-17, a-16)
nmod:as(projected-18, result-17)
ccomp(said-4, projected-18)
conj:and(destroyed-7, projected-18)
nummod(sales-20, 1988-19)
nsubjpass(expected-22, sales-20)
nsubjpass:xsubj(reduced-25, sales-20)
auxpass(expected-22, are-21)
ccomp(projected-18, expected-22)
mark(reduced-25, to-23)
auxpass(reduced-25, be-24)
xcomp(expected-22, reduced-25)
dobj(reduced-25, 3-26)
dep(3-26, %-27)
case(%-30, to-28)
nummod(%-30, 4-29)
nmod:to(%-27, %-30)
punct(said-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#plants

destroy :: Tropical storm Chris spawned tornadoes that damaged houses , destroyed mobile homes and caused at least one death in the Carolinas before gradually weakening ./.
amod(Chris-3, Tropical-1)
compound(Chris-3, storm-2)
nsubj(spawned-4, Chris-3)
nsubj(destroyed-10, Chris-3)
nsubj(caused-14, Chris-3)
root(ROOT-0, spawned-4)
dobj(spawned-4, tornadoes-5)
nsubj(damaged-7, tornadoes-5)
ref(tornadoes-5, that-6)
acl:relcl(tornadoes-5, damaged-7)
dobj(damaged-7, houses-8)
punct(spawned-4, ,-9)
conj:and(spawned-4, destroyed-10)
amod(homes-12, mobile-11)
dobj(destroyed-10, homes-12)
cc(spawned-4, and-13)
conj:and(spawned-4, caused-14)
case(least-16, at-15)
nmod:npmod(one-17, least-16)
nummod(death-18, one-17)
dobj(caused-14, death-18)
case(Carolinas-21, in-19)
det(Carolinas-21, the-20)
nmod:in(caused-14, Carolinas-21)
mark(weakening-24, before-22)
advmod(weakening-24, gradually-23)
advcl(caused-14, weakening-24)
punct(spawned-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#homes

destroy :: Astrotech went into a deep tailspin two years ago , officials say , with the explosion of the Space Shuttle Challenger , which destroyed hopes of near-term commercial space travel ./.
nsubj(went-2, Astrotech-1)
root(ROOT-0, went-2)
case(tailspin-6, into-3)
det(tailspin-6, a-4)
amod(tailspin-6, deep-5)
nmod:into(went-2, tailspin-6)
nummod(years-8, two-7)
nmod:npmod(ago-9, years-8)
advmod(went-2, ago-9)
punct(say-12, ,-10)
nsubj(say-12, officials-11)
parataxis(went-2, say-12)
punct(say-12, ,-13)
case(explosion-16, with-14)
det(explosion-16, the-15)
nmod:with(went-2, explosion-16)
case(Challenger-21, of-17)
det(Challenger-21, the-18)
compound(Challenger-21, Space-19)
compound(Challenger-21, Shuttle-20)
nmod:of(explosion-16, Challenger-21)
nsubj(destroyed-24, Challenger-21)
punct(Challenger-21, ,-22)
ref(Challenger-21, which-23)
acl:relcl(Challenger-21, destroyed-24)
dobj(destroyed-24, hopes-25)
case(travel-30, of-26)
amod(travel-30, near-term-27)
amod(travel-30, commercial-28)
compound(travel-30, space-29)
nmod:of(hopes-25, travel-30)
punct(went-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#hopes

destroy :: Mr. Berg 's murderers were bent on destroying what they call ZOG -LRB- Zionist Occupied Government -RRB- ./.
compound(Berg-2, Mr.-1)
nmod:poss(murderers-4, Berg-2)
case(Berg-2, 's-3)
nsubj(bent-6, murderers-4)
cop(bent-6, were-5)
root(ROOT-0, bent-6)
mark(destroying-8, on-7)
advcl(bent-6, destroying-8)
dobj(call-11, what-9)
nsubj(call-11, they-10)
ccomp(destroying-8, call-11)
dobj(call-11, ZOG-12)
punct(Government-16, -LRB--13)
compound(Government-16, Zionist-14)
amod(Government-16, Occupied-15)
appos(ZOG-12, Government-16)
punct(Government-16, -RRB--17)
punct(bent-6, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

destroy :: This is also true , I believe , with respect to the famous Buddhist university at Nalanda , India , which too was destroyed by the Moslem hordes , who had no respect for others ' learning ./.
nsubj(true-4, This-1)
cop(true-4, is-2)
advmod(true-4, also-3)
root(ROOT-0, true-4)
punct(believe-7, ,-5)
nsubj(believe-7, I-6)
parataxis(true-4, believe-7)
punct(believe-7, ,-8)
case(university-15, with-9)
mwe(with-9, respect-10)
mwe(with-9, to-11)
det(university-15, the-12)
amod(university-15, famous-13)
compound(university-15, Buddhist-14)
nmod:with_respect_to(true-4, university-15)
nsubjpass(destroyed-24, university-15)
case(Nalanda-17, at-16)
nmod:at(university-15, Nalanda-17)
punct(Nalanda-17, ,-18)
appos(Nalanda-17, India-19)
punct(university-15, ,-20)
ref(university-15, which-21)
advmod(destroyed-24, too-22)
auxpass(destroyed-24, was-23)
acl:relcl(university-15, destroyed-24)
case(hordes-28, by-25)
det(hordes-28, the-26)
compound(hordes-28, Moslem-27)
nmod:agent(destroyed-24, hordes-28)
nsubj(had-31, hordes-28)
punct(hordes-28, ,-29)
ref(hordes-28, who-30)
acl:relcl(hordes-28, had-31)
neg(respect-33, no-32)
dobj(had-31, respect-33)
case(learning-37, for-34)
nmod:poss(learning-37, others-35)
case(others-35, '-36)
nmod:for(respect-33, learning-37)
punct(true-4, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#university

destroy :: But as most of those certificates are destroyed in favor of computer records , the investor who requests a certificate will have to wait until it 's delivered by the city or state that issued the bond ./.
cc(destroyed-8, But-1)
case(most-3, as-2)
nsubjpass(destroyed-8, most-3)
case(certificates-6, of-4)
det(certificates-6, those-5)
nmod:of(most-3, certificates-6)
auxpass(destroyed-8, are-7)
advcl(have-22, destroyed-8)
case(favor-10, in-9)
nmod:in(destroyed-8, favor-10)
case(records-13, of-11)
compound(records-13, computer-12)
nmod:of(favor-10, records-13)
punct(have-22, ,-14)
det(investor-16, the-15)
nsubj(requests-18, investor-16)
nsubj(have-22, investor-16)
nsubj:xsubj(wait-24, investor-16)
ref(investor-16, who-17)
acl:relcl(investor-16, requests-18)
det(certificate-20, a-19)
dobj(requests-18, certificate-20)
aux(have-22, will-21)
root(ROOT-0, have-22)
mark(wait-24, to-23)
xcomp(have-22, wait-24)
mark(delivered-28, until-25)
nsubjpass(delivered-28, it-26)
auxpass(delivered-28, 's-27)
advcl(wait-24, delivered-28)
case(city-31, by-29)
det(city-31, the-30)
nmod:agent(delivered-28, city-31)
nsubj(issued-35, city-31)
cc(city-31, or-32)
nmod:agent(delivered-28, state-33)
conj:or(city-31, state-33)
nsubj(issued-35, state-33)
ref(city-31, that-34)
acl:relcl(city-31, issued-35)
det(bond-37, the-36)
dobj(issued-35, bond-37)
punct(have-22, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#most

destroy :: Last year , Mexico claimed that the equivalent of 6 , 200 acres of poppies were destroyed , up from 5 , 900 acres the previous year ./.
amod(year-2, Last-1)
nmod:tmod(claimed-5, year-2)
punct(claimed-5, ,-3)
nsubj(claimed-5, Mexico-4)
root(ROOT-0, claimed-5)
dobj(claimed-5, that-6)
det(equivalent-8, the-7)
root(that-6, equivalent-8)
case(destroyed-17, of-9)
nummod(destroyed-17, 6-10)
punct(destroyed-17, ,-11)
nummod(acres-13, 200-12)
nsubjpass(destroyed-17, acres-13)
case(poppies-15, of-14)
nmod:of(acres-13, poppies-15)
auxpass(destroyed-17, were-16)
nmod:of(equivalent-8, destroyed-17)
punct(destroyed-17, ,-18)
advmod(destroyed-17, up-19)
case(5-21, from-20)
nmod:from(up-19, 5-21)
punct(5-21, ,-22)
nummod(acres-24, 900-23)
appos(5-21, acres-24)
det(year-27, the-25)
amod(year-27, previous-26)
nmod:tmod(acres-24, year-27)
punct(equivalent-8, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#acres

destroy :: Israel has agreed to develop an interceptor missile for the U.S. that would destroy short-range ground-to-ground missiles , state-owned Israel Aircraft Industries said ./.
nsubj(agreed-3, Israel-1)
nsubj:xsubj(develop-5, Israel-1)
aux(agreed-3, has-2)
ccomp(said-23, agreed-3)
mark(develop-5, to-4)
xcomp(agreed-3, develop-5)
det(missile-8, an-6)
compound(missile-8, interceptor-7)
dobj(develop-5, missile-8)
nsubj(destroy-14, missile-8)
case(U.S.-11, for-9)
det(U.S.-11, the-10)
nmod:for(missile-8, U.S.-11)
ref(missile-8, that-12)
aux(destroy-14, would-13)
acl:relcl(missile-8, destroy-14)
amod(missiles-17, short-range-15)
amod(missiles-17, ground-to-ground-16)
dobj(destroy-14, missiles-17)
punct(missiles-17, ,-18)
amod(Industries-22, state-owned-19)
compound(Industries-22, Israel-20)
compound(Industries-22, Aircraft-21)
appos(missiles-17, Industries-22)
root(ROOT-0, said-23)
punct(said-23, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#missiles

destroy :: And Mr. Gorbachev 's proposal to remove aircraft -- which easily can fly back to Central Europe during a crisis -- would be meaningless unless they are destroyed , Mr. Chalmers says ./.
cc(meaningless-24, And-1)
compound(Gorbachev-3, Mr.-2)
nmod:poss(proposal-5, Gorbachev-3)
case(Gorbachev-3, 's-4)
nsubj(fly-13, proposal-5)
nsubj(meaningless-24, proposal-5)
mark(remove-7, to-6)
acl(proposal-5, remove-7)
dobj(remove-7, aircraft-8)
punct(proposal-5, ---9)
ref(proposal-5, which-10)
advmod(fly-13, easily-11)
aux(fly-13, can-12)
acl:relcl(proposal-5, fly-13)
advmod(fly-13, back-14)
case(Europe-17, to-15)
compound(Europe-17, Central-16)
nmod:to(fly-13, Europe-17)
case(crisis-20, during-18)
det(crisis-20, a-19)
nmod:during(fly-13, crisis-20)
punct(proposal-5, ---21)
aux(meaningless-24, would-22)
cop(meaningless-24, be-23)
ccomp(says-32, meaningless-24)
mark(destroyed-28, unless-25)
nsubjpass(destroyed-28, they-26)
auxpass(destroyed-28, are-27)
advcl(meaningless-24, destroyed-28)
punct(says-32, ,-29)
compound(Chalmers-31, Mr.-30)
nsubj(says-32, Chalmers-31)
root(ROOT-0, says-32)
punct(says-32, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#they

destroy :: Nevertheless , petroleum markets remain stubbornly soft despite recurring signals of a possible turnaround , including major gains in petroleum demand and supply interruptions , such as last week 's explosion that destroyed the Piper Alpha platform in the North Sea ./.
advmod(remain-5, Nevertheless-1)
punct(remain-5, ,-2)
compound(markets-4, petroleum-3)
nsubj(remain-5, markets-4)
root(ROOT-0, remain-5)
advmod(soft-7, stubbornly-6)
xcomp(remain-5, soft-7)
case(signals-10, despite-8)
amod(signals-10, recurring-9)
nmod:despite(remain-5, signals-10)
case(turnaround-14, of-11)
det(turnaround-14, a-12)
amod(turnaround-14, possible-13)
nmod:of(signals-10, turnaround-14)
punct(turnaround-14, ,-15)
case(gains-18, including-16)
amod(gains-18, major-17)
nmod:including(turnaround-14, gains-18)
case(demand-21, in-19)
compound(demand-21, petroleum-20)
nmod:in(gains-18, demand-21)
cc(demand-21, and-22)
compound(interruptions-24, supply-23)
nmod:in(gains-18, interruptions-24)
conj:and(demand-21, interruptions-24)
punct(gains-18, ,-25)
case(explosion-31, such-26)
mwe(such-26, as-27)
amod(week-29, last-28)
nmod:poss(explosion-31, week-29)
case(week-29, 's-30)
nmod:such_as(gains-18, explosion-31)
nsubj(destroyed-33, explosion-31)
ref(explosion-31, that-32)
acl:relcl(explosion-31, destroyed-33)
det(platform-37, the-34)
compound(platform-37, Piper-35)
compound(platform-37, Alpha-36)
dobj(destroyed-33, platform-37)
case(Sea-41, in-38)
det(Sea-41, the-39)
compound(Sea-41, North-40)
nmod:in(platform-37, Sea-41)
punct(remain-5, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#platform

destroy :: They destroyed 450 , 000 acres of sugar beets and other crops ./.
nsubj(destroyed-2, They-1)
root(ROOT-0, destroyed-2)
dobj(destroyed-2, 450-3)
punct(450-3, ,-4)
nummod(acres-6, 000-5)
appos(450-3, acres-6)
case(beets-9, of-7)
compound(beets-9, sugar-8)
nmod:of(acres-6, beets-9)
cc(beets-9, and-10)
amod(crops-12, other-11)
nmod:of(acres-6, crops-12)
conj:and(beets-9, crops-12)
punct(destroyed-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#450

destroy :: Mr. Hudson did n't provide any details about who destroyed documents , how they were destroyed or how they might have been related to the investigation ./.
compound(Hudson-2, Mr.-1)
nsubj(provide-5, Hudson-2)
aux(provide-5, did-3)
neg(provide-5, n't-4)
root(ROOT-0, provide-5)
det(details-7, any-6)
dobj(provide-5, details-7)
mark(destroyed-10, about-8)
nsubj(destroyed-10, who-9)
acl(details-7, destroyed-10)
dobj(destroyed-10, documents-11)
punct(provide-5, ,-12)
advmod(destroyed-16, how-13)
nsubjpass(destroyed-16, they-14)
auxpass(destroyed-16, were-15)
dep(provide-5, destroyed-16)
cc(destroyed-16, or-17)
advmod(related-23, how-18)
nsubjpass(related-23, they-19)
aux(related-23, might-20)
aux(related-23, have-21)
auxpass(related-23, been-22)
dep(provide-5, related-23)
conj:or(destroyed-16, related-23)
case(investigation-26, to-24)
det(investigation-26, the-25)
nmod:to(related-23, investigation-26)
punct(provide-5, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#documents

destroy :: So in February 1985 , three years after her paintings were destroyed , Ms. Smith sued Chase in a New York civil court for $ 25 , 000 ./.
advmod(sued-16, So-1)
case(February-3, in-2)
nmod:in(sued-16, February-3)
nummod(February-3, 1985-4)
punct(February-3, ,-5)
nummod(years-7, three-6)
dep(destroyed-12, years-7)
mark(destroyed-12, after-8)
nmod:poss(paintings-10, her-9)
nsubjpass(destroyed-12, paintings-10)
auxpass(destroyed-12, were-11)
advcl(sued-16, destroyed-12)
punct(sued-16, ,-13)
compound(Smith-15, Ms.-14)
nsubj(sued-16, Smith-15)
root(ROOT-0, sued-16)
dobj(sued-16, Chase-17)
case(court-23, in-18)
det(court-23, a-19)
compound(court-23, New-20)
compound(court-23, York-21)
amod(court-23, civil-22)
nmod:in(sued-16, court-23)
case(25-26, for-24)
dep(25-26, $-25)
nmod:for(sued-16, 25-26)
punct(25-26, ,-27)
appos(25-26, 000-28)
punct(sued-16, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#paintings

destroy :: The point of view of the economist here misses the essential by being too technical , namely that the values associated with a free-market economy can be destroyed by the tax system ./.
det(point-2, The-1)
nsubj(misses-9, point-2)
case(view-4, of-3)
nmod:of(point-2, view-4)
case(economist-7, of-5)
det(economist-7, the-6)
nmod:of(view-4, economist-7)
advmod(misses-9, here-8)
root(ROOT-0, misses-9)
det(essential-11, the-10)
dobj(misses-9, essential-11)
mark(technical-15, by-12)
cop(technical-15, being-13)
advmod(technical-15, too-14)
advcl(misses-9, technical-15)
punct(technical-15, ,-16)
advmod(destroyed-28, namely-17)
mark(destroyed-28, that-18)
det(values-20, the-19)
nsubjpass(destroyed-28, values-20)
acl(values-20, associated-21)
case(economy-25, with-22)
det(economy-25, a-23)
amod(economy-25, free-market-24)
nmod:with(associated-21, economy-25)
aux(destroyed-28, can-26)
auxpass(destroyed-28, be-27)
advcl(technical-15, destroyed-28)
case(system-32, by-29)
det(system-32, the-30)
compound(system-32, tax-31)
nmod:agent(destroyed-28, system-32)
punct(misses-9, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#values

destroy :: The treaty requires that the Army 's 420 Pershing missiles be destroyed ./.
det(treaty-2, The-1)
nsubj(requires-3, treaty-2)
root(ROOT-0, requires-3)
mark(destroyed-12, that-4)
det(Army-6, the-5)
nmod:poss(missiles-10, Army-6)
case(Army-6, 's-7)
nummod(missiles-10, 420-8)
amod(missiles-10, Pershing-9)
nsubjpass(destroyed-12, missiles-10)
auxpass(destroyed-12, be-11)
ccomp(requires-3, destroyed-12)
punct(requires-3, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#missiles

destroy :: Furthermore , records that were supposed to be destroyed sometimes are n't , and they , too , occasionally surface ./.
advmod(surface-20, Furthermore-1)
punct(surface-20, ,-2)
nsubjpass(supposed-6, records-3)
nsubjpass:xsubj(destroyed-9, records-3)
nsubj(surface-20, records-3)
ref(records-3, that-4)
auxpass(supposed-6, were-5)
acl:relcl(records-3, supposed-6)
mark(destroyed-9, to-7)
auxpass(destroyed-9, be-8)
xcomp(supposed-6, destroyed-9)
advmod(destroyed-9, sometimes-10)
cop(surface-20, are-11)
neg(surface-20, n't-12)
punct(surface-20, ,-13)
cc(surface-20, and-14)
conj:and(surface-20, they-15)
punct(surface-20, ,-16)
advmod(surface-20, too-17)
punct(surface-20, ,-18)
advmod(surface-20, occasionally-19)
root(ROOT-0, surface-20)
punct(surface-20, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#be

destroy :: A person who actually believes in something is likely to have his or her reputation and career destroyed by letting substance get in the way of image ./.
det(person-2, A-1)
nsubj(believes-5, person-2)
nsubj(likely-9, person-2)
nsubj:xsubj(have-11, person-2)
ref(person-2, who-3)
advmod(believes-5, actually-4)
acl:relcl(person-2, believes-5)
case(something-7, in-6)
nmod:in(believes-5, something-7)
cop(likely-9, is-8)
root(ROOT-0, likely-9)
mark(have-11, to-10)
xcomp(likely-9, have-11)
nmod:poss(reputation-15, his-12)
cc(his-12, or-13)
conj:or(his-12, her-14)
nmod:poss(reputation-15, her-14)
nsubj(destroyed-18, reputation-15)
cc(reputation-15, and-16)
conj:and(reputation-15, career-17)
nsubj(destroyed-18, career-17)
ccomp(have-11, destroyed-18)
mark(letting-20, by-19)
advcl(destroyed-18, letting-20)
nsubj(get-22, substance-21)
ccomp(letting-20, get-22)
case(way-25, in-23)
det(way-25, the-24)
nmod:in(get-22, way-25)
case(image-27, of-26)
nmod:of(way-25, image-27)
punct(likely-9, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#reputation

destroy :: The department maintained that fighter aircraft , for example , `` must be fast enough and maneuverable enough to evade and destroy enemy aircraft ./.
det(department-2, The-1)
nsubj(maintained-3, department-2)
root(ROOT-0, maintained-3)
mark(enough-15, that-4)
compound(aircraft-6, fighter-5)
nsubj(enough-15, aircraft-6)
nsubj(maneuverable-17, aircraft-6)
punct(enough-15, ,-7)
case(example-9, for-8)
nmod:for(enough-15, example-9)
punct(enough-15, ,-10)
punct(enough-15, ``-11)
aux(enough-15, must-12)
cop(enough-15, be-13)
advmod(enough-15, fast-14)
ccomp(maintained-3, enough-15)
cc(enough-15, and-16)
ccomp(maintained-3, maneuverable-17)
conj:and(enough-15, maneuverable-17)
dep(enough-15, enough-18)
mark(evade-20, to-19)
xcomp(enough-18, evade-20)
cc(evade-20, and-21)
xcomp(enough-18, destroy-22)
conj:and(evade-20, destroy-22)
compound(aircraft-24, enemy-23)
dobj(evade-20, aircraft-24)
punct(maintained-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

destroy :: They are so consumed by their own power , by a Mussolini-like ego , that their willingness to run over normal human beings and to destroy honest institutions is unending . ''/''
nsubjpass(consumed-4, They-1)
auxpass(consumed-4, are-2)
advmod(consumed-4, so-3)
root(ROOT-0, consumed-4)
case(power-8, by-5)
nmod:poss(power-8, their-6)
amod(power-8, own-7)
nmod:agent(consumed-4, power-8)
punct(consumed-4, ,-9)
case(ego-13, by-10)
det(ego-13, a-11)
amod(ego-13, Mussolini-like-12)
nmod:agent(consumed-4, ego-13)
punct(consumed-4, ,-14)
mark(unending-30, that-15)
nmod:poss(willingness-17, their-16)
nsubj(unending-30, willingness-17)
mark(run-19, to-18)
acl(willingness-17, run-19)
case(beings-23, over-20)
amod(beings-23, normal-21)
amod(beings-23, human-22)
nmod:over(run-19, beings-23)
cc(run-19, and-24)
mark(destroy-26, to-25)
acl(willingness-17, destroy-26)
conj:and(run-19, destroy-26)
amod(institutions-28, honest-27)
dobj(destroy-26, institutions-28)
cop(unending-30, is-29)
ccomp(consumed-4, unending-30)
punct(consumed-4, .-31)
punct(consumed-4, ''-32)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: destroy#institutions

destroy :: He arrived in the U.S. last month after bulldozers and jackhammers destroyed his 80-year-old house in central Bucharest ./.
nsubj(arrived-2, He-1)
root(ROOT-0, arrived-2)
case(U.S.-5, in-3)
det(U.S.-5, the-4)
nmod:in(arrived-2, U.S.-5)
amod(month-7, last-6)
nmod:tmod(arrived-2, month-7)
case(bulldozers-9, after-8)
nmod:after(arrived-2, bulldozers-9)
cc(bulldozers-9, and-10)
nmod:after(arrived-2, jackhammers-11)
conj:and(bulldozers-9, jackhammers-11)
dep(arrived-2, destroyed-12)
nmod:poss(house-15, his-13)
amod(house-15, 80-year-old-14)
dobj(destroyed-12, house-15)
case(Bucharest-18, in-16)
amod(Bucharest-18, central-17)
nmod:in(destroyed-12, Bucharest-18)
punct(arrived-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#house

destroy :: A Soviet Foreign Ministry aide disputed claims by U.S. officials that an explosion last week destroyed the only plant producing rocket fuel for SS-24 intercontinental missiles ./.
det(aide-5, A-1)
amod(aide-5, Soviet-2)
compound(aide-5, Foreign-3)
compound(aide-5, Ministry-4)
nsubj(disputed-6, aide-5)
root(ROOT-0, disputed-6)
dobj(disputed-6, claims-7)
case(officials-10, by-8)
compound(officials-10, U.S.-9)
nmod:by(claims-7, officials-10)
mark(destroyed-16, that-11)
det(explosion-13, an-12)
nsubj(destroyed-16, explosion-13)
amod(week-15, last-14)
nmod:tmod(explosion-13, week-15)
dep(claims-7, destroyed-16)
det(plant-19, the-17)
amod(plant-19, only-18)
dobj(destroyed-16, plant-19)
acl(plant-19, producing-20)
compound(fuel-22, rocket-21)
dobj(producing-20, fuel-22)
case(missiles-26, for-23)
compound(missiles-26, SS-24-24)
compound(missiles-26, intercontinental-25)
nmod:for(fuel-22, missiles-26)
punct(disputed-6, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#plant

destroy :: The CDC report did not deal with the so-called `` good cholesterol '' -- the high-density form of lipoprotein that gathers up cholesterol in the body and carries it to be destroyed ./.
det(report-3, The-1)
compound(report-3, CDC-2)
nsubj(deal-6, report-3)
aux(deal-6, did-4)
neg(deal-6, not-5)
root(ROOT-0, deal-6)
case(cholesterol-12, with-7)
det(cholesterol-12, the-8)
amod(cholesterol-12, so-called-9)
punct(cholesterol-12, ``-10)
amod(cholesterol-12, good-11)
nmod:with(deal-6, cholesterol-12)
punct(cholesterol-12, ''-13)
punct(cholesterol-12, ---14)
det(form-17, the-15)
amod(form-17, high-density-16)
dep(cholesterol-12, form-17)
nsubj(gathers-21, form-17)
nsubj(carries-28, form-17)
case(lipoprotein-19, of-18)
nmod:of(form-17, lipoprotein-19)
ref(form-17, that-20)
acl:relcl(form-17, gathers-21)
compound:prt(gathers-21, up-22)
dobj(gathers-21, cholesterol-23)
case(body-26, in-24)
det(body-26, the-25)
nmod:in(cholesterol-23, body-26)
cc(gathers-21, and-27)
acl:relcl(form-17, carries-28)
conj:and(gathers-21, carries-28)
dobj(carries-28, it-29)
nsubjpass:xsubj(destroyed-32, it-29)
mark(destroyed-32, to-30)
auxpass(destroyed-32, be-31)
xcomp(carries-28, destroyed-32)
punct(deal-6, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#be

destroy :: After destroying two platforms , the Iranian gunboat the Joshan mounted a failed assault on the Navy ships and was quickly sunk ./.
mark(destroying-2, After-1)
advcl(sunk-22, destroying-2)
nummod(platforms-4, two-3)
dobj(destroying-2, platforms-4)
punct(sunk-22, ,-5)
det(gunboat-8, the-6)
amod(gunboat-8, Iranian-7)
nsubjpass(sunk-22, gunboat-8)
det(Joshan-10, the-9)
nsubj(mounted-11, Joshan-10)
acl:relcl(gunboat-8, mounted-11)
det(assault-14, a-12)
amod(assault-14, failed-13)
dobj(mounted-11, assault-14)
case(ships-18, on-15)
det(ships-18, the-16)
compound(ships-18, Navy-17)
nmod:on(assault-14, ships-18)
cc(gunboat-8, and-19)
auxpass(sunk-22, was-20)
advmod(sunk-22, quickly-21)
root(ROOT-0, sunk-22)
punct(sunk-22, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#platforms

destroy :: The agreement , to be announced today , marks the first time an industry using chlorofluorocarbons , or CFCs , has voluntarily decided to phase out the chemicals because they can destroy the Earth 's protective ozone layer ./.
det(agreement-2, The-1)
nsubj(marks-9, agreement-2)
punct(agreement-2, ,-3)
mark(announced-6, to-4)
auxpass(announced-6, be-5)
acl(agreement-2, announced-6)
nmod:tmod(announced-6, today-7)
punct(agreement-2, ,-8)
root(ROOT-0, marks-9)
det(time-12, the-10)
amod(time-12, first-11)
dobj(marks-9, time-12)
det(industry-14, an-13)
dep(time-12, industry-14)
acl(industry-14, using-15)
dobj(using-15, chlorofluorocarbons-16)
punct(chlorofluorocarbons-16, ,-17)
cc(chlorofluorocarbons-16, or-18)
dobj(using-15, CFCs-19)
conj:or(chlorofluorocarbons-16, CFCs-19)
punct(marks-9, ,-20)
aux(decided-23, has-21)
advmod(decided-23, voluntarily-22)
dep(marks-9, decided-23)
mark(phase-25, to-24)
xcomp(decided-23, phase-25)
compound:prt(phase-25, out-26)
det(chemicals-28, the-27)
dobj(phase-25, chemicals-28)
mark(destroy-32, because-29)
nsubj(destroy-32, they-30)
aux(destroy-32, can-31)
advcl(decided-23, destroy-32)
det(Earth-34, the-33)
nmod:poss(layer-38, Earth-34)
case(Earth-34, 's-35)
amod(layer-38, protective-36)
compound(layer-38, ozone-37)
dobj(destroy-32, layer-38)
punct(marks-9, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#layer

destroy :: Indeed , the unrelieved pursuit of sales growth for its own sake , far from creating value , often destroys it ./.
advmod(destroys-20, Indeed-1)
punct(destroys-20, ,-2)
det(pursuit-5, the-3)
amod(pursuit-5, unrelieved-4)
nsubj(destroys-20, pursuit-5)
case(growth-8, of-6)
compound(growth-8, sales-7)
nmod:of(pursuit-5, growth-8)
case(sake-12, for-9)
nmod:poss(sake-12, its-10)
amod(sake-12, own-11)
nmod:for(growth-8, sake-12)
punct(sake-12, ,-13)
advmod(creating-16, far-14)
mark(creating-16, from-15)
acl(sake-12, creating-16)
dobj(creating-16, value-17)
punct(sake-12, ,-18)
advmod(destroys-20, often-19)
root(ROOT-0, destroys-20)
dobj(destroys-20, it-21)
punct(destroys-20, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#it

destroy :: `` This case is the next logical step in our efforts to put a halt to Lorenzo 's oppressive and unlawful campaign to destroy organized labor at Eastern . ''/''
root(ROOT-0, ``-1)
det(case-3, This-2)
nsubj(step-8, case-3)
cop(step-8, is-4)
det(step-8, the-5)
amod(step-8, next-6)
amod(step-8, logical-7)
root(``-1, step-8)
case(efforts-11, in-9)
nmod:poss(efforts-11, our-10)
nmod:in(step-8, efforts-11)
mark(put-13, to-12)
acl(efforts-11, put-13)
det(halt-15, a-14)
dobj(put-13, halt-15)
case(campaign-22, to-16)
nmod:poss(campaign-22, Lorenzo-17)
case(Lorenzo-17, 's-18)
amod(campaign-22, oppressive-19)
cc(oppressive-19, and-20)
conj:and(oppressive-19, unlawful-21)
amod(campaign-22, unlawful-21)
nmod:to(put-13, campaign-22)
mark(destroy-24, to-23)
advcl(put-13, destroy-24)
amod(labor-26, organized-25)
dobj(destroy-24, labor-26)
case(Eastern-28, at-27)
nmod:at(destroy-24, Eastern-28)
punct(step-8, .-29)
punct(step-8, ''-30)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: destroy#labor

destroy :: Once the people move , these houses will be destroyed ./.
advmod(move-4, Once-1)
det(people-3, the-2)
nsubj(move-4, people-3)
advcl(destroyed-10, move-4)
punct(destroyed-10, ,-5)
det(houses-7, these-6)
nsubjpass(destroyed-10, houses-7)
aux(destroyed-10, will-8)
auxpass(destroyed-10, be-9)
root(ROOT-0, destroyed-10)
punct(destroyed-10, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#houses

destroy :: Companies still spend billions of dollars printing and storing forms -- - and destroying them when , say , an address changes ./.
nsubj(spend-3, Companies-1)
nsubj(destroying-14, Companies-1)
advmod(spend-3, still-2)
root(ROOT-0, spend-3)
dobj(spend-3, billions-4)
case(dollars-6, of-5)
nmod:of(billions-4, dollars-6)
amod(forms-10, printing-7)
cc(printing-7, and-8)
conj:and(printing-7, storing-9)
amod(forms-10, storing-9)
dep(dollars-6, forms-10)
punct(spend-3, ---11)
punct(spend-3, --12)
cc(spend-3, and-13)
conj:and(spend-3, destroying-14)
dobj(destroying-14, them-15)
advmod(changes-22, when-16)
punct(say-18, ,-17)
dep(changes-22, say-18)
punct(say-18, ,-19)
det(changes-22, an-20)
compound(changes-22, address-21)
advcl(destroying-14, changes-22)
punct(spend-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#them

destroy :: This agreement is the product of the determination and sacrifice of the freedom fighters through years of struggle , including their heroic resistance last week to a Sandinista offensive designed to destroy them ./.
det(agreement-2, This-1)
nsubj(product-5, agreement-2)
cop(product-5, is-3)
det(product-5, the-4)
root(ROOT-0, product-5)
case(determination-8, of-6)
det(determination-8, the-7)
nmod:of(product-5, determination-8)
cc(determination-8, and-9)
nmod:of(product-5, sacrifice-10)
conj:and(determination-8, sacrifice-10)
case(fighters-14, of-11)
det(fighters-14, the-12)
compound(fighters-14, freedom-13)
nmod:of(determination-8, fighters-14)
case(years-16, through-15)
nmod:through(product-5, years-16)
case(struggle-18, of-17)
nmod:of(years-16, struggle-18)
punct(product-5, ,-19)
case(resistance-23, including-20)
nmod:poss(resistance-23, their-21)
amod(resistance-23, heroic-22)
nmod:including(product-5, resistance-23)
amod(week-25, last-24)
nmod:tmod(resistance-23, week-25)
case(offensive-29, to-26)
det(offensive-29, a-27)
amod(offensive-29, Sandinista-28)
nmod:to(resistance-23, offensive-29)
acl(offensive-29, designed-30)
mark(destroy-32, to-31)
xcomp(designed-30, destroy-32)
dobj(destroy-32, them-33)
punct(product-5, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#them

destroy :: This was not the first occasion when Sandinistas have pursued Contras across an ill-defined frontier and sought to destroy the Contra bases ./.
nsubj(occasion-6, This-1)
cop(occasion-6, was-2)
neg(occasion-6, not-3)
det(occasion-6, the-4)
amod(occasion-6, first-5)
root(ROOT-0, occasion-6)
advmod(pursued-10, when-7)
nsubj(pursued-10, Sandinistas-8)
nsubj(sought-17, Sandinistas-8)
nsubj:xsubj(destroy-19, Sandinistas-8)
aux(pursued-10, have-9)
acl:relcl(occasion-6, pursued-10)
dobj(pursued-10, Contras-11)
case(frontier-15, across-12)
det(frontier-15, an-13)
amod(frontier-15, ill-defined-14)
nmod:across(pursued-10, frontier-15)
cc(pursued-10, and-16)
acl:relcl(occasion-6, sought-17)
conj:and(pursued-10, sought-17)
mark(destroy-19, to-18)
xcomp(sought-17, destroy-19)
det(bases-22, the-20)
compound(bases-22, Contra-21)
dobj(destroy-19, bases-22)
punct(occasion-6, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#bases

destroy :: There is n't any indication that it could destroy the AIDS virus itself ./.
expl(is-2, There-1)
root(ROOT-0, is-2)
neg(is-2, n't-3)
det(indication-5, any-4)
nsubj(is-2, indication-5)
mark(destroy-9, that-6)
nsubj(destroy-9, it-7)
aux(destroy-9, could-8)
ccomp(indication-5, destroy-9)
det(virus-12, the-10)
compound(virus-12, AIDS-11)
dobj(destroy-9, virus-12)
nmod:npmod(virus-12, itself-13)
punct(is-2, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#virus

destroy :: Equally important , his Socialist government absorbed and then , in effect , destroyed the French Communist Party ./.
advmod(important-2, Equally-1)
dep(absorbed-7, important-2)
punct(absorbed-7, ,-3)
nmod:poss(government-6, his-4)
amod(government-6, Socialist-5)
nsubj(absorbed-7, government-6)
root(ROOT-0, absorbed-7)
cc(absorbed-7, and-8)
advmod(absorbed-7, then-9)
punct(absorbed-7, ,-10)
case(effect-12, in-11)
nmod:in(absorbed-7, effect-12)
punct(absorbed-7, ,-13)
dep(absorbed-7, destroyed-14)
det(Party-18, the-15)
compound(Party-18, French-16)
compound(Party-18, Communist-17)
dobj(destroyed-14, Party-18)
punct(absorbed-7, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#party

destroy :: `` We do n't need the government trying to destroy the industry because of a few bad apples , '' says David L. Ganz , an ANA board member and a lawyer for some coin dealers ./.
punct(says-21, ``-1)
nsubj(need-5, We-2)
aux(need-5, do-3)
neg(need-5, n't-4)
ccomp(says-21, need-5)
det(government-7, the-6)
nsubj(trying-8, government-7)
nsubj:xsubj(destroy-10, government-7)
dep(need-5, trying-8)
mark(destroy-10, to-9)
xcomp(trying-8, destroy-10)
det(industry-12, the-11)
dobj(destroy-10, industry-12)
case(apples-18, because-13)
mwe(because-13, of-14)
det(apples-18, a-15)
amod(apples-18, few-16)
amod(apples-18, bad-17)
nmod:because_of(destroy-10, apples-18)
punct(says-21, ,-19)
punct(says-21, ''-20)
root(ROOT-0, says-21)
compound(Ganz-24, David-22)
compound(Ganz-24, L.-23)
nsubj(says-21, Ganz-24)
punct(Ganz-24, ,-25)
det(member-29, an-26)
compound(member-29, ANA-27)
compound(member-29, board-28)
appos(Ganz-24, member-29)
cc(member-29, and-30)
det(lawyer-32, a-31)
appos(Ganz-24, lawyer-32)
conj:and(member-29, lawyer-32)
case(dealers-36, for-33)
det(dealers-36, some-34)
compound(dealers-36, coin-35)
nmod:for(lawyer-32, dealers-36)
punct(says-21, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#industry

destroy :: Then , two days before the scheduled premiere in November , a fire raged through the opera house , destroying the backstage facility , sets and costumes ./.
advmod(raged-14, Then-1)
punct(raged-14, ,-2)
nummod(days-4, two-3)
nmod:tmod(raged-14, days-4)
case(premiere-8, before-5)
det(premiere-8, the-6)
amod(premiere-8, scheduled-7)
nmod:before(days-4, premiere-8)
case(November-10, in-9)
nmod:in(premiere-8, November-10)
punct(raged-14, ,-11)
det(fire-13, a-12)
nsubj(raged-14, fire-13)
root(ROOT-0, raged-14)
case(house-18, through-15)
det(house-18, the-16)
compound(house-18, opera-17)
nmod:through(raged-14, house-18)
punct(raged-14, ,-19)
xcomp(raged-14, destroying-20)
det(facility-23, the-21)
advmod(facility-23, backstage-22)
dobj(destroying-20, facility-23)
punct(facility-23, ,-24)
dobj(destroying-20, sets-25)
conj:and(facility-23, sets-25)
cc(facility-23, and-26)
dobj(destroying-20, costumes-27)
conj:and(facility-23, costumes-27)
punct(raged-14, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#facility

destroy :: In a test against listeria grown in cole slaw , lysozyme destroyed it without affecting the quality of the food ./.
case(test-3, In-1)
det(test-3, a-2)
nmod:in(destroyed-12, test-3)
case(listeria-5, against-4)
nmod:against(test-3, listeria-5)
acl(listeria-5, grown-6)
case(slaw-9, in-7)
compound(slaw-9, cole-8)
nmod:in(grown-6, slaw-9)
punct(destroyed-12, ,-10)
nsubj(destroyed-12, lysozyme-11)
root(ROOT-0, destroyed-12)
dobj(destroyed-12, it-13)
mark(affecting-15, without-14)
advcl(destroyed-12, affecting-15)
det(quality-17, the-16)
dobj(affecting-15, quality-17)
case(food-20, of-18)
det(food-20, the-19)
nmod:of(quality-17, food-20)
punct(destroyed-12, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#it

destroy :: But Mr. Hewett says a prolonged argument in the Kremlin over how and when to introduce market-oriented prices could delay other reforms and even destroy them if the price issue is n't honestly resolved ./.
cc(says-4, But-1)
compound(Hewett-3, Mr.-2)
nsubj(says-4, Hewett-3)
root(ROOT-0, says-4)
det(argument-7, a-5)
amod(argument-7, prolonged-6)
nsubj(delay-20, argument-7)
nsubj(destroy-25, argument-7)
case(Kremlin-10, in-8)
det(Kremlin-10, the-9)
nmod:in(argument-7, Kremlin-10)
mark(introduce-16, over-11)
advmod(introduce-16, how-12)
cc(how-12, and-13)
dep(how-12, when-14)
mark(introduce-16, to-15)
acl(argument-7, introduce-16)
amod(prices-18, market-oriented-17)
dobj(introduce-16, prices-18)
aux(delay-20, could-19)
ccomp(says-4, delay-20)
amod(reforms-22, other-21)
dobj(delay-20, reforms-22)
cc(delay-20, and-23)
advmod(destroy-25, even-24)
ccomp(says-4, destroy-25)
conj:and(delay-20, destroy-25)
dobj(destroy-25, them-26)
mark(resolved-34, if-27)
det(issue-30, the-28)
compound(issue-30, price-29)
nsubjpass(resolved-34, issue-30)
auxpass(resolved-34, is-31)
neg(resolved-34, n't-32)
advmod(resolved-34, honestly-33)
advcl(destroy-25, resolved-34)
punct(says-4, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#them

destroy :: The plan to make Apple into a consumer marketing giant , orchestrated by both Mr. Sculley and Mr. Jobs , was pure lunacy and nearly destroyed the company ./.
det(plan-2, The-1)
nsubj(lunacy-23, plan-2)
nsubj(destroyed-26, plan-2)
mark(make-4, to-3)
acl(plan-2, make-4)
dobj(make-4, Apple-5)
case(giant-10, into-6)
det(giant-10, a-7)
compound(giant-10, consumer-8)
compound(giant-10, marketing-9)
nmod:into(make-4, giant-10)
punct(plan-2, ,-11)
acl(plan-2, orchestrated-12)
case(Sculley-16, by-13)
cc:preconj(Sculley-16, both-14)
compound(Sculley-16, Mr.-15)
nmod:by(orchestrated-12, Sculley-16)
cc(Sculley-16, and-17)
compound(Jobs-19, Mr.-18)
nmod:by(orchestrated-12, Jobs-19)
conj:and(Sculley-16, Jobs-19)
punct(plan-2, ,-20)
cop(lunacy-23, was-21)
amod(lunacy-23, pure-22)
root(ROOT-0, lunacy-23)
cc(lunacy-23, and-24)
advmod(destroyed-26, nearly-25)
conj:and(lunacy-23, destroyed-26)
det(company-28, the-27)
dobj(destroyed-26, company-28)
punct(lunacy-23, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#company

destroy :: A federal magistrate in New Orleans accused the brokerage unit of PaineWebber Inc. of relentless `` stonewalling '' -- among other things , permitting potential evidence to be destroyed -- to prevent a customer-complaint lawsuit from going to trial ./.
det(magistrate-3, A-1)
amod(magistrate-3, federal-2)
nsubj(accused-7, magistrate-3)
case(Orleans-6, in-4)
compound(Orleans-6, New-5)
nmod:in(magistrate-3, Orleans-6)
root(ROOT-0, accused-7)
det(unit-10, the-8)
compound(unit-10, brokerage-9)
dobj(accused-7, unit-10)
case(Inc.-13, of-11)
compound(Inc.-13, PaineWebber-12)
nmod:of(unit-10, Inc.-13)
case(stonewalling-17, of-14)
amod(stonewalling-17, relentless-15)
punct(stonewalling-17, ``-16)
nmod:of(Inc.-13, stonewalling-17)
punct(stonewalling-17, ''-18)
punct(accused-7, ---19)
case(things-22, among-20)
amod(things-22, other-21)
nmod:among(accused-7, things-22)
punct(things-22, ,-23)
acl(things-22, permitting-24)
amod(evidence-26, potential-25)
dobj(permitting-24, evidence-26)
mark(destroyed-29, to-27)
auxpass(destroyed-29, be-28)
acl(evidence-26, destroyed-29)
punct(destroyed-29, ---30)
mark(prevent-32, to-31)
xcomp(destroyed-29, prevent-32)
det(lawsuit-35, a-33)
amod(lawsuit-35, customer-complaint-34)
dobj(prevent-32, lawsuit-35)
mark(going-37, from-36)
advcl(prevent-32, going-37)
case(trial-39, to-38)
nmod:to(going-37, trial-39)
punct(accused-7, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#be

destroy :: `` What the U.S. should do , rather than destroying those oil wells , is capture them as prizes of war and turn their production over for the benefit of the U.S. and its other allies in the gulf , '' he said ./.
punct(capture-16, ``-1)
dobj(do-6, What-2)
det(U.S.-4, the-3)
nsubj(do-6, U.S.-4)
aux(do-6, should-5)
advcl(capture-16, do-6)
punct(capture-16, ,-7)
mark(destroying-10, rather-8)
mwe(rather-8, than-9)
advcl(capture-16, destroying-10)
det(wells-13, those-11)
compound(wells-13, oil-12)
dobj(destroying-10, wells-13)
punct(capture-16, ,-14)
aux(capture-16, is-15)
dep(said-43, capture-16)
dobj(capture-16, them-17)
case(prizes-19, as-18)
nmod:as(capture-16, prizes-19)
case(war-21, of-20)
nmod:of(prizes-19, war-21)
cc(capture-16, and-22)
conj:and(capture-16, turn-23)
dep(said-43, turn-23)
nmod:poss(production-25, their-24)
dobj(turn-23, production-25)
compound:prt(turn-23, over-26)
case(benefit-29, for-27)
det(benefit-29, the-28)
nmod:for(turn-23, benefit-29)
case(U.S.-32, of-30)
det(U.S.-32, the-31)
nmod:of(benefit-29, U.S.-32)
cc(U.S.-32, and-33)
nmod:poss(allies-36, its-34)
amod(allies-36, other-35)
nmod:of(benefit-29, allies-36)
conj:and(U.S.-32, allies-36)
case(gulf-39, in-37)
det(gulf-39, the-38)
nmod:in(allies-36, gulf-39)
punct(capture-16, ,-40)
punct(capture-16, ''-41)
nsubj(said-43, he-42)
root(ROOT-0, said-43)
punct(said-43, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#wells

destroy :: Because they 're so accurate , cruise missiles can use conventional bombs to destroy targets that only a few years ago required nuclear warheads ./.
mark(accurate-5, Because-1)
nsubj(accurate-5, they-2)
cop(accurate-5, 're-3)
advmod(accurate-5, so-4)
advcl(use-10, accurate-5)
punct(use-10, ,-6)
compound(missiles-8, cruise-7)
nsubj(use-10, missiles-8)
aux(use-10, can-9)
root(ROOT-0, use-10)
amod(bombs-12, conventional-11)
dobj(use-10, bombs-12)
mark(destroy-14, to-13)
advcl(use-10, destroy-14)
dobj(destroy-14, targets-15)
nsubj(required-22, targets-15)
ref(targets-15, that-16)
advmod(years-20, only-17)
det(years-20, a-18)
amod(years-20, few-19)
nmod:npmod(ago-21, years-20)
advmod(required-22, ago-21)
acl:relcl(targets-15, required-22)
amod(warheads-24, nuclear-23)
dobj(required-22, warheads-24)
punct(use-10, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#targets

destroy :: This objectivity , however , need not destroy the work 's subjectivity , and Mr. Palmer is wrong in asserting that moral-rights advocates `` claim that a work of art is simply an extension of the personality of the artist . ''/''
det(objectivity-2, This-1)
nsubj(destroy-8, objectivity-2)
punct(destroy-8, ,-3)
advmod(destroy-8, however-4)
punct(destroy-8, ,-5)
aux(destroy-8, need-6)
neg(destroy-8, not-7)
root(ROOT-0, destroy-8)
det(work-10, the-9)
nmod:poss(subjectivity-12, work-10)
case(work-10, 's-11)
dobj(destroy-8, subjectivity-12)
punct(destroy-8, ,-13)
cc(destroy-8, and-14)
compound(Palmer-16, Mr.-15)
nsubj(wrong-18, Palmer-16)
cop(wrong-18, is-17)
conj:and(destroy-8, wrong-18)
mark(asserting-20, in-19)
advcl(wrong-18, asserting-20)
mark(claim-25, that-21)
compound(advocates-23, moral-rights-22)
nsubj(claim-25, advocates-23)
punct(claim-25, ``-24)
ccomp(asserting-20, claim-25)
mark(extension-34, that-26)
det(work-28, a-27)
nsubj(extension-34, work-28)
case(art-30, of-29)
nmod:of(work-28, art-30)
cop(extension-34, is-31)
advmod(extension-34, simply-32)
det(extension-34, an-33)
ccomp(claim-25, extension-34)
case(personality-37, of-35)
det(personality-37, the-36)
nmod:of(extension-34, personality-37)
case(artist-40, of-38)
det(artist-40, the-39)
nmod:of(personality-37, artist-40)
punct(destroy-8, .-41)
punct(destroy-8, ''-42)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: destroy#subjectivity

destroy :: The agreement , to be announced today , marks the first time an industry using chlorofluorocarbons , or CFCs , has voluntarily decided to phase out the chemicals because they can destroy the Earth 's protective ozone layer ./.
det(agreement-2, The-1)
nsubj(marks-9, agreement-2)
punct(agreement-2, ,-3)
mark(announced-6, to-4)
auxpass(announced-6, be-5)
acl(agreement-2, announced-6)
nmod:tmod(announced-6, today-7)
punct(agreement-2, ,-8)
root(ROOT-0, marks-9)
det(time-12, the-10)
amod(time-12, first-11)
dobj(marks-9, time-12)
det(industry-14, an-13)
dep(time-12, industry-14)
acl(industry-14, using-15)
dobj(using-15, chlorofluorocarbons-16)
punct(chlorofluorocarbons-16, ,-17)
cc(chlorofluorocarbons-16, or-18)
dobj(using-15, CFCs-19)
conj:or(chlorofluorocarbons-16, CFCs-19)
punct(marks-9, ,-20)
aux(decided-23, has-21)
advmod(decided-23, voluntarily-22)
dep(marks-9, decided-23)
mark(phase-25, to-24)
xcomp(decided-23, phase-25)
compound:prt(phase-25, out-26)
det(chemicals-28, the-27)
dobj(phase-25, chemicals-28)
mark(destroy-32, because-29)
nsubj(destroy-32, they-30)
aux(destroy-32, can-31)
advcl(decided-23, destroy-32)
det(Earth-34, the-33)
nmod:poss(layer-38, Earth-34)
case(Earth-34, 's-35)
amod(layer-38, protective-36)
compound(layer-38, ozone-37)
dobj(destroy-32, layer-38)
punct(marks-9, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#layer

destroy :: Judges thus destroyed the time frame used in assessing risk ./.
nsubj(destroyed-3, Judges-1)
advmod(destroyed-3, thus-2)
root(ROOT-0, destroyed-3)
det(frame-6, the-4)
compound(frame-6, time-5)
dobj(destroyed-3, frame-6)
acl(frame-6, used-7)
mark(assessing-9, in-8)
advcl(used-7, assessing-9)
dobj(assessing-9, risk-10)
punct(destroyed-3, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#frame

destroy :: `` People destroy coral reefs that take thousands of years to build , affecting all the fish that use it for food and shelter , just for a piece of decoration , '' says Mr. McCloud ./.
punct(says-34, ``-1)
nsubj(destroy-3, People-2)
ccomp(says-34, destroy-3)
compound(reefs-5, coral-4)
dobj(destroy-3, reefs-5)
nsubj(take-7, reefs-5)
ref(reefs-5, that-6)
acl:relcl(reefs-5, take-7)
dobj(take-7, thousands-8)
case(years-10, of-9)
nmod:of(thousands-8, years-10)
mark(build-12, to-11)
advcl(take-7, build-12)
punct(destroy-3, ,-13)
advcl(destroy-3, affecting-14)
det:predet(fish-17, all-15)
det(fish-17, the-16)
dobj(affecting-14, fish-17)
nsubj(use-19, fish-17)
ref(fish-17, that-18)
acl:relcl(fish-17, use-19)
dobj(use-19, it-20)
case(food-22, for-21)
nmod:for(use-19, food-22)
cc(food-22, and-23)
nmod:for(use-19, shelter-24)
conj:and(food-22, shelter-24)
punct(destroy-3, ,-25)
advmod(piece-29, just-26)
case(piece-29, for-27)
det(piece-29, a-28)
nmod:for(destroy-3, piece-29)
case(decoration-31, of-30)
nmod:of(piece-29, decoration-31)
punct(says-34, ,-32)
punct(says-34, ''-33)
root(ROOT-0, says-34)
compound(McCloud-36, Mr.-35)
nsubj(says-34, McCloud-36)
punct(says-34, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#reefs

destroy :: The chief substitutes will likely be variations on this chemical structure but with less chlorine , the element thought to destroy atmospheric ozone ./.
det(substitutes-3, The-1)
amod(substitutes-3, chief-2)
nsubj(variations-7, substitutes-3)
aux(variations-7, will-4)
advmod(variations-7, likely-5)
cop(variations-7, be-6)
root(ROOT-0, variations-7)
case(structure-11, on-8)
det(structure-11, this-9)
compound(structure-11, chemical-10)
nmod:on(variations-7, structure-11)
cc(variations-7, but-12)
case(chlorine-15, with-13)
amod(chlorine-15, less-14)
conj:but(variations-7, chlorine-15)
punct(chlorine-15, ,-16)
det(element-18, the-17)
nsubj(thought-19, element-18)
nsubj:xsubj(destroy-21, element-18)
acl:relcl(chlorine-15, thought-19)
mark(destroy-21, to-20)
xcomp(thought-19, destroy-21)
amod(ozone-23, atmospheric-22)
dobj(destroy-21, ozone-23)
punct(variations-7, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#ozone

destroy :: Israeli warplanes destroyed a PLO base in a Druse-held hilltop above Beirut in Israel 's deepest air raid into Lebanon this year ./.
amod(warplanes-2, Israeli-1)
nsubj(destroyed-3, warplanes-2)
root(ROOT-0, destroyed-3)
det(base-6, a-4)
compound(base-6, PLO-5)
dobj(destroyed-3, base-6)
case(hilltop-10, in-7)
det(hilltop-10, a-8)
amod(hilltop-10, Druse-held-9)
nmod:in(base-6, hilltop-10)
case(Beirut-12, above-11)
nmod:above(hilltop-10, Beirut-12)
case(raid-18, in-13)
nmod:poss(raid-18, Israel-14)
case(Israel-14, 's-15)
amod(raid-18, deepest-16)
compound(raid-18, air-17)
nmod:in(base-6, raid-18)
case(Lebanon-20, into-19)
nmod:into(raid-18, Lebanon-20)
det(year-22, this-21)
nmod:tmod(destroyed-3, year-22)
punct(destroyed-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#base

destroy :: Equally important , his Socialist government absorbed and then , in effect , destroyed the French Communist Party ./.
advmod(important-2, Equally-1)
dep(absorbed-7, important-2)
punct(absorbed-7, ,-3)
nmod:poss(government-6, his-4)
amod(government-6, Socialist-5)
nsubj(absorbed-7, government-6)
root(ROOT-0, absorbed-7)
cc(absorbed-7, and-8)
advmod(absorbed-7, then-9)
punct(absorbed-7, ,-10)
case(effect-12, in-11)
nmod:in(absorbed-7, effect-12)
punct(absorbed-7, ,-13)
dep(absorbed-7, destroyed-14)
det(Party-18, the-15)
compound(Party-18, French-16)
compound(Party-18, Communist-17)
dobj(destroyed-14, Party-18)
punct(absorbed-7, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#party

destroy :: The doctor who removed the IUD destroyed Ms. Murdock-Vaughn 's files in 1979 as part of a routine office cleaning ./.
det(doctor-2, The-1)
nsubj(removed-4, doctor-2)
nsubj(destroyed-7, doctor-2)
ref(doctor-2, who-3)
acl:relcl(doctor-2, removed-4)
det(IUD-6, the-5)
dobj(removed-4, IUD-6)
root(ROOT-0, destroyed-7)
compound(Murdock-Vaughn-9, Ms.-8)
nmod:poss(files-11, Murdock-Vaughn-9)
case(Murdock-Vaughn-9, 's-10)
dobj(destroyed-7, files-11)
case(1979-13, in-12)
nmod:in(destroyed-7, 1979-13)
case(part-15, as-14)
nmod:as(destroyed-7, part-15)
case(cleaning-20, of-16)
det(cleaning-20, a-17)
amod(cleaning-20, routine-18)
compound(cleaning-20, office-19)
nmod:of(part-15, cleaning-20)
punct(destroyed-7, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#files

destroy :: He testified that he was ordered by the Robins former general counsel in 1975 to destroy sensitive documents about the Dalkon Shield ./.
nsubj(testified-2, He-1)
root(ROOT-0, testified-2)
mark(ordered-6, that-3)
nsubjpass(ordered-6, he-4)
nsubj:xsubj(destroy-16, he-4)
auxpass(ordered-6, was-5)
ccomp(testified-2, ordered-6)
case(counsel-12, by-7)
det(counsel-12, the-8)
compound(counsel-12, Robins-9)
amod(counsel-12, former-10)
amod(counsel-12, general-11)
nmod:agent(ordered-6, counsel-12)
case(1975-14, in-13)
nmod:in(ordered-6, 1975-14)
mark(destroy-16, to-15)
xcomp(ordered-6, destroy-16)
amod(documents-18, sensitive-17)
dobj(destroy-16, documents-18)
case(Shield-22, about-19)
det(Shield-22, the-20)
compound(Shield-22, Dalkon-21)
nmod:about(documents-18, Shield-22)
punct(testified-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#documents

destroy :: Philippine troops launched a massive `` search and destroy '' operation in the Bicol region of Luzon following a Saturday attack by communist rebels in which 13 anti-guerrilla troops were killed ./.
compound(troops-2, Philippine-1)
nsubj(launched-3, troops-2)
root(ROOT-0, launched-3)
det(search-7, a-4)
amod(search-7, massive-5)
punct(search-7, ``-6)
dobj(launched-3, search-7)
cc(launched-3, and-8)
dep(operation-11, destroy-9)
punct(operation-11, ''-10)
conj:and(launched-3, operation-11)
case(region-15, in-12)
det(region-15, the-13)
compound(region-15, Bicol-14)
nmod:in(operation-11, region-15)
case(Luzon-17, of-16)
nmod:of(region-15, Luzon-17)
case(attack-21, following-18)
det(attack-21, a-19)
compound(attack-21, Saturday-20)
nmod:following(operation-11, attack-21)
nmod:in(killed-31, attack-21)
case(rebels-24, by-22)
amod(rebels-24, communist-23)
nmod:by(attack-21, rebels-24)
case(which-26, in-25)
ref(attack-21, which-26)
nummod(troops-29, 13-27)
amod(troops-29, anti-guerrilla-28)
nsubjpass(killed-31, troops-29)
auxpass(killed-31, were-30)
acl:relcl(attack-21, killed-31)
punct(launched-3, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

destroy :: Eric Johnson , the researcher , found that it also destroys certain kinds of botulism ./.
compound(Johnson-2, Eric-1)
nsubj(found-7, Johnson-2)
punct(Johnson-2, ,-3)
det(researcher-5, the-4)
appos(Johnson-2, researcher-5)
punct(Johnson-2, ,-6)
root(ROOT-0, found-7)
mark(destroys-11, that-8)
nsubj(destroys-11, it-9)
advmod(destroys-11, also-10)
ccomp(found-7, destroys-11)
amod(kinds-13, certain-12)
dobj(destroys-11, kinds-13)
case(botulism-15, of-14)
nmod:of(kinds-13, botulism-15)
punct(found-7, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#botulism

destroy :: Whether that should be welcome news or cause for alarm depends on one 's confidence in the ability of Congress to write rules for markets without destroying them ./.
mark(news-6, Whether-1)
nsubj(news-6, that-2)
nsubj(cause-8, that-2)
aux(news-6, should-3)
cop(news-6, be-4)
amod(news-6, welcome-5)
csubj(depends-11, news-6)
cc(news-6, or-7)
conj:or(news-6, cause-8)
csubj(depends-11, cause-8)
case(alarm-10, for-9)
nmod:for(news-6, alarm-10)
root(ROOT-0, depends-11)
case(confidence-15, on-12)
nmod:poss(confidence-15, one-13)
case(one-13, 's-14)
nmod:on(depends-11, confidence-15)
case(ability-18, in-16)
det(ability-18, the-17)
nmod:in(confidence-15, ability-18)
case(Congress-20, of-19)
nmod:of(ability-18, Congress-20)
mark(write-22, to-21)
acl(ability-18, write-22)
dobj(write-22, rules-23)
case(markets-25, for-24)
nmod:for(rules-23, markets-25)
mark(destroying-27, without-26)
advcl(write-22, destroying-27)
dobj(destroying-27, them-28)
punct(depends-11, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#them

destroy :: The press release for an upcoming miniseries describes Nina , its heroine , as `` a manipulative woman determined to love and , if need be , destroy the men in her life . ''/''
det(release-3, The-1)
compound(release-3, press-2)
nsubj(describes-8, release-3)
case(miniseries-7, for-4)
det(miniseries-7, an-5)
amod(miniseries-7, upcoming-6)
nmod:for(release-3, miniseries-7)
root(ROOT-0, describes-8)
dobj(describes-8, Nina-9)
punct(Nina-9, ,-10)
nmod:poss(heroine-12, its-11)
appos(Nina-9, heroine-12)
punct(Nina-9, ,-13)
case(woman-18, as-14)
punct(woman-18, ``-15)
det(woman-18, a-16)
amod(woman-18, manipulative-17)
nmod:as(describes-8, woman-18)
acl(woman-18, determined-19)
mark(love-21, to-20)
xcomp(determined-19, love-21)
cc(love-21, and-22)
punct(love-21, ,-23)
mark(be-26, if-24)
nsubj(be-26, need-25)
advcl(destroy-28, be-26)
punct(destroy-28, ,-27)
xcomp(determined-19, destroy-28)
conj:and(love-21, destroy-28)
det(men-30, the-29)
dobj(destroy-28, men-30)
case(life-33, in-31)
nmod:poss(life-33, her-32)
nmod:in(destroy-28, life-33)
punct(describes-8, .-34)
punct(describes-8, ''-35)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: destroy#men

destroy :: `` Well over 200 synagogues were burned down or demolished , Jewish cemeteries were laid in ruins , thousands of businesses and homes were destroyed and plundered ./.
punct(laid-15, ``-1)
advmod(200-4, Well-2)
advmod(200-4, over-3)
nummod(synagogues-5, 200-4)
nsubjpass(burned-7, synagogues-5)
nsubjpass(demolished-10, synagogues-5)
auxpass(burned-7, were-6)
ccomp(laid-15, burned-7)
compound:prt(burned-7, down-8)
cc(burned-7, or-9)
conj:or(burned-7, demolished-10)
ccomp(laid-15, demolished-10)
punct(laid-15, ,-11)
amod(cemeteries-13, Jewish-12)
nsubjpass(laid-15, cemeteries-13)
auxpass(laid-15, were-14)
root(ROOT-0, laid-15)
case(ruins-17, in-16)
nmod:in(laid-15, ruins-17)
punct(ruins-17, ,-18)
nsubjpass(destroyed-25, thousands-19)
nsubjpass(plundered-27, thousands-19)
case(businesses-21, of-20)
nmod:of(thousands-19, businesses-21)
cc(businesses-21, and-22)
nmod:of(thousands-19, homes-23)
conj:and(businesses-21, homes-23)
auxpass(destroyed-25, were-24)
acl:relcl(ruins-17, destroyed-25)
cc(destroyed-25, and-26)
acl:relcl(ruins-17, plundered-27)
conj:and(destroyed-25, plundered-27)
punct(laid-15, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#thousands

destroy :: `` We are offering now to free them from their nightmares of security -- we do n't want to destroy Israel , we want to coexist ./.
punct(want-24, ``-1)
nsubj(offering-4, We-2)
nsubj:xsubj(free-7, We-2)
aux(offering-4, are-3)
ccomp(want-24, offering-4)
advmod(offering-4, now-5)
mark(free-7, to-6)
xcomp(offering-4, free-7)
dobj(free-7, them-8)
case(nightmares-11, from-9)
nmod:poss(nightmares-11, their-10)
nmod:from(free-7, nightmares-11)
case(security-13, of-12)
nmod:of(nightmares-11, security-13)
punct(offering-4, ---14)
nsubj(want-18, we-15)
nsubj:xsubj(destroy-20, we-15)
aux(want-18, do-16)
neg(want-18, n't-17)
parataxis(offering-4, want-18)
mark(destroy-20, to-19)
xcomp(want-18, destroy-20)
dobj(destroy-20, Israel-21)
punct(want-24, ,-22)
nsubj(want-24, we-23)
nsubj:xsubj(coexist-26, we-23)
root(ROOT-0, want-24)
mark(coexist-26, to-25)
xcomp(want-24, coexist-26)
punct(want-24, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#israel

destroy :: Conjoining them is like pounding square pegs into round holes , destroying the superconductors ' ability to conduct large electrical current without resistance -- their hallmark and the source of commercial excitement about them ./.
csubj(pounding-5, Conjoining-1)
dobj(Conjoining-1, them-2)
cop(pounding-5, is-3)
mark(pounding-5, like-4)
root(ROOT-0, pounding-5)
amod(pegs-7, square-6)
dobj(pounding-5, pegs-7)
case(holes-10, into-8)
amod(holes-10, round-9)
nmod:into(pegs-7, holes-10)
punct(pounding-5, ,-11)
advcl(pounding-5, destroying-12)
det(superconductors-14, the-13)
nmod:poss(ability-16, superconductors-14)
case(superconductors-14, '-15)
dobj(destroying-12, ability-16)
mark(conduct-18, to-17)
acl(ability-16, conduct-18)
amod(current-21, large-19)
amod(current-21, electrical-20)
dobj(conduct-18, current-21)
case(resistance-23, without-22)
nmod:without(conduct-18, resistance-23)
punct(pounding-5, ---24)
nmod:poss(hallmark-26, their-25)
dep(pounding-5, hallmark-26)
cc(hallmark-26, and-27)
det(source-29, the-28)
dep(pounding-5, source-29)
conj:and(hallmark-26, source-29)
case(excitement-32, of-30)
amod(excitement-32, commercial-31)
nmod:of(source-29, excitement-32)
case(them-34, about-33)
nmod:about(excitement-32, them-34)
punct(pounding-5, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#ability

destroy :: The indictment also charges that Mr. Frankel , 32 , and Mr. Yagoda , 44 , committed perjury and obstruction of justice when they testified before the SEC in 1986 , and that Mr. Frankel further attempted to obstruct the SEC 's investigation when he directed a co-conspirator at Drexel to destroy certain documents ./.
det(indictment-2, The-1)
nsubj(charges-4, indictment-2)
advmod(charges-4, also-3)
root(ROOT-0, charges-4)
mark(committed-17, that-5)
compound(Frankel-7, Mr.-6)
nsubj(committed-17, Frankel-7)
punct(Frankel-7, ,-8)
amod(Frankel-7, 32-9)
punct(Frankel-7, ,-10)
cc(Frankel-7, and-11)
compound(Yagoda-13, Mr.-12)
conj:and(Frankel-7, Yagoda-13)
nsubj(committed-17, Yagoda-13)
punct(Yagoda-13, ,-14)
amod(Yagoda-13, 44-15)
punct(Yagoda-13, ,-16)
ccomp(charges-4, committed-17)
dobj(committed-17, perjury-18)
cc(perjury-18, and-19)
dobj(committed-17, obstruction-20)
conj:and(perjury-18, obstruction-20)
case(justice-22, of-21)
nmod:of(perjury-18, justice-22)
advmod(testified-25, when-23)
nsubj(testified-25, they-24)
advcl(committed-17, testified-25)
case(SEC-28, before-26)
det(SEC-28, the-27)
nmod:before(testified-25, SEC-28)
case(1986-30, in-29)
nmod:in(testified-25, 1986-30)
punct(committed-17, ,-31)
cc(committed-17, and-32)
mark(attempted-37, that-33)
compound(Frankel-35, Mr.-34)
nsubj(attempted-37, Frankel-35)
nsubj:xsubj(obstruct-39, Frankel-35)
advmod(attempted-37, further-36)
ccomp(charges-4, attempted-37)
conj:and(committed-17, attempted-37)
mark(obstruct-39, to-38)
xcomp(attempted-37, obstruct-39)
det(SEC-41, the-40)
nmod:poss(investigation-43, SEC-41)
case(SEC-41, 's-42)
dobj(obstruct-39, investigation-43)
advmod(directed-46, when-44)
nsubj(directed-46, he-45)
advcl(attempted-37, directed-46)
det(co-conspirator-48, a-47)
dobj(directed-46, co-conspirator-48)
case(Drexel-50, at-49)
nmod:at(co-conspirator-48, Drexel-50)
mark(destroy-52, to-51)
advcl(directed-46, destroy-52)
amod(documents-54, certain-53)
dobj(destroy-52, documents-54)
punct(charges-4, .-55)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#documents

destroy :: Some 64 % of normally unconcerned Britons recently described their environment as `` destroyed to a considerable extent '' when polled by the Gallup Organization ./.
advmod(64-2, Some-1)
nummod(%-3, 64-2)
nsubj(described-9, %-3)
case(Britons-7, of-4)
advmod(unconcerned-6, normally-5)
amod(Britons-7, unconcerned-6)
nmod:of(%-3, Britons-7)
advmod(described-9, recently-8)
root(ROOT-0, described-9)
nmod:poss(environment-11, their-10)
dobj(described-9, environment-11)
mark(destroyed-14, as-12)
punct(destroyed-14, ``-13)
advcl(described-9, destroyed-14)
case(extent-18, to-15)
det(extent-18, a-16)
amod(extent-18, considerable-17)
nmod:to(destroyed-14, extent-18)
punct(extent-18, ''-19)
advmod(polled-21, when-20)
acl:relcl(extent-18, polled-21)
case(Organization-25, by-22)
det(Organization-25, the-23)
compound(Organization-25, Gallup-24)
nmod:by(polled-21, Organization-25)
punct(described-9, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#extent

destroy :: Old clothes are often destroyed and new ones donned ; indoctrination is given in social mores and religious beliefs ./.
amod(clothes-2, Old-1)
nsubjpass(destroyed-5, clothes-2)
auxpass(destroyed-5, are-3)
advmod(destroyed-5, often-4)
root(ROOT-0, destroyed-5)
cc(destroyed-5, and-6)
amod(ones-8, new-7)
nsubj(donned-9, ones-8)
conj:and(destroyed-5, donned-9)
punct(destroyed-5, ;-10)
nsubjpass(given-13, indoctrination-11)
auxpass(given-13, is-12)
parataxis(destroyed-5, given-13)
case(mores-16, in-14)
amod(mores-16, social-15)
nmod:in(given-13, mores-16)
cc(mores-16, and-17)
amod(beliefs-19, religious-18)
nmod:in(given-13, beliefs-19)
conj:and(mores-16, beliefs-19)
punct(destroyed-5, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#clothes

destroy :: Bishop de Landa , recalled to Spain in 1568 , went down in history as a book-burner for destroying the Maya codices , an act that seems more understandable as we learn more about their civilization ./.
compound(Landa-3, Bishop-1)
compound(Landa-3, de-2)
nsubj(recalled-5, Landa-3)
punct(Landa-3, ,-4)
root(ROOT-0, recalled-5)
case(Spain-7, to-6)
nmod:to(recalled-5, Spain-7)
case(1568-9, in-8)
nmod:in(recalled-5, 1568-9)
punct(recalled-5, ,-10)
dep(recalled-5, went-11)
advmod(went-11, down-12)
case(history-14, in-13)
nmod:in(down-12, history-14)
case(book-burner-17, as-15)
det(book-burner-17, a-16)
nmod:as(went-11, book-burner-17)
mark(destroying-19, for-18)
acl(book-burner-17, destroying-19)
det(codices-22, the-20)
amod(codices-22, Maya-21)
dobj(destroying-19, codices-22)
punct(recalled-5, ,-23)
det(act-25, an-24)
dobj(recalled-5, act-25)
nsubj(seems-27, act-25)
ref(act-25, that-26)
acl:relcl(act-25, seems-27)
advmod(understandable-29, more-28)
xcomp(seems-27, understandable-29)
mark(learn-32, as-30)
nsubj(learn-32, we-31)
advcl(seems-27, learn-32)
dobj(learn-32, more-33)
case(civilization-36, about-34)
nmod:poss(civilization-36, their-35)
nmod:about(more-33, civilization-36)
punct(recalled-5, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#codices

destroy :: While the Meadowlands ' share of betting alone pays the interest on the bonds for the entire sports and entertainment complex , three more recent tracks -- Garden State Park in Cherry Hill , N.J . , resurrected after being destroyed in a fire ; Canterbury Downs in Shakopee , Minn . , and Birmingham -- have had losses totaling nearly $ 80 million in just three years after combined investments of $ 320 million ./.
mark(pays-9, While-1)
det(Meadowlands-3, the-2)
nmod:poss(share-5, Meadowlands-3)
case(Meadowlands-3, '-4)
nsubj(pays-9, share-5)
mark(betting-7, of-6)
acl(share-5, betting-7)
advmod(betting-7, alone-8)
root(ROOT-0, pays-9)
det(interest-11, the-10)
dobj(pays-9, interest-11)
case(bonds-14, on-12)
det(bonds-14, the-13)
nmod:on(interest-11, bonds-14)
case(sports-18, for-15)
det(sports-18, the-16)
amod(sports-18, entire-17)
nmod:for(bonds-14, sports-18)
cc(sports-18, and-19)
compound(complex-21, entertainment-20)
nmod:for(bonds-14, complex-21)
conj:and(sports-18, complex-21)
punct(pays-9, ,-22)
nummod(tracks-26, three-23)
advmod(recent-25, more-24)
amod(tracks-26, recent-25)
root(,-22, tracks-26)
punct(tracks-26, ---27)
compound(Park-30, Garden-28)
compound(Park-30, State-29)
dep(tracks-26, Park-30)
case(Hill-33, in-31)
compound(Hill-33, Cherry-32)
nmod:in(Park-30, Hill-33)
punct(Hill-33, ,-34)
appos(Hill-33, N.J-35)
punct(tracks-26, .-36)
punct(Downs-11, ,-1)
dep(Downs-11, resurrected-2)
mark(destroyed-5, after-3)
auxpass(destroyed-5, being-4)
advcl(resurrected-2, destroyed-5)
case(fire-8, in-6)
det(fire-8, a-7)
nmod:in(destroyed-5, fire-8)
punct(Downs-11, ;-9)
compound(Downs-11, Canterbury-10)
root(ROOT-0, Downs-11)
case(Shakopee-13, in-12)
nmod:in(Downs-11, Shakopee-13)
punct(Shakopee-13, ,-14)
appos(Shakopee-13, Minn-15)
punct(Downs-11, .-16)
punct(Birmingham-3, ,-1)
cc(Birmingham-3, and-2)
parataxis(had-6, Birmingham-3)
punct(Birmingham-3, ---4)
aux(had-6, have-5)
root(ROOT-0, had-6)
dobj(had-6, losses-7)
acl(losses-7, totaling-8)
advmod($-10, nearly-9)
dobj(totaling-8, $-10)
compound(million-12, 80-11)
nummod($-10, million-12)
case(years-16, in-13)
advmod(three-15, just-14)
nummod(years-16, three-15)
nmod:in(had-6, years-16)
case(investments-19, after-17)
amod(investments-19, combined-18)
nmod:after(had-6, investments-19)
case($-21, of-20)
nmod:of(investments-19, $-21)
compound(million-23, 320-22)
nummod($-21, million-23)
punct(had-6, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#being

destroy :: Arsonists in Haiti destroyed a Roman Catholic chapel in a slum in Port-au-Prince ./.
nsubj(destroyed-4, Arsonists-1)
case(Haiti-3, in-2)
nmod:in(Arsonists-1, Haiti-3)
root(ROOT-0, destroyed-4)
det(chapel-8, a-5)
amod(chapel-8, Roman-6)
amod(chapel-8, Catholic-7)
dobj(destroyed-4, chapel-8)
case(slum-11, in-9)
det(slum-11, a-10)
nmod:in(destroyed-4, slum-11)
case(Port-au-Prince-13, in-12)
nmod:in(slum-11, Port-au-Prince-13)
punct(destroyed-4, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#chapel

destroy :: He did n't set a deadline for destroying PCBs , but said movable disposal units might be leased from the U.S. to help eliminate those stored in warehouses across the country ./.
nsubj(set-4, He-1)
nsubj(said-12, He-1)
aux(set-4, did-2)
neg(set-4, n't-3)
root(ROOT-0, set-4)
det(deadline-6, a-5)
dobj(set-4, deadline-6)
mark(destroying-8, for-7)
acl(deadline-6, destroying-8)
dobj(destroying-8, PCBs-9)
punct(set-4, ,-10)
cc(set-4, but-11)
conj:but(set-4, said-12)
amod(units-15, movable-13)
compound(units-15, disposal-14)
nsubjpass(leased-18, units-15)
nsubj:xsubj(help-23, units-15)
aux(leased-18, might-16)
auxpass(leased-18, be-17)
ccomp(said-12, leased-18)
case(U.S.-21, from-19)
det(U.S.-21, the-20)
nmod:from(leased-18, U.S.-21)
mark(help-23, to-22)
xcomp(leased-18, help-23)
ccomp(help-23, eliminate-24)
dobj(eliminate-24, those-25)
acl(those-25, stored-26)
case(warehouses-28, in-27)
nmod:in(stored-26, warehouses-28)
case(country-31, across-29)
det(country-31, the-30)
nmod:across(warehouses-28, country-31)
punct(set-4, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#pcbs

destroy :: `` Moscow has been 80 % destroyed because Communists do n't like Russia . ''/''
root(ROOT-0, ``-1)
nsubj(%-6, Moscow-2)
aux(%-6, has-3)
cop(%-6, been-4)
nummod(%-6, 80-5)
root(``-1, %-6)
acl(%-6, destroyed-7)
mark(like-12, because-8)
nsubj(like-12, Communists-9)
aux(like-12, do-10)
neg(like-12, n't-11)
advcl(destroyed-7, like-12)
dobj(like-12, Russia-13)
punct(%-6, .-14)
punct(%-6, ''-15)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

destroy :: The advertisements featured a letter from the company 's Universal Pictures unit responding to an offer from Bill Bright , president of the San Bernardino , Calif.-based Campus Crusade for Christ , to pay $ 10 million in exchange for all copies of the film , `` which would promptly be destroyed . ''/''
det(advertisements-2, The-1)
nsubj(featured-3, advertisements-2)
root(ROOT-0, featured-3)
det(letter-5, a-4)
dobj(featured-3, letter-5)
case(unit-12, from-6)
det(company-8, the-7)
nmod:poss(unit-12, company-8)
case(company-8, 's-9)
amod(unit-12, Universal-10)
compound(unit-12, Pictures-11)
nmod:from(letter-5, unit-12)
acl(letter-5, responding-13)
case(offer-16, to-14)
det(offer-16, an-15)
nmod:to(responding-13, offer-16)
case(Bright-19, from-17)
compound(Bright-19, Bill-18)
nmod:from(offer-16, Bright-19)
punct(Bright-19, ,-20)
appos(Bright-19, president-21)
case(Crusade-29, of-22)
det(Crusade-29, the-23)
amod(Calif.-based-27, San-24)
amod(Calif.-based-27, Bernardino-25)
punct(Calif.-based-27, ,-26)
amod(Crusade-29, Calif.-based-27)
compound(Crusade-29, Campus-28)
nmod:of(president-21, Crusade-29)
case(Christ-31, for-30)
nmod:for(Crusade-29, Christ-31)
punct(Bright-19, ,-32)
mark(pay-34, to-33)
acl(offer-16, pay-34)
dobj(pay-34, $-35)
compound(million-37, 10-36)
nummod($-35, million-37)
case(exchange-39, in-38)
nmod:in($-35, exchange-39)
case(copies-42, for-40)
det(copies-42, all-41)
nmod:for(pay-34, copies-42)
case(film-45, of-43)
det(film-45, the-44)
nmod:of(copies-42, film-45)
nsubjpass(destroyed-52, film-45)
punct(film-45, ,-46)
punct(film-45, ``-47)
ref(film-45, which-48)
aux(destroyed-52, would-49)
advmod(destroyed-52, promptly-50)
auxpass(destroyed-52, be-51)
acl:relcl(film-45, destroyed-52)
punct(featured-3, .-53)
punct(featured-3, ''-54)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: destroy#film

destroy :: When buried in landfills , the oxidizing agents react with metal salts in the soil , and the links between the polymers are destroyed ./.
advmod(buried-2, When-1)
advcl(react-9, buried-2)
case(landfills-4, in-3)
nmod:in(buried-2, landfills-4)
punct(react-9, ,-5)
det(agents-8, the-6)
amod(agents-8, oxidizing-7)
nsubj(react-9, agents-8)
root(ROOT-0, react-9)
case(salts-12, with-10)
compound(salts-12, metal-11)
nmod:with(react-9, salts-12)
case(soil-15, in-13)
det(soil-15, the-14)
nmod:in(react-9, soil-15)
punct(react-9, ,-16)
cc(react-9, and-17)
det(links-19, the-18)
nsubjpass(destroyed-24, links-19)
case(polymers-22, between-20)
det(polymers-22, the-21)
nmod:between(links-19, polymers-22)
auxpass(destroyed-24, are-23)
conj:and(react-9, destroyed-24)
punct(react-9, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#links

destroy :: And instead of reacting to this aggression by destroying Iranian naval assets , defense leaders responded by saturating the Gulf with American military forces that were not supposed to engage their aggressor , but instead were supposed to intimidate him by their mere presence ./.
cc(responded-16, And-1)
mark(reacting-4, instead-2)
mwe(instead-2, of-3)
advcl(responded-16, reacting-4)
case(aggression-7, to-5)
det(aggression-7, this-6)
nmod:to(reacting-4, aggression-7)
mark(destroying-9, by-8)
advcl(reacting-4, destroying-9)
amod(assets-12, Iranian-10)
amod(assets-12, naval-11)
dobj(destroying-9, assets-12)
punct(responded-16, ,-13)
compound(leaders-15, defense-14)
nsubj(responded-16, leaders-15)
nsubjpass(supposed-37, leaders-15)
nsubj:xsubj(intimidate-39, leaders-15)
root(ROOT-0, responded-16)
case(Gulf-20, by-17)
amod(Gulf-20, saturating-18)
det(Gulf-20, the-19)
nmod:by(responded-16, Gulf-20)
case(forces-24, with-21)
amod(forces-24, American-22)
amod(forces-24, military-23)
nmod:with(Gulf-20, forces-24)
nsubjpass(supposed-28, forces-24)
nsubj:xsubj(engage-30, forces-24)
ref(forces-24, that-25)
auxpass(supposed-28, were-26)
neg(supposed-28, not-27)
acl:relcl(forces-24, supposed-28)
mark(engage-30, to-29)
xcomp(supposed-28, engage-30)
nmod:poss(aggressor-32, their-31)
dobj(engage-30, aggressor-32)
punct(responded-16, ,-33)
cc(responded-16, but-34)
advmod(supposed-37, instead-35)
auxpass(supposed-37, were-36)
conj:but(responded-16, supposed-37)
mark(intimidate-39, to-38)
xcomp(supposed-37, intimidate-39)
dobj(intimidate-39, him-40)
case(presence-44, by-41)
nmod:poss(presence-44, their-42)
amod(presence-44, mere-43)
nmod:by(intimidate-39, presence-44)
punct(responded-16, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#assets

destroy :: Director John McTiernan -LRB- `` Predator '' -RRB- has efficiently slapped together the ingredients for a big , ear-shattering action film: slick , heavily armed villains ; a wife in peril ; stupid TV journalists who only make things worse ; a renegade cop who singlehandedly destroys the bad guys against impossible odds ./.
compound(McTiernan-3, Director-1)
compound(McTiernan-3, John-2)
nsubj(slapped-11, McTiernan-3)
punct(Predator-6, -LRB--4)
punct(Predator-6, ``-5)
dep(McTiernan-3, Predator-6)
punct(Predator-6, ''-7)
punct(Predator-6, -RRB--8)
aux(slapped-11, has-9)
advmod(slapped-11, efficiently-10)
root(ROOT-0, slapped-11)
advmod(slapped-11, together-12)
det(ingredients-14, the-13)
dobj(slapped-11, ingredients-14)
case(film-21, for-15)
det(film-21, a-16)
amod(film-21, big-17)
punct(film-21, ,-18)
amod(film-21, ear-shattering-19)
compound(film-21, action-20)
nmod:for(ingredients-14, film-21)
punct(slapped-11, :-22)
amod(villains-27, slick-23)
punct(villains-27, ,-24)
advmod(armed-26, heavily-25)
amod(villains-27, armed-26)
parataxis(slapped-11, villains-27)
punct(villains-27, ;-28)
det(wife-30, a-29)
dep(villains-27, wife-30)
case(peril-32, in-31)
nmod:in(wife-30, peril-32)
punct(villains-27, ;-33)
amod(journalists-36, stupid-34)
compound(journalists-36, TV-35)
dep(villains-27, journalists-36)
nsubj(make-39, journalists-36)
ref(journalists-36, who-37)
advmod(make-39, only-38)
acl:relcl(journalists-36, make-39)
nsubj(worse-41, things-40)
xcomp(make-39, worse-41)
punct(villains-27, ;-42)
det(cop-45, a-43)
amod(cop-45, renegade-44)
dep(villains-27, cop-45)
nsubj(destroys-48, cop-45)
ref(cop-45, who-46)
advmod(destroys-48, singlehandedly-47)
acl:relcl(cop-45, destroys-48)
det(guys-51, the-49)
amod(guys-51, bad-50)
dobj(destroys-48, guys-51)
case(odds-54, against-52)
amod(odds-54, impossible-53)
nmod:against(destroys-48, odds-54)
punct(slapped-11, .-55)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#guys

destroy :: It actually demonstrated its ability to destroy target drones in flight ./.
nsubj(demonstrated-3, It-1)
advmod(demonstrated-3, actually-2)
root(ROOT-0, demonstrated-3)
nmod:poss(ability-5, its-4)
dobj(demonstrated-3, ability-5)
mark(destroy-7, to-6)
acl(ability-5, destroy-7)
compound(drones-9, target-8)
dobj(destroy-7, drones-9)
case(flight-11, in-10)
nmod:in(destroy-7, flight-11)
punct(demonstrated-3, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#drones

destroy :: So only a direct hit on the concrete hangar or an extremely close miss can destroy the plane on the ground ./.
advmod(destroy-16, So-1)
advmod(hit-5, only-2)
det(hit-5, a-3)
amod(hit-5, direct-4)
nsubj(destroy-16, hit-5)
case(hangar-9, on-6)
det(hangar-9, the-7)
amod(hangar-9, concrete-8)
nmod:on(hit-5, hangar-9)
cc(hit-5, or-10)
det(miss-14, an-11)
advmod(close-13, extremely-12)
amod(miss-14, close-13)
conj:or(hit-5, miss-14)
nsubj(destroy-16, miss-14)
aux(destroy-16, can-15)
root(ROOT-0, destroy-16)
det(plane-18, the-17)
dobj(destroy-16, plane-18)
case(ground-21, on-19)
det(ground-21, the-20)
nmod:on(destroy-16, ground-21)
punct(destroy-16, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: destroy#plane

die :: In small type , the ad does state that just 5 , 800 of the 241 million Americans will die this year of skin cancer and that `` odds are it wo n't be your funeral . ''/''
case(type-3, In-1)
amod(type-3, small-2)
nmod:in(does-7, type-3)
punct(does-7, ,-4)
det(ad-6, the-5)
nsubj(does-7, ad-6)
root(ROOT-0, does-7)
dobj(does-7, state-8)
mark(die-20, that-9)
advmod(5-11, just-10)
nsubj(die-20, 5-11)
punct(5-11, ,-12)
appos(5-11, 800-13)
case(Americans-18, of-14)
det(Americans-18, the-15)
compound(million-17, 241-16)
nummod(Americans-18, million-17)
nmod:of(800-13, Americans-18)
aux(die-20, will-19)
ccomp(state-8, die-20)
det(year-22, this-21)
nmod:tmod(die-20, year-22)
case(cancer-25, of-23)
compound(cancer-25, skin-24)
nmod:of(die-20, cancer-25)
cc(die-20, and-26)
mark(funeral-36, that-27)
punct(funeral-36, ``-28)
nsubj(funeral-36, odds-29)
cop(funeral-36, are-30)
nsubj(funeral-36, it-31)
aux(funeral-36, wo-32)
neg(funeral-36, n't-33)
cop(funeral-36, be-34)
nmod:poss(funeral-36, your-35)
ccomp(state-8, funeral-36)
conj:and(die-20, funeral-36)
punct(does-7, .-37)
punct(does-7, ''-38)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: die#5

die :: Long term , he says Newnam will live or die on its efforts to stress quality ./.
amod(term-2, Long-1)
root(ROOT-0, term-2)
punct(says-5, ,-3)
nsubj(says-5, he-4)
acl:relcl(term-2, says-5)
nsubj(live-8, Newnam-6)
nsubj(die-10, Newnam-6)
aux(live-8, will-7)
ccomp(says-5, live-8)
cc(live-8, or-9)
ccomp(says-5, die-10)
conj:or(live-8, die-10)
case(efforts-13, on-11)
nmod:poss(efforts-13, its-12)
nmod:on(live-8, efforts-13)
case(quality-16, to-14)
compound(quality-16, stress-15)
nmod:to(efforts-13, quality-16)
punct(term-2, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#newnam

die :: Thus , while government officials concede apartheid must die , they ca n't bring themselves to kill it ./.
advmod(bring-14, Thus-1)
punct(bring-14, ,-2)
mark(concede-6, while-3)
compound(officials-5, government-4)
nsubj(concede-6, officials-5)
advcl(bring-14, concede-6)
nsubj(die-9, apartheid-7)
aux(die-9, must-8)
ccomp(concede-6, die-9)
punct(bring-14, ,-10)
nsubj(bring-14, they-11)
aux(bring-14, ca-12)
neg(bring-14, n't-13)
root(ROOT-0, bring-14)
dobj(bring-14, themselves-15)
nsubj:xsubj(kill-17, themselves-15)
mark(kill-17, to-16)
xcomp(bring-14, kill-17)
dobj(kill-17, it-18)
punct(bring-14, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#apartheid

die :: There were many who thought that the dream would die with the dreamer , but it continues on ./.
expl(were-2, There-1)
root(ROOT-0, were-2)
nsubj(were-2, many-3)
nsubj(thought-5, many-3)
ref(many-3, who-4)
acl:relcl(many-3, thought-5)
mark(die-10, that-6)
det(dream-8, the-7)
nsubj(die-10, dream-8)
aux(die-10, would-9)
ccomp(thought-5, die-10)
case(dreamer-13, with-11)
det(dreamer-13, the-12)
nmod:with(die-10, dreamer-13)
punct(were-2, ,-14)
cc(were-2, but-15)
nsubj(continues-17, it-16)
conj:but(were-2, continues-17)
compound:prt(continues-17, on-18)
punct(were-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#dream

die :: About 25 % of those children die of liver cancer or cirrhosis ./.
advmod(25-2, About-1)
nummod(%-3, 25-2)
nsubj(die-7, %-3)
case(children-6, of-4)
det(children-6, those-5)
nmod:of(%-3, children-6)
root(ROOT-0, die-7)
case(cancer-10, of-8)
compound(cancer-10, liver-9)
nmod:of(die-7, cancer-10)
cc(cancer-10, or-11)
nmod:of(die-7, cirrhosis-12)
conj:or(cancer-10, cirrhosis-12)
punct(die-7, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#%

die :: Immune-suppressed children often die of illnesses like chicken pox , meningitis , measles and pneumonia ./.
amod(children-2, Immune-suppressed-1)
nsubj(die-4, children-2)
advmod(die-4, often-3)
root(ROOT-0, die-4)
case(illnesses-6, of-5)
nmod:of(die-4, illnesses-6)
case(pox-9, like-7)
compound(pox-9, chicken-8)
nmod:like(illnesses-6, pox-9)
punct(pox-9, ,-10)
nmod:like(illnesses-6, meningitis-11)
conj:and(pox-9, meningitis-11)
punct(pox-9, ,-12)
nmod:like(illnesses-6, measles-13)
conj:and(pox-9, measles-13)
cc(pox-9, and-14)
nmod:like(illnesses-6, pneumonia-15)
conj:and(pox-9, pneumonia-15)
punct(die-4, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#children

die :: `` We can play democracy until we die of `` democratitis acuta '' and our post mortem will be very democratic , but very dead . ''/''
punct(democratic-21, ``-1)
nsubj(play-4, We-2)
aux(play-4, can-3)
csubj(democratic-21, play-4)
csubj(dead-25, play-4)
dobj(play-4, democracy-5)
mark(die-8, until-6)
nsubj(die-8, we-7)
advcl(play-4, die-8)
case(acuta-12, of-9)
punct(acuta-12, ``-10)
compound(acuta-12, democratitis-11)
nmod:of(die-8, acuta-12)
punct(acuta-12, ''-13)
cc(acuta-12, and-14)
nmod:poss(mortem-17, our-15)
compound(mortem-17, post-16)
nmod:of(die-8, mortem-17)
conj:and(acuta-12, mortem-17)
aux(democratic-21, will-18)
cop(democratic-21, be-19)
advmod(democratic-21, very-20)
root(ROOT-0, democratic-21)
punct(democratic-21, ,-22)
cc(democratic-21, but-23)
advmod(dead-25, very-24)
conj:but(democratic-21, dead-25)
punct(democratic-21, .-26)
punct(democratic-21, ''-27)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: die#we

die :: In order to focus federal resources on the SSC , its backers decided that Isabelle had to die ./.
mark(focus-4, In-1)
mwe(In-1, order-2)
mark(focus-4, to-3)
advcl(decided-13, focus-4)
amod(resources-6, federal-5)
dobj(focus-4, resources-6)
case(SSC-9, on-7)
det(SSC-9, the-8)
nmod:on(focus-4, SSC-9)
punct(decided-13, ,-10)
nmod:poss(backers-12, its-11)
nsubj(decided-13, backers-12)
root(ROOT-0, decided-13)
mark(had-16, that-14)
nsubj(had-16, Isabelle-15)
nsubj:xsubj(die-18, Isabelle-15)
ccomp(decided-13, had-16)
mark(die-18, to-17)
xcomp(had-16, die-18)
punct(decided-13, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#isabelle

die :: And millions of animals will die ./.
cc(die-6, And-1)
nsubj(die-6, millions-2)
case(animals-4, of-3)
nmod:of(millions-2, animals-4)
aux(die-6, will-5)
root(ROOT-0, die-6)
punct(die-6, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#millions

die :: Roberto Macedo , president of the Association of Sao Paulo Economists , said in a statement that , `` This pact was born distorted and will die distorted . ''/''
compound(Macedo-2, Roberto-1)
nsubj(said-13, Macedo-2)
punct(Macedo-2, ,-3)
appos(Macedo-2, president-4)
case(Association-7, of-5)
det(Association-7, the-6)
nmod:of(president-4, Association-7)
case(Economists-11, of-8)
compound(Economists-11, Sao-9)
compound(Economists-11, Paulo-10)
nmod:of(Association-7, Economists-11)
punct(Macedo-2, ,-12)
root(ROOT-0, said-13)
case(statement-16, in-14)
det(statement-16, a-15)
nmod:in(said-13, statement-16)
mark(born-23, that-17)
punct(born-23, ,-18)
punct(born-23, ``-19)
det(pact-21, This-20)
nsubjpass(born-23, pact-21)
nsubj(die-27, pact-21)
auxpass(born-23, was-22)
ccomp(said-13, born-23)
xcomp(born-23, distorted-24)
cc(born-23, and-25)
aux(die-27, will-26)
ccomp(said-13, die-27)
conj:and(born-23, die-27)
xcomp(die-27, distorted-28)
punct(said-13, .-29)
punct(said-13, ''-30)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: die#pact

die :: The first time I read an article by humorist P.J. O'Rourke -- `` Among the EuroWeenies '' in Rolling Stone magazine -- I thought I was going to die laughing ./.
det(time-3, The-1)
amod(time-3, first-2)
root(ROOT-0, time-3)
nsubj(read-5, I-4)
acl:relcl(time-3, read-5)
det(article-7, an-6)
dobj(read-5, article-7)
case(O'Rourke-11, by-8)
compound(O'Rourke-11, humorist-9)
compound(O'Rourke-11, P.J.-10)
nmod:by(article-7, O'Rourke-11)
punct(article-7, ---12)
punct(article-7, ``-13)
case(EuroWeenies-16, Among-14)
det(EuroWeenies-16, the-15)
nmod:among(article-7, EuroWeenies-16)
punct(article-7, ''-17)
case(magazine-21, in-18)
compound(magazine-21, Rolling-19)
compound(magazine-21, Stone-20)
nmod:in(article-7, magazine-21)
punct(thought-24, ---22)
nsubj(thought-24, I-23)
dep(time-3, thought-24)
nsubj(going-27, I-25)
nsubj:xsubj(die-29, I-25)
aux(going-27, was-26)
ccomp(thought-24, going-27)
mark(die-29, to-28)
xcomp(going-27, die-29)
dobj(die-29, laughing-30)
punct(time-3, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#laughing

die :: It recently earmarked $ 50 million to patch up the 70-year-old Mustang assembly plant ; both the plant and the car had been scheduled to die ./.
nsubj(earmarked-3, It-1)
advmod(earmarked-3, recently-2)
root(ROOT-0, earmarked-3)
dobj(earmarked-3, $-4)
compound(million-6, 50-5)
nummod($-4, million-6)
case(patch-8, to-7)
nmod:to(earmarked-3, patch-8)
case(plant-14, up-9)
det(plant-14, the-10)
amod(plant-14, 70-year-old-11)
compound(plant-14, Mustang-12)
compound(plant-14, assembly-13)
nmod:up(earmarked-3, plant-14)
punct(earmarked-3, ;-15)
cc:preconj(plant-18, both-16)
det(plant-18, the-17)
nsubjpass(scheduled-24, plant-18)
nsubj:xsubj(die-26, plant-18)
cc(plant-18, and-19)
det(car-21, the-20)
conj:and(plant-18, car-21)
nsubjpass(scheduled-24, car-21)
nsubj:xsubj(die-26, car-21)
aux(scheduled-24, had-22)
auxpass(scheduled-24, been-23)
parataxis(earmarked-3, scheduled-24)
mark(die-26, to-25)
xcomp(scheduled-24, die-26)
punct(earmarked-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#plant

die :: Recruit Cosmos is turning into the scandal that refuses to die -- but also refuses to spin out of control ./.
compound(Cosmos-2, Recruit-1)
nsubj(turning-4, Cosmos-2)
nsubj(refuses-15, Cosmos-2)
nsubj:xsubj(spin-17, Cosmos-2)
aux(turning-4, is-3)
root(ROOT-0, turning-4)
case(scandal-7, into-5)
det(scandal-7, the-6)
nmod:into(turning-4, scandal-7)
nsubj(refuses-9, scandal-7)
nsubj:xsubj(die-11, scandal-7)
ref(scandal-7, that-8)
acl:relcl(scandal-7, refuses-9)
mark(die-11, to-10)
xcomp(refuses-9, die-11)
punct(turning-4, ---12)
cc(turning-4, but-13)
advmod(refuses-15, also-14)
conj:and(turning-4, refuses-15)
mark(spin-17, to-16)
xcomp(refuses-15, spin-17)
case(control-20, out-18)
mwe(out-18, of-19)
nmod:out_of(spin-17, control-20)
punct(turning-4, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#scandal

die :: Neither man is currently a government official , but the idea of a reprise of Mr. Kissinger 's famed opening to China in the early 1970s is so tantalizing that the rumor refuses to die ./.
det(man-2, Neither-1)
nsubj(official-7, man-2)
cop(official-7, is-3)
advmod(official-7, currently-4)
det(official-7, a-5)
compound(official-7, government-6)
root(ROOT-0, official-7)
punct(official-7, ,-8)
cc(official-7, but-9)
det(idea-11, the-10)
nsubj(tantalizing-29, idea-11)
case(reprise-14, of-12)
det(reprise-14, a-13)
nmod:of(idea-11, reprise-14)
case(opening-20, of-15)
compound(Kissinger-17, Mr.-16)
nmod:poss(opening-20, Kissinger-17)
case(Kissinger-17, 's-18)
amod(opening-20, famed-19)
nmod:of(reprise-14, opening-20)
case(China-22, to-21)
nmod:to(opening-20, China-22)
case(1970s-26, in-23)
det(1970s-26, the-24)
amod(1970s-26, early-25)
nmod:in(idea-11, 1970s-26)
cop(tantalizing-29, is-27)
advmod(tantalizing-29, so-28)
conj:but(official-7, tantalizing-29)
mark(refuses-33, that-30)
det(rumor-32, the-31)
nsubj(refuses-33, rumor-32)
nsubj:xsubj(die-35, rumor-32)
ccomp(tantalizing-29, refuses-33)
mark(die-35, to-34)
xcomp(refuses-33, die-35)
punct(official-7, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#rumor

die :: Traditions die hard , and the Fed has n't shaken its habit of targeting the real economy -- under the notion that inflation , too much money chasing too few goods , is prevented by curtailing the production of goods ./.
nsubj(die-2, Traditions-1)
root(ROOT-0, die-2)
advmod(die-2, hard-3)
punct(die-2, ,-4)
cc(die-2, and-5)
det(Fed-7, the-6)
nsubj(shaken-10, Fed-7)
aux(shaken-10, has-8)
neg(shaken-10, n't-9)
conj:and(die-2, shaken-10)
nmod:poss(habit-12, its-11)
dobj(shaken-10, habit-12)
mark(targeting-14, of-13)
acl(habit-12, targeting-14)
det(economy-17, the-15)
amod(economy-17, real-16)
dobj(targeting-14, economy-17)
punct(shaken-10, ---18)
case(notion-21, under-19)
det(notion-21, the-20)
nmod:under(shaken-10, notion-21)
mark(prevented-34, that-22)
dep(prevented-34, inflation-23)
punct(prevented-34, ,-24)
advmod(much-26, too-25)
amod(money-27, much-26)
nsubjpass(prevented-34, money-27)
acl(money-27, chasing-28)
advmod(few-30, too-29)
amod(goods-31, few-30)
dobj(chasing-28, goods-31)
punct(prevented-34, ,-32)
auxpass(prevented-34, is-33)
ccomp(notion-21, prevented-34)
mark(curtailing-36, by-35)
advcl(prevented-34, curtailing-36)
det(production-38, the-37)
dobj(curtailing-36, production-38)
case(goods-40, of-39)
nmod:of(production-38, goods-40)
punct(die-2, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#traditions

die :: A SUMMING UP: Besides rescuing the brokers , the Hong Kong government has had to commit hundreds of millions more in recent years to bail out seven banks , including Hang Lung and Overseas Trust ; though it had no legal obligation to save them , letting them die might have precipitated full-scale panic ./.
root(ROOT-0, A-1)
dep(A-1, SUMMING-2)
advmod(SUMMING-2, UP-3)
punct(SUMMING-2, :-4)
mark(rescuing-6, Besides-5)
advcl(had-15, rescuing-6)
det(brokers-8, the-7)
dobj(rescuing-6, brokers-8)
punct(had-15, ,-9)
det(government-13, the-10)
compound(government-13, Hong-11)
compound(government-13, Kong-12)
nsubj(had-15, government-13)
nsubj:xsubj(commit-17, government-13)
aux(had-15, has-14)
parataxis(SUMMING-2, had-15)
mark(commit-17, to-16)
xcomp(had-15, commit-17)
dobj(commit-17, hundreds-18)
nsubj:xsubj(bail-26, hundreds-18)
case(millions-20, of-19)
nmod:of(hundreds-18, millions-20)
advmod(commit-17, more-21)
case(years-24, in-22)
amod(years-24, recent-23)
nmod:in(commit-17, years-24)
mark(bail-26, to-25)
xcomp(commit-17, bail-26)
compound:prt(bail-26, out-27)
nummod(banks-29, seven-28)
dobj(bail-26, banks-29)
punct(banks-29, ,-30)
case(Lung-33, including-31)
compound(Lung-33, Hang-32)
nmod:including(banks-29, Lung-33)
cc(Lung-33, and-34)
amod(Trust-36, Overseas-35)
nmod:including(banks-29, Trust-36)
conj:and(Lung-33, Trust-36)
punct(had-15, ;-37)
mark(had-40, though-38)
nsubj(had-40, it-39)
parataxis(had-15, had-40)
neg(obligation-43, no-41)
amod(obligation-43, legal-42)
dobj(had-40, obligation-43)
mark(save-45, to-44)
acl(obligation-43, save-45)
dobj(save-45, them-46)
punct(save-45, ,-47)
advcl(save-45, letting-48)
nsubj(die-50, them-49)
ccomp(letting-48, die-50)
aux(have-52, might-51)
dep(had-40, have-52)
amod(panic-55, precipitated-53)
amod(panic-55, full-scale-54)
dobj(have-52, panic-55)
punct(A-1, .-56)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#them

die :: `` We 're waiting for inspiration , one way or the other , '' one equity salesman said , adding that `` at the moment , there 's absolutely nothing to make the market die a death nor spur it on . ''/''
punct(said-18, ``-1)
nsubj(waiting-4, We-2)
aux(waiting-4, 're-3)
ccomp(said-18, waiting-4)
case(inspiration-6, for-5)
nmod:for(waiting-4, inspiration-6)
punct(waiting-4, ,-7)
nummod(way-9, one-8)
dep(waiting-4, way-9)
cc(way-9, or-10)
det(other-12, the-11)
dep(waiting-4, other-12)
conj:or(way-9, other-12)
punct(said-18, ,-13)
punct(said-18, ''-14)
nummod(salesman-17, one-15)
compound(salesman-17, equity-16)
nsubj(said-18, salesman-17)
root(ROOT-0, said-18)
punct(said-18, ,-19)
xcomp(said-18, adding-20)
mark('s-28, that-21)
punct('s-28, ``-22)
case(moment-25, at-23)
det(moment-25, the-24)
nmod:at('s-28, moment-25)
punct('s-28, ,-26)
expl('s-28, there-27)
ccomp(adding-20, 's-28)
advmod(nothing-30, absolutely-29)
nsubj('s-28, nothing-30)
mark(make-32, to-31)
acl(nothing-30, make-32)
det(market-34, the-33)
nsubj(die-35, market-34)
nsubj(spur-39, market-34)
xcomp(make-32, die-35)
det(death-37, a-36)
dobj(die-35, death-37)
cc(die-35, nor-38)
xcomp(make-32, spur-39)
conj:nor(die-35, spur-39)
dobj(spur-39, it-40)
compound:prt(spur-39, on-41)
punct(said-18, .-42)
punct(said-18, ''-43)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: die#death

die :: But Mr. Bergen , still thinking about Dan Quayle , wants most to say in 1992 about a President Bush: `` He did n't die . ''/''
cc(wants-11, But-1)
compound(Bergen-3, Mr.-2)
nsubj(wants-11, Bergen-3)
nsubj:xsubj(say-14, Bergen-3)
punct(wants-11, ,-4)
advmod(thinking-6, still-5)
advcl(wants-11, thinking-6)
case(Quayle-9, about-7)
compound(Quayle-9, Dan-8)
nmod:about(thinking-6, Quayle-9)
punct(wants-11, ,-10)
root(ROOT-0, wants-11)
advmod(wants-11, most-12)
mark(say-14, to-13)
xcomp(wants-11, say-14)
case(1992-16, in-15)
nmod:in(say-14, 1992-16)
case(Bush-20, about-17)
det(Bush-20, a-18)
compound(Bush-20, President-19)
nmod:about(say-14, Bush-20)
punct(wants-11, :-21)
punct(wants-11, ``-22)
nsubj(die-26, He-23)
aux(die-26, did-24)
neg(die-26, n't-25)
ccomp(wants-11, die-26)
punct(wants-11, .-27)
punct(wants-11, ''-28)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: die#he

die :: The last clatterings of a standing ovation die down ./.
det(clatterings-3, The-1)
amod(clatterings-3, last-2)
nsubj(die-8, clatterings-3)
case(ovation-7, of-4)
det(ovation-7, a-5)
amod(ovation-7, standing-6)
nmod:of(clatterings-3, ovation-7)
root(ROOT-0, die-8)
advmod(die-8, down-9)
punct(die-8, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#clatterings

die :: But fires that have charred about 675 , 000 acres in Alaska were left to die on their own ./.
cc(left-14, But-1)
nsubj(charred-5, fires-2)
nsubjpass(left-14, fires-2)
nsubj:xsubj(die-16, fires-2)
ref(fires-2, that-3)
aux(charred-5, have-4)
acl:relcl(fires-2, charred-5)
advmod(675-7, about-6)
dobj(charred-5, 675-7)
punct(675-7, ,-8)
nummod(acres-10, 000-9)
appos(675-7, acres-10)
case(Alaska-12, in-11)
nmod:in(acres-10, Alaska-12)
auxpass(left-14, were-13)
root(ROOT-0, left-14)
mark(die-16, to-15)
xcomp(left-14, die-16)
case(own-19, on-17)
nmod:poss(own-19, their-18)
nmod:on(die-16, own-19)
punct(left-14, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#fires

die :: Soviet leader Gorbachev , in a second address to the forum , appealed to the 5 , 000 delegates to adopt his restructuring proposals , saying `` socialism will die unless we reform '' the Soviet political system ./.
amod(Gorbachev-3, Soviet-1)
compound(Gorbachev-3, leader-2)
nsubj(appealed-13, Gorbachev-3)
punct(appealed-13, ,-4)
case(address-8, in-5)
det(address-8, a-6)
amod(address-8, second-7)
nmod:in(appealed-13, address-8)
case(forum-11, to-9)
det(forum-11, the-10)
nmod:to(address-8, forum-11)
punct(appealed-13, ,-12)
root(ROOT-0, appealed-13)
nmod(appealed-13, to-14)
dep(to-14, the-15)
dep(the-15, 5-16)
punct(5-16, ,-17)
nummod(delegates-19, 000-18)
root(,-17, delegates-19)
mark(adopt-21, to-20)
acl(delegates-19, adopt-21)
nmod:poss(proposals-24, his-22)
compound(proposals-24, restructuring-23)
dobj(adopt-21, proposals-24)
punct(delegates-19, ,-25)
acl(delegates-19, saying-26)
punct(die-30, ``-27)
nsubj(die-30, socialism-28)
aux(die-30, will-29)
ccomp(saying-26, die-30)
mark(reform-33, unless-31)
nsubj(reform-33, we-32)
advcl(die-30, reform-33)
punct(reform-33, ''-34)
det(system-38, the-35)
amod(system-38, Soviet-36)
amod(system-38, political-37)
dobj(reform-33, system-38)
punct(delegates-19, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#socialism

die :: This provides greatly enhanced trouble-shooting capabilities when something does go wrong , and can even be used to automatically switch in a good spare card if something does die ./.
nsubj(provides-2, This-1)
nsubjpass(used-17, This-1)
nsubj:xsubj(switch-20, This-1)
root(ROOT-0, provides-2)
advmod(enhanced-4, greatly-3)
amod(capabilities-6, enhanced-4)
compound(capabilities-6, trouble-shooting-5)
dobj(provides-2, capabilities-6)
advmod(go-10, when-7)
nsubj(go-10, something-8)
aux(go-10, does-9)
advcl(provides-2, go-10)
xcomp(go-10, wrong-11)
punct(provides-2, ,-12)
cc(provides-2, and-13)
aux(used-17, can-14)
advmod(used-17, even-15)
auxpass(used-17, be-16)
conj:and(provides-2, used-17)
mark(switch-20, to-18)
advmod(switch-20, automatically-19)
xcomp(used-17, switch-20)
case(card-25, in-21)
det(card-25, a-22)
amod(card-25, good-23)
amod(card-25, spare-24)
nmod:in(switch-20, card-25)
mark(die-29, if-26)
nsubj(die-29, something-27)
aux(die-29, does-28)
advcl(switch-20, die-29)
punct(provides-2, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#something

die :: `` If we do n't do something to address the needs of the urban poor , then the core of our cities will die , '' says Frank Lomax , executive vice president of the National Urban League ./.
punct(says-27, ``-1)
mark(do-6, If-2)
nsubj(do-6, we-3)
aux(do-6, do-4)
neg(do-6, n't-5)
advcl(die-24, do-6)
dobj(do-6, something-7)
mark(address-9, to-8)
advcl(do-6, address-9)
det(needs-11, the-10)
dobj(address-9, needs-11)
case(poor-15, of-12)
det(poor-15, the-13)
amod(poor-15, urban-14)
nmod:of(needs-11, poor-15)
punct(die-24, ,-16)
advmod(core-19, then-17)
det(core-19, the-18)
nsubj(die-24, core-19)
case(cities-22, of-20)
nmod:poss(cities-22, our-21)
nmod:of(core-19, cities-22)
aux(die-24, will-23)
ccomp(says-27, die-24)
punct(says-27, ,-25)
punct(says-27, ''-26)
root(ROOT-0, says-27)
compound(Lomax-29, Frank-28)
nsubj(says-27, Lomax-29)
punct(Lomax-29, ,-30)
amod(president-33, executive-31)
compound(president-33, vice-32)
appos(Lomax-29, president-33)
case(League-38, of-34)
det(League-38, the-35)
amod(League-38, National-36)
compound(League-38, Urban-37)
nmod:of(president-33, League-38)
punct(says-27, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#core

die :: He just wo n't die , the untamable , lubricious monster monk from Siberia who darkened the imperial doorstep of Nicholas and Alexandra ./.
nsubj(die-5, He-1)
advmod(die-5, just-2)
aux(die-5, wo-3)
neg(die-5, n't-4)
root(ROOT-0, die-5)
punct(die-5, ,-6)
det(monk-12, the-7)
amod(monk-12, untamable-8)
punct(monk-12, ,-9)
amod(monk-12, lubricious-10)
compound(monk-12, monster-11)
dobj(die-5, monk-12)
nsubj(darkened-16, monk-12)
case(Siberia-14, from-13)
nmod:from(monk-12, Siberia-14)
ref(monk-12, who-15)
acl:relcl(monk-12, darkened-16)
det(doorstep-19, the-17)
compound(doorstep-19, imperial-18)
dobj(darkened-16, doorstep-19)
case(Nicholas-21, of-20)
nmod:of(doorstep-19, Nicholas-21)
cc(Nicholas-21, and-22)
nmod:of(doorstep-19, Alexandra-23)
conj:and(Nicholas-21, Alexandra-23)
punct(die-5, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#monk

die :: An estimated 18 , 100 Americans will die from it this year , making the disease the fifth-greatest cause of cancer deaths ./.
det(18-3, An-1)
amod(18-3, estimated-2)
ccomp(die-8, 18-3)
punct(die-8, ,-4)
nummod(Americans-6, 100-5)
nsubj(die-8, Americans-6)
aux(die-8, will-7)
root(ROOT-0, die-8)
case(it-10, from-9)
nmod:from(die-8, it-10)
det(year-12, this-11)
nmod:tmod(die-8, year-12)
punct(die-8, ,-13)
advcl(die-8, making-14)
det(disease-16, the-15)
nsubj(cause-19, disease-16)
det(cause-19, the-17)
amod(cause-19, fifth-greatest-18)
xcomp(making-14, cause-19)
case(deaths-22, of-20)
compound(deaths-22, cancer-21)
nmod:of(cause-19, deaths-22)
punct(die-8, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#americans

die :: Many patients still die relatively quickly ./.
amod(patients-2, Many-1)
nsubj(die-4, patients-2)
advmod(die-4, still-3)
root(ROOT-0, die-4)
advmod(quickly-6, relatively-5)
advmod(die-4, quickly-6)
punct(die-4, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#patients

die :: But the EPA and medical specialists have estimated that , even if schools eliminate asbestos quickly , 1 , 000 to 7 , 000 people already exposed to the substance in their school years would die from asbestos-related diseases over the next 30 years ./.
cc(estimated-8, But-1)
det(EPA-3, the-2)
nsubj(estimated-8, EPA-3)
cc(EPA-3, and-4)
amod(specialists-6, medical-5)
conj:and(EPA-3, specialists-6)
nsubj(estimated-8, specialists-6)
aux(estimated-8, have-7)
root(ROOT-0, estimated-8)
mark(die-36, that-9)
punct(die-36, ,-10)
advmod(eliminate-14, even-11)
mark(eliminate-14, if-12)
nsubj(eliminate-14, schools-13)
advcl(die-36, eliminate-14)
dobj(eliminate-14, asbestos-15)
advmod(eliminate-14, quickly-16)
punct(die-36, ,-17)
nsubj(die-36, 1-18)
punct(1-18, ,-19)
compound(7-22, 000-20)
dep(7-22, to-21)
conj(1-18, 7-22)
punct(1-18, ,-23)
nummod(people-25, 000-24)
appos(1-18, people-25)
advmod(exposed-27, already-26)
acl(people-25, exposed-27)
case(substance-30, to-28)
det(substance-30, the-29)
nmod:to(exposed-27, substance-30)
case(years-34, in-31)
nmod:poss(years-34, their-32)
compound(years-34, school-33)
nmod:in(substance-30, years-34)
aux(die-36, would-35)
ccomp(estimated-8, die-36)
case(diseases-39, from-37)
amod(diseases-39, asbestos-related-38)
nmod:from(die-36, diseases-39)
case(years-44, over-40)
det(years-44, the-41)
amod(years-44, next-42)
nummod(years-44, 30-43)
nmod:over(die-36, years-44)
punct(estimated-8, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#1

die :: `` But , Doc , I 'm going to die of this , '' you plead ./.
punct(going-8, ``-1)
cc(going-8, But-2)
punct(going-8, ,-3)
ccomp(going-8, Doc-4)
punct(going-8, ,-5)
nsubj(going-8, I-6)
nsubj:xsubj(die-10, I-6)
aux(going-8, 'm-7)
dep(plead-16, going-8)
mark(die-10, to-9)
xcomp(going-8, die-10)
case(this-12, of-11)
nmod:of(die-10, this-12)
punct(going-8, ,-13)
punct(going-8, ''-14)
nsubj(plead-16, you-15)
root(ROOT-0, plead-16)
punct(plead-16, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#i

die :: When the parents die , ownership of the entire property transfers directly to the kids , '' he says ./.
advmod(die-4, When-1)
det(parents-3, the-2)
nsubj(die-4, parents-3)
advcl(says-19, die-4)
punct(says-19, ,-5)
nsubj(says-19, ownership-6)
case(transfers-11, of-7)
det(transfers-11, the-8)
amod(transfers-11, entire-9)
compound(transfers-11, property-10)
nmod:of(ownership-6, transfers-11)
advmod(kids-15, directly-12)
case(kids-15, to-13)
det(kids-15, the-14)
nmod:to(ownership-6, kids-15)
punct(says-19, ,-16)
punct(says-19, ''-17)
nsubj(says-19, he-18)
root(ROOT-0, says-19)
punct(says-19, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#parents

die :: A critical 10-day period in which much of the $ 22 billion corn crop must germinate or die sterile is passing without adequate rain ./.
det(period-4, A-1)
amod(period-4, critical-2)
amod(period-4, 10-day-3)
nmod:in(germinate-16, period-4)
nsubj(passing-21, period-4)
case(which-6, in-5)
ref(period-4, which-6)
advmod(germinate-16, much-7)
case(crop-14, of-8)
det(crop-14, the-9)
amod(crop-14, $-10)
compound(billion-12, 22-11)
nummod($-10, billion-12)
compound(crop-14, corn-13)
nmod:of(much-7, crop-14)
aux(germinate-16, must-15)
acl:relcl(period-4, germinate-16)
cc(germinate-16, or-17)
acl:relcl(period-4, die-18)
conj:or(germinate-16, die-18)
advmod(germinate-16, sterile-19)
aux(passing-21, is-20)
root(ROOT-0, passing-21)
case(rain-24, without-22)
amod(rain-24, adequate-23)
nmod:without(passing-21, rain-24)
punct(passing-21, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

die :: Weyerhaeuser Co. said it has budgeted an extra $ 1 million to replace seedlings that may die ./.
compound(Co.-2, Weyerhaeuser-1)
nsubj(said-3, Co.-2)
root(ROOT-0, said-3)
nsubj(budgeted-6, it-4)
aux(budgeted-6, has-5)
ccomp(said-3, budgeted-6)
det($-9, an-7)
amod($-9, extra-8)
dobj(budgeted-6, $-9)
compound(million-11, 1-10)
nummod($-9, million-11)
mark(replace-13, to-12)
advcl(budgeted-6, replace-13)
dobj(replace-13, seedlings-14)
nsubj(die-17, seedlings-14)
ref(seedlings-14, that-15)
aux(die-17, may-16)
acl:relcl(seedlings-14, die-17)
punct(said-3, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#seedlings

die :: `` While physicians should never directly cause death , they must always act in the best interest of their patients and that sometimes includes allowing them to die , '' Dr. Sammons said in a statement ./.
punct(said-33, ``-1)
mark(cause-7, While-2)
nsubj(cause-7, physicians-3)
aux(cause-7, should-4)
neg(cause-7, never-5)
advmod(cause-7, directly-6)
advcl(act-13, cause-7)
dobj(cause-7, death-8)
punct(act-13, ,-9)
nsubj(act-13, they-10)
aux(act-13, must-11)
advmod(act-13, always-12)
ccomp(said-33, act-13)
case(interest-17, in-14)
det(interest-17, the-15)
amod(interest-17, best-16)
nmod:in(act-13, interest-17)
case(patients-20, of-18)
nmod:poss(patients-20, their-19)
nmod:of(interest-17, patients-20)
cc(act-13, and-21)
nsubj(includes-24, that-22)
advmod(includes-24, sometimes-23)
conj:and(act-13, includes-24)
ccomp(said-33, includes-24)
xcomp(includes-24, allowing-25)
dobj(allowing-25, them-26)
nsubj:xsubj(die-28, them-26)
mark(die-28, to-27)
xcomp(allowing-25, die-28)
punct(said-33, ,-29)
punct(said-33, ''-30)
compound(Sammons-32, Dr.-31)
nsubj(said-33, Sammons-32)
root(ROOT-0, said-33)
case(statement-36, in-34)
det(statement-36, a-35)
nmod:in(said-33, statement-36)
punct(said-33, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#them

die :: He adds: `` To die in defense of one 's country is one thing ; to die unnecessarily because of a defect in a product is quite another . ''/''
nsubj(adds-2, He-1)
root(ROOT-0, adds-2)
punct(adds-2, :-3)
punct(adds-2, ``-4)
mark(die-6, To-5)
csubj(thing-15, die-6)
case(defense-8, in-7)
nmod:in(die-6, defense-8)
case(country-12, of-9)
nmod:poss(country-12, one-10)
case(one-10, 's-11)
nmod:of(defense-8, country-12)
cop(thing-15, is-13)
nummod(thing-15, one-14)
ccomp(adds-2, thing-15)
punct(thing-15, ;-16)
mark(die-18, to-17)
csubj(another-29, die-18)
advmod(die-18, unnecessarily-19)
case(defect-23, because-20)
mwe(because-20, of-21)
det(defect-23, a-22)
nmod:because_of(die-18, defect-23)
case(product-26, in-24)
det(product-26, a-25)
nmod:in(defect-23, product-26)
cop(another-29, is-27)
advmod(another-29, quite-28)
parataxis(thing-15, another-29)
punct(adds-2, .-30)
punct(adds-2, ''-31)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: die#defense

die :: Jack Scowen , a Conservative member of parliament from northern Saskatchewan , said that `` unless somebody wants to stir up a bunch of garbage , '' the language issue should be `` left to die . ''/''
compound(Scowen-2, Jack-1)
nsubj(said-13, Scowen-2)
punct(Scowen-2, ,-3)
det(member-6, a-4)
amod(member-6, Conservative-5)
appos(Scowen-2, member-6)
case(parliament-8, of-7)
nmod:of(member-6, parliament-8)
case(Saskatchewan-11, from-9)
amod(Saskatchewan-11, northern-10)
nmod:from(member-6, Saskatchewan-11)
punct(Scowen-2, ,-12)
root(ROOT-0, said-13)
mark(left-34, that-14)
punct(left-34, ``-15)
mark(wants-18, unless-16)
nsubj(wants-18, somebody-17)
nsubj:xsubj(stir-20, somebody-17)
advcl(left-34, wants-18)
mark(stir-20, to-19)
xcomp(wants-18, stir-20)
compound:prt(stir-20, up-21)
det(bunch-23, a-22)
dobj(stir-20, bunch-23)
case(garbage-25, of-24)
nmod:of(bunch-23, garbage-25)
punct(left-34, ,-26)
punct(left-34, ''-27)
det(issue-30, the-28)
compound(issue-30, language-29)
nsubjpass(left-34, issue-30)
nsubj:xsubj(die-36, issue-30)
aux(left-34, should-31)
auxpass(left-34, be-32)
punct(left-34, ``-33)
ccomp(said-13, left-34)
mark(die-36, to-35)
xcomp(left-34, die-36)
punct(said-13, .-37)
punct(said-13, ''-38)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: die#issue

die :: `` If we keep this up , we 'll die with our flag . ''/''
root(ROOT-0, ``-1)
mark(keep-4, If-2)
nsubj(keep-4, we-3)
advcl(die-10, keep-4)
dobj(keep-4, this-5)
compound:prt(keep-4, up-6)
punct(die-10, ,-7)
nsubj(die-10, we-8)
aux(die-10, 'll-9)
root(``-1, die-10)
case(flag-13, with-11)
nmod:poss(flag-13, our-12)
nmod:with(die-10, flag-13)
punct(die-10, .-14)
punct(die-10, ''-15)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: die#we

die :: Every day this legislation is delayed , 25 people die in needless pain that could have been relieved with this treatment , which has been used successfully in Britain for years ./.
det(day-2, Every-1)
nmod:tmod(delayed-6, day-2)
det(legislation-4, this-3)
nsubjpass(delayed-6, legislation-4)
auxpass(delayed-6, is-5)
advcl(die-10, delayed-6)
punct(die-10, ,-7)
nummod(people-9, 25-8)
nsubj(die-10, people-9)
root(ROOT-0, die-10)
case(pain-13, in-11)
amod(pain-13, needless-12)
nmod:in(die-10, pain-13)
nsubjpass(relieved-18, pain-13)
ref(pain-13, that-14)
aux(relieved-18, could-15)
aux(relieved-18, have-16)
auxpass(relieved-18, been-17)
acl:relcl(pain-13, relieved-18)
case(treatment-21, with-19)
det(treatment-21, this-20)
nmod:with(relieved-18, treatment-21)
nsubjpass(used-26, treatment-21)
punct(treatment-21, ,-22)
ref(treatment-21, which-23)
aux(used-26, has-24)
auxpass(used-26, been-25)
acl:relcl(treatment-21, used-26)
advmod(used-26, successfully-27)
case(Britain-29, in-28)
nmod:in(used-26, Britain-29)
case(years-31, for-30)
nmod:for(used-26, years-31)
punct(die-10, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#people

die :: Mr. Mulheren rescued the child from the bottom of the pool and , according to a friend , stood shaking the child as tears streamed down his face , crying , `` Do n't die , do n't die . ''/''
compound(Mulheren-2, Mr.-1)
nsubj(rescued-3, Mulheren-2)
root(ROOT-0, rescued-3)
det(child-5, the-4)
dobj(rescued-3, child-5)
case(bottom-8, from-6)
det(bottom-8, the-7)
nmod:from(rescued-3, bottom-8)
case(pool-11, of-9)
det(pool-11, the-10)
nmod:of(bottom-8, pool-11)
cc(rescued-3, and-12)
punct(rescued-3, ,-13)
case(friend-17, according-14)
mwe(according-14, to-15)
det(friend-17, a-16)
conj:and(rescued-3, friend-17)
punct(friend-17, ,-18)
aux(shaking-20, stood-19)
acl(friend-17, shaking-20)
det(child-22, the-21)
dobj(shaking-20, child-22)
mark(streamed-25, as-23)
nsubj(streamed-25, tears-24)
advcl(shaking-20, streamed-25)
compound:prt(streamed-25, down-26)
nmod:poss(face-28, his-27)
dobj(streamed-25, face-28)
punct(shaking-20, ,-29)
dep(shaking-20, crying-30)
punct(shaking-20, ,-31)
punct(shaking-20, ``-32)
aux(die-35, Do-33)
neg(die-35, n't-34)
ccomp(shaking-20, die-35)
punct(die-35, ,-36)
aux(die-39, do-37)
neg(die-39, n't-38)
dep(die-35, die-39)
punct(rescued-3, .-40)
punct(rescued-3, ''-41)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

die :: The Kidney Patient Association , an independent group , estimates that some 1 , 500 Britons die every year because of lack of kidney treatment ./.
det(Association-4, The-1)
compound(Association-4, Kidney-2)
compound(Association-4, Patient-3)
nsubj(estimates-10, Association-4)
punct(Association-4, ,-5)
det(group-8, an-6)
amod(group-8, independent-7)
appos(Association-4, group-8)
punct(Association-4, ,-9)
root(ROOT-0, estimates-10)
mark(die-17, that-11)
dep(die-17, some-12)
dep(die-17, 1-13)
punct(die-17, ,-14)
nummod(Britons-16, 500-15)
nsubj(die-17, Britons-16)
ccomp(estimates-10, die-17)
det(year-19, every-18)
nmod:tmod(die-17, year-19)
case(lack-22, because-20)
mwe(because-20, of-21)
nmod:because_of(die-17, lack-22)
case(treatment-25, of-23)
compound(treatment-25, kidney-24)
nmod:of(lack-22, treatment-25)
punct(estimates-10, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#britons

die :: If he and the Senate differ sharply on the answers , the treaties probably will die in the Senate , and the setback to U.S.Soviet relations will be severe ./.
mark(differ-6, If-1)
nsubj(differ-6, he-2)
cc(he-2, and-3)
det(Senate-5, the-4)
conj:and(he-2, Senate-5)
nsubj(differ-6, Senate-5)
advcl(die-16, differ-6)
advmod(differ-6, sharply-7)
case(answers-10, on-8)
det(answers-10, the-9)
nmod:on(differ-6, answers-10)
punct(die-16, ,-11)
det(treaties-13, the-12)
nsubj(die-16, treaties-13)
advmod(die-16, probably-14)
aux(die-16, will-15)
root(ROOT-0, die-16)
case(Senate-19, in-17)
det(Senate-19, the-18)
nmod:in(die-16, Senate-19)
punct(die-16, ,-20)
cc(die-16, and-21)
det(setback-23, the-22)
nsubj(severe-29, setback-23)
case(relations-26, to-24)
compound(relations-26, U.S.Soviet-25)
nmod:to(setback-23, relations-26)
aux(severe-29, will-27)
cop(severe-29, be-28)
conj:and(die-16, severe-29)
punct(die-16, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#treaties

die :: `` It is better for a pitchman to die than to be caught alive in a scandal , '' contends Albert Lerman , chief creative officer at D'Arcy Masius Benton & Bowles in St. Louis , whose clients include Anheuser-Busch Cos ./.
punct(contends-20, ``-1)
nsubj(better-4, It-2)
cop(better-4, is-3)
ccomp(contends-20, better-4)
mark(die-9, for-5)
det(pitchman-7, a-6)
nsubj(die-9, pitchman-7)
mark(die-9, to-8)
advcl(better-4, die-9)
mark(caught-13, than-10)
mark(caught-13, to-11)
auxpass(caught-13, be-12)
advcl(die-9, caught-13)
xcomp(caught-13, alive-14)
case(scandal-17, in-15)
det(scandal-17, a-16)
nmod:in(caught-13, scandal-17)
punct(contends-20, ,-18)
punct(contends-20, ''-19)
root(ROOT-0, contends-20)
compound(Lerman-22, Albert-21)
nsubj(contends-20, Lerman-22)
punct(Lerman-22, ,-23)
amod(officer-26, chief-24)
amod(officer-26, creative-25)
appos(Lerman-22, officer-26)
case(Benton-30, at-27)
compound(Benton-30, D'Arcy-28)
compound(Benton-30, Masius-29)
nmod:at(officer-26, Benton-30)
nmod:poss(clients-38, Benton-30)
cc(Benton-30, &-31)
nmod:at(officer-26, Bowles-32)
conj:&(Benton-30, Bowles-32)
nmod:poss(clients-38, Bowles-32)
case(Louis-35, in-33)
compound(Louis-35, St.-34)
nmod:in(Benton-30, Louis-35)
punct(Benton-30, ,-36)
ref(Benton-30, whose-37)
nsubj(include-39, clients-38)
acl:relcl(Benton-30, include-39)
compound(Cos-41, Anheuser-Busch-40)
dobj(include-39, Cos-41)
punct(contends-20, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#pitchman

die :: One reason there 's room for more magazines is because so many die , industry officials say ./.
nummod(reason-2, One-1)
nsubj(is-9, reason-2)
expl('s-4, there-3)
acl:relcl(reason-2, 's-4)
nsubj('s-4, room-5)
case(magazines-8, for-6)
amod(magazines-8, more-7)
nmod:for(room-5, magazines-8)
root(ROOT-0, is-9)
mark(die-13, because-10)
advmod(many-12, so-11)
nsubj(die-13, many-12)
advcl(say-17, die-13)
punct(say-17, ,-14)
compound(officials-16, industry-15)
nsubj(say-17, officials-16)
ccomp(is-9, say-17)
punct(is-9, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#many

die :: Other magazines may survive five , 10 , even 25 or 50 years and then die ./.
amod(magazines-2, Other-1)
nsubj(survive-4, magazines-2)
nsubj(die-16, magazines-2)
aux(survive-4, may-3)
root(ROOT-0, survive-4)
nummod(years-13, five-5)
punct(five-5, ,-6)
appos(five-5, 10-7)
punct(five-5, ,-8)
advmod(25-10, even-9)
nummod(years-13, 25-10)
cc(25-10, or-11)
conj:or(25-10, 50-12)
nummod(years-13, 50-12)
dobj(survive-4, years-13)
cc(survive-4, and-14)
advmod(die-16, then-15)
conj:and(survive-4, die-16)
punct(survive-4, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#magazines

die :: We are all afraid to die and all we can do is count the days till we go home . . . ./.
nsubj(afraid-4, We-1)
cop(afraid-4, are-2)
dep(afraid-4, all-3)
root(ROOT-0, afraid-4)
mark(die-6, to-5)
ccomp(afraid-4, die-6)
cc(die-6, and-7)
nsubj(count-13, all-8)
nsubj(do-11, we-9)
aux(do-11, can-10)
acl:relcl(all-8, do-11)
aux(count-13, is-12)
ccomp(afraid-4, count-13)
conj:and(die-6, count-13)
det(days-15, the-14)
dobj(count-13, days-15)
mark(go-18, till-16)
nsubj(go-18, we-17)
acl(days-15, go-18)
advmod(go-18, home-19)
punct(afraid-4, ...-20)
punct(afraid-4, /-21)
punct(afraid-4, .-22)
No match found

die :: Jack Scowen , a Conservative member of parliament from northern Saskatchewan , said that `` unless somebody wants to stir up a bunch of garbage , '' the language issue should be `` left to die . ''/''
compound(Scowen-2, Jack-1)
nsubj(said-13, Scowen-2)
punct(Scowen-2, ,-3)
det(member-6, a-4)
amod(member-6, Conservative-5)
appos(Scowen-2, member-6)
case(parliament-8, of-7)
nmod:of(member-6, parliament-8)
case(Saskatchewan-11, from-9)
amod(Saskatchewan-11, northern-10)
nmod:from(member-6, Saskatchewan-11)
punct(Scowen-2, ,-12)
root(ROOT-0, said-13)
mark(left-34, that-14)
punct(left-34, ``-15)
mark(wants-18, unless-16)
nsubj(wants-18, somebody-17)
nsubj:xsubj(stir-20, somebody-17)
advcl(left-34, wants-18)
mark(stir-20, to-19)
xcomp(wants-18, stir-20)
compound:prt(stir-20, up-21)
det(bunch-23, a-22)
dobj(stir-20, bunch-23)
case(garbage-25, of-24)
nmod:of(bunch-23, garbage-25)
punct(left-34, ,-26)
punct(left-34, ''-27)
det(issue-30, the-28)
compound(issue-30, language-29)
nsubjpass(left-34, issue-30)
nsubj:xsubj(die-36, issue-30)
aux(left-34, should-31)
auxpass(left-34, be-32)
punct(left-34, ``-33)
ccomp(said-13, left-34)
mark(die-36, to-35)
xcomp(left-34, die-36)
punct(said-13, .-37)
punct(said-13, ''-38)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: die#issue

die :: And they die anyway . ''/''
cc(die-3, And-1)
nsubj(die-3, they-2)
root(ROOT-0, die-3)
advmod(die-3, anyway-4)
punct(die-3, .-5)
punct(die-3, ''-6)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: die#they

die :: And a current red-and-black billboard in Mount Vernon , N.Y . , warns that `` People who do drugs go to hell before they die . ''/''
root(ROOT-0, And-1)
det(billboard-5, a-2)
amod(billboard-5, current-3)
compound(billboard-5, red-and-black-4)
dep(And-1, billboard-5)
case(Vernon-8, in-6)
compound(Vernon-8, Mount-7)
nmod:in(billboard-5, Vernon-8)
punct(Vernon-8, ,-9)
appos(Vernon-8, N.Y-10)
punct(And-1, .-11)
punct(warns-2, ,-1)
root(ROOT-0, warns-2)
mark(go-9, that-3)
punct(go-9, ``-4)
nsubj(do-7, People-5)
nsubj(go-9, People-5)
ref(People-5, who-6)
acl:relcl(People-5, do-7)
dobj(do-7, drugs-8)
ccomp(warns-2, go-9)
case(hell-11, to-10)
nmod:to(go-9, hell-11)
mark(die-14, before-12)
nsubj(die-14, they-13)
advcl(go-9, die-14)
punct(warns-2, .-15)
punct(warns-2, ''-16)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: die#they

die :: About 40 , 000 newborns are afflicted each year with the disease ; about 10 , 000 die from it ./.
advmod(40-2, About-1)
nmod(afflicted-7, 40-2)
punct(afflicted-7, ,-3)
nummod(newborns-5, 000-4)
nsubjpass(afflicted-7, newborns-5)
auxpass(afflicted-7, are-6)
root(ROOT-0, afflicted-7)
det(year-9, each-8)
nmod:tmod(afflicted-7, year-9)
case(disease-12, with-10)
det(disease-12, the-11)
nmod:with(afflicted-7, disease-12)
punct(afflicted-7, ;-13)
advmod(10-15, about-14)
parataxis(afflicted-7, 10-15)
punct(10-15, ,-16)
nsubj(die-18, 000-17)
acl:relcl(10-15, die-18)
case(it-20, from-19)
nmod:from(die-18, it-20)
punct(afflicted-7, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#000

die :: `` Some of these older people would die before they 'd go to a hospital in Huntsville or Decatur , '' says Tony Williams ./.
punct(says-22, ``-1)
nsubj(die-8, Some-2)
case(people-6, of-3)
det(people-6, these-4)
amod(people-6, older-5)
nmod:of(Some-2, people-6)
aux(die-8, would-7)
ccomp(says-22, die-8)
mark(go-12, before-9)
nsubj(go-12, they-10)
aux(go-12, 'd-11)
advcl(die-8, go-12)
case(hospital-15, to-13)
det(hospital-15, a-14)
nmod:to(go-12, hospital-15)
case(Huntsville-17, in-16)
nmod:in(hospital-15, Huntsville-17)
cc(Huntsville-17, or-18)
nmod:in(hospital-15, Decatur-19)
conj:or(Huntsville-17, Decatur-19)
punct(says-22, ,-20)
punct(says-22, ''-21)
root(ROOT-0, says-22)
compound(Williams-24, Tony-23)
nsubj(says-22, Williams-24)
punct(says-22, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#some

die :: Should he die soon , the debate would be further sidetracked ./.
aux(die-3, Should-1)
nsubj(die-3, he-2)
advcl(sidetracked-11, die-3)
advmod(die-3, soon-4)
punct(sidetracked-11, ,-5)
det(debate-7, the-6)
nsubjpass(sidetracked-11, debate-7)
aux(sidetracked-11, would-8)
auxpass(sidetracked-11, be-9)
advmod(sidetracked-11, further-10)
root(ROOT-0, sidetracked-11)
punct(sidetracked-11, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#he

die :: Now , it is said that Duivree can not die ./.
advmod(said-5, Now-1)
punct(said-5, ,-2)
nsubjpass(said-5, it-3)
auxpass(said-5, is-4)
root(ROOT-0, said-5)
mark(die-10, that-6)
nsubj(die-10, Duivree-7)
aux(die-10, can-8)
neg(die-10, not-9)
ccomp(said-5, die-10)
punct(said-5, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#duivree

die :: The deity is Col. Lee Kuang-chien , the most senior KMT officer to die in the 1949 battle ./.
det(deity-2, The-1)
nsubj(Kuang-chien-6, deity-2)
cop(Kuang-chien-6, is-3)
compound(Kuang-chien-6, Col.-4)
compound(Kuang-chien-6, Lee-5)
root(ROOT-0, Kuang-chien-6)
punct(Kuang-chien-6, ,-7)
det(officer-12, the-8)
advmod(senior-10, most-9)
amod(officer-12, senior-10)
compound(officer-12, KMT-11)
appos(Kuang-chien-6, officer-12)
mark(die-14, to-13)
acl(officer-12, die-14)
case(battle-18, in-15)
det(battle-18, the-16)
nummod(battle-18, 1949-17)
nmod:in(die-14, battle-18)
punct(Kuang-chien-6, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#battle

die :: A motorcycle rider is 10 times more likely to die in an accident than an automobile driver. -RRB-/-RRB-
det(rider-3, A-1)
compound(rider-3, motorcycle-2)
nsubj(likely-8, rider-3)
nsubj:xsubj(die-10, rider-3)
cop(likely-8, is-4)
compound(times-6, 10-5)
dep(likely-8, times-6)
advmod(likely-8, more-7)
root(ROOT-0, likely-8)
mark(die-10, to-9)
xcomp(likely-8, die-10)
case(accident-13, in-11)
det(accident-13, an-12)
nmod:in(die-10, accident-13)
case(driver-17, than-14)
det(driver-17, an-15)
compound(driver-17, automobile-16)
nmod:than(likely-8, driver-17)
punct(likely-8, .-18)
punct(likely-8, -RRB--19)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: die#rider

die :: Nothing dates faster than a business book because trends change , statistics lose meaning , companies get liquidated , executives get the ax , and people die ./.
compound(dates-2, Nothing-1)
nsubj(get-21, dates-2)
advmod(dates-2, faster-3)
case(book-7, than-4)
det(book-7, a-5)
compound(book-7, business-6)
nmod:than(faster-3, book-7)
mark(liquidated-18, because-8)
compound(change-10, trends-9)
nsubjpass(liquidated-18, change-10)
punct(change-10, ,-11)
nsubj(lose-13, statistics-12)
acl:relcl(change-10, lose-13)
dobj(lose-13, meaning-14)
punct(change-10, ,-15)
nsubjpass(liquidated-18, companies-16)
auxpass(liquidated-18, get-17)
advcl(get-21, liquidated-18)
punct(get-21, ,-19)
nsubj(get-21, executives-20)
root(ROOT-0, get-21)
det(ax-23, the-22)
dobj(get-21, ax-23)
punct(get-21, ,-24)
cc(get-21, and-25)
nsubj(die-27, people-26)
conj:and(get-21, die-27)
punct(get-21, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#people

die :: The EPA 's current emission standard for radium is five picocuries per liter , a standard that corresponds to a risk whereby one of 10 , 000 people exposed to such an emission level over a lifetime would die ./.
det(EPA-2, The-1)
nmod:poss(standard-6, EPA-2)
case(EPA-2, 's-3)
amod(standard-6, current-4)
compound(standard-6, emission-5)
nsubj(picocuries-11, standard-6)
case(radium-8, for-7)
nmod:for(standard-6, radium-8)
cop(picocuries-11, is-9)
nummod(picocuries-11, five-10)
root(ROOT-0, picocuries-11)
case(liter-13, per-12)
nmod:per(picocuries-11, liter-13)
punct(liter-13, ,-14)
det(standard-16, a-15)
appos(liter-13, standard-16)
nsubj(corresponds-18, standard-16)
ref(standard-16, that-17)
acl:relcl(standard-16, corresponds-18)
case(risk-21, to-19)
det(risk-21, a-20)
nmod:to(corresponds-18, risk-21)
advmod(die-39, whereby-22)
nsubj(die-39, one-23)
case(10-25, of-24)
nmod:of(one-23, 10-25)
punct(one-23, ,-26)
nummod(people-28, 000-27)
appos(one-23, people-28)
acl(people-28, exposed-29)
case(level-34, to-30)
det:predet(level-34, such-31)
det(level-34, an-32)
compound(level-34, emission-33)
nmod:to(exposed-29, level-34)
case(lifetime-37, over-35)
det(lifetime-37, a-36)
nmod:over(exposed-29, lifetime-37)
aux(die-39, would-38)
acl:relcl(risk-21, die-39)
punct(picocuries-11, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#one

die :: In 1347 , Mongols besieging the Black Sea port of Caffa began to sicken and die from the plague ./.
case(1347-2, In-1)
nmod:in(began-12, 1347-2)
punct(began-12, ,-3)
nsubj(began-12, Mongols-4)
nsubj:xsubj(sicken-14, Mongols-4)
acl(Mongols-4, besieging-5)
det(port-9, the-6)
amod(port-9, Black-7)
compound(port-9, Sea-8)
dobj(besieging-5, port-9)
case(Caffa-11, of-10)
nmod:of(port-9, Caffa-11)
root(ROOT-0, began-12)
mark(sicken-14, to-13)
xcomp(began-12, sicken-14)
cc(sicken-14, and-15)
xcomp(began-12, die-16)
conj:and(sicken-14, die-16)
case(plague-19, from-17)
det(plague-19, the-18)
nmod:from(sicken-14, plague-19)
punct(began-12, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

die :: `` He will take up my gun when I die , '' the captain says ./.
punct(says-15, ``-1)
nsubj(take-4, He-2)
aux(take-4, will-3)
ccomp(says-15, take-4)
compound:prt(take-4, up-5)
nmod:poss(gun-7, my-6)
dobj(take-4, gun-7)
advmod(die-10, when-8)
nsubj(die-10, I-9)
advcl(take-4, die-10)
punct(says-15, ,-11)
punct(says-15, ''-12)
det(captain-14, the-13)
nsubj(says-15, captain-14)
root(ROOT-0, says-15)
punct(says-15, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#i

die :: Civilians die , and the population turns against the mujahedeen ./.
nsubj(die-2, Civilians-1)
root(ROOT-0, die-2)
punct(die-2, ,-3)
cc(die-2, and-4)
det(population-6, the-5)
nsubj(turns-7, population-6)
conj:and(die-2, turns-7)
case(mujahedeen-10, against-8)
det(mujahedeen-10, the-9)
nmod:against(turns-7, mujahedeen-10)
punct(die-2, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#civilians

die :: But thanks to glasnost , people here know that about a dozen people die from mishaps in the factory every year ./.
cc(know-8, But-1)
advmod(know-8, thanks-2)
case(glasnost-4, to-3)
nmod:to(thanks-2, glasnost-4)
punct(know-8, ,-5)
nsubj(know-8, people-6)
advmod(know-8, here-7)
root(ROOT-0, know-8)
mark(die-14, that-9)
advmod(dozen-12, about-10)
advmod(dozen-12, a-11)
nummod(people-13, dozen-12)
nsubj(die-14, people-13)
ccomp(know-8, die-14)
case(mishaps-16, from-15)
nmod:from(die-14, mishaps-16)
case(factory-19, in-17)
det(factory-19, the-18)
nmod:in(mishaps-16, factory-19)
det(year-21, every-20)
nmod:tmod(die-14, year-21)
punct(know-8, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#people

die :: Quiet pressure from top businessmen combined with British and German threats of more sanctions to convince Pretoria to soften legislation that would cut off overseas funding of opposition groups , and to indefinitely postpone the hanging of the Sharpeville Six , a group of blacks sentenced to die for the mob killing of a black town councillor ./.
amod(pressure-2, Quiet-1)
root(ROOT-0, pressure-2)
case(businessmen-5, from-3)
amod(businessmen-5, top-4)
nmod:from(pressure-2, businessmen-5)
acl(businessmen-5, combined-6)
case(threats-11, with-7)
amod(threats-11, British-8)
cc(British-8, and-9)
conj:and(British-8, German-10)
amod(threats-11, German-10)
nmod:with(combined-6, threats-11)
case(sanctions-14, of-12)
amod(sanctions-14, more-13)
nmod:of(threats-11, sanctions-14)
mark(convince-16, to-15)
acl(sanctions-14, convince-16)
dobj(convince-16, Pretoria-17)
nsubj:xsubj(soften-19, Pretoria-17)
mark(soften-19, to-18)
xcomp(convince-16, soften-19)
dobj(soften-19, legislation-20)
nsubj(cut-23, legislation-20)
ref(legislation-20, that-21)
aux(cut-23, would-22)
acl:relcl(legislation-20, cut-23)
compound:prt(cut-23, off-24)
amod(funding-26, overseas-25)
dobj(cut-23, funding-26)
case(groups-29, of-27)
compound(groups-29, opposition-28)
nmod:of(funding-26, groups-29)
punct(pressure-2, ,-30)
cc(pressure-2, and-31)
mark(postpone-34, to-32)
advmod(postpone-34, indefinitely-33)
conj:and(pressure-2, postpone-34)
det(hanging-36, the-35)
dobj(postpone-34, hanging-36)
case(Sharpeville-39, of-37)
det(Sharpeville-39, the-38)
nmod:of(hanging-36, Sharpeville-39)
nummod(Sharpeville-39, Six-40)
punct(Sharpeville-39, ,-41)
det(group-43, a-42)
appos(Sharpeville-39, group-43)
case(blacks-45, of-44)
nmod:of(group-43, blacks-45)
acl(group-43, sentenced-46)
mark(die-48, to-47)
xcomp(sentenced-46, die-48)
case(killing-52, for-49)
det(killing-52, the-50)
compound(killing-52, mob-51)
nmod:for(die-48, killing-52)
case(councillor-57, of-53)
det(councillor-57, a-54)
amod(councillor-57, black-55)
compound(councillor-57, town-56)
nmod:of(killing-52, councillor-57)
punct(pressure-2, .-58)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#killing

die :: `` That 's not such a young age to die here , '' she says ./.
punct(age-8, ``-1)
nsubj(age-8, That-2)
cop(age-8, 's-3)
neg(age-8, not-4)
amod(age-8, such-5)
det(age-8, a-6)
amod(age-8, young-7)
dep(says-15, age-8)
mark(die-10, to-9)
acl(age-8, die-10)
advmod(die-10, here-11)
punct(age-8, ,-12)
punct(age-8, ''-13)
nsubj(says-15, she-14)
root(ROOT-0, says-15)
punct(says-15, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

die :: One of St. Bonaventure 's books ends with the sentence: `` Let us die then and enter into that darkness . ''/''
nsubj(ends-7, One-1)
case(books-6, of-2)
compound(Bonaventure-4, St.-3)
nmod:poss(books-6, Bonaventure-4)
case(Bonaventure-4, 's-5)
nmod:of(One-1, books-6)
root(ROOT-0, ends-7)
case(sentence-10, with-8)
det(sentence-10, the-9)
nmod:with(ends-7, sentence-10)
punct(ends-7, :-11)
punct(ends-7, ``-12)
ccomp(ends-7, Let-13)
nsubj(die-15, us-14)
nsubj(enter-18, us-14)
ccomp(Let-13, die-15)
advmod(die-15, then-16)
cc(die-15, and-17)
ccomp(Let-13, enter-18)
conj:and(die-15, enter-18)
case(darkness-21, into-19)
det(darkness-21, that-20)
nmod:into(enter-18, darkness-21)
punct(ends-7, .-22)
punct(ends-7, ''-23)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: die#us

die :: It 's not as though the prodnoses care whether people die of lung cancer ./.
root(ROOT-0, It-1)
dep(It-1, 's-2)
neg('s-2, not-3)
dep(not-3, as-4)
root(as-4, though-5)
det(care-8, the-6)
compound(care-8, prodnoses-7)
root(though-5, care-8)
mark(die-11, whether-9)
nsubj(die-11, people-10)
ccomp(care-8, die-11)
case(cancer-14, of-12)
compound(cancer-14, lung-13)
nmod:of(die-11, cancer-14)
punct(care-8, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#people

die :: Mr. Della Femina became a fixture on TV news reports about acquired immune deficiency syndrome , for example , after his agency created the line , `` I enjoy sex , but I 'm not ready to die for it , '' for LifeStyles condoms ./.
compound(Femina-3, Mr.-1)
compound(Femina-3, Della-2)
nsubj(became-4, Femina-3)
ccomp(condoms-45, became-4)
det(fixture-6, a-5)
xcomp(became-4, fixture-6)
case(reports-10, on-7)
compound(reports-10, TV-8)
compound(reports-10, news-9)
nmod:on(fixture-6, reports-10)
case(syndrome-15, about-11)
amod(syndrome-15, acquired-12)
amod(syndrome-15, immune-13)
compound(syndrome-15, deficiency-14)
nmod:about(reports-10, syndrome-15)
punct(became-4, ,-16)
case(example-18, for-17)
nmod:for(became-4, example-18)
punct(became-4, ,-19)
mark(created-23, after-20)
nmod:poss(agency-22, his-21)
nsubj(created-23, agency-22)
advcl(became-4, created-23)
det(line-25, the-24)
dobj(created-23, line-25)
punct(created-23, ,-26)
punct(created-23, ``-27)
nsubj(enjoy-29, I-28)
ccomp(created-23, enjoy-29)
dobj(enjoy-29, sex-30)
punct(became-4, ,-31)
cc(became-4, but-32)
nsubj(ready-36, I-33)
nsubj:xsubj(die-38, I-33)
cop(ready-36, 'm-34)
neg(ready-36, not-35)
conj:but(became-4, ready-36)
ccomp(condoms-45, ready-36)
mark(die-38, to-37)
xcomp(ready-36, die-38)
case(it-40, for-39)
nmod:for(die-38, it-40)
punct(condoms-45, ,-41)
punct(condoms-45, ''-42)
case(condoms-45, for-43)
compound(condoms-45, LifeStyles-44)
root(ROOT-0, condoms-45)
punct(condoms-45, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#i

die :: Cardiac-bypass queues grow and patients die before their turn ; hip replacements and cataract operations join a growing list of corrections that are triaged , ostensibly because more serious operations must be performed , but in reality because the resources are being used to continue first-dollar insurance coverage for sniffles and splinters -- and for asphalt laying in the constituencies of members of the government ./.
amod(queues-2, Cardiac-bypass-1)
nsubj(grow-3, queues-2)
root(ROOT-0, grow-3)
cc(grow-3, and-4)
nsubj(die-6, patients-5)
conj:and(grow-3, die-6)
case(turn-9, before-7)
nmod:poss(turn-9, their-8)
nmod:before(die-6, turn-9)
punct(grow-3, ;-10)
compound(replacements-12, hip-11)
nsubj(join-16, replacements-12)
cc(replacements-12, and-13)
compound(operations-15, cataract-14)
conj:and(replacements-12, operations-15)
nsubj(join-16, operations-15)
parataxis(grow-3, join-16)
det(list-19, a-17)
amod(list-19, growing-18)
dobj(join-16, list-19)
case(corrections-21, of-20)
nmod:of(list-19, corrections-21)
nsubjpass(triaged-24, corrections-21)
ref(corrections-21, that-22)
auxpass(triaged-24, are-23)
acl:relcl(corrections-21, triaged-24)
punct(triaged-24, ,-25)
advmod(performed-33, ostensibly-26)
mark(performed-33, because-27)
amod(operations-30, more-28)
amod(operations-30, serious-29)
nsubjpass(performed-33, operations-30)
aux(performed-33, must-31)
auxpass(performed-33, be-32)
advcl(triaged-24, performed-33)
punct(triaged-24, ,-34)
cc(triaged-24, but-35)
case(reality-37, in-36)
acl:relcl(corrections-21, reality-37)
conj:but(triaged-24, reality-37)
mark(used-43, because-38)
det(resources-40, the-39)
nsubjpass(used-43, resources-40)
nsubj:xsubj(continue-45, resources-40)
aux(used-43, are-41)
auxpass(used-43, being-42)
dep(reality-37, used-43)
mark(continue-45, to-44)
xcomp(used-43, continue-45)
amod(coverage-48, first-dollar-46)
compound(coverage-48, insurance-47)
dobj(continue-45, coverage-48)
case(sniffles-50, for-49)
nmod:for(coverage-48, sniffles-50)
cc(sniffles-50, and-51)
nmod:for(coverage-48, splinters-52)
conj:and(sniffles-50, splinters-52)
punct(used-43, ---53)
cc(used-43, and-54)
case(asphalt-56, for-55)
dep(reality-37, asphalt-56)
conj:and(used-43, asphalt-56)
acl(asphalt-56, laying-57)
case(constituencies-60, in-58)
det(constituencies-60, the-59)
nmod:in(laying-57, constituencies-60)
case(members-62, of-61)
nmod:of(constituencies-60, members-62)
case(government-65, of-63)
det(government-65, the-64)
nmod:of(members-62, government-65)
punct(grow-3, .-66)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#patients

die :: Others continue to die in unsuccessful attempts to escape the East ./.
nsubj(continue-2, Others-1)
nsubj:xsubj(die-4, Others-1)
root(ROOT-0, continue-2)
mark(die-4, to-3)
xcomp(continue-2, die-4)
case(attempts-7, in-5)
amod(attempts-7, unsuccessful-6)
nmod:in(die-4, attempts-7)
mark(escape-9, to-8)
acl(attempts-7, escape-9)
det(East-11, the-10)
dobj(escape-9, East-11)
punct(continue-2, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: die#others

dissolve :: In the extreme we have revolution , where the existing social contract is dissolved ./.
case(extreme-3, In-1)
det(extreme-3, the-2)
nmod:in(have-5, extreme-3)
nsubj(have-5, we-4)
root(ROOT-0, have-5)
dobj(have-5, revolution-6)
punct(revolution-6, ,-7)
advmod(dissolved-14, where-8)
det(contract-12, the-9)
amod(contract-12, existing-10)
amod(contract-12, social-11)
nsubjpass(dissolved-14, contract-12)
auxpass(dissolved-14, is-13)
acl:relcl(revolution-6, dissolved-14)
punct(have-5, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#contract

dissolve :: Puma spokesman Uto Duethorn said Mr. Becker and Puma mutually agreed to dissolve the agreement this month ./.
compound(Duethorn-4, Puma-1)
compound(Duethorn-4, spokesman-2)
compound(Duethorn-4, Uto-3)
nsubj(said-5, Duethorn-4)
root(ROOT-0, said-5)
compound(Becker-7, Mr.-6)
nsubj(agreed-11, Becker-7)
nsubj:xsubj(dissolve-13, Becker-7)
cc(Becker-7, and-8)
conj:and(Becker-7, Puma-9)
nsubj(agreed-11, Puma-9)
nsubj:xsubj(dissolve-13, Puma-9)
advmod(agreed-11, mutually-10)
ccomp(said-5, agreed-11)
mark(dissolve-13, to-12)
xcomp(agreed-11, dissolve-13)
det(agreement-15, the-14)
dobj(dissolve-13, agreement-15)
det(month-17, this-16)
nmod:tmod(dissolve-13, month-17)
punct(said-5, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#agreement

dissolve :: So , as the team investigating the disaster homed in on two top generals , on May 27 President Zia dissolved the civilian side of the government , alleging the civilians were corrupt and that Pakistan needed more religion ./.
advmod(corrupt-33, So-1)
punct(corrupt-33, ,-2)
mark(dissolved-21, as-3)
det(team-5, the-4)
nsubj(dissolved-21, team-5)
acl(team-5, investigating-6)
det(disaster-8, the-7)
dobj(investigating-6, disaster-8)
acl(disaster-8, homed-9)
case(generals-14, in-10)
case(generals-14, on-11)
nummod(generals-14, two-12)
amod(generals-14, top-13)
nmod:on(homed-9, generals-14)
punct(team-5, ,-15)
case(May-17, on-16)
nmod:on(dissolved-21, May-17)
nummod(May-17, 27-18)
compound(Zia-20, President-19)
nsubj(dissolved-21, Zia-20)
advcl(corrupt-33, dissolved-21)
det(side-24, the-22)
amod(side-24, civilian-23)
dobj(dissolved-21, side-24)
case(government-27, of-25)
det(government-27, the-26)
nmod:of(side-24, government-27)
punct(corrupt-33, ,-28)
csubj(corrupt-33, alleging-29)
det(civilians-31, the-30)
dobj(alleging-29, civilians-31)
cop(corrupt-33, were-32)
root(ROOT-0, corrupt-33)
cc(corrupt-33, and-34)
mark(needed-37, that-35)
nsubj(needed-37, Pakistan-36)
conj:and(corrupt-33, needed-37)
amod(religion-39, more-38)
dobj(needed-37, religion-39)
punct(corrupt-33, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#government

dissolve :: The Ukrainian Autocephalous Orthodox Church was formally dissolved by Moscow in January 1930 ./.
det(Church-5, The-1)
amod(Church-5, Ukrainian-2)
amod(Church-5, Autocephalous-3)
compound(Church-5, Orthodox-4)
nsubjpass(dissolved-8, Church-5)
auxpass(dissolved-8, was-6)
advmod(dissolved-8, formally-7)
root(ROOT-0, dissolved-8)
case(Moscow-10, by-9)
nmod:agent(dissolved-8, Moscow-10)
case(January-12, in-11)
nmod:in(dissolved-8, January-12)
nummod(January-12, 1930-13)
punct(dissolved-8, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#church

dissolve :: `` Of course , the bondholders will have to ask: Is dissolving the company better than reorganization ? ''/''
punct(have-8, ``-1)
case(course-3, Of-2)
nmod:of(have-8, course-3)
punct(have-8, ,-4)
det(bondholders-6, the-5)
nsubj(have-8, bondholders-6)
nsubj:xsubj(ask-10, bondholders-6)
aux(have-8, will-7)
root(ROOT-0, have-8)
mark(ask-10, to-9)
xcomp(have-8, ask-10)
punct(have-8, :-11)
aux(dissolving-13, Is-12)
parataxis(have-8, dissolving-13)
det(company-15, the-14)
dobj(dissolving-13, company-15)
advmod(dissolving-13, better-16)
case(reorganization-18, than-17)
nmod:than(better-16, reorganization-18)
punct(dissolving-13, ?-19)
punct(have-8, ''-20)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: dissolve#company

dissolve :: Tennis Lady said that after the sale it expects to `` dissolve the company or invest in new businesses . ''/''
compound(Lady-2, Tennis-1)
nsubj(said-3, Lady-2)
root(ROOT-0, said-3)
mark(expects-9, that-4)
case(sale-7, after-5)
det(sale-7, the-6)
nmod:after(expects-9, sale-7)
nsubj(expects-9, it-8)
nsubj:xsubj(dissolve-12, it-8)
ccomp(said-3, expects-9)
mark(dissolve-12, to-10)
punct(dissolve-12, ``-11)
xcomp(expects-9, dissolve-12)
det(company-14, the-13)
dobj(dissolve-12, company-14)
cc(dissolve-12, or-15)
xcomp(expects-9, invest-16)
conj:or(dissolve-12, invest-16)
case(businesses-19, in-17)
amod(businesses-19, new-18)
nmod:in(invest-16, businesses-19)
punct(said-3, .-20)
punct(said-3, ''-21)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: dissolve#company

dissolve :: He acknowledges that some will see this as a threat to freedom , but he soothes: `` Liberation , however , comes in various forms , either by overthrowing the external compulsion or dissolving the inward objection through a change of will , through sublimation . ''/''
nsubj(acknowledges-2, He-1)
root(ROOT-0, acknowledges-2)
mark(see-6, that-3)
nsubj(see-6, some-4)
aux(see-6, will-5)
ccomp(acknowledges-2, see-6)
dobj(see-6, this-7)
case(threat-10, as-8)
det(threat-10, a-9)
nmod:as(see-6, threat-10)
case(freedom-12, to-11)
nmod:to(threat-10, freedom-12)
punct(acknowledges-2, ,-13)
cc(acknowledges-2, but-14)
nsubj(soothes-16, he-15)
conj:but(acknowledges-2, soothes-16)
punct(soothes-16, :-17)
punct(soothes-16, ``-18)
nsubj(comes-23, Liberation-19)
punct(comes-23, ,-20)
advmod(comes-23, however-21)
punct(comes-23, ,-22)
ccomp(soothes-16, comes-23)
case(forms-26, in-24)
amod(forms-26, various-25)
nmod:in(comes-23, forms-26)
punct(comes-23, ,-27)
cc:preconj(overthrowing-30, either-28)
mark(overthrowing-30, by-29)
advcl(comes-23, overthrowing-30)
det(compulsion-33, the-31)
amod(compulsion-33, external-32)
dobj(overthrowing-30, compulsion-33)
cc(overthrowing-30, or-34)
advcl(comes-23, dissolving-35)
conj:or(overthrowing-30, dissolving-35)
det(objection-38, the-36)
amod(objection-38, inward-37)
dobj(dissolving-35, objection-38)
case(change-41, through-39)
det(change-41, a-40)
nmod:through(dissolving-35, change-41)
case(will-43, of-42)
nmod:of(change-41, will-43)
punct(overthrowing-30, ,-44)
case(sublimation-46, through-45)
nmod:through(overthrowing-30, sublimation-46)
punct(acknowledges-2, .-47)
punct(acknowledges-2, ''-48)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: dissolve#objection

dissolve :: And its matter-of-fact citizens are taking the long view-as befits a place where , in the words of Mr. Dyer 's Boonville history , `` past and present slowly dissolve one into the other . ''/''
cc(taking-6, And-1)
nmod:poss(citizens-4, its-2)
amod(citizens-4, matter-of-fact-3)
nsubj(taking-6, citizens-4)
aux(taking-6, are-5)
root(ROOT-0, taking-6)
det(befits-10, the-7)
amod(befits-10, long-8)
amod(befits-10, view-as-9)
dobj(taking-6, befits-10)
det(place-12, a-11)
dep(befits-10, place-12)
advmod(dissolve-30, where-13)
punct(dissolve-30, ,-14)
case(words-17, in-15)
det(words-17, the-16)
nmod:in(dissolve-30, words-17)
case(history-23, of-18)
compound(Dyer-20, Mr.-19)
nmod:poss(history-23, Dyer-20)
case(Dyer-20, 's-21)
compound(history-23, Boonville-22)
nmod:of(words-17, history-23)
punct(dissolve-30, ,-24)
punct(dissolve-30, ``-25)
nsubj(dissolve-30, past-26)
cc(past-26, and-27)
conj:and(past-26, present-28)
nsubj(dissolve-30, present-28)
advmod(dissolve-30, slowly-29)
acl:relcl(place-12, dissolve-30)
dobj(dissolve-30, one-31)
case(other-34, into-32)
det(other-34, the-33)
nmod:into(dissolve-30, other-34)
punct(taking-6, .-35)
punct(taking-6, ''-36)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: dissolve#one

dissolve :: This relationship will be characterized by caution and hard-nosed realism about mutual interests , say Soviet and Chinese officials , rather than by the euphoria and stifling closeness of the past that dissolved into suspicion and then bitter border clashes in the l960s ./.
det(relationship-2, This-1)
nsubjpass(characterized-5, relationship-2)
aux(characterized-5, will-3)
auxpass(characterized-5, be-4)
ccomp(say-15, characterized-5)
case(caution-7, by-6)
nmod:agent(characterized-5, caution-7)
cc(caution-7, and-8)
amod(realism-10, hard-nosed-9)
nmod:agent(characterized-5, realism-10)
conj:and(caution-7, realism-10)
case(interests-13, about-11)
amod(interests-13, mutual-12)
nmod:about(caution-7, interests-13)
punct(say-15, ,-14)
root(ROOT-0, say-15)
amod(officials-19, Soviet-16)
cc(Soviet-16, and-17)
conj:and(Soviet-16, Chinese-18)
amod(officials-19, Chinese-18)
nsubj(say-15, officials-19)
nsubj(dissolved-33, officials-19)
punct(officials-19, ,-20)
case(euphoria-25, rather-21)
mwe(rather-21, than-22)
case(euphoria-25, by-23)
det(euphoria-25, the-24)
nmod:rather_than(officials-19, euphoria-25)
cc(euphoria-25, and-26)
amod(closeness-28, stifling-27)
nmod:rather_than(officials-19, closeness-28)
conj:and(euphoria-25, closeness-28)
case(past-31, of-29)
det(past-31, the-30)
nmod:of(closeness-28, past-31)
ref(officials-19, that-32)
acl:relcl(officials-19, dissolved-33)
case(suspicion-35, into-34)
nmod:into(dissolved-33, suspicion-35)
cc(dissolved-33, and-36)
advmod(bitter-38, then-37)
amod(clashes-40, bitter-38)
compound(clashes-40, border-39)
acl:relcl(officials-19, clashes-40)
conj:and(dissolved-33, clashes-40)
case(l960s-43, in-41)
det(l960s-43, the-42)
nmod:in(clashes-40, l960s-43)
punct(say-15, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#officials

dissolve :: The lower court had enjoined the effect of its decision , pending the appeal , but the appeals court dissolved the injunction ./.
det(court-3, The-1)
amod(court-3, lower-2)
nsubj(enjoined-5, court-3)
aux(enjoined-5, had-4)
root(ROOT-0, enjoined-5)
det(effect-7, the-6)
dobj(enjoined-5, effect-7)
case(decision-10, of-8)
nmod:poss(decision-10, its-9)
nmod:of(effect-7, decision-10)
punct(enjoined-5, ,-11)
case(appeal-14, pending-12)
det(appeal-14, the-13)
nmod:pending(enjoined-5, appeal-14)
punct(enjoined-5, ,-15)
cc(enjoined-5, but-16)
det(court-19, the-17)
compound(court-19, appeals-18)
nsubj(dissolved-20, court-19)
conj:but(enjoined-5, dissolved-20)
det(injunction-22, the-21)
dobj(dissolved-20, injunction-22)
punct(enjoined-5, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#injunction

dissolve :: Many doubt those ties will ever dissolve , and wonder how lasting the Thatcher Revolution will prove ./.
amod(doubt-2, Many-1)
dobj(dissolve-7, doubt-2)
det(ties-4, those-3)
nsubj(dissolve-7, ties-4)
nsubj(wonder-10, ties-4)
aux(dissolve-7, will-5)
advmod(dissolve-7, ever-6)
root(ROOT-0, dissolve-7)
punct(dissolve-7, ,-8)
cc(dissolve-7, and-9)
conj:and(dissolve-7, wonder-10)
advmod(lasting-12, how-11)
dep(prove-17, lasting-12)
det(Revolution-15, the-13)
compound(Revolution-15, Thatcher-14)
nsubj(prove-17, Revolution-15)
aux(prove-17, will-16)
ccomp(wonder-10, prove-17)
punct(dissolve-7, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#doubt

dissolve :: But in the intervening years , so much criticism has been poured upon Chamberlain 's failed policies that they have dissolved into caricature ./.
cc(poured-12, But-1)
case(years-5, in-2)
det(years-5, the-3)
amod(years-5, intervening-4)
nmod:in(poured-12, years-5)
punct(poured-12, ,-6)
advmod(much-8, so-7)
amod(criticism-9, much-8)
nsubjpass(poured-12, criticism-9)
aux(poured-12, has-10)
auxpass(poured-12, been-11)
root(ROOT-0, poured-12)
case(policies-17, upon-13)
nmod:poss(policies-17, Chamberlain-14)
case(Chamberlain-14, 's-15)
amod(policies-17, failed-16)
nmod:upon(poured-12, policies-17)
dobj(dissolved-21, policies-17)
ref(policies-17, that-18)
nsubj(dissolved-21, they-19)
aux(dissolved-21, have-20)
acl:relcl(policies-17, dissolved-21)
case(caricature-23, into-22)
nmod:into(dissolved-21, caricature-23)
punct(poured-12, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#policies

dissolve :: Afterward , Enrique `` Quique '' Galarza , Cojunto 's lively , goateed , 40-ish lead singer , explained that he and his colleagues recently dissolved a pre-existing group and started Cojunto , so they do n't have any home turf dates either ./.
advmod(explained-19, Afterward-1)
punct(explained-19, ,-2)
compound(Galarza-7, Enrique-3)
punct(Galarza-7, ``-4)
compound(Galarza-7, Quique-5)
punct(Galarza-7, ''-6)
nsubj(explained-19, Galarza-7)
punct(Galarza-7, ,-8)
nmod:poss(singer-17, Cojunto-9)
case(Cojunto-9, 's-10)
amod(singer-17, lively-11)
punct(lively-11, ,-12)
dep(lively-11, goateed-13)
punct(lively-11, ,-14)
dep(lively-11, 40-ish-15)
compound(singer-17, lead-16)
appos(Galarza-7, singer-17)
punct(Galarza-7, ,-18)
root(ROOT-0, explained-19)
mark(dissolved-26, that-20)
nsubj(dissolved-26, he-21)
nsubj(started-31, he-21)
cc(he-21, and-22)
nmod:poss(colleagues-24, his-23)
conj:and(he-21, colleagues-24)
nsubj(dissolved-26, colleagues-24)
advmod(dissolved-26, recently-25)
ccomp(explained-19, dissolved-26)
det(group-29, a-27)
amod(group-29, pre-existing-28)
dobj(dissolved-26, group-29)
cc(dissolved-26, and-30)
ccomp(explained-19, started-31)
conj:and(dissolved-26, started-31)
dobj(started-31, Cojunto-32)
punct(dissolved-26, ,-33)
mark(have-38, so-34)
nsubj(have-38, they-35)
aux(have-38, do-36)
neg(have-38, n't-37)
advcl(dissolved-26, have-38)
det(dates-42, any-39)
compound(dates-42, home-40)
compound(dates-42, turf-41)
dobj(have-38, dates-42)
advmod(have-38, either-43)
punct(explained-19, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#group

dissolve :: This was one of the lesser-known reasons why President Zia abruptly dismissed the whole cabinet and dissolved the national assembly on May 29 ./.
nsubj(one-3, This-1)
cop(one-3, was-2)
root(ROOT-0, one-3)
case(reasons-7, of-4)
det(reasons-7, the-5)
amod(reasons-7, lesser-known-6)
nmod:of(one-3, reasons-7)
advmod(dismissed-12, why-8)
compound(Zia-10, President-9)
nsubj(dismissed-12, Zia-10)
nsubj(dissolved-17, Zia-10)
advmod(dismissed-12, abruptly-11)
acl:relcl(reasons-7, dismissed-12)
det(cabinet-15, the-13)
amod(cabinet-15, whole-14)
dobj(dismissed-12, cabinet-15)
cc(dismissed-12, and-16)
acl:relcl(reasons-7, dissolved-17)
conj:and(dismissed-12, dissolved-17)
det(assembly-20, the-18)
amod(assembly-20, national-19)
dobj(dissolved-17, assembly-20)
case(May-22, on-21)
nmod:on(dissolved-17, May-22)
nummod(May-22, 29-23)
punct(one-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#assembly

dissolve :: The appeals court 's decision affirmed sanctions of $ 50 , 000 against Ray L. LeFlore and $ 50 , 000 against his former law firm , Pavelic & LeFlore , which was dissolved in 1986 after U.S. District Judge Robert W. Sweet imposed the sanctions ./.
det(court-3, The-1)
compound(court-3, appeals-2)
nmod:poss(decision-5, court-3)
case(court-3, 's-4)
nsubj(affirmed-6, decision-5)
root(ROOT-0, affirmed-6)
dobj(affirmed-6, sanctions-7)
case(50-10, of-8)
dep(50-10, $-9)
nmod:of(sanctions-7, 50-10)
punct(50-10, ,-11)
nmod:of(sanctions-7, 000-12)
conj:and(50-10, 000-12)
case(LeFlore-16, against-13)
compound(LeFlore-16, Ray-14)
compound(LeFlore-16, L.-15)
nmod:against(000-12, LeFlore-16)
cc(50-10, and-17)
dep(50-19, $-18)
nmod:of(sanctions-7, 50-19)
conj:and(50-10, 50-19)
punct(50-10, ,-20)
appos(50-10, 000-21)
case(firm-26, against-22)
nmod:poss(firm-26, his-23)
amod(firm-26, former-24)
compound(firm-26, law-25)
nmod:against(000-21, firm-26)
nsubjpass(dissolved-34, firm-26)
punct(firm-26, ,-27)
appos(firm-26, Pavelic-28)
cc(Pavelic-28, &-29)
appos(firm-26, LeFlore-30)
conj:&(Pavelic-28, LeFlore-30)
punct(firm-26, ,-31)
ref(firm-26, which-32)
auxpass(dissolved-34, was-33)
acl:relcl(firm-26, dissolved-34)
case(1986-36, in-35)
nmod:in(dissolved-34, 1986-36)
mark(imposed-44, after-37)
compound(Sweet-43, U.S.-38)
compound(Sweet-43, District-39)
compound(Sweet-43, Judge-40)
compound(Sweet-43, Robert-41)
compound(Sweet-43, W.-42)
nsubj(imposed-44, Sweet-43)
advcl(dissolved-34, imposed-44)
det(sanctions-46, the-45)
dobj(imposed-44, sanctions-46)
punct(affirmed-6, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#firm

dissolve :: Cannons Engineering , a closely held concern that was convicted several years ago for criminally falsifying incinerator reports it filed with the state of Massachusetts , was dissolved as a corporation , EPA officials said , but has been technically `` revived '' for purposes of litigation ./.
compound(Engineering-2, Cannons-1)
nsubjpass(dissolved-28, Engineering-2)
nsubjpass(revived-42, Engineering-2)
punct(Engineering-2, ,-3)
det(concern-7, a-4)
advmod(held-6, closely-5)
amod(concern-7, held-6)
appos(Engineering-2, concern-7)
nsubjpass(convicted-10, concern-7)
ref(concern-7, that-8)
auxpass(convicted-10, was-9)
acl:relcl(concern-7, convicted-10)
amod(years-12, several-11)
nmod:npmod(ago-13, years-12)
advmod(convicted-10, ago-13)
mark(falsifying-16, for-14)
advmod(falsifying-16, criminally-15)
advcl(convicted-10, falsifying-16)
compound(reports-18, incinerator-17)
dobj(falsifying-16, reports-18)
nsubj(filed-20, it-19)
acl:relcl(reports-18, filed-20)
case(state-23, with-21)
det(state-23, the-22)
nmod:with(filed-20, state-23)
case(Massachusetts-25, of-24)
nmod:of(state-23, Massachusetts-25)
punct(Engineering-2, ,-26)
auxpass(dissolved-28, was-27)
root(ROOT-0, dissolved-28)
case(corporation-31, as-29)
det(corporation-31, a-30)
nmod:as(dissolved-28, corporation-31)
punct(said-35, ,-32)
compound(officials-34, EPA-33)
nsubj(said-35, officials-34)
dep(dissolved-28, said-35)
punct(said-35, ,-36)
cc(dissolved-28, but-37)
aux(revived-42, has-38)
auxpass(revived-42, been-39)
advmod(revived-42, technically-40)
punct(revived-42, ``-41)
conj:but(dissolved-28, revived-42)
punct(revived-42, ''-43)
case(purposes-45, for-44)
nmod:for(revived-42, purposes-45)
case(litigation-47, of-46)
nmod:of(purposes-45, litigation-47)
punct(dissolved-28, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#engineering

dissolve :: Yet when Mr. Blackwell asked Ms. Pfeiffer to relinquish her title to Cary Brokaw , the man she 'd hired to run marketing and distribution , she preferred to see the company dissolve ./.
advmod(preferred-28, Yet-1)
advmod(asked-5, when-2)
compound(Blackwell-4, Mr.-3)
nsubj(asked-5, Blackwell-4)
advcl(preferred-28, asked-5)
compound(Pfeiffer-7, Ms.-6)
dobj(asked-5, Pfeiffer-7)
nsubj:xsubj(relinquish-9, Pfeiffer-7)
mark(relinquish-9, to-8)
xcomp(asked-5, relinquish-9)
nmod:poss(title-11, her-10)
dobj(relinquish-9, title-11)
case(Brokaw-14, to-12)
compound(Brokaw-14, Cary-13)
nmod:to(relinquish-9, Brokaw-14)
punct(Brokaw-14, ,-15)
det(man-17, the-16)
appos(Brokaw-14, man-17)
nsubj(hired-20, she-18)
nsubj:xsubj(run-22, she-18)
aux(hired-20, 'd-19)
acl:relcl(man-17, hired-20)
mark(run-22, to-21)
xcomp(hired-20, run-22)
dobj(run-22, marketing-23)
cc(marketing-23, and-24)
dobj(run-22, distribution-25)
conj:and(marketing-23, distribution-25)
punct(preferred-28, ,-26)
nsubj(preferred-28, she-27)
nsubj:xsubj(see-30, she-27)
root(ROOT-0, preferred-28)
mark(see-30, to-29)
xcomp(preferred-28, see-30)
det(company-32, the-31)
nsubj(dissolve-33, company-32)
ccomp(see-30, dissolve-33)
punct(preferred-28, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#company

dissolve :: We can also see dissolving a central tenet of those who 've long argued that the large budget and trade deficits of the Reagan years have left the U.S. economy tottering on the edge of ruin ./.
nsubj(see-4, We-1)
aux(see-4, can-2)
advmod(see-4, also-3)
root(ROOT-0, see-4)
xcomp(see-4, dissolving-5)
det(tenet-8, a-6)
amod(tenet-8, central-7)
dobj(dissolving-5, tenet-8)
case(those-10, of-9)
nmod:of(tenet-8, those-10)
nsubj(argued-14, those-10)
ref(those-10, who-11)
aux(argued-14, 've-12)
advmod(argued-14, long-13)
acl:relcl(those-10, argued-14)
mark(left-27, that-15)
det(budget-18, the-16)
amod(budget-18, large-17)
nsubj(left-27, budget-18)
cc(budget-18, and-19)
compound(deficits-21, trade-20)
conj:and(budget-18, deficits-21)
nsubj(left-27, deficits-21)
case(years-25, of-22)
det(years-25, the-23)
compound(years-25, Reagan-24)
nmod:of(budget-18, years-25)
aux(left-27, have-26)
ccomp(argued-14, left-27)
det(economy-30, the-28)
compound(economy-30, U.S.-29)
nsubj(tottering-31, economy-30)
dep(left-27, tottering-31)
case(edge-34, on-32)
det(edge-34, the-33)
nmod:on(tottering-31, edge-34)
case(ruin-36, of-35)
nmod:of(edge-34, ruin-36)
punct(see-4, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#those

dissolve :: Four years later he dissolved Parliament , which 13 years after that stripped him of power ./.
nummod(years-2, Four-1)
nmod:npmod(later-3, years-2)
advmod(dissolved-5, later-3)
nsubj(dissolved-5, he-4)
root(ROOT-0, dissolved-5)
dobj(dissolved-5, Parliament-6)
punct(Parliament-6, ,-7)
appos(Parliament-6, which-8)
nummod(years-10, 13-9)
nmod:after(which-8, years-10)
case(years-10, after-11)
nsubj(stripped-13, that-12)
dep(years-10, stripped-13)
dobj(stripped-13, him-14)
case(power-16, of-15)
nmod:of(stripped-13, power-16)
punct(dissolved-5, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#parliament

dissolve :: The Suez group has said it will dissolve the Belgian company 's current 23-member board and create a two-tier management , with a chief executive running day-to-day operations and a management committee that defines strategy ./.
det(group-3, The-1)
compound(group-3, Suez-2)
nsubj(said-5, group-3)
aux(said-5, has-4)
root(ROOT-0, said-5)
nsubj(dissolve-8, it-6)
nsubj(create-17, it-6)
aux(dissolve-8, will-7)
ccomp(said-5, dissolve-8)
det(company-11, the-9)
amod(company-11, Belgian-10)
nmod:poss(board-15, company-11)
case(company-11, 's-12)
amod(board-15, current-13)
amod(board-15, 23-member-14)
dobj(dissolve-8, board-15)
cc(dissolve-8, and-16)
ccomp(said-5, create-17)
conj:and(dissolve-8, create-17)
det(management-20, a-18)
amod(management-20, two-tier-19)
dobj(create-17, management-20)
punct(dissolve-8, ,-21)
mark(running-26, with-22)
det(executive-25, a-23)
amod(executive-25, chief-24)
nsubj(running-26, executive-25)
advcl(dissolve-8, running-26)
amod(operations-28, day-to-day-27)
dobj(running-26, operations-28)
cc(running-26, and-29)
det(committee-32, a-30)
compound(committee-32, management-31)
advcl(dissolve-8, committee-32)
conj:and(running-26, committee-32)
nsubj(defines-34, committee-32)
ref(committee-32, that-33)
acl:relcl(committee-32, defines-34)
dobj(defines-34, strategy-35)
punct(said-5, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#board

dissolve :: An initially orderly crowd dissolves into a melee of people swapping pins , Frisbees , and bubble gum ./.
det(crowd-4, An-1)
advmod(orderly-3, initially-2)
amod(crowd-4, orderly-3)
nsubj(dissolves-5, crowd-4)
root(ROOT-0, dissolves-5)
case(melee-8, into-6)
det(melee-8, a-7)
nmod:into(dissolves-5, melee-8)
case(people-10, of-9)
nmod:of(melee-8, people-10)
acl(people-10, swapping-11)
dobj(swapping-11, pins-12)
punct(pins-12, ,-13)
dobj(swapping-11, Frisbees-14)
conj:and(pins-12, Frisbees-14)
punct(pins-12, ,-15)
cc(pins-12, and-16)
compound(gum-18, bubble-17)
dobj(swapping-11, gum-18)
conj:and(pins-12, gum-18)
punct(dissolves-5, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#crowd

dissolve :: The paved highway abruptly turns into a dirt road , and South Africa , without warning , dissolves into Bophuthatswana ./.
det(highway-3, The-1)
amod(highway-3, paved-2)
nsubj(turns-5, highway-3)
advmod(turns-5, abruptly-4)
root(ROOT-0, turns-5)
case(road-9, into-6)
det(road-9, a-7)
compound(road-9, dirt-8)
nmod:into(turns-5, road-9)
punct(turns-5, ,-10)
cc(turns-5, and-11)
compound(Africa-13, South-12)
nsubj(dissolves-18, Africa-13)
punct(dissolves-18, ,-14)
case(warning-16, without-15)
nmod:without(dissolves-18, warning-16)
punct(dissolves-18, ,-17)
conj:and(turns-5, dissolves-18)
case(Bophuthatswana-20, into-19)
nmod:into(dissolves-18, Bophuthatswana-20)
punct(turns-5, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#africa

dissolve :: The lighting is cool throughout ; the sets are wispily painted scenes of trees and a castle , which dissolve easily from exteriors to interiors ./.
det(lighting-2, The-1)
nsubj(cool-4, lighting-2)
cop(cool-4, is-3)
root(ROOT-0, cool-4)
advmod(cool-4, throughout-5)
punct(cool-4, ;-6)
det(sets-8, the-7)
nsubjpass(painted-11, sets-8)
auxpass(painted-11, are-9)
advmod(painted-11, wispily-10)
parataxis(cool-4, painted-11)
dobj(painted-11, scenes-12)
case(trees-14, of-13)
nmod:of(scenes-12, trees-14)
cc(scenes-12, and-15)
det(castle-17, a-16)
dobj(painted-11, castle-17)
conj:and(scenes-12, castle-17)
nsubj(dissolve-20, castle-17)
punct(castle-17, ,-18)
ref(castle-17, which-19)
acl:relcl(castle-17, dissolve-20)
advmod(dissolve-20, easily-21)
case(exteriors-23, from-22)
nmod:from(dissolve-20, exteriors-23)
case(interiors-25, to-24)
nmod:to(exteriors-23, interiors-25)
punct(cool-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#castle

dissolve :: Last week after months of litigation , the company was dissolved , and the trademark was sold for $ 8 million to a Stamford , Conn . , investment firm ./.
amod(week-2, Last-1)
nmod:tmod(dissolved-11, week-2)
case(months-4, after-3)
nmod:after(week-2, months-4)
case(litigation-6, of-5)
nmod:of(months-4, litigation-6)
punct(dissolved-11, ,-7)
det(company-9, the-8)
nsubjpass(dissolved-11, company-9)
auxpass(dissolved-11, was-10)
root(ROOT-0, dissolved-11)
punct(dissolved-11, ,-12)
cc(dissolved-11, and-13)
det(trademark-15, the-14)
nsubjpass(sold-17, trademark-15)
auxpass(sold-17, was-16)
conj:and(dissolved-11, sold-17)
case($-19, for-18)
nmod:for(sold-17, $-19)
compound(million-21, 8-20)
nummod($-19, million-21)
nmod(sold-17, to-22)
root(to-22, a-23)
root(a-23, Stamford-24)
punct(Stamford-24, ,-25)
appos(Stamford-24, Conn-26)
punct(Stamford-24, .-27)
punct(firm-3, ,-1)
compound(firm-3, investment-2)
root(ROOT-0, firm-3)
punct(firm-3, .-4)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#company

dissolve :: Last week after months of litigation , the company was officially dissolved , and the trademark was sold for $ 8 million to a Stamford , Conn . , investment firm ./.
amod(week-2, Last-1)
nmod:tmod(dissolved-12, week-2)
case(months-4, after-3)
nmod:after(week-2, months-4)
case(litigation-6, of-5)
nmod:of(months-4, litigation-6)
punct(dissolved-12, ,-7)
det(company-9, the-8)
nsubjpass(dissolved-12, company-9)
auxpass(dissolved-12, was-10)
advmod(dissolved-12, officially-11)
root(ROOT-0, dissolved-12)
punct(dissolved-12, ,-13)
cc(dissolved-12, and-14)
det(trademark-16, the-15)
nsubjpass(sold-18, trademark-16)
auxpass(sold-18, was-17)
conj:and(dissolved-12, sold-18)
case($-20, for-19)
nmod:for(sold-18, $-20)
compound(million-22, 8-21)
nummod($-20, million-22)
nmod(sold-18, to-23)
root(to-23, a-24)
root(a-24, Stamford-25)
punct(Stamford-25, ,-26)
appos(Stamford-25, Conn-27)
punct(Stamford-25, .-28)
punct(firm-3, ,-1)
compound(firm-3, investment-2)
root(ROOT-0, firm-3)
punct(firm-3, .-4)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#company

dissolve :: Mitterrand dissolved parliament Saturday ./.
nsubj(dissolved-2, Mitterrand-1)
root(ROOT-0, dissolved-2)
compound(Saturday-4, parliament-3)
nmod:tmod(dissolved-2, Saturday-4)
punct(dissolved-2, .-5)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#mitterrand

dissolve :: Most American cities show to their best advantage when seen from a height or a distance , at a point where the ugliness of the buildings dissolves into the beauty of an abstraction ./.
amod(cities-3, Most-1)
amod(cities-3, American-2)
nsubj(show-4, cities-3)
root(ROOT-0, show-4)
case(advantage-8, to-5)
nmod:poss(advantage-8, their-6)
amod(advantage-8, best-7)
nmod:to(show-4, advantage-8)
advmod(seen-10, when-9)
advcl(show-4, seen-10)
case(height-13, from-11)
det(height-13, a-12)
nmod:from(seen-10, height-13)
cc(height-13, or-14)
det(distance-16, a-15)
nmod:from(seen-10, distance-16)
conj:or(height-13, distance-16)
punct(seen-10, ,-17)
case(point-20, at-18)
det(point-20, a-19)
nmod:at(seen-10, point-20)
advmod(dissolves-27, where-21)
det(ugliness-23, the-22)
nsubj(dissolves-27, ugliness-23)
case(buildings-26, of-24)
det(buildings-26, the-25)
nmod:of(ugliness-23, buildings-26)
acl:relcl(point-20, dissolves-27)
case(beauty-30, into-28)
det(beauty-30, the-29)
nmod:into(dissolves-27, beauty-30)
case(abstraction-33, of-31)
det(abstraction-33, an-32)
nmod:of(beauty-30, abstraction-33)
punct(show-4, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#ugliness

dissolve :: Mr. Donovan was fired and the OSS dissolved by presidential order well before the Nuremberg trials came under way ./.
compound(Donovan-2, Mr.-1)
nsubjpass(fired-4, Donovan-2)
auxpass(fired-4, was-3)
root(ROOT-0, fired-4)
cc(fired-4, and-5)
det(OSS-7, the-6)
nsubj(came-17, OSS-7)
acl(OSS-7, dissolved-8)
case(order-11, by-9)
amod(order-11, presidential-10)
nmod:by(dissolved-8, order-11)
advmod(came-17, well-12)
mark(came-17, before-13)
det(trials-16, the-14)
compound(trials-16, Nuremberg-15)
nsubj(came-17, trials-16)
conj:and(fired-4, came-17)
case(way-19, under-18)
nmod:under(came-17, way-19)
punct(fired-4, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#order

dissolve :: And Ronnie Graham was so hip a laid-back comic that sometimes he did n't have to say a word to have the audience dissolve in laughter ./.
cc(hip-6, And-1)
compound(Graham-3, Ronnie-2)
nsubj(hip-6, Graham-3)
cop(hip-6, was-4)
advmod(hip-6, so-5)
root(ROOT-0, hip-6)
det(comic-9, a-7)
amod(comic-9, laid-back-8)
dobj(hip-6, comic-9)
nsubj(have-15, comic-9)
nsubj:xsubj(say-17, comic-9)
ref(comic-9, that-10)
advmod(have-15, sometimes-11)
nsubj(have-15, he-12)
nsubj:xsubj(say-17, he-12)
aux(have-15, did-13)
neg(have-15, n't-14)
acl:relcl(comic-9, have-15)
mark(say-17, to-16)
xcomp(have-15, say-17)
det(word-19, a-18)
dobj(say-17, word-19)
mark(have-21, to-20)
acl(word-19, have-21)
det(audience-23, the-22)
nsubj(dissolve-24, audience-23)
ccomp(have-21, dissolve-24)
case(laughter-26, in-25)
nmod:in(dissolve-24, laughter-26)
punct(hip-6, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#audience

dissolve :: One result: Mr. Bushkin 's law firm here plans to dissolve ; much of its business was Carson-related ./.
nummod(result-2, One-1)
root(ROOT-0, result-2)
punct(result-2, :-3)
compound(Bushkin-5, Mr.-4)
nmod:poss(firm-8, Bushkin-5)
case(Bushkin-5, 's-6)
compound(firm-8, law-7)
nsubj(plans-10, firm-8)
nsubj:xsubj(dissolve-12, firm-8)
advmod(firm-8, here-9)
dep(result-2, plans-10)
mark(dissolve-12, to-11)
xcomp(plans-10, dissolve-12)
punct(plans-10, ;-13)
nsubj(Carson-related-19, much-14)
case(business-17, of-15)
nmod:poss(business-17, its-16)
nmod:of(much-14, business-17)
cop(Carson-related-19, was-18)
parataxis(plans-10, Carson-related-19)
punct(result-2, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#firm

dissolve :: Jamie Securities Inc . , once one of Wall Street 's most powerful arbitrage firms , is dissolving because of the continuing legal problems of John A. Mulheren Jr . , its managing partner arrested for allegedly threatening to kill insider trader Ivan F. Boesky ./.
compound(Inc-3, Jamie-1)
compound(Inc-3, Securities-2)
root(ROOT-0, Inc-3)
punct(Inc-3, .-4)
punct(firms-11, ,-1)
advmod(one-3, once-2)
nsubj(firms-11, one-3)
case(Street-6, of-4)
compound(Street-6, Wall-5)
nmod:of(one-3, Street-6)
cop(firms-11, 's-7)
advmod(powerful-9, most-8)
amod(firms-11, powerful-9)
compound(firms-11, arbitrage-10)
dep(dissolving-14, firms-11)
punct(firms-11, ,-12)
aux(dissolving-14, is-13)
root(ROOT-0, dissolving-14)
case(problems-20, because-15)
mwe(because-15, of-16)
det(problems-20, the-17)
amod(problems-20, continuing-18)
amod(problems-20, legal-19)
nmod:because_of(dissolving-14, problems-20)
case(Jr-25, of-21)
compound(Jr-25, John-22)
compound(Jr-25, A.-23)
compound(Jr-25, Mulheren-24)
nmod:of(problems-20, Jr-25)
punct(dissolving-14, .-26)
punct(arrested-5, ,-1)
nmod:poss(partner-4, its-2)
compound(partner-4, managing-3)
nsubj(arrested-5, partner-4)
root(ROOT-0, arrested-5)
mark(threatening-8, for-6)
advmod(threatening-8, allegedly-7)
advcl(arrested-5, threatening-8)
mark(kill-10, to-9)
xcomp(threatening-8, kill-10)
compound(Boesky-15, insider-11)
compound(Boesky-15, trader-12)
compound(Boesky-15, Ivan-13)
compound(Boesky-15, F.-14)
dobj(kill-10, Boesky-15)
punct(arrested-5, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#problems

dissolve :: Jamie officials said that the firm already has discontinued all investment activities , but that a number of legal and administrative matters must be resolved before the firm and its parent , Caronan Partners , can be dissolved ./.
compound(officials-2, Jamie-1)
nsubj(said-3, officials-2)
root(ROOT-0, said-3)
mark(discontinued-9, that-4)
det(firm-6, the-5)
nsubj(discontinued-9, firm-6)
advmod(discontinued-9, already-7)
aux(discontinued-9, has-8)
ccomp(said-3, discontinued-9)
det(activities-12, all-10)
compound(activities-12, investment-11)
dobj(discontinued-9, activities-12)
punct(discontinued-9, ,-13)
cc(discontinued-9, but-14)
mark(resolved-25, that-15)
det(number-17, a-16)
nsubjpass(resolved-25, number-17)
case(matters-22, of-18)
amod(matters-22, legal-19)
cc(legal-19, and-20)
conj:and(legal-19, administrative-21)
amod(matters-22, administrative-21)
nmod:of(number-17, matters-22)
aux(resolved-25, must-23)
auxpass(resolved-25, be-24)
csubjpass(dissolved-38, resolved-25)
case(firm-28, before-26)
det(firm-28, the-27)
nmod:before(resolved-25, firm-28)
cc(firm-28, and-29)
nmod:poss(parent-31, its-30)
nmod:before(resolved-25, parent-31)
conj:and(firm-28, parent-31)
punct(parent-31, ,-32)
compound(Partners-34, Caronan-33)
appos(parent-31, Partners-34)
punct(parent-31, ,-35)
aux(dissolved-38, can-36)
auxpass(dissolved-38, be-37)
ccomp(said-3, dissolved-38)
conj:but(discontinued-9, dissolved-38)
punct(said-3, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#be

dissolve :: A state judge in Manhattan ordered White & Case to provide an accounting of the firm 's assets as of June 30 , the day lawyers in the firm voted to dissolve their partnership and re-form without longtime partner Evan R. Dawson ./.
det(judge-3, A-1)
compound(judge-3, state-2)
nsubj(ordered-6, judge-3)
case(Manhattan-5, in-4)
nmod:in(judge-3, Manhattan-5)
advcl(voted-30, ordered-6)
dobj(ordered-6, White-7)
nsubj:xsubj(provide-11, White-7)
cc(White-7, &-8)
dobj(ordered-6, Case-9)
conj:&(White-7, Case-9)
nsubj:xsubj(provide-11, Case-9)
mark(provide-11, to-10)
xcomp(ordered-6, provide-11)
det(accounting-13, an-12)
dobj(provide-11, accounting-13)
case(assets-18, of-14)
det(firm-16, the-15)
nmod:poss(assets-18, firm-16)
case(firm-16, 's-17)
nmod:of(accounting-13, assets-18)
case(June-21, as-19)
mwe(as-19, of-20)
nmod:as_of(provide-11, June-21)
nummod(June-21, 30-22)
punct(voted-30, ,-23)
det(lawyers-26, the-24)
compound(lawyers-26, day-25)
nsubj(voted-30, lawyers-26)
nsubj:xsubj(dissolve-32, lawyers-26)
case(firm-29, in-27)
det(firm-29, the-28)
nmod:in(lawyers-26, firm-29)
root(ROOT-0, voted-30)
mark(dissolve-32, to-31)
xcomp(voted-30, dissolve-32)
nmod:poss(partnership-34, their-33)
dobj(dissolve-32, partnership-34)
cc(partnership-34, and-35)
dobj(dissolve-32, re-form-36)
conj:and(partnership-34, re-form-36)
case(Dawson-42, without-37)
amod(Dawson-42, longtime-38)
compound(Dawson-42, partner-39)
compound(Dawson-42, Evan-40)
compound(Dawson-42, R.-41)
nmod:without(dissolve-32, Dawson-42)
punct(voted-30, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#partnership

dissolve :: In theory , the new technique should dissolve blood clots with less risk of bleeding occurring in other parts of the body , as can happen with current clot dissolvers ./.
case(theory-2, In-1)
nmod:in(dissolve-8, theory-2)
punct(dissolve-8, ,-3)
det(technique-6, the-4)
amod(technique-6, new-5)
nsubj(dissolve-8, technique-6)
aux(dissolve-8, should-7)
root(ROOT-0, dissolve-8)
compound(clots-10, blood-9)
dobj(dissolve-8, clots-10)
case(risk-13, with-11)
amod(risk-13, less-12)
nmod:with(dissolve-8, risk-13)
mark(bleeding-15, of-14)
acl(risk-13, bleeding-15)
dobj(bleeding-15, occurring-16)
case(parts-19, in-17)
amod(parts-19, other-18)
nmod:in(occurring-16, parts-19)
case(body-22, of-20)
det(body-22, the-21)
nmod:of(parts-19, body-22)
punct(dissolve-8, ,-23)
mark(happen-26, as-24)
aux(happen-26, can-25)
advcl(dissolve-8, happen-26)
case(dissolvers-30, with-27)
amod(dissolvers-30, current-28)
compound(dissolvers-30, clot-29)
nmod:with(happen-26, dissolvers-30)
punct(dissolve-8, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#clots

dissolve :: When dissolved in water , the protein acts as a catalyst to aid the freezing process by increasing the effective freezing point of water by 8 degrees to 10 degrees Fahrenheit ./.
advmod(dissolved-2, When-1)
advcl(acts-8, dissolved-2)
case(water-4, in-3)
nmod:in(dissolved-2, water-4)
punct(acts-8, ,-5)
det(protein-7, the-6)
nsubj(acts-8, protein-7)
nsubj:xsubj(aid-13, protein-7)
root(ROOT-0, acts-8)
case(catalyst-11, as-9)
det(catalyst-11, a-10)
nmod:as(acts-8, catalyst-11)
mark(aid-13, to-12)
xcomp(acts-8, aid-13)
det(process-16, the-14)
compound(process-16, freezing-15)
dobj(aid-13, process-16)
mark(increasing-18, by-17)
advcl(aid-13, increasing-18)
det(point-22, the-19)
amod(point-22, effective-20)
compound(point-22, freezing-21)
dobj(increasing-18, point-22)
case(water-24, of-23)
nmod:of(point-22, water-24)
case(degrees-27, by-25)
nummod(degrees-27, 8-26)
nmod:by(increasing-18, degrees-27)
case(Fahrenheit-31, to-28)
nummod(Fahrenheit-31, 10-29)
compound(Fahrenheit-31, degrees-30)
nmod:to(increasing-18, Fahrenheit-31)
punct(acts-8, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#water

dissolve :: And while TPA early showed itself far superior to streptokinase in dissolving deadly blood clots , that advantage has n't been transferred to the medical bottom line: better survival rates for patients ./.
cc(transferred-22, And-1)
mark(showed-5, while-2)
nsubj(showed-5, TPA-3)
advmod(showed-5, early-4)
advcl(transferred-22, showed-5)
dobj(showed-5, itself-6)
advmod(superior-8, far-7)
amod(itself-6, superior-8)
case(streptokinase-10, to-9)
nmod:to(superior-8, streptokinase-10)
mark(dissolving-12, in-11)
advcl(superior-8, dissolving-12)
amod(clots-15, deadly-13)
compound(clots-15, blood-14)
dobj(dissolving-12, clots-15)
punct(transferred-22, ,-16)
det(advantage-18, that-17)
nsubjpass(transferred-22, advantage-18)
aux(transferred-22, has-19)
neg(transferred-22, n't-20)
auxpass(transferred-22, been-21)
root(ROOT-0, transferred-22)
case(line-27, to-23)
det(line-27, the-24)
amod(line-27, medical-25)
amod(line-27, bottom-26)
nmod:to(transferred-22, line-27)
punct(transferred-22, :-28)
amod(rates-31, better-29)
compound(rates-31, survival-30)
dep(transferred-22, rates-31)
case(patients-33, for-32)
nmod:for(rates-31, patients-33)
punct(rates-31, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#clots

dissolve :: But some physicians questioned the effectiveness of the drug , designed to dissolve gallstones , and how widely it might be used ./.
cc(questioned-4, But-1)
det(physicians-3, some-2)
nsubj(questioned-4, physicians-3)
root(ROOT-0, questioned-4)
det(effectiveness-6, the-5)
dobj(questioned-4, effectiveness-6)
case(drug-9, of-7)
det(drug-9, the-8)
nmod:of(effectiveness-6, drug-9)
punct(drug-9, ,-10)
acl(drug-9, designed-11)
mark(dissolve-13, to-12)
xcomp(designed-11, dissolve-13)
dobj(dissolve-13, gallstones-14)
punct(questioned-4, ,-15)
cc(questioned-4, and-16)
advmod(widely-18, how-17)
advmod(used-22, widely-18)
nsubjpass(used-22, it-19)
aux(used-22, might-20)
auxpass(used-22, be-21)
conj:but(questioned-4, used-22)
punct(questioned-4, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#gallstones

dissolve :: The Medical Letter , a respected nonprofit publication that evaluates the effectiveness of drugs for doctors , concluded that Actigall can dissolve gallstones in only about half of patients ./.
det(Letter-3, The-1)
amod(Letter-3, Medical-2)
nsubj(concluded-18, Letter-3)
punct(Letter-3, ,-4)
det(publication-8, a-5)
amod(publication-8, respected-6)
amod(publication-8, nonprofit-7)
appos(Letter-3, publication-8)
nsubj(evaluates-10, publication-8)
ref(publication-8, that-9)
acl:relcl(publication-8, evaluates-10)
det(effectiveness-12, the-11)
dobj(evaluates-10, effectiveness-12)
case(drugs-14, of-13)
nmod:of(effectiveness-12, drugs-14)
case(doctors-16, for-15)
nmod:for(evaluates-10, doctors-16)
punct(Letter-3, ,-17)
root(ROOT-0, concluded-18)
mark(dissolve-22, that-19)
nsubj(dissolve-22, Actigall-20)
aux(dissolve-22, can-21)
ccomp(concluded-18, dissolve-22)
dobj(dissolve-22, gallstones-23)
case(half-27, in-24)
advmod(half-27, only-25)
advmod(half-27, about-26)
nmod:in(dissolve-22, half-27)
case(patients-29, of-28)
nmod:of(half-27, patients-29)
punct(concluded-18, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#gallstones

dissolve :: That agreement was dissolved after a regulatory challenge , but Seagram ultimately won Martell with an offer valuing the company at 5.25 billion French francs -LRB- $ 820.6 million -RRB- ./.
det(agreement-2, That-1)
nsubjpass(dissolved-4, agreement-2)
auxpass(dissolved-4, was-3)
root(ROOT-0, dissolved-4)
case(challenge-8, after-5)
det(challenge-8, a-6)
amod(challenge-8, regulatory-7)
nmod:after(dissolved-4, challenge-8)
punct(dissolved-4, ,-9)
cc(dissolved-4, but-10)
nsubj(won-13, Seagram-11)
advmod(won-13, ultimately-12)
conj:but(dissolved-4, won-13)
dobj(won-13, Martell-14)
case(offer-17, with-15)
det(offer-17, an-16)
nmod:with(won-13, offer-17)
acl(offer-17, valuing-18)
det(company-20, the-19)
dobj(valuing-18, company-20)
case(francs-25, at-21)
compound(billion-23, 5.25-22)
nummod(francs-25, billion-23)
amod(francs-25, French-24)
nmod:at(valuing-18, francs-25)
punct($-27, -LRB--26)
dep(francs-25, $-27)
compound(million-29, 820.6-28)
nummod($-27, million-29)
punct($-27, -RRB--30)
punct(dissolved-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#agreement

dissolve :: Haiti dissolved an agency that administered major development projects ./.
nsubj(dissolved-2, Haiti-1)
root(ROOT-0, dissolved-2)
det(agency-4, an-3)
dobj(dissolved-2, agency-4)
nsubj(administered-6, agency-4)
ref(agency-4, that-5)
acl:relcl(agency-4, administered-6)
amod(projects-9, major-7)
compound(projects-9, development-8)
dobj(administered-6, projects-9)
punct(dissolved-2, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#agency

dissolve :: The large study , involving 17 , 187 patients treated at 417 hospitals in North America , Europe and Australia , provided the strongest evidence yet that the emergency use of a clot dissolving drug can save lives , said researchers involved in the clinical trial ./.
det(study-3, The-1)
amod(study-3, large-2)
nsubj(provided-22, study-3)
punct(study-3, ,-4)
acl(study-3, involving-5)
dobj(involving-5, 17-6)
punct(17-6, ,-7)
nummod(patients-9, 187-8)
appos(17-6, patients-9)
acl(patients-9, treated-10)
case(hospitals-13, at-11)
nummod(hospitals-13, 417-12)
nmod:at(treated-10, hospitals-13)
case(America-16, in-14)
compound(America-16, North-15)
nmod:in(hospitals-13, America-16)
punct(America-16, ,-17)
nmod:in(hospitals-13, Europe-18)
conj:and(America-16, Europe-18)
cc(America-16, and-19)
nmod:in(hospitals-13, Australia-20)
conj:and(America-16, Australia-20)
punct(17-6, ,-21)
ccomp(said-40, provided-22)
det(evidence-25, the-23)
amod(evidence-25, strongest-24)
dobj(provided-22, evidence-25)
advmod(provided-22, yet-26)
mark(save-37, that-27)
det(use-30, the-28)
compound(use-30, emergency-29)
nsubj(save-37, use-30)
case(drug-35, of-31)
det(drug-35, a-32)
compound(drug-35, clot-33)
amod(drug-35, dissolving-34)
nmod:of(use-30, drug-35)
aux(save-37, can-36)
ccomp(provided-22, save-37)
dobj(save-37, lives-38)
punct(said-40, ,-39)
root(ROOT-0, said-40)
nsubj(said-40, researchers-41)
acl(researchers-41, involved-42)
case(trial-46, in-43)
det(trial-46, the-44)
amod(trial-46, clinical-45)
nmod:in(involved-42, trial-46)
punct(said-40, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#drug

dissolve :: Although some research indicates that Activase can dissolve clots faster than streptokinase , there is n't any published research showing that the Genentech product can increase survival but such research may be available soon ./.
mark(indicates-4, Although-1)
det(research-3, some-2)
nsubj(indicates-4, research-3)
advcl(is-15, indicates-4)
mark(dissolve-8, that-5)
nsubj(dissolve-8, Activase-6)
aux(dissolve-8, can-7)
ccomp(indicates-4, dissolve-8)
dobj(dissolve-8, clots-9)
amod(clots-9, faster-10)
case(streptokinase-12, than-11)
nmod:than(faster-10, streptokinase-12)
punct(is-15, ,-13)
expl(is-15, there-14)
root(ROOT-0, is-15)
neg(is-15, n't-16)
det(research-19, any-17)
amod(research-19, published-18)
nsubj(available-33, research-19)
acl(research-19, showing-20)
mark(increase-26, that-21)
det(product-24, the-22)
compound(product-24, Genentech-23)
nsubj(increase-26, product-24)
aux(increase-26, can-25)
ccomp(showing-20, increase-26)
dobj(increase-26, survival-27)
cc(survival-27, but-28)
amod(research-30, such-29)
dobj(increase-26, research-30)
conj:but(survival-27, research-30)
aux(available-33, may-31)
cop(available-33, be-32)
ccomp(is-15, available-33)
advmod(available-33, soon-34)
punct(is-15, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#clots

dissolve :: The potentially fatal clots dissolved within two hours among 82 % of patients given Genentech 's Activase brand of TPA , compared with 48 % who used Abbokinase , Abbott Laboratories 's brand of urokinase ./.
det(clots-4, The-1)
advmod(fatal-3, potentially-2)
amod(clots-4, fatal-3)
nsubj(dissolved-5, clots-4)
root(ROOT-0, dissolved-5)
case(hours-8, within-6)
nummod(hours-8, two-7)
nmod:within(dissolved-5, hours-8)
case(%-11, among-9)
nummod(%-11, 82-10)
nmod:among(hours-8, %-11)
case(patients-13, of-12)
nmod:of(%-11, patients-13)
case(brand-18, given-14)
nmod:poss(brand-18, Genentech-15)
case(Genentech-15, 's-16)
compound(brand-18, Activase-17)
nmod:given(patients-13, brand-18)
case(TPA-20, of-19)
nmod:of(brand-18, TPA-20)
punct(dissolved-5, ,-21)
case(%-25, compared-22)
mwe(compared-22, with-23)
nummod(%-25, 48-24)
advcl(dissolved-5, %-25)
nsubj(used-27, %-25)
ref(%-25, who-26)
acl:relcl(%-25, used-27)
dobj(used-27, Abbokinase-28)
punct(Abbokinase-28, ,-29)
compound(Laboratories-31, Abbott-30)
nmod:poss(brand-33, Laboratories-31)
case(Laboratories-31, 's-32)
appos(Abbokinase-28, brand-33)
case(urokinase-35, of-34)
nmod:of(brand-33, urokinase-35)
punct(dissolved-5, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#clots

dissolve :: In May , Pinnacle said the partnership between SunCor and Mr. Diddy had been `` dissolved '' so that SunCor could control development of the property that the partnership had acquired , but Pinnacle did n't give further details of his departure ./.
case(May-2, In-1)
nmod:in(said-5, May-2)
punct(said-5, ,-3)
nsubj(said-5, Pinnacle-4)
root(ROOT-0, said-5)
det(partnership-7, the-6)
nsubjpass(dissolved-16, partnership-7)
case(SunCor-9, between-8)
nmod:between(partnership-7, SunCor-9)
cc(SunCor-9, and-10)
compound(Diddy-12, Mr.-11)
nmod:between(partnership-7, Diddy-12)
conj:and(SunCor-9, Diddy-12)
aux(dissolved-16, had-13)
auxpass(dissolved-16, been-14)
punct(dissolved-16, ``-15)
ccomp(said-5, dissolved-16)
punct(dissolved-16, ''-17)
mark(control-22, so-18)
mwe(so-18, that-19)
nsubj(control-22, SunCor-20)
aux(control-22, could-21)
advcl(dissolved-16, control-22)
dobj(control-22, development-23)
case(property-26, of-24)
det(property-26, the-25)
nmod:of(development-23, property-26)
mark(acquired-31, that-27)
det(partnership-29, the-28)
nsubj(acquired-31, partnership-29)
aux(acquired-31, had-30)
ccomp(property-26, acquired-31)
punct(said-5, ,-32)
cc(said-5, but-33)
nsubj(give-37, Pinnacle-34)
aux(give-37, did-35)
neg(give-37, n't-36)
conj:but(said-5, give-37)
amod(details-39, further-38)
dobj(give-37, details-39)
case(departure-42, of-40)
nmod:poss(departure-42, his-41)
nmod:of(details-39, departure-42)
punct(said-5, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#partnership

dissolve :: The chief problem Mr. Wright 's disclosure amendments correct is his previous failure to report on the underlying assets of Mallightco , a partnership Mr. Wright had with Fort Worth developer George Mallick , since dissolved ./.
det(problem-3, The-1)
compound(problem-3, chief-2)
root(ROOT-0, problem-3)
compound(Wright-5, Mr.-4)
nmod:poss(amendments-8, Wright-5)
case(Wright-5, 's-6)
compound(amendments-8, disclosure-7)
nsubj(failure-13, amendments-8)
amod(amendments-8, correct-9)
cop(failure-13, is-10)
nmod:poss(failure-13, his-11)
amod(failure-13, previous-12)
acl:relcl(problem-3, failure-13)
mark(report-15, to-14)
acl(failure-13, report-15)
case(assets-19, on-16)
det(assets-19, the-17)
amod(assets-19, underlying-18)
nmod:on(report-15, assets-19)
case(Mallightco-21, of-20)
nmod:of(assets-19, Mallightco-21)
punct(Mallightco-21, ,-22)
det(partnership-24, a-23)
appos(Mallightco-21, partnership-24)
compound(Wright-26, Mr.-25)
nsubj(had-27, Wright-26)
acl:relcl(partnership-24, had-27)
case(Mallick-33, with-28)
compound(Mallick-33, Fort-29)
compound(Mallick-33, Worth-30)
compound(Mallick-33, developer-31)
compound(Mallick-33, George-32)
nmod:with(had-27, Mallick-33)
punct(Mallightco-21, ,-34)
mark(dissolved-36, since-35)
advcl(report-15, dissolved-36)
punct(problem-3, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

dissolve :: The remaining members have agreed to dissolve the facility , though they say they may form a new , smaller claims agency ./.
det(members-3, The-1)
amod(members-3, remaining-2)
nsubj(agreed-5, members-3)
nsubj:xsubj(dissolve-7, members-3)
aux(agreed-5, have-4)
root(ROOT-0, agreed-5)
mark(dissolve-7, to-6)
xcomp(agreed-5, dissolve-7)
det(facility-9, the-8)
dobj(dissolve-7, facility-9)
punct(agreed-5, ,-10)
mark(say-13, though-11)
nsubj(say-13, they-12)
advcl(agreed-5, say-13)
nsubj(form-16, they-14)
aux(form-16, may-15)
ccomp(say-13, form-16)
det(agency-22, a-17)
amod(agency-22, new-18)
punct(agency-22, ,-19)
amod(agency-22, smaller-20)
compound(agency-22, claims-21)
dobj(form-16, agency-22)
punct(agreed-5, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#facility

dissolve :: The partnership was dissolved so that SunCor `` could directly and completely control the development '' of nearly 2 , 000 acres of property the partnership had purchased ./.
det(partnership-2, The-1)
nsubjpass(dissolved-4, partnership-2)
auxpass(dissolved-4, was-3)
root(ROOT-0, dissolved-4)
mark(control-13, so-5)
mwe(so-5, that-6)
nsubj(control-13, SunCor-7)
punct(control-13, ``-8)
aux(control-13, could-9)
advmod(and-11, directly-10)
advmod(control-13, and-11)
advmod(and-11, completely-12)
advcl(dissolved-4, control-13)
det(development-15, the-14)
dobj(control-13, development-15)
punct(development-15, ''-16)
acl(development-15, of-17)
advmod(2-19, nearly-18)
root(of-17, 2-19)
punct(2-19, ,-20)
nummod(acres-22, 000-21)
root(,-20, acres-22)
case(property-24, of-23)
nmod:of(acres-22, property-24)
det(partnership-26, the-25)
nsubj(purchased-28, partnership-26)
aux(purchased-28, had-27)
acl:relcl(acres-22, purchased-28)
punct(acres-22, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#partnership

dissolve :: If not , Mr. Mitterrand would dissolve parliament and call new elections ./.
mark(not-2, If-1)
advcl(dissolve-7, not-2)
punct(dissolve-7, ,-3)
compound(Mitterrand-5, Mr.-4)
nsubj(dissolve-7, Mitterrand-5)
nsubj(call-10, Mitterrand-5)
aux(dissolve-7, would-6)
root(ROOT-0, dissolve-7)
dobj(dissolve-7, parliament-8)
cc(dissolve-7, and-9)
conj:and(dissolve-7, call-10)
amod(elections-12, new-11)
dobj(call-10, elections-12)
punct(dissolve-7, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#parliament

dissolve :: The solvent failed to dissolve non-cholesterol gallstones in two patients , however ./.
det(solvent-2, The-1)
nsubj(failed-3, solvent-2)
nsubj:xsubj(dissolve-5, solvent-2)
root(ROOT-0, failed-3)
mark(dissolve-5, to-4)
xcomp(failed-3, dissolve-5)
amod(gallstones-7, non-cholesterol-6)
dobj(dissolve-5, gallstones-7)
case(patients-10, in-8)
nummod(patients-10, two-9)
nmod:in(dissolve-5, patients-10)
punct(failed-3, ,-11)
advmod(failed-3, however-12)
punct(failed-3, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#gallstones

dissolve :: The announcement Friday follows a court ruling earlier last week dissolving a preliminary injunction that had prevented the IRS from taking such action ./.
det(announcement-2, The-1)
nsubj(follows-4, announcement-2)
nmod:tmod(follows-4, Friday-3)
root(ROOT-0, follows-4)
det(ruling-7, a-5)
compound(ruling-7, court-6)
dobj(follows-4, ruling-7)
advmod(week-10, earlier-8)
amod(week-10, last-9)
nmod:tmod(ruling-7, week-10)
acl(ruling-7, dissolving-11)
det(injunction-14, a-12)
amod(injunction-14, preliminary-13)
dobj(dissolving-11, injunction-14)
nsubj(prevented-17, injunction-14)
ref(injunction-14, that-15)
aux(prevented-17, had-16)
acl:relcl(injunction-14, prevented-17)
det(IRS-19, the-18)
dobj(prevented-17, IRS-19)
mark(taking-21, from-20)
advcl(prevented-17, taking-21)
amod(action-23, such-22)
dobj(taking-21, action-23)
punct(follows-4, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#injunction

dissolve :: Mr. Stambaugh then moved to Florida and filed for divorce there ; a Florida circuit court dissolved the marriage but left the financial settlement to be determined elsewhere because the couple 's principal assets were Pennsylvania real estate ./.
compound(Stambaugh-2, Mr.-1)
nsubj(moved-4, Stambaugh-2)
nsubj(filed-8, Stambaugh-2)
advmod(moved-4, then-3)
root(ROOT-0, moved-4)
case(Florida-6, to-5)
nmod:to(moved-4, Florida-6)
cc(moved-4, and-7)
conj:and(moved-4, filed-8)
case(divorce-10, for-9)
nmod:for(filed-8, divorce-10)
advmod(filed-8, there-11)
punct(moved-4, ;-12)
det(court-16, a-13)
compound(court-16, Florida-14)
compound(court-16, circuit-15)
nsubj(dissolved-17, court-16)
nsubj(left-21, court-16)
parataxis(moved-4, dissolved-17)
det(marriage-19, the-18)
dobj(dissolved-17, marriage-19)
cc(dissolved-17, but-20)
parataxis(moved-4, left-21)
conj:but(dissolved-17, left-21)
det(settlement-24, the-22)
amod(settlement-24, financial-23)
dobj(left-21, settlement-24)
nsubjpass:xsubj(determined-27, settlement-24)
mark(determined-27, to-25)
auxpass(determined-27, be-26)
xcomp(left-21, determined-27)
advmod(determined-27, elsewhere-28)
mark(estate-38, because-29)
det(couple-31, the-30)
nmod:poss(assets-34, couple-31)
case(couple-31, 's-32)
amod(assets-34, principal-33)
nsubj(estate-38, assets-34)
cop(estate-38, were-35)
compound(estate-38, Pennsylvania-36)
compound(estate-38, real-37)
advcl(determined-27, estate-38)
punct(moved-4, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#marriage

dissolve :: But a union-company panel later reviewed the pay of workers whose responsibilities had changed as job demarcations dissolved ./.
cc(reviewed-6, But-1)
det(panel-4, a-2)
amod(panel-4, union-company-3)
nsubj(reviewed-6, panel-4)
advmod(reviewed-6, later-5)
root(ROOT-0, reviewed-6)
det(pay-8, the-7)
dobj(reviewed-6, pay-8)
case(workers-10, of-9)
nmod:of(pay-8, workers-10)
nmod:poss(responsibilities-12, workers-10)
ref(workers-10, whose-11)
nsubj(changed-14, responsibilities-12)
aux(changed-14, had-13)
acl:relcl(workers-10, changed-14)
mark(dissolved-18, as-15)
compound(demarcations-17, job-16)
nsubj(dissolved-18, demarcations-17)
advcl(changed-14, dissolved-18)
punct(reviewed-6, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#demarcations

dissolve :: A merger accord between Braniff and Pan Am was dissolved after Braniff failed to get sufficient cost concessions from Pan Am unions ./.
det(accord-3, A-1)
compound(accord-3, merger-2)
nsubjpass(dissolved-10, accord-3)
case(Braniff-5, between-4)
nmod:between(accord-3, Braniff-5)
cc(Braniff-5, and-6)
nmod:between(accord-3, Pan-7)
conj:and(Braniff-5, Pan-7)
aux(dissolved-10, Am-8)
auxpass(dissolved-10, was-9)
root(ROOT-0, dissolved-10)
mark(failed-13, after-11)
nsubj(failed-13, Braniff-12)
nsubj:xsubj(get-15, Braniff-12)
advcl(dissolved-10, failed-13)
mark(get-15, to-14)
xcomp(failed-13, get-15)
amod(concessions-18, sufficient-16)
compound(concessions-18, cost-17)
dobj(get-15, concessions-18)
case(unions-22, from-19)
compound(unions-22, Pan-20)
compound(unions-22, Am-21)
nmod:from(concessions-18, unions-22)
punct(dissolved-10, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#accord

dissolve :: In an extraordinary act of courage , the archbishop of Manila , Jaime Cardinal Sin , has just stated publicly that the Philippine bishops ' own social-action organization was so `` highly infiltrated '' that it would have to be dissolved ./.
case(act-4, In-1)
det(act-4, an-2)
amod(act-4, extraordinary-3)
nmod:in(stated-19, act-4)
case(courage-6, of-5)
nmod:of(act-4, courage-6)
punct(stated-19, ,-7)
det(archbishop-9, the-8)
nsubj(stated-19, archbishop-9)
case(Manila-11, of-10)
nmod:of(archbishop-9, Manila-11)
punct(Manila-11, ,-12)
compound(Sin-15, Jaime-13)
compound(Sin-15, Cardinal-14)
appos(Manila-11, Sin-15)
punct(Manila-11, ,-16)
aux(stated-19, has-17)
advmod(stated-19, just-18)
root(ROOT-0, stated-19)
advmod(stated-19, publicly-20)
mark(infiltrated-33, that-21)
det(bishops-24, the-22)
amod(bishops-24, Philippine-23)
nmod:poss(organization-28, bishops-24)
case(bishops-24, '-25)
amod(organization-28, own-26)
compound(organization-28, social-action-27)
nsubjpass(infiltrated-33, organization-28)
auxpass(infiltrated-33, was-29)
advmod(infiltrated-33, so-30)
punct(infiltrated-33, ``-31)
advmod(infiltrated-33, highly-32)
ccomp(stated-19, infiltrated-33)
punct(infiltrated-33, ''-34)
mark(have-38, that-35)
nsubj(have-38, it-36)
nsubjpass:xsubj(dissolved-41, it-36)
aux(have-38, would-37)
ccomp(infiltrated-33, have-38)
mark(dissolved-41, to-39)
auxpass(dissolved-41, be-40)
xcomp(have-38, dissolved-41)
punct(stated-19, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#be

dissolve :: Eminase is given as a single injection over four to five minutes , but appears to dissolve blood clots effectively for several hours ./.
nsubjpass(given-3, Eminase-1)
nsubj(appears-15, Eminase-1)
nsubj:xsubj(dissolve-17, Eminase-1)
auxpass(given-3, is-2)
root(ROOT-0, given-3)
case(injection-7, as-4)
det(injection-7, a-5)
amod(injection-7, single-6)
nmod:as(given-3, injection-7)
case(minutes-12, over-8)
compound(five-11, four-9)
dep(five-11, to-10)
nummod(minutes-12, five-11)
nmod:over(injection-7, minutes-12)
punct(given-3, ,-13)
cc(given-3, but-14)
conj:but(given-3, appears-15)
mark(dissolve-17, to-16)
xcomp(appears-15, dissolve-17)
compound(clots-19, blood-18)
dobj(dissolve-17, clots-19)
advmod(dissolve-17, effectively-20)
case(hours-23, for-21)
amod(hours-23, several-22)
nmod:for(dissolve-17, hours-23)
punct(given-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#clots

dissolve :: JAMIE SECURITIES Inc. is dissolving , firm officials have said , but the company has n't formally announced the move ./.
compound(Inc.-3, JAMIE-1)
compound(Inc.-3, SECURITIES-2)
nsubj(dissolving-5, Inc.-3)
aux(dissolving-5, is-4)
root(ROOT-0, dissolving-5)
punct(said-10, ,-6)
amod(officials-8, firm-7)
nsubj(said-10, officials-8)
aux(said-10, have-9)
dep(dissolving-5, said-10)
punct(said-10, ,-11)
cc(dissolving-5, but-12)
det(company-14, the-13)
nsubj(announced-18, company-14)
aux(announced-18, has-15)
neg(announced-18, n't-16)
advmod(announced-18, formally-17)
conj:but(dissolving-5, announced-18)
det(move-20, the-19)
dobj(announced-18, move-20)
punct(dissolving-5, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#inc.

dissolve :: In general , though , as long as the spouse who filed for divorce is a bona fide resident of the state that grants the divorce , the state `` where the marriage is dissolved is where the law -LRB- on financial settlement -RRB- applies , '' says Ms. Gold-Bikin ./.
case(general-2, In-1)
nmod:in(is-36, general-2)
punct(is-36, ,-3)
advmod(is-36, though-4)
punct(is-36, ,-5)
advmod(long-7, as-6)
advmod(is-36, long-7)
mark(resident-19, as-8)
det(spouse-10, the-9)
nsubj(filed-12, spouse-10)
nsubj(resident-19, spouse-10)
ref(spouse-10, who-11)
acl:relcl(spouse-10, filed-12)
case(divorce-14, for-13)
nmod:for(filed-12, divorce-14)
cop(resident-19, is-15)
det(resident-19, a-16)
compound(resident-19, bona-17)
compound(resident-19, fide-18)
advcl(long-7, resident-19)
case(state-22, of-20)
det(state-22, the-21)
nmod:of(resident-19, state-22)
nsubj(grants-24, state-22)
ref(state-22, that-23)
acl:relcl(state-22, grants-24)
det(divorce-26, the-25)
dobj(grants-24, divorce-26)
punct(is-36, ,-27)
det(state-29, the-28)
nsubj(is-36, state-29)
punct(state-29, ``-30)
advmod(dissolved-35, where-31)
det(marriage-33, the-32)
nsubjpass(dissolved-35, marriage-33)
auxpass(dissolved-35, is-34)
acl:relcl(state-29, dissolved-35)
ccomp(says-48, is-36)
advmod(applies-45, where-37)
det(law-39, the-38)
nsubj(applies-45, law-39)
punct(settlement-43, -LRB--40)
case(settlement-43, on-41)
amod(settlement-43, financial-42)
nmod:on(law-39, settlement-43)
punct(settlement-43, -RRB--44)
advcl(is-36, applies-45)
punct(says-48, ,-46)
punct(says-48, ''-47)
root(ROOT-0, says-48)
compound(Gold-Bikin-50, Ms.-49)
nsubj(says-48, Gold-Bikin-50)
punct(says-48, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#marriage

dissolve :: But Mr. Mitterrand has said he would n't dissolve parliament and call new elections unless it voted down his government ./.
cc(said-5, But-1)
compound(Mitterrand-3, Mr.-2)
nsubj(said-5, Mitterrand-3)
aux(said-5, has-4)
root(ROOT-0, said-5)
nsubj(dissolve-9, he-6)
nsubj(call-12, he-6)
aux(dissolve-9, would-7)
neg(dissolve-9, n't-8)
ccomp(said-5, dissolve-9)
dobj(dissolve-9, parliament-10)
cc(dissolve-9, and-11)
ccomp(said-5, call-12)
conj:and(dissolve-9, call-12)
amod(elections-14, new-13)
dobj(call-12, elections-14)
mark(voted-17, unless-15)
nsubj(voted-17, it-16)
advcl(call-12, voted-17)
compound:prt(voted-17, down-18)
nmod:poss(government-20, his-19)
dobj(voted-17, government-20)
punct(said-5, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#parliament

dissolve :: Previously reported experiments show that the drugs quickly dissolve the blood clot that initially blocked one of the heart 's vital coronary arteries causing the heart attack ./.
advmod(reported-2, Previously-1)
amod(experiments-3, reported-2)
nsubj(show-4, experiments-3)
root(ROOT-0, show-4)
mark(dissolve-9, that-5)
det(drugs-7, the-6)
nsubj(dissolve-9, drugs-7)
advmod(dissolve-9, quickly-8)
ccomp(show-4, dissolve-9)
det(clot-12, the-10)
compound(clot-12, blood-11)
dobj(dissolve-9, clot-12)
nsubj(blocked-15, clot-12)
ref(clot-12, that-13)
advmod(blocked-15, initially-14)
acl:relcl(clot-12, blocked-15)
dobj(blocked-15, one-16)
case(arteries-23, of-17)
det(heart-19, the-18)
nmod:poss(arteries-23, heart-19)
case(heart-19, 's-20)
amod(arteries-23, vital-21)
amod(arteries-23, coronary-22)
nmod:of(one-16, arteries-23)
acl(arteries-23, causing-24)
det(attack-27, the-25)
compound(attack-27, heart-26)
dobj(causing-24, attack-27)
punct(show-4, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#clot

dissolve :: A few aspirin facts: Aspirin tablets take up to 20 minutes to dissolve in your stomach ./.
det(facts-4, A-1)
amod(facts-4, few-2)
compound(facts-4, aspirin-3)
root(ROOT-0, facts-4)
punct(facts-4, :-5)
compound(tablets-7, Aspirin-6)
nsubj(take-8, tablets-7)
dep(facts-4, take-8)
dep(20-11, up-9)
mwe(up-9, to-10)
nummod(minutes-12, 20-11)
dobj(take-8, minutes-12)
mark(dissolve-14, to-13)
advcl(take-8, dissolve-14)
case(stomach-17, in-15)
nmod:poss(stomach-17, your-16)
nmod:in(dissolve-14, stomach-17)
punct(facts-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#stomach

dissolve :: Do n't take them with orange juice . -LRB- They wo n't dissolve well. -RRB-/-RRB-
aux(take-3, Do-1)
neg(take-3, n't-2)
root(ROOT-0, take-3)
dobj(take-3, them-4)
case(juice-7, with-5)
compound(juice-7, orange-6)
nmod:with(take-3, juice-7)
punct(take-3, .-8)
punct(dissolve-5, -LRB--1)
nsubj(dissolve-5, They-2)
aux(dissolve-5, wo-3)
neg(dissolve-5, n't-4)
root(ROOT-0, dissolve-5)
advmod(dissolve-5, well-6)
punct(dissolve-5, .-7)
punct(dissolve-5, -RRB--8)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: dissolve#they

dissolve :: Eminase is given as a single injection over four to five minutes , but appears to dissolve blood clots effectively for several hours ./.
nsubjpass(given-3, Eminase-1)
nsubj(appears-15, Eminase-1)
nsubj:xsubj(dissolve-17, Eminase-1)
auxpass(given-3, is-2)
root(ROOT-0, given-3)
case(injection-7, as-4)
det(injection-7, a-5)
amod(injection-7, single-6)
nmod:as(given-3, injection-7)
case(minutes-12, over-8)
compound(five-11, four-9)
dep(five-11, to-10)
nummod(minutes-12, five-11)
nmod:over(injection-7, minutes-12)
punct(given-3, ,-13)
cc(given-3, but-14)
conj:but(given-3, appears-15)
mark(dissolve-17, to-16)
xcomp(appears-15, dissolve-17)
compound(clots-19, blood-18)
dobj(dissolve-17, clots-19)
advmod(dissolve-17, effectively-20)
case(hours-23, for-21)
amod(hours-23, several-22)
nmod:for(dissolve-17, hours-23)
punct(given-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#clots

dissolve :: If Mr. Icahn is successful in dissolving that agreement , he could seek Pennzoil 's support for his plan , which , like Texaco 's plan , includes a $ 3 billion settlement ./.
mark(successful-5, If-1)
compound(Icahn-3, Mr.-2)
nsubj(successful-5, Icahn-3)
cop(successful-5, is-4)
advcl(seek-13, successful-5)
mark(dissolving-7, in-6)
advcl(successful-5, dissolving-7)
det(agreement-9, that-8)
dobj(dissolving-7, agreement-9)
punct(seek-13, ,-10)
nsubj(seek-13, he-11)
aux(seek-13, could-12)
root(ROOT-0, seek-13)
nmod:poss(support-16, Pennzoil-14)
case(Pennzoil-14, 's-15)
dobj(seek-13, support-16)
case(plan-19, for-17)
nmod:poss(plan-19, his-18)
nmod:for(support-16, plan-19)
nsubj(includes-28, plan-19)
punct(plan-19, ,-20)
ref(plan-19, which-21)
punct(includes-28, ,-22)
case(plan-26, like-23)
nmod:poss(plan-26, Texaco-24)
case(Texaco-24, 's-25)
nmod:like(includes-28, plan-26)
punct(includes-28, ,-27)
acl:relcl(plan-19, includes-28)
det(settlement-33, a-29)
amod(settlement-33, $-30)
compound(billion-32, 3-31)
nummod($-30, billion-32)
dobj(includes-28, settlement-33)
punct(seek-13, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#agreement

dissolve :: The Doles said they had n't known about the gain because it was in a blind trust , dissolved over the weekend , that was set up by Mrs. Dole in 1985 when she was secretary of transportation ./.
det(Doles-2, The-1)
nsubj(said-3, Doles-2)
root(ROOT-0, said-3)
nsubjpass(known-7, they-4)
aux(known-7, had-5)
neg(known-7, n't-6)
ccomp(said-3, known-7)
case(gain-10, about-8)
det(gain-10, the-9)
nmod:about(known-7, gain-10)
mark(trust-17, because-11)
nsubj(trust-17, it-12)
cop(trust-17, was-13)
case(trust-17, in-14)
det(trust-17, a-15)
amod(trust-17, blind-16)
advcl(known-7, trust-17)
punct(trust-17, ,-18)
dep(trust-17, dissolved-19)
case(weekend-22, over-20)
det(weekend-22, the-21)
nmod:over(dissolved-19, weekend-22)
punct(trust-17, ,-23)
nsubjpass(set-26, that-24)
auxpass(set-26, was-25)
dep(trust-17, set-26)
compound:prt(set-26, up-27)
case(Dole-30, by-28)
compound(Dole-30, Mrs.-29)
nmod:agent(set-26, Dole-30)
case(1985-32, in-31)
nmod:in(set-26, 1985-32)
advmod(secretary-36, when-33)
nsubj(secretary-36, she-34)
cop(secretary-36, was-35)
advcl(set-26, secretary-36)
case(transportation-38, of-37)
nmod:of(secretary-36, transportation-38)
punct(said-3, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#weekend

dissolve :: Carl C. Icahn , Texaco Inc. 's major shareholder , sued to dissolve the company 's agreement with Pennzoil Co. that bars Pennzoil from supporting his reorganization plan for Texaco ./.
compound(Icahn-3, Carl-1)
compound(Icahn-3, C.-2)
nsubj(sued-11, Icahn-3)
nsubj:xsubj(dissolve-13, Icahn-3)
punct(Icahn-3, ,-4)
compound(Inc.-6, Texaco-5)
nmod:poss(shareholder-9, Inc.-6)
case(Inc.-6, 's-7)
amod(shareholder-9, major-8)
appos(Icahn-3, shareholder-9)
punct(Icahn-3, ,-10)
root(ROOT-0, sued-11)
mark(dissolve-13, to-12)
xcomp(sued-11, dissolve-13)
det(company-15, the-14)
nmod:poss(agreement-17, company-15)
case(company-15, 's-16)
dobj(dissolve-13, agreement-17)
case(Co.-20, with-18)
compound(Co.-20, Pennzoil-19)
nmod:with(agreement-17, Co.-20)
dep(agreement-17, that-21)
compound(Pennzoil-23, bars-22)
dep(that-21, Pennzoil-23)
mark(supporting-25, from-24)
acl(Pennzoil-23, supporting-25)
nmod:poss(plan-28, his-26)
compound(plan-28, reorganization-27)
dobj(supporting-25, plan-28)
case(Texaco-30, for-29)
nmod:for(plan-28, Texaco-30)
punct(sued-11, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#agreement

dissolve :: By changing formulas for solvents , he says , UNC `` can take superalloy scrap , dissolve it , and separate out the various metals . ''/''
mark(changing-2, By-1)
advcl(take-13, changing-2)
dobj(changing-2, formulas-3)
case(solvents-5, for-4)
nmod:for(formulas-3, solvents-5)
punct(says-8, ,-6)
nsubj(says-8, he-7)
parataxis(take-13, says-8)
punct(says-8, ,-9)
nsubj(take-13, UNC-10)
nsubj(dissolve-17, UNC-10)
nsubj(separate-21, UNC-10)
punct(take-13, ``-11)
aux(take-13, can-12)
root(ROOT-0, take-13)
amod(scrap-15, superalloy-14)
dobj(take-13, scrap-15)
punct(take-13, ,-16)
conj:and(take-13, dissolve-17)
dobj(dissolve-17, it-18)
punct(take-13, ,-19)
cc(take-13, and-20)
conj:and(take-13, separate-21)
case(metals-25, out-22)
det(metals-25, the-23)
amod(metals-25, various-24)
nmod:out(separate-21, metals-25)
punct(take-13, .-26)
punct(take-13, ''-27)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: dissolve#it

dissolve :: Some companies had also counted on being able to come up with anti-plaque toothpastes that actually kill the bacteria instead of simply dissolving it or scrubbing it away ./.
det(companies-2, Some-1)
nsubj(counted-5, companies-2)
aux(counted-5, had-3)
advmod(counted-5, also-4)
root(ROOT-0, counted-5)
mark(able-8, on-6)
cop(able-8, being-7)
advcl(counted-5, able-8)
mark(come-10, to-9)
xcomp(able-8, come-10)
compound:prt(come-10, up-11)
case(toothpastes-14, with-12)
amod(toothpastes-14, anti-plaque-13)
nmod:with(come-10, toothpastes-14)
nsubj(kill-17, toothpastes-14)
nsubj(dissolving-23, toothpastes-14)
ref(toothpastes-14, that-15)
advmod(kill-17, actually-16)
acl:relcl(toothpastes-14, kill-17)
det(bacteria-19, the-18)
dobj(kill-17, bacteria-19)
cc(kill-17, instead-20)
mwe(instead-20, of-21)
advmod(dissolving-23, simply-22)
acl:relcl(toothpastes-14, dissolving-23)
conj:negcc(kill-17, dissolving-23)
dobj(dissolving-23, it-24)
cc(dissolving-23, or-25)
conj:negcc(kill-17, scrubbing-26)
conj:or(dissolving-23, scrubbing-26)
dobj(scrubbing-26, it-27)
advmod(scrubbing-26, away-28)
punct(counted-5, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#it

dissolve :: Actigall could be used to dissolve the fragments that remain from that procedure ./.
nsubjpass(used-4, Actigall-1)
nsubj:xsubj(dissolve-6, Actigall-1)
aux(used-4, could-2)
auxpass(used-4, be-3)
root(ROOT-0, used-4)
mark(dissolve-6, to-5)
xcomp(used-4, dissolve-6)
det(fragments-8, the-7)
dobj(dissolve-6, fragments-8)
nsubj(remain-10, fragments-8)
ref(fragments-8, that-9)
acl:relcl(fragments-8, remain-10)
case(procedure-13, from-11)
det(procedure-13, that-12)
nmod:from(remain-10, procedure-13)
punct(used-4, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#fragments

dissolve :: Consumers were n't particularly fond of its taste , and it did n't dissolve easily in cold milk ./.
nsubj(fond-5, Consumers-1)
cop(fond-5, were-2)
neg(fond-5, n't-3)
advmod(fond-5, particularly-4)
root(ROOT-0, fond-5)
case(taste-8, of-6)
nmod:poss(taste-8, its-7)
nmod:of(fond-5, taste-8)
punct(fond-5, ,-9)
cc(fond-5, and-10)
nsubj(dissolve-14, it-11)
aux(dissolve-14, did-12)
neg(dissolve-14, n't-13)
conj:and(fond-5, dissolve-14)
advmod(dissolve-14, easily-15)
case(milk-18, in-16)
amod(milk-18, cold-17)
nmod:in(dissolve-14, milk-18)
punct(fond-5, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#it

dissolve :: The cyanide dissolves , or leaches out the gold , and the water is collected at the bottom of the heap for treatment to remove its precious cargo ./.
det(cyanide-2, The-1)
nsubj(dissolves-3, cyanide-2)
nsubj(leaches-6, cyanide-2)
root(ROOT-0, dissolves-3)
punct(dissolves-3, ,-4)
cc(dissolves-3, or-5)
conj:or(dissolves-3, leaches-6)
compound:prt(leaches-6, out-7)
det(gold-9, the-8)
dobj(leaches-6, gold-9)
punct(dissolves-3, ,-10)
cc(dissolves-3, and-11)
det(water-13, the-12)
nsubjpass(collected-15, water-13)
auxpass(collected-15, is-14)
conj:and(dissolves-3, collected-15)
case(bottom-18, at-16)
det(bottom-18, the-17)
nmod:at(collected-15, bottom-18)
case(heap-21, of-19)
det(heap-21, the-20)
nmod:of(bottom-18, heap-21)
case(treatment-23, for-22)
nmod:for(collected-15, treatment-23)
mark(remove-25, to-24)
acl(treatment-23, remove-25)
nmod:poss(cargo-28, its-26)
amod(cargo-28, precious-27)
dobj(remove-25, cargo-28)
punct(dissolves-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: dissolve#cyanide

drag :: GM 's sales were apparently dragged down by a lackluster performance at its Chevrolet division , which saw sales drop 6 % ./.
nmod:poss(sales-3, GM-1)
case(GM-1, 's-2)
nsubjpass(dragged-6, sales-3)
auxpass(dragged-6, were-4)
advmod(dragged-6, apparently-5)
root(ROOT-0, dragged-6)
compound:prt(dragged-6, down-7)
case(performance-11, by-8)
det(performance-11, a-9)
amod(performance-11, lackluster-10)
nmod:agent(dragged-6, performance-11)
case(division-15, at-12)
nmod:poss(division-15, its-13)
compound(division-15, Chevrolet-14)
nmod:at(performance-11, division-15)
nsubj(saw-18, division-15)
punct(division-15, ,-16)
ref(division-15, which-17)
acl:relcl(division-15, saw-18)
nsubj(drop-20, sales-19)
ccomp(saw-18, drop-20)
nummod(%-22, 6-21)
dobj(drop-20, %-22)
punct(dragged-6, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#sales

drag :: A late Tokyo rally concentrated in railways and banks helped indexes trim their losses , but electrical stocks , which fell sharply early in the afternoon session and dragged the indexes with them , failed to recover ./.
det(rally-4, A-1)
amod(rally-4, late-2)
compound(rally-4, Tokyo-3)
nsubj(concentrated-5, rally-4)
root(ROOT-0, concentrated-5)
case(railways-7, in-6)
nmod:in(concentrated-5, railways-7)
cc(concentrated-5, and-8)
nsubj(helped-10, banks-9)
conj:and(concentrated-5, helped-10)
nsubj(trim-12, indexes-11)
ccomp(helped-10, trim-12)
nmod:poss(losses-14, their-13)
dobj(trim-12, losses-14)
punct(concentrated-5, ,-15)
cc(concentrated-5, but-16)
amod(stocks-18, electrical-17)
nsubj(fell-21, stocks-18)
nsubj(dragged-29, stocks-18)
nsubj(failed-35, stocks-18)
nsubj:xsubj(recover-37, stocks-18)
punct(stocks-18, ,-19)
ref(stocks-18, which-20)
acl:relcl(stocks-18, fell-21)
advmod(fell-21, sharply-22)
advmod(fell-21, early-23)
case(session-27, in-24)
det(session-27, the-25)
compound(session-27, afternoon-26)
nmod:in(early-23, session-27)
cc(fell-21, and-28)
acl:relcl(stocks-18, dragged-29)
conj:and(fell-21, dragged-29)
det(indexes-31, the-30)
dobj(dragged-29, indexes-31)
case(them-33, with-32)
nmod:with(dragged-29, them-33)
punct(stocks-18, ,-34)
conj:and(concentrated-5, failed-35)
mark(recover-37, to-36)
xcomp(failed-35, recover-37)
punct(concentrated-5, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#indexes

drag :: But even though the leaders of the Communist Party have accepted much of Solidarity 's platform , they are dragging their feet ./.
cc(dragging-20, But-1)
advmod(accepted-11, even-2)
mark(accepted-11, though-3)
det(leaders-5, the-4)
nsubj(accepted-11, leaders-5)
case(Party-9, of-6)
det(Party-9, the-7)
compound(Party-9, Communist-8)
nmod:of(leaders-5, Party-9)
aux(accepted-11, have-10)
advcl(dragging-20, accepted-11)
dobj(accepted-11, much-12)
case(platform-16, of-13)
nmod:poss(platform-16, Solidarity-14)
case(Solidarity-14, 's-15)
nmod:of(much-12, platform-16)
punct(dragging-20, ,-17)
nsubj(dragging-20, they-18)
aux(dragging-20, are-19)
root(ROOT-0, dragging-20)
nmod:poss(feet-22, their-21)
dobj(dragging-20, feet-22)
punct(dragging-20, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#feet

drag :: Everybody stands up at the session to make sure the meeting does n't drag on and interrupt the day 's routine ./.
nsubj(stands-2, Everybody-1)
nsubj:xsubj(make-8, Everybody-1)
root(ROOT-0, stands-2)
compound:prt(stands-2, up-3)
case(session-6, at-4)
det(session-6, the-5)
nmod:at(stands-2, session-6)
mark(make-8, to-7)
xcomp(stands-2, make-8)
xcomp(make-8, sure-9)
det(meeting-11, the-10)
nsubj(drag-14, meeting-11)
nsubj(interrupt-17, meeting-11)
aux(drag-14, does-12)
neg(drag-14, n't-13)
ccomp(sure-9, drag-14)
nmod(drag-14, on-15)
cc(drag-14, and-16)
ccomp(sure-9, interrupt-17)
conj:and(drag-14, interrupt-17)
det(day-19, the-18)
nmod:poss(routine-21, day-19)
case(day-19, 's-20)
dobj(interrupt-17, routine-21)
punct(stands-2, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#meeting

drag :: `` As a result , gold and silver were dragged down more by platinum than by crude oil , '' he said ./.
punct(said-22, ``-1)
case(result-4, As-2)
det(result-4, a-3)
nmod:as(dragged-10, result-4)
punct(dragged-10, ,-5)
nsubjpass(dragged-10, gold-6)
cc(gold-6, and-7)
conj:and(gold-6, silver-8)
nsubjpass(dragged-10, silver-8)
auxpass(dragged-10, were-9)
ccomp(said-22, dragged-10)
compound:prt(dragged-10, down-11)
dobj(dragged-10, more-12)
case(platinum-14, by-13)
nmod:by(more-12, platinum-14)
case(oil-18, than-15)
case(oil-18, by-16)
amod(oil-18, crude-17)
nmod:than(more-12, oil-18)
punct(said-22, ,-19)
punct(said-22, ''-20)
nsubj(said-22, he-21)
root(ROOT-0, said-22)
punct(said-22, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#more

drag :: Every four years we can count on a presidential election , the Olympics , and Mr. Schlesinger dragging out his tired old essay on why he does n't like the electoral college ./.
det(years-3, Every-1)
nummod(years-3, four-2)
nmod:tmod(count-6, years-3)
nsubj(count-6, we-4)
aux(count-6, can-5)
root(ROOT-0, count-6)
case(election-10, on-7)
det(election-10, a-8)
amod(election-10, presidential-9)
nmod:on(count-6, election-10)
punct(count-6, ,-11)
det(Olympics-13, the-12)
dobj(count-6, Olympics-13)
punct(count-6, ,-14)
cc(count-6, and-15)
compound(Schlesinger-17, Mr.-16)
nsubj(dragging-18, Schlesinger-17)
conj:and(count-6, dragging-18)
compound:prt(dragging-18, out-19)
nmod:poss(essay-23, his-20)
amod(essay-23, tired-21)
amod(essay-23, old-22)
dobj(dragging-18, essay-23)
mark(like-29, on-24)
advmod(like-29, why-25)
nsubj(like-29, he-26)
aux(like-29, does-27)
neg(like-29, n't-28)
advcl(dragging-18, like-29)
det(college-32, the-30)
amod(college-32, electoral-31)
dobj(like-29, college-32)
punct(count-6, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#essay

drag :: `` That would cause Boeing to finally move on the 7J7 and stop dragging its feet . ''/''
punct(cause-4, ``-1)
nsubj(cause-4, That-2)
aux(cause-4, would-3)
root(ROOT-0, cause-4)
dobj(cause-4, Boeing-5)
nsubj:xsubj(move-8, Boeing-5)
mark(move-8, to-6)
advmod(move-8, finally-7)
xcomp(cause-4, move-8)
case(7J7-11, on-9)
det(7J7-11, the-10)
nmod:on(move-8, 7J7-11)
cc(move-8, and-12)
xcomp(cause-4, stop-13)
conj:and(move-8, stop-13)
xcomp(stop-13, dragging-14)
nmod:poss(feet-16, its-15)
dobj(dragging-14, feet-16)
punct(cause-4, .-17)
punct(cause-4, ''-18)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drag#feet

drag :: That in turn will help drag down growth next year , it adds ./.
nsubj(help-5, That-1)
case(turn-3, in-2)
nmod:in(help-5, turn-3)
aux(help-5, will-4)
ccomp(adds-13, help-5)
ccomp(help-5, drag-6)
compound:prt(drag-6, down-7)
dobj(drag-6, growth-8)
amod(year-10, next-9)
nmod:tmod(drag-6, year-10)
punct(adds-13, ,-11)
nsubj(adds-13, it-12)
root(ROOT-0, adds-13)
punct(adds-13, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#growth

drag :: If the June deficit turns out to have been significantly wider than in May , many analysts expect the dollar to drop sharply and to drag bond prices down with it ./.
mark(turns-5, If-1)
det(deficit-4, the-2)
compound(deficit-4, June-3)
nsubj(turns-5, deficit-4)
nsubj:xsubj(wider-11, deficit-4)
advcl(expect-18, turns-5)
compound:prt(turns-5, out-6)
mark(wider-11, to-7)
aux(wider-11, have-8)
cop(wider-11, been-9)
advmod(wider-11, significantly-10)
xcomp(turns-5, wider-11)
case(May-14, than-12)
case(May-14, in-13)
nmod:in(wider-11, May-14)
punct(expect-18, ,-15)
amod(analysts-17, many-16)
nsubj(expect-18, analysts-17)
root(ROOT-0, expect-18)
det(dollar-20, the-19)
dobj(expect-18, dollar-20)
nsubj:xsubj(drop-22, dollar-20)
nsubj:xsubj(drag-26, dollar-20)
mark(drop-22, to-21)
xcomp(expect-18, drop-22)
advmod(drop-22, sharply-23)
cc(drop-22, and-24)
mark(drag-26, to-25)
xcomp(expect-18, drag-26)
conj:and(drop-22, drag-26)
compound(prices-28, bond-27)
dobj(drag-26, prices-28)
compound:prt(drag-26, down-29)
case(it-31, with-30)
nmod:with(drag-26, it-31)
punct(expect-18, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#prices

drag :: Big technology stocks , hit hard by yesterday 's downturn on Wall Street , dragged down the main over-the-counter market indicators ./.
compound(stocks-3, Big-1)
compound(stocks-3, technology-2)
nsubj(dragged-15, stocks-3)
punct(stocks-3, ,-4)
acl(stocks-3, hit-5)
advmod(hit-5, hard-6)
case(downturn-10, by-7)
nmod:poss(downturn-10, yesterday-8)
case(yesterday-8, 's-9)
nmod:by(hit-5, downturn-10)
case(Street-13, on-11)
compound(Street-13, Wall-12)
nmod:on(downturn-10, Street-13)
punct(stocks-3, ,-14)
root(ROOT-0, dragged-15)
compound:prt(dragged-15, down-16)
det(indicators-21, the-17)
amod(indicators-21, main-18)
amod(indicators-21, over-the-counter-19)
compound(indicators-21, market-20)
dobj(dragged-15, indicators-21)
punct(dragged-15, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#indicators

drag :: Oil shares , higher at the end of the morning session on a flurry of merger rumors , gave back most of their gains in the afternoon , while financials such as brokers fell , dragging down the Nikkei index ./.
compound(shares-2, Oil-1)
nsubj(gave-19, shares-2)
punct(shares-2, ,-3)
amod(shares-2, higher-4)
case(end-7, at-5)
det(end-7, the-6)
nmod:at(higher-4, end-7)
case(session-11, of-8)
det(session-11, the-9)
compound(session-11, morning-10)
nmod:of(end-7, session-11)
case(flurry-14, on-12)
det(flurry-14, a-13)
nmod:on(higher-4, flurry-14)
case(rumors-17, of-15)
compound(rumors-17, merger-16)
nmod:of(flurry-14, rumors-17)
punct(shares-2, ,-18)
root(ROOT-0, gave-19)
advmod(gave-19, back-20)
dobj(gave-19, most-21)
case(gains-24, of-22)
nmod:poss(gains-24, their-23)
nmod:of(most-21, gains-24)
case(afternoon-27, in-25)
det(afternoon-27, the-26)
nmod:in(gave-19, afternoon-27)
punct(gave-19, ,-28)
mark(fell-34, while-29)
nsubj(fell-34, financials-30)
case(brokers-33, such-31)
mwe(such-31, as-32)
nmod:such_as(financials-30, brokers-33)
advcl(gave-19, fell-34)
punct(fell-34, ,-35)
advcl(fell-34, dragging-36)
compound:prt(dragging-36, down-37)
det(index-40, the-38)
compound(index-40, Nikkei-39)
dobj(dragging-36, index-40)
punct(gave-19, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#index

drag :: The oil-service business has been dragging the company 's stock price down since the oil industry peaked in 1981 ./.
det(business-3, The-1)
compound(business-3, oil-service-2)
nsubj(dragging-6, business-3)
aux(dragging-6, has-4)
aux(dragging-6, been-5)
root(ROOT-0, dragging-6)
det(company-8, the-7)
nmod:poss(price-11, company-8)
case(company-8, 's-9)
compound(price-11, stock-10)
dobj(dragging-6, price-11)
mark(peaked-17, down-12)
mark(peaked-17, since-13)
det(industry-16, the-14)
compound(industry-16, oil-15)
nsubj(peaked-17, industry-16)
advcl(dragging-6, peaked-17)
case(1981-19, in-18)
nmod:in(peaked-17, 1981-19)
punct(dragging-6, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#price

drag :: In the latter instance , a man dressed as Christ and dragging a cross was in the demonstration ./.
case(instance-4, In-1)
det(instance-4, the-2)
amod(instance-4, latter-3)
nmod:in(demonstration-18, instance-4)
punct(demonstration-18, ,-5)
det(man-7, a-6)
nsubj(demonstration-18, man-7)
dep(man-7, dressed-8)
case(Christ-10, as-9)
nmod:as(dressed-8, Christ-10)
cc(dressed-8, and-11)
dep(man-7, dragging-12)
conj:and(dressed-8, dragging-12)
det(cross-14, a-13)
dobj(dragging-12, cross-14)
cop(demonstration-18, was-15)
case(demonstration-18, in-16)
det(demonstration-18, the-17)
root(ROOT-0, demonstration-18)
punct(demonstration-18, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#cross

drag :: While broadcasting revenue increased 9 % in the quarter , earnings were dragged down by weak national sales and Gannett 's investment in GTG Entertainment , a new TV production company headed by Grant Tinker ./.
mark(increased-4, While-1)
amod(revenue-3, broadcasting-2)
nsubj(increased-4, revenue-3)
advcl(dragged-13, increased-4)
nummod(%-6, 9-5)
dobj(increased-4, %-6)
case(quarter-9, in-7)
det(quarter-9, the-8)
nmod:in(increased-4, quarter-9)
punct(dragged-13, ,-10)
nsubjpass(dragged-13, earnings-11)
auxpass(dragged-13, were-12)
root(ROOT-0, dragged-13)
compound:prt(dragged-13, down-14)
case(sales-18, by-15)
amod(sales-18, weak-16)
amod(sales-18, national-17)
nmod:agent(dragged-13, sales-18)
cc(sales-18, and-19)
nmod:poss(investment-22, Gannett-20)
case(Gannett-20, 's-21)
nmod:agent(dragged-13, investment-22)
conj:and(sales-18, investment-22)
case(Entertainment-25, in-23)
compound(Entertainment-25, GTG-24)
nmod:in(investment-22, Entertainment-25)
punct(Entertainment-25, ,-26)
det(company-31, a-27)
amod(company-31, new-28)
compound(company-31, TV-29)
compound(company-31, production-30)
appos(Entertainment-25, company-31)
acl(company-31, headed-32)
case(Grant-34, by-33)
nmod:by(headed-32, Grant-34)
xcomp(dragged-13, Tinker-35)
punct(dragged-13, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#earnings

drag :: `` In the long run , that does more for a car 's image than if you drag your feet and wait . ''/''
punct(does-8, ``-1)
case(run-5, In-2)
det(run-5, the-3)
amod(run-5, long-4)
nmod:in(does-8, run-5)
punct(does-8, ,-6)
nsubj(does-8, that-7)
root(ROOT-0, does-8)
dobj(does-8, more-9)
case(image-14, for-10)
det(car-12, a-11)
nmod:poss(image-14, car-12)
case(car-12, 's-13)
nmod:for(more-9, image-14)
mark(drag-18, than-15)
mark(drag-18, if-16)
nsubj(drag-18, you-17)
nsubj(wait-22, you-17)
advcl(more-9, drag-18)
nmod:poss(feet-20, your-19)
dobj(drag-18, feet-20)
cc(drag-18, and-21)
advcl(more-9, wait-22)
conj:and(drag-18, wait-22)
punct(does-8, .-23)
punct(does-8, ''-24)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drag#feet

drag :: Sales are dragging for many reasons ./.
nsubj(dragging-3, Sales-1)
aux(dragging-3, are-2)
root(ROOT-0, dragging-3)
case(reasons-6, for-4)
amod(reasons-6, many-5)
nmod:for(dragging-3, reasons-6)
punct(dragging-3, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#sales

drag :: Last week , though , some of them were dragged off a train and prevented from traveling to Moscow to meet with President Reagan ./.
amod(week-2, Last-1)
nmod:tmod(dragged-10, week-2)
punct(dragged-10, ,-3)
advmod(dragged-10, though-4)
punct(dragged-10, ,-5)
nsubjpass(dragged-10, some-6)
nsubjpass(prevented-15, some-6)
case(them-8, of-7)
nmod:of(some-6, them-8)
auxpass(dragged-10, were-9)
root(ROOT-0, dragged-10)
compound:prt(dragged-10, off-11)
det(train-13, a-12)
dobj(dragged-10, train-13)
cc(dragged-10, and-14)
conj:and(dragged-10, prevented-15)
mark(traveling-17, from-16)
advcl(prevented-15, traveling-17)
case(Moscow-19, to-18)
nmod:to(traveling-17, Moscow-19)
mark(meet-21, to-20)
xcomp(traveling-17, meet-21)
case(Reagan-24, with-22)
compound(Reagan-24, President-23)
nmod:with(meet-21, Reagan-24)
punct(dragged-10, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#train

drag :: A recently proposed credit for Ecuador has yet to be completed and Brazil 's bank debt talks have dragged on for weeks longer than expected ./.
det(credit-4, A-1)
advmod(proposed-3, recently-2)
amod(credit-4, proposed-3)
nsubj(has-7, credit-4)
nsubjpass:xsubj(completed-11, credit-4)
case(Ecuador-6, for-5)
nmod:for(credit-4, Ecuador-6)
root(ROOT-0, has-7)
advmod(has-7, yet-8)
mark(completed-11, to-9)
auxpass(completed-11, be-10)
xcomp(has-7, completed-11)
cc(completed-11, and-12)
nmod:poss(talks-17, Brazil-13)
case(Brazil-13, 's-14)
compound(talks-17, bank-15)
compound(talks-17, debt-16)
nsubj(dragged-19, talks-17)
aux(dragged-19, have-18)
xcomp(has-7, dragged-19)
conj:and(completed-11, dragged-19)
compound:prt(dragged-19, on-20)
case(weeks-22, for-21)
nmod:for(dragged-19, weeks-22)
advmod(weeks-22, longer-23)
mark(expected-25, than-24)
advcl(longer-23, expected-25)
punct(has-7, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#talks

drag :: Yesterday , Wall Street analysts said they expect the state-Lilco negotiations to drag on for perhaps another three to four months ./.
nmod:tmod(said-6, Yesterday-1)
punct(said-6, ,-2)
compound(analysts-5, Wall-3)
compound(analysts-5, Street-4)
nsubj(said-6, analysts-5)
root(ROOT-0, said-6)
nsubj(expect-8, they-7)
ccomp(said-6, expect-8)
det(negotiations-11, the-9)
amod(negotiations-11, state-Lilco-10)
dobj(expect-8, negotiations-11)
nsubj:xsubj(drag-13, negotiations-11)
mark(drag-13, to-12)
xcomp(expect-8, drag-13)
compound:prt(drag-13, on-14)
case(months-21, for-15)
advmod(months-21, perhaps-16)
det(months-21, another-17)
compound(four-20, three-18)
dep(four-20, to-19)
nummod(months-21, four-20)
nmod:for(drag-13, months-21)
punct(said-6, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#negotiations

drag :: The U.S. side was angry that talks were dragging ./.
det(side-3, The-1)
compound(side-3, U.S.-2)
nsubj(angry-5, side-3)
cop(angry-5, was-4)
root(ROOT-0, angry-5)
mark(dragging-9, that-6)
nsubj(dragging-9, talks-7)
aux(dragging-9, were-8)
ccomp(angry-5, dragging-9)
punct(angry-5, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#talks

drag :: And while profits are booming at Capital Cities ' TV stations , ABC 's loss dragged down the broadcast group ./.
cc(dragged-16, And-1)
mark(booming-5, while-2)
nsubj(booming-5, profits-3)
aux(booming-5, are-4)
advcl(dragged-16, booming-5)
case(stations-11, at-6)
compound(Cities-8, Capital-7)
nmod:poss(stations-11, Cities-8)
case(Cities-8, '-9)
compound(stations-11, TV-10)
nmod:at(booming-5, stations-11)
punct(dragged-16, ,-12)
nmod:poss(loss-15, ABC-13)
case(ABC-13, 's-14)
nsubj(dragged-16, loss-15)
root(ROOT-0, dragged-16)
compound:prt(dragged-16, down-17)
det(group-20, the-18)
compound(group-20, broadcast-19)
dobj(dragged-16, group-20)
punct(dragged-16, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#group

drag :: The Japanese government is still reeling from U.S. accusations last summer that MITI dragged its feet in investigating the shipment by the Toshiba unit , Toshiba Machine Co . , of sophisticated milling machines to a Soviet shipyard in 1983 and 1984 ./.
det(government-3, The-1)
amod(government-3, Japanese-2)
nsubj(reeling-6, government-3)
aux(reeling-6, is-4)
advmod(reeling-6, still-5)
root(ROOT-0, reeling-6)
case(accusations-9, from-7)
compound(accusations-9, U.S.-8)
nmod:from(reeling-6, accusations-9)
amod(summer-11, last-10)
nmod:tmod(reeling-6, summer-11)
mark(dragged-14, that-12)
nsubj(dragged-14, MITI-13)
ccomp(reeling-6, dragged-14)
nmod:poss(feet-16, its-15)
dobj(dragged-14, feet-16)
mark(investigating-18, in-17)
advcl(dragged-14, investigating-18)
det(shipment-20, the-19)
dobj(investigating-18, shipment-20)
case(unit-24, by-21)
det(unit-24, the-22)
compound(unit-24, Toshiba-23)
nmod:by(shipment-20, unit-24)
punct(unit-24, ,-25)
compound(Co-28, Toshiba-26)
compound(Co-28, Machine-27)
appos(unit-24, Co-28)
punct(reeling-6, .-29)
root(ROOT-0, ,-1)
case(machines-5, of-2)
amod(machines-5, sophisticated-3)
compound(machines-5, milling-4)
root(,-1, machines-5)
case(shipyard-9, to-6)
det(shipyard-9, a-7)
amod(shipyard-9, Soviet-8)
nmod:to(machines-5, shipyard-9)
case(1983-11, in-10)
nmod:in(machines-5, 1983-11)
cc(1983-11, and-12)
nmod:in(machines-5, 1984-13)
conj:and(1983-11, 1984-13)
punct(machines-5, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#feet

drag :: -- Last September , 22-year-old Kimberly Isaac of Baton Rouge , La . , was badly scraped over a large part of her body when a 1977 LTD she had just parked in a grocery-store lot backed up , knocking her over and dragging her in circles ./.
root(ROOT-0, ---1)
amod(September-3, Last-2)
root(---1, September-3)
punct(September-3, ,-4)
amod(Isaac-7, 22-year-old-5)
compound(Isaac-7, Kimberly-6)
root(,-4, Isaac-7)
case(Rouge-10, of-8)
compound(Rouge-10, Baton-9)
nmod:of(Isaac-7, Rouge-10)
punct(Rouge-10, ,-11)
appos(Rouge-10, La-12)
punct(Isaac-7, .-13)
punct(scraped-4, ,-1)
auxpass(scraped-4, was-2)
advmod(scraped-4, badly-3)
root(ROOT-0, scraped-4)
case(part-8, over-5)
det(part-8, a-6)
amod(part-8, large-7)
nmod:over(scraped-4, part-8)
case(body-11, of-9)
nmod:poss(body-11, her-10)
nmod:of(part-8, body-11)
advmod(knocking-27, when-12)
det(LTD-15, a-13)
nummod(LTD-15, 1977-14)
nsubj(knocking-27, LTD-15)
nsubj(dragging-31, LTD-15)
nsubj(parked-19, she-16)
aux(parked-19, had-17)
advmod(parked-19, just-18)
acl:relcl(LTD-15, parked-19)
case(lot-23, in-20)
det(lot-23, a-21)
amod(lot-23, grocery-store-22)
nmod:in(parked-19, lot-23)
acl(lot-23, backed-24)
compound:prt(backed-24, up-25)
punct(LTD-15, ,-26)
advcl(scraped-4, knocking-27)
dobj(knocking-27, her-28)
compound:prt(knocking-27, over-29)
cc(knocking-27, and-30)
advcl(scraped-4, dragging-31)
conj:and(knocking-27, dragging-31)
dobj(dragging-31, her-32)
case(circles-34, in-33)
nmod:in(dragging-31, circles-34)
punct(scraped-4, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#her

drag :: -- With the only refinery in Panama , Texaco was dragged into a controversy with the Reagan administration over tax payments to the Noriega regime ; it now has stopped making such payments ./.
punct(dragged-11, ---1)
case(refinery-5, With-2)
det(refinery-5, the-3)
amod(refinery-5, only-4)
nmod:with(dragged-11, refinery-5)
case(Panama-7, in-6)
nmod:in(refinery-5, Panama-7)
punct(dragged-11, ,-8)
nsubjpass(dragged-11, Texaco-9)
auxpass(dragged-11, was-10)
root(ROOT-0, dragged-11)
case(controversy-14, into-12)
det(controversy-14, a-13)
nmod:into(dragged-11, controversy-14)
case(administration-18, with-15)
det(administration-18, the-16)
compound(administration-18, Reagan-17)
nmod:with(controversy-14, administration-18)
case(payments-21, over-19)
compound(payments-21, tax-20)
nmod:over(controversy-14, payments-21)
case(regime-25, to-22)
det(regime-25, the-23)
compound(regime-25, Noriega-24)
nmod:to(payments-21, regime-25)
punct(dragged-11, ;-26)
nsubj(stopped-30, it-27)
advmod(stopped-30, now-28)
aux(stopped-30, has-29)
parataxis(dragged-11, stopped-30)
xcomp(stopped-30, making-31)
amod(payments-33, such-32)
dobj(making-31, payments-33)
punct(dragged-11, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#texaco

drag :: But yesterday it was a dollar-boosting dispatch from a Japanese news service that was primarily responsible for dragging precious metals prices back down , analysts said ./.
cc(dollar-boosting-6, But-1)
nmod:tmod(dollar-boosting-6, yesterday-2)
nsubj(dollar-boosting-6, it-3)
cop(dollar-boosting-6, was-4)
det(dollar-boosting-6, a-5)
ccomp(said-26, dollar-boosting-6)
dep(dollar-boosting-6, dispatch-7)
case(service-12, from-8)
det(service-12, a-9)
amod(service-12, Japanese-10)
compound(service-12, news-11)
nmod:from(dispatch-7, service-12)
nsubj(responsible-16, service-12)
ref(service-12, that-13)
cop(responsible-16, was-14)
advmod(responsible-16, primarily-15)
acl:relcl(service-12, responsible-16)
mark(dragging-18, for-17)
advcl(responsible-16, dragging-18)
amod(prices-21, precious-19)
compound(prices-21, metals-20)
dobj(dragging-18, prices-21)
advmod(down-23, back-22)
advmod(dragging-18, down-23)
punct(said-26, ,-24)
nsubj(said-26, analysts-25)
root(ROOT-0, said-26)
punct(said-26, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#prices

drag :: Failure to pull off the buy-back can only add to problems that have dragged Home Shopping 's stock down from a peak of $ 47 a share in January 1987 and left management with credibility problems ./.
nsubj(add-9, Failure-1)
mark(pull-3, to-2)
acl(Failure-1, pull-3)
compound:prt(pull-3, off-4)
det(buy-back-6, the-5)
dobj(pull-3, buy-back-6)
aux(add-9, can-7)
advmod(add-9, only-8)
root(ROOT-0, add-9)
case(problems-11, to-10)
nmod:to(add-9, problems-11)
nsubj(dragged-14, problems-11)
nsubj(left-32, problems-11)
ref(problems-11, that-12)
aux(dragged-14, have-13)
acl:relcl(problems-11, dragged-14)
compound(Shopping-16, Home-15)
nmod:poss(stock-18, Shopping-16)
case(Shopping-16, 's-17)
dobj(dragged-14, stock-18)
advmod(dragged-14, down-19)
case(peak-22, from-20)
det(peak-22, a-21)
nmod:from(down-19, peak-22)
case(47-25, of-23)
dep(47-25, $-24)
nmod:of(peak-22, 47-25)
det(share-27, a-26)
nmod:npmod(47-25, share-27)
case(January-29, in-28)
nmod:in(peak-22, January-29)
nummod(January-29, 1987-30)
cc(dragged-14, and-31)
acl:relcl(problems-11, left-32)
conj:and(dragged-14, left-32)
dobj(left-32, management-33)
case(problems-36, with-34)
compound(problems-36, credibility-35)
nmod:with(left-32, problems-36)
punct(add-9, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#stock

drag :: That implies production slowdowns , which could result in job losses and weaker consumer spending , which in turn would cause the economy to drag its heels further ./.
nsubj(implies-2, That-1)
root(ROOT-0, implies-2)
compound(slowdowns-4, production-3)
dobj(implies-2, slowdowns-4)
nsubj(result-8, slowdowns-4)
punct(slowdowns-4, ,-5)
ref(slowdowns-4, which-6)
aux(result-8, could-7)
acl:relcl(slowdowns-4, result-8)
case(losses-11, in-9)
compound(losses-11, job-10)
nmod:in(result-8, losses-11)
nsubj(cause-21, losses-11)
cc(losses-11, and-12)
amod(spending-15, weaker-13)
compound(spending-15, consumer-14)
nmod:in(result-8, spending-15)
conj:and(losses-11, spending-15)
nsubj(cause-21, spending-15)
punct(losses-11, ,-16)
ref(losses-11, which-17)
case(turn-19, in-18)
nmod:in(cause-21, turn-19)
aux(cause-21, would-20)
acl:relcl(losses-11, cause-21)
det(economy-23, the-22)
dobj(cause-21, economy-23)
nsubj:xsubj(drag-25, economy-23)
mark(drag-25, to-24)
xcomp(cause-21, drag-25)
nmod:poss(heels-27, its-26)
dobj(drag-25, heels-27)
advmod(drag-25, further-28)
punct(implies-2, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#heels

drag :: `` Things are really rapidly falling into place , '' said a Navy official who previously had complained that the Pentagon brass was dragging its feet on the project ./.
punct(said-11, ``-1)
nsubj(falling-6, Things-2)
aux(falling-6, are-3)
advmod(falling-6, really-4)
advmod(falling-6, rapidly-5)
ccomp(said-11, falling-6)
case(place-8, into-7)
nmod:into(falling-6, place-8)
punct(said-11, ,-9)
punct(said-11, ''-10)
root(ROOT-0, said-11)
det(official-14, a-12)
compound(official-14, Navy-13)
nsubj(said-11, official-14)
nsubj(complained-18, official-14)
ref(official-14, who-15)
advmod(complained-18, previously-16)
aux(complained-18, had-17)
acl:relcl(official-14, complained-18)
mark(dragging-24, that-19)
det(brass-22, the-20)
compound(brass-22, Pentagon-21)
nsubj(dragging-24, brass-22)
aux(dragging-24, was-23)
ccomp(complained-18, dragging-24)
nmod:poss(feet-26, its-25)
dobj(dragging-24, feet-26)
case(project-29, on-27)
det(project-29, the-28)
nmod:on(dragging-24, project-29)
punct(said-11, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#feet

drag :: However , a lawsuit could drag on for years ./.
advmod(drag-6, However-1)
punct(drag-6, ,-2)
det(lawsuit-4, a-3)
nsubj(drag-6, lawsuit-4)
aux(drag-6, could-5)
root(ROOT-0, drag-6)
compound:prt(drag-6, on-7)
case(years-9, for-8)
nmod:for(drag-6, years-9)
punct(drag-6, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#lawsuit

drag :: The international debt crisis will drag on ./.
det(crisis-4, The-1)
amod(crisis-4, international-2)
compound(crisis-4, debt-3)
nsubj(drag-6, crisis-4)
aux(drag-6, will-5)
root(ROOT-0, drag-6)
compound:prt(drag-6, on-7)
punct(drag-6, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#crisis

drag :: Before there was much time for further decorating , the lady was dragged off to the guillotine ./.
mark(was-3, Before-1)
expl(was-3, there-2)
advcl(dragged-13, was-3)
amod(time-5, much-4)
nsubj(was-3, time-5)
case(decorating-8, for-6)
amod(decorating-8, further-7)
nmod:for(time-5, decorating-8)
punct(dragged-13, ,-9)
det(lady-11, the-10)
nsubjpass(dragged-13, lady-11)
auxpass(dragged-13, was-12)
root(ROOT-0, dragged-13)
compound:prt(dragged-13, off-14)
case(guillotine-17, to-15)
det(guillotine-17, the-16)
nmod:to(dragged-13, guillotine-17)
punct(dragged-13, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#lady

drag :: A recession could trip up the Canadian dollar 's recovery and a resumption of the dollar 's decline against other major currencies would almost certainly drag the Canadian dollar down too ./.
det(recession-2, A-1)
nsubj(trip-4, recession-2)
aux(trip-4, could-3)
root(ROOT-0, trip-4)
case(recovery-10, up-5)
det(dollar-8, the-6)
amod(dollar-8, Canadian-7)
nmod:poss(recovery-10, dollar-8)
case(dollar-8, 's-9)
nmod:up(trip-4, recovery-10)
cc(trip-4, and-11)
det(resumption-13, a-12)
nsubj(drag-26, resumption-13)
case(decline-18, of-14)
det(dollar-16, the-15)
nmod:poss(decline-18, dollar-16)
case(dollar-16, 's-17)
nmod:of(resumption-13, decline-18)
case(currencies-22, against-19)
amod(currencies-22, other-20)
amod(currencies-22, major-21)
nmod:against(decline-18, currencies-22)
aux(drag-26, would-23)
advmod(certainly-25, almost-24)
advmod(drag-26, certainly-25)
conj:and(trip-4, drag-26)
det(dollar-29, the-27)
amod(dollar-29, Canadian-28)
dobj(drag-26, dollar-29)
advmod(too-31, down-30)
advmod(drag-26, too-31)
punct(trip-4, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#dollar

drag :: In fact , the biggest problem facing a Jimmy Snyder or Gary Hart today is n't the loss of job or candidacy but the likelihood that he will have to drag his offense forever , like a tin bell , all across the land ./.
case(fact-2, In-1)
nmod:in(loss-18, fact-2)
punct(loss-18, ,-3)
det(problem-6, the-4)
amod(problem-6, biggest-5)
nsubj(loss-18, problem-6)
acl(problem-6, facing-7)
det(Snyder-10, a-8)
compound(Snyder-10, Jimmy-9)
dobj(facing-7, Snyder-10)
cc(Snyder-10, or-11)
compound(Hart-13, Gary-12)
dobj(facing-7, Hart-13)
conj:or(Snyder-10, Hart-13)
nmod:tmod(facing-7, today-14)
cop(loss-18, is-15)
neg(loss-18, n't-16)
det(loss-18, the-17)
root(ROOT-0, loss-18)
case(job-20, of-19)
nmod:of(loss-18, job-20)
cc(job-20, or-21)
nmod:of(loss-18, candidacy-22)
conj:or(job-20, candidacy-22)
cc(loss-18, but-23)
det(likelihood-25, the-24)
conj:but(loss-18, likelihood-25)
mark(have-29, that-26)
nsubj(have-29, he-27)
nsubj:xsubj(drag-31, he-27)
aux(have-29, will-28)
ccomp(likelihood-25, have-29)
mark(drag-31, to-30)
xcomp(have-29, drag-31)
nmod:poss(offense-33, his-32)
dobj(drag-31, offense-33)
advmod(drag-31, forever-34)
punct(likelihood-25, ,-35)
case(bell-39, like-36)
det(bell-39, a-37)
compound(bell-39, tin-38)
nmod:like(likelihood-25, bell-39)
punct(likelihood-25, ,-40)
dep(land-44, all-41)
case(land-44, across-42)
det(land-44, the-43)
nmod:across(likelihood-25, land-44)
punct(loss-18, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#offense

drag :: Mr. Bluey 's job is difficult because accounting investigations , unlike insider-trading cases , can drag on and draw little fanfare ./.
compound(Bluey-2, Mr.-1)
nmod:poss(job-4, Bluey-2)
case(Bluey-2, 's-3)
nsubj(difficult-6, job-4)
cop(difficult-6, is-5)
root(ROOT-0, difficult-6)
mark(drag-16, because-7)
compound(investigations-9, accounting-8)
nsubj(drag-16, investigations-9)
nsubj(draw-19, investigations-9)
punct(drag-16, ,-10)
case(cases-13, unlike-11)
compound(cases-13, insider-trading-12)
nmod:unlike(drag-16, cases-13)
punct(drag-16, ,-14)
aux(drag-16, can-15)
advcl(difficult-6, drag-16)
compound:prt(drag-16, on-17)
cc(drag-16, and-18)
advcl(difficult-6, draw-19)
conj:and(drag-16, draw-19)
amod(fanfare-21, little-20)
dobj(draw-19, fanfare-21)
punct(difficult-6, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#investigations

drag :: -- Last September , 22-year-old Kimberly Isaac of Baton Rouge , La . , was badly scraped over a large part of her body when a 1977 LTD she had just parked in a grocery-store lot backed up , knocking her over and dragging her in circles ./.
root(ROOT-0, ---1)
amod(September-3, Last-2)
root(---1, September-3)
punct(September-3, ,-4)
amod(Isaac-7, 22-year-old-5)
compound(Isaac-7, Kimberly-6)
root(,-4, Isaac-7)
case(Rouge-10, of-8)
compound(Rouge-10, Baton-9)
nmod:of(Isaac-7, Rouge-10)
punct(Rouge-10, ,-11)
appos(Rouge-10, La-12)
punct(Isaac-7, .-13)
punct(scraped-4, ,-1)
auxpass(scraped-4, was-2)
advmod(scraped-4, badly-3)
root(ROOT-0, scraped-4)
case(part-8, over-5)
det(part-8, a-6)
amod(part-8, large-7)
nmod:over(scraped-4, part-8)
case(body-11, of-9)
nmod:poss(body-11, her-10)
nmod:of(part-8, body-11)
advmod(knocking-27, when-12)
det(LTD-15, a-13)
nummod(LTD-15, 1977-14)
nsubj(knocking-27, LTD-15)
nsubj(dragging-31, LTD-15)
nsubj(parked-19, she-16)
aux(parked-19, had-17)
advmod(parked-19, just-18)
acl:relcl(LTD-15, parked-19)
case(lot-23, in-20)
det(lot-23, a-21)
amod(lot-23, grocery-store-22)
nmod:in(parked-19, lot-23)
acl(lot-23, backed-24)
compound:prt(backed-24, up-25)
punct(LTD-15, ,-26)
advcl(scraped-4, knocking-27)
dobj(knocking-27, her-28)
compound:prt(knocking-27, over-29)
cc(knocking-27, and-30)
advcl(scraped-4, dragging-31)
conj:and(knocking-27, dragging-31)
dobj(dragging-31, her-32)
case(circles-34, in-33)
nmod:in(dragging-31, circles-34)
punct(scraped-4, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#her

drag :: `` Most people can not believe that in the late 1980s this racist stereotype is still in existence anywhere , '' says Dara Demmings , an Interfaith Center executive , who says the company is dragging its feet ./.
punct(believe-6, ``-1)
amod(people-3, Most-2)
nsubj(believe-6, people-3)
aux(believe-6, can-4)
neg(believe-6, not-5)
dep(says-22, believe-6)
mark(existence-18, that-7)
case(1980s-11, in-8)
det(1980s-11, the-9)
amod(1980s-11, late-10)
nmod:in(existence-18, 1980s-11)
det(stereotype-14, this-12)
amod(stereotype-14, racist-13)
nsubj(existence-18, stereotype-14)
cop(existence-18, is-15)
advmod(existence-18, still-16)
case(existence-18, in-17)
ccomp(believe-6, existence-18)
advmod(existence-18, anywhere-19)
punct(believe-6, ,-20)
punct(believe-6, ''-21)
root(ROOT-0, says-22)
compound(Demmings-24, Dara-23)
nsubj(says-22, Demmings-24)
nsubj(says-32, Demmings-24)
punct(Demmings-24, ,-25)
det(executive-29, an-26)
compound(executive-29, Interfaith-27)
compound(executive-29, Center-28)
appos(Demmings-24, executive-29)
punct(Demmings-24, ,-30)
ref(Demmings-24, who-31)
acl:relcl(Demmings-24, says-32)
det(company-34, the-33)
nsubj(dragging-36, company-34)
aux(dragging-36, is-35)
ccomp(says-32, dragging-36)
nmod:poss(feet-38, its-37)
dobj(dragging-36, feet-38)
punct(says-22, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#feet

drag :: The U.S. and Pakistan long had sought such a `` front-loading '' of the agreement to ensure that the Soviets do n't reap the political benefits of beginning a withdrawal , and then drag their feet in carrying it out ./.
det(U.S.-2, The-1)
nsubj(sought-7, U.S.-2)
nsubj(drag-34, U.S.-2)
cc(U.S.-2, and-3)
compound(long-5, Pakistan-4)
conj:and(U.S.-2, long-5)
nsubj(sought-7, long-5)
aux(sought-7, had-6)
root(ROOT-0, sought-7)
det:predet(front-loading-11, such-8)
det(front-loading-11, a-9)
punct(front-loading-11, ``-10)
dobj(sought-7, front-loading-11)
punct(front-loading-11, ''-12)
case(agreement-15, of-13)
det(agreement-15, the-14)
nmod:of(front-loading-11, agreement-15)
mark(ensure-17, to-16)
advcl(sought-7, ensure-17)
mark(reap-23, that-18)
det(Soviets-20, the-19)
nsubj(reap-23, Soviets-20)
aux(reap-23, do-21)
neg(reap-23, n't-22)
ccomp(ensure-17, reap-23)
det(benefits-26, the-24)
amod(benefits-26, political-25)
dobj(reap-23, benefits-26)
mark(beginning-28, of-27)
acl(benefits-26, beginning-28)
det(withdrawal-30, a-29)
dobj(beginning-28, withdrawal-30)
punct(sought-7, ,-31)
cc(sought-7, and-32)
advmod(drag-34, then-33)
conj:and(sought-7, drag-34)
nmod:poss(feet-36, their-35)
dobj(drag-34, feet-36)
mark(carrying-38, in-37)
advcl(drag-34, carrying-38)
dobj(carrying-38, it-39)
compound:prt(carrying-38, out-40)
punct(sought-7, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#feet

drag :: Public anger reached its zenith April 30 , 1982 , when angry mobs stopped three taxis bearing margis , dragged them from their cars , bludgeoned and poured acid on them and finally burned them to death ./.
amod(anger-2, Public-1)
nsubj(reached-3, anger-2)
root(ROOT-0, reached-3)
nmod:poss(April-6, its-4)
compound(April-6, zenith-5)
nsubj(dragged-20, April-6)
nummod(April-6, 30-7)
punct(April-6, ,-8)
nummod(April-6, 1982-9)
punct(April-6, ,-10)
advmod(stopped-14, when-11)
amod(mobs-13, angry-12)
nsubj(stopped-14, mobs-13)
acl:relcl(April-6, stopped-14)
nummod(taxis-16, three-15)
dobj(stopped-14, taxis-16)
acl(taxis-16, bearing-17)
dobj(bearing-17, margis-18)
punct(April-6, ,-19)
ccomp(reached-3, dragged-20)
dobj(dragged-20, them-21)
case(cars-24, from-22)
nmod:poss(cars-24, their-23)
nmod:from(dragged-20, cars-24)
punct(cars-24, ,-25)
dep(cars-24, bludgeoned-26)
cc(bludgeoned-26, and-27)
amod(acid-29, poured-28)
dep(cars-24, acid-29)
conj:and(bludgeoned-26, acid-29)
case(them-31, on-30)
nmod:on(bludgeoned-26, them-31)
cc(bludgeoned-26, and-32)
advmod(burned-34, finally-33)
dep(cars-24, burned-34)
conj:and(bludgeoned-26, burned-34)
dobj(burned-34, them-35)
case(death-37, to-36)
nmod:to(burned-34, death-37)
punct(reached-3, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#them

drag :: Cautious bureaucrats drag their feet while progressive colleagues and scientists urge reform ./.
amod(bureaucrats-2, Cautious-1)
nsubj(drag-3, bureaucrats-2)
root(ROOT-0, drag-3)
nmod:poss(feet-5, their-4)
dobj(drag-3, feet-5)
mark(urge-11, while-6)
amod(colleagues-8, progressive-7)
nsubj(urge-11, colleagues-8)
cc(colleagues-8, and-9)
conj:and(colleagues-8, scientists-10)
nsubj(urge-11, scientists-10)
advcl(drag-3, urge-11)
dobj(urge-11, reform-12)
punct(drag-3, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#feet

drag :: That implies production slowdowns , which could result in job losses and weaker consumer spending , which in turn would cause the economy to drag its heels further ./.
nsubj(implies-2, That-1)
root(ROOT-0, implies-2)
compound(slowdowns-4, production-3)
dobj(implies-2, slowdowns-4)
nsubj(result-8, slowdowns-4)
punct(slowdowns-4, ,-5)
ref(slowdowns-4, which-6)
aux(result-8, could-7)
acl:relcl(slowdowns-4, result-8)
case(losses-11, in-9)
compound(losses-11, job-10)
nmod:in(result-8, losses-11)
nsubj(cause-21, losses-11)
cc(losses-11, and-12)
amod(spending-15, weaker-13)
compound(spending-15, consumer-14)
nmod:in(result-8, spending-15)
conj:and(losses-11, spending-15)
nsubj(cause-21, spending-15)
punct(losses-11, ,-16)
ref(losses-11, which-17)
case(turn-19, in-18)
nmod:in(cause-21, turn-19)
aux(cause-21, would-20)
acl:relcl(losses-11, cause-21)
det(economy-23, the-22)
dobj(cause-21, economy-23)
nsubj:xsubj(drag-25, economy-23)
mark(drag-25, to-24)
xcomp(cause-21, drag-25)
nmod:poss(heels-27, its-26)
dobj(drag-25, heels-27)
advmod(drag-25, further-28)
punct(implies-2, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#heels

drag :: `` He could n't take being dragged in ./.
root(ROOT-0, ``-1)
nsubj(take-5, He-2)
aux(take-5, could-3)
neg(take-5, n't-4)
root(``-1, take-5)
auxpass(dragged-7, being-6)
xcomp(take-5, dragged-7)
compound:prt(dragged-7, in-8)
punct(take-5, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#being

drag :: The OSU sled 's No. 1 advantage , he says , is an aerodynamic shape that reduces drag 20 % to 25 % ./.
det(sled-3, The-1)
compound(sled-3, OSU-2)
nmod:poss(advantage-7, sled-3)
case(sled-3, 's-4)
compound(advantage-7, No.-5)
nummod(advantage-7, 1-6)
nsubj(shape-15, advantage-7)
punct(says-10, ,-8)
nsubj(says-10, he-9)
parataxis(shape-15, says-10)
punct(says-10, ,-11)
cop(shape-15, is-12)
det(shape-15, an-13)
amod(shape-15, aerodynamic-14)
root(ROOT-0, shape-15)
nsubj(reduces-17, shape-15)
ref(shape-15, that-16)
acl:relcl(shape-15, reduces-17)
dobj(reduces-17, drag-18)
amod(drag-18, 20-19)
dep(20-19, %-20)
case(%-23, to-21)
nummod(%-23, 25-22)
nmod:to(%-20, %-23)
punct(shape-15, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

drag :: A recession could trip up the Canadian dollar 's recovery and a resumption of the dollar 's decline against other major currencies would almost certainly drag the Canadian dollar down too ./.
det(recession-2, A-1)
nsubj(trip-4, recession-2)
aux(trip-4, could-3)
root(ROOT-0, trip-4)
case(recovery-10, up-5)
det(dollar-8, the-6)
amod(dollar-8, Canadian-7)
nmod:poss(recovery-10, dollar-8)
case(dollar-8, 's-9)
nmod:up(trip-4, recovery-10)
cc(trip-4, and-11)
det(resumption-13, a-12)
nsubj(drag-26, resumption-13)
case(decline-18, of-14)
det(dollar-16, the-15)
nmod:poss(decline-18, dollar-16)
case(dollar-16, 's-17)
nmod:of(resumption-13, decline-18)
case(currencies-22, against-19)
amod(currencies-22, other-20)
amod(currencies-22, major-21)
nmod:against(decline-18, currencies-22)
aux(drag-26, would-23)
advmod(certainly-25, almost-24)
advmod(drag-26, certainly-25)
conj:and(trip-4, drag-26)
det(dollar-29, the-27)
amod(dollar-29, Canadian-28)
dobj(drag-26, dollar-29)
advmod(too-31, down-30)
advmod(drag-26, too-31)
punct(trip-4, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#dollar

drag :: Mr. McKay has just dragged into the mud the reputation of a former prime minister and current foreign minister of one of this country 's closest allies and in the process spotlighted the political sensitivities of the volatile Middle East ./.
compound(McKay-2, Mr.-1)
nsubj(dragged-5, McKay-2)
aux(dragged-5, has-3)
advmod(dragged-5, just-4)
root(ROOT-0, dragged-5)
case(mud-8, into-6)
det(mud-8, the-7)
nmod:into(dragged-5, mud-8)
det(reputation-10, the-9)
nsubj(spotlighted-32, reputation-10)
case(minister-15, of-11)
det(minister-15, a-12)
amod(minister-15, former-13)
compound(minister-15, prime-14)
nmod:of(reputation-10, minister-15)
cc(minister-15, and-16)
amod(minister-19, current-17)
amod(minister-19, foreign-18)
nmod:of(reputation-10, minister-19)
conj:and(minister-15, minister-19)
case(one-21, of-20)
nmod:of(minister-19, one-21)
case(allies-27, of-22)
det(country-24, this-23)
nmod:poss(allies-27, country-24)
case(country-24, 's-25)
amod(allies-27, closest-26)
nmod:of(one-21, allies-27)
cc(reputation-10, and-28)
case(process-31, in-29)
det(process-31, the-30)
conj:and(reputation-10, process-31)
nsubj(spotlighted-32, process-31)
ccomp(dragged-5, spotlighted-32)
det(sensitivities-35, the-33)
amod(sensitivities-35, political-34)
dobj(spotlighted-32, sensitivities-35)
case(East-40, of-36)
det(East-40, the-37)
amod(East-40, volatile-38)
compound(East-40, Middle-39)
nmod:of(sensitivities-35, East-40)
punct(dragged-5, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#mckay

drag :: Yesterday , Alan J. Brody , Comex chairman , president and chief executive officer , accused Nymex of dragging its feet on the closely watched talks ./.
nmod:tmod(accused-16, Yesterday-1)
punct(accused-16, ,-2)
compound(Brody-5, Alan-3)
compound(Brody-5, J.-4)
nsubj(accused-16, Brody-5)
punct(Brody-5, ,-6)
compound(chairman-8, Comex-7)
appos(Brody-5, chairman-8)
punct(chairman-8, ,-9)
appos(chairman-8, president-10)
cc(president-10, and-11)
amod(officer-14, chief-12)
compound(officer-14, executive-13)
appos(chairman-8, officer-14)
conj:and(president-10, officer-14)
punct(chairman-8, ,-15)
root(ROOT-0, accused-16)
dobj(accused-16, Nymex-17)
mark(dragging-19, of-18)
advcl(accused-16, dragging-19)
nmod:poss(feet-21, its-20)
dobj(dragging-19, feet-21)
case(talks-26, on-22)
det(talks-26, the-23)
advmod(watched-25, closely-24)
amod(talks-26, watched-25)
nmod:on(dragging-19, talks-26)
punct(accused-16, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#feet

drag :: Even so , the biggest issues on the National Association of Securities Dealers automated quotation service did better yesterday than those in the Dow , which was dragged down by disappointing special earnings gains reported by IBM ./.
advmod(so-2, Even-1)
advmod(did-17, so-2)
punct(did-17, ,-3)
det(issues-6, the-4)
amod(issues-6, biggest-5)
nsubj(did-17, issues-6)
case(Association-10, on-7)
det(Association-10, the-8)
compound(Association-10, National-9)
nmod:on(issues-6, Association-10)
case(service-16, of-11)
compound(service-16, Securities-12)
compound(service-16, Dealers-13)
compound(service-16, automated-14)
compound(service-16, quotation-15)
nmod:of(Association-10, service-16)
root(ROOT-0, did-17)
amod(yesterday-19, better-18)
nmod:tmod(did-17, yesterday-19)
case(those-21, than-20)
nmod:than(did-17, those-21)
case(Dow-24, in-22)
det(Dow-24, the-23)
nmod:in(those-21, Dow-24)
nsubjpass(dragged-28, Dow-24)
punct(Dow-24, ,-25)
ref(Dow-24, which-26)
auxpass(dragged-28, was-27)
acl:relcl(Dow-24, dragged-28)
compound:prt(dragged-28, down-29)
case(gains-34, by-30)
amod(gains-34, disappointing-31)
amod(gains-34, special-32)
compound(gains-34, earnings-33)
nmod:agent(dragged-28, gains-34)
acl(gains-34, reported-35)
case(IBM-37, by-36)
nmod:by(reported-35, IBM-37)
punct(did-17, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#dow

drag :: Johnson was then moved in other conversational directions , but the conclusion of his thought was clear: It 's tough to move fast when you 're dragging a tree ./.
nsubjpass(moved-4, Johnson-1)
auxpass(moved-4, was-2)
advmod(moved-4, then-3)
root(ROOT-0, moved-4)
case(directions-8, in-5)
amod(directions-8, other-6)
amod(directions-8, conversational-7)
nmod:in(moved-4, directions-8)
punct(moved-4, ,-9)
cc(moved-4, but-10)
det(conclusion-12, the-11)
nsubj(clear-17, conclusion-12)
case(thought-15, of-13)
nmod:poss(thought-15, his-14)
nmod:of(conclusion-12, thought-15)
cop(clear-17, was-16)
conj:but(moved-4, clear-17)
punct(moved-4, :-18)
nsubj(tough-21, It-19)
nsubj:xsubj(move-23, It-19)
cop(tough-21, 's-20)
parataxis(moved-4, tough-21)
mark(move-23, to-22)
xcomp(tough-21, move-23)
advmod(move-23, fast-24)
advmod(dragging-28, when-25)
nsubj(dragging-28, you-26)
aux(dragging-28, 're-27)
advcl(move-23, dragging-28)
det(tree-30, a-29)
dobj(dragging-28, tree-30)
punct(moved-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#tree

drag :: The Peloponnesian War , that devastating conflict between Sparta and Athens that broke out in 431 B.C. and dragged on until 404 B.C . , has long been regarded as the turning point in the career of the Athenian experiment in democracy ./.
det(War-3, The-1)
amod(War-3, Peloponnesian-2)
root(ROOT-0, War-3)
punct(War-3, ,-4)
appos(War-3, that-5)
amod(conflict-7, devastating-6)
dep(that-5, conflict-7)
nsubj(broke-13, conflict-7)
nsubj(dragged-19, conflict-7)
case(Sparta-9, between-8)
nmod:between(conflict-7, Sparta-9)
cc(Sparta-9, and-10)
nmod:between(conflict-7, Athens-11)
conj:and(Sparta-9, Athens-11)
ref(conflict-7, that-12)
acl:relcl(conflict-7, broke-13)
compound:prt(broke-13, out-14)
case(B.C.-17, in-15)
nummod(B.C.-17, 431-16)
nmod:in(broke-13, B.C.-17)
cc(broke-13, and-18)
acl:relcl(conflict-7, dragged-19)
conj:and(broke-13, dragged-19)
compound:prt(dragged-19, on-20)
case(B.C-23, until-21)
nummod(B.C-23, 404-22)
nmod:until(dragged-19, B.C-23)
punct(War-3, .-24)
punct(regarded-5, ,-1)
aux(regarded-5, has-2)
advmod(regarded-5, long-3)
auxpass(regarded-5, been-4)
root(ROOT-0, regarded-5)
case(point-9, as-6)
det(point-9, the-7)
compound(point-9, turning-8)
nmod:as(regarded-5, point-9)
case(career-12, in-10)
det(career-12, the-11)
nmod:in(point-9, career-12)
case(experiment-16, of-13)
det(experiment-16, the-14)
amod(experiment-16, Athenian-15)
nmod:of(career-12, experiment-16)
case(democracy-18, in-17)
nmod:in(experiment-16, democracy-18)
punct(regarded-5, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#conflict

drag :: It began to drag us into it , '' says Richard Behar , the 27-year-old magazine writer who founded the group ./.
nsubj(began-2, It-1)
nsubj:xsubj(drag-4, It-1)
ccomp(says-10, began-2)
mark(drag-4, to-3)
xcomp(began-2, drag-4)
dobj(drag-4, us-5)
case(it-7, into-6)
nmod:into(drag-4, it-7)
punct(says-10, ,-8)
punct(says-10, ''-9)
root(ROOT-0, says-10)
compound(Behar-12, Richard-11)
nsubj(says-10, Behar-12)
punct(Behar-12, ,-13)
det(writer-17, the-14)
amod(writer-17, 27-year-old-15)
compound(writer-17, magazine-16)
appos(Behar-12, writer-17)
nsubj(founded-19, writer-17)
ref(writer-17, who-18)
acl:relcl(writer-17, founded-19)
det(group-21, the-20)
dobj(founded-19, group-21)
punct(says-10, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#us

drag :: But as the dispute over Nagorno-Karabakh has dragged on , the mood here has grown increasingly anti-Russian ./.
cc(grown-15, But-1)
mark(dragged-8, as-2)
det(dispute-4, the-3)
nsubj(dragged-8, dispute-4)
case(Nagorno-Karabakh-6, over-5)
nmod:over(dispute-4, Nagorno-Karabakh-6)
aux(dragged-8, has-7)
advcl(grown-15, dragged-8)
compound:prt(dragged-8, on-9)
punct(grown-15, ,-10)
det(mood-12, the-11)
nsubj(grown-15, mood-12)
advmod(mood-12, here-13)
aux(grown-15, has-14)
root(ROOT-0, grown-15)
advmod(anti-Russian-17, increasingly-16)
xcomp(grown-15, anti-Russian-17)
punct(grown-15, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#dispute

drag :: Though Telepictures was considered a high-flying entrepreneurial company when it merged with Lorimar , Lorimar 's troubles dragged the company down after the merger , and Mr. Garin clashed over strategy and style with Lorimar Chairman Merv Adelson ./.
mark(considered-4, Though-1)
nsubjpass(considered-4, Telepictures-2)
auxpass(considered-4, was-3)
advcl(clashed-29, considered-4)
det(company-8, a-5)
amod(company-8, high-flying-6)
amod(company-8, entrepreneurial-7)
xcomp(considered-4, company-8)
advmod(merged-11, when-9)
nsubj(merged-11, it-10)
advcl(considered-4, merged-11)
case(Lorimar-13, with-12)
nmod:with(merged-11, Lorimar-13)
punct(Lorimar-13, ,-14)
nmod:poss(troubles-17, Lorimar-15)
case(Lorimar-15, 's-16)
nsubj(dragged-18, troubles-17)
acl:relcl(Lorimar-13, dragged-18)
det(company-20, the-19)
dobj(dragged-18, company-20)
advmod(merger-24, down-21)
case(merger-24, after-22)
det(merger-24, the-23)
nmod:after(dragged-18, merger-24)
punct(clashed-29, ,-25)
cc(clashed-29, and-26)
compound(Garin-28, Mr.-27)
nsubj(clashed-29, Garin-28)
root(ROOT-0, clashed-29)
case(strategy-31, over-30)
nmod:over(clashed-29, strategy-31)
cc(strategy-31, and-32)
nmod:over(clashed-29, style-33)
conj:and(strategy-31, style-33)
case(Adelson-38, with-34)
compound(Adelson-38, Lorimar-35)
compound(Adelson-38, Chairman-36)
compound(Adelson-38, Merv-37)
nmod:with(strategy-31, Adelson-38)
punct(clashed-29, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#company

drag :: Their recent hostile tender offer for Chicago-based USG dragged on for months before the company defeated them earlier this year with a sweetened recapitalization plan ./.
nmod:poss(offer-5, Their-1)
amod(offer-5, recent-2)
amod(offer-5, hostile-3)
compound(offer-5, tender-4)
nsubj(dragged-9, offer-5)
case(USG-8, for-6)
amod(USG-8, Chicago-based-7)
nmod:for(offer-5, USG-8)
root(ROOT-0, dragged-9)
compound:prt(dragged-9, on-10)
case(months-12, for-11)
nmod:for(dragged-9, months-12)
mark(defeated-16, before-13)
det(company-15, the-14)
nsubj(defeated-16, company-15)
advcl(dragged-9, defeated-16)
dobj(defeated-16, them-17)
advmod(year-20, earlier-18)
det(year-20, this-19)
nmod:tmod(defeated-16, year-20)
case(plan-25, with-21)
det(plan-25, a-22)
amod(plan-25, sweetened-23)
compound(plan-25, recapitalization-24)
nmod:with(defeated-16, plan-25)
punct(dragged-9, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#offer

drag :: They never say excuse me , '' says Jacqueline Yun , a crop-haired Korean-American , as she drags on a cigarette ./.
nsubj(say-3, They-1)
neg(say-3, never-2)
ccomp(says-8, say-3)
ccomp(say-3, excuse-4)
dobj(excuse-4, me-5)
punct(says-8, ,-6)
punct(says-8, ''-7)
root(ROOT-0, says-8)
compound(Yun-10, Jacqueline-9)
nsubj(says-8, Yun-10)
punct(Yun-10, ,-11)
det(Korean-American-14, a-12)
amod(Korean-American-14, crop-haired-13)
appos(Yun-10, Korean-American-14)
punct(Yun-10, ,-15)
mark(drags-18, as-16)
nsubj(drags-18, she-17)
advcl(says-8, drags-18)
case(cigarette-21, on-19)
det(cigarette-21, a-20)
nmod:on(drags-18, cigarette-21)
punct(says-8, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#she

drag :: The usually buoyant muscle man drags his way through the picture , though director Walter Hill probably should share the guilt for Arnold 's apparent lethargy ./.
det(man-5, The-1)
advmod(buoyant-3, usually-2)
amod(man-5, buoyant-3)
compound(man-5, muscle-4)
nsubj(drags-6, man-5)
root(ROOT-0, drags-6)
nmod:poss(way-8, his-7)
dobj(drags-6, way-8)
case(picture-11, through-9)
det(picture-11, the-10)
nmod:through(drags-6, picture-11)
punct(drags-6, ,-12)
mark(share-19, though-13)
compound(Hill-16, director-14)
compound(Hill-16, Walter-15)
nsubj(share-19, Hill-16)
advmod(share-19, probably-17)
aux(share-19, should-18)
advcl(drags-6, share-19)
det(guilt-21, the-20)
dobj(share-19, guilt-21)
case(lethargy-26, for-22)
nmod:poss(lethargy-26, Arnold-23)
case(Arnold-23, 's-24)
amod(lethargy-26, apparent-25)
nmod:for(guilt-21, lethargy-26)
punct(drags-6, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#way

drag :: Homework -- `` papers and papers and papers , '' Mrs. Laine says -- drags on for hours ; Finn and Blue wake up early some mornings just to finish ./.
root(ROOT-0, Homework-1)
punct(Homework-1, ---2)
punct(papers-4, ``-3)
dep(says-13, papers-4)
cc(papers-4, and-5)
conj:and(papers-4, papers-6)
dep(says-13, papers-6)
cc(papers-4, and-7)
conj:and(papers-4, papers-8)
dep(says-13, papers-8)
punct(papers-4, ,-9)
punct(papers-4, ''-10)
compound(Laine-12, Mrs.-11)
nsubj(says-13, Laine-12)
parataxis(Homework-1, says-13)
punct(says-13, ---14)
parataxis(says-13, drags-15)
compound:prt(drags-15, on-16)
case(hours-18, for-17)
nmod:for(drags-15, hours-18)
punct(drags-15, ;-19)
nsubj(wake-23, Finn-20)
cc(Finn-20, and-21)
conj:and(Finn-20, Blue-22)
nsubj(wake-23, Blue-22)
parataxis(drags-15, wake-23)
compound:prt(wake-23, up-24)
advmod(mornings-27, early-25)
det(mornings-27, some-26)
dobj(wake-23, mornings-27)
nsubj:xsubj(finish-30, mornings-27)
advmod(finish-30, just-28)
mark(finish-30, to-29)
xcomp(wake-23, finish-30)
punct(Homework-1, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#hours

drag :: But the bigger companies ' stocks have dragged down the group 's performance ./.
cc(dragged-8, But-1)
det(companies-4, the-2)
amod(companies-4, bigger-3)
nmod:poss(stocks-6, companies-4)
case(companies-4, '-5)
nsubj(dragged-8, stocks-6)
aux(dragged-8, have-7)
root(ROOT-0, dragged-8)
compound:prt(dragged-8, down-9)
det(group-11, the-10)
nmod:poss(performance-13, group-11)
case(group-11, 's-12)
dobj(dragged-8, performance-13)
punct(dragged-8, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#performance

drag :: `` Advertisers are expected to drag their heels a little bit -LRB- now -RRB- , arguing that , hey , there just are n't that many eyeballs out there . ''/''
root(ROOT-0, ``-1)
nsubjpass(expected-4, Advertisers-2)
nsubj:xsubj(drag-6, Advertisers-2)
auxpass(expected-4, are-3)
root(``-1, expected-4)
mark(drag-6, to-5)
xcomp(expected-4, drag-6)
nmod:poss(heels-8, their-7)
dobj(drag-6, heels-8)
det(bit-11, a-9)
amod(bit-11, little-10)
nmod:npmod(drag-6, bit-11)
punct(now-13, -LRB--12)
dep(bit-11, now-13)
punct(now-13, -RRB--14)
punct(expected-4, ,-15)
parataxis(expected-4, arguing-16)
dep(arguing-16, that-17)
punct(that-17, ,-18)
root(,-18, hey-19)
punct(hey-19, ,-20)
expl(just-22, there-21)
root(,-20, just-22)
cop(that-25, are-23)
neg(that-25, n't-24)
root(just-22, that-25)
amod(eyeballs-27, many-26)
root(that-25, eyeballs-27)
case(there-29, out-28)
advmod(eyeballs-27, there-29)
punct(eyeballs-27, .-30)
punct(eyeballs-27, ''-31)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drag#heels

drag :: The lengthy , so-called prudency review is likely to drag into public view the troubled history of the plant ./.
det(review-6, The-1)
amod(review-6, lengthy-2)
punct(review-6, ,-3)
amod(review-6, so-called-4)
compound(review-6, prudency-5)
nsubj(likely-8, review-6)
nsubj:xsubj(drag-10, review-6)
cop(likely-8, is-7)
root(ROOT-0, likely-8)
mark(drag-10, to-9)
xcomp(likely-8, drag-10)
case(view-13, into-11)
amod(view-13, public-12)
nmod:into(drag-10, view-13)
det(history-16, the-14)
amod(history-16, troubled-15)
dobj(drag-10, history-16)
case(plant-19, of-17)
det(plant-19, the-18)
nmod:of(history-16, plant-19)
punct(likely-8, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#plant

drag :: And because of a writers ' strike that has just dragged into its 15th week , there have been few movie and television deals to cut ./.
cc(movie-21, And-1)
case(strike-7, because-2)
mwe(because-2, of-3)
det(writers-5, a-4)
nmod:poss(strike-7, writers-5)
case(writers-5, '-6)
nsubj(dragged-11, strike-7)
nmod:because_of(movie-21, strike-7)
ref(strike-7, that-8)
aux(dragged-11, has-9)
advmod(dragged-11, just-10)
acl:relcl(strike-7, dragged-11)
case(week-15, into-12)
nmod:poss(week-15, its-13)
amod(week-15, 15th-14)
nmod:into(dragged-11, week-15)
punct(movie-21, ,-16)
expl(movie-21, there-17)
aux(movie-21, have-18)
cop(movie-21, been-19)
amod(movie-21, few-20)
root(ROOT-0, movie-21)
cc(movie-21, and-22)
compound(deals-24, television-23)
conj:and(movie-21, deals-24)
mark(cut-26, to-25)
acl(movie-21, cut-26)
punct(movie-21, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#strike

drag :: `` We wanted an arresting headline that would drag people into the body copy , '' says Tambrands spokesman Paul Konney ./.
punct(wanted-3, ``-1)
nsubj(wanted-3, We-2)
dep(says-17, wanted-3)
det(headline-6, an-4)
amod(headline-6, arresting-5)
dobj(wanted-3, headline-6)
nsubj(drag-9, headline-6)
ref(headline-6, that-7)
aux(drag-9, would-8)
acl:relcl(headline-6, drag-9)
dobj(drag-9, people-10)
case(copy-14, into-11)
det(copy-14, the-12)
compound(copy-14, body-13)
nmod:into(drag-9, copy-14)
punct(wanted-3, ,-15)
punct(wanted-3, ''-16)
root(ROOT-0, says-17)
compound(Konney-21, Tambrands-18)
compound(Konney-21, spokesman-19)
compound(Konney-21, Paul-20)
nsubj(says-17, Konney-21)
punct(says-17, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#people

drag :: The statement is enough to drag one back to one 's dog-eared copy of Madison 's 10th Federalist to read again that government sometimes exists to protect imperfect people from one another ./.
det(statement-2, The-1)
nsubj(enough-4, statement-2)
nsubj:xsubj(drag-6, statement-2)
cop(enough-4, is-3)
root(ROOT-0, enough-4)
mark(drag-6, to-5)
xcomp(enough-4, drag-6)
dobj(drag-6, one-7)
advmod(drag-6, back-8)
case(copy-13, to-9)
nmod:poss(copy-13, one-10)
case(one-10, 's-11)
amod(copy-13, dog-eared-12)
nmod:to(back-8, copy-13)
case(Federalist-18, of-14)
nmod:poss(Federalist-18, Madison-15)
case(Madison-15, 's-16)
amod(Federalist-18, 10th-17)
nmod:of(copy-13, Federalist-18)
mark(read-20, to-19)
advcl(drag-6, read-20)
advmod(read-20, again-21)
mark(exists-25, that-22)
nsubj(exists-25, government-23)
nsubj:xsubj(protect-27, government-23)
advmod(exists-25, sometimes-24)
ccomp(read-20, exists-25)
mark(protect-27, to-26)
xcomp(exists-25, protect-27)
amod(people-29, imperfect-28)
dobj(protect-27, people-29)
case(one-31, from-30)
nmod:from(protect-27, one-31)
dep(one-31, another-32)
punct(enough-4, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#one

drag :: As negotiations dragged on , Mr. Finkelstein , known as a straightforward man , exclaimed , `` We 're getting nowhere , and it 's getting late . ''/''
mark(dragged-3, As-1)
nsubj(dragged-3, negotiations-2)
advcl(exclaimed-15, dragged-3)
compound:prt(dragged-3, on-4)
punct(exclaimed-15, ,-5)
compound(Finkelstein-7, Mr.-6)
nsubj(exclaimed-15, Finkelstein-7)
punct(Finkelstein-7, ,-8)
acl(Finkelstein-7, known-9)
case(man-13, as-10)
det(man-13, a-11)
amod(man-13, straightforward-12)
nmod:as(known-9, man-13)
punct(Finkelstein-7, ,-14)
root(ROOT-0, exclaimed-15)
punct(exclaimed-15, ,-16)
punct(exclaimed-15, ``-17)
nsubj(getting-20, We-18)
aux(getting-20, 're-19)
ccomp(exclaimed-15, getting-20)
advmod(getting-20, nowhere-21)
punct(getting-20, ,-22)
cc(getting-20, and-23)
nsubj(getting-26, it-24)
aux(getting-26, 's-25)
ccomp(exclaimed-15, getting-26)
conj:and(getting-20, getting-26)
advmod(getting-26, late-27)
punct(exclaimed-15, .-28)
punct(exclaimed-15, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drag#negotiations

drag :: One ad in the campaign developed by Lintas: Campbell-Ewald & Co. shows a Chevrolet S-10 compact pickup dragging a Ford Ranger into a `` crater of fire . ''/''
nummod(ad-2, One-1)
root(ROOT-0, ad-2)
case(campaign-5, in-3)
det(campaign-5, the-4)
nmod:in(ad-2, campaign-5)
acl(campaign-5, developed-6)
case(Lintas-8, by-7)
nmod:by(developed-6, Lintas-8)
punct(ad-2, :-9)
nsubj(shows-13, Campbell-Ewald-10)
cc(Campbell-Ewald-10, &-11)
conj:&(Campbell-Ewald-10, Co.-12)
nsubj(shows-13, Co.-12)
dep(ad-2, shows-13)
det(pickup-18, a-14)
compound(pickup-18, Chevrolet-15)
compound(pickup-18, S-10-16)
amod(pickup-18, compact-17)
dobj(shows-13, pickup-18)
acl(pickup-18, dragging-19)
det(Ranger-22, a-20)
compound(Ranger-22, Ford-21)
dobj(dragging-19, Ranger-22)
case(crater-26, into-23)
det(crater-26, a-24)
punct(crater-26, ``-25)
nmod:into(dragging-19, crater-26)
case(fire-28, of-27)
nmod:of(crater-26, fire-28)
punct(ad-2, .-29)
punct(ad-2, ''-30)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drag#ranger

drag :: TV viewers saw Mr. Chancellor being dragged out of the 1964 Republican convention in San Francisco when , during a live interview , he refused to clear an aisle ./.
compound(viewers-2, TV-1)
nsubj(saw-3, viewers-2)
root(ROOT-0, saw-3)
compound(Chancellor-5, Mr.-4)
nsubjpass(dragged-7, Chancellor-5)
auxpass(dragged-7, being-6)
ccomp(saw-3, dragged-7)
case(convention-13, out-8)
mwe(out-8, of-9)
det(convention-13, the-10)
nummod(convention-13, 1964-11)
compound(convention-13, Republican-12)
nmod:out_of(dragged-7, convention-13)
case(Francisco-16, in-14)
compound(Francisco-16, San-15)
nmod:in(dragged-7, Francisco-16)
advmod(refused-25, when-17)
punct(refused-25, ,-18)
case(interview-22, during-19)
det(interview-22, a-20)
amod(interview-22, live-21)
nmod:during(refused-25, interview-22)
punct(refused-25, ,-23)
nsubj(refused-25, he-24)
nsubj:xsubj(clear-27, he-24)
advcl(dragged-7, refused-25)
mark(clear-27, to-26)
xcomp(refused-25, clear-27)
det(aisle-29, an-28)
dobj(clear-27, aisle-29)
punct(saw-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#chancellor

drag :: The pipe , dragging the sea floor 500 feet below , hit a coral boulder eight feet in diameter and sprang a leak ./.
det(pipe-2, The-1)
nsubj(hit-12, pipe-2)
nsubj(sprang-21, pipe-2)
punct(pipe-2, ,-3)
acl(pipe-2, dragging-4)
det(floor-7, the-5)
compound(floor-7, sea-6)
dobj(dragging-4, floor-7)
nummod(feet-9, 500-8)
advmod(floor-7, feet-9)
case(feet-9, below-10)
punct(pipe-2, ,-11)
root(ROOT-0, hit-12)
det(feet-17, a-13)
compound(feet-17, coral-14)
compound(feet-17, boulder-15)
nummod(feet-17, eight-16)
dobj(hit-12, feet-17)
case(diameter-19, in-18)
nmod:in(hit-12, diameter-19)
cc(hit-12, and-20)
conj:and(hit-12, sprang-21)
det(leak-23, a-22)
dobj(sprang-21, leak-23)
punct(hit-12, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#floor

drag :: An Aer Lingus spokesman claimed Italy is dragging its feet because Alitalia plans to start flights between Milan and Manchester this month ./.
det(spokesman-4, An-1)
compound(spokesman-4, Aer-2)
compound(spokesman-4, Lingus-3)
nsubj(claimed-5, spokesman-4)
root(ROOT-0, claimed-5)
nsubj(dragging-8, Italy-6)
aux(dragging-8, is-7)
ccomp(claimed-5, dragging-8)
nmod:poss(feet-10, its-9)
dobj(dragging-8, feet-10)
mark(plans-13, because-11)
nsubj(plans-13, Alitalia-12)
nsubj:xsubj(start-15, Alitalia-12)
advcl(dragging-8, plans-13)
mark(start-15, to-14)
xcomp(plans-13, start-15)
dobj(start-15, flights-16)
case(Milan-18, between-17)
nmod:between(flights-16, Milan-18)
cc(Milan-18, and-19)
nmod:between(flights-16, Manchester-20)
conj:and(Milan-18, Manchester-20)
det(month-22, this-21)
nmod:tmod(start-15, month-22)
punct(claimed-5, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#feet

drag :: Some already haul in well over $ 1 , 000 worth a week -- better than they can do dragging for scallops or mussels these days ./.
det(haul-3, Some-1)
advmod(haul-3, already-2)
root(ROOT-0, haul-3)
case(1-8, in-4)
advmod(1-8, well-5)
case(1-8, over-6)
dep(1-8, $-7)
nmod:over(haul-3, 1-8)
punct(1-8, ,-9)
appos(1-8, 000-10)
case(week-13, worth-11)
det(week-13, a-12)
nmod:worth(000-10, week-13)
punct(haul-3, ---14)
amod(haul-3, better-15)
mark(do-19, than-16)
nsubj(do-19, they-17)
aux(do-19, can-18)
advcl(better-15, do-19)
dobj(do-19, dragging-20)
case(scallops-22, for-21)
nmod:for(dragging-20, scallops-22)
cc(scallops-22, or-23)
nmod:for(dragging-20, mussels-24)
conj:or(scallops-22, mussels-24)
det(days-26, these-25)
nmod:tmod(do-19, days-26)
punct(haul-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#scallops

drag :: About half of Cray 's R & D budget now goes into creating software , a combination art and science that so totally engrosses some Cray designers that they sometimes have to be dragged away from their terminals and told to get some rest ./.
advmod(half-2, About-1)
nsubj(goes-11, half-2)
case(R-6, of-3)
nmod:poss(R-6, Cray-4)
case(Cray-4, 's-5)
nmod:of(half-2, R-6)
cc(R-6, &-7)
compound(budget-9, D-8)
nmod:of(half-2, budget-9)
conj:&(R-6, budget-9)
advmod(goes-11, now-10)
root(ROOT-0, goes-11)
mark(creating-13, into-12)
advcl(goes-11, creating-13)
dobj(creating-13, software-14)
punct(software-14, ,-15)
det(art-18, a-16)
compound(art-18, combination-17)
appos(software-14, art-18)
nsubj(engrosses-24, art-18)
cc(art-18, and-19)
appos(software-14, science-20)
conj:and(art-18, science-20)
nsubj(engrosses-24, science-20)
ref(art-18, that-21)
advmod(totally-23, so-22)
advmod(engrosses-24, totally-23)
acl:relcl(art-18, engrosses-24)
det(designers-27, some-25)
compound(designers-27, Cray-26)
dobj(engrosses-24, designers-27)
mark(have-31, that-28)
nsubj(have-31, they-29)
nsubjpass:xsubj(dragged-34, they-29)
nsubj(told-40, they-29)
nsubj:xsubj(get-42, they-29)
advmod(have-31, sometimes-30)
ccomp(designers-27, have-31)
mark(dragged-34, to-32)
auxpass(dragged-34, be-33)
xcomp(have-31, dragged-34)
case(terminals-38, away-35)
mwe(away-35, from-36)
nmod:poss(terminals-38, their-37)
nmod:away_from(dragged-34, terminals-38)
cc(have-31, and-39)
ccomp(designers-27, told-40)
conj:and(have-31, told-40)
mark(get-42, to-41)
xcomp(told-40, get-42)
det(rest-44, some-43)
dobj(get-42, rest-44)
punct(goes-11, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#be

drag :: He disputes the longheld theory that the Great Pyramids were made of limestone blocks cut , dragged long distances , and hoisted into place , arguing that they were made by pouring long-lasting cement ./.
nsubj(disputes-2, He-1)
nsubj(dragged-17, He-1)
nsubj(hoisted-22, He-1)
root(ROOT-0, disputes-2)
det(theory-5, the-3)
amod(theory-5, longheld-4)
nsubj(blocks-14, theory-5)
mark(made-11, that-6)
det(Pyramids-9, the-7)
amod(Pyramids-9, Great-8)
nsubjpass(made-11, Pyramids-9)
auxpass(made-11, were-10)
ccomp(theory-5, made-11)
case(limestone-13, of-12)
nmod:of(made-11, limestone-13)
ccomp(disputes-2, blocks-14)
dobj(blocks-14, cut-15)
punct(disputes-2, ,-16)
conj:and(disputes-2, dragged-17)
amod(distances-19, long-18)
dobj(dragged-17, distances-19)
punct(disputes-2, ,-20)
cc(disputes-2, and-21)
conj:and(disputes-2, hoisted-22)
case(place-24, into-23)
nmod:into(hoisted-22, place-24)
punct(hoisted-22, ,-25)
xcomp(hoisted-22, arguing-26)
mark(made-30, that-27)
nsubjpass(made-30, they-28)
auxpass(made-30, were-29)
ccomp(arguing-26, made-30)
mark(pouring-32, by-31)
advcl(made-30, pouring-32)
amod(cement-34, long-lasting-33)
dobj(pouring-32, cement-34)
punct(disputes-2, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#distances

drag :: A few years ago , Dr. Zimmerman and his colleagues dragged nests of two different termite species into the lab and measured their methane output ./.
det(years-3, A-1)
amod(years-3, few-2)
nmod:npmod(ago-4, years-3)
advmod(dragged-11, ago-4)
punct(dragged-11, ,-5)
compound(Zimmerman-7, Dr.-6)
nsubj(dragged-11, Zimmerman-7)
nsubj(measured-22, Zimmerman-7)
cc(Zimmerman-7, and-8)
nmod:poss(colleagues-10, his-9)
conj:and(Zimmerman-7, colleagues-10)
nsubj(dragged-11, colleagues-10)
root(ROOT-0, dragged-11)
dobj(dragged-11, nests-12)
case(species-17, of-13)
nummod(species-17, two-14)
amod(species-17, different-15)
compound(species-17, termite-16)
nmod:of(nests-12, species-17)
case(lab-20, into-18)
det(lab-20, the-19)
nmod:into(dragged-11, lab-20)
cc(dragged-11, and-21)
conj:and(dragged-11, measured-22)
nmod:poss(output-25, their-23)
compound(output-25, methane-24)
dobj(measured-22, output-25)
punct(dragged-11, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#nests

drag :: The government had a change of heart and threatened to drag him off the boat in mid-Baltic , but then relented ./.
det(government-2, The-1)
nsubj(had-3, government-2)
nsubj(threatened-9, government-2)
nsubj:xsubj(drag-11, government-2)
nsubj(relented-21, government-2)
root(ROOT-0, had-3)
det(change-5, a-4)
dobj(had-3, change-5)
case(heart-7, of-6)
nmod:of(change-5, heart-7)
cc(had-3, and-8)
conj:and(had-3, threatened-9)
mark(drag-11, to-10)
xcomp(threatened-9, drag-11)
dobj(drag-11, him-12)
case(boat-15, off-13)
det(boat-15, the-14)
nmod:off(drag-11, boat-15)
case(mid-Baltic-17, in-16)
nmod:in(drag-11, mid-Baltic-17)
punct(had-3, ,-18)
cc(had-3, but-19)
advmod(relented-21, then-20)
conj:and(had-3, relented-21)
punct(had-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#him

drag :: Some of those arrested were dragged from buses that were to take them back to Managua ; others , such as 18-year-old Norman Lenin Cardoza -LRB- who denies ever attending the rally -RRB- and attorney Roger Guevara Mena , were arrested by state security police days later ./.
nsubjpass(dragged-6, Some-1)
case(those-3, of-2)
nmod:of(Some-1, those-3)
acl(those-3, arrested-4)
auxpass(dragged-6, were-5)
root(ROOT-0, dragged-6)
case(buses-8, from-7)
nmod:from(dragged-6, buses-8)
nsubj(were-10, buses-8)
nsubj:xsubj(take-12, buses-8)
ref(buses-8, that-9)
acl:relcl(buses-8, were-10)
mark(take-12, to-11)
xcomp(were-10, take-12)
dobj(take-12, them-13)
advmod(take-12, back-14)
case(Managua-16, to-15)
nmod:to(back-14, Managua-16)
punct(dragged-6, ;-17)
nsubjpass(arrested-41, others-18)
punct(others-18, ,-19)
case(Cardoza-25, such-20)
mwe(such-20, as-21)
amod(Cardoza-25, 18-year-old-22)
compound(Cardoza-25, Norman-23)
compound(Cardoza-25, Lenin-24)
nmod:such_as(others-18, Cardoza-25)
punct(denies-28, -LRB--26)
nsubj(denies-28, who-27)
dep(Cardoza-25, denies-28)
advmod(attending-30, ever-29)
xcomp(denies-28, attending-30)
det(rally-32, the-31)
dobj(attending-30, rally-32)
punct(denies-28, -RRB--33)
cc(Cardoza-25, and-34)
compound(Mena-38, attorney-35)
compound(Mena-38, Roger-36)
compound(Mena-38, Guevara-37)
nmod:such_as(others-18, Mena-38)
conj:and(Cardoza-25, Mena-38)
punct(others-18, ,-39)
auxpass(arrested-41, were-40)
parataxis(dragged-6, arrested-41)
case(days-46, by-42)
compound(days-46, state-43)
compound(days-46, security-44)
compound(days-46, police-45)
nmod:agent(arrested-41, days-46)
advmod(days-46, later-47)
punct(dragged-6, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#some

drag :: Its black-stained concrete walls and blackened roof of rust make it look as if it were dragged off the back lot of a horror-film studio ./.
nmod:poss(walls-4, Its-1)
amod(walls-4, black-stained-2)
amod(walls-4, concrete-3)
nsubj(make-10, walls-4)
cc(walls-4, and-5)
amod(roof-7, blackened-6)
conj:and(walls-4, roof-7)
nsubj(make-10, roof-7)
case(rust-9, of-8)
nmod:of(roof-7, rust-9)
root(ROOT-0, make-10)
nsubj(look-12, it-11)
ccomp(make-10, look-12)
mark(dragged-17, as-13)
mwe(as-13, if-14)
nsubjpass(dragged-17, it-15)
auxpass(dragged-17, were-16)
advcl(look-12, dragged-17)
case(lot-21, off-18)
det(lot-21, the-19)
amod(lot-21, back-20)
nmod:off(dragged-17, lot-21)
case(studio-25, of-22)
det(studio-25, a-23)
compound(studio-25, horror-film-24)
nmod:of(lot-21, studio-25)
punct(make-10, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#it

drag :: The Finn thought about it , and then reluctantly dragged a bottle of vodka from his coat and kissed it and dropped it over the side ./.
det(Finn-2, The-1)
nsubj(thought-3, Finn-2)
nsubj(dragged-10, Finn-2)
root(ROOT-0, thought-3)
case(it-5, about-4)
nmod:about(thought-3, it-5)
punct(thought-3, ,-6)
cc(thought-3, and-7)
advmod(dragged-10, then-8)
advmod(dragged-10, reluctantly-9)
conj:and(thought-3, dragged-10)
det(bottle-12, a-11)
dobj(dragged-10, bottle-12)
case(vodka-14, of-13)
nmod:of(bottle-12, vodka-14)
case(coat-17, from-15)
nmod:poss(coat-17, his-16)
nmod:from(dragged-10, coat-17)
cc(dragged-10, and-18)
conj:and(thought-3, kissed-19)
conj:and(dragged-10, kissed-19)
dobj(kissed-19, it-20)
cc(dragged-10, and-21)
conj:and(thought-3, dropped-22)
conj:and(dragged-10, dropped-22)
dobj(dropped-22, it-23)
case(side-26, over-24)
det(side-26, the-25)
nmod:over(dropped-22, side-26)
punct(thought-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#vodka

drag :: In it , the hero gets dragged to the `` Cave Town '' mall by his mom , gets lost , gets found , and is rewarded with an ice cream cone ./.
case(it-2, In-1)
nmod:in(dragged-7, it-2)
punct(dragged-7, ,-3)
det(hero-5, the-4)
nsubjpass(dragged-7, hero-5)
nsubjpass(rewarded-27, hero-5)
auxpass(dragged-7, gets-6)
root(ROOT-0, dragged-7)
case(mall-14, to-8)
det(mall-14, the-9)
punct(mall-14, ``-10)
compound(Town-12, Cave-11)
compound(mall-14, Town-12)
punct(mall-14, ''-13)
nmod:to(dragged-7, mall-14)
case(mom-17, by-15)
nmod:poss(mom-17, his-16)
nmod:agent(dragged-7, mom-17)
punct(dragged-7, ,-18)
auxpass(lost-20, gets-19)
dep(dragged-7, lost-20)
punct(dragged-7, ,-21)
auxpass(found-23, gets-22)
dep(dragged-7, found-23)
punct(dragged-7, ,-24)
cc(dragged-7, and-25)
auxpass(rewarded-27, is-26)
conj:and(dragged-7, rewarded-27)
case(cone-32, with-28)
det(cone-32, an-29)
compound(cone-32, ice-30)
compound(cone-32, cream-31)
nmod:with(rewarded-27, cone-32)
punct(dragged-7, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#hero

drag :: Exhausted by my efforts , I paused a moment in a shell-hole ; in a few seconds I felt myself sinking , and struggle as I might I was sucked down until I was firmly gripped round the waist and still being dragged in ./.
advcl(paused-7, Exhausted-1)
case(efforts-4, by-2)
nmod:poss(efforts-4, my-3)
nmod:by(Exhausted-1, efforts-4)
punct(paused-7, ,-5)
nsubj(paused-7, I-6)
root(ROOT-0, paused-7)
det(moment-9, a-8)
dobj(paused-7, moment-9)
case(shell-hole-12, in-10)
det(shell-hole-12, a-11)
nmod:in(paused-7, shell-hole-12)
punct(paused-7, ;-13)
case(seconds-17, in-14)
det(seconds-17, a-15)
amod(seconds-17, few-16)
nmod:in(paused-7, seconds-17)
nsubj(felt-19, I-18)
acl:relcl(seconds-17, felt-19)
nsubj(sinking-21, myself-20)
ccomp(felt-19, sinking-21)
punct(seconds-17, ,-22)
cc(seconds-17, and-23)
nmod:in(paused-7, struggle-24)
conj:and(seconds-17, struggle-24)
mark(sucked-30, as-25)
nsubjpass(sucked-30, I-26)
aux(sucked-30, might-27)
nsubjpass(sucked-30, I-28)
auxpass(sucked-30, was-29)
advcl(struggle-24, sucked-30)
compound:prt(sucked-30, down-31)
mark(gripped-36, until-32)
nsubjpass(gripped-36, I-33)
auxpass(gripped-36, was-34)
advmod(gripped-36, firmly-35)
advcl(sucked-30, gripped-36)
dobj(gripped-36, round-37)
det(waist-39, the-38)
dobj(round-37, waist-39)
cc(round-37, and-40)
advmod(dragged-43, still-41)
auxpass(dragged-43, being-42)
dobj(gripped-36, dragged-43)
conj:and(round-37, dragged-43)
advmod(dragged-43, in-44)
punct(paused-7, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#being

drag :: That 's pretty much it , plotwise , except for coming up with the various modes of transportation the bounty hunter cop has to use to drag the con man accountant across country ./.
nsubj(it-5, That-1)
cop(it-5, 's-2)
advmod(much-4, pretty-3)
advmod(it-5, much-4)
root(ROOT-0, it-5)
punct(it-5, ,-6)
advmod(it-5, plotwise-7)
punct(it-5, ,-8)
dep(coming-11, except-9)
mark(coming-11, for-10)
advcl(has-23, coming-11)
compound:prt(coming-11, up-12)
case(modes-16, with-13)
det(modes-16, the-14)
amod(modes-16, various-15)
nmod:with(coming-11, modes-16)
case(transportation-18, of-17)
nmod:of(modes-16, transportation-18)
det(cop-22, the-19)
compound(cop-22, bounty-20)
compound(cop-22, hunter-21)
nsubj(has-23, cop-22)
nsubj:xsubj(use-25, cop-22)
advcl(it-5, has-23)
mark(use-25, to-24)
xcomp(has-23, use-25)
mark(drag-27, to-26)
xcomp(use-25, drag-27)
det(accountant-31, the-28)
compound(accountant-31, con-29)
compound(accountant-31, man-30)
dobj(drag-27, accountant-31)
case(country-33, across-32)
nmod:across(drag-27, country-33)
punct(it-5, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#accountant

drag :: From the start , the women are trodden upon , dragged across the stage , pushed around , used as wheelbarrows ./.
case(start-3, From-1)
det(start-3, the-2)
nmod:from(trodden-8, start-3)
punct(trodden-8, ,-4)
det(women-6, the-5)
nsubj(trodden-8, women-6)
cop(trodden-8, are-7)
root(ROOT-0, trodden-8)
advmod(trodden-8, upon-9)
punct(trodden-8, ,-10)
conj(trodden-8, dragged-11)
case(stage-14, across-12)
det(stage-14, the-13)
nmod:across(dragged-11, stage-14)
punct(trodden-8, ,-15)
conj(trodden-8, pushed-16)
advmod(pushed-16, around-17)
punct(trodden-8, ,-18)
dep(trodden-8, used-19)
case(wheelbarrows-21, as-20)
nmod:as(used-19, wheelbarrows-21)
punct(trodden-8, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#stage

drag :: He was at first left alone , but was then dragged before a military court and given a 12-year prison sentence ./.
nsubj(left-5, He-1)
nsubjpass(dragged-11, He-1)
cop(left-5, was-2)
case(left-5, at-3)
amod(left-5, first-4)
root(ROOT-0, left-5)
advmod(left-5, alone-6)
punct(left-5, ,-7)
cc(left-5, but-8)
auxpass(dragged-11, was-9)
advmod(dragged-11, then-10)
conj:but(left-5, dragged-11)
case(court-15, before-12)
det(court-15, a-13)
amod(court-15, military-14)
nmod:before(dragged-11, court-15)
cc(dragged-11, and-16)
case(sentence-21, given-17)
det(sentence-21, a-18)
amod(sentence-21, 12-year-19)
compound(sentence-21, prison-20)
conj:but(left-5, sentence-21)
conj:and(dragged-11, sentence-21)
punct(left-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#he

drag :: Another day , with his arm caught in the window of a student 's car , he got dragged down the block ./.
det(day-2, Another-1)
nmod:tmod(dragged-19, day-2)
punct(dragged-19, ,-3)
mark(caught-7, with-4)
nmod:poss(arm-6, his-5)
nsubj(caught-7, arm-6)
advcl(dragged-19, caught-7)
case(window-10, in-8)
det(window-10, the-9)
nmod:in(caught-7, window-10)
case(car-15, of-11)
det(student-13, a-12)
nmod:poss(car-15, student-13)
case(student-13, 's-14)
nmod:of(window-10, car-15)
punct(dragged-19, ,-16)
nsubjpass(dragged-19, he-17)
auxpass(dragged-19, got-18)
root(ROOT-0, dragged-19)
compound:prt(dragged-19, down-20)
det(block-22, the-21)
dobj(dragged-19, block-22)
punct(dragged-19, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#block

drag :: Splashed across local papers was the picture of two burly federal marshals dragging a small woman through the car 's broken window ./.
root(ROOT-0, Splashed-1)
case(papers-4, across-2)
amod(papers-4, local-3)
nmod:across(Splashed-1, papers-4)
auxpass(Splashed-1, was-5)
det(picture-7, the-6)
nsubjpass(Splashed-1, picture-7)
case(marshals-12, of-8)
nummod(marshals-12, two-9)
amod(marshals-12, burly-10)
amod(marshals-12, federal-11)
nmod:of(picture-7, marshals-12)
acl(marshals-12, dragging-13)
det(woman-16, a-14)
amod(woman-16, small-15)
dobj(dragging-13, woman-16)
case(window-22, through-17)
det(car-19, the-18)
nmod:poss(window-22, car-19)
case(car-19, 's-20)
amod(window-22, broken-21)
nmod:through(dragging-13, window-22)
punct(Splashed-1, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#woman

drag :: I jump onto the track , heft my bags to the platform and drag them ./.
nsubj(jump-2, I-1)
nsubj(drag-14, I-1)
root(ROOT-0, jump-2)
case(track-5, onto-3)
det(track-5, the-4)
nmod:onto(jump-2, track-5)
punct(jump-2, ,-6)
conj:and(jump-2, heft-7)
nmod:poss(bags-9, my-8)
dobj(heft-7, bags-9)
case(platform-12, to-10)
det(platform-12, the-11)
nmod:to(heft-7, platform-12)
cc(jump-2, and-13)
conj:and(jump-2, drag-14)
dobj(drag-14, them-15)
punct(jump-2, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#them

drag :: After burying the eggs in the sand , it dragged its body back and forth across the beach until it had eliminated any clues to the nest 's location ./.
mark(burying-2, After-1)
advcl(dragged-10, burying-2)
det(eggs-4, the-3)
dobj(burying-2, eggs-4)
case(sand-7, in-5)
det(sand-7, the-6)
nmod:in(burying-2, sand-7)
punct(dragged-10, ,-8)
nsubj(dragged-10, it-9)
root(ROOT-0, dragged-10)
nmod:poss(body-12, its-11)
dobj(dragged-10, body-12)
advmod(dragged-10, back-13)
cc(back-13, and-14)
advmod(dragged-10, forth-15)
conj:and(back-13, forth-15)
case(beach-18, across-16)
det(beach-18, the-17)
nmod:across(dragged-10, beach-18)
mark(eliminated-22, until-19)
nsubj(eliminated-22, it-20)
aux(eliminated-22, had-21)
advcl(dragged-10, eliminated-22)
det(clues-24, any-23)
dobj(eliminated-22, clues-24)
case(location-29, to-25)
det(nest-27, the-26)
nmod:poss(location-29, nest-27)
case(nest-27, 's-28)
nmod:to(eliminated-22, location-29)
punct(dragged-10, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drag#body

drink :: As I drank water and ate for the first time in two days , my determination to continue the opposition crusade was strengthened ./.
mark(drank-3, As-1)
nsubj(drank-3, I-2)
nsubj(ate-6, I-2)
advcl(strengthened-23, drank-3)
dobj(drank-3, water-4)
cc(drank-3, and-5)
conj:and(drank-3, ate-6)
advcl(strengthened-23, ate-6)
case(time-10, for-7)
det(time-10, the-8)
amod(time-10, first-9)
nmod:for(ate-6, time-10)
case(days-13, in-11)
nummod(days-13, two-12)
nmod:in(ate-6, days-13)
punct(strengthened-23, ,-14)
nmod:poss(determination-16, my-15)
nsubjpass(strengthened-23, determination-16)
mark(continue-18, to-17)
acl(determination-16, continue-18)
det(crusade-21, the-19)
compound(crusade-21, opposition-20)
dobj(continue-18, crusade-21)
auxpass(strengthened-23, was-22)
root(ROOT-0, strengthened-23)
punct(strengthened-23, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#water

drink :: The upper classes do not take food or water from them nor sit , eat or drink with them ./.
det(classes-3, The-1)
amod(classes-3, upper-2)
nsubj(take-6, classes-3)
aux(take-6, do-4)
neg(take-6, not-5)
root(ROOT-0, take-6)
dobj(take-6, food-7)
cc(food-7, or-8)
dobj(take-6, water-9)
conj:or(food-7, water-9)
case(them-11, from-10)
nmod:from(take-6, them-11)
cc(them-11, nor-12)
nmod:from(take-6, sit-13)
conj:nor(them-11, sit-13)
punct(take-6, ,-14)
ccomp(take-6, eat-15)
cc(eat-15, or-16)
ccomp(take-6, drink-17)
conj:or(eat-15, drink-17)
case(them-19, with-18)
nmod:with(eat-15, them-19)
punct(take-6, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

drink :: It happens every year , says Dusty Saunders of the Rocky Mountain News , in Denver: Reporters put in long and weary days on the tour only to have their editors spot them drinking beer with a starlet on TV ./.
nsubj(happens-2, It-1)
ccomp(says-6, happens-2)
det(year-4, every-3)
nmod:tmod(happens-2, year-4)
punct(says-6, ,-5)
root(ROOT-0, says-6)
amod(Saunders-8, Dusty-7)
nsubj(says-6, Saunders-8)
case(News-13, of-9)
det(News-13, the-10)
compound(News-13, Rocky-11)
compound(News-13, Mountain-12)
nmod:of(Saunders-8, News-13)
punct(Saunders-8, ,-14)
case(Denver-16, in-15)
nmod:in(Saunders-8, Denver-16)
punct(Saunders-8, :-17)
dep(Saunders-8, Reporters-18)
acl(Reporters-18, put-19)
compound:prt(put-19, in-20)
amod(days-24, long-21)
cc(long-21, and-22)
conj:and(long-21, weary-23)
amod(days-24, weary-23)
nmod:tmod(put-19, days-24)
case(tour-27, on-25)
det(tour-27, the-26)
nmod:on(put-19, tour-27)
advmod(have-30, only-28)
mark(have-30, to-29)
xcomp(put-19, have-30)
nmod:poss(editors-32, their-31)
nsubj(spot-33, editors-32)
ccomp(have-30, spot-33)
nsubj(drinking-35, them-34)
dep(spot-33, drinking-35)
dobj(drinking-35, beer-36)
case(starlet-39, with-37)
det(starlet-39, a-38)
nmod:with(drinking-35, starlet-39)
case(TV-41, on-40)
nmod:on(starlet-39, TV-41)
punct(says-6, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#beer

drink :: It is impolite to drink less than three glasses and , after the third , it is generally impolite for guests to linger ./.
nsubj(impolite-3, It-1)
nsubj:xsubj(drink-5, It-1)
cop(impolite-3, is-2)
root(ROOT-0, impolite-3)
mark(drink-5, to-4)
xcomp(impolite-3, drink-5)
advmod(three-8, less-6)
mwe(less-6, than-7)
nummod(glasses-9, three-8)
dobj(drink-5, glasses-9)
cc(impolite-3, and-10)
punct(impolite-3, ,-11)
case(third-14, after-12)
det(third-14, the-13)
nmod:after(impolite-19, third-14)
punct(impolite-19, ,-15)
nsubj(impolite-19, it-16)
cop(impolite-19, is-17)
advmod(impolite-19, generally-18)
conj:and(impolite-3, impolite-19)
mark(linger-23, for-20)
nsubj(linger-23, guests-21)
mark(linger-23, to-22)
ccomp(impolite-19, linger-23)
punct(impolite-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#glasses

drink :: The trick is that it is midnight , and the ban on eating , smoking , having sex and even drinking water applies only to the daylight hours ./.
det(trick-2, The-1)
nsubj(is-3, trick-2)
root(ROOT-0, is-3)
mark(midnight-7, that-4)
nsubj(midnight-7, it-5)
cop(midnight-7, is-6)
ccomp(is-3, midnight-7)
punct(midnight-7, ,-8)
cc(midnight-7, and-9)
det(ban-11, the-10)
nsubj(applies-23, ban-11)
case(eating-13, on-12)
nmod:on(ban-11, eating-13)
punct(eating-13, ,-14)
nmod:on(ban-11, smoking-15)
conj:and(eating-13, smoking-15)
punct(eating-13, ,-16)
nmod:on(ban-11, having-17)
conj:and(eating-13, having-17)
dobj(having-17, sex-18)
cc(eating-13, and-19)
advmod(drinking-21, even-20)
nmod:on(ban-11, drinking-21)
conj:and(eating-13, drinking-21)
dobj(drinking-21, water-22)
ccomp(is-3, applies-23)
conj:and(midnight-7, applies-23)
advmod(hours-28, only-24)
case(hours-28, to-25)
det(hours-28, the-26)
compound(hours-28, daylight-27)
nmod:to(applies-23, hours-28)
punct(is-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#water

drink :: `` I stayed home and drank for two years after that , '' he notes sadly ./.
punct(notes-15, ``-1)
nsubj(stayed-3, I-2)
nsubj(drank-6, I-2)
ccomp(notes-15, stayed-3)
dobj(stayed-3, home-4)
cc(stayed-3, and-5)
conj:and(stayed-3, drank-6)
ccomp(notes-15, drank-6)
case(years-9, for-7)
nummod(years-9, two-8)
nmod:after(drank-6, years-9)
case(years-9, after-10)
dep(years-9, that-11)
punct(notes-15, ,-12)
punct(notes-15, ''-13)
nsubj(notes-15, he-14)
root(ROOT-0, notes-15)
advmod(notes-15, sadly-16)
punct(notes-15, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#i

drink :: And true to German tradition , the club has its own Stammtisch , a table at a local beer hall where club members gather once a week to drink and gab ./.
cc(has-9, And-1)
advmod(has-9, true-2)
case(tradition-5, to-3)
amod(tradition-5, German-4)
nmod:to(true-2, tradition-5)
punct(has-9, ,-6)
det(club-8, the-7)
nsubj(has-9, club-8)
root(ROOT-0, has-9)
nmod:poss(Stammtisch-12, its-10)
amod(Stammtisch-12, own-11)
dobj(has-9, Stammtisch-12)
punct(Stammtisch-12, ,-13)
det(table-15, a-14)
appos(Stammtisch-12, table-15)
case(hall-20, at-16)
det(hall-20, a-17)
amod(hall-20, local-18)
compound(hall-20, beer-19)
nmod:at(table-15, hall-20)
advmod(gather-24, where-21)
compound(members-23, club-22)
nsubj(gather-24, members-23)
nsubj:xsubj(drink-29, members-23)
acl:relcl(hall-20, gather-24)
advmod(week-27, once-25)
det(week-27, a-26)
nmod:tmod(gather-24, week-27)
mark(drink-29, to-28)
xcomp(gather-24, drink-29)
cc(drink-29, and-30)
xcomp(gather-24, gab-31)
conj:and(drink-29, gab-31)
punct(has-9, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#members

drink :: You should drink a full eight ounces of water with your tablets ./.
nsubj(drink-3, You-1)
aux(drink-3, should-2)
root(ROOT-0, drink-3)
det(ounces-7, a-4)
amod(ounces-7, full-5)
nummod(ounces-7, eight-6)
dobj(drink-3, ounces-7)
case(water-9, of-8)
nmod:of(ounces-7, water-9)
case(tablets-12, with-10)
nmod:poss(tablets-12, your-11)
nmod:with(drink-3, tablets-12)
punct(drink-3, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#water

drink :: `` I stayed home and drank for two years after that , '' he notes sadly ./.
punct(notes-15, ``-1)
nsubj(stayed-3, I-2)
nsubj(drank-6, I-2)
ccomp(notes-15, stayed-3)
dobj(stayed-3, home-4)
cc(stayed-3, and-5)
conj:and(stayed-3, drank-6)
ccomp(notes-15, drank-6)
case(years-9, for-7)
nummod(years-9, two-8)
nmod:after(drank-6, years-9)
case(years-9, after-10)
dep(years-9, that-11)
punct(notes-15, ,-12)
punct(notes-15, ''-13)
nsubj(notes-15, he-14)
root(ROOT-0, notes-15)
advmod(notes-15, sadly-16)
punct(notes-15, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#i

drink :: In another , they pondered why an observer was `` touched '' by the sight of a woman who took a cup from a fountain , drank water from it and then rinsed it out ./.
case(another-2, In-1)
nmod:in(pondered-5, another-2)
punct(pondered-5, ,-3)
nsubj(pondered-5, they-4)
nsubj(drank-27, they-4)
nsubj(rinsed-33, they-4)
root(ROOT-0, pondered-5)
advmod(touched-11, why-6)
det(observer-8, an-7)
nsubjpass(touched-11, observer-8)
auxpass(touched-11, was-9)
punct(touched-11, ``-10)
advcl(pondered-5, touched-11)
punct(touched-11, ''-12)
case(sight-15, by-13)
det(sight-15, the-14)
nmod:agent(touched-11, sight-15)
case(woman-18, of-16)
det(woman-18, a-17)
nmod:of(sight-15, woman-18)
nsubj(took-20, woman-18)
ref(woman-18, who-19)
acl:relcl(woman-18, took-20)
det(cup-22, a-21)
dobj(took-20, cup-22)
case(fountain-25, from-23)
det(fountain-25, a-24)
nmod:from(took-20, fountain-25)
punct(pondered-5, ,-26)
conj:and(pondered-5, drank-27)
dobj(drank-27, water-28)
case(it-30, from-29)
nmod:from(drank-27, it-30)
cc(pondered-5, and-31)
advmod(rinsed-33, then-32)
conj:and(pondered-5, rinsed-33)
dobj(rinsed-33, it-34)
compound:prt(rinsed-33, out-35)
punct(pondered-5, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#water

drink :: Ethnic hatred and economic hardship , neither of them new to Yugoslavia , have begun to blend over the past few weeks into a political poison the country 's leaders may be about to drink ./.
amod(hatred-2, Ethnic-1)
dep(begun-15, hatred-2)
cc(hatred-2, and-3)
amod(hardship-5, economic-4)
conj:and(hatred-2, hardship-5)
dep(begun-15, hardship-5)
punct(begun-15, ,-6)
nsubj(begun-15, neither-7)
nsubj:xsubj(blend-17, neither-7)
case(them-9, of-8)
nmod:of(neither-7, them-9)
amod(neither-7, new-10)
case(Yugoslavia-12, to-11)
nmod:to(new-10, Yugoslavia-12)
punct(begun-15, ,-13)
aux(begun-15, have-14)
root(ROOT-0, begun-15)
mark(blend-17, to-16)
xcomp(begun-15, blend-17)
case(weeks-22, over-18)
det(weeks-22, the-19)
amod(weeks-22, past-20)
amod(weeks-22, few-21)
nmod:over(blend-17, weeks-22)
case(poison-26, into-23)
det(poison-26, a-24)
amod(poison-26, political-25)
nmod:into(blend-17, poison-26)
det(country-28, the-27)
nmod:poss(leaders-30, country-28)
case(country-28, 's-29)
nsubj(about-33, leaders-30)
nsubj:xsubj(drink-35, leaders-30)
aux(about-33, may-31)
aux(about-33, be-32)
acl:relcl(poison-26, about-33)
mark(drink-35, to-34)
xcomp(about-33, drink-35)
punct(begun-15, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#leaders

drink :: `` Tell Dave we 're sorry , '' he says , `` but we 're drinking Bud . ''/''
punct(says-10, ``-1)
ccomp(says-10, Tell-2)
dobj(Tell-2, Dave-3)
nsubj(sorry-6, we-4)
cop(sorry-6, 're-5)
ccomp(Tell-2, sorry-6)
punct(says-10, ,-7)
punct(says-10, ''-8)
nsubj(says-10, he-9)
root(ROOT-0, says-10)
punct(says-10, ,-11)
punct(says-10, ``-12)
cc(says-10, but-13)
nsubj(drinking-16, we-14)
aux(drinking-16, 're-15)
conj:but(says-10, drinking-16)
dobj(drinking-16, Bud-17)
punct(says-10, .-18)
punct(says-10, ''-19)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drink#bud

drink :: Now , the pock-marked nightspot is crowded with men drinking arak liquor and slapping dominoes and backgammon pieces on rickety tables ./.
advmod(crowded-7, Now-1)
punct(crowded-7, ,-2)
det(nightspot-5, the-3)
amod(nightspot-5, pock-marked-4)
nsubjpass(crowded-7, nightspot-5)
auxpass(crowded-7, is-6)
root(ROOT-0, crowded-7)
mark(drinking-10, with-8)
nsubj(drinking-10, men-9)
advcl(crowded-7, drinking-10)
compound(liquor-12, arak-11)
dobj(drinking-10, liquor-12)
cc(liquor-12, and-13)
compound(dominoes-15, slapping-14)
dobj(drinking-10, dominoes-15)
conj:and(liquor-12, dominoes-15)
cc(drinking-10, and-16)
amod(pieces-18, backgammon-17)
advcl(crowded-7, pieces-18)
conj:and(drinking-10, pieces-18)
case(tables-21, on-19)
amod(tables-21, rickety-20)
nmod:on(pieces-18, tables-21)
punct(crowded-7, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#liquor

drink :: As a solid red , however , good pinot noir is so pleasurable to drink , so versatile with food that demand from consumers is increasing rapidly , putting pressure on short supply ./.
case(red-4, As-1)
det(red-4, a-2)
amod(red-4, solid-3)
nmod:as(pleasurable-13, red-4)
punct(pleasurable-13, ,-5)
advmod(pleasurable-13, however-6)
punct(pleasurable-13, ,-7)
amod(pinot-9, good-8)
nsubj(pleasurable-13, pinot-9)
nsubj:xsubj(drink-15, pinot-9)
amod(pinot-9, noir-10)
cop(pleasurable-13, is-11)
advmod(pleasurable-13, so-12)
root(ROOT-0, pleasurable-13)
mark(drink-15, to-14)
xcomp(pleasurable-13, drink-15)
punct(pleasurable-13, ,-16)
advmod(versatile-18, so-17)
nsubj(increasing-26, versatile-18)
case(food-20, with-19)
nmod:with(versatile-18, food-20)
nsubj(demand-22, food-20)
ref(food-20, that-21)
acl:relcl(food-20, demand-22)
case(consumers-24, from-23)
nmod:from(demand-22, consumers-24)
aux(increasing-26, is-25)
ccomp(pleasurable-13, increasing-26)
advmod(increasing-26, rapidly-27)
punct(increasing-26, ,-28)
advcl(increasing-26, putting-29)
dobj(putting-29, pressure-30)
case(supply-33, on-31)
amod(supply-33, short-32)
nmod:on(putting-29, supply-33)
punct(pleasurable-13, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#pinot

drink :: Mr. Andrews ate rancid mutton fat and drank mare 's milk in the Gobi with the best and worst of them ./.
compound(Andrews-2, Mr.-1)
nsubj(ate-3, Andrews-2)
nsubj(drank-8, Andrews-2)
root(ROOT-0, ate-3)
amod(fat-6, rancid-4)
compound(fat-6, mutton-5)
dobj(ate-3, fat-6)
cc(ate-3, and-7)
conj:and(ate-3, drank-8)
nmod:poss(milk-11, mare-9)
case(mare-9, 's-10)
dobj(drank-8, milk-11)
case(Gobi-14, in-12)
det(Gobi-14, the-13)
nmod:in(ate-3, Gobi-14)
case(best-17, with-15)
det(best-17, the-16)
nmod:with(Gobi-14, best-17)
cc(best-17, and-18)
nmod:with(Gobi-14, worst-19)
conj:and(best-17, worst-19)
case(them-21, of-20)
nmod:of(best-17, them-21)
punct(ate-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#milk

drink :: Now , to persuade more men to drink diet Coke , Coca-Cola Co. is enlisting professional football players ./.
advmod(persuade-4, Now-1)
punct(persuade-4, ,-2)
mark(persuade-4, to-3)
root(ROOT-0, persuade-4)
amod(men-6, more-5)
dobj(persuade-4, men-6)
nsubj:xsubj(drink-8, men-6)
mark(drink-8, to-7)
xcomp(persuade-4, drink-8)
compound(Coke-10, diet-9)
dobj(drink-8, Coke-10)
punct(Coke-10, ,-11)
compound(Co.-13, Coca-Cola-12)
appos(Coke-10, Co.-13)
aux(enlisting-15, is-14)
dep(persuade-4, enlisting-15)
amod(players-18, professional-16)
compound(players-18, football-17)
dobj(enlisting-15, players-18)
punct(persuade-4, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#coke

drink :: So the kids gave Mom a watch , said a couple of nice things , and drank a retirement toast in her honor ./.
dep(gave-4, So-1)
det(kids-3, the-2)
nsubj(gave-4, kids-3)
advcl(said-9, gave-4)
dobj(gave-4, Mom-5)
det(watch-7, a-6)
dobj(Mom-5, watch-7)
punct(said-9, ,-8)
root(ROOT-0, said-9)
det(couple-11, a-10)
dobj(said-9, couple-11)
case(things-14, of-12)
amod(things-14, nice-13)
nmod:of(couple-11, things-14)
punct(couple-11, ,-15)
cc(couple-11, and-16)
dobj(said-9, drank-17)
conj:and(couple-11, drank-17)
det(toast-20, a-18)
compound(toast-20, retirement-19)
dobj(drank-17, toast-20)
case(honor-23, in-21)
nmod:poss(honor-23, her-22)
nmod:in(toast-20, honor-23)
punct(said-9, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#toast

drink :: To widen the drink 's appeal , a TV ad campaign was launched two years ago showing punks with fruit-colored , spiked hair drinking Pimm 's ./.
mark(widen-2, To-1)
advcl(launched-13, widen-2)
det(drink-4, the-3)
nmod:poss(appeal-6, drink-4)
case(drink-4, 's-5)
dobj(widen-2, appeal-6)
punct(launched-13, ,-7)
det(campaign-11, a-8)
compound(campaign-11, TV-9)
compound(campaign-11, ad-10)
nsubjpass(launched-13, campaign-11)
auxpass(launched-13, was-12)
root(ROOT-0, launched-13)
nummod(years-15, two-14)
nmod:npmod(ago-16, years-15)
advmod(launched-13, ago-16)
xcomp(launched-13, showing-17)
dobj(showing-17, punks-18)
case(Pimm-25, with-19)
amod(Pimm-25, fruit-colored-20)
punct(Pimm-25, ,-21)
amod(Pimm-25, spiked-22)
compound(Pimm-25, hair-23)
compound(Pimm-25, drinking-24)
nmod:'s(showing-17, Pimm-25)
case(Pimm-25, 's-26)
punct(launched-13, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

drink :: Southerners drank more alcoholic beverages than residents of any other U.S. region last year , and households with incomes above $ 35 , 000 drank more than any other income group , a study found ./.
nsubj(drank-2, Southerners-1)
root(ROOT-0, drank-2)
amod(beverages-5, more-3)
amod(beverages-5, alcoholic-4)
dobj(drank-2, beverages-5)
case(residents-7, than-6)
nmod:than(beverages-5, residents-7)
case(region-12, of-8)
det(region-12, any-9)
amod(region-12, other-10)
compound(region-12, U.S.-11)
nmod:of(residents-7, region-12)
amod(year-14, last-13)
nmod:tmod(drank-2, year-14)
punct(drank-2, ,-15)
cc(drank-2, and-16)
conj:and(drank-2, households-17)
case(incomes-19, with-18)
nmod:with(households-17, incomes-19)
case(35-22, above-20)
dep(35-22, $-21)
nmod:above(households-17, 35-22)
punct(households-17, ,-23)
nsubj(drank-25, 000-24)
acl:relcl(households-17, drank-25)
dobj(drank-25, more-26)
case(group-31, than-27)
det(group-31, any-28)
amod(group-31, other-29)
compound(group-31, income-30)
nmod:than(more-26, group-31)
punct(drank-25, ,-32)
det(study-34, a-33)
nsubj(found-35, study-34)
parataxis(drank-25, found-35)
punct(drank-2, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#beverages

drink :: He retreats into jolly descriptions of a few days spent behind the front lines in French villages and ruined chateaux teeming with wild flowers ; he records his progress from naive snob to combat veteran horsing around , playing cricket , drinking champagne and port , and thinking of his servant as his `` most valuable possession . ''/''
nsubj(retreats-2, He-1)
root(ROOT-0, retreats-2)
case(descriptions-5, into-3)
amod(descriptions-5, jolly-4)
nmod:into(retreats-2, descriptions-5)
case(days-9, of-6)
det(days-9, a-7)
amod(days-9, few-8)
nmod:of(descriptions-5, days-9)
acl(days-9, spent-10)
case(lines-14, behind-11)
det(lines-14, the-12)
compound(lines-14, front-13)
nmod:behind(spent-10, lines-14)
case(villages-17, in-15)
amod(villages-17, French-16)
nmod:in(lines-14, villages-17)
cc(retreats-2, and-18)
amod(chateaux-20, ruined-19)
conj:and(retreats-2, chateaux-20)
acl(chateaux-20, teeming-21)
case(flowers-24, with-22)
amod(flowers-24, wild-23)
nmod:with(teeming-21, flowers-24)
punct(retreats-2, ;-25)
nsubj(records-27, he-26)
parataxis(retreats-2, records-27)
nmod:poss(progress-29, his-28)
dobj(records-27, progress-29)
case(snob-32, from-30)
amod(snob-32, naive-31)
nmod:from(progress-29, snob-32)
mark(combat-34, to-33)
advcl(records-27, combat-34)
dobj(combat-34, veteran-35)
acl(veteran-35, horsing-36)
advmod(horsing-36, around-37)
punct(records-27, ,-38)
xcomp(records-27, playing-39)
dobj(playing-39, cricket-40)
punct(records-27, ,-41)
compound(champagne-43, drinking-42)
parataxis(retreats-2, champagne-43)
conj:and(records-27, champagne-43)
cc(champagne-43, and-44)
conj:and(records-27, port-45)
conj:and(champagne-43, port-45)
punct(records-27, ,-46)
cc(records-27, and-47)
parataxis(retreats-2, thinking-48)
conj:and(records-27, thinking-48)
case(servant-51, of-49)
nmod:poss(servant-51, his-50)
nmod:of(thinking-48, servant-51)
case(possession-57, as-52)
nmod:poss(possession-57, his-53)
punct(possession-57, ``-54)
advmod(valuable-56, most-55)
amod(possession-57, valuable-56)
nmod:as(thinking-48, possession-57)
punct(retreats-2, .-58)
punct(retreats-2, ''-59)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

drink :: F.W. Christian , a traveler and writer of the 19th century , said that , after drinking sakau , `` the head remains clear but the legs sometime suffer a temporary paralysis . ''/''
compound(Christian-2, F.W.-1)
nsubj(said-13, Christian-2)
punct(Christian-2, ,-3)
det(traveler-5, a-4)
appos(Christian-2, traveler-5)
cc(traveler-5, and-6)
appos(Christian-2, writer-7)
conj:and(traveler-5, writer-7)
case(century-11, of-8)
det(century-11, the-9)
amod(century-11, 19th-10)
nmod:of(traveler-5, century-11)
punct(Christian-2, ,-12)
root(ROOT-0, said-13)
mark(remains-23, that-14)
punct(remains-23, ,-15)
mark(drinking-17, after-16)
advcl(remains-23, drinking-17)
dobj(drinking-17, sakau-18)
punct(remains-23, ,-19)
punct(remains-23, ``-20)
det(head-22, the-21)
nsubj(remains-23, head-22)
ccomp(said-13, remains-23)
xcomp(remains-23, clear-24)
cc(remains-23, but-25)
det(legs-27, the-26)
nsubj(suffer-29, legs-27)
advmod(suffer-29, sometime-28)
ccomp(said-13, suffer-29)
conj:but(remains-23, suffer-29)
det(paralysis-32, a-30)
amod(paralysis-32, temporary-31)
dobj(suffer-29, paralysis-32)
punct(said-13, .-33)
punct(said-13, ''-34)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drink#sakau

drink :: Among those who drink alcoholic beverages world-wide , 8 % consume daily amounts that are damaging to their health and to society ./.
case(those-2, Among-1)
root(ROOT-0, those-2)
nsubj(drink-4, those-2)
ref(those-2, who-3)
acl:relcl(those-2, drink-4)
amod(beverages-6, alcoholic-5)
nsubj(consume-11, beverages-6)
advmod(consume-11, world-wide-7)
punct(consume-11, ,-8)
nummod(%-10, 8-9)
nsubj(consume-11, %-10)
ccomp(drink-4, consume-11)
amod(amounts-13, daily-12)
dobj(consume-11, amounts-13)
nsubj(damaging-16, amounts-13)
nsubj(damaging-16', amounts-13)
ref(amounts-13, that-14)
aux(damaging-16, are-15)
acl:relcl(amounts-13, damaging-16)
acl:relcl(amounts-13, damaging-16')
conj:and(damaging-16, damaging-16')
case(health-19, to-17)
nmod:poss(health-19, their-18)
nmod:to(damaging-16, health-19)
cc(damaging-16, and-20)
case(society-22, to-21)
nmod:to(damaging-16', society-22)
punct(those-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#those

drink :: But when the rangers drove the girls to the ranger station , the unattended youth sped away , drank heavily , and 10 hours later smashed into a motorcyclist ./.
cc(sped-16, But-1)
advmod(drove-5, when-2)
det(rangers-4, the-3)
nsubj(drove-5, rangers-4)
advcl(sped-16, drove-5)
det(girls-7, the-6)
dobj(drove-5, girls-7)
case(station-11, to-8)
det(station-11, the-9)
compound(station-11, ranger-10)
nmod:to(drove-5, station-11)
punct(sped-16, ,-12)
det(youth-15, the-13)
amod(youth-15, unattended-14)
nsubj(sped-16, youth-15)
nsubj(drank-19, youth-15)
nsubj(smashed-26, youth-15)
root(ROOT-0, sped-16)
advmod(sped-16, away-17)
punct(sped-16, ,-18)
conj:but(sped-16, drank-19)
advmod(drank-19, heavily-20)
punct(sped-16, ,-21)
cc(sped-16, and-22)
nummod(hours-24, 10-23)
nmod:npmod(later-25, hours-24)
advmod(smashed-26, later-25)
conj:and(sped-16, smashed-26)
case(motorcyclist-29, into-27)
det(motorcyclist-29, a-28)
nmod:into(smashed-26, motorcyclist-29)
punct(sped-16, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#youth

drink :: Seated in the bar of the Member 's Club -- horse-racing prints on the wall , piano tinkling softly , ladies from the Jewish Community Club gathering for luncheon -- Mr. Redmond is astonished to be told that Venezuelans now drink more `` national whiskey '' than 12-year-old scotch ./.
dep(astonished-34, Seated-1)
case(bar-4, in-2)
det(bar-4, the-3)
nmod:in(Seated-1, bar-4)
case(Club-9, of-5)
det(Member-7, the-6)
nmod:poss(Club-9, Member-7)
case(Member-7, 's-8)
nmod:of(bar-4, Club-9)
punct(prints-12, ---10)
amod(prints-12, horse-racing-11)
dep(Seated-1, prints-12)
case(wall-15, on-13)
det(wall-15, the-14)
nmod:on(prints-12, wall-15)
punct(prints-12, ,-16)
appos(prints-12, piano-17)
acl(piano-17, tinkling-18)
advmod(tinkling-18, softly-19)
punct(prints-12, ,-20)
appos(prints-12, ladies-21)
case(gathering-27, from-22)
det(gathering-27, the-23)
amod(gathering-27, Jewish-24)
compound(gathering-27, Community-25)
compound(gathering-27, Club-26)
nmod:from(ladies-21, gathering-27)
case(luncheon-29, for-28)
nmod:for(gathering-27, luncheon-29)
punct(prints-12, ---30)
compound(Redmond-32, Mr.-31)
nsubjpass(astonished-34, Redmond-32)
nsubjpass:xsubj(told-37, Redmond-32)
auxpass(astonished-34, is-33)
root(ROOT-0, astonished-34)
mark(told-37, to-35)
auxpass(told-37, be-36)
xcomp(astonished-34, told-37)
mark(drink-41, that-38)
nsubj(drink-41, Venezuelans-39)
advmod(drink-41, now-40)
ccomp(told-37, drink-41)
amod(whiskey-45, more-42)
punct(whiskey-45, ``-43)
amod(whiskey-45, national-44)
dobj(drink-41, whiskey-45)
punct(whiskey-45, ''-46)
case(scotch-49, than-47)
amod(scotch-49, 12-year-old-48)
nmod:than(whiskey-45, scotch-49)
punct(astonished-34, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#whiskey

drink :: Ronald Reagan , as popular on Main Street , U.S.A . , as any recent president , expressed his affection for the SBA by marking it for extinction , along with Amtrak , the Export-Import Bank , the Economic Development Administration and other programs deemed to be drinking too deeply from the federal budget trough ./.
compound(Reagan-2, Ronald-1)
root(ROOT-0, Reagan-2)
punct(Reagan-2, ,-3)
case(popular-5, as-4)
root(,-3, popular-5)
case(Street-8, on-6)
compound(Street-8, Main-7)
nmod:on(popular-5, Street-8)
punct(Street-8, ,-9)
appos(Street-8, U.S.A-10)
punct(popular-5, .-11)
punct(expressed-7, ,-1)
case(president-5, as-2)
det(president-5, any-3)
amod(president-5, recent-4)
nmod:as(expressed-7, president-5)
punct(expressed-7, ,-6)
root(ROOT-0, expressed-7)
nmod:poss(affection-9, his-8)
dobj(expressed-7, affection-9)
case(SBA-12, for-10)
det(SBA-12, the-11)
nmod:for(affection-9, SBA-12)
mark(marking-14, by-13)
advcl(expressed-7, marking-14)
dobj(marking-14, it-15)
case(extinction-17, for-16)
nmod:for(marking-14, extinction-17)
punct(expressed-7, ,-18)
case(Amtrak-21, along-19)
mwe(along-19, with-20)
nmod:along_with(deemed-34, Amtrak-21)
punct(Amtrak-21, ,-22)
det(Bank-25, the-23)
compound(Bank-25, Export-Import-24)
appos(Amtrak-21, Bank-25)
punct(Amtrak-21, ,-26)
det(Administration-30, the-27)
amod(Administration-30, Economic-28)
compound(Administration-30, Development-29)
nsubj(deemed-34, Administration-30)
nsubj:xsubj(drinking-37, Administration-30)
cc(Administration-30, and-31)
amod(programs-33, other-32)
conj:and(Administration-30, programs-33)
nsubj(deemed-34, programs-33)
nsubj:xsubj(drinking-37, programs-33)
parataxis(expressed-7, deemed-34)
mark(drinking-37, to-35)
aux(drinking-37, be-36)
xcomp(deemed-34, drinking-37)
advmod(deeply-39, too-38)
advmod(drinking-37, deeply-39)
case(trough-44, from-40)
det(trough-44, the-41)
amod(trough-44, federal-42)
compound(trough-44, budget-43)
nmod:from(drinking-37, trough-44)
punct(expressed-7, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#administration

drink :: Lower-alcohol beer is favored by `` session drinkers '' who spend an entire evening in a pub and are accustomed to drinking English beer which , despite its robust taste , generally is less potent than Australian or U.S. brands ./.
amod(beer-2, Lower-alcohol-1)
nsubjpass(favored-4, beer-2)
auxpass(favored-4, is-3)
root(ROOT-0, favored-4)
case(drinkers-8, by-5)
punct(drinkers-8, ``-6)
compound(drinkers-8, session-7)
nmod:agent(favored-4, drinkers-8)
nsubj(spend-11, drinkers-8)
nsubjpass(accustomed-20, drinkers-8)
punct(drinkers-8, ''-9)
ref(drinkers-8, who-10)
acl:relcl(drinkers-8, spend-11)
det(evening-14, an-12)
amod(evening-14, entire-13)
dobj(spend-11, evening-14)
case(pub-17, in-15)
det(pub-17, a-16)
nmod:in(spend-11, pub-17)
cc(spend-11, and-18)
auxpass(accustomed-20, are-19)
acl:relcl(drinkers-8, accustomed-20)
conj:and(spend-11, accustomed-20)
mark(drinking-22, to-21)
advcl(accustomed-20, drinking-22)
compound(beer-24, English-23)
dobj(drinking-22, beer-24)
nsubj(potent-35, beer-24)
ref(beer-24, which-25)
punct(potent-35, ,-26)
case(taste-30, despite-27)
nmod:poss(taste-30, its-28)
amod(taste-30, robust-29)
nmod:despite(potent-35, taste-30)
punct(potent-35, ,-31)
advmod(potent-35, generally-32)
cop(potent-35, is-33)
advmod(potent-35, less-34)
acl:relcl(beer-24, potent-35)
case(Australian-37, than-36)
nmod:than(potent-35, Australian-37)
cc(Australian-37, or-38)
nmod:than(potent-35, U.S.-39)
conj:or(Australian-37, U.S.-39)
dep(Australian-37, brands-40)
punct(favored-4, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#beer

drink :: Another third of the patients at the University of Maryland Shock Trauma Center drank alcohol before being hurt , and 16.5 % had used both marijuana and alcohol , the study said ./.
det(third-2, Another-1)
dep(drank-14, third-2)
case(patients-5, of-3)
det(patients-5, the-4)
nmod:of(third-2, patients-5)
case(University-8, at-6)
det(University-8, the-7)
nmod:at(patients-5, University-8)
case(Maryland-10, of-9)
nmod:of(University-8, Maryland-10)
compound(Center-13, Shock-11)
compound(Center-13, Trauma-12)
nsubj(drank-14, Center-13)
ccomp(said-32, drank-14)
dobj(drank-14, alcohol-15)
mark(hurt-18, before-16)
auxpass(hurt-18, being-17)
advcl(drank-14, hurt-18)
punct(drank-14, ,-19)
cc(drank-14, and-20)
nummod(%-22, 16.5-21)
nsubj(used-24, %-22)
aux(used-24, had-23)
conj:and(drank-14, used-24)
ccomp(said-32, used-24)
cc:preconj(marijuana-26, both-25)
dobj(used-24, marijuana-26)
cc(marijuana-26, and-27)
dobj(used-24, alcohol-28)
conj:and(marijuana-26, alcohol-28)
punct(said-32, ,-29)
det(study-31, the-30)
nsubj(said-32, study-31)
root(ROOT-0, said-32)
punct(said-32, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#alcohol

drink :: `` Now if one group calls for a demonstration , the others will sit home and drink coffee because they do n't want to share the credit ./.
punct(sit-14, ``-1)
advmod(sit-14, Now-2)
mark(calls-6, if-3)
nummod(group-5, one-4)
nsubj(calls-6, group-5)
advcl(sit-14, calls-6)
case(demonstration-9, for-7)
det(demonstration-9, a-8)
nmod:for(calls-6, demonstration-9)
punct(sit-14, ,-10)
det(others-12, the-11)
nsubj(sit-14, others-12)
aux(sit-14, will-13)
root(ROOT-0, sit-14)
compound(coffee-18, home-15)
cc(home-15, and-16)
conj:and(home-15, drink-17)
compound(coffee-18, drink-17)
dobj(sit-14, coffee-18)
mark(want-23, because-19)
nsubj(want-23, they-20)
nsubj:xsubj(share-25, they-20)
aux(want-23, do-21)
neg(want-23, n't-22)
advcl(sit-14, want-23)
mark(share-25, to-24)
xcomp(want-23, share-25)
det(credit-27, the-26)
dobj(share-25, credit-27)
punct(sit-14, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

drink :: `` We drank a lot of tea . ''/''
root(ROOT-0, ``-1)
nsubj(drank-3, We-2)
root(``-1, drank-3)
det(lot-5, a-4)
dobj(drank-3, lot-5)
case(tea-7, of-6)
nmod:of(lot-5, tea-7)
punct(drank-3, .-8)
punct(drank-3, ''-9)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drink#tea

drink :: Coke is even directly attacking coffee 's breakfast appeal with radio ads urging people to drink something cold to come `` alive in the morning . ''/''
nsubj(attacking-5, Coke-1)
aux(attacking-5, is-2)
advmod(attacking-5, even-3)
advmod(attacking-5, directly-4)
root(ROOT-0, attacking-5)
nmod:poss(appeal-9, coffee-6)
case(coffee-6, 's-7)
compound(appeal-9, breakfast-8)
dobj(attacking-5, appeal-9)
case(ads-12, with-10)
compound(ads-12, radio-11)
nmod:with(attacking-5, ads-12)
acl(ads-12, urging-13)
dobj(urging-13, people-14)
nsubj:xsubj(drink-16, people-14)
mark(drink-16, to-15)
xcomp(urging-13, drink-16)
dobj(drink-16, something-17)
amod(something-17, cold-18)
mark(come-20, to-19)
advcl(drink-16, come-20)
punct(come-20, ``-21)
xcomp(come-20, alive-22)
case(morning-25, in-23)
det(morning-25, the-24)
nmod:in(alive-22, morning-25)
punct(attacking-5, .-26)
punct(attacking-5, ''-27)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drink#something

drink :: Last year , more than 10 , 000 Soviets died from drinking home brew or spirits , and more than a half-million people nationwide were punished for moonshining , newspaper reports have said ./.
amod(year-2, Last-1)
nmod:tmod(died-10, year-2)
punct(died-10, ,-3)
advmod(10-6, more-4)
mwe(more-4, than-5)
nmod(died-10, 10-6)
punct(died-10, ,-7)
nummod(Soviets-9, 000-8)
nsubj(died-10, Soviets-9)
root(ROOT-0, died-10)
case(brew-14, from-11)
compound(brew-14, drinking-12)
compound(brew-14, home-13)
nmod:from(died-10, brew-14)
cc(brew-14, or-15)
nmod:from(died-10, spirits-16)
conj:or(brew-14, spirits-16)
punct(died-10, ,-17)
cc(died-10, and-18)
dep(said-33, more-19)
case(people-23, than-20)
det(people-23, a-21)
amod(people-23, half-million-22)
nmod:than(more-19, people-23)
advmod(punished-26, nationwide-24)
auxpass(punished-26, were-25)
acl(people-23, punished-26)
case(moonshining-28, for-27)
nmod:for(punished-26, moonshining-28)
punct(said-33, ,-29)
compound(reports-31, newspaper-30)
nsubj(said-33, reports-31)
aux(said-33, have-32)
conj:and(died-10, said-33)
punct(died-10, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

drink :: You ca n't drink at all if you do n't order something to eat , and you ca n't drink in a restaurant bar , even if you do order something to eat ./.
nsubj(drink-4, You-1)
aux(drink-4, ca-2)
neg(drink-4, n't-3)
root(ROOT-0, drink-4)
case(all-6, at-5)
nmod:at(drink-4, all-6)
mark(order-11, if-7)
nsubj(order-11, you-8)
aux(order-11, do-9)
neg(order-11, n't-10)
advcl(drink-4, order-11)
dobj(order-11, something-12)
nsubj:xsubj(eat-14, something-12)
mark(eat-14, to-13)
xcomp(order-11, eat-14)
punct(drink-4, ,-15)
cc(drink-4, and-16)
nsubj(drink-20, you-17)
aux(drink-20, ca-18)
neg(drink-20, n't-19)
conj:and(drink-4, drink-20)
case(bar-24, in-21)
det(bar-24, a-22)
compound(bar-24, restaurant-23)
nmod:in(drink-20, bar-24)
punct(drink-20, ,-25)
advmod(order-30, even-26)
mark(order-30, if-27)
nsubj(order-30, you-28)
aux(order-30, do-29)
advcl(drink-20, order-30)
dobj(order-30, something-31)
mark(eat-33, to-32)
acl(something-31, eat-33)
punct(drink-4, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#you

drink :: Film clips 30 and 40 years old are used to contrast the `` horrors '' of conventional surgery , radiation and chemotherapy treatments with the ease of drinking a dose of Hoxsey 's tonic ./.
compound(clips-2, Film-1)
nsubjpass(used-9, clips-2)
nsubj:xsubj(contrast-11, clips-2)
nummod(years-6, 30-3)
cc(30-3, and-4)
conj:and(30-3, 40-5)
nummod(years-6, 40-5)
nmod:npmod(old-7, years-6)
amod(clips-2, old-7)
auxpass(used-9, are-8)
root(ROOT-0, used-9)
mark(contrast-11, to-10)
xcomp(used-9, contrast-11)
det(horrors-14, the-12)
punct(horrors-14, ``-13)
dobj(contrast-11, horrors-14)
punct(horrors-14, ''-15)
case(surgery-18, of-16)
amod(surgery-18, conventional-17)
nmod:of(horrors-14, surgery-18)
punct(surgery-18, ,-19)
nmod:of(horrors-14, radiation-20)
conj:and(surgery-18, radiation-20)
cc(surgery-18, and-21)
compound(treatments-23, chemotherapy-22)
nmod:of(horrors-14, treatments-23)
conj:and(surgery-18, treatments-23)
case(ease-26, with-24)
det(ease-26, the-25)
nmod:with(horrors-14, ease-26)
mark(drinking-28, of-27)
acl(ease-26, drinking-28)
det(dose-30, a-29)
dobj(drinking-28, dose-30)
case(tonic-34, of-31)
nmod:poss(tonic-34, Hoxsey-32)
case(Hoxsey-32, 's-33)
nmod:of(dose-30, tonic-34)
punct(used-9, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#tonic

drink :: In seats of supple leather , Belgian students drink wine and listen to personal stereos ./.
case(seats-2, In-1)
nmod:in(drink-9, seats-2)
case(leather-5, of-3)
amod(leather-5, supple-4)
nmod:of(seats-2, leather-5)
punct(drink-9, ,-6)
amod(students-8, Belgian-7)
nsubj(drink-9, students-8)
nsubj(listen-12, students-8)
root(ROOT-0, drink-9)
dobj(drink-9, wine-10)
cc(drink-9, and-11)
conj:and(drink-9, listen-12)
case(stereos-15, to-13)
amod(stereos-15, personal-14)
nmod:to(listen-12, stereos-15)
punct(drink-9, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#wine

drink :: Russians in sweat suits drink tea and play cards , repack their crates and collect their linen ./.
nsubj(drink-5, Russians-1)
nsubj(play-8, Russians-1)
nsubj(repack-11, Russians-1)
nsubj(collect-15, Russians-1)
case(suits-4, in-2)
amod(suits-4, sweat-3)
nmod:in(Russians-1, suits-4)
root(ROOT-0, drink-5)
dobj(drink-5, tea-6)
cc(drink-5, and-7)
conj:and(drink-5, play-8)
dobj(play-8, cards-9)
punct(drink-5, ,-10)
conj:and(drink-5, repack-11)
nmod:poss(crates-13, their-12)
dobj(repack-11, crates-13)
cc(drink-5, and-14)
conj:and(drink-5, collect-15)
nmod:poss(linen-17, their-16)
dobj(collect-15, linen-17)
punct(drink-5, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#tea

drink :: And it did n't help that law-enforcement officials have reported problems with 19- and 20-year-olds coming to Wyoming from neighboring states to drink ./.
cc(help-5, And-1)
nsubj(help-5, it-2)
aux(help-5, did-3)
neg(help-5, n't-4)
root(ROOT-0, help-5)
mark(reported-10, that-6)
amod(officials-8, law-enforcement-7)
nsubj(reported-10, officials-8)
nsubj(20-year-olds-16, officials-8)
aux(reported-10, have-9)
ccomp(help-5, reported-10)
dobj(reported-10, problems-11)
case(19-13, with-12)
nmod:with(problems-11, 19-13)
punct(reported-10, --14)
cc(reported-10, and-15)
ccomp(help-5, 20-year-olds-16)
conj:and(reported-10, 20-year-olds-16)
acl(20-year-olds-16, coming-17)
case(Wyoming-19, to-18)
nmod:to(coming-17, Wyoming-19)
case(states-22, from-20)
amod(states-22, neighboring-21)
nmod:from(coming-17, states-22)
mark(drink-24, to-23)
xcomp(coming-17, drink-24)
punct(help-5, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

drink :: My impression is that he does n't drink . ''/''
nmod:poss(impression-2, My-1)
nsubj(is-3, impression-2)
root(ROOT-0, is-3)
mark(drink-8, that-4)
nsubj(drink-8, he-5)
aux(drink-8, does-6)
neg(drink-8, n't-7)
ccomp(is-3, drink-8)
punct(is-3, .-9)
punct(is-3, ''-10)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drink#he

drink :: Others say they still can drink wine even after their livers are too far gone to handle spirits ./.
nsubj(say-2, Others-1)
root(ROOT-0, say-2)
nsubj(drink-6, they-3)
advmod(drink-6, still-4)
aux(drink-6, can-5)
ccomp(say-2, drink-6)
dobj(drink-6, wine-7)
advmod(gone-15, even-8)
mark(gone-15, after-9)
nmod:poss(livers-11, their-10)
nsubjpass(gone-15, livers-11)
nsubj:xsubj(handle-17, livers-11)
auxpass(gone-15, are-12)
advmod(far-14, too-13)
advmod(gone-15, far-14)
advcl(drink-6, gone-15)
mark(handle-17, to-16)
xcomp(gone-15, handle-17)
dobj(handle-17, spirits-18)
punct(say-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#wine

drink :: Winos will drink anything if need be , but when they have the money to buy what they want , they tend to hew to the familiar . -LRB- Sales resistance may help explain why the handful of low-end products that companies have tried to launch in the past 20 years mostly have bombed. -RRB-/-RRB-
nsubj(drink-3, Winos-1)
aux(drink-3, will-2)
root(ROOT-0, drink-3)
dobj(drink-3, anything-4)
mark(be-7, if-5)
nsubj(be-7, need-6)
advcl(drink-3, be-7)
punct(drink-3, ,-8)
cc(drink-3, but-9)
advmod(have-12, when-10)
nsubj(have-12, they-11)
advcl(tend-22, have-12)
det(money-14, the-13)
dobj(have-12, money-14)
mark(buy-16, to-15)
acl(money-14, buy-16)
dobj(want-19, what-17)
nsubj(want-19, they-18)
ccomp(buy-16, want-19)
punct(tend-22, ,-20)
nsubj(tend-22, they-21)
nsubj:xsubj(hew-24, they-21)
conj:but(drink-3, tend-22)
mark(hew-24, to-23)
xcomp(tend-22, hew-24)
case(familiar-27, to-25)
det(familiar-27, the-26)
nmod:to(hew-24, familiar-27)
punct(drink-3, .-28)
punct(help-5, -LRB--1)
compound(resistance-3, Sales-2)
nsubj(help-5, resistance-3)
aux(help-5, may-4)
root(ROOT-0, help-5)
ccomp(help-5, explain-6)
advmod(bombed-26, why-7)
det(handful-9, the-8)
dobj(tried-16, handful-9)
nsubj:xsubj(launch-18, handful-9)
nsubjpass(bombed-26, handful-9)
case(products-12, of-10)
amod(products-12, low-end-11)
nmod:of(handful-9, products-12)
ref(handful-9, that-13)
nsubj(tried-16, companies-14)
aux(tried-16, have-15)
acl:relcl(handful-9, tried-16)
mark(launch-18, to-17)
xcomp(tried-16, launch-18)
case(years-23, in-19)
det(years-23, the-20)
amod(years-23, past-21)
nummod(years-23, 20-22)
nmod:in(launch-18, years-23)
advmod(bombed-26, mostly-24)
aux(bombed-26, have-25)
advcl(explain-6, bombed-26)
punct(help-5, .-27)
punct(help-5, -RRB--28)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: drink#anything

drink :: Others are drinking heavily ./.
nsubj(drinking-3, Others-1)
aux(drinking-3, are-2)
root(ROOT-0, drinking-3)
advmod(drinking-3, heavily-4)
punct(drinking-3, .-5)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#others

drink :: At about the same time , according to senior Hutton officials , Mr. Fomon was drinking heavily , though he says that alcohol never affected his ability to do his job ./.
case(time-5, At-1)
case(time-5, about-2)
det(time-5, the-3)
amod(time-5, same-4)
nmod:about(drinking-16, time-5)
punct(drinking-16, ,-6)
case(officials-11, according-7)
mwe(according-7, to-8)
amod(officials-11, senior-9)
compound(officials-11, Hutton-10)
nmod:according_to(drinking-16, officials-11)
punct(drinking-16, ,-12)
compound(Fomon-14, Mr.-13)
nsubj(drinking-16, Fomon-14)
aux(drinking-16, was-15)
root(ROOT-0, drinking-16)
advmod(drinking-16, heavily-17)
punct(drinking-16, ,-18)
mark(says-21, though-19)
nsubj(says-21, he-20)
advcl(drinking-16, says-21)
mark(affected-25, that-22)
nsubj(affected-25, alcohol-23)
neg(affected-25, never-24)
ccomp(says-21, affected-25)
nmod:poss(ability-27, his-26)
dobj(affected-25, ability-27)
mark(do-29, to-28)
acl(ability-27, do-29)
nmod:poss(job-31, his-30)
dobj(do-29, job-31)
punct(drinking-16, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#fomon

drink :: His father , a bootlegger and dance-hall operator , shot and killed his own brother in self-defense , and later drank himself to death ./.
nmod:poss(father-2, His-1)
root(ROOT-0, father-2)
punct(father-2, ,-3)
det(bootlegger-5, a-4)
appos(father-2, bootlegger-5)
cc(bootlegger-5, and-6)
compound(operator-8, dance-hall-7)
appos(father-2, operator-8)
conj:and(bootlegger-5, operator-8)
punct(father-2, ,-9)
appos(father-2, shot-10)
cc(father-2, and-11)
conj:and(father-2, killed-12)
nmod:poss(brother-15, his-13)
amod(brother-15, own-14)
dobj(killed-12, brother-15)
case(self-defense-17, in-16)
nmod:in(killed-12, self-defense-17)
punct(father-2, ,-18)
cc(father-2, and-19)
advmod(drank-21, later-20)
conj:and(father-2, drank-21)
dobj(drank-21, himself-22)
case(death-24, to-23)
nmod:to(drank-21, death-24)
punct(father-2, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#himself

drink :: `` A German , '' said Mr. Bradford , `` is just not going to drink beer out of a can . ''/''
punct(said-6, ``-1)
det(German-3, A-2)
ccomp(said-6, German-3)
punct(said-6, ,-4)
punct(said-6, ''-5)
root(ROOT-0, said-6)
compound(Bradford-8, Mr.-7)
nsubj(going-14, Bradford-8)
nsubj:xsubj(drink-16, Bradford-8)
punct(Bradford-8, ,-9)
punct(going-14, ``-10)
aux(going-14, is-11)
advmod(going-14, just-12)
neg(going-14, not-13)
ccomp(said-6, going-14)
mark(drink-16, to-15)
xcomp(going-14, drink-16)
dobj(drink-16, beer-17)
case(can-21, out-18)
mwe(out-18, of-19)
det(can-21, a-20)
nmod:out_of(drink-16, can-21)
punct(said-6, .-22)
punct(said-6, ''-23)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drink#beer

drink :: Some people drank tea brewed at the back of the neoclassical church ./.
det(people-2, Some-1)
nsubj(drank-3, people-2)
root(ROOT-0, drank-3)
dobj(drank-3, tea-4)
acl(tea-4, brewed-5)
case(back-8, at-6)
det(back-8, the-7)
nmod:at(brewed-5, back-8)
case(church-12, of-9)
det(church-12, the-10)
amod(church-12, neoclassical-11)
nmod:of(back-8, church-12)
punct(drank-3, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#tea

drink :: `` Heineken has been hurt seriously since it became fashionable to drink Corona , '' says Frank Walters , research director for the liquor industry newsletter Impact ./.
punct(says-16, ``-1)
nsubjpass(hurt-5, Heineken-2)
aux(hurt-5, has-3)
auxpass(hurt-5, been-4)
ccomp(says-16, hurt-5)
advmod(hurt-5, seriously-6)
mark(became-9, since-7)
nsubj(became-9, it-8)
nsubj:xsubj(drink-12, it-8)
advcl(hurt-5, became-9)
xcomp(became-9, fashionable-10)
mark(drink-12, to-11)
xcomp(became-9, drink-12)
dobj(drink-12, Corona-13)
punct(says-16, ,-14)
punct(says-16, ''-15)
root(ROOT-0, says-16)
compound(Walters-18, Frank-17)
nsubj(says-16, Walters-18)
punct(Walters-18, ,-19)
compound(director-21, research-20)
appos(Walters-18, director-21)
case(Impact-27, for-22)
det(Impact-27, the-23)
compound(Impact-27, liquor-24)
compound(Impact-27, industry-25)
compound(Impact-27, newsletter-26)
nmod:for(director-21, Impact-27)
punct(says-16, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#corona

drink :: Schieffelin & Somerset Co. is beginning a boldly different , big-budget advertising campaign that it hopes will persuade more baby boomers to drink its Johnnie Walker Scotch whisky brands ./.
compound(Co.-4, Schieffelin-1)
cc(Schieffelin-1, &-2)
conj:&(Schieffelin-1, Somerset-3)
compound(Co.-4, Somerset-3)
nsubj(beginning-6, Co.-4)
aux(beginning-6, is-5)
root(ROOT-0, beginning-6)
det(campaign-13, a-7)
advmod(different-9, boldly-8)
amod(campaign-13, different-9)
punct(campaign-13, ,-10)
amod(campaign-13, big-budget-11)
compound(campaign-13, advertising-12)
dobj(beginning-6, campaign-13)
dobj(hopes-16, campaign-13)
ref(campaign-13, that-14)
nsubj(hopes-16, it-15)
acl:relcl(campaign-13, hopes-16)
aux(persuade-18, will-17)
ccomp(hopes-16, persuade-18)
amod(boomers-21, more-19)
compound(boomers-21, baby-20)
dobj(persuade-18, boomers-21)
nsubj:xsubj(drink-23, boomers-21)
mark(drink-23, to-22)
xcomp(persuade-18, drink-23)
nmod:poss(brands-29, its-24)
compound(brands-29, Johnnie-25)
compound(brands-29, Walker-26)
compound(brands-29, Scotch-27)
compound(brands-29, whisky-28)
dobj(drink-23, brands-29)
punct(beginning-6, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#brands

drink :: The new Johnnie Walker pitch has attractive young women gushing about the wonderful young men in their lives who drink Johnnie Walker ./.
det(pitch-5, The-1)
amod(pitch-5, new-2)
compound(pitch-5, Johnnie-3)
compound(pitch-5, Walker-4)
nsubj(has-6, pitch-5)
root(ROOT-0, has-6)
amod(women-9, attractive-7)
amod(women-9, young-8)
dobj(has-6, women-9)
acl(women-9, gushing-10)
case(men-15, about-11)
det(men-15, the-12)
amod(men-15, wonderful-13)
amod(men-15, young-14)
nmod:about(gushing-10, men-15)
case(lives-18, in-16)
nmod:poss(lives-18, their-17)
nmod:in(men-15, lives-18)
nsubj(drink-20, lives-18)
ref(lives-18, who-19)
acl:relcl(lives-18, drink-20)
compound(Walker-22, Johnnie-21)
dobj(drink-20, Walker-22)
punct(has-6, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#walker

drink :: Many who live in the zone still seem almost hyper-American: They drink harder , pray more , salute faster ./.
nsubj(live-3, Many-1)
nsubj(seem-8, Many-1)
ref(Many-1, who-2)
acl:relcl(Many-1, live-3)
case(zone-6, in-4)
det(zone-6, the-5)
nmod:in(live-3, zone-6)
advmod(seem-8, still-7)
root(ROOT-0, seem-8)
advmod(hyper-American-10, almost-9)
xcomp(seem-8, hyper-American-10)
punct(seem-8, :-11)
nsubj(drink-13, They-12)
parataxis(seem-8, drink-13)
advmod(drink-13, harder-14)
punct(drink-13, ,-15)
conj(drink-13, pray-16)
dobj(pray-16, more-17)
punct(drink-13, ,-18)
conj(drink-13, salute-19)
advmod(salute-19, faster-20)
punct(seem-8, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#they

drink :: Walter Single , a recovering alcoholic , recalls that on a daily diet of nine pints of Wild Irish Rose , he still was able `` to function well enough to panhandle the money he needed to drink all day and still have enough left for a wake-up in the morning . ''/''
compound(Single-2, Walter-1)
nsubj(recalls-8, Single-2)
punct(Single-2, ,-3)
det(alcoholic-6, a-4)
amod(alcoholic-6, recovering-5)
appos(Single-2, alcoholic-6)
punct(Single-2, ,-7)
root(ROOT-0, recalls-8)
mark(able-25, that-9)
case(diet-13, on-10)
det(diet-13, a-11)
amod(diet-13, daily-12)
nmod:on(able-25, diet-13)
case(pints-16, of-14)
nummod(pints-16, nine-15)
nmod:of(diet-13, pints-16)
case(Rose-20, of-17)
amod(Rose-20, Wild-18)
amod(Rose-20, Irish-19)
nmod:of(pints-16, Rose-20)
punct(able-25, ,-21)
nsubj(able-25, he-22)
nsubj:xsubj(function-28, he-22)
advmod(able-25, still-23)
cop(able-25, was-24)
ccomp(recalls-8, able-25)
punct(able-25, ``-26)
mark(function-28, to-27)
xcomp(able-25, function-28)
advmod(enough-30, well-29)
dobj(function-28, enough-30)
case(panhandle-32, to-31)
nmod:to(enough-30, panhandle-32)
det(money-34, the-33)
dobj(enough-30, money-34)
nsubj(needed-36, he-35)
nsubj:xsubj(drink-38, he-35)
acl:relcl(money-34, needed-36)
mark(drink-38, to-37)
xcomp(needed-36, drink-38)
det(day-40, all-39)
nmod:tmod(drink-38, day-40)
cc(enough-30, and-41)
advmod(have-43, still-42)
dobj(function-28, have-43)
conj:and(enough-30, have-43)
advmod(left-45, enough-44)
dep(have-43, left-45)
case(wake-up-48, for-46)
det(wake-up-48, a-47)
nmod:for(left-45, wake-up-48)
case(morning-51, in-49)
det(morning-51, the-50)
nmod:in(wake-up-48, morning-51)
punct(recalls-8, .-52)
punct(recalls-8, ''-53)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drink#he

drink :: At about the same time , according to senior Hutton officials , Mr. Fomon was drinking heavily , though he says that alcohol never affected his ability to do his job ./.
case(time-5, At-1)
case(time-5, about-2)
det(time-5, the-3)
amod(time-5, same-4)
nmod:about(drinking-16, time-5)
punct(drinking-16, ,-6)
case(officials-11, according-7)
mwe(according-7, to-8)
amod(officials-11, senior-9)
compound(officials-11, Hutton-10)
nmod:according_to(drinking-16, officials-11)
punct(drinking-16, ,-12)
compound(Fomon-14, Mr.-13)
nsubj(drinking-16, Fomon-14)
aux(drinking-16, was-15)
root(ROOT-0, drinking-16)
advmod(drinking-16, heavily-17)
punct(drinking-16, ,-18)
mark(says-21, though-19)
nsubj(says-21, he-20)
advcl(drinking-16, says-21)
mark(affected-25, that-22)
nsubj(affected-25, alcohol-23)
neg(affected-25, never-24)
ccomp(says-21, affected-25)
nmod:poss(ability-27, his-26)
dobj(affected-25, ability-27)
mark(do-29, to-28)
acl(ability-27, do-29)
nmod:poss(job-31, his-30)
dobj(do-29, job-31)
punct(drinking-16, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#fomon

drink :: His father , a bootlegger and dance-hall operator , shot and killed his own brother in self-defense , and later drank himself to death ./.
nmod:poss(father-2, His-1)
root(ROOT-0, father-2)
punct(father-2, ,-3)
det(bootlegger-5, a-4)
appos(father-2, bootlegger-5)
cc(bootlegger-5, and-6)
compound(operator-8, dance-hall-7)
appos(father-2, operator-8)
conj:and(bootlegger-5, operator-8)
punct(father-2, ,-9)
appos(father-2, shot-10)
cc(father-2, and-11)
conj:and(father-2, killed-12)
nmod:poss(brother-15, his-13)
amod(brother-15, own-14)
dobj(killed-12, brother-15)
case(self-defense-17, in-16)
nmod:in(killed-12, self-defense-17)
punct(father-2, ,-18)
cc(father-2, and-19)
advmod(drank-21, later-20)
conj:and(father-2, drank-21)
dobj(drank-21, himself-22)
case(death-24, to-23)
nmod:to(drank-21, death-24)
punct(father-2, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#himself

drink :: `` The celebrity could bring more damage to the program and to somebody else 's recovery if they started drinking again , '' says Chris Jorgensen , vice president of communications ./.
punct(bring-5, ``-1)
det(celebrity-3, The-2)
nsubj(bring-5, celebrity-3)
nsubj(bring-5', celebrity-3)
aux(bring-5, could-4)
conj:and(bring-5, bring-5')
dep(says-24, bring-5)
dep(says-24, bring-5')
amod(damage-7, more-6)
dobj(bring-5, damage-7)
case(program-10, to-8)
det(program-10, the-9)
nmod:to(bring-5, program-10)
cc(bring-5, and-11)
case(recovery-16, to-12)
nmod:poss(recovery-16, somebody-13)
advmod(somebody-13, else-14)
case(somebody-13, 's-15)
nmod:to(bring-5', recovery-16)
mark(started-19, if-17)
nsubj(started-19, they-18)
advcl(bring-5, started-19)
xcomp(started-19, drinking-20)
advmod(drinking-20, again-21)
punct(bring-5, ,-22)
punct(bring-5, ''-23)
root(ROOT-0, says-24)
compound(Jorgensen-26, Chris-25)
nsubj(says-24, Jorgensen-26)
punct(Jorgensen-26, ,-27)
compound(president-29, vice-28)
appos(Jorgensen-26, president-29)
case(communications-31, of-30)
nmod:of(president-29, communications-31)
punct(says-24, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

drink :: The theory behind the strategy: If it 's there , people will drink it ./.
det(theory-2, The-1)
root(ROOT-0, theory-2)
case(strategy-5, behind-3)
det(strategy-5, the-4)
nmod:behind(theory-2, strategy-5)
punct(theory-2, :-6)
mark('s-9, If-7)
nsubj('s-9, it-8)
advcl(drink-14, 's-9)
advmod('s-9, there-10)
punct(drink-14, ,-11)
nsubj(drink-14, people-12)
aux(drink-14, will-13)
dep(theory-2, drink-14)
dobj(drink-14, it-15)
punct(theory-2, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#it

drink :: It is Babe who ends up drinking too much because she never wins her battles against family convention and it is Babe who comes to an early , tragic end ./.
nsubj(Babe-3, It-1)
cop(Babe-3, is-2)
root(ROOT-0, Babe-3)
nsubj(ends-5, Babe-3)
ref(Babe-3, who-4)
acl:relcl(Babe-3, ends-5)
compound:prt(ends-5, up-6)
dobj(ends-5, drinking-7)
advmod(much-9, too-8)
advmod(ends-5, much-9)
mark(wins-13, because-10)
nsubj(wins-13, she-11)
neg(wins-13, never-12)
advcl(ends-5, wins-13)
nsubj(battles-15, her-14)
dobj(wins-13, battles-15)
case(convention-18, against-16)
compound(convention-18, family-17)
nmod:against(battles-15, convention-18)
cc(battles-15, and-19)
nsubj(Babe-22, it-20)
cop(Babe-22, is-21)
dobj(wins-13, Babe-22)
conj:and(battles-15, Babe-22)
nsubj(comes-24, Babe-22)
ref(Babe-22, who-23)
acl:relcl(Babe-22, comes-24)
case(end-30, to-25)
det(end-30, an-26)
amod(end-30, early-27)
punct(end-30, ,-28)
amod(end-30, tragic-29)
nmod:to(comes-24, end-30)
punct(Babe-3, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

drink :: Similar rites are involved in ascending to positions of leadership ; a new shaman , for example , is expected to work , drink or drug himself into a trance ./.
amod(rites-2, Similar-1)
nsubjpass(involved-4, rites-2)
auxpass(involved-4, are-3)
root(ROOT-0, involved-4)
mark(ascending-6, in-5)
advcl(involved-4, ascending-6)
case(positions-8, to-7)
nmod:to(ascending-6, positions-8)
case(leadership-10, of-9)
nmod:of(positions-8, leadership-10)
punct(involved-4, ;-11)
det(shaman-14, a-12)
amod(shaman-14, new-13)
nsubjpass(expected-20, shaman-14)
nsubj:xsubj(work-22, shaman-14)
punct(shaman-14, ,-15)
case(example-17, for-16)
nmod:for(shaman-14, example-17)
punct(shaman-14, ,-18)
auxpass(expected-20, is-19)
parataxis(involved-4, expected-20)
mark(work-22, to-21)
xcomp(expected-20, work-22)
punct(work-22, ,-23)
xcomp(expected-20, drink-24)
conj:or(work-22, drink-24)
cc(work-22, or-25)
xcomp(expected-20, drug-26)
conj:or(work-22, drug-26)
dobj(drug-26, himself-27)
case(trance-30, into-28)
det(trance-30, a-29)
nmod:into(drug-26, trance-30)
punct(involved-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

drink :: Every night at the Dukakis hotel , the Hyatt Regency , the New York and Washington reporters and the Dukakis people intermingled , drinking till three or four in the morning ./.
det(night-2, Every-1)
nmod:tmod(intermingled-22, night-2)
case(hotel-6, at-3)
det(hotel-6, the-4)
compound(hotel-6, Dukakis-5)
nmod:at(intermingled-22, hotel-6)
punct(hotel-6, ,-7)
det(Regency-10, the-8)
compound(Regency-10, Hyatt-9)
appos(hotel-6, Regency-10)
punct(hotel-6, ,-11)
det(York-14, the-12)
compound(York-14, New-13)
nsubj(intermingled-22, York-14)
cc(York-14, and-15)
compound(reporters-17, Washington-16)
conj:and(York-14, reporters-17)
nsubj(intermingled-22, reporters-17)
cc(York-14, and-18)
det(people-21, the-19)
compound(people-21, Dukakis-20)
conj:and(York-14, people-21)
nsubj(intermingled-22, people-21)
root(ROOT-0, intermingled-22)
punct(intermingled-22, ,-23)
xcomp(intermingled-22, drinking-24)
case(three-26, till-25)
nmod:till(drinking-24, three-26)
cc(three-26, or-27)
nmod:till(drinking-24, four-28)
conj:or(three-26, four-28)
case(morning-31, in-29)
det(morning-31, the-30)
nmod:in(drinking-24, morning-31)
punct(intermingled-22, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#three

drink :: They induced shopper Aileen Schmieder to temporarily stop trying to get her family to drink more milk and juice ./.
nsubj(induced-2, They-1)
root(ROOT-0, induced-2)
compound(Schmieder-5, shopper-3)
compound(Schmieder-5, Aileen-4)
dobj(induced-2, Schmieder-5)
nsubj:xsubj(stop-8, Schmieder-5)
mark(stop-8, to-6)
advmod(stop-8, temporarily-7)
xcomp(induced-2, stop-8)
xcomp(stop-8, trying-9)
mark(get-11, to-10)
xcomp(trying-9, get-11)
nmod:poss(family-13, her-12)
dobj(get-11, family-13)
mark(drink-15, to-14)
advcl(get-11, drink-15)
amod(milk-17, more-16)
dobj(drink-15, milk-17)
cc(milk-17, and-18)
dobj(drink-15, juice-19)
conj:and(milk-17, juice-19)
punct(induced-2, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#milk

drink :: A Middle Eastern analyst says Lebanese usually drink coffee at such occasions ; Palestinians drink tea ./.
det(analyst-4, A-1)
amod(analyst-4, Middle-2)
amod(analyst-4, Eastern-3)
nsubj(says-5, analyst-4)
root(ROOT-0, says-5)
nsubj(drink-8, Lebanese-6)
advmod(drink-8, usually-7)
ccomp(says-5, drink-8)
dobj(drink-8, coffee-9)
case(occasions-12, at-10)
amod(occasions-12, such-11)
nmod:at(drink-8, occasions-12)
punct(says-5, ;-13)
nsubj(drink-15, Palestinians-14)
parataxis(says-5, drink-15)
dobj(drink-15, tea-16)
punct(says-5, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#coffee

drink :: `` Young adults tend to drink beer more for refreshment than any kind of connoisseur taste , '' he says ./.
punct(says-20, ``-1)
amod(adults-3, Young-2)
nsubj(tend-4, adults-3)
nsubj:xsubj(drink-6, adults-3)
ccomp(says-20, tend-4)
mark(drink-6, to-5)
xcomp(tend-4, drink-6)
dobj(drink-6, beer-7)
advmod(drink-6, more-8)
case(refreshment-10, for-9)
nmod:for(more-8, refreshment-10)
case(kind-13, than-11)
det(kind-13, any-12)
nmod:than(more-8, kind-13)
case(taste-16, of-14)
compound(taste-16, connoisseur-15)
nmod:of(kind-13, taste-16)
punct(says-20, ,-17)
punct(says-20, ''-18)
nsubj(says-20, he-19)
root(ROOT-0, says-20)
punct(says-20, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#beer

drink :: If we hesitate to let teen-agers drink until they 're 21 , why entrust them with shaping the fate of the Republic at 18 ?/.
mark(hesitate-3, If-1)
nsubj(hesitate-3, we-2)
nsubj:xsubj(let-5, we-2)
root(ROOT-0, hesitate-3)
mark(let-5, to-4)
xcomp(hesitate-3, let-5)
nsubj(drink-7, teen-agers-6)
ccomp(let-5, drink-7)
mark(21-11, until-8)
nsubj(21-11, they-9)
cop(21-11, 're-10)
advcl(drink-7, 21-11)
punct(21-11, ,-12)
advmod(entrust-14, why-13)
advcl(21-11, entrust-14)
dobj(entrust-14, them-15)
mark(shaping-17, with-16)
advcl(entrust-14, shaping-17)
det(fate-19, the-18)
dobj(shaping-17, fate-19)
case(Republic-22, of-20)
det(Republic-22, the-21)
nmod:of(fate-19, Republic-22)
case(18-24, at-23)
nmod:at(shaping-17, 18-24)
punct(hesitate-3, ?-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#teen-agers

drink :: Here his father , a shoemaker , drank vodka , and here his mother nourished her son 's ambitions ./.
advmod(drank-8, Here-1)
nmod:poss(father-3, his-2)
nsubj(drank-8, father-3)
punct(father-3, ,-4)
det(shoemaker-6, a-5)
appos(father-3, shoemaker-6)
punct(father-3, ,-7)
root(ROOT-0, drank-8)
dobj(drank-8, vodka-9)
punct(drank-8, ,-10)
cc(drank-8, and-11)
advmod(nourished-15, here-12)
nmod:poss(mother-14, his-13)
nsubj(nourished-15, mother-14)
conj:and(drank-8, nourished-15)
nmod:poss(son-17, her-16)
nmod:poss(ambitions-19, son-17)
case(son-17, 's-18)
dobj(nourished-15, ambitions-19)
punct(drank-8, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#vodka

drink :: After all , like any worthwhile hero , Fred was struggling -- to be a good father , to make movies , to reconcile his fantasy life with the domesticity he 'd settled into , to stay in shape and still drink lots of Budweiser ./.
case(all-2, After-1)
nmod:after(struggling-11, all-2)
punct(struggling-11, ,-3)
case(hero-7, like-4)
det(hero-7, any-5)
amod(hero-7, worthwhile-6)
nmod:like(struggling-11, hero-7)
punct(struggling-11, ,-8)
nsubj(struggling-11, Fred-9)
nsubj:xsubj(father-17, Fred-9)
aux(struggling-11, was-10)
root(ROOT-0, struggling-11)
punct(struggling-11, ---12)
mark(father-17, to-13)
cop(father-17, be-14)
det(father-17, a-15)
amod(father-17, good-16)
xcomp(struggling-11, father-17)
punct(father-17, ,-18)
mark(make-20, to-19)
advcl(father-17, make-20)
dobj(make-20, movies-21)
punct(make-20, ,-22)
mark(reconcile-24, to-23)
advcl(make-20, reconcile-24)
nmod:poss(life-27, his-25)
compound(life-27, fantasy-26)
dobj(reconcile-24, life-27)
case(domesticity-30, with-28)
det(domesticity-30, the-29)
nmod:with(reconcile-24, domesticity-30)
nsubj(settled-33, he-31)
aux(settled-33, 'd-32)
acl:relcl(domesticity-30, settled-33)
nmod(settled-33, into-34)
punct(reconcile-24, ,-35)
mark(stay-37, to-36)
ccomp(reconcile-24, stay-37)
case(shape-39, in-38)
nmod:in(stay-37, shape-39)
cc(stay-37, and-40)
advmod(drink-42, still-41)
ccomp(reconcile-24, drink-42)
conj:and(stay-37, drink-42)
dobj(drink-42, lots-43)
case(Budweiser-45, of-44)
nmod:of(lots-43, Budweiser-45)
punct(struggling-11, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#lots

drink :: Today , the upper ranks of English society still drink Pimm 's , though in weather that is rather damper and at contests somewhat tamer: the Ascot horse races , the Wimbledon tennis tournament , the Henley rowing regatta ./.
nmod:tmod(drink-10, Today-1)
punct(drink-10, ,-2)
det(ranks-5, the-3)
amod(ranks-5, upper-4)
nsubj(drink-10, ranks-5)
case(society-8, of-6)
compound(society-8, English-7)
nmod:of(ranks-5, society-8)
advmod(drink-10, still-9)
root(ROOT-0, drink-10)
dobj(drink-10, Pimm-11)
case(Pimm-11, 's-12)
punct(drink-10, ,-13)
mark(races-30, though-14)
case(weather-16, in-15)
nsubj(damper-20, weather-16)
nmod:in(races-30, weather-16)
ref(weather-16, that-17)
cop(damper-20, is-18)
advmod(damper-20, rather-19)
acl:relcl(weather-16, damper-20)
cc(damper-20, and-21)
case(contests-23, at-22)
acl:relcl(weather-16, contests-23)
conj:and(damper-20, contests-23)
advmod(tamer-25, somewhat-24)
amod(contests-23, tamer-25)
punct(races-30, :-26)
det(races-30, the-27)
amod(races-30, Ascot-28)
compound(races-30, horse-29)
advcl(drink-10, races-30)
punct(races-30, ,-31)
det(tournament-35, the-32)
compound(tournament-35, Wimbledon-33)
compound(tournament-35, tennis-34)
root(,-31, tournament-35)
punct(tournament-35, ,-36)
det(regatta-40, the-37)
compound(regatta-40, Henley-38)
compound(regatta-40, rowing-39)
appos(tournament-35, regatta-40)
punct(tournament-35, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#pimm

drink :: Then it finally comes to him: `` It 's a good reason to drink beer . ''/''
advmod(comes-4, Then-1)
nsubj(comes-4, it-2)
advmod(comes-4, finally-3)
root(ROOT-0, comes-4)
case(him-6, to-5)
nmod:to(comes-4, him-6)
punct(comes-4, :-7)
punct(comes-4, ``-8)
nsubj(reason-13, It-9)
cop(reason-13, 's-10)
det(reason-13, a-11)
amod(reason-13, good-12)
ccomp(comes-4, reason-13)
mark(drink-15, to-14)
acl(reason-13, drink-15)
dobj(drink-15, beer-16)
punct(comes-4, .-17)
punct(comes-4, ''-18)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drink#beer

drink :: Camille 's father , Wolfy , former winner of the Indianapolis 500 , is driven to drink by the exploits of his ex-wife Rose , author of a feminist denunciation of the Daleys and the host of her own talk show ./.
nmod:poss(father-3, Camille-1)
case(Camille-1, 's-2)
nsubjpass(driven-15, father-3)
nsubj:xsubj(drink-17, father-3)
punct(father-3, ,-4)
appos(father-3, Wolfy-5)
punct(father-3, ,-6)
amod(winner-8, former-7)
appos(father-3, winner-8)
case(Indianapolis-11, of-9)
det(Indianapolis-11, the-10)
nmod:of(winner-8, Indianapolis-11)
nummod(Indianapolis-11, 500-12)
punct(father-3, ,-13)
auxpass(driven-15, is-14)
root(ROOT-0, driven-15)
mark(drink-17, to-16)
xcomp(driven-15, drink-17)
case(exploits-20, by-18)
det(exploits-20, the-19)
nmod:by(drink-17, exploits-20)
case(ex-wife-23, of-21)
nmod:poss(ex-wife-23, his-22)
nmod:of(exploits-20, ex-wife-23)
xcomp(driven-15, Rose-24)
punct(Rose-24, ,-25)
appos(Rose-24, author-26)
case(denunciation-30, of-27)
det(denunciation-30, a-28)
amod(denunciation-30, feminist-29)
nmod:of(author-26, denunciation-30)
case(Daleys-33, of-31)
det(Daleys-33, the-32)
nmod:of(denunciation-30, Daleys-33)
cc(Daleys-33, and-34)
det(host-36, the-35)
nmod:of(denunciation-30, host-36)
conj:and(Daleys-33, host-36)
case(show-41, of-37)
nmod:poss(show-41, her-38)
amod(show-41, own-39)
compound(show-41, talk-40)
nmod:of(host-36, show-41)
punct(driven-15, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#father

drink :: Feeling sick and lonely I returned to my tent to write out my casualty report ; but instead I sat on the floor and drank whisky after whisky as I gazed into a black and empty future . ''/''
nmod:npmod(sick-2, Feeling-1)
root(ROOT-0, sick-2)
cc(sick-2, and-3)
conj:and(sick-2, lonely-4)
nsubj(returned-6, I-5)
nsubj:xsubj(write-11, I-5)
dep(sick-2, returned-6)
case(tent-9, to-7)
nmod:poss(tent-9, my-8)
nmod:to(returned-6, tent-9)
mark(write-11, to-10)
xcomp(returned-6, write-11)
compound:prt(write-11, out-12)
nmod:poss(report-15, my-13)
compound(report-15, casualty-14)
dobj(write-11, report-15)
punct(sick-2, ;-16)
cc(sick-2, but-17)
advmod(sat-20, instead-18)
nsubj(sat-20, I-19)
nsubj(drank-25, I-19)
conj:and(sick-2, sat-20)
case(floor-23, on-21)
det(floor-23, the-22)
nmod:on(sat-20, floor-23)
cc(sat-20, and-24)
conj:and(sick-2, drank-25)
conj:and(sat-20, drank-25)
dobj(drank-25, whisky-26)
case(whisky-28, after-27)
nmod:after(drank-25, whisky-28)
mark(gazed-31, as-29)
nsubj(gazed-31, I-30)
advcl(drank-25, gazed-31)
case(future-37, into-32)
det(future-37, a-33)
amod(future-37, black-34)
cc(black-34, and-35)
conj:and(black-34, empty-36)
amod(future-37, empty-36)
nmod:into(gazed-31, future-37)
punct(sick-2, .-38)
punct(sick-2, ''-39)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drink#whisky

drink :: When sentencing a criminal , the chief justice of the country 's Supreme Court takes into consideration whether the felon has atoned for his sins by drinking sakau with the victim 's family ./.
advmod(sentencing-2, When-1)
advcl(takes-15, sentencing-2)
det(criminal-4, a-3)
dobj(sentencing-2, criminal-4)
punct(takes-15, ,-5)
det(justice-8, the-6)
compound(justice-8, chief-7)
nsubj(takes-15, justice-8)
case(Court-14, of-9)
det(country-11, the-10)
nmod:poss(Court-14, country-11)
case(country-11, 's-12)
compound(Court-14, Supreme-13)
nmod:of(justice-8, Court-14)
root(ROOT-0, takes-15)
case(consideration-17, into-16)
nmod:into(takes-15, consideration-17)
mark(atoned-22, whether-18)
det(felon-20, the-19)
nsubj(atoned-22, felon-20)
aux(atoned-22, has-21)
ccomp(takes-15, atoned-22)
case(sins-25, for-23)
nmod:poss(sins-25, his-24)
nmod:for(atoned-22, sins-25)
mark(drinking-27, by-26)
advcl(atoned-22, drinking-27)
dobj(drinking-27, sakau-28)
case(family-33, with-29)
det(victim-31, the-30)
nmod:poss(family-33, victim-31)
case(victim-31, 's-32)
nmod:with(drinking-27, family-33)
punct(takes-15, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#sakau

drink :: Every Oct. 21st since , officers of the Royal Navy gather in formal dress wherever they may be , and drink a toast to `` The Immortal Memory . ''/''
root(ROOT-0, Every-1)
dep(Every-1, Oct.-2)
nummod(Oct.-2, 21st-3)
dep(Oct.-2, since-4)
punct(Oct.-2, ,-5)
nsubj(gather-11, officers-6)
case(Navy-10, of-7)
det(Navy-10, the-8)
compound(Navy-10, Royal-9)
nmod:of(officers-6, Navy-10)
dep(Oct.-2, gather-11)
case(dress-14, in-12)
amod(dress-14, formal-13)
nmod:in(gather-11, dress-14)
advmod(be-18, wherever-15)
nsubj(be-18, they-16)
aux(be-18, may-17)
advcl(gather-11, be-18)
punct(Oct.-2, ,-19)
cc(Oct.-2, and-20)
dep(Every-1, drink-21)
conj:and(Oct.-2, drink-21)
det(toast-23, a-22)
dobj(drink-21, toast-23)
case(Memory-28, to-24)
punct(Memory-28, ``-25)
det(Memory-28, The-26)
amod(Memory-28, Immortal-27)
nmod:to(drink-21, Memory-28)
punct(Every-1, .-29)
punct(Every-1, ''-30)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drink#toast

drink :: They were ready to embrace anybody who was n't Mr. Bhutto , a populist who had called for land reform and who had nationalized industries as he uttered Islamic pieties -- at the same time that he held vast tracts of farm land himself , drank , womanized and , apparently , rigged elections ./.
nsubj(ready-3, They-1)
nsubj:xsubj(embrace-5, They-1)
cop(ready-3, were-2)
root(ROOT-0, ready-3)
mark(embrace-5, to-4)
xcomp(ready-3, embrace-5)
dobj(embrace-5, anybody-6)
dep(anybody-6, who-7)
root(who-7, was-8)
neg(was-8, n't-9)
compound(Bhutto-11, Mr.-10)
dep(n't-9, Bhutto-11)
punct(Bhutto-11, ,-12)
det(populist-14, a-13)
appos(Bhutto-11, populist-14)
nsubj(called-17, populist-14)
ref(populist-14, who-15)
aux(called-17, had-16)
acl:relcl(populist-14, called-17)
case(reform-20, for-18)
compound(reform-20, land-19)
nmod:for(called-17, reform-20)
cc(called-17, and-21)
nsubj(nationalized-24, who-22)
aux(nationalized-24, had-23)
acl:relcl(populist-14, nationalized-24)
conj:and(called-17, nationalized-24)
dobj(nationalized-24, industries-25)
mark(uttered-28, as-26)
nsubj(uttered-28, he-27)
advcl(nationalized-24, uttered-28)
amod(pieties-30, Islamic-29)
dobj(uttered-28, pieties-30)
punct(Bhutto-11, ---31)
case(time-35, at-32)
det(time-35, the-33)
amod(time-35, same-34)
nmod:at(Bhutto-11, time-35)
mark(held-38, that-36)
nsubj(held-38, he-37)
nsubj(drank-46, he-37)
nsubj(womanized-48, he-37)
nsubj(rigged-53, he-37)
ccomp(time-35, held-38)
amod(tracts-40, vast-39)
dobj(held-38, tracts-40)
case(land-43, of-41)
compound(land-43, farm-42)
nmod:of(tracts-40, land-43)
nmod:npmod(land-43, himself-44)
punct(held-38, ,-45)
ccomp(time-35, drank-46)
conj:and(held-38, drank-46)
punct(held-38, ,-47)
ccomp(time-35, womanized-48)
conj:and(held-38, womanized-48)
cc(held-38, and-49)
punct(rigged-53, ,-50)
advmod(rigged-53, apparently-51)
punct(rigged-53, ,-52)
ccomp(time-35, rigged-53)
conj:and(held-38, rigged-53)
dobj(rigged-53, elections-54)
punct(Bhutto-11, .-55)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#he

drink :: The repeal of Prohibition has n't stopped drinking either , and today , as always , there are people who get `` hooked '' on alcohol ./.
det(repeal-2, The-1)
nsubj(stopped-7, repeal-2)
case(Prohibition-4, of-3)
nmod:of(repeal-2, Prohibition-4)
aux(stopped-7, has-5)
neg(stopped-7, n't-6)
root(ROOT-0, stopped-7)
xcomp(stopped-7, drinking-8)
cc:preconj(today-12, either-9)
punct(today-12, ,-10)
cc(today-12, and-11)
nmod:tmod(drinking-8, today-12)
punct(stopped-7, ,-13)
case(always-15, as-14)
advcl(stopped-7, always-15)
punct(stopped-7, ,-16)
expl(are-18, there-17)
ccomp(stopped-7, are-18)
nsubj(are-18, people-19)
nsubj(get-21, people-19)
ref(people-19, who-20)
acl:relcl(people-19, get-21)
punct(get-21, ``-22)
xcomp(get-21, hooked-23)
punct(get-21, ''-24)
case(alcohol-26, on-25)
nmod:on(get-21, alcohol-26)
punct(stopped-7, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#today

drink :: U.S. executives in search of global markets have found that the French do n't drink orange juice for breakfast ; that Middle Easterners prefer toothpaste that tastes spicy ; that the Japanese like herbs in their cold medicines , and that laundry detergent is used to wash dishes in parts of Mexico ./.
compound(executives-2, U.S.-1)
nsubj(found-9, executives-2)
case(search-4, in-3)
nmod:in(executives-2, search-4)
case(markets-7, of-5)
amod(markets-7, global-6)
nmod:of(search-4, markets-7)
aux(found-9, have-8)
root(ROOT-0, found-9)
mark(drink-15, that-10)
det(French-12, the-11)
nsubj(drink-15, French-12)
aux(drink-15, do-13)
neg(drink-15, n't-14)
ccomp(found-9, drink-15)
compound(juice-17, orange-16)
dobj(drink-15, juice-17)
case(breakfast-19, for-18)
nmod:for(drink-15, breakfast-19)
punct(drink-15, ;-20)
mark(prefer-24, that-21)
amod(Easterners-23, Middle-22)
nsubj(prefer-24, Easterners-23)
conj(drink-15, prefer-24)
dobj(prefer-24, toothpaste-25)
nsubj(tastes-27, toothpaste-25)
ref(toothpaste-25, that-26)
acl:relcl(toothpaste-25, tastes-27)
dobj(tastes-27, spicy-28)
punct(drink-15, ;-29)
dep(drink-15, that-30)
det(Japanese-32, the-31)
root(that-30, Japanese-32)
case(herbs-34, like-33)
nmod:like(Japanese-32, herbs-34)
case(medicines-38, in-35)
nmod:poss(medicines-38, their-36)
amod(medicines-38, cold-37)
nmod:in(herbs-34, medicines-38)
punct(Japanese-32, ,-39)
cc(Japanese-32, and-40)
mark(used-45, that-41)
compound(detergent-43, laundry-42)
nsubjpass(used-45, detergent-43)
nsubj:xsubj(wash-47, detergent-43)
auxpass(used-45, is-44)
root(that-30, used-45)
conj:and(Japanese-32, used-45)
mark(wash-47, to-46)
xcomp(used-45, wash-47)
dobj(wash-47, dishes-48)
case(parts-50, in-49)
nmod:in(wash-47, parts-50)
case(Mexico-52, of-51)
nmod:of(parts-50, Mexico-52)
punct(Japanese-32, .-53)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#juice

drink :: Stealthies like Capt. Marvel , Bill Sweetman , John Andrews and Sam Jones are , nevertheless , a patriotic lot who aim to get as close as possible without breaching national security in pursuit of their passion . -LRB- They are aware that the most fanatic Stealth followers drink their vodka straight. -RRB-/-RRB-
root(ROOT-0, Stealthies-1)
case(Marvel-4, like-2)
compound(Marvel-4, Capt.-3)
nmod:like(Stealthies-1, Marvel-4)
punct(Marvel-4, ,-5)
compound(Sweetman-7, Bill-6)
nmod:like(Stealthies-1, Sweetman-7)
conj:and(Marvel-4, Sweetman-7)
punct(Marvel-4, ,-8)
compound(Andrews-10, John-9)
nmod:like(Stealthies-1, Andrews-10)
conj:and(Marvel-4, Andrews-10)
cc(Marvel-4, and-11)
compound(Jones-13, Sam-12)
nmod:like(Stealthies-1, Jones-13)
conj:and(Marvel-4, Jones-13)
dep(Stealthies-1, are-14)
punct(are-14, ,-15)
root(,-15, nevertheless-16)
punct(nevertheless-16, ,-17)
det(lot-20, a-18)
amod(lot-20, patriotic-19)
root(,-17, lot-20)
nsubj(aim-22, lot-20)
nsubj:xsubj(get-24, lot-20)
ref(lot-20, who-21)
acl:relcl(lot-20, aim-22)
mark(get-24, to-23)
xcomp(aim-22, get-24)
advmod(close-26, as-25)
advmod(get-24, close-26)
case(possible-28, as-27)
advcl(close-26, possible-28)
mark(breaching-30, without-29)
advcl(get-24, breaching-30)
compound(security-32, national-31)
dobj(breaching-30, security-32)
case(pursuit-34, in-33)
nmod:in(breaching-30, pursuit-34)
case(passion-37, of-35)
nmod:poss(passion-37, their-36)
nmod:of(pursuit-34, passion-37)
punct(lot-20, .-38)
punct(aware-4, -LRB--1)
nsubj(aware-4, They-2)
cop(aware-4, are-3)
root(ROOT-0, aware-4)
mark(drink-11, that-5)
det(followers-10, the-6)
advmod(fanatic-8, most-7)
amod(followers-10, fanatic-8)
compound(followers-10, Stealth-9)
nsubj(drink-11, followers-10)
ccomp(aware-4, drink-11)
nmod:poss(vodka-13, their-12)
dobj(drink-11, vodka-13)
advmod(drink-11, straight-14)
punct(aware-4, .-15)
punct(aware-4, -RRB--16)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: drink#vodka

drink :: I drank Vodka , So did you '' and saw the doors opening to the glittering life of an octave-thundering concert pianist ./.
nsubj(drank-2, I-1)
root(ROOT-0, drank-2)
dobj(drank-2, Vodka-3)
punct(drank-2, ,-4)
advmod(did-6, So-5)
dep(drank-2, did-6)
nsubj(did-6, you-7)
nsubj(saw-10, you-7)
punct(did-6, ''-8)
cc(did-6, and-9)
dep(drank-2, saw-10)
conj:and(did-6, saw-10)
det(doors-12, the-11)
dobj(saw-10, doors-12)
acl(doors-12, opening-13)
case(life-17, to-14)
det(life-17, the-15)
amod(life-17, glittering-16)
nmod:to(opening-13, life-17)
case(pianist-22, of-18)
det(pianist-22, an-19)
amod(pianist-22, octave-thundering-20)
compound(pianist-22, concert-21)
nmod:of(life-17, pianist-22)
punct(drank-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#vodka

drink :: If you had asked Lenin this question when he was drinking coffee in Zurich at the beginning of 1917 , he probably would have said: 'Oh , it will be a protracted struggle. ' ''/''
mark(asked-4, If-1)
nsubj(asked-4, you-2)
aux(asked-4, had-3)
advcl(said-25, asked-4)
dobj(asked-4, Lenin-5)
det(question-7, this-6)
nmod:tmod(asked-4, question-7)
advmod(drinking-11, when-8)
nsubj(drinking-11, he-9)
aux(drinking-11, was-10)
acl:relcl(question-7, drinking-11)
dobj(drinking-11, coffee-12)
case(Zurich-14, in-13)
nmod:in(drinking-11, Zurich-14)
case(beginning-17, at-15)
det(beginning-17, the-16)
nmod:at(drinking-11, beginning-17)
case(1917-19, of-18)
nmod:of(beginning-17, 1917-19)
punct(said-25, ,-20)
nsubj(said-25, he-21)
advmod(said-25, probably-22)
aux(said-25, would-23)
aux(said-25, have-24)
root(ROOT-0, said-25)
punct(said-25, :-26)
punct(said-25, `-27)
discourse(struggle-35, Oh-28)
punct(struggle-35, ,-29)
nsubj(struggle-35, it-30)
aux(struggle-35, will-31)
cop(struggle-35, be-32)
det(struggle-35, a-33)
amod(struggle-35, protracted-34)
ccomp(said-25, struggle-35)
punct(said-25, .-36)
punct(said-25, '-37)
punct(said-25, ''-38)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drink#coffee

drink :: Says Mr. Craver: `` They should have painted the anti-smokers as a gaggle of do-gooders who lived in air-conditioned penthouses , ate brie , drank Chablis and were out of touch with ordinary Americans . ''/''
root(ROOT-0, Says-1)
compound(Craver-3, Mr.-2)
nsubj(Says-1, Craver-3)
punct(Says-1, :-4)
punct(Says-1, ``-5)
nsubj(painted-9, They-6)
nsubj(ate-23, They-6)
nsubj(drank-26, They-6)
aux(painted-9, should-7)
aux(painted-9, have-8)
ccomp(Says-1, painted-9)
det(anti-smokers-11, the-10)
dobj(painted-9, anti-smokers-11)
case(gaggle-14, as-12)
det(gaggle-14, a-13)
nmod:as(painted-9, gaggle-14)
case(do-gooders-16, of-15)
nmod:of(gaggle-14, do-gooders-16)
nsubj(lived-18, do-gooders-16)
ref(do-gooders-16, who-17)
acl:relcl(do-gooders-16, lived-18)
case(penthouses-21, in-19)
amod(penthouses-21, air-conditioned-20)
nmod:in(lived-18, penthouses-21)
punct(painted-9, ,-22)
ccomp(Says-1, ate-23)
conj:and(painted-9, ate-23)
dobj(ate-23, brie-24)
punct(painted-9, ,-25)
ccomp(Says-1, drank-26)
conj:and(painted-9, drank-26)
dobj(drank-26, Chablis-27)
cc(painted-9, and-28)
cop(touch-32, were-29)
case(touch-32, out-30)
mwe(out-30, of-31)
ccomp(Says-1, touch-32)
conj:and(painted-9, touch-32)
case(Americans-35, with-33)
amod(Americans-35, ordinary-34)
nmod:with(touch-32, Americans-35)
punct(Says-1, .-36)
punct(Says-1, ''-37)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drink#chablis

drink :: Mr. Redford has assembled a great collection of faces , especially the geezers who look like they 've spent the past half-century drinking the same cup of coffee with the same old pals ./.
compound(Redford-2, Mr.-1)
nsubj(assembled-4, Redford-2)
aux(assembled-4, has-3)
root(ROOT-0, assembled-4)
det(collection-7, a-5)
amod(collection-7, great-6)
dobj(assembled-4, collection-7)
case(faces-9, of-8)
nmod:of(collection-7, faces-9)
punct(assembled-4, ,-10)
advmod(geezers-13, especially-11)
det(geezers-13, the-12)
nmod(assembled-4, geezers-13)
nsubj(look-15, geezers-13)
ref(geezers-13, who-14)
acl:relcl(geezers-13, look-15)
mark(spent-19, like-16)
nsubj(spent-19, they-17)
aux(spent-19, 've-18)
advcl(look-15, spent-19)
det(half-century-22, the-20)
amod(half-century-22, past-21)
dobj(spent-19, half-century-22)
acl(half-century-22, drinking-23)
det(cup-26, the-24)
amod(cup-26, same-25)
dobj(drinking-23, cup-26)
case(coffee-28, of-27)
nmod:of(cup-26, coffee-28)
case(pals-33, with-29)
det(pals-33, the-30)
amod(pals-33, same-31)
amod(pals-33, old-32)
nmod:with(drinking-23, pals-33)
punct(assembled-4, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#coffee

drink :: Last July , Ohio and Colorado raised a white flag , putting Wyoming in the unfortunate position of being the only place in the country where 19- and 20-year-olds could drink legally ./.
amod(July-2, Last-1)
nmod:tmod(raised-7, July-2)
punct(raised-7, ,-3)
nsubj(raised-7, Ohio-4)
cc(Ohio-4, and-5)
conj:and(Ohio-4, Colorado-6)
nsubj(raised-7, Colorado-6)
root(ROOT-0, raised-7)
det(flag-10, a-8)
amod(flag-10, white-9)
dobj(raised-7, flag-10)
punct(raised-7, ,-11)
advcl(raised-7, putting-12)
dobj(putting-12, Wyoming-13)
case(position-17, in-14)
det(position-17, the-15)
amod(position-17, unfortunate-16)
nmod:in(putting-12, position-17)
mark(place-22, of-18)
cop(place-22, being-19)
det(place-22, the-20)
amod(place-22, only-21)
acl(position-17, place-22)
case(country-25, in-23)
det(country-25, the-24)
nmod:in(place-22, country-25)
amod(country-25, where-26)
dep(where-26, 19-27)
punct(drink-32, --28)
cc(drink-32, and-29)
nsubj(drink-32, 20-year-olds-30)
aux(drink-32, could-31)
dep(19-27, drink-32)
advmod(drink-32, legally-33)
punct(raised-7, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#20-year-olds

drink :: The martini ranked second in the publication 's recent survey of what Americans are drinking ./.
det(martini-2, The-1)
nsubj(ranked-3, martini-2)
root(ROOT-0, ranked-3)
advmod(ranked-3, second-4)
case(survey-10, in-5)
det(publication-7, the-6)
nmod:poss(survey-10, publication-7)
case(publication-7, 's-8)
amod(survey-10, recent-9)
nmod:in(ranked-3, survey-10)
mark(drinking-15, of-11)
dobj(drinking-15, what-12)
nsubj(drinking-15, Americans-13)
aux(drinking-15, are-14)
acl(survey-10, drinking-15)
punct(ranked-3, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#what

drink :: Its theme -- Peter dragging Russia out of the dank Dark Ages -- is vast and lofty , and perhaps only a man who dreamed and drank too much would have had the gumption to cut so wide and deep a swath into the heart of Russia ./.
nmod:poss(theme-2, Its-1)
nsubj(vast-15, theme-2)
nsubj(lofty-17, theme-2)
punct(theme-2, ---3)
dep(theme-2, Peter-4)
acl(Peter-4, dragging-5)
dobj(dragging-5, Russia-6)
case(Ages-12, out-7)
mwe(out-7, of-8)
det(Ages-12, the-9)
amod(Ages-12, dank-10)
amod(Ages-12, Dark-11)
nmod:out_of(dragging-5, Ages-12)
punct(theme-2, ---13)
cop(vast-15, is-14)
root(ROOT-0, vast-15)
cc(vast-15, and-16)
conj:and(vast-15, lofty-17)
punct(vast-15, ,-18)
cc(vast-15, and-19)
advmod(man-23, perhaps-20)
advmod(man-23, only-21)
det(man-23, a-22)
conj:and(vast-15, man-23)
nsubj(dreamed-25, man-23)
nsubj(drank-27, man-23)
ref(man-23, who-24)
acl:relcl(man-23, dreamed-25)
cc(dreamed-25, and-26)
acl:relcl(man-23, drank-27)
conj:and(dreamed-25, drank-27)
advmod(much-29, too-28)
nsubj(had-32, much-29)
aux(had-32, would-30)
aux(had-32, have-31)
ccomp(drank-27, had-32)
det(gumption-34, the-33)
dobj(had-32, gumption-34)
mark(cut-36, to-35)
acl(gumption-34, cut-36)
advmod(wide-38, so-37)
dobj(cut-36, wide-38)
cc(wide-38, and-39)
dobj(cut-36, deep-40)
conj:and(wide-38, deep-40)
det(swath-42, a-41)
dep(wide-38, swath-42)
case(heart-45, into-43)
det(heart-45, the-44)
nmod:into(cut-36, heart-45)
case(Russia-47, of-46)
nmod:of(heart-45, Russia-47)
punct(vast-15, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#man

drink :: Others say Mr. Kasparov does drink , but the champion certainly looks sober when he arrives , decked out in tasseled loafers and a spiffy plaid suit -LRB- only a clashing checked necktie mars the ensemble -RRB- ./.
nsubj(say-2, Others-1)
root(ROOT-0, say-2)
compound(Kasparov-4, Mr.-3)
nsubj(drink-6, Kasparov-4)
aux(drink-6, does-5)
ccomp(say-2, drink-6)
punct(say-2, ,-7)
cc(say-2, but-8)
det(champion-10, the-9)
nsubj(looks-12, champion-10)
advmod(looks-12, certainly-11)
conj:but(say-2, looks-12)
xcomp(looks-12, sober-13)
advmod(arrives-16, when-14)
nsubj(arrives-16, he-15)
nsubj(decked-18, he-15)
advcl(looks-12, arrives-16)
punct(arrives-16, ,-17)
advcl(looks-12, decked-18)
conj:and(arrives-16, decked-18)
compound:prt(decked-18, out-19)
case(loafers-22, in-20)
amod(loafers-22, tasseled-21)
nmod:in(decked-18, loafers-22)
cc(arrives-16, and-23)
det(suit-27, a-24)
amod(suit-27, spiffy-25)
compound(suit-27, plaid-26)
advcl(looks-12, suit-27)
conj:and(arrives-16, suit-27)
punct(mars-34, -LRB--28)
advmod(mars-34, only-29)
det(mars-34, a-30)
amod(mars-34, clashing-31)
amod(mars-34, checked-32)
compound(mars-34, necktie-33)
dep(suit-27, mars-34)
det(ensemble-36, the-35)
dep(mars-34, ensemble-36)
punct(mars-34, -RRB--37)
punct(say-2, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drink#kasparov

drown :: Mr. Bilirakis 's letter referred to the March 2 death of Airman Recruit Lee Mirecki , 19 years old , of Appleton , Wis . , who drowned during an elite rescue swimmer training program at the Pensacola , Fla . , Naval Air Station ./.
compound(Bilirakis-2, Mr.-1)
nmod:poss(letter-4, Bilirakis-2)
case(Bilirakis-2, 's-3)
nsubj(referred-5, letter-4)
root(ROOT-0, referred-5)
case(death-10, to-6)
det(death-10, the-7)
compound(death-10, March-8)
nummod(death-10, 2-9)
nmod:to(referred-5, death-10)
case(Mirecki-15, of-11)
compound(Mirecki-15, Airman-12)
compound(Mirecki-15, Recruit-13)
compound(Mirecki-15, Lee-14)
nmod:of(death-10, Mirecki-15)
punct(Mirecki-15, ,-16)
nummod(years-18, 19-17)
nmod:npmod(old-19, years-18)
amod(Mirecki-15, old-19)
punct(Mirecki-15, ,-20)
case(Appleton-22, of-21)
nmod:of(Mirecki-15, Appleton-22)
punct(Appleton-22, ,-23)
appos(Appleton-22, Wis-24)
punct(referred-5, .-25)
punct(drowned-3, ,-1)
nsubj(drowned-3, who-2)
root(ROOT-0, drowned-3)
case(program-10, during-4)
det(program-10, an-5)
compound(program-10, elite-6)
compound(program-10, rescue-7)
compound(program-10, swimmer-8)
compound(program-10, training-9)
nmod:during(drowned-3, program-10)
dep(program-10, at-11)
root(at-11, the-12)
dep(the-12, Pensacola-13)
punct(Pensacola-13, ,-14)
appos(Pensacola-13, Fla-15)
punct(Pensacola-13, .-16)
punct(Station-4, ,-1)
amod(Station-4, Naval-2)
compound(Station-4, Air-3)
root(ROOT-0, Station-4)
punct(Station-4, .-5)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#who

drown :: Realism might drown it ./.
nsubj(drown-3, Realism-1)
aux(drown-3, might-2)
root(ROOT-0, drown-3)
dobj(drown-3, it-4)
punct(drown-3, .-5)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#it

drown :: As one breasts the current of this sometimes creamy , sometimes awkward self-regarding style -LRB- it 's obviously catching -RRB- , one inevitably thinks of death by drowning ./.
case(breasts-3, As-1)
nummod(breasts-3, one-2)
root(ROOT-0, breasts-3)
det(current-5, the-4)
dep(breasts-3, current-5)
case(style-14, of-6)
det(style-14, this-7)
advmod(creamy-9, sometimes-8)
amod(style-14, creamy-9)
punct(style-14, ,-10)
advmod(awkward-12, sometimes-11)
amod(style-14, awkward-12)
amod(style-14, self-regarding-13)
nmod:of(current-5, style-14)
punct(catching-19, -LRB--15)
nsubj(catching-19, it-16)
aux(catching-19, 's-17)
advmod(catching-19, obviously-18)
dep(current-5, catching-19)
punct(catching-19, -RRB--20)
punct(current-5, ,-21)
nsubj(thinks-24, one-22)
advmod(thinks-24, inevitably-23)
acl:relcl(current-5, thinks-24)
case(death-26, of-25)
nmod:of(thinks-24, death-26)
mark(drowning-28, by-27)
advcl(thinks-24, drowning-28)
punct(breasts-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

drown :: `` Without voodoo , we would drown in our misery . ''/''
root(ROOT-0, ``-1)
case(voodoo-3, Without-2)
nmod:without(drown-7, voodoo-3)
punct(drown-7, ,-4)
nsubj(drown-7, we-5)
aux(drown-7, would-6)
root(``-1, drown-7)
case(misery-10, in-8)
nmod:poss(misery-10, our-9)
nmod:in(drown-7, misery-10)
punct(drown-7, .-11)
punct(drown-7, ''-12)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: drown#we

drown :: Here in Ohio , some Democrats worry that Mr. Bush 's dismissal of his opponent as a Massachusetts liberal may drown out the Democrat 's message on the economy ./.
advmod(worry-7, Here-1)
case(Ohio-3, in-2)
nmod:in(Here-1, Ohio-3)
punct(worry-7, ,-4)
det(Democrats-6, some-5)
nsubj(worry-7, Democrats-6)
root(ROOT-0, worry-7)
mark(drown-21, that-8)
compound(Bush-10, Mr.-9)
nmod:poss(dismissal-12, Bush-10)
case(Bush-10, 's-11)
nsubj(drown-21, dismissal-12)
case(opponent-15, of-13)
nmod:poss(opponent-15, his-14)
nmod:of(dismissal-12, opponent-15)
case(liberal-19, as-16)
det(liberal-19, a-17)
compound(liberal-19, Massachusetts-18)
nmod:as(opponent-15, liberal-19)
aux(drown-21, may-20)
ccomp(worry-7, drown-21)
compound:prt(drown-21, out-22)
det(Democrat-24, the-23)
nmod:poss(message-26, Democrat-24)
case(Democrat-24, 's-25)
dobj(drown-21, message-26)
case(economy-29, on-27)
det(economy-29, the-28)
nmod:on(message-26, economy-29)
punct(worry-7, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#message

drown :: Meanwhile , GOP nominee George Bush 's day was largely drowned out by union shipyard hecklers at a marine ironworks plant in Portland , Ore ./.
advmod(drowned-11, Meanwhile-1)
punct(drowned-11, ,-2)
compound(Bush-6, GOP-3)
compound(Bush-6, nominee-4)
compound(Bush-6, George-5)
nmod:poss(day-8, Bush-6)
case(Bush-6, 's-7)
nsubjpass(drowned-11, day-8)
auxpass(drowned-11, was-9)
advmod(drowned-11, largely-10)
root(ROOT-0, drowned-11)
compound:prt(drowned-11, out-12)
case(hecklers-16, by-13)
compound(hecklers-16, union-14)
compound(hecklers-16, shipyard-15)
nmod:agent(drowned-11, hecklers-16)
case(plant-21, at-17)
det(plant-21, a-18)
amod(plant-21, marine-19)
compound(plant-21, ironworks-20)
nmod:at(drowned-11, plant-21)
case(Portland-23, in-22)
nmod:in(plant-21, Portland-23)
punct(Portland-23, ,-24)
appos(Portland-23, Ore-25)
punct(drowned-11, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#day

drown :: The long war over , blacks found that they had little more than the freedom to drown in the white world 's misery ./.
det(war-3, The-1)
amod(war-3, long-2)
nsubj(found-7, war-3)
advmod(war-3, over-4)
punct(found-7, ,-5)
nsubj(found-7, blacks-6)
root(ROOT-0, found-7)
mark(had-10, that-8)
nsubj(had-10, they-9)
ccomp(found-7, had-10)
advmod(more-12, little-11)
dobj(had-10, more-12)
case(freedom-15, than-13)
det(freedom-15, the-14)
nmod:than(more-12, freedom-15)
mark(drown-17, to-16)
advcl(had-10, drown-17)
case(misery-23, in-18)
det(world-21, the-19)
compound(world-21, white-20)
nmod:poss(misery-23, world-21)
case(world-21, 's-22)
nmod:in(drown-17, misery-23)
punct(found-7, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#misery

drown :: A rippling of boos at the introduction of Mr. Bentsen was drowned out by organ music ./.
det(rippling-2, A-1)
nsubjpass(drowned-12, rippling-2)
case(boos-4, of-3)
nmod:of(rippling-2, boos-4)
case(introduction-7, at-5)
det(introduction-7, the-6)
nmod:at(rippling-2, introduction-7)
case(Bentsen-10, of-8)
compound(Bentsen-10, Mr.-9)
nmod:of(introduction-7, Bentsen-10)
auxpass(drowned-12, was-11)
root(ROOT-0, drowned-12)
compound:prt(drowned-12, out-13)
case(music-16, by-14)
compound(music-16, organ-15)
nmod:agent(drowned-12, music-16)
punct(drowned-12, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#rippling

drown :: This , for many American communities , is the latest alternative to drowning in garbage ./.
nsubj(alternative-11, This-1)
punct(alternative-11, ,-2)
case(communities-6, for-3)
amod(communities-6, many-4)
amod(communities-6, American-5)
nmod:for(alternative-11, communities-6)
punct(alternative-11, ,-7)
cop(alternative-11, is-8)
det(alternative-11, the-9)
amod(alternative-11, latest-10)
root(ROOT-0, alternative-11)
mark(drowning-13, to-12)
acl(alternative-11, drowning-13)
case(garbage-15, in-14)
nmod:in(drowning-13, garbage-15)
punct(alternative-11, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#garbage

drown :: He noted that the Minnesota Twins , accustomed to the deafening Metrodome noise , used visual signs to communicate during critical plays , while the losing Cardinals yelled to each other , and were drowned out . . . ./.
nsubj(noted-2, He-1)
root(ROOT-0, noted-2)
mark(used-15, that-3)
det(Twins-6, the-4)
compound(Twins-6, Minnesota-5)
nsubj(used-15, Twins-6)
nsubjpass(drowned-35, Twins-6)
punct(Twins-6, ,-7)
acl(Twins-6, accustomed-8)
case(noise-13, to-9)
det(noise-13, the-10)
amod(noise-13, deafening-11)
compound(noise-13, Metrodome-12)
nmod:to(accustomed-8, noise-13)
punct(Twins-6, ,-14)
ccomp(noted-2, used-15)
amod(signs-17, visual-16)
dobj(used-15, signs-17)
mark(communicate-19, to-18)
advcl(used-15, communicate-19)
case(plays-22, during-20)
amod(plays-22, critical-21)
nmod:during(communicate-19, plays-22)
punct(used-15, ,-23)
mark(yelled-28, while-24)
det(Cardinals-27, the-25)
amod(Cardinals-27, losing-26)
nsubj(yelled-28, Cardinals-27)
advcl(used-15, yelled-28)
case(other-31, to-29)
det(other-31, each-30)
nmod:to(yelled-28, other-31)
punct(used-15, ,-32)
cc(used-15, and-33)
auxpass(drowned-35, were-34)
ccomp(noted-2, drowned-35)
conj:and(used-15, drowned-35)
compound:prt(drowned-35, out-36)
punct(noted-2, ...-37)
punct(noted-2, /-38)
punct(noted-2, .-39)
Return str :: drown#twins

drown :: It reported the cheers for the conservative opposition candidate aimed at drowning out the orchestrated chants for the government party 's man , and how ruling-party followers were taunted with cries of `` sheep '' and `` rats '' as security guards surrounded Mr. Salinas ./.
nsubj(reported-2, It-1)
root(ROOT-0, reported-2)
det(cheers-4, the-3)
dobj(reported-2, cheers-4)
case(candidate-9, for-5)
det(candidate-9, the-6)
amod(candidate-9, conservative-7)
compound(candidate-9, opposition-8)
nmod:for(cheers-4, candidate-9)
acl(candidate-9, aimed-10)
mark(drowning-12, at-11)
advcl(aimed-10, drowning-12)
compound:prt(drowning-12, out-13)
det(chants-16, the-14)
amod(chants-16, orchestrated-15)
dobj(drowning-12, chants-16)
case(man-22, for-17)
det(party-20, the-18)
compound(party-20, government-19)
nmod:poss(man-22, party-20)
case(party-20, 's-21)
nmod:for(chants-16, man-22)
punct(cheers-4, ,-23)
cc(cheers-4, and-24)
advmod(taunted-29, how-25)
compound(followers-27, ruling-party-26)
nsubjpass(taunted-29, followers-27)
auxpass(taunted-29, were-28)
dobj(reported-2, taunted-29)
conj:and(cheers-4, taunted-29)
case(cries-31, with-30)
nmod:with(taunted-29, cries-31)
case(sheep-34, of-32)
punct(sheep-34, ``-33)
nmod:of(cries-31, sheep-34)
punct(sheep-34, ''-35)
cc(sheep-34, and-36)
punct(rats-38, ``-37)
nmod:of(cries-31, rats-38)
conj:and(sheep-34, rats-38)
punct(rats-38, ''-39)
mark(surrounded-43, as-40)
compound(guards-42, security-41)
nsubj(surrounded-43, guards-42)
advcl(cries-31, surrounded-43)
compound(Salinas-45, Mr.-44)
dobj(surrounded-43, Salinas-45)
punct(reported-2, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#chants

drown :: France was drowning in wheat and it needed to get wheat out of warehouses ./.
nsubj(drowning-3, France-1)
aux(drowning-3, was-2)
root(ROOT-0, drowning-3)
case(wheat-5, in-4)
nmod:in(drowning-3, wheat-5)
cc(drowning-3, and-6)
nsubj(needed-8, it-7)
nsubj:xsubj(get-10, it-7)
conj:and(drowning-3, needed-8)
mark(get-10, to-9)
xcomp(needed-8, get-10)
dobj(get-10, wheat-11)
case(warehouses-14, out-12)
mwe(out-12, of-13)
nmod:out_of(get-10, warehouses-14)
punct(drowning-3, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#france

drown :: Especially for Sen. Gore , who must worry that all the publicity enjoyed by the winners in Iowa and New Hampshire could all but drown him out ./.
root(ROOT-0, Especially-1)
case(Gore-4, for-2)
compound(Gore-4, Sen.-3)
nmod:for(Especially-1, Gore-4)
nsubj(worry-8, Gore-4)
punct(Gore-4, ,-5)
ref(Gore-4, who-6)
aux(worry-8, must-7)
acl:relcl(Gore-4, worry-8)
mark(drown-25, that-9)
det:predet(publicity-12, all-10)
det(publicity-12, the-11)
nsubj(drown-25, publicity-12)
acl(publicity-12, enjoyed-13)
case(winners-16, by-14)
det(winners-16, the-15)
nmod:by(enjoyed-13, winners-16)
case(Iowa-18, in-17)
nmod:in(winners-16, Iowa-18)
cc(Iowa-18, and-19)
compound(Hampshire-21, New-20)
nmod:in(winners-16, Hampshire-21)
conj:and(Iowa-18, Hampshire-21)
aux(drown-25, could-22)
advmod(drown-25, all-23)
cc(all-23, but-24)
ccomp(worry-8, drown-25)
dobj(drown-25, him-26)
compound:prt(drown-25, out-27)
punct(Especially-1, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#him

drown :: `` By lending for reckless deals , some lenders are helping the borrowers drown themselves , '' asserts Dean Dickie , an attorney specializing in bankruptcy law ./.
punct(asserts-18, ``-1)
mark(lending-3, By-2)
advcl(helping-11, lending-3)
case(deals-6, for-4)
amod(deals-6, reckless-5)
nmod:for(lending-3, deals-6)
punct(helping-11, ,-7)
det(lenders-9, some-8)
nsubj(helping-11, lenders-9)
aux(helping-11, are-10)
ccomp(asserts-18, helping-11)
det(borrowers-13, the-12)
nsubj(drown-14, borrowers-13)
ccomp(helping-11, drown-14)
dobj(drown-14, themselves-15)
punct(asserts-18, ,-16)
punct(asserts-18, ''-17)
root(ROOT-0, asserts-18)
compound(Dickie-20, Dean-19)
nsubj(asserts-18, Dickie-20)
punct(Dickie-20, ,-21)
det(attorney-23, an-22)
appos(Dickie-20, attorney-23)
acl(attorney-23, specializing-24)
case(law-27, in-25)
compound(law-27, bankruptcy-26)
nmod:in(specializing-24, law-27)
punct(asserts-18, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#themselves

drown :: Sometimes your computer partner will land one , the terminal chirping away in an apparent imitation of a drowning bass ./.
advmod(land-6, Sometimes-1)
nmod:poss(partner-4, your-2)
compound(partner-4, computer-3)
nsubj(land-6, partner-4)
aux(land-6, will-5)
advcl(chirping-11, land-6)
dobj(land-6, one-7)
punct(chirping-11, ,-8)
det(terminal-10, the-9)
nsubj(chirping-11, terminal-10)
root(ROOT-0, chirping-11)
advmod(chirping-11, away-12)
case(imitation-16, in-13)
det(imitation-16, an-14)
amod(imitation-16, apparent-15)
nmod:in(chirping-11, imitation-16)
case(bass-20, of-17)
det(bass-20, a-18)
amod(bass-20, drowning-19)
nmod:of(imitation-16, bass-20)
punct(chirping-11, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#bass

drown :: As Teresina , the maiden who is drowned in the Bay of Naples and ends up as a Nereid in the Blue Grotto before being restored to life by her faithful fisherman lover , Gennaro , Linda Hindberg was too inflexible in body and too stolid in personality ./.
case(Teresina-2, As-1)
root(ROOT-0, Teresina-2)
punct(Teresina-2, ,-3)
det(maiden-5, the-4)
root(,-3, maiden-5)
nsubjpass(drowned-8, maiden-5)
nsubj(ends-15, maiden-5)
ref(maiden-5, who-6)
auxpass(drowned-8, is-7)
acl:relcl(maiden-5, drowned-8)
case(Bay-11, in-9)
det(Bay-11, the-10)
nmod:in(drowned-8, Bay-11)
case(Naples-13, of-12)
nmod:of(Bay-11, Naples-13)
cc(drowned-8, and-14)
acl:relcl(maiden-5, ends-15)
conj:and(drowned-8, ends-15)
compound:prt(ends-15, up-16)
case(Nereid-19, as-17)
det(Nereid-19, a-18)
nmod:as(ends-15, Nereid-19)
case(Grotto-23, in-20)
det(Grotto-23, the-21)
amod(Grotto-23, Blue-22)
nmod:in(Nereid-19, Grotto-23)
mark(restored-26, before-24)
auxpass(restored-26, being-25)
advcl(inflexible-41, restored-26)
case(life-28, to-27)
nmod:to(restored-26, life-28)
case(lover-33, by-29)
nmod:poss(lover-33, her-30)
compound(lover-33, faithful-31)
compound(lover-33, fisherman-32)
nmod:by(inflexible-41, lover-33)
punct(lover-33, ,-34)
appos(lover-33, Gennaro-35)
punct(lover-33, ,-36)
compound(Hindberg-38, Linda-37)
nsubj(inflexible-41, Hindberg-38)
nsubj(stolid-46, Hindberg-38)
cop(inflexible-41, was-39)
advmod(inflexible-41, too-40)
xcomp(ends-15, inflexible-41)
case(body-43, in-42)
nmod:in(inflexible-41, body-43)
cc(inflexible-41, and-44)
advmod(stolid-46, too-45)
xcomp(ends-15, stolid-46)
conj:and(inflexible-41, stolid-46)
case(personality-48, in-47)
nmod:in(stolid-46, personality-48)
punct(maiden-5, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#maiden

drown :: There is also an outsized , shiny , Egyptian-style statue of Hadrian 's catamite Antinous , who drowned in the Nile ./.
expl(is-2, There-1)
root(ROOT-0, is-2)
advmod(is-2, also-3)
det(statue-10, an-4)
amod(statue-10, outsized-5)
punct(outsized-5, ,-6)
dep(outsized-5, shiny-7)
punct(outsized-5, ,-8)
dep(outsized-5, Egyptian-style-9)
nsubj(is-2, statue-10)
case(Antinous-15, of-11)
nmod:poss(Antinous-15, Hadrian-12)
case(Hadrian-12, 's-13)
compound(Antinous-15, catamite-14)
nmod:of(statue-10, Antinous-15)
nsubj(drowned-18, Antinous-15)
punct(Antinous-15, ,-16)
ref(Antinous-15, who-17)
acl:relcl(Antinous-15, drowned-18)
case(Nile-21, in-19)
det(Nile-21, the-20)
nmod:in(drowned-18, Nile-21)
punct(is-2, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#antinous

drown :: In the accident , which occurred in the Atlantic Ocean off Virginia Beach , Va . , three crewmen escaped , but a co-pilot drowned ./.
case(accident-3, In-1)
det(accident-3, the-2)
root(ROOT-0, accident-3)
nsubj(occurred-6, accident-3)
punct(accident-3, ,-4)
ref(accident-3, which-5)
acl:relcl(accident-3, occurred-6)
case(Ocean-10, in-7)
det(Ocean-10, the-8)
compound(Ocean-10, Atlantic-9)
nmod:in(occurred-6, Ocean-10)
case(Beach-13, off-11)
compound(Beach-13, Virginia-12)
nmod:off(occurred-6, Beach-13)
punct(Beach-13, ,-14)
appos(Beach-13, Va-15)
punct(accident-3, .-16)
punct(escaped-4, ,-1)
nummod(crewmen-3, three-2)
nsubj(escaped-4, crewmen-3)
root(ROOT-0, escaped-4)
punct(escaped-4, ,-5)
cc(escaped-4, but-6)
det(co-pilot-8, a-7)
nsubj(drowned-9, co-pilot-8)
conj:but(escaped-4, drowned-9)
punct(escaped-4, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: drown#co-pilot

eat :: The Cincinnati Dancing Pigs Jug Band played `` Coney Island Washboard Roundelay '' and I ate cold noodle salad , fried wontons and a big RC ./.
det(Band-6, The-1)
compound(Band-6, Cincinnati-2)
compound(Band-6, Dancing-3)
compound(Band-6, Pigs-4)
compound(Band-6, Jug-5)
nsubj(played-7, Band-6)
root(ROOT-0, played-7)
punct(played-7, ``-8)
compound(Roundelay-12, Coney-9)
compound(Roundelay-12, Island-10)
compound(Roundelay-12, Washboard-11)
dobj(played-7, Roundelay-12)
punct(played-7, ''-13)
cc(played-7, and-14)
nsubj(ate-16, I-15)
conj:and(played-7, ate-16)
amod(salad-19, cold-17)
compound(salad-19, noodle-18)
dobj(ate-16, salad-19)
punct(salad-19, ,-20)
compound(wontons-22, fried-21)
dobj(ate-16, wontons-22)
conj:and(salad-19, wontons-22)
cc(salad-19, and-23)
det(RC-26, a-24)
amod(RC-26, big-25)
dobj(ate-16, RC-26)
conj:and(salad-19, RC-26)
punct(played-7, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#salad

eat :: `` These guys who are poisoning our youth with drugs and who are making money on it , we 'll make them eat it , '' he said ./.
punct(said-28, ``-1)
det(guys-3, These-2)
nsubj(poisoning-6, guys-3)
nsubj(said-28, guys-3)
ref(guys-3, who-4)
aux(poisoning-6, are-5)
acl:relcl(guys-3, poisoning-6)
nmod:poss(youth-8, our-7)
dobj(poisoning-6, youth-8)
case(drugs-10, with-9)
nmod:with(youth-8, drugs-10)
cc(drugs-10, and-11)
nsubj(making-14, who-12)
aux(making-14, are-13)
nmod:with(youth-8, making-14)
conj:and(drugs-10, making-14)
dobj(making-14, money-15)
case(it-17, on-16)
nmod:on(making-14, it-17)
punct(make-21, ,-18)
nsubj(make-21, we-19)
aux(make-21, 'll-20)
parataxis(making-14, make-21)
nsubj(eat-23, them-22)
ccomp(make-21, eat-23)
dobj(eat-23, it-24)
punct(said-28, ,-25)
punct(said-28, ''-26)
nsubj(said-28, he-27)
root(ROOT-0, said-28)
punct(said-28, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#it

eat :: Some pregnant women here do seek prenatal care , eat fairly well , and avoid smoking or using drugs ./.
det(women-3, Some-1)
amod(women-3, pregnant-2)
nsubj(seek-6, women-3)
nsubj(eat-10, women-3)
nsubj(avoid-15, women-3)
advmod(women-3, here-4)
aux(seek-6, do-5)
root(ROOT-0, seek-6)
amod(care-8, prenatal-7)
dobj(seek-6, care-8)
punct(seek-6, ,-9)
conj:and(seek-6, eat-10)
advmod(well-12, fairly-11)
advmod(eat-10, well-12)
punct(seek-6, ,-13)
cc(seek-6, and-14)
conj:and(seek-6, avoid-15)
dobj(avoid-15, smoking-16)
cc(avoid-15, or-17)
conj:and(seek-6, using-18)
conj:or(avoid-15, using-18)
dobj(using-18, drugs-19)
punct(seek-6, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#women

eat :: `` He ate and slept until he looked like he was going to break , '' recalls Kathleen Perry ./.
punct(recalls-17, ``-1)
nsubj(ate-3, He-2)
nsubj(slept-5, He-2)
ccomp(recalls-17, ate-3)
cc(ate-3, and-4)
conj:and(ate-3, slept-5)
ccomp(recalls-17, slept-5)
mark(looked-8, until-6)
nsubj(looked-8, he-7)
advcl(ate-3, looked-8)
mark(going-12, like-9)
nsubj(going-12, he-10)
nsubj:xsubj(break-14, he-10)
aux(going-12, was-11)
advcl(looked-8, going-12)
mark(break-14, to-13)
xcomp(going-12, break-14)
punct(recalls-17, ,-15)
punct(recalls-17, ''-16)
root(ROOT-0, recalls-17)
compound(Perry-19, Kathleen-18)
nsubj(recalls-17, Perry-19)
punct(recalls-17, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#he

eat :: Some 16 % of surveyors for Zagat 's restaurant guide said they had felt the pinch and were eating out less often than last year ./.
advmod(16-2, Some-1)
nummod(%-3, 16-2)
nsubj(said-11, %-3)
case(surveyors-5, of-4)
nmod:of(%-3, surveyors-5)
case(guide-10, for-6)
nmod:poss(guide-10, Zagat-7)
case(Zagat-7, 's-8)
compound(guide-10, restaurant-9)
nmod:for(surveyors-5, guide-10)
root(ROOT-0, said-11)
nsubj(felt-14, they-12)
nsubj(eating-19, they-12)
aux(felt-14, had-13)
ccomp(said-11, felt-14)
det(pinch-16, the-15)
dobj(felt-14, pinch-16)
cc(felt-14, and-17)
aux(eating-19, were-18)
ccomp(said-11, eating-19)
conj:and(felt-14, eating-19)
compound:prt(eating-19, out-20)
advmod(often-22, less-21)
advmod(eating-19, often-22)
case(year-25, than-23)
amod(year-25, last-24)
nmod:than(often-22, year-25)
punct(said-11, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#they

eat :: The commissions would eat up my profits . ''/''
det(commissions-2, The-1)
nsubj(eat-4, commissions-2)
aux(eat-4, would-3)
root(ROOT-0, eat-4)
compound:prt(eat-4, up-5)
nmod:poss(profits-7, my-6)
dobj(eat-4, profits-7)
punct(eat-4, .-8)
punct(eat-4, ''-9)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: eat#profits

eat :: Domestic private consumption has been eating up about $ 3 billion or more a year , even during the war ./.
amod(consumption-3, Domestic-1)
amod(consumption-3, private-2)
nsubj(eating-6, consumption-3)
aux(eating-6, has-4)
aux(eating-6, been-5)
root(ROOT-0, eating-6)
compound:prt(eating-6, up-7)
advmod($-9, about-8)
dobj(eating-6, $-9)
compound(billion-11, 3-10)
nummod($-9, billion-11)
cc($-9, or-12)
dobj(eating-6, more-13)
conj:or($-9, more-13)
det(year-15, a-14)
nmod:npmod($-9, year-15)
punct(eating-6, ,-16)
advmod(war-20, even-17)
case(war-20, during-18)
det(war-20, the-19)
nmod:during(eating-6, war-20)
punct(eating-6, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#$

eat :: You 'll probably want to eat a crab salad . ''/''
nsubj(want-4, You-1)
nsubj:xsubj(eat-6, You-1)
aux(want-4, 'll-2)
advmod(want-4, probably-3)
root(ROOT-0, want-4)
mark(eat-6, to-5)
xcomp(want-4, eat-6)
det(salad-9, a-7)
compound(salad-9, crab-8)
dobj(eat-6, salad-9)
punct(want-4, .-10)
punct(want-4, ''-11)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: eat#salad

eat :: At age eight , he wrote a story about people , somewhere far away , who ate stars hatched from purple pebbles ./.
case(age-2, At-1)
nmod:at(wrote-6, age-2)
nummod(age-2, eight-3)
punct(wrote-6, ,-4)
nsubj(wrote-6, he-5)
root(ROOT-0, wrote-6)
det(story-8, a-7)
dobj(wrote-6, story-8)
nsubj(ate-17, story-8)
case(people-10, about-9)
nmod:about(story-8, people-10)
punct(story-8, ,-11)
advmod(away-14, somewhere-12)
advmod(away-14, far-13)
advmod(story-8, away-14)
punct(story-8, ,-15)
ref(story-8, who-16)
acl:relcl(story-8, ate-17)
dobj(ate-17, stars-18)
acl(stars-18, hatched-19)
case(pebbles-22, from-20)
amod(pebbles-22, purple-21)
nmod:from(hatched-19, pebbles-22)
punct(wrote-6, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#stars

eat :: A spokesman for Mr. Dingell said , `` The exemptions ate the rule . ''/''
det(spokesman-2, A-1)
nsubj(said-6, spokesman-2)
case(Dingell-5, for-3)
compound(Dingell-5, Mr.-4)
nmod:for(spokesman-2, Dingell-5)
root(ROOT-0, said-6)
punct(said-6, ,-7)
punct(said-6, ``-8)
det(exemptions-10, The-9)
nsubj(ate-11, exemptions-10)
ccomp(said-6, ate-11)
det(rule-13, the-12)
dobj(ate-11, rule-13)
punct(said-6, .-14)
punct(said-6, ''-15)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: eat#rule

eat :: `` Who said , 'No one 's eating any ' ? '' he snapped ./.
root(ROOT-0, ``-1)
nsubj(said-3, Who-2)
root(``-1, said-3)
punct(said-3, ,-4)
punct(said-3, `-5)
neg(one-7, No-6)
root(`-5, one-7)
case(one-7, 's-8)
acl(one-7, eating-9)
dobj(eating-9, any-10)
punct(any-10, '-11)
punct(one-7, ?-12)
punct(one-7, ''-13)
nsubj(snapped-2, he-1)
root(ROOT-0, snapped-2)
punct(snapped-2, .-3)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#any

eat :: Richard Boyle , vice chairman of Chase Manhattan Corp . , avoids serious business when eating in with staffers ; `` I do n't want to give people indigestion , '' he explains ./.
compound(Boyle-2, Richard-1)
root(ROOT-0, Boyle-2)
punct(Boyle-2, ,-3)
compound(chairman-5, vice-4)
appos(Boyle-2, chairman-5)
case(Corp-9, of-6)
compound(Corp-9, Chase-7)
compound(Corp-9, Manhattan-8)
nmod:of(chairman-5, Corp-9)
punct(Boyle-2, .-10)
punct(avoids-2, ,-1)
dep(want-15, avoids-2)
amod(business-4, serious-3)
dobj(avoids-2, business-4)
advmod(eating-6, when-5)
advcl(avoids-2, eating-6)
compound:prt(eating-6, in-7)
case(staffers-9, with-8)
nmod:with(eating-6, staffers-9)
punct(avoids-2, ;-10)
punct(want-15, ``-11)
nsubj(want-15, I-12)
nsubj:xsubj(give-17, I-12)
aux(want-15, do-13)
neg(want-15, n't-14)
ccomp(explains-23, want-15)
mark(give-17, to-16)
xcomp(want-15, give-17)
iobj(give-17, people-18)
dobj(give-17, indigestion-19)
punct(explains-23, ,-20)
punct(explains-23, ''-21)
nsubj(explains-23, he-22)
root(ROOT-0, explains-23)
punct(explains-23, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#staffers

eat :: Another regular , bundled in a brown cape , his feet wrapped in cloth , was seen touching all the bread in the basket `` hoping no one else will eat it , '' says Mrs. Howell ./.
det(regular-2, Another-1)
nsubjpass(seen-17, regular-2)
punct(regular-2, ,-3)
acl(regular-2, bundled-4)
case(cape-8, in-5)
det(cape-8, a-6)
amod(cape-8, brown-7)
nmod:in(bundled-4, cape-8)
punct(regular-2, ,-9)
nmod:poss(feet-11, his-10)
nsubj(wrapped-12, feet-11)
dep(regular-2, wrapped-12)
case(cloth-14, in-13)
nmod:in(wrapped-12, cloth-14)
punct(regular-2, ,-15)
auxpass(seen-17, was-16)
ccomp(says-35, seen-17)
xcomp(seen-17, touching-18)
det:predet(bread-21, all-19)
det(bread-21, the-20)
dobj(touching-18, bread-21)
case(basket-24, in-22)
det(basket-24, the-23)
nmod:in(bread-21, basket-24)
punct(hoping-26, ``-25)
xcomp(touching-18, hoping-26)
neg(one-28, no-27)
nsubj(eat-31, one-28)
advmod(one-28, else-29)
aux(eat-31, will-30)
ccomp(hoping-26, eat-31)
dobj(eat-31, it-32)
punct(says-35, ,-33)
punct(says-35, ''-34)
root(ROOT-0, says-35)
compound(Howell-37, Mrs.-36)
nsubj(says-35, Howell-37)
punct(says-35, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#it

eat :: Out-of-home entertainment -- such as films , sporting events , eating out , dancing , theater , shopping and amusement parks -- was a leisure-time activity for 43 % of respondents . -LRB- The survey included multiple responses. -RRB-/-RRB-
amod(entertainment-2, Out-of-home-1)
nsubj(activity-26, entertainment-2)
punct(entertainment-2, ---3)
case(films-6, such-4)
mwe(such-4, as-5)
nmod:such_as(entertainment-2, films-6)
punct(films-6, ,-7)
acl(films-6, sporting-8)
dobj(sporting-8, events-9)
punct(films-6, ,-10)
compound(parks-21, eating-11)
compound:prt(eating-11, out-12)
punct(eating-11, ,-13)
conj:and(eating-11, dancing-14)
compound(parks-21, dancing-14)
punct(eating-11, ,-15)
conj:and(eating-11, theater-16)
compound(parks-21, theater-16)
punct(eating-11, ,-17)
conj:and(eating-11, shopping-18)
compound(parks-21, shopping-18)
cc(eating-11, and-19)
conj:and(eating-11, amusement-20)
compound(parks-21, amusement-20)
appos(films-6, parks-21)
punct(entertainment-2, ---22)
cop(activity-26, was-23)
det(activity-26, a-24)
amod(activity-26, leisure-time-25)
root(ROOT-0, activity-26)
case(%-29, for-27)
nummod(%-29, 43-28)
nmod:for(activity-26, %-29)
case(respondents-31, of-30)
nmod:of(%-29, respondents-31)
punct(activity-26, .-32)
punct(included-4, -LRB--1)
det(survey-3, The-2)
nsubj(included-4, survey-3)
root(ROOT-0, included-4)
amod(responses-6, multiple-5)
dobj(included-4, responses-6)
punct(included-4, .-7)
punct(included-4, -RRB--8)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
No match found

eat :: Mr. Hudson hears that the Chinese eat the things , and someone 's looking into it ./.
compound(Hudson-2, Mr.-1)
nsubj(hears-3, Hudson-2)
root(ROOT-0, hears-3)
mark(eat-7, that-4)
det(Chinese-6, the-5)
nsubj(eat-7, Chinese-6)
ccomp(hears-3, eat-7)
det(things-9, the-8)
dobj(eat-7, things-9)
punct(eat-7, ,-10)
cc(eat-7, and-11)
nsubj(looking-14, someone-12)
case(someone-12, 's-13)
ccomp(hears-3, looking-14)
conj:and(eat-7, looking-14)
case(it-16, into-15)
nmod:into(looking-14, it-16)
punct(hears-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#things

eat :: Thierry Liebaut , director of development for a French media group , says if he had to pay top price for it in a restaurant , `` I would make the chef eat the tubes . ''/''
compound(Liebaut-2, Thierry-1)
nsubj(says-13, Liebaut-2)
punct(Liebaut-2, ,-3)
appos(Liebaut-2, director-4)
case(development-6, of-5)
nmod:of(director-4, development-6)
case(group-11, for-7)
det(group-11, a-8)
amod(group-11, French-9)
compound(group-11, media-10)
nmod:for(director-4, group-11)
punct(Liebaut-2, ,-12)
root(ROOT-0, says-13)
mark(had-16, if-14)
nsubj(had-16, he-15)
nsubj:xsubj(pay-18, he-15)
advcl(make-30, had-16)
mark(pay-18, to-17)
xcomp(had-16, pay-18)
amod(price-20, top-19)
dobj(pay-18, price-20)
case(it-22, for-21)
nmod:for(pay-18, it-22)
case(restaurant-25, in-23)
det(restaurant-25, a-24)
nmod:in(pay-18, restaurant-25)
punct(make-30, ,-26)
punct(make-30, ``-27)
nsubj(make-30, I-28)
aux(make-30, would-29)
ccomp(says-13, make-30)
det(chef-32, the-31)
nsubj(eat-33, chef-32)
ccomp(make-30, eat-33)
det(tubes-35, the-34)
dobj(eat-33, tubes-35)
punct(says-13, .-36)
punct(says-13, ''-37)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: eat#tubes

eat :: The honor of these Pulitzer-predators will be vindicated only if Mr. Anderson does all sorts of demeaning acts pursuant to article 48a of the Civil Code of California , mostly in the order of eating humble pie ./.
det(honor-2, The-1)
nsubjpass(vindicated-8, honor-2)
case(Pulitzer-predators-5, of-3)
det(Pulitzer-predators-5, these-4)
nmod:of(honor-2, Pulitzer-predators-5)
aux(vindicated-8, will-6)
auxpass(vindicated-8, be-7)
root(ROOT-0, vindicated-8)
advmod(does-13, only-9)
mark(does-13, if-10)
compound(Anderson-12, Mr.-11)
nsubj(does-13, Anderson-12)
advcl(vindicated-8, does-13)
det(sorts-15, all-14)
nsubj(48a-22, sorts-15)
case(acts-18, of-16)
amod(acts-18, demeaning-17)
nmod:of(sorts-15, acts-18)
case(48a-22, pursuant-19)
mwe(pursuant-19, to-20)
compound(48a-22, article-21)
nmod:pursuant_to(does-13, 48a-22)
case(Code-26, of-23)
det(Code-26, the-24)
amod(Code-26, Civil-25)
nmod:of(48a-22, Code-26)
case(California-28, of-27)
nmod:of(Code-26, California-28)
punct(48a-22, ,-29)
advmod(order-33, mostly-30)
case(order-33, in-31)
det(order-33, the-32)
nmod:in(48a-22, order-33)
mark(eating-35, of-34)
acl(order-33, eating-35)
amod(pie-37, humble-36)
dobj(eating-35, pie-37)
punct(vindicated-8, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#pie

eat :: `` I thought I was eating him alive , '' recalled a rueful Mr. Bailey of a long-ago debate ./.
punct(recalled-11, ``-1)
nsubj(thought-3, I-2)
ccomp(recalled-11, thought-3)
nsubj(eating-6, I-4)
aux(eating-6, was-5)
ccomp(thought-3, eating-6)
nsubj(alive-8, him-7)
xcomp(eating-6, alive-8)
punct(recalled-11, ,-9)
punct(recalled-11, ''-10)
root(ROOT-0, recalled-11)
det(Bailey-15, a-12)
amod(Bailey-15, rueful-13)
compound(Bailey-15, Mr.-14)
nsubj(recalled-11, Bailey-15)
case(debate-19, of-16)
det(debate-19, a-17)
amod(debate-19, long-ago-18)
nmod:of(Bailey-15, debate-19)
punct(recalled-11, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#i

eat :: Washington then all but put the game away by eating more than six minutes of the clock , and caging the Bears deep in their own end , with a drive in which Williams completed two third-down passes ./.
nsubj(put-5, Washington-1)
nsubj(caging-20, Washington-1)
advmod(put-5, then-2)
advmod(put-5, all-3)
cc(all-3, but-4)
root(ROOT-0, put-5)
det(game-7, the-6)
dobj(put-5, game-7)
advmod(put-5, away-8)
mark(eating-10, by-9)
advcl(put-5, eating-10)
advmod(six-13, more-11)
mwe(more-11, than-12)
nummod(minutes-14, six-13)
dobj(eating-10, minutes-14)
case(clock-17, of-15)
det(clock-17, the-16)
nmod:of(minutes-14, clock-17)
punct(put-5, ,-18)
cc(put-5, and-19)
conj:and(put-5, caging-20)
det(deep-23, the-21)
compound(deep-23, Bears-22)
dobj(caging-20, deep-23)
case(end-27, in-24)
nmod:poss(end-27, their-25)
amod(end-27, own-26)
nmod:in(caging-20, end-27)
punct(caging-20, ,-28)
case(drive-31, with-29)
det(drive-31, a-30)
nmod:with(caging-20, drive-31)
nmod:in(completed-35, drive-31)
case(which-33, in-32)
ref(drive-31, which-33)
nsubj(completed-35, Williams-34)
acl:relcl(drive-31, completed-35)
nummod(passes-38, two-36)
amod(passes-38, third-down-37)
dobj(completed-35, passes-38)
punct(put-5, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#clock

eat :: I smoke too much , am constantly coughing , never eat , always sit around in a daze ./.
nsubj(smoke-2, I-1)
root(ROOT-0, smoke-2)
advmod(much-4, too-3)
advmod(smoke-2, much-4)
punct(smoke-2, ,-5)
aux(coughing-8, am-6)
advmod(coughing-8, constantly-7)
dep(smoke-2, coughing-8)
punct(coughing-8, ,-9)
neg(eat-11, never-10)
dep(coughing-8, eat-11)
punct(coughing-8, ,-12)
advmod(sit-14, always-13)
dep(coughing-8, sit-14)
advmod(sit-14, around-15)
case(daze-18, in-16)
det(daze-18, a-17)
nmod:in(sit-14, daze-18)
punct(smoke-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

eat :: The first two days , Dr. Kroll collapsed into his sleeping bag and had to be awakened to eat ./.
det(days-4, The-1)
amod(days-4, first-2)
nummod(days-4, two-3)
nmod:tmod(collapsed-8, days-4)
punct(collapsed-8, ,-5)
compound(Kroll-7, Dr.-6)
nsubj(collapsed-8, Kroll-7)
nsubj(had-14, Kroll-7)
nsubjpass:xsubj(awakened-17, Kroll-7)
root(ROOT-0, collapsed-8)
case(bag-12, into-9)
nmod:poss(bag-12, his-10)
amod(bag-12, sleeping-11)
nmod:into(collapsed-8, bag-12)
cc(collapsed-8, and-13)
conj:and(collapsed-8, had-14)
mark(awakened-17, to-15)
auxpass(awakened-17, be-16)
xcomp(had-14, awakened-17)
mark(eat-19, to-18)
xcomp(awakened-17, eat-19)
punct(collapsed-8, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

eat :: Here , they can eat gourmet kosher food and swim at a beach that is partitioned with a curtain -- one side for men , the other for women ./.
advmod(eat-5, Here-1)
punct(eat-5, ,-2)
nsubj(eat-5, they-3)
nsubj(swim-10, they-3)
aux(eat-5, can-4)
root(ROOT-0, eat-5)
compound(food-8, gourmet-6)
compound(food-8, kosher-7)
dobj(eat-5, food-8)
cc(eat-5, and-9)
conj:and(eat-5, swim-10)
case(beach-13, at-11)
det(beach-13, a-12)
nmod:at(swim-10, beach-13)
nsubjpass(partitioned-16, beach-13)
ref(beach-13, that-14)
auxpass(partitioned-16, is-15)
acl:relcl(beach-13, partitioned-16)
case(curtain-19, with-17)
det(curtain-19, a-18)
nmod:with(partitioned-16, curtain-19)
punct(beach-13, ---20)
nummod(side-22, one-21)
dep(beach-13, side-22)
case(men-24, for-23)
nmod:for(side-22, men-24)
punct(side-22, ,-25)
det(other-27, the-26)
appos(side-22, other-27)
case(women-29, for-28)
nmod:for(other-27, women-29)
punct(eat-5, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#food

eat :: Indiana Rep. Andrew Jacobs , a Democrat who 's neutral in the presidential-nomination contest , says Mr. Gephardt reminds him of a time in his life when he had to eat a lot of dinners at a drive-in restaurant ./.
compound(Jacobs-4, Indiana-1)
compound(Jacobs-4, Rep.-2)
compound(Jacobs-4, Andrew-3)
nsubj(says-16, Jacobs-4)
punct(Jacobs-4, ,-5)
det(Democrat-7, a-6)
appos(Jacobs-4, Democrat-7)
nsubj(neutral-10, Democrat-7)
ref(Democrat-7, who-8)
cop(neutral-10, 's-9)
acl:relcl(Democrat-7, neutral-10)
case(contest-14, in-11)
det(contest-14, the-12)
amod(contest-14, presidential-nomination-13)
nmod:in(neutral-10, contest-14)
punct(Jacobs-4, ,-15)
root(ROOT-0, says-16)
compound(Gephardt-18, Mr.-17)
nsubj(reminds-19, Gephardt-18)
ccomp(says-16, reminds-19)
dobj(reminds-19, him-20)
case(time-23, of-21)
det(time-23, a-22)
nmod:of(reminds-19, time-23)
case(life-26, in-24)
nmod:poss(life-26, his-25)
nmod:in(time-23, life-26)
advmod(had-29, when-27)
nsubj(had-29, he-28)
nsubj:xsubj(eat-31, he-28)
advcl(reminds-19, had-29)
mark(eat-31, to-30)
xcomp(had-29, eat-31)
det(lot-33, a-32)
dobj(eat-31, lot-33)
case(dinners-35, of-34)
nmod:of(lot-33, dinners-35)
case(restaurant-39, at-36)
det(restaurant-39, a-37)
amod(restaurant-39, drive-in-38)
nmod:at(eat-31, restaurant-39)
punct(says-16, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#dinners

eat :: `` We 've got the kids , plus all their teen-age friends who do nothing but eat ./.
root(ROOT-0, ``-1)
nsubj(got-4, We-2)
aux(got-4, 've-3)
root(``-1, got-4)
det(kids-6, the-5)
dobj(got-4, kids-6)
punct(kids-6, ,-7)
cc(kids-6, plus-8)
det:predet(friends-12, all-9)
nmod:poss(friends-12, their-10)
amod(friends-12, teen-age-11)
dobj(got-4, friends-12)
conj:plus(kids-6, friends-12)
nsubj(do-14, friends-12)
nsubj(eat-17, friends-12)
ref(friends-12, who-13)
acl:relcl(friends-12, do-14)
dobj(do-14, nothing-15)
cc(do-14, but-16)
acl:relcl(friends-12, eat-17)
conj:but(do-14, eat-17)
punct(got-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#friends

eat :: The Pac Man defense is named after the video game in which characters try to eat other characters before they get eaten themselves ./.
det(defense-4, The-1)
compound(defense-4, Pac-2)
compound(defense-4, Man-3)
nsubjpass(named-6, defense-4)
auxpass(named-6, is-5)
root(ROOT-0, named-6)
case(game-10, after-7)
det(game-10, the-8)
compound(game-10, video-9)
nmod:after(named-6, game-10)
nmod:in(try-14, game-10)
case(which-12, in-11)
ref(game-10, which-12)
nsubj(try-14, characters-13)
nsubj:xsubj(eat-16, characters-13)
acl:relcl(game-10, try-14)
mark(eat-16, to-15)
xcomp(try-14, eat-16)
amod(characters-18, other-17)
dobj(eat-16, characters-18)
mark(eaten-22, before-19)
nsubj(eaten-22, they-20)
aux(eaten-22, get-21)
advcl(eat-16, eaten-22)
dobj(eaten-22, themselves-23)
punct(named-6, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#characters

eat :: `` Suddenly with Monday , they not only had to do an enormous amount of selling , they had an enormous holdover , and the front-runners just ate them alive , '' said Mr. Kirby ./.
punct(had-9, ``-1)
advmod(Monday-4, Suddenly-2)
case(Monday-4, with-3)
nmod:with(had-9, Monday-4)
punct(had-9, ,-5)
nsubj(had-9, they-6)
nsubj:xsubj(do-11, they-6)
neg(only-8, not-7)
cc:preconj(had-9, only-8)
dep(said-33, had-9)
mark(do-11, to-10)
xcomp(had-9, do-11)
det(amount-14, an-12)
amod(amount-14, enormous-13)
dobj(do-11, amount-14)
case(selling-16, of-15)
nmod:of(amount-14, selling-16)
punct(had-9, ,-17)
nsubj(had-19, they-18)
parataxis(had-9, had-19)
det(holdover-22, an-20)
amod(holdover-22, enormous-21)
dobj(had-19, holdover-22)
punct(had-19, ,-23)
cc(had-19, and-24)
det(front-runners-26, the-25)
nsubj(ate-28, front-runners-26)
advmod(ate-28, just-27)
parataxis(had-9, ate-28)
conj:and(had-19, ate-28)
nsubj(alive-30, them-29)
xcomp(ate-28, alive-30)
punct(had-9, ,-31)
punct(had-9, ''-32)
root(ROOT-0, said-33)
compound(Kirby-35, Mr.-34)
nsubj(said-33, Kirby-35)
punct(said-33, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#front-runners

eat :: The latter cells act normally as scavengers that eat up invading organisms , but also may be responsible for cell-to-cell infection of the AIDS virus ./.
det(cells-3, The-1)
amod(cells-3, latter-2)
nsubj(act-4, cells-3)
nsubj(responsible-18, cells-3)
root(ROOT-0, act-4)
advmod(act-4, normally-5)
case(scavengers-7, as-6)
nmod:as(act-4, scavengers-7)
nsubj(eat-9, scavengers-7)
ref(scavengers-7, that-8)
acl:relcl(scavengers-7, eat-9)
compound:prt(eat-9, up-10)
xcomp(eat-9, invading-11)
dobj(invading-11, organisms-12)
punct(act-4, ,-13)
cc(act-4, but-14)
advmod(responsible-18, also-15)
aux(responsible-18, may-16)
cop(responsible-18, be-17)
conj:and(act-4, responsible-18)
case(infection-21, for-19)
amod(infection-21, cell-to-cell-20)
nmod:for(responsible-18, infection-21)
case(virus-25, of-22)
det(virus-25, the-23)
compound(virus-25, AIDS-24)
nmod:of(infection-21, virus-25)
punct(act-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#scavengers

eat :: They will eat crow for what they have been saying ./.
nsubj(eat-3, They-1)
aux(eat-3, will-2)
root(ROOT-0, eat-3)
dobj(eat-3, crow-4)
mark(saying-10, for-5)
dobj(saying-10, what-6)
nsubj(saying-10, they-7)
aux(saying-10, have-8)
aux(saying-10, been-9)
advcl(eat-3, saying-10)
punct(eat-3, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#crow

eat :: Long renowned with East Germany for its relatively respectable economic performance , Czechoslovakia has lately been displaying worrying symptoms of the ills that have , in fact , long been eating away at its core ./.
advmod(renowned-2, Long-1)
advcl(displaying-17, renowned-2)
case(Germany-5, with-3)
compound(Germany-5, East-4)
nmod:with(renowned-2, Germany-5)
case(performance-11, for-6)
nmod:poss(performance-11, its-7)
advmod(respectable-9, relatively-8)
amod(performance-11, respectable-9)
amod(performance-11, economic-10)
nmod:for(renowned-2, performance-11)
punct(displaying-17, ,-12)
nsubj(displaying-17, Czechoslovakia-13)
aux(displaying-17, has-14)
advmod(displaying-17, lately-15)
aux(displaying-17, been-16)
root(ROOT-0, displaying-17)
amod(symptoms-19, worrying-18)
dobj(displaying-17, symptoms-19)
case(ills-22, of-20)
det(ills-22, the-21)
nmod:of(symptoms-19, ills-22)
nsubj(eating-31, ills-22)
ref(ills-22, that-23)
aux(eating-31, have-24)
punct(eating-31, ,-25)
case(fact-27, in-26)
nmod:in(eating-31, fact-27)
punct(eating-31, ,-28)
advmod(eating-31, long-29)
aux(eating-31, been-30)
acl:relcl(ills-22, eating-31)
advmod(eating-31, away-32)
case(core-35, at-33)
nmod:poss(core-35, its-34)
nmod:at(eating-31, core-35)
punct(displaying-17, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#ills

eat :: To air fresh shows through June , `` we 'd have to eat the second showing of some episodes , '' he said , which would cause a financial hit ./.
case(shows-4, To-1)
compound(shows-4, air-2)
amod(shows-4, fresh-3)
nmod:to(have-11, shows-4)
case(June-6, through-5)
nmod:through(shows-4, June-6)
punct(have-11, ,-7)
punct(have-11, ``-8)
nsubj(have-11, we-9)
nsubj:xsubj(eat-13, we-9)
aux(have-11, 'd-10)
ccomp(said-23, have-11)
mark(eat-13, to-12)
xcomp(have-11, eat-13)
det(showing-16, the-14)
amod(showing-16, second-15)
dobj(eat-13, showing-16)
case(episodes-19, of-17)
det(episodes-19, some-18)
nmod:of(showing-16, episodes-19)
punct(said-23, ,-20)
punct(said-23, ''-21)
nsubj(said-23, he-22)
root(ROOT-0, said-23)
punct(said-23, ,-24)
nsubj(cause-27, which-25)
aux(cause-27, would-26)
ccomp(said-23, cause-27)
det(hit-30, a-28)
amod(hit-30, financial-29)
dobj(cause-27, hit-30)
punct(said-23, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#showing

eat :: Here is how it works: Conventional plastics are composed of repeating hydrocarbon molecules , called polymers , which are derived from petroleum . -LRB- The lengthy chains are too long for micro-organisms to eat ; that is what makes plastic so resistant to decay. -RRB-/-RRB-
advmod(is-2, Here-1)
root(ROOT-0, is-2)
advmod(works-5, how-3)
nsubj(works-5, it-4)
ccomp(is-2, works-5)
punct(works-5, :-6)
amod(plastics-8, Conventional-7)
nsubjpass(composed-10, plastics-8)
auxpass(composed-10, are-9)
parataxis(works-5, composed-10)
mark(repeating-12, of-11)
advcl(composed-10, repeating-12)
compound(molecules-14, hydrocarbon-13)
dobj(repeating-12, molecules-14)
nsubjpass(derived-21, molecules-14)
punct(molecules-14, ,-15)
acl(molecules-14, called-16)
xcomp(called-16, polymers-17)
punct(molecules-14, ,-18)
ref(molecules-14, which-19)
auxpass(derived-21, are-20)
acl:relcl(molecules-14, derived-21)
case(petroleum-23, from-22)
nmod:from(derived-21, petroleum-23)
punct(is-2, .-24)
punct(long-7, -LRB--1)
det(chains-4, The-2)
amod(chains-4, lengthy-3)
nsubj(long-7, chains-4)
cop(long-7, are-5)
advmod(long-7, too-6)
root(ROOT-0, long-7)
mark(eat-11, for-8)
nsubj(eat-11, micro-organisms-9)
mark(eat-11, to-10)
advcl(long-7, eat-11)
punct(long-7, ;-12)
nsubj(is-14, that-13)
parataxis(long-7, is-14)
nsubj(makes-16, what-15)
ccomp(is-14, makes-16)
nsubj(resistant-19, plastic-17)
advmod(resistant-19, so-18)
xcomp(makes-16, resistant-19)
case(decay-21, to-20)
nmod:to(resistant-19, decay-21)
punct(long-7, .-22)
punct(long-7, -RRB--23)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: eat#micro-organisms

eat :: But for small companies , the costs eat up a much larger percentage of revenue ./.
cc(eat-8, But-1)
case(companies-4, for-2)
amod(companies-4, small-3)
nmod:for(eat-8, companies-4)
punct(eat-8, ,-5)
det(costs-7, the-6)
nsubj(eat-8, costs-7)
root(ROOT-0, eat-8)
compound:prt(eat-8, up-9)
det(percentage-13, a-10)
advmod(larger-12, much-11)
amod(percentage-13, larger-12)
dobj(eat-8, percentage-13)
case(revenue-15, of-14)
nmod:of(percentage-13, revenue-15)
punct(eat-8, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#revenue

eat :: That 's because the auto shop decided to eat its words ./.
nsubj('s-2, That-1)
root(ROOT-0, 's-2)
mark(decided-7, because-3)
det(shop-6, the-4)
compound(shop-6, auto-5)
nsubj(decided-7, shop-6)
nsubj:xsubj(eat-9, shop-6)
advcl('s-2, decided-7)
mark(eat-9, to-8)
xcomp(decided-7, eat-9)
nmod:poss(words-11, its-10)
dobj(eat-9, words-11)
punct('s-2, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#words

eat :: It just eats your soul . ''/''
nsubj(eats-3, It-1)
advmod(eats-3, just-2)
root(ROOT-0, eats-3)
nmod:poss(soul-5, your-4)
dobj(eats-3, soul-5)
punct(eats-3, .-6)
punct(eats-3, ''-7)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: eat#soul

eat :: `` If you put a pile of candy bars out in a pasture , '' Mr. Flickinger says , `` they 'd go eat themselves to death . ''/''
punct(go-23, ``-1)
mark(put-4, If-2)
nsubj(put-4, you-3)
advcl(go-23, put-4)
det(pile-6, a-5)
dobj(put-4, pile-6)
case(bars-9, of-7)
compound(bars-9, candy-8)
nmod:of(pile-6, bars-9)
compound:prt(put-4, out-10)
case(pasture-13, in-11)
det(pasture-13, a-12)
nmod:in(put-4, pasture-13)
punct(says-18, ,-14)
punct(says-18, ''-15)
compound(Flickinger-17, Mr.-16)
nsubj(says-18, Flickinger-17)
parataxis(go-23, says-18)
punct(says-18, ,-19)
punct(go-23, ``-20)
nsubj(go-23, they-21)
aux(go-23, 'd-22)
root(ROOT-0, go-23)
xcomp(go-23, eat-24)
dobj(eat-24, themselves-25)
case(death-27, to-26)
nmod:to(eat-24, death-27)
punct(go-23, .-28)
punct(go-23, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: eat#themselves

eat :: With its latest acquisition , Cartier , which is 46.8 % -owned by Rothmans International PLC of Britain , will control more than 40 % of the $ 2.2 billion international luxury-watch market and aims to eat into the market share of the other leader , Rolex , Mr. Perrin said ./.
case(acquisition-4, With-1)
nmod:poss(acquisition-4, its-2)
amod(acquisition-4, latest-3)
nsubj(%-11, acquisition-4)
nmod:with(control-22, acquisition-4)
punct(acquisition-4, ,-5)
appos(acquisition-4, Cartier-6)
punct(acquisition-4, ,-7)
ref(acquisition-4, which-8)
cop(%-11, is-9)
nummod(%-11, 46.8-10)
acl:relcl(acquisition-4, %-11)
punct(%-11, --12)
acl(%-11, owned-13)
case(PLC-17, by-14)
compound(PLC-17, Rothmans-15)
compound(PLC-17, International-16)
nmod:by(owned-13, PLC-17)
case(Britain-19, of-18)
nmod:of(PLC-17, Britain-19)
punct(acquisition-4, ,-20)
aux(control-22, will-21)
root(ROOT-0, control-22)
advmod(40-25, more-23)
mwe(more-23, than-24)
nummod(%-26, 40-25)
dobj(control-22, %-26)
case(market-34, of-27)
det(market-34, the-28)
amod(market-34, $-29)
compound(billion-31, 2.2-30)
nummod($-29, billion-31)
amod(market-34, international-32)
amod(market-34, luxury-watch-33)
nmod:of(%-26, market-34)
cc(control-22, and-35)
dep(said-52, aims-36)
mark(eat-38, to-37)
dep(said-52, eat-38)
case(share-42, into-39)
det(share-42, the-40)
compound(share-42, market-41)
nmod:into(eat-38, share-42)
case(leader-46, of-43)
det(leader-46, the-44)
amod(leader-46, other-45)
nmod:of(share-42, leader-46)
punct(leader-46, ,-47)
appos(leader-46, Rolex-48)
punct(leader-46, ,-49)
compound(Perrin-51, Mr.-50)
nsubj(said-52, Perrin-51)
conj:and(control-22, said-52)
punct(control-22, .-53)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#share

eat :: Asked about the resonating valence bond theory of superconductivity , one of the Enquirer 's young female sources comments , `` RVB is like . .. when you eat thallium and your boyfriend eats thorium . .. and then you kiss . ''/''
advcl(comments-19, Asked-1)
case(theory-7, about-2)
det(theory-7, the-3)
amod(theory-7, resonating-4)
compound(theory-7, valence-5)
compound(theory-7, bond-6)
nmod:about(Asked-1, theory-7)
case(superconductivity-9, of-8)
nmod:of(theory-7, superconductivity-9)
punct(comments-19, ,-10)
nsubj(comments-19, one-11)
case(sources-18, of-12)
det(Enquirer-14, the-13)
nmod:poss(sources-18, Enquirer-14)
case(Enquirer-14, 's-15)
amod(sources-18, young-16)
amod(sources-18, female-17)
nmod:of(one-11, sources-18)
root(ROOT-0, comments-19)
punct(comments-19, ,-20)
punct(comments-19, ``-21)
dep(comments-19, RVB-22)
acl(RVB-22, is-23)
dep(is-23, like-24)
punct(like-24, .-25)
punct(like-24, .-26)
punct(comments-19, .-27)
advmod(eat-3, when-1)
nsubj(eat-3, you-2)
root(ROOT-0, eat-3)
nsubj(eats-8, thallium-4)
cc(thallium-4, and-5)
nmod:poss(boyfriend-7, your-6)
conj:and(thallium-4, boyfriend-7)
nsubj(eats-8, boyfriend-7)
ccomp(eat-3, eats-8)
dobj(eats-8, thorium-9)
punct(eat-3, .-10)
punct(eat-3, .-11)
punct(eat-3, .-12)
cc(kiss-4, and-1)
advmod(kiss-4, then-2)
nsubj(kiss-4, you-3)
root(ROOT-0, kiss-4)
punct(kiss-4, .-5)
punct(kiss-4, ''-6)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: eat#thorium

eat :: Richard DeVane , president of the company 's fossil systems business , said it appears that oxygen in the fresh air combined with either sulfur , zinc or chloride to produce an oxide that ate away the boiler wall 's iron-oxide protective coating ./.
compound(DeVane-2, Richard-1)
nsubj(said-13, DeVane-2)
punct(DeVane-2, ,-3)
appos(DeVane-2, president-4)
case(business-11, of-5)
det(company-7, the-6)
nmod:poss(business-11, company-7)
case(company-7, 's-8)
compound(business-11, fossil-9)
compound(business-11, systems-10)
nmod:of(president-4, business-11)
punct(DeVane-2, ,-12)
root(ROOT-0, said-13)
nsubj(appears-15, it-14)
ccomp(said-13, appears-15)
mark(combined-22, that-16)
nsubj(combined-22, oxygen-17)
nsubj:xsubj(produce-31, oxygen-17)
case(air-21, in-18)
det(air-21, the-19)
amod(air-21, fresh-20)
nmod:in(oxygen-17, air-21)
ccomp(appears-15, combined-22)
case(sulfur-25, with-23)
cc:preconj(sulfur-25, either-24)
nmod:with(combined-22, sulfur-25)
punct(sulfur-25, ,-26)
nmod:with(combined-22, zinc-27)
conj:or(sulfur-25, zinc-27)
cc(sulfur-25, or-28)
nmod:with(combined-22, chloride-29)
conj:or(sulfur-25, chloride-29)
mark(produce-31, to-30)
xcomp(combined-22, produce-31)
det(oxide-33, an-32)
dobj(produce-31, oxide-33)
nsubj(ate-35, oxide-33)
ref(oxide-33, that-34)
acl:relcl(oxide-33, ate-35)
compound:prt(ate-35, away-36)
det(wall-39, the-37)
compound(wall-39, boiler-38)
nmod:poss(coating-43, wall-39)
case(wall-39, 's-40)
amod(coating-43, iron-oxide-41)
amod(coating-43, protective-42)
dobj(ate-35, coating-43)
punct(said-13, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#coating

eat :: At the Houston Petroleum Club , industry officials could n't eat lunch of late without discussing speculation that Exxon was going to walk away with all of the Tenneco properties ./.
case(Club-5, At-1)
det(Club-5, the-2)
compound(Club-5, Houston-3)
compound(Club-5, Petroleum-4)
nmod:at(eat-11, Club-5)
punct(eat-11, ,-6)
compound(officials-8, industry-7)
nsubj(eat-11, officials-8)
aux(eat-11, could-9)
neg(eat-11, n't-10)
root(ROOT-0, eat-11)
dobj(eat-11, lunch-12)
case(late-14, of-13)
nmod:of(lunch-12, late-14)
mark(discussing-16, without-15)
advcl(eat-11, discussing-16)
dobj(discussing-16, speculation-17)
mark(going-21, that-18)
nsubj(going-21, Exxon-19)
nsubj:xsubj(walk-23, Exxon-19)
aux(going-21, was-20)
ccomp(speculation-17, going-21)
mark(walk-23, to-22)
xcomp(going-21, walk-23)
advmod(walk-23, away-24)
case(all-26, with-25)
nmod:with(walk-23, all-26)
case(properties-30, of-27)
det(properties-30, the-28)
compound(properties-30, Tenneco-29)
nmod:of(all-26, properties-30)
punct(eat-11, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#late

eat :: It started in late August when supporters concerned with Mr. Chavez 's health were urging him to eat ./.
nsubj(started-2, It-1)
root(ROOT-0, started-2)
case(August-5, in-3)
amod(August-5, late-4)
nmod:in(started-2, August-5)
advmod(urging-15, when-6)
nsubj(urging-15, supporters-7)
acl(supporters-7, concerned-8)
case(health-13, with-9)
compound(Chavez-11, Mr.-10)
nmod:poss(health-13, Chavez-11)
case(Chavez-11, 's-12)
nmod:with(concerned-8, health-13)
aux(urging-15, were-14)
advcl(started-2, urging-15)
dobj(urging-15, him-16)
nsubj:xsubj(eat-18, him-16)
mark(eat-18, to-17)
xcomp(urging-15, eat-18)
punct(started-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#him

eat :: But I 'll tell you this: I have n't had a cold since I ate it ./.
cc(tell-4, But-1)
nsubj(tell-4, I-2)
aux(tell-4, 'll-3)
root(ROOT-0, tell-4)
dobj(tell-4, you-5)
dobj(tell-4, this-6)
punct(this-6, :-7)
nsubj(had-11, I-8)
aux(had-11, have-9)
neg(had-11, n't-10)
appos(this-6, had-11)
det(cold-13, a-12)
dobj(had-11, cold-13)
mark(ate-16, since-14)
nsubj(ate-16, I-15)
advcl(had-11, ate-16)
dobj(ate-16, it-17)
punct(tell-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#it

eat :: The chemicals , widely used in refrigerants and styrofoam , are suspected of eating away the Earth 's protective ozone layer ./.
det(chemicals-2, The-1)
nsubjpass(suspected-12, chemicals-2)
punct(chemicals-2, ,-3)
advmod(used-5, widely-4)
acl(chemicals-2, used-5)
case(refrigerants-7, in-6)
nmod:in(used-5, refrigerants-7)
cc(refrigerants-7, and-8)
nmod:in(used-5, styrofoam-9)
conj:and(refrigerants-7, styrofoam-9)
punct(chemicals-2, ,-10)
auxpass(suspected-12, are-11)
root(ROOT-0, suspected-12)
mark(eating-14, of-13)
advcl(suspected-12, eating-14)
compound:prt(eating-14, away-15)
det(Earth-17, the-16)
nmod:poss(layer-21, Earth-17)
case(Earth-17, 's-18)
amod(layer-21, protective-19)
compound(layer-21, ozone-20)
dobj(eating-14, layer-21)
punct(suspected-12, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#layer

eat :: Bachelor 's diet: You only eat half of everything you cook -- because the other half sticks to the bottom of the pan ./.
nmod:poss(diet-3, Bachelor-1)
case(Bachelor-1, 's-2)
root(ROOT-0, diet-3)
punct(diet-3, :-4)
nsubj(eat-7, You-5)
advmod(eat-7, only-6)
dep(diet-3, eat-7)
dobj(eat-7, half-8)
case(everything-10, of-9)
nmod:of(half-8, everything-10)
nsubj(cook-12, you-11)
acl:relcl(everything-10, cook-12)
punct(eat-7, ---13)
mark(sticks-18, because-14)
det(half-17, the-15)
amod(half-17, other-16)
nsubj(sticks-18, half-17)
advcl(eat-7, sticks-18)
case(bottom-21, to-19)
det(bottom-21, the-20)
nmod:to(sticks-18, bottom-21)
case(pan-24, of-22)
det(pan-24, the-23)
nmod:of(bottom-21, pan-24)
punct(diet-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#everything

eat :: By 1993 , it will eat up 10.6 % of all federal spending even if no new benefits are added ./.
case(1993-2, By-1)
nmod:by(eat-6, 1993-2)
punct(eat-6, ,-3)
nsubj(eat-6, it-4)
aux(eat-6, will-5)
root(ROOT-0, eat-6)
compound:prt(eat-6, up-7)
nummod(%-9, 10.6-8)
dobj(eat-6, %-9)
case(spending-13, of-10)
det(spending-13, all-11)
amod(spending-13, federal-12)
nmod:of(%-9, spending-13)
advmod(added-20, even-14)
mark(added-20, if-15)
neg(benefits-18, no-16)
amod(benefits-18, new-17)
nsubjpass(added-20, benefits-18)
auxpass(added-20, are-19)
advcl(eat-6, added-20)
punct(eat-6, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#spending

eat :: Meanwhile , stay out of the sun to avoid skin cancer and do n't eat shellfish , which may have red tide ./.
advmod(stay-3, Meanwhile-1)
punct(stay-3, ,-2)
root(ROOT-0, stay-3)
case(sun-7, out-4)
mwe(out-4, of-5)
det(sun-7, the-6)
nmod:out_of(stay-3, sun-7)
mark(avoid-9, to-8)
xcomp(stay-3, avoid-9)
compound(cancer-11, skin-10)
dobj(avoid-9, cancer-11)
cc(stay-3, and-12)
aux(eat-15, do-13)
neg(eat-15, n't-14)
conj:and(stay-3, eat-15)
dobj(eat-15, shellfish-16)
nsubj(have-20, shellfish-16)
punct(shellfish-16, ,-17)
ref(shellfish-16, which-18)
aux(have-20, may-19)
acl:relcl(shellfish-16, have-20)
amod(tide-22, red-21)
dobj(have-20, tide-22)
punct(stay-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#shellfish

eat :: A Cajun hot dog in one hand , Hurricane Slush in the other , I wander along Bourbon Street in the raffish French Quarter , just another media hound among 15 , 000 unleashed here to hunt down non-stories about the Crescent City -- eat some gumbo , listen to great jazz , buy souvenirs ./.
det(dog-4, A-1)
amod(dog-4, Cajun-2)
amod(dog-4, hot-3)
nsubj(eat-45, dog-4)
case(hand-7, in-5)
nummod(hand-7, one-6)
nmod:in(dog-4, hand-7)
punct(dog-4, ,-8)
compound(Slush-10, Hurricane-9)
appos(dog-4, Slush-10)
case(other-13, in-11)
det(other-13, the-12)
nmod:in(Slush-10, other-13)
punct(dog-4, ,-14)
nsubj(wander-16, I-15)
acl:relcl(dog-4, wander-16)
case(Street-19, along-17)
compound(Street-19, Bourbon-18)
nmod:along(wander-16, Street-19)
case(Quarter-24, in-20)
det(Quarter-24, the-21)
amod(Quarter-24, raffish-22)
amod(Quarter-24, French-23)
nmod:in(wander-16, Quarter-24)
punct(dog-4, ,-25)
advmod(hound-29, just-26)
det(hound-29, another-27)
compound(hound-29, media-28)
appos(dog-4, hound-29)
case(15-31, among-30)
nmod:among(hound-29, 15-31)
punct(hound-29, ,-32)
nummod(unleashed-34, 000-33)
acl(hound-29, unleashed-34)
advmod(unleashed-34, here-35)
case(hunt-37, to-36)
nmod:to(unleashed-34, hunt-37)
case(non-stories-39, down-38)
nmod:down(hunt-37, non-stories-39)
case(City-43, about-40)
det(City-43, the-41)
compound(City-43, Crescent-42)
nmod:about(non-stories-39, City-43)
punct(dog-4, ---44)
root(ROOT-0, eat-45)
det(gumbo-47, some-46)
dobj(eat-45, gumbo-47)
punct(eat-45, ,-48)
conj(eat-45, listen-49)
case(jazz-52, to-50)
amod(jazz-52, great-51)
nmod:to(listen-49, jazz-52)
punct(eat-45, ,-53)
conj(eat-45, buy-54)
dobj(buy-54, souvenirs-55)
punct(eat-45, .-56)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#gumbo

eat :: Wild animals are simply a nuisance , eating up crops and occasionally small children , and competing with cattle for grazing space ./.
amod(animals-2, Wild-1)
nsubj(nuisance-6, animals-2)
nsubj(eating-8, animals-2)
nsubj(competing-17, animals-2)
cop(nuisance-6, are-3)
advmod(nuisance-6, simply-4)
det(nuisance-6, a-5)
root(ROOT-0, nuisance-6)
punct(nuisance-6, ,-7)
conj:and(nuisance-6, eating-8)
compound:prt(eating-8, up-9)
dobj(eating-8, crops-10)
cc(nuisance-6, and-11)
advmod(children-14, occasionally-12)
amod(children-14, small-13)
conj:and(nuisance-6, children-14)
punct(nuisance-6, ,-15)
cc(nuisance-6, and-16)
conj:and(nuisance-6, competing-17)
case(cattle-19, with-18)
nmod:with(competing-17, cattle-19)
case(space-22, for-20)
compound(space-22, grazing-21)
nmod:for(competing-17, space-22)
punct(nuisance-6, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#crops

eat :: Beyond that , conditions on board were so vile that `` the sailor was at greater risk eating his meals aboard than fighting . ''/''
case(that-2, Beyond-1)
nmod:beyond(vile-9, that-2)
punct(vile-9, ,-3)
nsubj(vile-9, conditions-4)
case(board-6, on-5)
nmod:on(conditions-4, board-6)
cop(vile-9, were-7)
advmod(vile-9, so-8)
root(ROOT-0, vile-9)
mark(risk-17, that-10)
punct(risk-17, ``-11)
det(sailor-13, the-12)
nsubj(risk-17, sailor-13)
cop(risk-17, was-14)
case(risk-17, at-15)
amod(risk-17, greater-16)
ccomp(vile-9, risk-17)
acl(risk-17, eating-18)
nmod:poss(meals-20, his-19)
dobj(eating-18, meals-20)
advmod(eating-18, aboard-21)
mark(fighting-23, than-22)
advcl(aboard-21, fighting-23)
punct(vile-9, .-24)
punct(vile-9, ''-25)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: eat#meals

eat :: Paulina and the old man go out to the laundry shed to eat their breakfasts ./.
nsubj(go-6, Paulina-1)
cc(Paulina-1, and-2)
det(man-5, the-3)
amod(man-5, old-4)
conj:and(Paulina-1, man-5)
nsubj(go-6, man-5)
root(ROOT-0, go-6)
compound:prt(go-6, out-7)
case(laundry-10, to-8)
det(laundry-10, the-9)
nmod:to(go-6, laundry-10)
dep(go-6, shed-11)
mark(eat-13, to-12)
xcomp(shed-11, eat-13)
nmod:poss(breakfasts-15, their-14)
dobj(eat-13, breakfasts-15)
punct(go-6, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#breakfasts

eat :: A countywide sewage-treatment plant recently began operations here ; the smell in a nearby neighborhood is so awful that one teen-age girl says she ca n't eat at home ./.
det(plant-4, A-1)
amod(plant-4, countywide-2)
compound(plant-4, sewage-treatment-3)
nsubj(began-6, plant-4)
advmod(began-6, recently-5)
root(ROOT-0, began-6)
dobj(began-6, operations-7)
advmod(began-6, here-8)
punct(began-6, ;-9)
det(smell-11, the-10)
nsubj(awful-18, smell-11)
case(neighborhood-15, in-12)
det(neighborhood-15, a-13)
amod(neighborhood-15, nearby-14)
nmod:in(smell-11, neighborhood-15)
cop(awful-18, is-16)
advmod(awful-18, so-17)
parataxis(began-6, awful-18)
mark(says-23, that-19)
nummod(girl-22, one-20)
amod(girl-22, teen-age-21)
nsubj(says-23, girl-22)
ccomp(awful-18, says-23)
nsubj(eat-27, she-24)
aux(eat-27, ca-25)
neg(eat-27, n't-26)
ccomp(says-23, eat-27)
case(home-29, at-28)
nmod:at(eat-27, home-29)
punct(began-6, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#she

eat :: Richard Sherlund , an analyst with Goldman , Sachs & Co. said `` the company is going to have to eat crow because it told a lot of people it would be profitable . ''/''
compound(Sherlund-2, Richard-1)
nsubj(said-12, Sherlund-2)
punct(Sherlund-2, ,-3)
det(analyst-5, an-4)
appos(Sherlund-2, analyst-5)
case(Goldman-7, with-6)
nmod:with(analyst-5, Goldman-7)
punct(Goldman-7, ,-8)
nmod:with(analyst-5, Sachs-9)
conj:&(Goldman-7, Sachs-9)
cc(Goldman-7, &-10)
nmod:with(analyst-5, Co.-11)
conj:&(Goldman-7, Co.-11)
root(ROOT-0, said-12)
punct(said-12, ``-13)
det(company-15, the-14)
nsubj(going-17, company-15)
nsubj:xsubj(have-19, company-15)
aux(going-17, is-16)
ccomp(said-12, going-17)
mark(have-19, to-18)
xcomp(going-17, have-19)
mark(eat-21, to-20)
xcomp(have-19, eat-21)
dobj(eat-21, crow-22)
mark(told-25, because-23)
nsubj(told-25, it-24)
advcl(going-17, told-25)
det(lot-27, a-26)
dobj(told-25, lot-27)
case(people-29, of-28)
nmod:of(lot-27, people-29)
nsubj(profitable-33, it-30)
aux(profitable-33, would-31)
cop(profitable-33, be-32)
ccomp(told-25, profitable-33)
punct(said-12, .-34)
punct(said-12, ''-35)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: eat#crow

eat :: Last October , he surpassed his own record by eating 2.6 kilograms ./.
amod(October-2, Last-1)
nmod:tmod(surpassed-5, October-2)
punct(surpassed-5, ,-3)
nsubj(surpassed-5, he-4)
root(ROOT-0, surpassed-5)
nmod:poss(record-8, his-6)
amod(record-8, own-7)
dobj(surpassed-5, record-8)
mark(eating-10, by-9)
advcl(surpassed-5, eating-10)
nummod(kilograms-12, 2.6-11)
dobj(eating-10, kilograms-12)
punct(surpassed-5, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#kilograms

eat :: Morty Bennett eats a scallop and shrimp entree at a Chinese restaurant in Miami ./.
compound(Bennett-2, Morty-1)
nsubj(eats-3, Bennett-2)
root(ROOT-0, eats-3)
det(scallop-5, a-4)
dobj(eats-3, scallop-5)
cc(scallop-5, and-6)
compound(entree-8, shrimp-7)
dobj(eats-3, entree-8)
conj:and(scallop-5, entree-8)
case(restaurant-12, at-9)
det(restaurant-12, a-10)
amod(restaurant-12, Chinese-11)
nmod:at(eats-3, restaurant-12)
case(Miami-14, in-13)
nmod:in(restaurant-12, Miami-14)
punct(eats-3, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#scallop

eat :: The races mingle in department stores and at downtown restaurants , where city employees all eat between noon and one ./.
det(races-2, The-1)
nsubj(mingle-3, races-2)
nsubj(mingle-3', races-2)
root(ROOT-0, mingle-3)
conj:and(mingle-3, mingle-3')
case(stores-6, in-4)
compound(stores-6, department-5)
nmod:in(mingle-3, stores-6)
cc(mingle-3, and-7)
case(restaurants-10, at-8)
compound(restaurants-10, downtown-9)
nmod:at(mingle-3', restaurants-10)
punct(restaurants-10, ,-11)
advmod(eat-16, where-12)
compound(employees-14, city-13)
nsubj(eat-16, employees-14)
dep(eat-16, all-15)
acl:relcl(restaurants-10, eat-16)
case(noon-18, between-17)
nmod:between(eat-16, noon-18)
cc(noon-18, and-19)
nmod:between(eat-16, one-20)
conj:and(noon-18, one-20)
punct(mingle-3, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#employees

eat :: But the overwhelming mass of Soviet people eat dinner at home , after wasting millions of hours in line buying dreadful food , barely seeing a green vegetable in a state grocery all winter -LRB- although the citrus situation is vastly improved from what it once was -RRB- ./.
cc(eat-8, But-1)
det(mass-4, the-2)
amod(mass-4, overwhelming-3)
nsubj(eat-8, mass-4)
case(people-7, of-5)
amod(people-7, Soviet-6)
nmod:of(mass-4, people-7)
root(ROOT-0, eat-8)
dobj(eat-8, dinner-9)
case(home-11, at-10)
nmod:at(eat-8, home-11)
punct(eat-8, ,-12)
mark(wasting-14, after-13)
advcl(eat-8, wasting-14)
dobj(wasting-14, millions-15)
case(hours-17, of-16)
nmod:of(millions-15, hours-17)
case(food-22, in-18)
compound(food-22, line-19)
compound(food-22, buying-20)
amod(food-22, dreadful-21)
nmod:in(millions-15, food-22)
punct(wasting-14, ,-23)
advmod(seeing-25, barely-24)
advcl(wasting-14, seeing-25)
det(vegetable-28, a-26)
amod(vegetable-28, green-27)
dobj(seeing-25, vegetable-28)
case(grocery-32, in-29)
det(grocery-32, a-30)
compound(grocery-32, state-31)
nmod:in(vegetable-28, grocery-32)
det(winter-34, all-33)
nmod:tmod(seeing-25, winter-34)
punct(improved-42, -LRB--35)
mark(improved-42, although-36)
det(situation-39, the-37)
compound(situation-39, citrus-38)
nsubjpass(improved-42, situation-39)
auxpass(improved-42, is-40)
advmod(improved-42, vastly-41)
dep(winter-34, improved-42)
mark(was-47, from-43)
dobj(was-47, what-44)
nsubj(was-47, it-45)
advmod(was-47, once-46)
advcl(improved-42, was-47)
punct(improved-42, -RRB--48)
punct(eat-8, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#dinner

eat :: `` He just tried to eat the propeller , '' says Mr. Fox ./.
punct(says-11, ``-1)
nsubj(tried-4, He-2)
nsubj:xsubj(eat-6, He-2)
advmod(tried-4, just-3)
ccomp(says-11, tried-4)
mark(eat-6, to-5)
xcomp(tried-4, eat-6)
det(propeller-8, the-7)
dobj(eat-6, propeller-8)
punct(says-11, ,-9)
punct(says-11, ''-10)
root(ROOT-0, says-11)
compound(Fox-13, Mr.-12)
nsubj(says-11, Fox-13)
punct(says-11, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#propeller

eat :: Another writer goes to Bulgaria , eats bad food , stays at a bad hotel whose name he translates as Rathole Fleabag , and generally has a terrible time ./.
det(writer-2, Another-1)
nsubj(goes-3, writer-2)
nsubj(eats-7, writer-2)
nsubj(stays-11, writer-2)
nsubj(has-26, writer-2)
root(ROOT-0, goes-3)
case(Bulgaria-5, to-4)
nmod:to(goes-3, Bulgaria-5)
punct(goes-3, ,-6)
conj:and(goes-3, eats-7)
amod(food-9, bad-8)
dobj(eats-7, food-9)
punct(goes-3, ,-10)
conj:and(goes-3, stays-11)
case(hotel-15, at-12)
det(hotel-15, a-13)
amod(hotel-15, bad-14)
nmod:at(stays-11, hotel-15)
nmod:poss(name-17, hotel-15)
ref(hotel-15, whose-16)
dobj(translates-19, name-17)
nsubj(translates-19, he-18)
acl:relcl(hotel-15, translates-19)
case(Fleabag-22, as-20)
compound(Fleabag-22, Rathole-21)
nmod:as(translates-19, Fleabag-22)
punct(goes-3, ,-23)
cc(goes-3, and-24)
advmod(has-26, generally-25)
conj:and(goes-3, has-26)
det(time-29, a-27)
amod(time-29, terrible-28)
dobj(has-26, time-29)
punct(goes-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#food

eat :: Creating the special food solved the problem of what he could eat on future flights , but supplying fare for astronauts seemed limited as a business concept ./.
csubj(solved-5, Creating-1)
csubj(supplying-18, Creating-1)
det(food-4, the-2)
amod(food-4, special-3)
dobj(Creating-1, food-4)
root(ROOT-0, solved-5)
det(problem-7, the-6)
dobj(solved-5, problem-7)
mark(eat-12, of-8)
dobj(eat-12, what-9)
nsubj(eat-12, he-10)
aux(eat-12, could-11)
acl(problem-7, eat-12)
case(flights-15, on-13)
amod(flights-15, future-14)
nmod:on(eat-12, flights-15)
punct(solved-5, ,-16)
cc(solved-5, but-17)
conj:but(solved-5, supplying-18)
dobj(supplying-18, fare-19)
case(astronauts-21, for-20)
nmod:for(supplying-18, astronauts-21)
dep(supplying-18, seemed-22)
xcomp(seemed-22, limited-23)
case(concept-27, as-24)
det(concept-27, a-25)
compound(concept-27, business-26)
nmod:as(limited-23, concept-27)
punct(solved-5, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#what

eat :: Plus a man who once ate an entire plane piece by piece ./.
root(ROOT-0, Plus-1)
det(man-3, a-2)
dep(Plus-1, man-3)
nsubj(ate-6, man-3)
ref(man-3, who-4)
advmod(ate-6, once-5)
acl:relcl(man-3, ate-6)
det(piece-10, an-7)
amod(piece-10, entire-8)
compound(piece-10, plane-9)
dobj(ate-6, piece-10)
case(piece-12, by-11)
nmod:by(ate-6, piece-12)
punct(Plus-1, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#piece

eat :: New Year 's Day , after an afternoon of eating my mother-in-law 's chicken , I weigh in at 175 pounds ./.
amod(Year-2, New-1)
nmod:poss(Day-4, Year-2)
case(Year-2, 's-3)
nmod:tmod(weigh-17, Day-4)
punct(weigh-17, ,-5)
case(afternoon-8, after-6)
det(afternoon-8, an-7)
nmod:after(weigh-17, afternoon-8)
mark(eating-10, of-9)
acl(afternoon-8, eating-10)
nmod:poss(mother-in-law-12, my-11)
nmod:poss(chicken-14, mother-in-law-12)
case(mother-in-law-12, 's-13)
dobj(eating-10, chicken-14)
punct(weigh-17, ,-15)
nsubj(weigh-17, I-16)
root(ROOT-0, weigh-17)
compound:prt(weigh-17, in-18)
case(pounds-21, at-19)
nummod(pounds-21, 175-20)
nmod:at(weigh-17, pounds-21)
punct(weigh-17, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#chicken

eat :: If someone wants to eat fruits , nuts and organically grown vegetables from the back yard every day , fine ./.
mark(wants-3, If-1)
nsubj(wants-3, someone-2)
nsubj:xsubj(eat-5, someone-2)
advcl(fine-20, wants-3)
mark(eat-5, to-4)
xcomp(wants-3, eat-5)
dobj(eat-5, fruits-6)
punct(fruits-6, ,-7)
dobj(eat-5, nuts-8)
conj:and(fruits-6, nuts-8)
cc(fruits-6, and-9)
advmod(grown-11, organically-10)
amod(vegetables-12, grown-11)
dobj(eat-5, vegetables-12)
conj:and(fruits-6, vegetables-12)
case(yard-16, from-13)
det(yard-16, the-14)
amod(yard-16, back-15)
nmod:from(eat-5, yard-16)
det(day-18, every-17)
nmod:tmod(eat-5, day-18)
punct(fine-20, ,-19)
root(ROOT-0, fine-20)
punct(fine-20, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#fruits

eat :: They wo n't let her use her own stove or refrigerator , so she cooks and eats meals at a neighbor 's ./.
nsubj(let-4, They-1)
aux(let-4, wo-2)
neg(let-4, n't-3)
root(ROOT-0, let-4)
nsubj(use-6, her-5)
ccomp(let-4, use-6)
nmod:poss(stove-9, her-7)
amod(stove-9, own-8)
dobj(use-6, stove-9)
cc(stove-9, or-10)
dobj(use-6, refrigerator-11)
conj:or(stove-9, refrigerator-11)
punct(let-4, ,-12)
dep(let-4, so-13)
nsubj(cooks-15, she-14)
nsubj(eats-17, she-14)
parataxis(let-4, cooks-15)
cc(cooks-15, and-16)
parataxis(let-4, eats-17)
conj:and(cooks-15, eats-17)
dobj(eats-17, meals-18)
case(neighbor-21, at-19)
det(neighbor-21, a-20)
nmod:'s(eats-17, neighbor-21)
case(neighbor-21, 's-22)
punct(let-4, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#meals

eat :: Administrators , who are required by state law to force-feed patients who ca n't or wo n't eat , are wrestling over what to do with one semicomatose tubefeeder ./.
root(ROOT-0, Administrators-1)
nsubjpass(required-5, Administrators-1)
punct(Administrators-1, ,-2)
ref(Administrators-1, who-3)
auxpass(required-5, are-4)
acl:relcl(Administrators-1, required-5)
case(law-8, by-6)
compound(law-8, state-7)
nmod:agent(required-5, law-8)
case(patients-11, to-9)
amod(patients-11, force-feed-10)
nmod:to(law-8, patients-11)
nsubj(wrestling-21, patients-11)
ref(patients-11, who-12)
aux(wrestling-21, ca-13)
neg(wrestling-21, n't-14)
cc(n't-14, or-15)
aux(eat-18, wo-16)
neg(eat-18, n't-17)
conj:or(n't-14, eat-18)
neg(wrestling-21, eat-18)
punct(wrestling-21, ,-19)
aux(wrestling-21, are-20)
acl:relcl(patients-11, wrestling-21)
mark(do-25, over-22)
nsubj(do-25, what-23)
mark(do-25, to-24)
advcl(wrestling-21, do-25)
case(tubefeeder-29, with-26)
nummod(tubefeeder-29, one-27)
compound(tubefeeder-29, semicomatose-28)
nmod:with(do-25, tubefeeder-29)
punct(Administrators-1, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

eat :: Moreover , I have yet to eat a pizza that did n't leave the top of my mouth burned for several days afterward ./.
advmod(have-4, Moreover-1)
punct(have-4, ,-2)
nsubj(have-4, I-3)
nsubj:xsubj(eat-7, I-3)
root(ROOT-0, have-4)
advmod(have-4, yet-5)
mark(eat-7, to-6)
xcomp(have-4, eat-7)
det(pizza-9, a-8)
dobj(eat-7, pizza-9)
nsubj(leave-13, pizza-9)
ref(pizza-9, that-10)
aux(leave-13, did-11)
neg(leave-13, n't-12)
acl:relcl(pizza-9, leave-13)
det(top-15, the-14)
dobj(leave-13, top-15)
case(mouth-18, of-16)
nmod:poss(mouth-18, my-17)
nmod:of(top-15, mouth-18)
acl(top-15, burned-19)
case(days-22, for-20)
amod(days-22, several-21)
nmod:for(burned-19, days-22)
advmod(days-22, afterward-23)
punct(have-4, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#pizza

eat :: Parasite infections of people who like to eat raw or undercooked fish are increasing , and the main cause is the rising population of seals and other protected marine mammals , scientists reported ./.
compound(infections-2, Parasite-1)
nsubj(increasing-14, infections-2)
case(people-4, of-3)
nmod:of(infections-2, people-4)
nsubj(like-6, people-4)
nsubj:xsubj(eat-8, people-4)
ref(people-4, who-5)
acl:relcl(people-4, like-6)
mark(eat-8, to-7)
xcomp(like-6, eat-8)
amod(fish-12, raw-9)
cc(raw-9, or-10)
conj:or(raw-9, undercooked-11)
amod(fish-12, undercooked-11)
dobj(eat-8, fish-12)
aux(increasing-14, are-13)
ccomp(reported-33, increasing-14)
punct(increasing-14, ,-15)
cc(increasing-14, and-16)
det(cause-19, the-17)
amod(cause-19, main-18)
nsubj(population-23, cause-19)
cop(population-23, is-20)
det(population-23, the-21)
amod(population-23, rising-22)
conj:and(increasing-14, population-23)
ccomp(reported-33, population-23)
case(seals-25, of-24)
nmod:of(population-23, seals-25)
cc(seals-25, and-26)
amod(mammals-30, other-27)
amod(mammals-30, protected-28)
amod(mammals-30, marine-29)
nmod:of(population-23, mammals-30)
conj:and(seals-25, mammals-30)
punct(reported-33, ,-31)
nsubj(reported-33, scientists-32)
root(ROOT-0, reported-33)
punct(reported-33, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#fish

eat :: Spirits may be the only solace in a land where the average person earns $ 350 a year and can never expect to have enough to eat ./.
nsubj(solace-6, Spirits-1)
aux(solace-6, may-2)
cop(solace-6, be-3)
det(solace-6, the-4)
amod(solace-6, only-5)
root(ROOT-0, solace-6)
case(land-9, in-7)
det(land-9, a-8)
nmod:in(solace-6, land-9)
advmod(earns-14, where-10)
det(person-13, the-11)
amod(person-13, average-12)
nsubj(earns-14, person-13)
nsubj(expect-22, person-13)
nsubj:xsubj(have-24, person-13)
acl:relcl(land-9, earns-14)
dep(350-16, $-15)
dobj(earns-14, 350-16)
det(year-18, a-17)
nmod:npmod(350-16, year-18)
cc(earns-14, and-19)
aux(expect-22, can-20)
neg(expect-22, never-21)
acl:relcl(land-9, expect-22)
conj:and(earns-14, expect-22)
mark(have-24, to-23)
xcomp(expect-22, have-24)
advmod(have-24, enough-25)
mark(eat-27, to-26)
dep(enough-25, eat-27)
punct(solace-6, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

eat :: He insists that Ashley 's death was an accident caused by the child tipping over a trash can and eating discarded pills ./.
nsubj(insists-2, He-1)
root(ROOT-0, insists-2)
mark(accident-9, that-3)
nmod:poss(death-6, Ashley-4)
case(Ashley-4, 's-5)
nsubj(accident-9, death-6)
cop(accident-9, was-7)
det(accident-9, an-8)
ccomp(insists-2, accident-9)
acl(accident-9, caused-10)
case(child-13, by-11)
det(child-13, the-12)
nmod:by(caused-10, child-13)
acl(child-13, tipping-14)
case(trash-17, over-15)
det(trash-17, a-16)
nmod:over(tipping-14, trash-17)
dobj(accident-9, can-18)
dep(can-18, and-19)
dep(and-19, eating-20)
amod(pills-22, discarded-21)
dobj(eating-20, pills-22)
punct(insists-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#pills

eat :: And when various award-winning fruits and animals were assembled for a local TV shot , Chief tried to eliminate the 59-pound watermelon by eating it ./.
cc(tried-17, And-1)
advmod(assembled-9, when-2)
amod(fruits-5, various-3)
amod(fruits-5, award-winning-4)
nsubjpass(assembled-9, fruits-5)
cc(fruits-5, and-6)
conj:and(fruits-5, animals-7)
nsubjpass(assembled-9, animals-7)
auxpass(assembled-9, were-8)
advcl(tried-17, assembled-9)
case(shot-14, for-10)
det(shot-14, a-11)
amod(shot-14, local-12)
compound(shot-14, TV-13)
nmod:for(assembled-9, shot-14)
punct(tried-17, ,-15)
nsubj(tried-17, Chief-16)
nsubj:xsubj(eliminate-19, Chief-16)
root(ROOT-0, tried-17)
mark(eliminate-19, to-18)
xcomp(tried-17, eliminate-19)
det(watermelon-22, the-20)
amod(watermelon-22, 59-pound-21)
dobj(eliminate-19, watermelon-22)
mark(eating-24, by-23)
advcl(eliminate-19, eating-24)
dobj(eating-24, it-25)
punct(tried-17, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#it

eat :: He added that the hotel was `` safe enough for you , maybe , but you can understand my own misgivings about eating here . ''/''
nsubj(added-2, He-1)
root(ROOT-0, added-2)
mark(enough-9, that-3)
det(hotel-5, the-4)
nsubj(enough-9, hotel-5)
cop(enough-9, was-6)
punct(enough-9, ``-7)
amod(enough-9, safe-8)
ccomp(added-2, enough-9)
case(you-11, for-10)
nmod:for(enough-9, you-11)
punct(you-11, ,-12)
advmod(you-11, maybe-13)
punct(enough-9, ,-14)
cc(enough-9, but-15)
nsubj(understand-18, you-16)
aux(understand-18, can-17)
ccomp(added-2, understand-18)
conj:but(enough-9, understand-18)
nmod:poss(misgivings-21, my-19)
amod(misgivings-21, own-20)
dobj(understand-18, misgivings-21)
mark(eating-23, about-22)
acl(misgivings-21, eating-23)
advmod(eating-23, here-24)
punct(added-2, .-25)
punct(added-2, ''-26)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

eat :: Still , they did n't go quite as far as one Himalayan bear -- it ate the camera ./.
advmod(go-6, Still-1)
punct(go-6, ,-2)
nsubj(go-6, they-3)
aux(go-6, did-4)
neg(go-6, n't-5)
root(ROOT-0, go-6)
advmod(far-9, quite-7)
advmod(far-9, as-8)
advmod(go-6, far-9)
case(bear-13, as-10)
nummod(bear-13, one-11)
amod(bear-13, Himalayan-12)
nmod:as(far-9, bear-13)
punct(go-6, ---14)
nsubj(ate-16, it-15)
parataxis(go-6, ate-16)
det(camera-18, the-17)
dobj(ate-16, camera-18)
punct(go-6, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#camera

eat :: You ca n't eat these confections , but paper making satisfies the senses all the same ./.
nsubj(eat-4, You-1)
aux(eat-4, ca-2)
neg(eat-4, n't-3)
root(ROOT-0, eat-4)
det(confections-6, these-5)
dobj(eat-4, confections-6)
punct(eat-4, ,-7)
cc(eat-4, but-8)
conj:but(eat-4, paper-9)
acl(paper-9, making-10)
nsubj(senses-13, satisfies-11)
det(senses-13, the-12)
xcomp(making-10, senses-13)
det:predet(same-16, all-14)
det(same-16, the-15)
advmod(senses-13, same-16)
punct(eat-4, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#confections

eat :: `` Most Koreans ' stomachs turn when they think of eating snails , '' Mr. Lee concedes ./.
punct(turn-6, ``-1)
amod(stomachs-5, Most-2)
nmod:poss(stomachs-5, Koreans-3)
case(Koreans-3, '-4)
nsubj(turn-6, stomachs-5)
ccomp(concedes-17, turn-6)
advmod(think-9, when-7)
nsubj(think-9, they-8)
advcl(turn-6, think-9)
mark(eating-11, of-10)
advcl(think-9, eating-11)
dobj(eating-11, snails-12)
punct(concedes-17, ,-13)
punct(concedes-17, ''-14)
compound(Lee-16, Mr.-15)
nsubj(concedes-17, Lee-16)
root(ROOT-0, concedes-17)
punct(concedes-17, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#snails

eat :: These waters are full of the fish , mollusks and small crustaceans that lobsters like to eat ./.
det(waters-2, These-1)
nsubj(full-4, waters-2)
cop(full-4, are-3)
root(ROOT-0, full-4)
case(fish-7, of-5)
det(fish-7, the-6)
nmod:of(full-4, fish-7)
punct(fish-7, ,-8)
nmod:of(full-4, mollusks-9)
conj:and(fish-7, mollusks-9)
cc(fish-7, and-10)
amod(crustaceans-12, small-11)
nmod:of(full-4, crustaceans-12)
conj:and(fish-7, crustaceans-12)
dep(fish-7, that-13)
dep(that-13, lobsters-14)
mark(eat-17, like-15)
mark(eat-17, to-16)
acl(lobsters-14, eat-17)
punct(full-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

eat :: `` I tried to move and talk but that was impossible , '' recalled an Australian boy in 1973 , after he fell ill from eating puffer fish ./.
punct(recalled-14, ``-1)
nsubj(tried-3, I-2)
nsubj:xsubj(move-5, I-2)
ccomp(recalled-14, tried-3)
mark(move-5, to-4)
xcomp(tried-3, move-5)
cc(move-5, and-6)
xcomp(tried-3, talk-7)
conj:and(move-5, talk-7)
mark(impossible-11, but-8)
nsubj(impossible-11, that-9)
cop(impossible-11, was-10)
advcl(tried-3, impossible-11)
punct(recalled-14, ,-12)
punct(recalled-14, ''-13)
root(ROOT-0, recalled-14)
det(boy-17, an-15)
amod(boy-17, Australian-16)
nsubj(recalled-14, boy-17)
case(1973-19, in-18)
nmod:in(recalled-14, 1973-19)
punct(recalled-14, ,-20)
mark(fell-23, after-21)
nsubj(fell-23, he-22)
advcl(recalled-14, fell-23)
advmod(fell-23, ill-24)
mark(eating-26, from-25)
advcl(fell-23, eating-26)
compound(fish-28, puffer-27)
dobj(eating-26, fish-28)
punct(recalled-14, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#fish

eat :: For those who eat only at four-star French restaurants , fajitas are a Tex-Mex specialty -- strips of grilled beef rolled up in flour tortillas with onions , peppers and guacamole ./.
case(those-2, For-1)
nsubj(eat-4, those-2)
nmod:for(specialty-15, those-2)
ref(those-2, who-3)
acl:relcl(those-2, eat-4)
advmod(restaurants-9, only-5)
case(restaurants-9, at-6)
amod(restaurants-9, four-star-7)
amod(restaurants-9, French-8)
nmod:at(eat-4, restaurants-9)
punct(specialty-15, ,-10)
nsubj(specialty-15, fajitas-11)
cop(specialty-15, are-12)
det(specialty-15, a-13)
amod(specialty-15, Tex-Mex-14)
root(ROOT-0, specialty-15)
punct(specialty-15, ---16)
nsubj(rolled-21, strips-17)
case(beef-20, of-18)
amod(beef-20, grilled-19)
nmod:of(strips-17, beef-20)
parataxis(specialty-15, rolled-21)
compound:prt(rolled-21, up-22)
case(tortillas-25, in-23)
compound(tortillas-25, flour-24)
nmod:in(rolled-21, tortillas-25)
case(onions-27, with-26)
nmod:with(rolled-21, onions-27)
punct(onions-27, ,-28)
nmod:with(rolled-21, peppers-29)
conj:and(onions-27, peppers-29)
cc(onions-27, and-30)
nmod:with(rolled-21, guacamole-31)
conj:and(onions-27, guacamole-31)
punct(specialty-15, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#those

eat :: They should be eating chocolate cake , instead they are bleeding from their souls . ''/''
nsubj(eating-4, They-1)
aux(eating-4, should-2)
aux(eating-4, be-3)
root(ROOT-0, eating-4)
compound(cake-6, chocolate-5)
dobj(eating-4, cake-6)
punct(eating-4, ,-7)
advmod(bleeding-11, instead-8)
nsubj(bleeding-11, they-9)
aux(bleeding-11, are-10)
advcl(eating-4, bleeding-11)
case(souls-14, from-12)
nmod:poss(souls-14, their-13)
nmod:from(bleeding-11, souls-14)
punct(eating-4, .-15)
punct(eating-4, ''-16)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: eat#cake

eat :: Russians eat awful sausage by the ton ./.
nsubj(eat-2, Russians-1)
root(ROOT-0, eat-2)
amod(sausage-4, awful-3)
dobj(eat-2, sausage-4)
case(ton-7, by-5)
det(ton-7, the-6)
nmod:by(eat-2, ton-7)
punct(eat-2, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#sausage

eat :: His brother Woody , who 's worth $ 100 million , is a grotesque 250-pound alcoholic moron who spends his time watching Arnold Schwarzenegger movies , eating peanuts , and floating stark naked on a rubber raft in his indoor swimming pool listening to favorites from `` My Fair Lady . '' -LRB- He also has raped and assaulted a showgirl. -RRB-/-RRB-
nmod:poss(Woody-3, His-1)
compound(Woody-3, brother-2)
nsubj(worth-7, Woody-3)
nsubj(moron-17, Woody-3)
punct(Woody-3, ,-4)
ref(Woody-3, who-5)
cop(worth-7, 's-6)
acl:relcl(Woody-3, worth-7)
dep(worth-7, $-8)
compound(million-10, 100-9)
nummod($-8, million-10)
punct(Woody-3, ,-11)
cop(moron-17, is-12)
det(moron-17, a-13)
amod(moron-17, grotesque-14)
amod(moron-17, 250-pound-15)
amod(moron-17, alcoholic-16)
root(ROOT-0, moron-17)
nsubj(spends-19, moron-17)
nsubj(floating-31, moron-17)
ref(moron-17, who-18)
acl:relcl(moron-17, spends-19)
nmod:poss(time-21, his-20)
dobj(spends-19, time-21)
xcomp(spends-19, watching-22)
compound(movies-25, Arnold-23)
compound(movies-25, Schwarzenegger-24)
dobj(watching-22, movies-25)
punct(spends-19, ,-26)
xcomp(spends-19, eating-27)
dobj(eating-27, peanuts-28)
punct(spends-19, ,-29)
cc(spends-19, and-30)
acl:relcl(moron-17, floating-31)
conj:and(spends-19, floating-31)
amod(naked-33, stark-32)
dobj(floating-31, naked-33)
case(raft-37, on-34)
det(raft-37, a-35)
compound(raft-37, rubber-36)
nmod:on(floating-31, raft-37)
case(pool-42, in-38)
nmod:poss(pool-42, his-39)
amod(pool-42, indoor-40)
compound(pool-42, swimming-41)
nmod:in(floating-31, pool-42)
acl(pool-42, listening-43)
case(favorites-45, to-44)
nmod:to(listening-43, favorites-45)
case(Lady-50, from-46)
punct(Lady-50, ``-47)
nmod:poss(Lady-50, My-48)
amod(Lady-50, Fair-49)
nmod:from(favorites-45, Lady-50)
punct(moron-17, .-51)
punct(moron-17, ''-52)
punct(raped-5, -LRB--1)
nsubj(raped-5, He-2)
nsubj(assaulted-7, He-2)
advmod(raped-5, also-3)
aux(raped-5, has-4)
root(ROOT-0, raped-5)
cc(raped-5, and-6)
conj:and(raped-5, assaulted-7)
det(showgirl-9, a-8)
dobj(raped-5, showgirl-9)
punct(raped-5, .-10)
punct(raped-5, -RRB--11)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: eat#peanuts

eat :: `` We encourage our people as much as we can to fly on United Airlines and eat Kellogg cereals , '' says Jack Ryan , executive vice president of Leo Burnett Co . , which also handles advertising for GM 's Oldsmobile division ./.
punct(says-22, ``-1)
nsubj(encourage-3, We-2)
ccomp(says-22, encourage-3)
nmod:poss(people-5, our-4)
dobj(encourage-3, people-5)
advmod(much-7, as-6)
advmod(encourage-3, much-7)
mark(can-10, as-8)
nsubj(can-10, we-9)
advcl(much-7, can-10)
mark(fly-12, to-11)
advcl(encourage-3, fly-12)
case(Airlines-15, on-13)
compound(Airlines-15, United-14)
nmod:on(fly-12, Airlines-15)
cc(fly-12, and-16)
advcl(encourage-3, eat-17)
conj:and(fly-12, eat-17)
compound(cereals-19, Kellogg-18)
dobj(eat-17, cereals-19)
punct(says-22, ,-20)
punct(says-22, ''-21)
root(ROOT-0, says-22)
compound(Ryan-24, Jack-23)
nsubj(says-22, Ryan-24)
punct(Ryan-24, ,-25)
amod(president-28, executive-26)
compound(president-28, vice-27)
appos(Ryan-24, president-28)
case(Co-32, of-29)
compound(Co-32, Leo-30)
compound(Co-32, Burnett-31)
nmod:of(president-28, Co-32)
punct(says-22, .-33)
punct(handles-4, ,-1)
nsubj(handles-4, which-2)
advmod(handles-4, also-3)
root(ROOT-0, handles-4)
dobj(handles-4, advertising-5)
case(division-10, for-6)
nmod:poss(division-10, GM-7)
case(GM-7, 's-8)
compound(division-10, Oldsmobile-9)
nmod:for(advertising-5, division-10)
punct(handles-4, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#cereals

eat :: One grandfather had a sugar-cane field , until alternating patrols of Contras and Sandinistas ate it , stalk by stalk ./.
nummod(grandfather-2, One-1)
nsubj(had-3, grandfather-2)
root(ROOT-0, had-3)
det(field-6, a-4)
amod(field-6, sugar-cane-5)
dobj(had-3, field-6)
punct(had-3, ,-7)
mark(alternating-9, until-8)
csubj(ate-15, alternating-9)
dobj(alternating-9, patrols-10)
case(Contras-12, of-11)
nmod:of(patrols-10, Contras-12)
cc(Contras-12, and-13)
nmod:of(patrols-10, Sandinistas-14)
conj:and(Contras-12, Sandinistas-14)
parataxis(had-3, ate-15)
dobj(ate-15, it-16)
punct(ate-15, ,-17)
advcl(ate-15, stalk-18)
case(stalk-20, by-19)
nmod:by(stalk-18, stalk-20)
punct(had-3, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#it

eat :: Then he packed the fish cavity with plastic bags full of ice to maintain freshness . -LRB- After all , somebody would be eating his models when he was done with them. -RRB-/-RRB-
advmod(packed-3, Then-1)
nsubj(packed-3, he-2)
root(ROOT-0, packed-3)
det(cavity-6, the-4)
compound(cavity-6, fish-5)
dobj(packed-3, cavity-6)
case(bags-9, with-7)
amod(bags-9, plastic-8)
nmod:with(packed-3, bags-9)
amod(bags-9, full-10)
case(ice-12, of-11)
nmod:of(full-10, ice-12)
mark(maintain-14, to-13)
advcl(packed-3, maintain-14)
dobj(maintain-14, freshness-15)
punct(packed-3, .-16)
punct(eating-8, -LRB--1)
case(all-3, After-2)
nmod:after(eating-8, all-3)
punct(eating-8, ,-4)
nsubj(eating-8, somebody-5)
aux(eating-8, would-6)
aux(eating-8, be-7)
root(ROOT-0, eating-8)
nmod:poss(models-10, his-9)
dobj(eating-8, models-10)
advmod(done-14, when-11)
nsubjpass(done-14, he-12)
auxpass(done-14, was-13)
advcl(eating-8, done-14)
case(them-16, with-15)
nmod:with(done-14, them-16)
punct(eating-8, .-17)
punct(eating-8, -RRB--18)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: eat#models

eat :: Most seafood eaters never give a second thought to the safety of the delicacies they eat ./.
amod(eaters-3, Most-1)
compound(eaters-3, seafood-2)
nsubj(give-5, eaters-3)
neg(give-5, never-4)
root(ROOT-0, give-5)
det(thought-8, a-6)
amod(thought-8, second-7)
dobj(give-5, thought-8)
case(safety-11, to-9)
det(safety-11, the-10)
nmod:to(thought-8, safety-11)
case(delicacies-14, of-12)
det(delicacies-14, the-13)
nmod:of(safety-11, delicacies-14)
nsubj(eat-16, they-15)
acl:relcl(delicacies-14, eat-16)
punct(give-5, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: eat#they

eat :: And scraping together the evidence for this often entails investigating a claimant 's personal life , checking such details as smoking , drinking and eating habits , emotional stability and family health history ./.
root(ROOT-0, And-1)
dep(And-1, scraping-2)
advmod(scraping-2, together-3)
det(evidence-5, the-4)
dobj(scraping-2, evidence-5)
mark(entails-9, for-6)
nsubj(entails-9, this-7)
advmod(entails-9, often-8)
acl(evidence-5, entails-9)
xcomp(entails-9, investigating-10)
det(claimant-12, a-11)
nmod:poss(life-15, claimant-12)
case(claimant-12, 's-13)
amod(life-15, personal-14)
dobj(investigating-10, life-15)
punct(scraping-2, ,-16)
advcl(scraping-2, checking-17)
amod(details-19, such-18)
dobj(checking-17, details-19)
case(smoking-21, as-20)
nmod:as(details-19, smoking-21)
punct(smoking-21, ,-22)
nmod:as(details-19, drinking-23)
conj:and(smoking-21, drinking-23)
cc(smoking-21, and-24)
compound(habits-26, eating-25)
nmod:as(details-19, habits-26)
conj:and(smoking-21, habits-26)
punct(scraping-2, ,-27)
amod(stability-29, emotional-28)
root(,-27, stability-29)
cc(stability-29, and-30)
compound(history-33, family-31)
compound(history-33, health-32)
root(,-27, history-33)
conj:and(stability-29, history-33)
punct(stability-29, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

escape :: But Mr. Quayle ca n't seem to escape controversy ./.
cc(seem-6, But-1)
compound(Quayle-3, Mr.-2)
nsubj(seem-6, Quayle-3)
nsubj:xsubj(escape-8, Quayle-3)
aux(seem-6, ca-4)
neg(seem-6, n't-5)
root(ROOT-0, seem-6)
mark(escape-8, to-7)
xcomp(seem-6, escape-8)
dobj(escape-8, controversy-9)
punct(seem-6, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#controversy

escape :: Baby hilariously escapes disaster , over and over , as the camera whips around at a hyperanimated pace ./.
nsubj(escapes-3, Baby-1)
advmod(escapes-3, hilariously-2)
root(ROOT-0, escapes-3)
dobj(escapes-3, disaster-4)
punct(disaster-4, ,-5)
advmod(disaster-4, over-6)
cc(over-6, and-7)
advmod(disaster-4, over-8)
conj:and(over-6, over-8)
punct(disaster-4, ,-9)
mark(whips-13, as-10)
det(camera-12, the-11)
nsubj(whips-13, camera-12)
advcl(disaster-4, whips-13)
compound:prt(whips-13, around-14)
case(pace-18, at-15)
det(pace-18, a-16)
amod(pace-18, hyperanimated-17)
nmod:at(whips-13, pace-18)
punct(escapes-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#disaster

escape :: Engineers intend to introduce deliberate flaws into two of the motor 's joints to prove that even with these defects , the redesigned motor has enough safety features to ensure that hot gases wo n't escape from it ./.
nsubj(intend-2, Engineers-1)
nsubj:xsubj(introduce-4, Engineers-1)
root(ROOT-0, intend-2)
mark(introduce-4, to-3)
xcomp(intend-2, introduce-4)
amod(flaws-6, deliberate-5)
dobj(introduce-4, flaws-6)
case(two-8, into-7)
nmod:into(introduce-4, two-8)
case(joints-13, of-9)
det(motor-11, the-10)
nmod:poss(joints-13, motor-11)
case(motor-11, 's-12)
nmod:of(two-8, joints-13)
mark(prove-15, to-14)
advcl(introduce-4, prove-15)
mark(has-25, that-16)
advmod(defects-20, even-17)
case(defects-20, with-18)
det(defects-20, these-19)
nmod:with(has-25, defects-20)
punct(has-25, ,-21)
det(motor-24, the-22)
amod(motor-24, redesigned-23)
nsubj(has-25, motor-24)
ccomp(prove-15, has-25)
advmod(features-28, enough-26)
compound(features-28, safety-27)
dobj(has-25, features-28)
mark(ensure-30, to-29)
acl(features-28, ensure-30)
mark(escape-36, that-31)
amod(gases-33, hot-32)
nsubj(escape-36, gases-33)
aux(escape-36, wo-34)
neg(escape-36, n't-35)
ccomp(ensure-30, escape-36)
case(it-38, from-37)
nmod:from(escape-36, it-38)
punct(intend-2, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#gases

escape :: The leader of a failed coup in August , who escaped from a Manila prison Saturday , called on his supporters in the military to `` act and act boldly . ''/''
det(leader-2, The-1)
root(ROOT-0, leader-2)
case(coup-6, of-3)
det(coup-6, a-4)
amod(coup-6, failed-5)
nmod:of(leader-2, coup-6)
nsubj(escaped-11, coup-6)
case(August-8, in-7)
nmod:in(coup-6, August-8)
punct(coup-6, ,-9)
ref(coup-6, who-10)
acl:relcl(coup-6, escaped-11)
case(prison-15, from-12)
det(prison-15, a-13)
compound(prison-15, Manila-14)
nmod:from(escaped-11, prison-15)
nmod:tmod(escaped-11, Saturday-16)
punct(escaped-11, ,-17)
dep(escaped-11, called-18)
case(supporters-21, on-19)
nmod:poss(supporters-21, his-20)
nmod:on(called-18, supporters-21)
case(military-24, in-22)
det(military-24, the-23)
nmod:in(called-18, military-24)
mark(act-27, to-25)
punct(act-27, ``-26)
xcomp(called-18, act-27)
cc(act-27, and-28)
xcomp(called-18, act-29)
conj:and(act-27, act-29)
advmod(act-29, boldly-30)
punct(leader-2, .-31)
punct(leader-2, ''-32)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: escape#coup

escape :: All of this took the extraordinary patience and determination of a man who escaped from a German prison camp on his third try and was elected president , also on his third try , after 23 years in opposition ./.
nsubj(took-4, All-1)
case(this-3, of-2)
nmod:of(All-1, this-3)
root(ROOT-0, took-4)
det(patience-7, the-5)
amod(patience-7, extraordinary-6)
dobj(took-4, patience-7)
cc(patience-7, and-8)
dobj(took-4, determination-9)
conj:and(patience-7, determination-9)
case(man-12, of-10)
det(man-12, a-11)
nmod:of(patience-7, man-12)
nsubj(escaped-14, man-12)
nsubjpass(elected-26, man-12)
ref(man-12, who-13)
acl:relcl(man-12, escaped-14)
case(camp-19, from-15)
det(camp-19, a-16)
amod(camp-19, German-17)
compound(camp-19, prison-18)
nmod:from(escaped-14, camp-19)
case(try-23, on-20)
nmod:poss(try-23, his-21)
amod(try-23, third-22)
nmod:on(escaped-14, try-23)
cc(escaped-14, and-24)
auxpass(elected-26, was-25)
acl:relcl(man-12, elected-26)
conj:and(escaped-14, elected-26)
xcomp(elected-26, president-27)
punct(took-4, ,-28)
advmod(try-33, also-29)
case(try-33, on-30)
nmod:poss(try-33, his-31)
amod(try-33, third-32)
nmod:on(took-4, try-33)
punct(took-4, ,-34)
case(years-37, after-35)
nummod(years-37, 23-36)
nmod:after(took-4, years-37)
case(opposition-39, in-38)
nmod:in(years-37, opposition-39)
punct(took-4, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#man

escape :: The leader of a failed coup in August , who escaped from a Manila prison Saturday , called on his supporters in the military to `` act and act boldly . ''/''
det(leader-2, The-1)
root(ROOT-0, leader-2)
case(coup-6, of-3)
det(coup-6, a-4)
amod(coup-6, failed-5)
nmod:of(leader-2, coup-6)
nsubj(escaped-11, coup-6)
case(August-8, in-7)
nmod:in(coup-6, August-8)
punct(coup-6, ,-9)
ref(coup-6, who-10)
acl:relcl(coup-6, escaped-11)
case(prison-15, from-12)
det(prison-15, a-13)
compound(prison-15, Manila-14)
nmod:from(escaped-11, prison-15)
nmod:tmod(escaped-11, Saturday-16)
punct(escaped-11, ,-17)
dep(escaped-11, called-18)
case(supporters-21, on-19)
nmod:poss(supporters-21, his-20)
nmod:on(called-18, supporters-21)
case(military-24, in-22)
det(military-24, the-23)
nmod:in(called-18, military-24)
mark(act-27, to-25)
punct(act-27, ``-26)
xcomp(called-18, act-27)
cc(act-27, and-28)
xcomp(called-18, act-29)
conj:and(act-27, act-29)
advmod(act-29, boldly-30)
punct(leader-2, .-31)
punct(leader-2, ''-32)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: escape#coup

escape :: All agree that the state must diversify its industrial base to escape the recently detrimental reliance on oil , said Ron Jones , chairman of the New Orleans Business Council and president of Louisiana Coca Cola Bottling Ltd ./.
nsubj(agree-2, All-1)
ccomp(said-20, agree-2)
mark(diversify-7, that-3)
det(state-5, the-4)
nsubj(diversify-7, state-5)
aux(diversify-7, must-6)
ccomp(agree-2, diversify-7)
nmod:poss(base-10, its-8)
amod(base-10, industrial-9)
dobj(diversify-7, base-10)
mark(escape-12, to-11)
advcl(diversify-7, escape-12)
det(reliance-16, the-13)
advmod(detrimental-15, recently-14)
amod(reliance-16, detrimental-15)
dobj(escape-12, reliance-16)
case(oil-18, on-17)
nmod:on(reliance-16, oil-18)
punct(said-20, ,-19)
root(ROOT-0, said-20)
compound(Jones-22, Ron-21)
nsubj(said-20, Jones-22)
punct(Jones-22, ,-23)
appos(Jones-22, chairman-24)
case(Council-30, of-25)
det(Council-30, the-26)
compound(Council-30, New-27)
compound(Council-30, Orleans-28)
compound(Council-30, Business-29)
nmod:of(chairman-24, Council-30)
cc(chairman-24, and-31)
appos(Jones-22, president-32)
conj:and(chairman-24, president-32)
case(Cola-36, of-33)
compound(Cola-36, Louisiana-34)
compound(Cola-36, Coca-35)
nmod:of(president-32, Cola-36)
compound(Ltd-38, Bottling-37)
dep(Cola-36, Ltd-38)
punct(said-20, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#reliance

escape :: Kimberlon , the costume maker , tried generic packaging to escape the seasonal trap , even eliminating the word Halloween ./.
nsubj(tried-7, Kimberlon-1)
punct(Kimberlon-1, ,-2)
det(maker-5, the-3)
compound(maker-5, costume-4)
appos(Kimberlon-1, maker-5)
punct(Kimberlon-1, ,-6)
root(ROOT-0, tried-7)
amod(packaging-9, generic-8)
dobj(tried-7, packaging-9)
nsubj:xsubj(escape-11, packaging-9)
mark(escape-11, to-10)
xcomp(tried-7, escape-11)
det(trap-14, the-12)
amod(trap-14, seasonal-13)
dobj(escape-11, trap-14)
punct(escape-11, ,-15)
advmod(eliminating-17, even-16)
advcl(escape-11, eliminating-17)
det(Halloween-20, the-18)
compound(Halloween-20, word-19)
dobj(eliminating-17, Halloween-20)
punct(tried-7, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#trap

escape :: However , in her 17-page dissent , federal Judge Carolyn Dineen King said the case raised sensitive issues of international law but that `` U.S. employers should not be allowed to escape liability for discrimination by cloaking themselves in a conveniently acquired concern for the integrity of the sovereignty of foreign states . ''/''
advmod(said-13, However-1)
punct(said-13, ,-2)
case(dissent-6, in-3)
nmod:poss(dissent-6, her-4)
amod(dissent-6, 17-page-5)
nmod:in(said-13, dissent-6)
punct(said-13, ,-7)
amod(King-12, federal-8)
compound(King-12, Judge-9)
compound(King-12, Carolyn-10)
compound(King-12, Dineen-11)
nsubj(said-13, King-12)
root(ROOT-0, said-13)
det(case-15, the-14)
nsubj(raised-16, case-15)
dep(said-13, raised-16)
amod(issues-18, sensitive-17)
dobj(raised-16, issues-18)
case(law-21, of-19)
amod(law-21, international-20)
nmod:of(issues-18, law-21)
cc(raised-16, but-22)
mark(allowed-30, that-23)
punct(allowed-30, ``-24)
compound(employers-26, U.S.-25)
nsubjpass(allowed-30, employers-26)
nsubj:xsubj(escape-32, employers-26)
aux(allowed-30, should-27)
neg(allowed-30, not-28)
auxpass(allowed-30, be-29)
dep(said-13, allowed-30)
conj:but(raised-16, allowed-30)
mark(escape-32, to-31)
xcomp(allowed-30, escape-32)
dobj(escape-32, liability-33)
case(discrimination-35, for-34)
nmod:for(liability-33, discrimination-35)
mark(cloaking-37, by-36)
advcl(escape-32, cloaking-37)
dobj(cloaking-37, themselves-38)
case(concern-43, in-39)
det(concern-43, a-40)
advmod(acquired-42, conveniently-41)
amod(concern-43, acquired-42)
nmod:in(cloaking-37, concern-43)
case(integrity-46, for-44)
det(integrity-46, the-45)
nmod:for(concern-43, integrity-46)
case(sovereignty-49, of-47)
det(sovereignty-49, the-48)
nmod:of(integrity-46, sovereignty-49)
case(states-52, of-50)
amod(states-52, foreign-51)
nmod:of(sovereignty-49, states-52)
punct(said-13, .-53)
punct(said-13, ''-54)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: escape#liability

escape :: At the same time , the quest for distinction increasingly includes details -- some of which may escape the average driver ./.
case(time-4, At-1)
det(time-4, the-2)
amod(time-4, same-3)
nmod:at(includes-11, time-4)
punct(includes-11, ,-5)
det(quest-7, the-6)
nsubj(includes-11, quest-7)
case(distinction-9, for-8)
nmod:for(quest-7, distinction-9)
advmod(includes-11, increasingly-10)
root(ROOT-0, includes-11)
dobj(includes-11, details-12)
punct(details-12, ---13)
nsubj(escape-18, some-14)
case(which-16, of-15)
nmod:of(some-14, which-16)
aux(escape-18, may-17)
dep(details-12, escape-18)
det(driver-21, the-19)
amod(driver-21, average-20)
dobj(escape-18, driver-21)
punct(includes-11, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#driver

escape :: One clue will be that the Idaho fescue , blue bunch wheat grass and pine grass growing in fields where fire returned nutrients to the soil will be as much as a foot taller than the meadows that escaped the flames ./.
nummod(clue-2, One-1)
nsubj(be-4, clue-2)
aux(be-4, will-3)
root(ROOT-0, be-4)
mark(much-30, that-5)
det(fescue-8, the-6)
compound(fescue-8, Idaho-7)
nsubj(much-30, fescue-8)
punct(fescue-8, ,-9)
amod(grass-13, blue-10)
compound(grass-13, bunch-11)
compound(grass-13, wheat-12)
conj:and(fescue-8, grass-13)
nsubj(much-30, grass-13)
cc(fescue-8, and-14)
conj:and(fescue-8, pine-15)
nsubj(much-30, pine-15)
dobj(pine-15, grass-16)
acl(grass-16, growing-17)
case(fields-19, in-18)
nmod:in(growing-17, fields-19)
advmod(returned-22, where-20)
nsubj(returned-22, fire-21)
acl:relcl(fields-19, returned-22)
dobj(returned-22, nutrients-23)
case(soil-26, to-24)
det(soil-26, the-25)
nmod:to(returned-22, soil-26)
aux(much-30, will-27)
cop(much-30, be-28)
advmod(much-30, as-29)
ccomp(be-4, much-30)
case(foot-33, as-31)
det(foot-33, a-32)
nmod:as(much-30, foot-33)
amod(foot-33, taller-34)
case(meadows-37, than-35)
det(meadows-37, the-36)
nmod:than(taller-34, meadows-37)
nsubj(escaped-39, meadows-37)
ref(meadows-37, that-38)
acl:relcl(meadows-37, escaped-39)
det(flames-41, the-40)
dobj(escaped-39, flames-41)
punct(be-4, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#flames

escape :: A plot has taken over St. Louis , from which no citizen , not the city 's ghetto slumlords nor its CEOs , can escape ./.
det(plot-2, A-1)
nsubj(taken-4, plot-2)
aux(taken-4, has-3)
root(ROOT-0, taken-4)
compound:prt(taken-4, over-5)
compound(Louis-7, St.-6)
dobj(taken-4, Louis-7)
nmod:from(escape-25, Louis-7)
punct(Louis-7, ,-8)
case(which-10, from-9)
ref(Louis-7, which-10)
neg(citizen-12, no-11)
nsubj(escape-25, citizen-12)
punct(citizen-12, ,-13)
neg(slumlords-19, not-14)
det(city-16, the-15)
nmod:poss(slumlords-19, city-16)
case(city-16, 's-17)
compound(slumlords-19, ghetto-18)
appos(citizen-12, slumlords-19)
cc(slumlords-19, nor-20)
nmod:poss(CEOs-22, its-21)
appos(citizen-12, CEOs-22)
conj:nor(slumlords-19, CEOs-22)
punct(citizen-12, ,-23)
aux(escape-25, can-24)
acl:relcl(Louis-7, escape-25)
punct(taken-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#citizen

escape :: Brian J. Luedtke , a technical analyst at Piper , Jaffray & Hopwood , Minneapolis , said he believes investors need further evidence about the economy 's direction before the market will be able to escape from its recent malaise ./.
compound(Luedtke-3, Brian-1)
compound(Luedtke-3, J.-2)
nsubj(said-17, Luedtke-3)
punct(Luedtke-3, ,-4)
det(analyst-7, a-5)
amod(analyst-7, technical-6)
appos(Luedtke-3, analyst-7)
case(Piper-9, at-8)
nmod:at(analyst-7, Piper-9)
punct(Piper-9, ,-10)
nmod:at(analyst-7, Jaffray-11)
conj:&(Piper-9, Jaffray-11)
cc(Piper-9, &-12)
nmod:at(analyst-7, Hopwood-13)
conj:&(Piper-9, Hopwood-13)
punct(Piper-9, ,-14)
appos(Piper-9, Minneapolis-15)
punct(Luedtke-3, ,-16)
root(ROOT-0, said-17)
nsubj(believes-19, he-18)
ccomp(said-17, believes-19)
nsubj(need-21, investors-20)
ccomp(believes-19, need-21)
amod(evidence-23, further-22)
dobj(need-21, evidence-23)
case(direction-28, about-24)
det(economy-26, the-25)
nmod:poss(direction-28, economy-26)
case(economy-26, 's-27)
nmod:about(evidence-23, direction-28)
mark(able-34, before-29)
det(market-31, the-30)
nsubj(able-34, market-31)
nsubj:xsubj(escape-36, market-31)
aux(able-34, will-32)
cop(able-34, be-33)
acl(direction-28, able-34)
mark(escape-36, to-35)
xcomp(able-34, escape-36)
case(malaise-40, from-37)
nmod:poss(malaise-40, its-38)
amod(malaise-40, recent-39)
nmod:from(escape-36, malaise-40)
punct(said-17, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#market

escape :: But Mr. Mulroney is arguing that Canada has escaped the most virulent forms of U.S. protectionism ./.
cc(arguing-5, But-1)
compound(Mulroney-3, Mr.-2)
nsubj(arguing-5, Mulroney-3)
aux(arguing-5, is-4)
root(ROOT-0, arguing-5)
mark(escaped-9, that-6)
nsubj(escaped-9, Canada-7)
aux(escaped-9, has-8)
ccomp(arguing-5, escaped-9)
det(forms-13, the-10)
advmod(virulent-12, most-11)
amod(forms-13, virulent-12)
dobj(escaped-9, forms-13)
case(protectionism-16, of-14)
compound(protectionism-16, U.S.-15)
nmod:of(forms-13, protectionism-16)
punct(arguing-5, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#forms

escape :: Young Jean escaped her family into literature and into a fast crowd she found at the University of Colorado ./.
amod(Jean-2, Young-1)
nsubj(escaped-3, Jean-2)
nsubj(escaped-3', Jean-2)
root(ROOT-0, escaped-3)
conj:and(escaped-3, escaped-3')
nmod:poss(family-5, her-4)
dobj(escaped-3, family-5)
case(literature-7, into-6)
nmod:into(escaped-3, literature-7)
cc(escaped-3, and-8)
case(crowd-12, into-9)
det(crowd-12, a-10)
amod(crowd-12, fast-11)
nmod:into(escaped-3', crowd-12)
nsubj(found-14, she-13)
acl:relcl(crowd-12, found-14)
case(University-17, at-15)
det(University-17, the-16)
nmod:at(found-14, University-17)
case(Colorado-19, of-18)
nmod:of(University-17, Colorado-19)
punct(escaped-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#family

escape :: Adm. Hayward 's case , which has escaped public notice since it started in 1985 , is n't part of the current nationwide investigation of Pentagon corruption and bid-rigging ./.
compound(Hayward-2, Adm.-1)
nmod:poss(case-4, Hayward-2)
case(Hayward-2, 's-3)
nsubj(escaped-8, case-4)
nsubj(part-19, case-4)
punct(case-4, ,-5)
ref(case-4, which-6)
aux(escaped-8, has-7)
acl:relcl(case-4, escaped-8)
amod(notice-10, public-9)
dobj(escaped-8, notice-10)
mark(started-13, since-11)
nsubj(started-13, it-12)
advcl(escaped-8, started-13)
case(1985-15, in-14)
nmod:in(started-13, 1985-15)
punct(case-4, ,-16)
cop(part-19, is-17)
neg(part-19, n't-18)
root(ROOT-0, part-19)
case(investigation-24, of-20)
det(investigation-24, the-21)
amod(investigation-24, current-22)
amod(investigation-24, nationwide-23)
nmod:of(part-19, investigation-24)
case(corruption-27, of-25)
compound(corruption-27, Pentagon-26)
nmod:of(investigation-24, corruption-27)
cc(corruption-27, and-28)
nmod:of(investigation-24, bid-rigging-29)
conj:and(corruption-27, bid-rigging-29)
punct(part-19, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#notice

escape :: Mr. Tennyson said it 's unfair that foreign cigarette manufacturers who advertise through U.S. magazines will escape the ban ./.
compound(Tennyson-2, Mr.-1)
nsubj(said-3, Tennyson-2)
root(ROOT-0, said-3)
nsubj(unfair-6, it-4)
cop(unfair-6, 's-5)
ccomp(said-3, unfair-6)
mark(escape-17, that-7)
amod(manufacturers-10, foreign-8)
compound(manufacturers-10, cigarette-9)
nsubj(advertise-12, manufacturers-10)
nsubj(escape-17, manufacturers-10)
ref(manufacturers-10, who-11)
acl:relcl(manufacturers-10, advertise-12)
case(magazines-15, through-13)
compound(magazines-15, U.S.-14)
nmod:through(advertise-12, magazines-15)
aux(escape-17, will-16)
ccomp(unfair-6, escape-17)
det(ban-19, the-18)
dobj(escape-17, ban-19)
punct(said-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#ban

escape :: The arrangement would break new legal ground as a means for an insurer to escape its own potential liability by piggybacking on the Chapter 11 reorganization of a former policyholder ./.
det(arrangement-2, The-1)
nsubj(break-4, arrangement-2)
aux(break-4, would-3)
root(ROOT-0, break-4)
amod(ground-7, new-5)
amod(ground-7, legal-6)
dobj(break-4, ground-7)
case(means-10, as-8)
det(means-10, a-9)
nmod:as(break-4, means-10)
mark(escape-15, for-11)
det(insurer-13, an-12)
nsubj(escape-15, insurer-13)
mark(escape-15, to-14)
acl(means-10, escape-15)
nmod:poss(liability-19, its-16)
amod(liability-19, own-17)
amod(liability-19, potential-18)
dobj(escape-15, liability-19)
mark(piggybacking-21, by-20)
advcl(escape-15, piggybacking-21)
case(reorganization-26, on-22)
det(reorganization-26, the-23)
compound(reorganization-26, Chapter-24)
nummod(reorganization-26, 11-25)
nmod:on(piggybacking-21, reorganization-26)
case(policyholder-30, of-27)
det(policyholder-30, a-28)
amod(policyholder-30, former-29)
nmod:of(reorganization-26, policyholder-30)
punct(break-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#liability

escape :: Money that escapes the pockets of bureaucrats disappears into rat holes ./.
nsubj(escapes-3, Money-1)
nsubj(disappears-8, Money-1)
ref(Money-1, that-2)
acl:relcl(Money-1, escapes-3)
det(pockets-5, the-4)
dobj(escapes-3, pockets-5)
case(bureaucrats-7, of-6)
nmod:of(pockets-5, bureaucrats-7)
root(ROOT-0, disappears-8)
case(holes-11, into-9)
compound(holes-11, rat-10)
nmod:into(disappears-8, holes-11)
punct(disappears-8, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#pockets

escape :: An owner can escape the sanction only by demonstrating that he neither knew nor had reason to know that any drugs were on the conveyance ./.
det(owner-2, An-1)
nsubj(escape-4, owner-2)
aux(escape-4, can-3)
root(ROOT-0, escape-4)
det(sanction-6, the-5)
dobj(escape-4, sanction-6)
advmod(demonstrating-9, only-7)
mark(demonstrating-9, by-8)
advcl(escape-4, demonstrating-9)
mark(knew-13, that-10)
nsubj(knew-13, he-11)
nsubj(had-15, he-11)
advmod(knew-13, neither-12)
ccomp(demonstrating-9, knew-13)
cc(knew-13, nor-14)
ccomp(demonstrating-9, had-15)
conj:nor(knew-13, had-15)
dobj(had-15, reason-16)
mark(know-18, to-17)
acl(reason-16, know-18)
mark(conveyance-25, that-19)
det(drugs-21, any-20)
nsubj(conveyance-25, drugs-21)
cop(conveyance-25, were-22)
case(conveyance-25, on-23)
det(conveyance-25, the-24)
ccomp(know-18, conveyance-25)
punct(escape-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#sanction

escape :: Among other things , the recently planted soybean and corn crop in the Midwest could escape unscathed if rains return shortly ./.
case(things-3, Among-1)
amod(things-3, other-2)
nmod:among(escape-16, things-3)
punct(escape-16, ,-4)
det(soybean-8, the-5)
advmod(planted-7, recently-6)
amod(soybean-8, planted-7)
nsubj(escape-16, soybean-8)
cc(soybean-8, and-9)
compound(crop-11, corn-10)
conj:and(soybean-8, crop-11)
nsubj(escape-16, crop-11)
case(Midwest-14, in-12)
det(Midwest-14, the-13)
nmod:in(soybean-8, Midwest-14)
aux(escape-16, could-15)
root(ROOT-0, escape-16)
xcomp(escape-16, unscathed-17)
mark(return-20, if-18)
nsubj(return-20, rains-19)
advcl(escape-16, return-20)
advmod(return-20, shortly-21)
punct(escape-16, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#soybean

escape :: And so long as one-third of the black population is mired in poverty , blacks will not hear of dismantling programs that enabled so many within their ranks to escape poverty in the first place ./.
cc(hear-18, And-1)
advmod(long-3, so-2)
advmod(hear-18, long-3)
mark(mired-11, as-4)
nsubjpass(mired-11, one-third-5)
case(population-9, of-6)
det(population-9, the-7)
amod(population-9, black-8)
nmod:of(one-third-5, population-9)
auxpass(mired-11, is-10)
advcl(long-3, mired-11)
case(poverty-13, in-12)
nmod:in(mired-11, poverty-13)
punct(hear-18, ,-14)
nsubj(hear-18, blacks-15)
aux(hear-18, will-16)
neg(hear-18, not-17)
root(ROOT-0, hear-18)
case(programs-21, of-19)
amod(programs-21, dismantling-20)
nmod:of(hear-18, programs-21)
nsubj(enabled-23, programs-21)
ref(programs-21, that-22)
acl:relcl(programs-21, enabled-23)
advmod(many-25, so-24)
dobj(enabled-23, many-25)
nsubj:xsubj(escape-30, many-25)
case(ranks-28, within-26)
nmod:poss(ranks-28, their-27)
nmod:within(many-25, ranks-28)
mark(escape-30, to-29)
xcomp(enabled-23, escape-30)
dobj(escape-30, poverty-31)
case(place-35, in-32)
det(place-35, the-33)
amod(place-35, first-34)
nmod:in(escape-30, place-35)
punct(hear-18, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#poverty

escape :: The escaped convict 's name is not Willie Horton , but Joseph Subilosky ./.
det(convict-3, The-1)
amod(convict-3, escaped-2)
nmod:poss(name-5, convict-3)
case(convict-3, 's-4)
nsubj(Horton-9, name-5)
cop(Horton-9, is-6)
neg(Horton-9, not-7)
compound(Horton-9, Willie-8)
root(ROOT-0, Horton-9)
punct(Horton-9, ,-10)
cc(Horton-9, but-11)
compound(Subilosky-13, Joseph-12)
conj:but(Horton-9, Subilosky-13)
punct(Horton-9, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#convict

escape :: CO-OPS CONVERTING to condominiums can escape a tax on assets ./.
nsubj(escape-6, CO-OPS-1)
acl(CO-OPS-1, CONVERTING-2)
case(condominiums-4, to-3)
nmod:to(CONVERTING-2, condominiums-4)
aux(escape-6, can-5)
root(ROOT-0, escape-6)
det(tax-8, a-7)
dobj(escape-6, tax-8)
case(assets-10, on-9)
nmod:on(tax-8, assets-10)
punct(escape-6, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#tax

escape :: He escaped with only minor cuts ./.
nsubj(escaped-2, He-1)
root(ROOT-0, escaped-2)
case(cuts-6, with-3)
amod(cuts-6, only-4)
amod(cuts-6, minor-5)
nmod:with(escaped-2, cuts-6)
punct(escaped-2, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#he

escape :: Even Mr. MacKay ca n't escape the national party virus altogether , however ./.
advmod(MacKay-3, Even-1)
compound(MacKay-3, Mr.-2)
nsubj(escape-6, MacKay-3)
aux(escape-6, ca-4)
neg(escape-6, n't-5)
root(ROOT-0, escape-6)
det(virus-10, the-7)
compound(virus-10, national-8)
compound(virus-10, party-9)
dobj(escape-6, virus-10)
advmod(escape-6, altogether-11)
punct(escape-6, ,-12)
advmod(escape-6, however-13)
punct(escape-6, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#virus

escape :: Great Western Bank unveiled a bid to escape from the insolvent FSLIC and switch to the FDIC , which would be a blow to the thrift insurer ./.
compound(Bank-3, Great-1)
compound(Bank-3, Western-2)
nsubj(unveiled-4, Bank-3)
root(ROOT-0, unveiled-4)
det(bid-6, a-5)
dobj(unveiled-4, bid-6)
mark(escape-8, to-7)
acl(bid-6, escape-8)
case(FSLIC-12, from-9)
det(FSLIC-12, the-10)
amod(FSLIC-12, insolvent-11)
nmod:from(escape-8, FSLIC-12)
cc(FSLIC-12, and-13)
nmod:from(escape-8, switch-14)
conj:and(FSLIC-12, switch-14)
case(FDIC-17, to-15)
det(FDIC-17, the-16)
nmod:to(switch-14, FDIC-17)
nsubj(blow-23, FDIC-17)
punct(FDIC-17, ,-18)
ref(FDIC-17, which-19)
aux(blow-23, would-20)
cop(blow-23, be-21)
det(blow-23, a-22)
acl:relcl(FDIC-17, blow-23)
case(insurer-27, to-24)
det(insurer-27, the-25)
compound(insurer-27, thrift-26)
nmod:to(blow-23, insurer-27)
punct(unveiled-4, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#fslic

escape :: Last summer , escaping an unwanted takeover , USG effected a leveraged recapitalization ./.
amod(summer-2, Last-1)
nmod:tmod(effected-10, summer-2)
punct(effected-10, ,-3)
advcl(effected-10, escaping-4)
det(takeover-7, an-5)
amod(takeover-7, unwanted-6)
dobj(escaping-4, takeover-7)
punct(effected-10, ,-8)
nsubj(effected-10, USG-9)
root(ROOT-0, effected-10)
det(recapitalization-13, a-11)
amod(recapitalization-13, leveraged-12)
dobj(effected-10, recapitalization-13)
punct(effected-10, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#takeover

escape :: Fortunately for life on Earth , the nitrogen-oxygen atmosphere is relatively transparent to the long infrared waves coming off the sidewalks , soil and oceans , allowing the day 's solar heat to slowly escape to space ./.
advmod(transparent-12, Fortunately-1)
case(life-3, for-2)
nmod:for(Fortunately-1, life-3)
case(Earth-5, on-4)
nmod:on(life-3, Earth-5)
punct(transparent-12, ,-6)
det(atmosphere-9, the-7)
amod(atmosphere-9, nitrogen-oxygen-8)
nsubj(transparent-12, atmosphere-9)
cop(transparent-12, is-10)
advmod(transparent-12, relatively-11)
root(ROOT-0, transparent-12)
case(waves-17, to-13)
det(waves-17, the-14)
amod(waves-17, long-15)
amod(waves-17, infrared-16)
nmod:to(transparent-12, waves-17)
acl(waves-17, coming-18)
case(sidewalks-21, off-19)
det(sidewalks-21, the-20)
nmod:off(coming-18, sidewalks-21)
punct(waves-17, ,-22)
appos(waves-17, soil-23)
cc(soil-23, and-24)
appos(waves-17, oceans-25)
conj:and(soil-23, oceans-25)
punct(waves-17, ,-26)
acl(waves-17, allowing-27)
det(day-29, the-28)
nmod:poss(heat-32, day-29)
case(day-29, 's-30)
amod(heat-32, solar-31)
dobj(allowing-27, heat-32)
nsubj:xsubj(escape-35, heat-32)
mark(escape-35, to-33)
advmod(escape-35, slowly-34)
xcomp(allowing-27, escape-35)
case(space-37, to-36)
nmod:to(escape-35, space-37)
punct(transparent-12, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#heat

escape :: Your Sept. 22 editorial `` The Liberal Plantation '' hangs on a badly flawed premise: that workfare can lead to `` steady work '' and help poor people `` escape welfare and lead independent lives . ''/''
nmod:poss(editorial-4, Your-1)
compound(editorial-4, Sept.-2)
nummod(editorial-4, 22-3)
nsubj(hangs-10, editorial-4)
punct(editorial-4, ``-5)
det(Plantation-8, The-6)
amod(Plantation-8, Liberal-7)
dep(editorial-4, Plantation-8)
punct(editorial-4, ''-9)
root(ROOT-0, hangs-10)
case(premise-15, on-11)
det(premise-15, a-12)
advmod(flawed-14, badly-13)
amod(premise-15, flawed-14)
nmod:on(hangs-10, premise-15)
punct(hangs-10, :-16)
mark(lead-20, that-17)
nsubj(lead-20, workfare-18)
nsubj(help-27, workfare-18)
aux(lead-20, can-19)
ccomp(hangs-10, lead-20)
case(work-24, to-21)
punct(work-24, ``-22)
amod(work-24, steady-23)
nmod:to(lead-20, work-24)
punct(work-24, ''-25)
cc(lead-20, and-26)
ccomp(hangs-10, help-27)
conj:and(lead-20, help-27)
amod(people-29, poor-28)
dobj(help-27, people-29)
punct(welfare-32, ``-30)
compound(welfare-32, escape-31)
dep(people-29, welfare-32)
cc(welfare-32, and-33)
compound(lives-36, lead-34)
amod(lives-36, independent-35)
dep(people-29, lives-36)
conj:and(welfare-32, lives-36)
punct(hangs-10, .-37)
punct(hangs-10, ''-38)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

escape :: Frightened , I tried to escape this hybrid of Samir and Othman , but the faster I ran , the faster it pursued me ./.
advmod(tried-4, Frightened-1)
punct(tried-4, ,-2)
nsubj(tried-4, I-3)
nsubj:xsubj(escape-6, I-3)
root(ROOT-0, tried-4)
mark(escape-6, to-5)
xcomp(tried-4, escape-6)
det(hybrid-8, this-7)
dobj(escape-6, hybrid-8)
case(Samir-10, of-9)
nmod:of(hybrid-8, Samir-10)
cc(Samir-10, and-11)
nmod:of(hybrid-8, Othman-12)
conj:and(Samir-10, Othman-12)
punct(tried-4, ,-13)
cc(tried-4, but-14)
det(ran-18, the-15)
advmod(ran-18, faster-16)
nsubj(ran-18, I-17)
conj:but(tried-4, ran-18)
punct(ran-18, ,-19)
det(faster-21, the-20)
appos(ran-18, faster-21)
nsubj(pursued-23, it-22)
acl:relcl(faster-21, pursued-23)
dobj(pursued-23, me-24)
punct(tried-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#samir

escape :: Other regions should escape relatively unscathed , she says ./.
amod(regions-2, Other-1)
nsubj(escape-4, regions-2)
aux(escape-4, should-3)
ccomp(says-9, escape-4)
advmod(unscathed-6, relatively-5)
xcomp(escape-4, unscathed-6)
punct(says-9, ,-7)
nsubj(says-9, she-8)
root(ROOT-0, says-9)
punct(says-9, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#regions

escape :: He also refused both domestic and U.S. calls to step aside for a compromise plebiscite candidate , who might have benefited from Chile 's economic boom while escaping the stigma of the Pinochet regime 's appalling humanrights record ./.
nsubj(refused-3, He-1)
advmod(refused-3, also-2)
root(ROOT-0, refused-3)
cc:preconj(domestic-5, both-4)
nsubj(calls-8, domestic-5)
nsubj:xsubj(step-10, domestic-5)
cc(domestic-5, and-6)
conj:and(domestic-5, U.S.-7)
nsubj(calls-8, U.S.-7)
nsubj:xsubj(step-10, U.S.-7)
ccomp(refused-3, calls-8)
mark(step-10, to-9)
xcomp(calls-8, step-10)
advmod(step-10, aside-11)
case(candidate-16, for-12)
det(candidate-16, a-13)
compound(candidate-16, compromise-14)
compound(candidate-16, plebiscite-15)
nmod:for(step-10, candidate-16)
nsubj(benefited-21, candidate-16)
punct(candidate-16, ,-17)
ref(candidate-16, who-18)
aux(benefited-21, might-19)
aux(benefited-21, have-20)
acl:relcl(candidate-16, benefited-21)
case(boom-26, from-22)
nmod:poss(boom-26, Chile-23)
case(Chile-23, 's-24)
amod(boom-26, economic-25)
nmod:from(benefited-21, boom-26)
mark(escaping-28, while-27)
advcl(benefited-21, escaping-28)
det(stigma-30, the-29)
dobj(escaping-28, stigma-30)
case(record-38, of-31)
det(regime-34, the-32)
compound(regime-34, Pinochet-33)
nmod:poss(record-38, regime-34)
case(regime-34, 's-35)
amod(record-38, appalling-36)
compound(record-38, humanrights-37)
nmod:of(stigma-30, record-38)
punct(refused-3, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#record

escape :: Among the problems that can be addressed , and perhaps resolved , at the joint session is the output currently escaping OPEC 's quotas ./.
case(problems-3, Among-1)
det(problems-3, the-2)
nsubjpass(addressed-7, problems-3)
nmod:among(output-19, problems-3)
ref(problems-3, that-4)
aux(addressed-7, can-5)
auxpass(addressed-7, be-6)
acl:relcl(problems-3, addressed-7)
punct(resolved-11, ,-8)
cc(resolved-11, and-9)
advmod(resolved-11, perhaps-10)
parataxis(output-19, resolved-11)
punct(resolved-11, ,-12)
case(session-16, at-13)
det(session-16, the-14)
amod(session-16, joint-15)
nmod:at(resolved-11, session-16)
cop(output-19, is-17)
det(output-19, the-18)
root(ROOT-0, output-19)
advmod(escaping-21, currently-20)
acl(output-19, escaping-21)
nmod:poss(quotas-24, OPEC-22)
case(OPEC-22, 's-23)
dobj(escaping-21, quotas-24)
punct(output-19, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#quotas

escape :: As a result , Mr. Bhirud said , the market may have trouble escaping from its recent trading range ./.
case(result-3, As-1)
det(result-3, a-2)
nmod:as(have-12, result-3)
punct(said-7, ,-4)
compound(Bhirud-6, Mr.-5)
nsubj(said-7, Bhirud-6)
parataxis(have-12, said-7)
punct(said-7, ,-8)
det(market-10, the-9)
nsubj(have-12, market-10)
aux(have-12, may-11)
root(ROOT-0, have-12)
dobj(have-12, trouble-13)
dep(trouble-13, escaping-14)
case(range-19, from-15)
nmod:poss(range-19, its-16)
amod(range-19, recent-17)
compound(range-19, trading-18)
nmod:from(escaping-14, range-19)
punct(have-12, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#range

escape :: Both France and Italy want to escape the slow-growth effects of Bundesbank dominance of the EMS. West Germans , however , believes it is they that must adapt by showing a greater willingness to employ restrictive monetary and fiscal policies when these are needed to maintain currency stability ./.
cc:preconj(France-2, Both-1)
nsubj(want-5, France-2)
nsubj:xsubj(escape-7, France-2)
cc(France-2, and-3)
conj:and(France-2, Italy-4)
nsubj(want-5, Italy-4)
nsubj:xsubj(escape-7, Italy-4)
root(ROOT-0, want-5)
mark(escape-7, to-6)
xcomp(want-5, escape-7)
det(effects-10, the-8)
compound(effects-10, slow-growth-9)
dobj(escape-7, effects-10)
case(dominance-13, of-11)
compound(dominance-13, Bundesbank-12)
nmod:of(effects-10, dominance-13)
case(EMS-16, of-14)
det(EMS-16, the-15)
nmod:of(dominance-13, EMS-16)
punct(want-5, .-17)
compound(Germans-2, West-1)
nsubj(believes-6, Germans-2)
punct(believes-6, ,-3)
advmod(believes-6, however-4)
punct(believes-6, ,-5)
root(ROOT-0, believes-6)
nsubj(is-8, it-7)
ccomp(believes-6, is-8)
nsubj(is-8, they-9)
nsubj(adapt-12, they-9)
ref(they-9, that-10)
aux(adapt-12, must-11)
acl:relcl(they-9, adapt-12)
mark(showing-14, by-13)
advcl(adapt-12, showing-14)
det(willingness-17, a-15)
amod(willingness-17, greater-16)
dobj(showing-14, willingness-17)
mark(employ-19, to-18)
acl(willingness-17, employ-19)
amod(policies-24, restrictive-20)
amod(policies-24, monetary-21)
cc(monetary-21, and-22)
conj:and(monetary-21, fiscal-23)
amod(policies-24, fiscal-23)
dobj(employ-19, policies-24)
advmod(needed-28, when-25)
nsubjpass(needed-28, these-26)
nsubj:xsubj(maintain-30, these-26)
auxpass(needed-28, are-27)
advcl(employ-19, needed-28)
mark(maintain-30, to-29)
xcomp(needed-28, maintain-30)
compound(stability-32, currency-31)
dobj(maintain-30, stability-32)
punct(believes-6, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#effects

escape :: The study of 250 of the nation 's largest profit-making corporations found that only 16 escaped taxation last year , compared with 40 in 1986 and 39 in 1985 ./.
det(study-2, The-1)
nsubj(found-12, study-2)
case(250-4, of-3)
nmod:of(study-2, 250-4)
case(corporations-11, of-5)
det(nation-7, the-6)
nmod:poss(corporations-11, nation-7)
case(nation-7, 's-8)
amod(corporations-11, largest-9)
amod(corporations-11, profit-making-10)
nmod:of(250-4, corporations-11)
root(ROOT-0, found-12)
mark(escaped-16, that-13)
advmod(16-15, only-14)
nsubj(escaped-16, 16-15)
ccomp(found-12, escaped-16)
dobj(escaped-16, taxation-17)
amod(year-19, last-18)
nmod:tmod(escaped-16, year-19)
punct(escaped-16, ,-20)
case(40-23, compared-21)
mwe(compared-21, with-22)
advcl(escaped-16, 40-23)
case(1986-25, in-24)
nmod:in(40-23, 1986-25)
cc(40-23, and-26)
advcl(escaped-16, 39-27)
conj:and(40-23, 39-27)
case(1985-29, in-28)
nmod:in(39-27, 1985-29)
punct(found-12, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#taxation

escape :: The agreement appears to allow Wilson , a pork processor and producer , to escape the clutches of Doskocil Cos . , a Hutchinson , Kan . , maker of pizza toppings that has waged an aggressive takeover battle ./.
det(agreement-2, The-1)
nsubj(appears-3, agreement-2)
nsubj:xsubj(allow-5, agreement-2)
root(ROOT-0, appears-3)
mark(allow-5, to-4)
xcomp(appears-3, allow-5)
dobj(allow-5, Wilson-6)
nsubj:xsubj(escape-15, Wilson-6)
punct(Wilson-6, ,-7)
det(processor-10, a-8)
compound(processor-10, pork-9)
appos(Wilson-6, processor-10)
cc(processor-10, and-11)
appos(Wilson-6, producer-12)
conj:and(processor-10, producer-12)
punct(Wilson-6, ,-13)
mark(escape-15, to-14)
xcomp(allow-5, escape-15)
det(clutches-17, the-16)
dobj(escape-15, clutches-17)
case(Cos-20, of-18)
compound(Cos-20, Doskocil-19)
nmod:of(clutches-17, Cos-20)
punct(appears-3, .-21)
root(ROOT-0, ,-1)
root(,-1, a-2)
root(a-2, Hutchinson-3)
punct(Hutchinson-3, ,-4)
appos(Hutchinson-3, Kan-5)
punct(Hutchinson-3, .-6)
root(ROOT-0, ,-1)
root(,-1, maker-2)
case(toppings-5, of-3)
compound(toppings-5, pizza-4)
nmod:of(maker-2, toppings-5)
nsubj(waged-8, toppings-5)
ref(toppings-5, that-6)
aux(waged-8, has-7)
acl:relcl(toppings-5, waged-8)
det(battle-12, an-9)
amod(battle-12, aggressive-10)
compound(battle-12, takeover-11)
dobj(waged-8, battle-12)
punct(maker-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#clutches

escape :: Ne Win , however , saw that Burma escaped the Vietnam vortex ./.
nsubj(Win-2, Ne-1)
root(ROOT-0, Win-2)
punct(Win-2, ,-3)
advmod(Win-2, however-4)
punct(Win-2, ,-5)
dep(Win-2, saw-6)
mark(escaped-9, that-7)
nsubj(escaped-9, Burma-8)
ccomp(saw-6, escaped-9)
det(vortex-12, the-10)
compound(vortex-12, Vietnam-11)
dobj(escaped-9, vortex-12)
punct(Win-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#vortex

escape :: A new study of Vietnam veterans suggests that most escaped heavy exposure to the poison dioxin , even if they served as ground troops in areas extensively sprayed with the dioxin-containing herbicide Agent Orange ./.
det(study-3, A-1)
amod(study-3, new-2)
nsubj(suggests-7, study-3)
case(veterans-6, of-4)
compound(veterans-6, Vietnam-5)
nmod:of(study-3, veterans-6)
root(ROOT-0, suggests-7)
mark(escaped-10, that-8)
nsubj(escaped-10, most-9)
ccomp(suggests-7, escaped-10)
amod(exposure-12, heavy-11)
dobj(escaped-10, exposure-12)
case(dioxin-16, to-13)
det(dioxin-16, the-14)
compound(dioxin-16, poison-15)
nmod:to(exposure-12, dioxin-16)
punct(escaped-10, ,-17)
advmod(served-21, even-18)
mark(served-21, if-19)
nsubj(served-21, they-20)
advcl(escaped-10, served-21)
case(troops-24, as-22)
compound(troops-24, ground-23)
nmod:as(served-21, troops-24)
case(areas-26, in-25)
nmod:in(served-21, areas-26)
advmod(sprayed-28, extensively-27)
acl(areas-26, sprayed-28)
case(Orange-34, with-29)
det(Orange-34, the-30)
amod(Orange-34, dioxin-containing-31)
compound(Orange-34, herbicide-32)
compound(Orange-34, Agent-33)
nmod:with(sprayed-28, Orange-34)
punct(suggests-7, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#exposure

escape :: If the Federal Energy Regulatory Commission approves the plan , Panhandle will have escaped a total of about $ 4 billion in take-or-pay contract liabilities ./.
mark(approves-7, If-1)
det(Commission-6, the-2)
compound(Commission-6, Federal-3)
compound(Commission-6, Energy-4)
compound(Commission-6, Regulatory-5)
nsubj(approves-7, Commission-6)
advcl(escaped-14, approves-7)
det(plan-9, the-8)
dobj(approves-7, plan-9)
punct(escaped-14, ,-10)
nsubj(escaped-14, Panhandle-11)
aux(escaped-14, will-12)
aux(escaped-14, have-13)
root(ROOT-0, escaped-14)
det(total-16, a-15)
dobj(escaped-14, total-16)
case($-19, of-17)
advmod($-19, about-18)
nmod:of(total-16, $-19)
compound(billion-21, 4-20)
nummod($-19, billion-21)
case(liabilities-25, in-22)
amod(liabilities-25, take-or-pay-23)
compound(liabilities-25, contract-24)
nmod:in(total-16, liabilities-25)
punct(escaped-14, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#$

escape :: Before , a corporation owner could give heirs common stock to freeze asset values at that point for them ; future asset appreciation would escape estate tax , and the parent could keep control and income through preferred stock ./.
advmod(give-7, Before-1)
punct(give-7, ,-2)
det(owner-5, a-3)
compound(owner-5, corporation-4)
nsubj(give-7, owner-5)
aux(give-7, could-6)
root(ROOT-0, give-7)
iobj(give-7, heirs-8)
amod(stock-10, common-9)
dobj(give-7, stock-10)
mark(freeze-12, to-11)
acl(stock-10, freeze-12)
compound(values-14, asset-13)
dobj(freeze-12, values-14)
case(point-17, at-15)
det(point-17, that-16)
nmod:at(freeze-12, point-17)
case(them-19, for-18)
nmod:for(freeze-12, them-19)
punct(give-7, ;-20)
amod(appreciation-23, future-21)
compound(appreciation-23, asset-22)
nsubj(escape-25, appreciation-23)
aux(escape-25, would-24)
parataxis(give-7, escape-25)
compound(tax-27, estate-26)
dobj(escape-25, tax-27)
punct(escape-25, ,-28)
cc(escape-25, and-29)
det(parent-31, the-30)
nsubj(keep-33, parent-31)
aux(keep-33, could-32)
parataxis(give-7, keep-33)
conj:and(escape-25, keep-33)
dobj(keep-33, control-34)
cc(control-34, and-35)
dobj(keep-33, income-36)
conj:and(control-34, income-36)
case(stock-39, through-37)
amod(stock-39, preferred-38)
nmod:through(keep-33, stock-39)
punct(give-7, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#tax

escape :: As Jim Wells , head of the pesticide-use branch of the California Department of Food and Agriculture , notes , `` We can not escape one fact: we are living older , healthier and more mentally acute than we have ever lived in the history of mankind ./.
mark(notes-19, As-1)
compound(Wells-3, Jim-2)
nsubj(notes-19, Wells-3)
punct(Wells-3, ,-4)
appos(Wells-3, head-5)
case(branch-9, of-6)
det(branch-9, the-7)
amod(branch-9, pesticide-use-8)
nmod:of(head-5, branch-9)
case(Department-13, of-10)
det(Department-13, the-11)
compound(Department-13, California-12)
nmod:of(branch-9, Department-13)
case(Food-15, of-14)
nmod:of(Department-13, Food-15)
cc(Food-15, and-16)
nmod:of(Department-13, Agriculture-17)
conj:and(Food-15, Agriculture-17)
punct(Wells-3, ,-18)
advcl(escape-25, notes-19)
punct(escape-25, ,-20)
punct(escape-25, ``-21)
nsubj(escape-25, We-22)
aux(escape-25, can-23)
neg(escape-25, not-24)
root(ROOT-0, escape-25)
nummod(fact-27, one-26)
dobj(escape-25, fact-27)
punct(escape-25, :-28)
nsubj(living-31, we-29)
aux(living-31, are-30)
parataxis(escape-25, living-31)
advmod(living-31, older-32)
punct(older-32, ,-33)
advmod(living-31, healthier-34)
conj:and(older-32, healthier-34)
cc(older-32, and-35)
advmod(mentally-37, more-36)
advmod(acute-38, mentally-37)
advmod(living-31, acute-38)
conj:and(older-32, acute-38)
mark(lived-43, than-39)
nsubj(lived-43, we-40)
aux(lived-43, have-41)
advmod(lived-43, ever-42)
advcl(older-32, lived-43)
case(history-46, in-44)
det(history-46, the-45)
nmod:in(lived-43, history-46)
case(mankind-48, of-47)
nmod:of(history-46, mankind-48)
punct(escape-25, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#fact

escape :: Plunging into a market most investors are struggling to escape , Henley spends $ 600 million ./.
advcl(spends-13, Plunging-1)
case(market-4, into-2)
det(market-4, a-3)
nmod:into(Plunging-1, market-4)
amod(investors-6, most-5)
nsubj(struggling-8, investors-6)
nsubj:xsubj(escape-10, investors-6)
aux(struggling-8, are-7)
ccomp(Plunging-1, struggling-8)
mark(escape-10, to-9)
xcomp(struggling-8, escape-10)
punct(spends-13, ,-11)
nsubj(spends-13, Henley-12)
root(ROOT-0, spends-13)
dobj(spends-13, $-14)
compound(million-16, 600-15)
nummod($-14, million-16)
punct(spends-13, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#investors

escape :: Sugar tried to divorce itself from soybeans last week but could n't escape price declines as traders continued to play both markets ./.
nsubj(tried-2, Sugar-1)
nsubj:xsubj(divorce-4, Sugar-1)
nsubj(escape-13, Sugar-1)
root(ROOT-0, tried-2)
mark(divorce-4, to-3)
xcomp(tried-2, divorce-4)
dobj(divorce-4, itself-5)
case(soybeans-7, from-6)
nmod:from(divorce-4, soybeans-7)
amod(week-9, last-8)
nmod:tmod(tried-2, week-9)
cc(tried-2, but-10)
aux(escape-13, could-11)
neg(escape-13, n't-12)
conj:but(tried-2, escape-13)
compound(declines-15, price-14)
dobj(escape-13, declines-15)
mark(continued-18, as-16)
nsubj(continued-18, traders-17)
nsubj:xsubj(play-20, traders-17)
advcl(escape-13, continued-18)
mark(play-20, to-19)
xcomp(continued-18, play-20)
det(markets-22, both-21)
dobj(play-20, markets-22)
punct(tried-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#declines

escape :: The escaped gas can cause a problem if it mixes with moisture in the air , forming corrosive nitric acid ./.
det(gas-3, The-1)
amod(gas-3, escaped-2)
nsubj(cause-5, gas-3)
aux(cause-5, can-4)
root(ROOT-0, cause-5)
det(problem-7, a-6)
dobj(cause-5, problem-7)
mark(mixes-10, if-8)
nsubj(mixes-10, it-9)
advcl(cause-5, mixes-10)
case(moisture-12, with-11)
nmod:with(mixes-10, moisture-12)
case(air-15, in-13)
det(air-15, the-14)
nmod:in(mixes-10, air-15)
punct(mixes-10, ,-16)
advcl(mixes-10, forming-17)
amod(acid-20, corrosive-18)
amod(acid-20, nitric-19)
dobj(forming-17, acid-20)
punct(cause-5, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#gas

escape :: You may withdraw cash temporarily from an individual retirement account and escape a tax or penalty , if you roll it all over into another IRA in 60 days ./.
nsubj(withdraw-3, You-1)
nsubj(escape-12, You-1)
aux(withdraw-3, may-2)
root(ROOT-0, withdraw-3)
dobj(withdraw-3, cash-4)
advmod(withdraw-3, temporarily-5)
case(account-10, from-6)
det(account-10, an-7)
amod(account-10, individual-8)
compound(account-10, retirement-9)
nmod:from(withdraw-3, account-10)
cc(withdraw-3, and-11)
conj:and(withdraw-3, escape-12)
det(tax-14, a-13)
dobj(escape-12, tax-14)
cc(tax-14, or-15)
dobj(escape-12, penalty-16)
conj:or(tax-14, penalty-16)
punct(withdraw-3, ,-17)
mark(roll-20, if-18)
nsubj(roll-20, you-19)
advcl(withdraw-3, roll-20)
dobj(roll-20, it-21)
dep(over-23, all-22)
compound:prt(roll-20, over-23)
case(IRA-26, into-24)
det(IRA-26, another-25)
nmod:into(roll-20, IRA-26)
case(days-29, in-27)
nummod(days-29, 60-28)
nmod:in(roll-20, days-29)
punct(withdraw-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#tax

escape :: Most patients will not be aware of an expensive test forgone or a consultation not provided -- omissions that can readily escape detection if they are limited in scope ./.
amod(patients-2, Most-1)
nsubj(aware-6, patients-2)
aux(aware-6, will-3)
neg(aware-6, not-4)
cop(aware-6, be-5)
root(ROOT-0, aware-6)
case(forgone-11, of-7)
det(forgone-11, an-8)
amod(forgone-11, expensive-9)
compound(forgone-11, test-10)
nmod:of(aware-6, forgone-11)
cc(forgone-11, or-12)
det(consultation-14, a-13)
nmod:of(aware-6, consultation-14)
conj:or(forgone-11, consultation-14)
neg(provided-16, not-15)
acl(consultation-14, provided-16)
punct(aware-6, ---17)
dep(aware-6, omissions-18)
nsubj(escape-22, omissions-18)
ref(omissions-18, that-19)
aux(escape-22, can-20)
advmod(escape-22, readily-21)
acl:relcl(omissions-18, escape-22)
dobj(escape-22, detection-23)
mark(limited-27, if-24)
nsubjpass(limited-27, they-25)
auxpass(limited-27, are-26)
advcl(escape-22, limited-27)
case(scope-29, in-28)
nmod:in(limited-27, scope-29)
punct(aware-6, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#detection

escape :: The issue first surfaced after Willie Horton , a first-degree murderer on life sentence without parole who had been on 10 successful furloughs , escaped in 1986 and was arrested in April 1987 and charged with the brutal assault of a Maryland couple ./.
det(issue-2, The-1)
nsubj(surfaced-4, issue-2)
advmod(surfaced-4, first-3)
root(ROOT-0, surfaced-4)
case(Horton-7, after-5)
compound(Horton-7, Willie-6)
nmod:after(surfaced-4, Horton-7)
punct(Horton-7, ,-8)
det(murderer-11, a-9)
amod(murderer-11, first-degree-10)
appos(Horton-7, murderer-11)
nsubj(furloughs-23, murderer-11)
case(sentence-14, on-12)
compound(sentence-14, life-13)
nmod:on(murderer-11, sentence-14)
case(parole-16, without-15)
nmod:without(murderer-11, parole-16)
ref(murderer-11, who-17)
aux(furloughs-23, had-18)
cop(furloughs-23, been-19)
case(furloughs-23, on-20)
nummod(furloughs-23, 10-21)
amod(furloughs-23, successful-22)
acl:relcl(murderer-11, furloughs-23)
punct(Horton-7, ,-24)
dep(surfaced-4, escaped-25)
case(1986-27, in-26)
nmod:in(escaped-25, 1986-27)
cc(escaped-25, and-28)
auxpass(arrested-30, was-29)
dep(surfaced-4, arrested-30)
conj:and(escaped-25, arrested-30)
case(April-32, in-31)
nmod:in(arrested-30, April-32)
nummod(April-32, 1987-33)
cc(escaped-25, and-34)
dep(surfaced-4, charged-35)
conj:and(escaped-25, charged-35)
case(assault-39, with-36)
det(assault-39, the-37)
amod(assault-39, brutal-38)
nmod:with(charged-35, assault-39)
case(couple-43, of-40)
det(couple-43, a-41)
compound(couple-43, Maryland-42)
nmod:of(assault-39, couple-43)
punct(surfaced-4, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#1986

escape :: We are not so advanced as a people that we can escape entirely those fears of shortages and deprivation that gripped our ancestors when nature turned ugly ./.
nsubj(advanced-5, We-1)
cop(advanced-5, are-2)
neg(advanced-5, not-3)
advmod(advanced-5, so-4)
root(ROOT-0, advanced-5)
case(people-8, as-6)
det(people-8, a-7)
nmod:as(advanced-5, people-8)
mark(escape-12, that-9)
nsubj(escape-12, we-10)
aux(escape-12, can-11)
ccomp(advanced-5, escape-12)
advmod(fears-15, entirely-13)
det(fears-15, those-14)
dobj(escape-12, fears-15)
nsubj(gripped-21, fears-15)
case(shortages-17, of-16)
nmod:of(fears-15, shortages-17)
cc(shortages-17, and-18)
nmod:of(fears-15, deprivation-19)
conj:and(shortages-17, deprivation-19)
ref(fears-15, that-20)
acl:relcl(fears-15, gripped-21)
nmod:poss(ancestors-23, our-22)
dobj(gripped-21, ancestors-23)
advmod(turned-26, when-24)
nsubj(turned-26, nature-25)
advcl(gripped-21, turned-26)
xcomp(turned-26, ugly-27)
punct(advanced-5, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#fears

escape :: Mr. Cossa 's grain bin may be filling up , but just last month another 100 peasants -- looking for food and security -- moved into the village to escape the fighting in the countryside ./.
compound(Cossa-2, Mr.-1)
nmod:poss(bin-5, Cossa-2)
case(Cossa-2, 's-3)
compound(bin-5, grain-4)
nsubj(filling-8, bin-5)
aux(filling-8, may-6)
aux(filling-8, be-7)
root(ROOT-0, filling-8)
compound:prt(filling-8, up-9)
punct(filling-8, ,-10)
cc(filling-8, but-11)
advmod(month-14, just-12)
amod(month-14, last-13)
nmod:tmod(moved-25, month-14)
det(peasants-17, another-15)
nummod(peasants-17, 100-16)
nsubj(moved-25, peasants-17)
nsubj:xsubj(escape-30, peasants-17)
punct(peasants-17, ---18)
acl(peasants-17, looking-19)
case(food-21, for-20)
nmod:for(looking-19, food-21)
cc(food-21, and-22)
nmod:for(looking-19, security-23)
conj:and(food-21, security-23)
punct(peasants-17, ---24)
conj:but(filling-8, moved-25)
case(village-28, into-26)
det(village-28, the-27)
nmod:into(moved-25, village-28)
mark(escape-30, to-29)
xcomp(moved-25, escape-30)
det(fighting-32, the-31)
dobj(escape-30, fighting-32)
case(countryside-35, in-33)
det(countryside-35, the-34)
nmod:in(fighting-32, countryside-35)
punct(filling-8, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#fighting

escape :: The Swiss chemical companies have n't escaped profit slowdowns or declines in recent years ./.
det(companies-4, The-1)
amod(companies-4, Swiss-2)
compound(companies-4, chemical-3)
nsubj(escaped-7, companies-4)
aux(escaped-7, have-5)
neg(escaped-7, n't-6)
root(ROOT-0, escaped-7)
compound(slowdowns-9, profit-8)
dobj(escaped-7, slowdowns-9)
cc(slowdowns-9, or-10)
dobj(escaped-7, declines-11)
conj:or(slowdowns-9, declines-11)
case(years-14, in-12)
amod(years-14, recent-13)
nmod:in(escaped-7, years-14)
punct(escaped-7, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#slowdowns

escape :: A drug dealer like Liviel McLellan should not be able to escape a prison sentence ./.
det(dealer-3, A-1)
compound(dealer-3, drug-2)
nsubj(able-10, dealer-3)
nsubj:xsubj(escape-12, dealer-3)
case(McLellan-6, like-4)
compound(McLellan-6, Liviel-5)
nmod:like(dealer-3, McLellan-6)
aux(able-10, should-7)
neg(able-10, not-8)
cop(able-10, be-9)
root(ROOT-0, able-10)
mark(escape-12, to-11)
xcomp(able-10, escape-12)
det(sentence-15, a-13)
compound(sentence-15, prison-14)
dobj(escape-12, sentence-15)
punct(able-10, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#sentence

escape :: Lucky 's widely respected management appeared to have escaped Mr. Skaggs when it announced its $ 61-a-share buy-out plan in April ./.
nmod:poss(management-5, Lucky-1)
case(Lucky-1, 's-2)
advmod(respected-4, widely-3)
amod(management-5, respected-4)
nsubj(appeared-6, management-5)
nsubj:xsubj(escaped-9, management-5)
root(ROOT-0, appeared-6)
mark(escaped-9, to-7)
aux(escaped-9, have-8)
xcomp(appeared-6, escaped-9)
compound(Skaggs-11, Mr.-10)
dobj(escaped-9, Skaggs-11)
advmod(announced-14, when-12)
nsubj(announced-14, it-13)
advcl(escaped-9, announced-14)
nmod:poss(plan-19, its-15)
amod(plan-19, $-16)
dep($-16, 61-a-share-17)
compound(plan-19, buy-out-18)
dobj(announced-14, plan-19)
case(April-21, in-20)
nmod:in(announced-14, April-21)
punct(appeared-6, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#skaggs

escape :: Limited grew so quickly and was such a hit on Wall Street for so long `` that some of us thought it could escape the current fashion retail slump , but that is n't the case . ''/''
nsubj(grew-2, Limited-1)
root(ROOT-0, grew-2)
advmod(quickly-4, so-3)
advmod(grew-2, quickly-4)
cc(grew-2, and-5)
cop(hit-9, was-6)
amod(hit-9, such-7)
det(hit-9, a-8)
conj:and(grew-2, hit-9)
case(Street-12, on-10)
compound(Street-12, Wall-11)
nmod:on(hit-9, Street-12)
case(long-15, for-13)
advmod(long-15, so-14)
nmod:for(hit-9, long-15)
punct(hit-9, ``-16)
dobj(thought-21, that-17)
nsubj(thought-21, some-18)
case(us-20, of-19)
nmod:of(some-18, us-20)
dep(hit-9, thought-21)
nsubj(escape-24, it-22)
aux(escape-24, could-23)
ccomp(thought-21, escape-24)
det(slump-29, the-25)
amod(slump-29, current-26)
compound(slump-29, fashion-27)
amod(slump-29, retail-28)
dobj(escape-24, slump-29)
punct(grew-2, ,-30)
cc(grew-2, but-31)
nsubj(case-36, that-32)
cop(case-36, is-33)
neg(case-36, n't-34)
det(case-36, the-35)
conj:but(grew-2, case-36)
punct(grew-2, .-37)
punct(grew-2, ''-38)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: escape#slump

escape :: In the Challenger accident , hot gases escaping through motor seals ignited the shuttle 's external fuel tank ./.
case(accident-4, In-1)
det(accident-4, the-2)
compound(accident-4, Challenger-3)
nmod:in(ignited-12, accident-4)
punct(ignited-12, ,-5)
amod(gases-7, hot-6)
nsubj(ignited-12, gases-7)
acl(gases-7, escaping-8)
case(seals-11, through-9)
compound(seals-11, motor-10)
nmod:through(escaping-8, seals-11)
root(ROOT-0, ignited-12)
det(shuttle-14, the-13)
nmod:poss(tank-18, shuttle-14)
case(shuttle-14, 's-15)
amod(tank-18, external-16)
compound(tank-18, fuel-17)
dobj(ignited-12, tank-18)
punct(ignited-12, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#seals

escape :: The amendment did n't cover the National Security Council -LRB- a fact that continues to escape Lawrence Walsh -RRB- , so helping the Contras fell to a few workaholics in the Old Executive Office Building ./.
det(amendment-2, The-1)
nsubj(cover-5, amendment-2)
aux(cover-5, did-3)
neg(cover-5, n't-4)
root(ROOT-0, cover-5)
det(Council-9, the-6)
compound(Council-9, National-7)
compound(Council-9, Security-8)
dobj(cover-5, Council-9)
punct(fact-12, -LRB--10)
det(fact-12, a-11)
dep(Council-9, fact-12)
nsubj(continues-14, fact-12)
nsubj:xsubj(escape-16, fact-12)
ref(fact-12, that-13)
acl:relcl(fact-12, continues-14)
mark(escape-16, to-15)
xcomp(continues-14, escape-16)
compound(Walsh-18, Lawrence-17)
dobj(escape-16, Walsh-18)
punct(fact-12, -RRB--19)
punct(cover-5, ,-20)
advmod(helping-22, so-21)
advcl(cover-5, helping-22)
det(Contras-24, the-23)
nsubj(fell-25, Contras-24)
ccomp(helping-22, fell-25)
case(workaholics-29, to-26)
det(workaholics-29, a-27)
amod(workaholics-29, few-28)
nmod:to(fell-25, workaholics-29)
case(Building-35, in-30)
det(Building-35, the-31)
amod(Building-35, Old-32)
compound(Building-35, Executive-33)
compound(Building-35, Office-34)
nmod:in(workaholics-29, Building-35)
punct(cover-5, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#walsh

escape :: The Corolla sedan escaped any price increase ./.
det(sedan-3, The-1)
compound(sedan-3, Corolla-2)
nsubj(escaped-4, sedan-3)
root(ROOT-0, escaped-4)
det(increase-7, any-5)
compound(increase-7, price-6)
dobj(escaped-4, increase-7)
punct(escaped-4, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#increase

escape :: The attraction: flexibility , a way to escape the corporate `` glass ceiling , '' and an experienced franchiser to help them learn the ropes ./.
det(attraction-2, The-1)
root(ROOT-0, attraction-2)
punct(attraction-2, :-3)
dep(attraction-2, flexibility-4)
punct(flexibility-4, ,-5)
det(way-7, a-6)
appos(flexibility-4, way-7)
mark(escape-9, to-8)
acl(way-7, escape-9)
det(ceiling-14, the-10)
amod(ceiling-14, corporate-11)
punct(ceiling-14, ``-12)
compound(ceiling-14, glass-13)
dobj(escape-9, ceiling-14)
punct(flexibility-4, ,-15)
punct(flexibility-4, ''-16)
cc(flexibility-4, and-17)
det(franchiser-20, an-18)
amod(franchiser-20, experienced-19)
dep(attraction-2, franchiser-20)
conj:and(flexibility-4, franchiser-20)
mark(help-22, to-21)
acl(franchiser-20, help-22)
nsubj(learn-24, them-23)
ccomp(help-22, learn-24)
det(ropes-26, the-25)
dobj(learn-24, ropes-26)
punct(attraction-2, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#ceiling

escape :: It 's little wonder , then , that Susan has taken to escaping into the company of her delightfully charming , exceedingly attractive , immensely rich fantasy family: an adoring husband , a devoted daughter and a frothy younger brother whose only occupation in life is to pour yet another round of champagne -- `` champers , '' as he prefers to call it -- for the four of them ./.
nsubj(wonder-4, It-1)
cop(wonder-4, 's-2)
amod(wonder-4, little-3)
root(ROOT-0, wonder-4)
punct(wonder-4, ,-5)
advmod(wonder-4, then-6)
punct(wonder-4, ,-7)
mark(taken-11, that-8)
nsubj(taken-11, Susan-9)
aux(taken-11, has-10)
dep(wonder-4, taken-11)
mark(escaping-13, to-12)
advcl(taken-11, escaping-13)
case(company-16, into-14)
det(company-16, the-15)
nmod:into(escaping-13, company-16)
case(family-28, of-17)
nmod:poss(family-28, her-18)
advmod(charming-20, delightfully-19)
amod(family-28, charming-20)
punct(family-28, ,-21)
advmod(attractive-23, exceedingly-22)
amod(family-28, attractive-23)
punct(family-28, ,-24)
advmod(rich-26, immensely-25)
amod(family-28, rich-26)
compound(family-28, fantasy-27)
nmod:of(company-16, family-28)
punct(taken-11, :-29)
det(husband-32, an-30)
amod(husband-32, adoring-31)
dep(taken-11, husband-32)
punct(husband-32, ,-33)
det(daughter-36, a-34)
amod(daughter-36, devoted-35)
dep(taken-11, daughter-36)
conj:and(husband-32, daughter-36)
cc(husband-32, and-37)
det(brother-41, a-38)
amod(brother-41, frothy-39)
amod(brother-41, younger-40)
dep(taken-11, brother-41)
conj:and(husband-32, brother-41)
nmod:poss(occupation-44, brother-41)
ref(brother-41, whose-42)
amod(occupation-44, only-43)
nsubj(is-47, occupation-44)
nsubj:xsubj(pour-49, occupation-44)
case(life-46, in-45)
nmod:in(occupation-44, life-46)
acl:relcl(brother-41, is-47)
mark(pour-49, to-48)
xcomp(is-47, pour-49)
advmod(pour-49, yet-50)
det(round-52, another-51)
dobj(pour-49, round-52)
case(champagne-54, of-53)
nmod:of(round-52, champagne-54)
punct(round-52, ---55)
punct(round-52, ``-56)
dep(round-52, champers-57)
punct(round-52, ,-58)
punct(round-52, ''-59)
mark(prefers-62, as-60)
nsubj(prefers-62, he-61)
nsubj:xsubj(call-64, he-61)
advcl(round-52, prefers-62)
mark(call-64, to-63)
xcomp(prefers-62, call-64)
dobj(call-64, it-65)
punct(call-64, ---66)
case(four-69, for-67)
det(four-69, the-68)
nmod:for(call-64, four-69)
case(them-71, of-70)
nmod:of(four-69, them-71)
punct(wonder-4, .-72)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#company

escape :: But in talking with the FBI agent , the man not only denied he 'd killed anyone , he said that he had n't escaped from prison , that the warden had simply told him to leave one day after more than 20 years behind bars ./.
cc(denied-13, But-1)
mark(talking-3, in-2)
advcl(denied-13, talking-3)
case(agent-7, with-4)
det(agent-7, the-5)
compound(agent-7, FBI-6)
nmod:with(talking-3, agent-7)
punct(denied-13, ,-8)
det(man-10, the-9)
nsubj(denied-13, man-10)
neg(only-12, not-11)
cc:preconj(denied-13, only-12)
ccomp(said-20, denied-13)
nsubj(killed-16, he-14)
aux(killed-16, 'd-15)
ccomp(denied-13, killed-16)
dobj(killed-16, anyone-17)
punct(said-20, ,-18)
nsubj(said-20, he-19)
root(ROOT-0, said-20)
mark(escaped-25, that-21)
nsubj(escaped-25, he-22)
aux(escaped-25, had-23)
neg(escaped-25, n't-24)
ccomp(said-20, escaped-25)
case(prison-27, from-26)
nmod:from(escaped-25, prison-27)
punct(escaped-25, ,-28)
mark(told-34, that-29)
det(warden-31, the-30)
nsubj(told-34, warden-31)
aux(told-34, had-32)
advmod(told-34, simply-33)
ccomp(escaped-25, told-34)
dobj(told-34, him-35)
nsubj:xsubj(leave-37, him-35)
mark(leave-37, to-36)
xcomp(told-34, leave-37)
nummod(day-39, one-38)
dobj(leave-37, day-39)
case(years-44, after-40)
advmod(20-43, more-41)
mwe(more-41, than-42)
nummod(years-44, 20-43)
nmod:after(day-39, years-44)
case(bars-46, behind-45)
nmod:behind(leave-37, bars-46)
punct(said-20, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#he

escape :: It seems that Mr. Jackson escapes the media 's searching questions of experience , public policy and character that other candidates are subjected to because of the delicate racial issue ./.
nsubj(seems-2, It-1)
root(ROOT-0, seems-2)
mark(escapes-6, that-3)
compound(Jackson-5, Mr.-4)
nsubj(escapes-6, Jackson-5)
ccomp(seems-2, escapes-6)
det(media-8, the-7)
dobj(escapes-6, media-8)
case(media-8, 's-9)
acl(media-8, searching-10)
dobj(searching-10, questions-11)
case(experience-13, of-12)
nmod:of(questions-11, experience-13)
punct(experience-13, ,-14)
amod(policy-16, public-15)
nmod:of(questions-11, policy-16)
conj:and(experience-13, policy-16)
cc(experience-13, and-17)
nmod:of(questions-11, character-18)
conj:and(experience-13, character-18)
mark(subjected-23, that-19)
amod(candidates-21, other-20)
nsubjpass(subjected-23, candidates-21)
auxpass(subjected-23, are-22)
ccomp(questions-11, subjected-23)
nmod(subjected-23, to-24)
case(issue-30, because-25)
mwe(because-25, of-26)
det(issue-30, the-27)
amod(issue-30, delicate-28)
amod(issue-30, racial-29)
nmod:because_of(subjected-23, issue-30)
punct(seems-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#media

escape :: But war-torn Nicaragua today is freer than under Mr. Ortega 's predecessors , the Somozas , who managed in their 43-year reign to escape both a U.S.-sponsored invasion and your denunciations ./.
cc(freer-6, But-1)
amod(Nicaragua-3, war-torn-2)
nsubj(freer-6, Nicaragua-3)
nmod:tmod(freer-6, today-4)
cop(freer-6, is-5)
root(ROOT-0, freer-6)
case(predecessors-12, than-7)
case(predecessors-12, under-8)
compound(Ortega-10, Mr.-9)
nmod:poss(predecessors-12, Ortega-10)
case(Ortega-10, 's-11)
nmod:under(freer-6, predecessors-12)
punct(freer-6, ,-13)
det(Somozas-15, the-14)
root(,-13, Somozas-15)
nsubj(managed-18, Somozas-15)
nsubj:xsubj(escape-24, Somozas-15)
punct(Somozas-15, ,-16)
ref(Somozas-15, who-17)
acl:relcl(Somozas-15, managed-18)
case(reign-22, in-19)
nmod:poss(reign-22, their-20)
amod(reign-22, 43-year-21)
nmod:in(managed-18, reign-22)
mark(escape-24, to-23)
xcomp(managed-18, escape-24)
cc:preconj(invasion-28, both-25)
det(invasion-28, a-26)
amod(invasion-28, U.S.-sponsored-27)
dobj(escape-24, invasion-28)
cc(invasion-28, and-29)
nmod:poss(denunciations-31, your-30)
dobj(escape-24, denunciations-31)
conj:and(invasion-28, denunciations-31)
punct(Somozas-15, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#invasion

escape :: Testing these waters , he tried to make book on whether Robert Bork would reach the Supreme Court and on how much Oral Roberts would raise in his attempt to escape being called to God , but the Gaming Control Board barred the action ./.
advcl(tried-6, Testing-1)
det(waters-3, these-2)
dobj(Testing-1, waters-3)
punct(tried-6, ,-4)
nsubj(tried-6, he-5)
nsubj:xsubj(make-8, he-5)
root(ROOT-0, tried-6)
mark(make-8, to-7)
xcomp(tried-6, make-8)
dobj(make-8, book-9)
mark(reach-15, on-10)
mark(reach-15, whether-11)
compound(Bork-13, Robert-12)
nsubj(reach-15, Bork-13)
aux(reach-15, would-14)
acl(book-9, reach-15)
det(Court-18, the-16)
compound(Court-18, Supreme-17)
dobj(reach-15, Court-18)
cc(reach-15, and-19)
mark(raise-26, on-20)
advmod(much-22, how-21)
advmod(raise-26, much-22)
amod(Roberts-24, Oral-23)
nsubj(raise-26, Roberts-24)
aux(raise-26, would-25)
acl(book-9, raise-26)
conj:and(reach-15, raise-26)
case(attempt-29, in-27)
nmod:poss(attempt-29, his-28)
nmod:in(raise-26, attempt-29)
mark(escape-31, to-30)
acl(attempt-29, escape-31)
auxpass(called-33, being-32)
xcomp(escape-31, called-33)
case(God-35, to-34)
nmod:to(called-33, God-35)
punct(tried-6, ,-36)
cc(tried-6, but-37)
det(Board-41, the-38)
compound(Board-41, Gaming-39)
compound(Board-41, Control-40)
nsubj(barred-42, Board-41)
conj:but(tried-6, barred-42)
det(action-44, the-43)
dobj(barred-42, action-44)
punct(tried-6, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

escape :: Despite the problem , the Daedalus is almost ready for its main mission: a recreation this spring of the flight of the mythological Greek inventor Daedalus , who escaped from prison on the island of Crete by making wax-and-feather wings and flying 70 miles to the mainland of Greece ./.
case(problem-3, Despite-1)
det(problem-3, the-2)
nmod:despite(ready-9, problem-3)
punct(ready-9, ,-4)
det(Daedalus-6, the-5)
nsubj(ready-9, Daedalus-6)
cop(ready-9, is-7)
advmod(ready-9, almost-8)
root(ROOT-0, ready-9)
case(mission-13, for-10)
nmod:poss(mission-13, its-11)
amod(mission-13, main-12)
nmod:for(ready-9, mission-13)
punct(mission-13, :-14)
det(recreation-16, a-15)
dep(mission-13, recreation-16)
det(spring-18, this-17)
nmod:tmod(recreation-16, spring-18)
case(flight-21, of-19)
det(flight-21, the-20)
nmod:of(recreation-16, flight-21)
case(Daedalus-27, of-22)
det(Daedalus-27, the-23)
amod(Daedalus-27, mythological-24)
amod(Daedalus-27, Greek-25)
compound(Daedalus-27, inventor-26)
nmod:of(flight-21, Daedalus-27)
nsubj(escaped-30, Daedalus-27)
punct(Daedalus-27, ,-28)
ref(Daedalus-27, who-29)
acl:relcl(Daedalus-27, escaped-30)
case(prison-32, from-31)
nmod:from(escaped-30, prison-32)
case(island-35, on-33)
det(island-35, the-34)
nmod:on(escaped-30, island-35)
case(Crete-37, of-36)
nmod:of(island-35, Crete-37)
mark(making-39, by-38)
advcl(escaped-30, making-39)
amod(wings-41, wax-and-feather-40)
dobj(making-39, wings-41)
cc(making-39, and-42)
advcl(escaped-30, flying-43)
conj:and(making-39, flying-43)
nummod(miles-45, 70-44)
dobj(flying-43, miles-45)
case(mainland-48, to-46)
det(mainland-48, the-47)
nmod:to(flying-43, mainland-48)
case(Greece-50, of-49)
nmod:of(mainland-48, Greece-50)
punct(ready-9, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#daedalus

escape :: In June 1986 , the Department of Correction announced that killer William Horton had escaped while on a weekend off from prison -- his 10th furlough ./.
case(June-2, In-1)
nmod:in(announced-9, June-2)
nummod(June-2, 1986-3)
punct(announced-9, ,-4)
det(Department-6, the-5)
nsubj(announced-9, Department-6)
case(Correction-8, of-7)
nmod:of(Department-6, Correction-8)
root(ROOT-0, announced-9)
mark(escaped-15, that-10)
compound(Horton-13, killer-11)
compound(Horton-13, William-12)
nsubj(escaped-15, Horton-13)
aux(escaped-15, had-14)
ccomp(announced-9, escaped-15)
case(weekend-19, while-16)
case(weekend-19, on-17)
det(weekend-19, a-18)
nmod:on(escaped-15, weekend-19)
case(prison-22, off-20)
case(prison-22, from-21)
nmod:from(weekend-19, prison-22)
punct(escaped-15, ---23)
nmod:poss(furlough-26, his-24)
amod(furlough-26, 10th-25)
dobj(escaped-15, furlough-26)
punct(announced-9, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#furlough

escape :: Because Israel does n't have the luxury of an all-volunteer military force , its army ca n't escape the schisms of opinion that beset the wider society ./.
mark(have-5, Because-1)
nsubj(have-5, Israel-2)
aux(have-5, does-3)
neg(have-5, n't-4)
advcl(escape-18, have-5)
det(luxury-7, the-6)
dobj(have-5, luxury-7)
case(force-12, of-8)
det(force-12, an-9)
amod(force-12, all-volunteer-10)
amod(force-12, military-11)
nmod:of(luxury-7, force-12)
punct(escape-18, ,-13)
nmod:poss(army-15, its-14)
nsubj(escape-18, army-15)
aux(escape-18, ca-16)
neg(escape-18, n't-17)
root(ROOT-0, escape-18)
det(schisms-20, the-19)
dobj(escape-18, schisms-20)
case(opinion-22, of-21)
nmod:of(schisms-20, opinion-22)
nsubj(beset-24, opinion-22)
ref(opinion-22, that-23)
acl:relcl(opinion-22, beset-24)
det(society-27, the-25)
amod(society-27, wider-26)
dobj(beset-24, society-27)
punct(escape-18, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#opinion

escape :: On Friday , another leader of the failed mutiny against President Aquino 's government escaped prison ./.
case(Friday-2, On-1)
nmod:on(escaped-15, Friday-2)
punct(escaped-15, ,-3)
det(leader-5, another-4)
nsubj(escaped-15, leader-5)
case(mutiny-9, of-6)
det(mutiny-9, the-7)
amod(mutiny-9, failed-8)
nmod:of(leader-5, mutiny-9)
case(government-14, against-10)
compound(Aquino-12, President-11)
nmod:poss(government-14, Aquino-12)
case(Aquino-12, 's-13)
nmod:against(mutiny-9, government-14)
root(ROOT-0, escaped-15)
dobj(escaped-15, prison-16)
punct(escaped-15, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#prison

escape :: Noting today 's bullishness about the economy and the resurgence of mega-mergers , Mr. DeVoe is reminded of how a diver feels `` when all the reef fish disappear and you become aware of the complete silence , broken only by the escaping air bubbles ./.
advcl(reminded-17, Noting-1)
nmod:poss(bullishness-4, today-2)
case(today-2, 's-3)
dobj(Noting-1, bullishness-4)
case(economy-7, about-5)
det(economy-7, the-6)
nmod:about(bullishness-4, economy-7)
cc(bullishness-4, and-8)
det(resurgence-10, the-9)
dobj(Noting-1, resurgence-10)
conj:and(bullishness-4, resurgence-10)
case(mega-mergers-12, of-11)
nmod:of(resurgence-10, mega-mergers-12)
punct(reminded-17, ,-13)
compound(DeVoe-15, Mr.-14)
nsubjpass(reminded-17, DeVoe-15)
auxpass(reminded-17, is-16)
root(ROOT-0, reminded-17)
mark(feels-22, of-18)
advmod(feels-22, how-19)
det(diver-21, a-20)
nsubj(feels-22, diver-21)
advcl(reminded-17, feels-22)
punct(feels-22, ``-23)
advmod(disappear-29, when-24)
det:predet(fish-28, all-25)
det(fish-28, the-26)
compound(fish-28, reef-27)
nsubj(disappear-29, fish-28)
advcl(feels-22, disappear-29)
cc(disappear-29, and-30)
nsubj(become-32, you-31)
advcl(feels-22, become-32)
conj:and(disappear-29, become-32)
xcomp(become-32, aware-33)
case(silence-37, of-34)
det(silence-37, the-35)
amod(silence-37, complete-36)
nmod:of(aware-33, silence-37)
punct(disappear-29, ,-38)
dep(disappear-29, broken-39)
advmod(bubbles-45, only-40)
case(bubbles-45, by-41)
det(bubbles-45, the-42)
amod(bubbles-45, escaping-43)
compound(bubbles-45, air-44)
nmod:by(broken-39, bubbles-45)
punct(reminded-17, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#bubbles

escape :: Generale de Belgique 's 11 directors avoid ostentatious displays of wealth or power , partly to escape undue scrutiny in this small , densely populated country where visible wealth is taxed heavily ./.
compound(Belgique-3, Generale-1)
compound(Belgique-3, de-2)
nmod:poss(directors-6, Belgique-3)
case(Belgique-3, 's-4)
nummod(directors-6, 11-5)
nsubj(avoid-7, directors-6)
root(ROOT-0, avoid-7)
amod(displays-9, ostentatious-8)
dobj(avoid-7, displays-9)
case(wealth-11, of-10)
nmod:of(displays-9, wealth-11)
cc(wealth-11, or-12)
nmod:of(displays-9, power-13)
conj:or(wealth-11, power-13)
punct(avoid-7, ,-14)
advmod(escape-17, partly-15)
mark(escape-17, to-16)
advcl(avoid-7, escape-17)
amod(scrutiny-19, undue-18)
dobj(escape-17, scrutiny-19)
case(country-26, in-20)
det(country-26, this-21)
amod(country-26, small-22)
punct(country-26, ,-23)
advmod(populated-25, densely-24)
amod(country-26, populated-25)
nmod:in(escape-17, country-26)
advmod(taxed-31, where-27)
amod(wealth-29, visible-28)
nsubjpass(taxed-31, wealth-29)
auxpass(taxed-31, is-30)
acl:relcl(country-26, taxed-31)
advmod(taxed-31, heavily-32)
punct(avoid-7, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#scrutiny

escape :: Some are trying to escape childhoods troubled by missing fathers or drug-addicted mothers ./.
nsubj(trying-3, Some-1)
nsubj:xsubj(escape-5, Some-1)
aux(trying-3, are-2)
root(ROOT-0, trying-3)
mark(escape-5, to-4)
xcomp(trying-3, escape-5)
dobj(escape-5, childhoods-6)
acl(childhoods-6, troubled-7)
case(fathers-10, by-8)
amod(fathers-10, missing-9)
nmod:by(troubled-7, fathers-10)
cc(fathers-10, or-11)
amod(mothers-13, drug-addicted-12)
nmod:by(troubled-7, mothers-13)
conj:or(fathers-10, mothers-13)
punct(trying-3, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#childhoods

escape :: A federal judge reversed a decision that had given investors an apparent loophole to escape from the arbitration agreements their stockbrokers often require ./.
det(judge-3, A-1)
amod(judge-3, federal-2)
nsubj(reversed-4, judge-3)
root(ROOT-0, reversed-4)
det(decision-6, a-5)
dobj(reversed-4, decision-6)
nsubj(given-9, decision-6)
ref(decision-6, that-7)
aux(given-9, had-8)
acl:relcl(decision-6, given-9)
iobj(given-9, investors-10)
det(loophole-13, an-11)
amod(loophole-13, apparent-12)
dobj(given-9, loophole-13)
mark(escape-15, to-14)
acl(loophole-13, escape-15)
case(agreements-19, from-16)
det(agreements-19, the-17)
compound(agreements-19, arbitration-18)
nmod:from(escape-15, agreements-19)
nmod:poss(stockbrokers-21, their-20)
nsubj(require-23, stockbrokers-21)
advmod(require-23, often-22)
acl:relcl(agreements-19, require-23)
punct(reversed-4, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#agreements

escape :: As a result , GM has wrapped up a complicated four-year legal battle over the sale of an earth-moving subsidiary , escaping any additional penalties ./.
case(result-3, As-1)
det(result-3, a-2)
nmod:as(wrapped-7, result-3)
punct(wrapped-7, ,-4)
nsubj(wrapped-7, GM-5)
aux(wrapped-7, has-6)
root(ROOT-0, wrapped-7)
compound:prt(wrapped-7, up-8)
det(battle-13, a-9)
amod(battle-13, complicated-10)
amod(battle-13, four-year-11)
amod(battle-13, legal-12)
dobj(wrapped-7, battle-13)
case(sale-16, over-14)
det(sale-16, the-15)
nmod:over(battle-13, sale-16)
case(subsidiary-20, of-17)
det(subsidiary-20, an-18)
amod(subsidiary-20, earth-moving-19)
nmod:of(sale-16, subsidiary-20)
punct(wrapped-7, ,-21)
advcl(wrapped-7, escaping-22)
det(penalties-25, any-23)
amod(penalties-25, additional-24)
dobj(escaping-22, penalties-25)
punct(wrapped-7, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#penalties

escape :: While public attention in the West remains focused on the recent INF Treaty and nuclear arms control issues , a less dramatic Soviet diplomatic initiative is under way -- a new `` peace offensive '' that thus far has escaped the careful evaluation it merits ./.
mark(remains-7, While-1)
amod(attention-3, public-2)
nsubj(remains-7, attention-3)
case(West-6, in-4)
det(West-6, the-5)
nmod:in(attention-3, West-6)
advcl(way-28, remains-7)
xcomp(remains-7, focused-8)
case(Treaty-13, on-9)
det(Treaty-13, the-10)
amod(Treaty-13, recent-11)
compound(Treaty-13, INF-12)
nmod:on(focused-8, Treaty-13)
cc(Treaty-13, and-14)
amod(issues-18, nuclear-15)
compound(issues-18, arms-16)
compound(issues-18, control-17)
nmod:on(focused-8, issues-18)
conj:and(Treaty-13, issues-18)
punct(way-28, ,-19)
det(initiative-25, a-20)
advmod(dramatic-22, less-21)
amod(initiative-25, dramatic-22)
amod(initiative-25, Soviet-23)
amod(initiative-25, diplomatic-24)
nsubj(way-28, initiative-25)
cop(way-28, is-26)
case(way-28, under-27)
root(ROOT-0, way-28)
punct(way-28, ---29)
det(offensive-34, a-30)
amod(offensive-34, new-31)
punct(offensive-34, ``-32)
compound(offensive-34, peace-33)
dep(way-28, offensive-34)
nsubj(escaped-40, offensive-34)
punct(offensive-34, ''-35)
ref(offensive-34, that-36)
advmod(escaped-40, thus-37)
advmod(escaped-40, far-38)
aux(escaped-40, has-39)
acl:relcl(offensive-34, escaped-40)
det(evaluation-43, the-41)
amod(evaluation-43, careful-42)
dobj(escaped-40, evaluation-43)
nsubj(merits-45, it-44)
acl:relcl(evaluation-43, merits-45)
punct(way-28, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#evaluation

escape :: Sidney Ganis , president of marketing , says the studio tries to remind Academy members of films that may have escaped notice ./.
compound(Ganis-2, Sidney-1)
nsubj(says-8, Ganis-2)
punct(Ganis-2, ,-3)
appos(Ganis-2, president-4)
case(marketing-6, of-5)
nmod:of(president-4, marketing-6)
punct(Ganis-2, ,-7)
root(ROOT-0, says-8)
det(studio-10, the-9)
nsubj(tries-11, studio-10)
nsubj:xsubj(remind-13, studio-10)
ccomp(says-8, tries-11)
mark(remind-13, to-12)
xcomp(tries-11, remind-13)
compound(members-15, Academy-14)
dobj(remind-13, members-15)
nsubj(escaped-21, members-15)
case(films-17, of-16)
nmod:of(members-15, films-17)
ref(members-15, that-18)
aux(escaped-21, may-19)
aux(escaped-21, have-20)
acl:relcl(members-15, escaped-21)
dobj(escaped-21, notice-22)
punct(says-8, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#notice

escape :: Sears shares escaped with little damage , falling just 1 8 to 34 1 2 in active trading ./.
compound(shares-2, Sears-1)
nsubj(escaped-3, shares-2)
root(ROOT-0, escaped-3)
case(damage-6, with-4)
amod(damage-6, little-5)
nmod:with(escaped-3, damage-6)
punct(escaped-3, ,-7)
xcomp(escaped-3, falling-8)
advmod(8-11, just-9)
compound(8-11, 1-10)
dobj(falling-8, 8-11)
case(2-15, to-12)
compound(2-15, 34-13)
compound(2-15, 1-14)
nmod:to(falling-8, 2-15)
case(trading-18, in-16)
amod(trading-18, active-17)
nmod:in(falling-8, trading-18)
punct(escaped-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#shares

escape :: Two young women in the front seat were n't wearing belts , but escaped without permanent injuries ./.
nummod(women-3, Two-1)
amod(women-3, young-2)
nsubj(wearing-10, women-3)
nsubj(escaped-14, women-3)
case(seat-7, in-4)
det(seat-7, the-5)
amod(seat-7, front-6)
nmod:in(women-3, seat-7)
aux(wearing-10, were-8)
neg(wearing-10, n't-9)
root(ROOT-0, wearing-10)
dobj(wearing-10, belts-11)
punct(wearing-10, ,-12)
cc(wearing-10, but-13)
conj:but(wearing-10, escaped-14)
case(injuries-17, without-15)
amod(injuries-17, permanent-16)
nmod:without(escaped-14, injuries-17)
punct(wearing-10, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#women

escape :: What seems to escape him is that the central value of the free market is that it is inextricably intertwined with human freedom , both spiritually and materially ./.
nsubj(seems-2, What-1)
nsubj:xsubj(escape-4, What-1)
csubj(is-6, seems-2)
mark(escape-4, to-3)
xcomp(seems-2, escape-4)
dobj(escape-4, him-5)
root(ROOT-0, is-6)
mark(is-15, that-7)
det(value-10, the-8)
amod(value-10, central-9)
nsubj(is-15, value-10)
case(market-14, of-11)
det(market-14, the-12)
amod(market-14, free-13)
nmod:of(value-10, market-14)
ccomp(is-6, is-15)
mark(intertwined-20, that-16)
nsubjpass(intertwined-20, it-17)
auxpass(intertwined-20, is-18)
advmod(intertwined-20, inextricably-19)
ccomp(is-15, intertwined-20)
case(freedom-23, with-21)
amod(freedom-23, human-22)
nmod:with(intertwined-20, freedom-23)
punct(is-15, ,-24)
cc:preconj(spiritually-26, both-25)
advmod(is-15, spiritually-26)
cc(spiritually-26, and-27)
advmod(is-15, materially-28)
conj:and(spiritually-26, materially-28)
punct(is-6, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#him

escape :: Three anti-apartheid activists emerged from a 36-day stay at the U.S. consulate in Johannesburg , where they had sought refuge after escaping from police ./.
nummod(activists-3, Three-1)
amod(activists-3, anti-apartheid-2)
nsubj(emerged-4, activists-3)
root(ROOT-0, emerged-4)
case(stay-8, from-5)
det(stay-8, a-6)
amod(stay-8, 36-day-7)
nmod:from(emerged-4, stay-8)
case(consulate-12, at-9)
det(consulate-12, the-10)
compound(consulate-12, U.S.-11)
nmod:at(stay-8, consulate-12)
case(Johannesburg-14, in-13)
nmod:in(consulate-12, Johannesburg-14)
punct(Johannesburg-14, ,-15)
advmod(sought-19, where-16)
nsubj(sought-19, they-17)
aux(sought-19, had-18)
acl:relcl(Johannesburg-14, sought-19)
dobj(sought-19, refuge-20)
mark(escaping-22, after-21)
advcl(sought-19, escaping-22)
case(police-24, from-23)
nmod:from(escaping-22, police-24)
punct(emerged-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#police

escape :: The pores permit carbon dioxide released by the respiring produce to escape the package , while allowing only small amounts of oxygen to enter . -LRB- Air is 21 % oxygen. -RRB-/-RRB-
root(ROOT-0, The-1)
acl(The-1, pores-2)
ccomp(pores-2, permit-3)
compound(dioxide-5, carbon-4)
dobj(permit-3, dioxide-5)
acl(dioxide-5, released-6)
case(produce-10, by-7)
det(produce-10, the-8)
amod(produce-10, respiring-9)
nmod:by(released-6, produce-10)
mark(escape-12, to-11)
advcl(permit-3, escape-12)
det(package-14, the-13)
dobj(escape-12, package-14)
punct(permit-3, ,-15)
mark(allowing-17, while-16)
advcl(permit-3, allowing-17)
advmod(amounts-20, only-18)
amod(amounts-20, small-19)
dobj(allowing-17, amounts-20)
nsubj:xsubj(enter-24, amounts-20)
case(oxygen-22, of-21)
nmod:of(amounts-20, oxygen-22)
mark(enter-24, to-23)
xcomp(allowing-17, enter-24)
punct(The-1, .-25)
punct(oxygen-6, -LRB--1)
nsubj(oxygen-6, Air-2)
cop(oxygen-6, is-3)
compound(%-5, 21-4)
amod(oxygen-6, %-5)
root(ROOT-0, oxygen-6)
punct(oxygen-6, .-7)
punct(oxygen-6, -RRB--8)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: escape#package

escape :: Less than 0.01 millirem escaped into the atmosphere through a facility 's stack , and workers were n't evacuated , a statement from Savannah River said ./.
nsubj(escaped-5, Less-1)
case(millirem-4, than-2)
nummod(millirem-4, 0.01-3)
nmod:than(Less-1, millirem-4)
root(ROOT-0, escaped-5)
case(atmosphere-8, into-6)
det(atmosphere-8, the-7)
nmod:into(escaped-5, atmosphere-8)
case(stack-13, through-9)
det(facility-11, a-10)
nmod:poss(stack-13, facility-11)
case(facility-11, 's-12)
nmod:through(escaped-5, stack-13)
punct(escaped-5, ,-14)
cc(escaped-5, and-15)
nsubjpass(evacuated-19, workers-16)
auxpass(evacuated-19, were-17)
neg(evacuated-19, n't-18)
conj:and(escaped-5, evacuated-19)
punct(evacuated-19, ,-20)
det(statement-22, a-21)
nsubj(said-26, statement-22)
case(River-25, from-23)
compound(River-25, Savannah-24)
nmod:from(statement-22, River-25)
ccomp(evacuated-19, said-26)
punct(escaped-5, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#less

escape :: A fourth anti-apartheid activist escaped detention in South Africa and took refuge in the U.S. consulate in Johannesburg , where three others have been sheltered ./.
det(activist-4, A-1)
amod(activist-4, fourth-2)
amod(activist-4, anti-apartheid-3)
nsubj(escaped-5, activist-4)
nsubj(took-11, activist-4)
root(ROOT-0, escaped-5)
dobj(escaped-5, detention-6)
case(Africa-9, in-7)
compound(Africa-9, South-8)
nmod:in(escaped-5, Africa-9)
cc(escaped-5, and-10)
conj:and(escaped-5, took-11)
dobj(took-11, refuge-12)
case(consulate-16, in-13)
det(consulate-16, the-14)
compound(consulate-16, U.S.-15)
nmod:in(took-11, consulate-16)
case(Johannesburg-18, in-17)
nmod:in(consulate-16, Johannesburg-18)
punct(Johannesburg-18, ,-19)
advmod(sheltered-25, where-20)
nummod(others-22, three-21)
nsubj(sheltered-25, others-22)
aux(sheltered-25, have-23)
cop(sheltered-25, been-24)
acl:relcl(Johannesburg-18, sheltered-25)
punct(escaped-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#detention

escape :: The FAA ordered that all planes with 30 seats or more be outfitted with equipment that detects and helps pilots escape wind shear ./.
det(FAA-2, The-1)
nsubj(ordered-3, FAA-2)
root(ROOT-0, ordered-3)
mark(outfitted-13, that-4)
det(planes-6, all-5)
nsubjpass(outfitted-13, planes-6)
case(seats-9, with-7)
nummod(seats-9, 30-8)
nmod:with(planes-6, seats-9)
cc(seats-9, or-10)
nmod:with(planes-6, more-11)
conj:or(seats-9, more-11)
auxpass(outfitted-13, be-12)
ccomp(ordered-3, outfitted-13)
case(equipment-15, with-14)
nmod:with(outfitted-13, equipment-15)
nsubj(detects-17, equipment-15)
nsubj(helps-19, equipment-15)
ref(equipment-15, that-16)
acl:relcl(equipment-15, detects-17)
cc(detects-17, and-18)
acl:relcl(equipment-15, helps-19)
conj:and(detects-17, helps-19)
nsubj(escape-21, pilots-20)
ccomp(detects-17, escape-21)
compound(shear-23, wind-22)
dobj(escape-21, shear-23)
punct(ordered-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#shear

escape :: The Federal Aviation Administration , trying to reduce the risk of accidents caused by wind shear , ordered that all planes with 30 seats or more be outfitted with equipment that detects and helps pilots escape the condition ./.
det(Administration-4, The-1)
compound(Administration-4, Federal-2)
compound(Administration-4, Aviation-3)
nsubj(ordered-18, Administration-4)
punct(ordered-18, ,-5)
advcl(ordered-18, trying-6)
mark(reduce-8, to-7)
xcomp(trying-6, reduce-8)
det(risk-10, the-9)
dobj(reduce-8, risk-10)
case(accidents-12, of-11)
nmod:of(risk-10, accidents-12)
acl(accidents-12, caused-13)
case(shear-16, by-14)
compound(shear-16, wind-15)
nmod:by(caused-13, shear-16)
punct(ordered-18, ,-17)
root(ROOT-0, ordered-18)
mark(outfitted-28, that-19)
det(planes-21, all-20)
nsubjpass(outfitted-28, planes-21)
case(seats-24, with-22)
nummod(seats-24, 30-23)
nmod:with(planes-21, seats-24)
cc(seats-24, or-25)
nmod:with(planes-21, more-26)
conj:or(seats-24, more-26)
auxpass(outfitted-28, be-27)
ccomp(ordered-18, outfitted-28)
case(equipment-30, with-29)
nmod:with(outfitted-28, equipment-30)
nsubj(detects-32, equipment-30)
nsubj(helps-34, equipment-30)
ref(equipment-30, that-31)
acl:relcl(equipment-30, detects-32)
cc(detects-32, and-33)
acl:relcl(equipment-30, helps-34)
conj:and(detects-32, helps-34)
nsubj(escape-36, pilots-35)
ccomp(detects-32, escape-36)
det(condition-38, the-37)
dobj(escape-36, condition-38)
punct(ordered-18, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#condition

escape :: In addition to warning pilots when they hit unexpected , low-altitude wind shear , the new required equipment will provide the crew with computer-generated instructions on the best path to take to escape the wind shear ./.
case(pilots-5, In-1)
mwe(In-1, addition-2)
mwe(In-1, to-3)
amod(pilots-5, warning-4)
nmod:in_addition_to(provide-20, pilots-5)
advmod(hit-8, when-6)
nsubj(hit-8, they-7)
acl:relcl(pilots-5, hit-8)
xcomp(hit-8, unexpected-9)
punct(provide-20, ,-10)
compound(shear-13, low-altitude-11)
compound(shear-13, wind-12)
nsubj(provide-20, shear-13)
punct(shear-13, ,-14)
det(equipment-18, the-15)
amod(equipment-18, new-16)
amod(equipment-18, required-17)
appos(shear-13, equipment-18)
aux(provide-20, will-19)
root(ROOT-0, provide-20)
det(crew-22, the-21)
dobj(provide-20, crew-22)
case(instructions-25, with-23)
amod(instructions-25, computer-generated-24)
nmod:with(provide-20, instructions-25)
case(path-29, on-26)
det(path-29, the-27)
amod(path-29, best-28)
nmod:on(instructions-25, path-29)
mark(take-31, to-30)
advcl(provide-20, take-31)
mark(escape-33, to-32)
xcomp(take-31, escape-33)
det(shear-36, the-34)
compound(shear-36, wind-35)
dobj(escape-33, shear-36)
punct(provide-20, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#shear

escape :: About 100 , 000 Kurds -- a people not previously known for running -- have fled across the border to Turkey to escape the onslaught ./.
advmod(100-2, About-1)
nsubj(fled-16, 100-2)
nsubj:xsubj(escape-23, 100-2)
punct(100-2, ,-3)
nummod(Kurds-5, 000-4)
appos(100-2, Kurds-5)
punct(100-2, ---6)
det(people-8, a-7)
dep(100-2, people-8)
neg(known-11, not-9)
advmod(known-11, previously-10)
acl(people-8, known-11)
case(running-13, for-12)
nmod:for(known-11, running-13)
punct(100-2, ---14)
aux(fled-16, have-15)
root(ROOT-0, fled-16)
case(border-19, across-17)
det(border-19, the-18)
nmod:across(fled-16, border-19)
case(Turkey-21, to-20)
nmod:to(border-19, Turkey-21)
mark(escape-23, to-22)
xcomp(fled-16, escape-23)
det(onslaught-25, the-24)
dobj(escape-23, onslaught-25)
punct(fled-16, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#onslaught

escape :: At the scene of the crash , survivors said they were able to escape the plane by crawling out at a split in the fuselage and by going through an emergency exit over the wing ./.
case(scene-3, At-1)
det(scene-3, the-2)
nmod:at(said-9, scene-3)
case(crash-6, of-4)
det(crash-6, the-5)
nmod:of(scene-3, crash-6)
punct(said-9, ,-7)
nsubj(said-9, survivors-8)
root(ROOT-0, said-9)
nsubj(able-12, they-10)
nsubj:xsubj(escape-14, they-10)
cop(able-12, were-11)
ccomp(said-9, able-12)
mark(escape-14, to-13)
xcomp(able-12, escape-14)
det(plane-16, the-15)
dobj(escape-14, plane-16)
mark(crawling-18, by-17)
advcl(escape-14, crawling-18)
compound:prt(crawling-18, out-19)
case(split-22, at-20)
det(split-22, a-21)
nmod:at(crawling-18, split-22)
case(fuselage-25, in-23)
det(fuselage-25, the-24)
nmod:in(split-22, fuselage-25)
cc(crawling-18, and-26)
mark(going-28, by-27)
advcl(escape-14, going-28)
conj:and(crawling-18, going-28)
case(exit-32, through-29)
det(exit-32, an-30)
compound(exit-32, emergency-31)
nmod:through(going-28, exit-32)
case(wing-35, over-33)
det(wing-35, the-34)
nmod:over(exit-32, wing-35)
punct(said-9, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#plane

escape :: Witnesses then remember hearing a rushing sound similar to steam escaping from a high-pressure valve ./.
nsubj(remember-3, Witnesses-1)
advmod(remember-3, then-2)
root(ROOT-0, remember-3)
xcomp(remember-3, hearing-4)
det(sound-7, a-5)
amod(sound-7, rushing-6)
dobj(hearing-4, sound-7)
amod(sound-7, similar-8)
case(steam-10, to-9)
nmod:to(similar-8, steam-10)
acl(steam-10, escaping-11)
case(valve-15, from-12)
det(valve-15, a-13)
amod(valve-15, high-pressure-14)
nmod:from(escaping-11, valve-15)
punct(remember-3, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#valve

escape :: A new extermination technique calls for pumping air heated by propane burners into insect-infested houses that have been covered with tarps to keep the heat from escaping ./.
det(technique-4, A-1)
amod(technique-4, new-2)
compound(technique-4, extermination-3)
nsubj(calls-5, technique-4)
root(ROOT-0, calls-5)
case(air-8, for-6)
amod(air-8, pumping-7)
nmod:for(calls-5, air-8)
acl(air-8, heated-9)
case(burners-12, by-10)
compound(burners-12, propane-11)
nmod:by(heated-9, burners-12)
case(houses-15, into-13)
amod(houses-15, insect-infested-14)
nmod:into(heated-9, houses-15)
nsubjpass(covered-19, houses-15)
nsubj:xsubj(keep-23, houses-15)
ref(houses-15, that-16)
aux(covered-19, have-17)
auxpass(covered-19, been-18)
acl:relcl(houses-15, covered-19)
case(tarps-21, with-20)
nmod:with(covered-19, tarps-21)
mark(keep-23, to-22)
xcomp(covered-19, keep-23)
det(heat-25, the-24)
dobj(keep-23, heat-25)
mark(escaping-27, from-26)
advcl(keep-23, escaping-27)
punct(calls-5, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

escape :: The assailants escaped on a waiting speedboat ./.
det(assailants-2, The-1)
nsubj(escaped-3, assailants-2)
root(ROOT-0, escaped-3)
case(speedboat-7, on-4)
det(speedboat-7, a-5)
amod(speedboat-7, waiting-6)
nmod:on(escaped-3, speedboat-7)
punct(escaped-3, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#assailants

escape :: In 1981 , he and his second wife were able to escape Cuba by joining a group tour of Czechoslovakia ./.
case(1981-2, In-1)
nmod:in(able-10, 1981-2)
punct(able-10, ,-3)
nsubj(able-10, he-4)
nsubj:xsubj(escape-12, he-4)
cc(he-4, and-5)
nmod:poss(wife-8, his-6)
amod(wife-8, second-7)
conj:and(he-4, wife-8)
nsubj(able-10, wife-8)
nsubj:xsubj(escape-12, wife-8)
cop(able-10, were-9)
root(ROOT-0, able-10)
mark(escape-12, to-11)
xcomp(able-10, escape-12)
dobj(escape-12, Cuba-13)
mark(joining-15, by-14)
advcl(escape-12, joining-15)
det(tour-18, a-16)
compound(tour-18, group-17)
dobj(joining-15, tour-18)
case(Czechoslovakia-20, of-19)
nmod:of(tour-18, Czechoslovakia-20)
punct(able-10, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#cuba

escape :: The kinky Keynesians who devised it will be lucky to escape across the Potomac with their pie charts ./.
det(Keynesians-3, The-1)
compound(Keynesians-3, kinky-2)
root(ROOT-0, Keynesians-3)
nsubj(devised-5, Keynesians-3)
ref(Keynesians-3, who-4)
acl:relcl(Keynesians-3, devised-5)
nsubj(lucky-9, it-6)
nsubj:xsubj(escape-11, it-6)
aux(lucky-9, will-7)
cop(lucky-9, be-8)
ccomp(devised-5, lucky-9)
mark(escape-11, to-10)
xcomp(lucky-9, escape-11)
case(Potomac-14, across-12)
det(Potomac-14, the-13)
nmod:across(escape-11, Potomac-14)
case(charts-18, with-15)
nmod:poss(charts-18, their-16)
compound(charts-18, pie-17)
nmod:with(Potomac-14, charts-18)
punct(Keynesians-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#it

escape :: Sean Penn pulls off a reasonably convincing German accent as Guenther , the surprise witness in `` Judgment in Berlin , '' the story of the East Germans who escaped to the West by hijacking a plane ./.
compound(Penn-2, Sean-1)
nsubj(pulls-3, Penn-2)
root(ROOT-0, pulls-3)
compound:prt(pulls-3, off-4)
det(accent-9, a-5)
advmod(convincing-7, reasonably-6)
amod(accent-9, convincing-7)
amod(accent-9, German-8)
dobj(pulls-3, accent-9)
case(Guenther-11, as-10)
nmod:as(pulls-3, Guenther-11)
punct(pulls-3, ,-12)
det(witness-15, the-13)
compound(witness-15, surprise-14)
dobj(pulls-3, witness-15)
case(Judgment-18, in-16)
punct(Judgment-18, ``-17)
nmod:in(witness-15, Judgment-18)
case(Berlin-20, in-19)
nmod:in(Judgment-18, Berlin-20)
punct(pulls-3, ,-21)
root(,-21, ''-22)
det(story-24, the-23)
root(''-22, story-24)
case(Germans-28, of-25)
det(Germans-28, the-26)
compound(Germans-28, East-27)
nmod:of(story-24, Germans-28)
nsubj(escaped-30, Germans-28)
ref(Germans-28, who-29)
acl:relcl(Germans-28, escaped-30)
case(West-33, to-31)
det(West-33, the-32)
nmod:to(escaped-30, West-33)
mark(hijacking-35, by-34)
advcl(escaped-30, hijacking-35)
det(plane-37, a-36)
dobj(hijacking-35, plane-37)
punct(story-24, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: escape#germans

evaporate :: In race after race , PAC funds evaporated for Republican challengers , even for candidates with political credentials as impressive as those of Mr. Howard , once dubbed `` the conscience of the senate '' for his crusades against state-level corruption ./.
case(race-2, In-1)
nmod:in(evaporated-8, race-2)
case(race-4, after-3)
nmod:after(race-2, race-4)
punct(evaporated-8, ,-5)
compound(funds-7, PAC-6)
nsubj(evaporated-8, funds-7)
root(ROOT-0, evaporated-8)
case(challengers-11, for-9)
amod(challengers-11, Republican-10)
nmod:for(evaporated-8, challengers-11)
punct(evaporated-8, ,-12)
advmod(candidates-15, even-13)
case(candidates-15, for-14)
nmod:for(evaporated-8, candidates-15)
case(credentials-18, with-16)
amod(credentials-18, political-17)
nmod:with(candidates-15, credentials-18)
advmod(impressive-20, as-19)
amod(credentials-18, impressive-20)
case(those-22, as-21)
nmod:as(impressive-20, those-22)
case(Howard-25, of-23)
compound(Howard-25, Mr.-24)
nmod:of(those-22, Howard-25)
punct(evaporated-8, ,-26)
advmod(dubbed-28, once-27)
advcl(evaporated-8, dubbed-28)
punct(dubbed-28, ``-29)
det(conscience-31, the-30)
dobj(dubbed-28, conscience-31)
case(senate-34, of-32)
det(senate-34, the-33)
nmod:of(conscience-31, senate-34)
punct(senate-34, ''-35)
case(crusades-38, for-36)
nmod:poss(crusades-38, his-37)
nmod:for(conscience-31, crusades-38)
case(corruption-41, against-39)
amod(corruption-41, state-level-40)
nmod:against(crusades-38, corruption-41)
punct(evaporated-8, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#funds

evaporate :: While acknowledging that the many hits he has taken have had an impact , Mr. Quayle says it is merely `` a question of when that perception will evaporate . ''/''
mark(acknowledging-2, While-1)
advcl(says-17, acknowledging-2)
mark(had-11, that-3)
det(hits-6, the-4)
amod(hits-6, many-5)
nsubj(had-11, hits-6)
nsubj(taken-9, he-7)
aux(taken-9, has-8)
acl:relcl(hits-6, taken-9)
aux(had-11, have-10)
ccomp(acknowledging-2, had-11)
det(impact-13, an-12)
dobj(had-11, impact-13)
punct(says-17, ,-14)
compound(Quayle-16, Mr.-15)
nsubj(says-17, Quayle-16)
root(ROOT-0, says-17)
nsubj(question-23, it-18)
cop(question-23, is-19)
advmod(question-23, merely-20)
punct(question-23, ``-21)
det(question-23, a-22)
ccomp(says-17, question-23)
mark(evaporate-29, of-24)
advmod(evaporate-29, when-25)
det(perception-27, that-26)
nsubj(evaporate-29, perception-27)
aux(evaporate-29, will-28)
acl(question-23, evaporate-29)
punct(says-17, .-30)
punct(says-17, ''-31)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: evaporate#perception

evaporate :: Austrian companies , for example , complain that their sales of shoes and clothes to the Soviet Union -- more than $ 100 million in 1984 -- have almost evaporated ./.
amod(companies-2, Austrian-1)
nsubj(complain-7, companies-2)
punct(complain-7, ,-3)
case(example-5, for-4)
nmod:for(complain-7, example-5)
punct(complain-7, ,-6)
root(ROOT-0, complain-7)
mark(evaporated-30, that-8)
nmod:poss(sales-10, their-9)
nsubj(evaporated-30, sales-10)
case(shoes-12, of-11)
nmod:of(sales-10, shoes-12)
cc(shoes-12, and-13)
nmod:of(sales-10, clothes-14)
conj:and(shoes-12, clothes-14)
case(Union-18, to-15)
det(Union-18, the-16)
compound(Union-18, Soviet-17)
nmod:to(sales-10, Union-18)
punct($-22, ---19)
advmod($-22, more-20)
mwe(more-20, than-21)
dep(sales-10, $-22)
compound(million-24, 100-23)
nummod($-22, million-24)
case(1984-26, in-25)
nmod:in($-22, 1984-26)
punct($-22, ---27)
aux(evaporated-30, have-28)
advmod(evaporated-30, almost-29)
ccomp(complain-7, evaporated-30)
punct(complain-7, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#sales

evaporate :: `` Within a few years , we 're either going to see parents paying significantly higher tuition rates for good-quality care , or there 's going to be no coverage at all and child care is going to evaporate . ''/''
root(ROOT-0, ``-1)
case(years-5, Within-2)
det(years-5, a-3)
amod(years-5, few-4)
nmod:within(going-10, years-5)
punct(going-10, ,-6)
nsubj(going-10, we-7)
nsubj:xsubj(see-12, we-7)
aux(going-10, 're-8)
advmod(going-10, either-9)
root(``-1, going-10)
mark(see-12, to-11)
xcomp(going-10, see-12)
dobj(see-12, parents-13)
acl(parents-13, paying-14)
advmod(higher-16, significantly-15)
amod(rates-18, higher-16)
compound(rates-18, tuition-17)
dobj(paying-14, rates-18)
case(care-21, for-19)
amod(care-21, good-quality-20)
nmod:for(paying-14, care-21)
punct(going-10, ,-22)
cc(going-10, or-23)
expl(going-26, there-24)
aux(going-26, 's-25)
csubj(going-37, going-26)
mark(coverage-30, to-27)
cop(coverage-30, be-28)
neg(coverage-30, no-29)
xcomp(going-26, coverage-30)
case(care-35, at-31)
det(care-35, all-32)
cc(all-32, and-33)
conj:and(all-32, child-34)
det(care-35, child-34)
nmod:at(coverage-30, care-35)
aux(going-37, is-36)
root(``-1, going-37)
conj:or(going-10, going-37)
mark(evaporate-39, to-38)
xcomp(going-37, evaporate-39)
punct(going-10, .-40)
punct(going-10, ''-41)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

evaporate :: At that point we suspect Jim Wright 's gift to the Democratic convention will turn to dross , as the next administration learns what happens when the U.S. lets seven years of support for a resistance movement evaporate ./.
case(point-3, At-1)
det(point-3, that-2)
nmod:at(suspect-5, point-3)
nsubj(suspect-5, we-4)
root(ROOT-0, suspect-5)
compound(Wright-7, Jim-6)
nmod:poss(gift-9, Wright-7)
case(Wright-7, 's-8)
nsubj(turn-15, gift-9)
case(convention-13, to-10)
det(convention-13, the-11)
amod(convention-13, Democratic-12)
nmod:to(gift-9, convention-13)
aux(turn-15, will-14)
ccomp(suspect-5, turn-15)
case(dross-17, to-16)
nmod:to(turn-15, dross-17)
punct(turn-15, ,-18)
mark(learns-23, as-19)
det(administration-22, the-20)
amod(administration-22, next-21)
nsubj(learns-23, administration-22)
advcl(turn-15, learns-23)
nsubj(happens-25, what-24)
ccomp(learns-23, happens-25)
advmod(lets-29, when-26)
det(U.S.-28, the-27)
nsubj(lets-29, U.S.-28)
advcl(happens-25, lets-29)
nummod(years-31, seven-30)
dobj(lets-29, years-31)
case(support-33, of-32)
nmod:of(years-31, support-33)
case(movement-37, for-34)
det(movement-37, a-35)
compound(movement-37, resistance-36)
nmod:for(support-33, movement-37)
acl(movement-37, evaporate-38)
punct(suspect-5, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

evaporate :: The euphoria of hiring four agents the first month evaporated when the local franchise owners , who earlier sung VR 's praises , revealed their discontent now that he was one of them ./.
det(euphoria-2, The-1)
root(ROOT-0, euphoria-2)
mark(hiring-4, of-3)
acl(euphoria-2, hiring-4)
nummod(agents-6, four-5)
dobj(hiring-4, agents-6)
det(month-9, the-7)
amod(month-9, first-8)
nsubj(evaporated-10, month-9)
advcl(hiring-4, evaporated-10)
advmod(revealed-24, when-11)
det(owners-15, the-12)
amod(owners-15, local-13)
compound(owners-15, franchise-14)
nsubj(praises-22, owners-15)
nsubj(revealed-24, owners-15)
punct(owners-15, ,-16)
ref(owners-15, who-17)
amod(VR-20, earlier-18)
compound(VR-20, sung-19)
nmod:poss(praises-22, VR-20)
case(VR-20, 's-21)
acl:relcl(owners-15, praises-22)
punct(owners-15, ,-23)
advcl(evaporated-10, revealed-24)
nmod:poss(discontent-26, their-25)
dobj(revealed-24, discontent-26)
mark(one-31, discontent-26)
advmod(one-31, now-27)
ref(discontent-26, that-28)
nsubj(one-31, he-29)
cop(one-31, was-30)
acl:relcl(discontent-26, one-31)
case(them-33, of-32)
nmod:of(one-31, them-33)
punct(euphoria-2, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#month

evaporate :: But the euphoria is evaporating as reality sinks in ./.
cc(evaporating-5, But-1)
det(euphoria-3, the-2)
nsubj(evaporating-5, euphoria-3)
aux(evaporating-5, is-4)
root(ROOT-0, evaporating-5)
mark(sinks-8, as-6)
nsubj(sinks-8, reality-7)
advcl(evaporating-5, sinks-8)
compound:prt(sinks-8, in-9)
punct(evaporating-5, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#euphoria

evaporate :: But the euphoria soon evaporated ./.
cc(evaporated-5, But-1)
det(euphoria-3, the-2)
nsubj(evaporated-5, euphoria-3)
advmod(evaporated-5, soon-4)
root(ROOT-0, evaporated-5)
punct(evaporated-5, .-6)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#euphoria

evaporate :: But party leaders ' hopes of writing a broadly worded document began to evaporate , as early versions of platform planks were cluttered with specific promises ./.
cc(began-12, But-1)
compound(leaders-3, party-2)
nmod:poss(hopes-5, leaders-3)
case(leaders-3, '-4)
nsubj(began-12, hopes-5)
nsubj:xsubj(evaporate-14, hopes-5)
mark(writing-7, of-6)
acl(hopes-5, writing-7)
det(document-11, a-8)
advmod(worded-10, broadly-9)
amod(document-11, worded-10)
dobj(writing-7, document-11)
root(ROOT-0, began-12)
mark(evaporate-14, to-13)
xcomp(began-12, evaporate-14)
punct(evaporate-14, ,-15)
advmod(versions-18, as-16)
amod(versions-18, early-17)
nsubjpass(cluttered-23, versions-18)
case(planks-21, of-19)
compound(planks-21, platform-20)
nmod:of(versions-18, planks-21)
auxpass(cluttered-23, were-22)
ccomp(evaporate-14, cluttered-23)
case(promises-26, with-24)
amod(promises-26, specific-25)
nmod:with(cluttered-23, promises-26)
punct(began-12, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#hopes

evaporate :: Those objections quickly evaporated after the university sophomore , who declared herself `` proud to be a Thai woman , '' was named the pageant 's winner ./.
det(objections-2, Those-1)
nsubj(evaporated-4, objections-2)
advmod(evaporated-4, quickly-3)
ccomp(named-23, evaporated-4)
case(sophomore-8, after-5)
det(sophomore-8, the-6)
compound(sophomore-8, university-7)
nmod:after(evaporated-4, sophomore-8)
nsubj(declared-11, sophomore-8)
punct(sophomore-8, ,-9)
ref(sophomore-8, who-10)
acl:relcl(sophomore-8, declared-11)
dep(proud-14, herself-12)
punct(proud-14, ``-13)
xcomp(declared-11, proud-14)
mark(woman-19, to-15)
cop(woman-19, be-16)
det(woman-19, a-17)
compound(woman-19, Thai-18)
xcomp(proud-14, woman-19)
punct(named-23, ,-20)
punct(named-23, ''-21)
auxpass(named-23, was-22)
root(ROOT-0, named-23)
det(pageant-25, the-24)
nmod:poss(winner-27, pageant-25)
case(pageant-25, 's-26)
xcomp(named-23, winner-27)
punct(named-23, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#objections

evaporate :: `` The specialness evaporates when a hands-on operation becomes a finger on a monolithic hand . ''/''
root(ROOT-0, ``-1)
det(specialness-3, The-2)
nsubj(evaporates-4, specialness-3)
root(``-1, evaporates-4)
advmod(becomes-9, when-5)
det(operation-8, a-6)
amod(operation-8, hands-on-7)
nsubj(becomes-9, operation-8)
advcl(evaporates-4, becomes-9)
det(finger-11, a-10)
xcomp(becomes-9, finger-11)
case(hand-15, on-12)
det(hand-15, a-13)
amod(hand-15, monolithic-14)
nmod:on(finger-11, hand-15)
punct(evaporates-4, .-16)
punct(evaporates-4, ''-17)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: evaporate#specialness

evaporate :: But it 's still a fragile recovery , one that may evaporate with the next U.S. monthly trade figure , some bankers warn ./.
cc(recovery-7, But-1)
nsubj(recovery-7, it-2)
cop(recovery-7, 's-3)
advmod(recovery-7, still-4)
det(recovery-7, a-5)
amod(recovery-7, fragile-6)
root(ROOT-0, recovery-7)
punct(recovery-7, ,-8)
appos(recovery-7, one-9)
nsubj(evaporate-12, one-9)
ref(one-9, that-10)
aux(evaporate-12, may-11)
acl:relcl(one-9, evaporate-12)
case(figure-19, with-13)
det(figure-19, the-14)
amod(figure-19, next-15)
compound(figure-19, U.S.-16)
amod(figure-19, monthly-17)
compound(figure-19, trade-18)
nmod:with(evaporate-12, figure-19)
punct(recovery-7, ,-20)
det(bankers-22, some-21)
nsubj(warn-23, bankers-22)
dep(recovery-7, warn-23)
punct(recovery-7, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#one

evaporate :: And his initial hesitancy about the endeavor has evaporated completely , to be replaced by what might be called historical perspective ./.
cc(evaporated-9, And-1)
nmod:poss(hesitancy-4, his-2)
amod(hesitancy-4, initial-3)
nsubj(evaporated-9, hesitancy-4)
nsubjpass:xsubj(replaced-14, hesitancy-4)
case(endeavor-7, about-5)
det(endeavor-7, the-6)
nmod:about(hesitancy-4, endeavor-7)
aux(evaporated-9, has-8)
root(ROOT-0, evaporated-9)
advmod(evaporated-9, completely-10)
punct(evaporated-9, ,-11)
mark(replaced-14, to-12)
auxpass(replaced-14, be-13)
xcomp(evaporated-9, replaced-14)
mark(called-19, by-15)
nsubjpass(called-19, what-16)
aux(called-19, might-17)
auxpass(called-19, be-18)
advcl(replaced-14, called-19)
amod(perspective-21, historical-20)
xcomp(called-19, perspective-21)
punct(evaporated-9, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#hesitancy

evaporate :: As to competitive advantages from devaluation , they will evaporate quickly ./.
case(advantages-4, As-1)
mwe(As-1, to-2)
amod(advantages-4, competitive-3)
nmod:as_to(evaporate-10, advantages-4)
case(devaluation-6, from-5)
nmod:from(advantages-4, devaluation-6)
punct(evaporate-10, ,-7)
nsubj(evaporate-10, they-8)
aux(evaporate-10, will-9)
root(ROOT-0, evaporate-10)
advmod(evaporate-10, quickly-11)
punct(evaporate-10, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#they

evaporate :: Vista Group 's $ 16-a-share offer quickly evaporated in the controversy ./.
compound(Group-2, Vista-1)
nmod:poss(offer-6, Group-2)
case(Group-2, 's-3)
amod(offer-6, $-4)
dep($-4, 16-a-share-5)
nsubj(evaporated-8, offer-6)
advmod(evaporated-8, quickly-7)
root(ROOT-0, evaporated-8)
case(controversy-11, in-9)
det(controversy-11, the-10)
nmod:in(evaporated-8, controversy-11)
punct(evaporated-8, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#offer

evaporate :: Meanwhile , existing jobs have evaporated ./.
advmod(evaporated-6, Meanwhile-1)
punct(evaporated-6, ,-2)
amod(jobs-4, existing-3)
nsubj(evaporated-6, jobs-4)
aux(evaporated-6, have-5)
root(ROOT-0, evaporated-6)
punct(evaporated-6, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#jobs

evaporate :: The new jobs may pay less , but they will also be less likely to evaporate all at once ./.
det(jobs-3, The-1)
amod(jobs-3, new-2)
nsubj(pay-5, jobs-3)
aux(pay-5, may-4)
root(ROOT-0, pay-5)
dobj(pay-5, less-6)
punct(pay-5, ,-7)
cc(pay-5, but-8)
nsubj(likely-14, they-9)
nsubj:xsubj(evaporate-16, they-9)
aux(likely-14, will-10)
advmod(likely-14, also-11)
cop(likely-14, be-12)
advmod(likely-14, less-13)
conj:but(pay-5, likely-14)
mark(evaporate-16, to-15)
xcomp(likely-14, evaporate-16)
dobj(evaporate-16, all-17)
case(once-19, at-18)
nmod:at(evaporate-16, once-19)
punct(pay-5, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#all

evaporate :: When they repeated the tests with the special precautions , the sensational results evaporated ./.
advmod(repeated-3, When-1)
nsubj(repeated-3, they-2)
advcl(evaporated-14, repeated-3)
det(tests-5, the-4)
dobj(repeated-3, tests-5)
case(precautions-9, with-6)
det(precautions-9, the-7)
amod(precautions-9, special-8)
nmod:with(tests-5, precautions-9)
punct(evaporated-14, ,-10)
det(results-13, the-11)
amod(results-13, sensational-12)
nsubj(evaporated-14, results-13)
root(ROOT-0, evaporated-14)
punct(evaporated-14, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#results

evaporate :: That measure assumed surpluses were the problem ; now the surpluses are evaporating ./.
det(measure-2, That-1)
nsubj(assumed-3, measure-2)
root(ROOT-0, assumed-3)
nsubj(problem-7, surpluses-4)
cop(problem-7, were-5)
det(problem-7, the-6)
ccomp(assumed-3, problem-7)
punct(assumed-3, ;-8)
advmod(evaporating-13, now-9)
det(surpluses-11, the-10)
nsubj(evaporating-13, surpluses-11)
aux(evaporating-13, are-12)
parataxis(assumed-3, evaporating-13)
punct(assumed-3, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#surpluses

evaporate :: Soviet fears that the U.S. would establish a naval base in Sri Lanka evaporated ./.
amod(fears-2, Soviet-1)
nsubj(evaporated-14, fears-2)
mark(establish-7, that-3)
det(U.S.-5, the-4)
nsubj(establish-7, U.S.-5)
aux(establish-7, would-6)
ccomp(fears-2, establish-7)
det(base-10, a-8)
amod(base-10, naval-9)
dobj(establish-7, base-10)
case(Lanka-13, in-11)
compound(Lanka-13, Sri-12)
nmod:in(base-10, Lanka-13)
root(ROOT-0, evaporated-14)
punct(evaporated-14, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#fears

evaporate :: A purported $ 16-a-share offer for Superior Industries International Inc. evaporated yesterday after a flurry of activity in which one supposed player , Prudential-Bache Securities Inc . , denied it had authorized such a buy-out offer ./.
det(offer-5, A-1)
amod(offer-5, purported-2)
amod(offer-5, $-3)
dep($-3, 16-a-share-4)
nsubj(evaporated-11, offer-5)
case(Inc.-10, for-6)
compound(Inc.-10, Superior-7)
compound(Inc.-10, Industries-8)
compound(Inc.-10, International-9)
nmod:for(offer-5, Inc.-10)
root(ROOT-0, evaporated-11)
nmod:tmod(evaporated-11, yesterday-12)
case(flurry-15, after-13)
det(flurry-15, a-14)
nmod:after(evaporated-11, flurry-15)
case(activity-17, of-16)
nmod:of(flurry-15, activity-17)
case(which-19, in-18)
nmod:in(flurry-15, which-19)
nummod(player-22, one-20)
amod(player-22, supposed-21)
dep(which-19, player-22)
punct(player-22, ,-23)
compound(Inc-26, Prudential-Bache-24)
compound(Inc-26, Securities-25)
appos(player-22, Inc-26)
punct(evaporated-11, .-27)
punct(denied-2, ,-1)
root(ROOT-0, denied-2)
nsubj(authorized-5, it-3)
aux(authorized-5, had-4)
ccomp(denied-2, authorized-5)
det:predet(offer-9, such-6)
det(offer-9, a-7)
compound(offer-9, buy-out-8)
dobj(authorized-5, offer-9)
punct(denied-2, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#offer

evaporate :: In 1984 Acorn was ready but the market was evaporating ./.
case(1984-2, In-1)
nmod:in(ready-5, 1984-2)
nsubj(ready-5, Acorn-3)
cop(ready-5, was-4)
root(ROOT-0, ready-5)
cc(ready-5, but-6)
det(market-8, the-7)
nsubj(evaporating-10, market-8)
aux(evaporating-10, was-9)
conj:but(ready-5, evaporating-10)
punct(ready-5, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#market

evaporate :: Analysts said Wall Street 's elation over Bush 's victory evaporated as speculation grew that central banks would no longer prop up the dollar ./.
nsubj(said-2, Analysts-1)
root(ROOT-0, said-2)
compound(Street-4, Wall-3)
nmod:poss(elation-6, Street-4)
case(Street-4, 's-5)
nsubj(evaporated-11, elation-6)
case(victory-10, over-7)
nmod:poss(victory-10, Bush-8)
case(Bush-8, 's-9)
nmod:over(elation-6, victory-10)
ccomp(said-2, evaporated-11)
mark(grew-14, as-12)
nsubj(grew-14, speculation-13)
advcl(evaporated-11, grew-14)
mark(prop-21, that-15)
amod(banks-17, central-16)
nsubj(prop-21, banks-17)
aux(prop-21, would-18)
neg(longer-20, no-19)
advmod(prop-21, longer-20)
ccomp(grew-14, prop-21)
compound:prt(prop-21, up-22)
det(dollar-24, the-23)
dobj(prop-21, dollar-24)
punct(said-2, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#elation

evaporate :: Bond yields initially surged , but as stocks crashed inflation fears evaporated and an explosive bond market rally began ./.
compound(yields-2, Bond-1)
nsubj(surged-4, yields-2)
advmod(surged-4, initially-3)
root(ROOT-0, surged-4)
punct(surged-4, ,-5)
cc(surged-4, but-6)
mark(crashed-9, as-7)
nsubj(crashed-9, stocks-8)
conj:but(surged-4, crashed-9)
compound(fears-11, inflation-10)
nsubj(evaporated-12, fears-11)
xcomp(crashed-9, evaporated-12)
cc(evaporated-12, and-13)
det(rally-18, an-14)
amod(rally-18, explosive-15)
compound(rally-18, bond-16)
compound(rally-18, market-17)
nsubj(began-19, rally-18)
xcomp(crashed-9, began-19)
conj:and(evaporated-12, began-19)
punct(surged-4, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#fears

evaporate :: Many traders and analysts said they think yesterday 's gains will soon evaporate ./.
amod(traders-2, Many-1)
nsubj(said-5, traders-2)
cc(traders-2, and-3)
conj:and(traders-2, analysts-4)
nsubj(said-5, analysts-4)
root(ROOT-0, said-5)
nsubj(think-7, they-6)
ccomp(said-5, think-7)
nmod:poss(gains-10, yesterday-8)
case(yesterday-8, 's-9)
nsubj(evaporate-13, gains-10)
aux(evaporate-13, will-11)
advmod(evaporate-13, soon-12)
ccomp(think-7, evaporate-13)
punct(said-5, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#gains

evaporate :: One proposal calls for gasoline refiners to reduce the volatility of fuel in summer , thus reducing the fuel 's tendency to evaporate and contribute to ozone pollution ./.
nummod(proposal-2, One-1)
nsubj(calls-3, proposal-2)
root(ROOT-0, calls-3)
mark(reduce-8, for-4)
compound(refiners-6, gasoline-5)
nsubj(reduce-8, refiners-6)
mark(reduce-8, to-7)
advcl(calls-3, reduce-8)
det(volatility-10, the-9)
dobj(reduce-8, volatility-10)
case(fuel-12, of-11)
nmod:of(volatility-10, fuel-12)
case(summer-14, in-13)
nmod:in(reduce-8, summer-14)
punct(reduce-8, ,-15)
advmod(reducing-17, thus-16)
advcl(reduce-8, reducing-17)
det(fuel-19, the-18)
nmod:poss(tendency-21, fuel-19)
case(fuel-19, 's-20)
dobj(reducing-17, tendency-21)
mark(evaporate-23, to-22)
acl(tendency-21, evaporate-23)
cc(evaporate-23, and-24)
acl(tendency-21, contribute-25)
conj:and(evaporate-23, contribute-25)
case(pollution-28, to-26)
compound(pollution-28, ozone-27)
nmod:to(contribute-25, pollution-28)
punct(calls-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

evaporate :: The market pulled back during the afternoon amid profit-taking , traders said , and then began a fullscale retreat as buying interest evaporated ./.
det(market-2, The-1)
nsubj(pulled-3, market-2)
nsubj(began-16, market-2)
root(ROOT-0, pulled-3)
advmod(pulled-3, back-4)
case(afternoon-7, during-5)
det(afternoon-7, the-6)
nmod:during(pulled-3, afternoon-7)
case(profit-taking-9, amid-8)
nmod:amid(pulled-3, profit-taking-9)
punct(said-12, ,-10)
nsubj(said-12, traders-11)
parataxis(pulled-3, said-12)
punct(said-12, ,-13)
cc(pulled-3, and-14)
advmod(began-16, then-15)
conj:and(pulled-3, began-16)
det(retreat-19, a-17)
amod(retreat-19, fullscale-18)
dobj(began-16, retreat-19)
mark(buying-21, as-20)
advcl(began-16, buying-21)
nsubj(evaporated-23, interest-22)
dep(buying-21, evaporated-23)
punct(pulled-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#interest

evaporate :: Several issues were still sought after in the wake of last week 's bid for Consolidated Gold Fields , but the majority of the takeover froth has evaporated , dealers said ./.
amod(issues-2, Several-1)
nsubjpass(sought-5, issues-2)
auxpass(sought-5, were-3)
advmod(sought-5, still-4)
ccomp(said-31, sought-5)
case(wake-9, after-6)
case(wake-9, in-7)
det(wake-9, the-8)
nmod:in(sought-5, wake-9)
case(bid-14, of-10)
amod(week-12, last-11)
nmod:poss(bid-14, week-12)
case(week-12, 's-13)
nmod:of(wake-9, bid-14)
case(Fields-18, for-15)
amod(Fields-18, Consolidated-16)
compound(Fields-18, Gold-17)
nmod:for(bid-14, Fields-18)
punct(sought-5, ,-19)
cc(sought-5, but-20)
det(majority-22, the-21)
nsubj(evaporated-28, majority-22)
case(froth-26, of-23)
det(froth-26, the-24)
compound(froth-26, takeover-25)
nmod:of(majority-22, froth-26)
aux(evaporated-28, has-27)
conj:but(sought-5, evaporated-28)
ccomp(said-31, evaporated-28)
punct(said-31, ,-29)
nsubj(said-31, dealers-30)
root(ROOT-0, said-31)
punct(said-31, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#majority

evaporate :: At least one dealer , Mr. Feigen , feels that art as an investment is a fad that could evaporate if the Japanese economy weakens ./.
case(least-2, At-1)
nmod:npmod(one-3, least-2)
nummod(dealer-4, one-3)
nsubj(feels-9, dealer-4)
punct(dealer-4, ,-5)
compound(Feigen-7, Mr.-6)
appos(dealer-4, Feigen-7)
punct(dealer-4, ,-8)
root(ROOT-0, feels-9)
mark(fad-17, that-10)
nsubj(fad-17, art-11)
case(investment-14, as-12)
det(investment-14, an-13)
nmod:as(art-11, investment-14)
cop(fad-17, is-15)
det(fad-17, a-16)
ccomp(feels-9, fad-17)
nsubj(evaporate-20, fad-17)
ref(fad-17, that-18)
aux(evaporate-20, could-19)
acl:relcl(fad-17, evaporate-20)
mark(weakens-25, if-21)
det(economy-24, the-22)
amod(economy-24, Japanese-23)
nsubj(weakens-25, economy-24)
advcl(evaporate-20, weakens-25)
punct(feels-9, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#fad

evaporate :: But some of the hopeful signs that fostered such optimism evaporated by spring ./.
root(ROOT-0, But-1)
dep(But-1, some-2)
case(signs-6, of-3)
det(signs-6, the-4)
amod(signs-6, hopeful-5)
nmod:of(some-2, signs-6)
dep(signs-6, that-7)
amod(optimism-10, fostered-8)
amod(optimism-10, such-9)
dep(that-7, optimism-10)
acl(optimism-10, evaporated-11)
case(spring-13, by-12)
nmod:by(evaporated-11, spring-13)
punct(But-1, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#spring

evaporate :: Trading volume often evaporates just ahead of the monthly employment statistics , which are exceptionally difficult to predict ./.
compound(volume-2, Trading-1)
nsubj(evaporates-4, volume-2)
advmod(evaporates-4, often-3)
root(ROOT-0, evaporates-4)
advmod(ahead-6, just-5)
advmod(evaporates-4, ahead-6)
case(statistics-11, of-7)
det(statistics-11, the-8)
amod(statistics-11, monthly-9)
compound(statistics-11, employment-10)
nmod:of(ahead-6, statistics-11)
nsubj(difficult-16, statistics-11)
punct(statistics-11, ,-12)
ref(statistics-11, which-13)
cop(difficult-16, are-14)
advmod(difficult-16, exceptionally-15)
acl:relcl(statistics-11, difficult-16)
mark(predict-18, to-17)
ccomp(difficult-16, predict-18)
punct(evaporates-4, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#volume

evaporate :: While gas wells usually produce liquid as well as gas , `` it evaporates , '' he said ./.
mark(produce-5, While-1)
compound(wells-3, gas-2)
nsubj(produce-5, wells-3)
advmod(produce-5, usually-4)
advcl(evaporates-14, produce-5)
dobj(produce-5, liquid-6)
cc(liquid-6, as-7)
mwe(as-7, well-8)
mwe(as-7, as-9)
dobj(produce-5, gas-10)
conj:and(liquid-6, gas-10)
punct(evaporates-14, ,-11)
punct(evaporates-14, ``-12)
nsubj(evaporates-14, it-13)
ccomp(said-18, evaporates-14)
punct(said-18, ,-15)
punct(said-18, ''-16)
nsubj(said-18, he-17)
root(ROOT-0, said-18)
punct(said-18, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#it

evaporate :: The low pressure causes liquid in the arm to evaporate and to be pulled into the pipe ./.
det(pressure-3, The-1)
amod(pressure-3, low-2)
nsubj(causes-4, pressure-3)
root(ROOT-0, causes-4)
dobj(causes-4, liquid-5)
case(arm-8, in-6)
det(arm-8, the-7)
nmod:in(causes-4, arm-8)
mark(evaporate-10, to-9)
advcl(causes-4, evaporate-10)
cc(evaporate-10, and-11)
mark(pulled-14, to-12)
auxpass(pulled-14, be-13)
advcl(causes-4, pulled-14)
conj:and(evaporate-10, pulled-14)
case(pipe-17, into-15)
det(pipe-17, the-16)
nmod:into(pulled-14, pipe-17)
punct(causes-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

evaporate :: Social Security surpluses also will help make the deficit evaporate within the next five years ./.
compound(surpluses-3, Social-1)
compound(surpluses-3, Security-2)
nsubj(help-6, surpluses-3)
advmod(help-6, also-4)
aux(help-6, will-5)
root(ROOT-0, help-6)
ccomp(help-6, make-7)
det(deficit-9, the-8)
nsubj(evaporate-10, deficit-9)
ccomp(make-7, evaporate-10)
case(years-15, within-11)
det(years-15, the-12)
amod(years-15, next-13)
nummod(years-15, five-14)
nmod:within(evaporate-10, years-15)
punct(help-6, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#deficit

evaporate :: Long-term interest rates will plummet to their lowest level in 25 years as fears evaporate about swollen budget deficits , rising inflation and an over-leveraged corporate America ./.
amod(rates-3, Long-term-1)
compound(rates-3, interest-2)
nsubj(plummet-5, rates-3)
aux(plummet-5, will-4)
root(ROOT-0, plummet-5)
case(level-9, to-6)
nmod:poss(level-9, their-7)
amod(level-9, lowest-8)
nmod:to(plummet-5, level-9)
case(years-12, in-10)
nummod(years-12, 25-11)
nmod:in(plummet-5, years-12)
mark(evaporate-15, as-13)
nsubj(evaporate-15, fears-14)
advcl(plummet-5, evaporate-15)
case(deficits-19, about-16)
amod(deficits-19, swollen-17)
compound(deficits-19, budget-18)
nmod:about(evaporate-15, deficits-19)
punct(plummet-5, ,-20)
amod(inflation-22, rising-21)
dobj(plummet-5, inflation-22)
cc(inflation-22, and-23)
det(America-27, an-24)
amod(America-27, over-leveraged-25)
amod(America-27, corporate-26)
dobj(plummet-5, America-27)
conj:and(inflation-22, America-27)
punct(plummet-5, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#fears

evaporate :: Futures brokers have seen their wildest business in many years evaporate ./.
compound(brokers-2, Futures-1)
nsubj(seen-4, brokers-2)
aux(seen-4, have-3)
root(ROOT-0, seen-4)
nmod:poss(business-7, their-5)
amod(business-7, wildest-6)
dobj(seen-4, business-7)
case(years-10, in-8)
amod(years-10, many-9)
nmod:in(evaporate-11, years-10)
advcl(seen-4, evaporate-11)
punct(seen-4, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#years

evaporate :: As the water runs down , it leaches salt from the earth and carries it to the Mother of Poisons , where water evaporates in the searing sun , crystallizing the salt in a thick white crust on the surface ./.
mark(runs-4, As-1)
det(water-3, the-2)
nsubj(runs-4, water-3)
advcl(leaches-8, runs-4)
compound:prt(runs-4, down-5)
punct(leaches-8, ,-6)
nsubj(leaches-8, it-7)
nsubj(carries-14, it-7)
root(ROOT-0, leaches-8)
dobj(leaches-8, salt-9)
case(earth-12, from-10)
det(earth-12, the-11)
nmod:from(leaches-8, earth-12)
cc(leaches-8, and-13)
conj:and(leaches-8, carries-14)
dobj(carries-14, it-15)
case(Mother-18, to-16)
det(Mother-18, the-17)
nmod:to(carries-14, Mother-18)
case(Poisons-20, of-19)
nmod:of(Mother-18, Poisons-20)
punct(Poisons-20, ,-21)
advmod(evaporates-24, where-22)
nsubj(evaporates-24, water-23)
acl:relcl(Poisons-20, evaporates-24)
case(sun-28, in-25)
det(sun-28, the-26)
amod(sun-28, searing-27)
nmod:in(evaporates-24, sun-28)
punct(leaches-8, ,-29)
advcl(leaches-8, crystallizing-30)
det(salt-32, the-31)
dobj(crystallizing-30, salt-32)
case(crust-37, in-33)
det(crust-37, a-34)
amod(crust-37, thick-35)
amod(crust-37, white-36)
nmod:in(crystallizing-30, crust-37)
case(surface-40, on-38)
det(surface-40, the-39)
nmod:on(crust-37, surface-40)
punct(leaches-8, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#water

evaporate :: If widespread window dressing is occurring , then last week 's rally and any upward move in prices this week could easily evaporate after the end of the quarter ./.
mark(occurring-6, If-1)
amod(window-3, widespread-2)
nsubj(occurring-6, window-3)
acl(window-3, dressing-4)
aux(occurring-6, is-5)
advcl(evaporate-23, occurring-6)
punct(evaporate-23, ,-7)
advmod(rally-12, then-8)
amod(week-10, last-9)
nmod:poss(rally-12, week-10)
case(week-10, 's-11)
nsubj(evaporate-23, rally-12)
cc(rally-12, and-13)
det(move-16, any-14)
amod(move-16, upward-15)
conj:and(rally-12, move-16)
nsubj(evaporate-23, move-16)
case(prices-18, in-17)
nmod:in(move-16, prices-18)
det(week-20, this-19)
nmod:tmod(move-16, week-20)
aux(evaporate-23, could-21)
advmod(evaporate-23, easily-22)
root(ROOT-0, evaporate-23)
case(end-26, after-24)
det(end-26, the-25)
nmod:after(evaporate-23, end-26)
case(quarter-29, of-27)
det(quarter-29, the-28)
nmod:of(end-26, quarter-29)
punct(evaporate-23, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#rally

evaporate :: If dry weather cuts normal production by just three bushels an acre , the nation 's soybean stockpiles could evaporate by next year , says Richard Loewy , senior grain and oilseed analyst at Prudential-Bache Securities Inc ./.
root(ROOT-0, If-1)
amod(cuts-4, dry-2)
compound(cuts-4, weather-3)
compound(production-6, cuts-4)
amod(production-6, normal-5)
root(If-1, production-6)
case(bushels-10, by-7)
advmod(three-9, just-8)
nummod(bushels-10, three-9)
nmod:by(production-6, bushels-10)
det(acre-12, an-11)
nmod:npmod(bushels-10, acre-12)
punct(bushels-10, ,-13)
det(nation-15, the-14)
nmod:poss(stockpiles-18, nation-15)
case(nation-15, 's-16)
compound(stockpiles-18, soybean-17)
nsubj(evaporate-20, stockpiles-18)
aux(evaporate-20, could-19)
acl:relcl(bushels-10, evaporate-20)
case(year-23, by-21)
amod(year-23, next-22)
nmod:by(evaporate-20, year-23)
punct(says-25, ,-24)
dep(production-6, says-25)
compound(Loewy-27, Richard-26)
nsubj(says-25, Loewy-27)
punct(Loewy-27, ,-28)
amod(grain-30, senior-29)
appos(Loewy-27, grain-30)
cc(grain-30, and-31)
compound(analyst-33, oilseed-32)
appos(Loewy-27, analyst-33)
conj:and(grain-30, analyst-33)
case(Inc-37, at-34)
compound(Inc-37, Prudential-Bache-35)
compound(Inc-37, Securities-36)
nmod:at(grain-30, Inc-37)
punct(says-25, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#stockpiles

evaporate :: But past compositions have included `` absorbed water , '' which evaporates at high temperatures , causing the fluids to break down ./.
cc(included-5, But-1)
amod(compositions-3, past-2)
nsubj(included-5, compositions-3)
aux(included-5, have-4)
root(ROOT-0, included-5)
punct(included-5, ``-6)
amod(water-8, absorbed-7)
dobj(included-5, water-8)
nsubj(evaporates-12, water-8)
punct(water-8, ,-9)
punct(water-8, ''-10)
ref(water-8, which-11)
acl:relcl(water-8, evaporates-12)
case(temperatures-15, at-13)
amod(temperatures-15, high-14)
nmod:at(evaporates-12, temperatures-15)
punct(included-5, ,-16)
advcl(included-5, causing-17)
det(fluids-19, the-18)
dobj(causing-17, fluids-19)
nsubj:xsubj(break-21, fluids-19)
mark(break-21, to-20)
xcomp(causing-17, break-21)
compound:prt(break-21, down-22)
punct(included-5, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#water

evaporate :: Weather is dominating the soybean market earlier than usual this year because the nation 's once-burdensome stockpiles are rapidly evaporating ./.
nsubj(dominating-3, Weather-1)
aux(dominating-3, is-2)
root(ROOT-0, dominating-3)
det(market-6, the-4)
compound(market-6, soybean-5)
dobj(dominating-3, market-6)
advmod(dominating-3, earlier-7)
case(usual-9, than-8)
advcl(earlier-7, usual-9)
det(year-11, this-10)
nmod:tmod(dominating-3, year-11)
mark(evaporating-20, because-12)
det(nation-14, the-13)
nmod:poss(stockpiles-17, nation-14)
case(nation-14, 's-15)
amod(stockpiles-17, once-burdensome-16)
nsubj(evaporating-20, stockpiles-17)
aux(evaporating-20, are-18)
advmod(evaporating-20, rapidly-19)
advcl(dominating-3, evaporating-20)
punct(dominating-3, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#stockpiles

evaporate :: Any support for the State Department 's proposals quickly evaporated when the ideas wound up in the press ./.
det(support-2, Any-1)
nsubj(evaporated-10, support-2)
case(proposals-8, for-3)
det(Department-6, the-4)
compound(Department-6, State-5)
nmod:poss(proposals-8, Department-6)
case(Department-6, 's-7)
nmod:for(support-2, proposals-8)
advmod(evaporated-10, quickly-9)
root(ROOT-0, evaporated-10)
advmod(wound-14, when-11)
det(ideas-13, the-12)
nsubj(wound-14, ideas-13)
advcl(evaporated-10, wound-14)
compound:prt(wound-14, up-15)
case(press-18, in-16)
det(press-18, the-17)
nmod:in(wound-14, press-18)
punct(evaporated-10, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#support

evaporate :: One lamenter of impeccable credentials is Peter G. Peterson , who in a recent Atlantic complains that we have let our infrastructure crumble , our productivity dwindle , our savings evaporate and our foreign markets dwindle ./.
nummod(lamenter-2, One-1)
nsubj(Peterson-9, lamenter-2)
case(credentials-5, of-3)
amod(credentials-5, impeccable-4)
nmod:of(lamenter-2, credentials-5)
cop(Peterson-9, is-6)
compound(Peterson-9, Peter-7)
compound(Peterson-9, G.-8)
root(ROOT-0, Peterson-9)
nsubj(complains-16, Peterson-9)
punct(Peterson-9, ,-10)
ref(Peterson-9, who-11)
case(Atlantic-15, in-12)
det(Atlantic-15, a-13)
amod(Atlantic-15, recent-14)
nmod:in(complains-16, Atlantic-15)
acl:relcl(Peterson-9, complains-16)
mark(let-20, that-17)
nsubj(let-20, we-18)
aux(let-20, have-19)
ccomp(complains-16, let-20)
nmod:poss(infrastructure-22, our-21)
nsubj(crumble-23, infrastructure-22)
ccomp(let-20, crumble-23)
punct(Peterson-9, ,-24)
nmod:poss(productivity-26, our-25)
nsubj(dwindle-27, productivity-26)
acl:relcl(Peterson-9, dwindle-27)
punct(dwindle-27, ,-28)
nmod:poss(savings-30, our-29)
nsubj(evaporate-31, savings-30)
ccomp(dwindle-27, evaporate-31)
cc(dwindle-27, and-32)
nmod:poss(markets-35, our-33)
amod(markets-35, foreign-34)
nsubj(dwindle-36, markets-35)
acl:relcl(Peterson-9, dwindle-36)
conj:and(dwindle-27, dwindle-36)
punct(Peterson-9, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#savings

evaporate :: Mr. Pickens was badly beaten in last fall 's battle for Newmont Mining , a raid that baffled takeover experts because 26 % of Newmont was already controlled by the ultimate victor , Consolidated Gold Fields PLC. Mesa 's $ 100 million stock profit from the deal -- Mr. Pickens 's estimate -- also evaporated during October 's market crash ./.
compound(Pickens-2, Mr.-1)
nsubjpass(beaten-5, Pickens-2)
auxpass(beaten-5, was-3)
advmod(beaten-5, badly-4)
root(ROOT-0, beaten-5)
case(battle-10, in-6)
amod(fall-8, last-7)
nmod:poss(battle-10, fall-8)
case(fall-8, 's-9)
nmod:in(beaten-5, battle-10)
case(Mining-13, for-11)
compound(Mining-13, Newmont-12)
nmod:for(battle-10, Mining-13)
punct(Mining-13, ,-14)
det(raid-16, a-15)
appos(Mining-13, raid-16)
nsubj(baffled-18, raid-16)
ref(raid-16, that-17)
acl:relcl(raid-16, baffled-18)
compound(experts-20, takeover-19)
dobj(baffled-18, experts-20)
mark(controlled-28, because-21)
nummod(%-23, 26-22)
nsubjpass(controlled-28, %-23)
case(Newmont-25, of-24)
nmod:of(%-23, Newmont-25)
auxpass(controlled-28, was-26)
advmod(controlled-28, already-27)
advcl(baffled-18, controlled-28)
case(victor-32, by-29)
det(victor-32, the-30)
amod(victor-32, ultimate-31)
nmod:agent(controlled-28, victor-32)
punct(Mining-13, ,-33)
compound(PLC.-37, Consolidated-34)
compound(PLC.-37, Gold-35)
compound(PLC.-37, Fields-36)
appos(Mining-13, PLC.-37)
punct(beaten-5, .-38)
nmod:poss(profit-7, Mesa-1)
case(Mesa-1, 's-2)
amod(profit-7, $-3)
compound(million-5, 100-4)
nummod($-3, million-5)
compound(profit-7, stock-6)
root(ROOT-0, profit-7)
case(deal-10, from-8)
det(deal-10, the-9)
nmod:from(profit-7, deal-10)
punct(profit-7, ---11)
compound(Pickens-13, Mr.-12)
nmod:poss(estimate-15, Pickens-13)
case(Pickens-13, 's-14)
dep(profit-7, estimate-15)
punct(evaporated-18, ---16)
advmod(evaporated-18, also-17)
dep(estimate-15, evaporated-18)
case(crash-23, during-19)
nmod:poss(crash-23, October-20)
case(October-20, 's-21)
compound(crash-23, market-22)
nmod:during(evaporated-18, crash-23)
punct(profit-7, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#crash

evaporate :: Tokyo activity was directionless as the heavy trading of the morning session evaporated in the afternoon ./.
compound(activity-2, Tokyo-1)
nsubj(directionless-4, activity-2)
cop(directionless-4, was-3)
root(ROOT-0, directionless-4)
case(trading-8, as-5)
det(trading-8, the-6)
amod(trading-8, heavy-7)
nmod:as(directionless-4, trading-8)
case(session-12, of-9)
det(session-12, the-10)
compound(session-12, morning-11)
nmod:of(trading-8, session-12)
acl(session-12, evaporated-13)
case(afternoon-16, in-14)
det(afternoon-16, the-15)
nmod:in(evaporated-13, afternoon-16)
punct(directionless-4, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#afternoon

evaporate :: The problem is partly due to a thermal vacuum switch in the vapor-control system that is supposed to curb release of evaporated gasoline , the EPA said ./.
det(problem-2, The-1)
nsubj(due-5, problem-2)
cop(due-5, is-3)
advmod(due-5, partly-4)
ccomp(said-27, due-5)
case(switch-10, to-6)
det(switch-10, a-7)
amod(switch-10, thermal-8)
compound(switch-10, vacuum-9)
nmod:to(due-5, switch-10)
nsubjpass(supposed-17, switch-10)
nsubj:xsubj(curb-19, switch-10)
case(system-14, in-11)
det(system-14, the-12)
amod(system-14, vapor-control-13)
nmod:in(switch-10, system-14)
ref(switch-10, that-15)
auxpass(supposed-17, is-16)
acl:relcl(switch-10, supposed-17)
mark(curb-19, to-18)
xcomp(supposed-17, curb-19)
dobj(curb-19, release-20)
case(gasoline-23, of-21)
amod(gasoline-23, evaporated-22)
nmod:of(release-20, gasoline-23)
punct(said-27, ,-24)
det(EPA-26, the-25)
nsubj(said-27, EPA-26)
root(ROOT-0, said-27)
punct(said-27, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#gasoline

evaporate :: But the rally evaporated around midday as rumors began to spread that Wall Street would open lower ./.
cc(evaporated-4, But-1)
det(rally-3, the-2)
nsubj(evaporated-4, rally-3)
root(ROOT-0, evaporated-4)
case(midday-6, around-5)
nmod:around(evaporated-4, midday-6)
mark(began-9, as-7)
nsubj(began-9, rumors-8)
nsubj:xsubj(spread-11, rumors-8)
advcl(evaporated-4, began-9)
mark(spread-11, to-10)
xcomp(began-9, spread-11)
mark(open-16, that-12)
compound(Street-14, Wall-13)
nsubj(open-16, Street-14)
aux(open-16, would-15)
ccomp(spread-11, open-16)
advmod(open-16, lower-17)
punct(evaporated-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#rally

evaporate :: `` As the amount of copper available for delivery rose above the number of contracts that had to be satisfied , the threat of a squeeze ' in the March contract evaporated , '' said William O'Neill , research director for Elders Futures Inc . , New York ./.
punct(evaporated-32, ``-1)
case(amount-4, As-2)
det(amount-4, the-3)
nmod:as(rose-10, amount-4)
case(copper-6, of-5)
nmod:of(amount-4, copper-6)
amod(amount-4, available-7)
case(delivery-9, for-8)
nmod:for(available-7, delivery-9)
ccomp(evaporated-32, rose-10)
case(number-13, above-11)
det(number-13, the-12)
nmod:above(rose-10, number-13)
case(contracts-15, of-14)
nmod:of(number-13, contracts-15)
nsubj(had-17, contracts-15)
nsubj:xsubj(satisfied-20, contracts-15)
ref(contracts-15, that-16)
acl:relcl(contracts-15, had-17)
mark(satisfied-20, to-18)
cop(satisfied-20, be-19)
xcomp(had-17, satisfied-20)
punct(evaporated-32, ,-21)
det(threat-23, the-22)
nsubj(evaporated-32, threat-23)
case(squeeze-26, of-24)
det(squeeze-26, a-25)
nmod:of(threat-23, squeeze-26)
punct(squeeze-26, '-27)
case(contract-31, in-28)
det(contract-31, the-29)
compound(contract-31, March-30)
nmod:in(squeeze-26, contract-31)
dep(said-35, evaporated-32)
punct(evaporated-32, ,-33)
punct(evaporated-32, ''-34)
root(ROOT-0, said-35)
compound(O'Neill-37, William-36)
nsubj(said-35, O'Neill-37)
punct(O'Neill-37, ,-38)
compound(director-40, research-39)
appos(O'Neill-37, director-40)
case(Inc-44, for-41)
compound(Inc-44, Elders-42)
compound(Inc-44, Futures-43)
nmod:for(director-40, Inc-44)
punct(said-35, .-45)
punct(York-3, ,-1)
compound(York-3, New-2)
root(ROOT-0, York-3)
punct(York-3, .-4)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#threat

evaporate :: But confidence in that forecast began to evaporate on March 4 when the Labor Department reported a much larger increase in employment last month than anyone had expected ./.
cc(began-6, But-1)
nsubj(began-6, confidence-2)
nsubj:xsubj(evaporate-8, confidence-2)
case(forecast-5, in-3)
det(forecast-5, that-4)
nmod:in(confidence-2, forecast-5)
root(ROOT-0, began-6)
mark(evaporate-8, to-7)
xcomp(began-6, evaporate-8)
case(March-10, on-9)
nmod:on(evaporate-8, March-10)
nummod(March-10, 4-11)
advmod(reported-16, when-12)
det(Department-15, the-13)
compound(Department-15, Labor-14)
nsubj(reported-16, Department-15)
advcl(evaporate-8, reported-16)
det(increase-20, a-17)
advmod(larger-19, much-18)
amod(increase-20, larger-19)
dobj(reported-16, increase-20)
case(employment-22, in-21)
nmod:in(increase-20, employment-22)
amod(month-24, last-23)
nmod:tmod(reported-16, month-24)
mark(expected-28, than-25)
nsubj(expected-28, anyone-26)
aux(expected-28, had-27)
advcl(reported-16, expected-28)
punct(began-6, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#confidence

evaporate :: `` The day that trade pressures evaporate , {Airbus's} interest in McDonnell Douglas cooperation is over , '' says one U.S. aerospace executive ./.
punct(says-22, ``-1)
det(day-3, The-2)
ccomp(says-22, day-3)
mark(evaporate-7, that-4)
compound(pressures-6, trade-5)
nsubj(evaporate-7, pressures-6)
ccomp(day-3, evaporate-7)
punct(evaporate-7, ,-8)
punct(interest-13, -LCB--9)
nmod:poss(interest-13, Airbus-10)
case(Airbus-10, 's-11)
punct(interest-13, -RCB--12)
nsubj(over-19, interest-13)
case(cooperation-17, in-14)
compound(cooperation-17, McDonnell-15)
compound(cooperation-17, Douglas-16)
nmod:in(interest-13, cooperation-17)
cop(over-19, is-18)
ccomp(evaporate-7, over-19)
punct(says-22, ,-20)
punct(says-22, ''-21)
root(ROOT-0, says-22)
nummod(executive-26, one-23)
compound(executive-26, U.S.-24)
compound(executive-26, aerospace-25)
nsubj(says-22, executive-26)
punct(says-22, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#pressures

evaporate :: But the suit says such rights `` evaporate '' with the sale of his holding ./.
cc(says-4, But-1)
det(suit-3, the-2)
nsubj(says-4, suit-3)
root(ROOT-0, says-4)
amod(rights-6, such-5)
nsubj(evaporate-8, rights-6)
punct(evaporate-8, ``-7)
ccomp(says-4, evaporate-8)
punct(evaporate-8, ''-9)
case(sale-12, with-10)
det(sale-12, the-11)
nmod:with(evaporate-8, sale-12)
case(holding-15, of-13)
nmod:poss(holding-15, his-14)
nmod:of(sale-12, holding-15)
punct(says-4, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#rights

evaporate :: Recent fears of a weakening dollar , a sudden surge in inflation and a possible disappearance of foreign investors from the U.S. markets have all but evaporated ./.
amod(fears-2, Recent-1)
nsubj(evaporated-27, fears-2)
case(dollar-6, of-3)
det(dollar-6, a-4)
compound(dollar-6, weakening-5)
nmod:of(fears-2, dollar-6)
punct(dollar-6, ,-7)
det(surge-10, a-8)
amod(surge-10, sudden-9)
nmod:of(fears-2, surge-10)
conj:and(dollar-6, surge-10)
case(inflation-12, in-11)
nmod:in(surge-10, inflation-12)
cc(dollar-6, and-13)
det(disappearance-16, a-14)
amod(disappearance-16, possible-15)
nmod:of(fears-2, disappearance-16)
conj:and(dollar-6, disappearance-16)
case(investors-19, of-17)
amod(investors-19, foreign-18)
nmod:of(disappearance-16, investors-19)
case(markets-23, from-20)
det(markets-23, the-21)
compound(markets-23, U.S.-22)
nmod:from(disappearance-16, markets-23)
aux(evaporated-27, have-24)
advmod(evaporated-27, all-25)
cc(all-25, but-26)
root(ROOT-0, evaporated-27)
punct(evaporated-27, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#fears

evaporate :: The Nestle spokesman rebutted the anti-monopoly charge , noting that Perulac has only a 15 % share of the evaporated milk market ./.
det(spokesman-3, The-1)
compound(spokesman-3, Nestle-2)
nsubj(rebutted-4, spokesman-3)
root(ROOT-0, rebutted-4)
det(charge-7, the-5)
amod(charge-7, anti-monopoly-6)
dobj(rebutted-4, charge-7)
punct(rebutted-4, ,-8)
advcl(rebutted-4, noting-9)
mark(has-12, that-10)
nsubj(has-12, Perulac-11)
ccomp(noting-9, has-12)
advmod(share-17, only-13)
det(share-17, a-14)
compound(%-16, 15-15)
amod(share-17, %-16)
dobj(has-12, share-17)
case(market-22, of-18)
det(market-22, the-19)
amod(market-22, evaporated-20)
compound(market-22, milk-21)
nmod:of(share-17, market-22)
punct(rebutted-4, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#market

evaporate :: Mr. Pickens was badly beaten in last fall 's battle for Newmont Mining , a raid that baffled takeover experts because 26 % of Newmont was already controlled by the ultimate victor , Consolidated Gold Fields PLC. Mesa 's $ 100 million stock profit from the deal -- Mr. Pickens 's estimate -- also evaporated during October 's market crash ./.
compound(Pickens-2, Mr.-1)
nsubjpass(beaten-5, Pickens-2)
auxpass(beaten-5, was-3)
advmod(beaten-5, badly-4)
root(ROOT-0, beaten-5)
case(battle-10, in-6)
amod(fall-8, last-7)
nmod:poss(battle-10, fall-8)
case(fall-8, 's-9)
nmod:in(beaten-5, battle-10)
case(Mining-13, for-11)
compound(Mining-13, Newmont-12)
nmod:for(battle-10, Mining-13)
punct(Mining-13, ,-14)
det(raid-16, a-15)
appos(Mining-13, raid-16)
nsubj(baffled-18, raid-16)
ref(raid-16, that-17)
acl:relcl(raid-16, baffled-18)
compound(experts-20, takeover-19)
dobj(baffled-18, experts-20)
mark(controlled-28, because-21)
nummod(%-23, 26-22)
nsubjpass(controlled-28, %-23)
case(Newmont-25, of-24)
nmod:of(%-23, Newmont-25)
auxpass(controlled-28, was-26)
advmod(controlled-28, already-27)
advcl(baffled-18, controlled-28)
case(victor-32, by-29)
det(victor-32, the-30)
amod(victor-32, ultimate-31)
nmod:agent(controlled-28, victor-32)
punct(Mining-13, ,-33)
compound(PLC.-37, Consolidated-34)
compound(PLC.-37, Gold-35)
compound(PLC.-37, Fields-36)
appos(Mining-13, PLC.-37)
punct(beaten-5, .-38)
nmod:poss(profit-7, Mesa-1)
case(Mesa-1, 's-2)
amod(profit-7, $-3)
compound(million-5, 100-4)
nummod($-3, million-5)
compound(profit-7, stock-6)
root(ROOT-0, profit-7)
case(deal-10, from-8)
det(deal-10, the-9)
nmod:from(profit-7, deal-10)
punct(profit-7, ---11)
compound(Pickens-13, Mr.-12)
nmod:poss(estimate-15, Pickens-13)
case(Pickens-13, 's-14)
dep(profit-7, estimate-15)
punct(evaporated-18, ---16)
advmod(evaporated-18, also-17)
dep(estimate-15, evaporated-18)
case(crash-23, during-19)
nmod:poss(crash-23, October-20)
case(October-20, 's-21)
compound(crash-23, market-22)
nmod:during(evaporated-18, crash-23)
punct(profit-7, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#crash

evaporate :: But the rally evaporated around midday as rumors began to spread that Wall Street would open lower ./.
cc(evaporated-4, But-1)
det(rally-3, the-2)
nsubj(evaporated-4, rally-3)
root(ROOT-0, evaporated-4)
case(midday-6, around-5)
nmod:around(evaporated-4, midday-6)
mark(began-9, as-7)
nsubj(began-9, rumors-8)
nsubj:xsubj(spread-11, rumors-8)
advcl(evaporated-4, began-9)
mark(spread-11, to-10)
xcomp(began-9, spread-11)
mark(open-16, that-12)
compound(Street-14, Wall-13)
nsubj(open-16, Street-14)
aux(open-16, would-15)
ccomp(spread-11, open-16)
advmod(open-16, lower-17)
punct(evaporated-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#rally

evaporate :: `` As the amount of copper available for delivery rose above the number of contracts that had to be satisfied , the threat of a squeeze ' in the March contract evaporated , '' said William O'Neill , research director for Elders Futures Inc . , New York ./.
punct(evaporated-32, ``-1)
case(amount-4, As-2)
det(amount-4, the-3)
nmod:as(rose-10, amount-4)
case(copper-6, of-5)
nmod:of(amount-4, copper-6)
amod(amount-4, available-7)
case(delivery-9, for-8)
nmod:for(available-7, delivery-9)
ccomp(evaporated-32, rose-10)
case(number-13, above-11)
det(number-13, the-12)
nmod:above(rose-10, number-13)
case(contracts-15, of-14)
nmod:of(number-13, contracts-15)
nsubj(had-17, contracts-15)
nsubj:xsubj(satisfied-20, contracts-15)
ref(contracts-15, that-16)
acl:relcl(contracts-15, had-17)
mark(satisfied-20, to-18)
cop(satisfied-20, be-19)
xcomp(had-17, satisfied-20)
punct(evaporated-32, ,-21)
det(threat-23, the-22)
nsubj(evaporated-32, threat-23)
case(squeeze-26, of-24)
det(squeeze-26, a-25)
nmod:of(threat-23, squeeze-26)
punct(squeeze-26, '-27)
case(contract-31, in-28)
det(contract-31, the-29)
compound(contract-31, March-30)
nmod:in(squeeze-26, contract-31)
dep(said-35, evaporated-32)
punct(evaporated-32, ,-33)
punct(evaporated-32, ''-34)
root(ROOT-0, said-35)
compound(O'Neill-37, William-36)
nsubj(said-35, O'Neill-37)
punct(O'Neill-37, ,-38)
compound(director-40, research-39)
appos(O'Neill-37, director-40)
case(Inc-44, for-41)
compound(Inc-44, Elders-42)
compound(Inc-44, Futures-43)
nmod:for(director-40, Inc-44)
punct(said-35, .-45)
punct(York-3, ,-1)
compound(York-3, New-2)
root(ROOT-0, York-3)
punct(York-3, .-4)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#threat

evaporate :: Tim Thiele , a Saskatchewan area manager for Ducks Unlimited , a conservation group , said thousands of small ponds where ducks nest and breed have evaporated ./.
compound(Thiele-2, Tim-1)
nsubj(said-16, Thiele-2)
punct(Thiele-2, ,-3)
det(manager-7, a-4)
compound(manager-7, Saskatchewan-5)
compound(manager-7, area-6)
appos(Thiele-2, manager-7)
case(Ducks-9, for-8)
nmod:for(manager-7, Ducks-9)
amod(Ducks-9, Unlimited-10)
punct(Ducks-9, ,-11)
det(group-14, a-12)
compound(group-14, conservation-13)
appos(Ducks-9, group-14)
punct(Thiele-2, ,-15)
root(ROOT-0, said-16)
dobj(said-16, thousands-17)
case(ponds-20, of-18)
amod(ponds-20, small-19)
nmod:of(thousands-17, ponds-20)
advmod(evaporated-27, where-21)
nsubj(evaporated-27, ducks-22)
dep(ducks-22, nest-23)
cc(nest-23, and-24)
dep(ducks-22, breed-25)
conj:and(nest-23, breed-25)
aux(evaporated-27, have-26)
acl:relcl(ponds-20, evaporated-27)
punct(said-16, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: evaporate#ducks

examine :: Although SEC investigators have interviewed Mr. Salsbury , it 's not clear what role if any he played in events being examined in the current probe ./.
mark(interviewed-5, Although-1)
compound(investigators-3, SEC-2)
nsubj(interviewed-5, investigators-3)
aux(interviewed-5, have-4)
advcl(clear-12, interviewed-5)
compound(Salsbury-7, Mr.-6)
dobj(interviewed-5, Salsbury-7)
punct(clear-12, ,-8)
nsubj(clear-12, it-9)
cop(clear-12, 's-10)
neg(clear-12, not-11)
root(ROOT-0, clear-12)
det(role-14, what-13)
dobj(clear-12, role-14)
mark(played-18, if-15)
dobj(played-18, any-16)
nsubj(played-18, he-17)
advcl(role-14, played-18)
case(events-20, in-19)
nmod:in(played-18, events-20)
auxpass(examined-22, being-21)
acl(events-20, examined-22)
case(probe-26, in-23)
det(probe-26, the-24)
amod(probe-26, current-25)
nmod:in(examined-22, probe-26)
punct(clear-12, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#being

examine :: The GAO was also to examine if the law has caused excessive red tape for employers , and if the law is being implemented well ./.
det(GAO-2, The-1)
nsubj(examine-6, GAO-2)
cop(examine-6, was-3)
advmod(examine-6, also-4)
mark(examine-6, to-5)
root(ROOT-0, examine-6)
mark(caused-11, if-7)
det(law-9, the-8)
nsubj(caused-11, law-9)
aux(caused-11, has-10)
advcl(examine-6, caused-11)
amod(tape-14, excessive-12)
amod(tape-14, red-13)
dobj(caused-11, tape-14)
case(employers-16, for-15)
nmod:for(caused-11, employers-16)
punct(caused-11, ,-17)
cc(caused-11, and-18)
mark(implemented-24, if-19)
det(law-21, the-20)
nsubjpass(implemented-24, law-21)
aux(implemented-24, is-22)
auxpass(implemented-24, being-23)
advcl(examine-6, implemented-24)
conj:and(caused-11, implemented-24)
advmod(implemented-24, well-25)
punct(examine-6, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#gao

examine :: The discovery has led air-safety investigators to examine a possible link between the Continental craft and two aircraft accidents that involved fuselage cracking ./.
det(discovery-2, The-1)
nsubj(led-4, discovery-2)
aux(led-4, has-3)
root(ROOT-0, led-4)
compound(investigators-6, air-safety-5)
dobj(led-4, investigators-6)
nsubj:xsubj(examine-8, investigators-6)
mark(examine-8, to-7)
xcomp(led-4, examine-8)
det(link-11, a-9)
amod(link-11, possible-10)
dobj(examine-8, link-11)
nsubj(involved-21, link-11)
case(craft-15, between-12)
det(craft-15, the-13)
compound(craft-15, Continental-14)
nmod:between(link-11, craft-15)
cc(craft-15, and-16)
nummod(accidents-19, two-17)
compound(accidents-19, aircraft-18)
nmod:between(link-11, accidents-19)
conj:and(craft-15, accidents-19)
ref(link-11, that-20)
acl:relcl(link-11, involved-21)
compound(cracking-23, fuselage-22)
dobj(involved-21, cracking-23)
punct(led-4, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#link

examine :: Thomas V. Chema , chairman of the utilities commission said it will examine the utilities ' request , especially trying to determine why an accounting change permitted by the commission did n't meet the utilities ' concerns about possible default ./.
compound(Chema-3, Thomas-1)
compound(Chema-3, V.-2)
nsubj(said-10, Chema-3)
punct(Chema-3, ,-4)
appos(Chema-3, chairman-5)
case(commission-9, of-6)
det(commission-9, the-7)
compound(commission-9, utilities-8)
nmod:of(chairman-5, commission-9)
root(ROOT-0, said-10)
nsubj(examine-13, it-11)
aux(examine-13, will-12)
ccomp(said-10, examine-13)
det(utilities-15, the-14)
nmod:poss(request-17, utilities-15)
case(utilities-15, '-16)
dobj(examine-13, request-17)
punct(request-17, ,-18)
advmod(trying-20, especially-19)
acl(request-17, trying-20)
mark(determine-22, to-21)
xcomp(trying-20, determine-22)
advmod(meet-33, why-23)
det(change-26, an-24)
compound(change-26, accounting-25)
nsubj(meet-33, change-26)
acl(change-26, permitted-27)
case(commission-30, by-28)
det(commission-30, the-29)
nmod:by(permitted-27, commission-30)
aux(meet-33, did-31)
neg(meet-33, n't-32)
advcl(determine-22, meet-33)
det(utilities-35, the-34)
nmod:poss(concerns-37, utilities-35)
case(utilities-35, '-36)
dobj(meet-33, concerns-37)
case(default-40, about-38)
amod(default-40, possible-39)
nmod:about(concerns-37, default-40)
punct(said-10, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#request

examine :: `` I 'd like the campaign to critically examine how the candidate spends his time , '' says Richard Wiener , the Michigan Democratic chairman ./.
punct(says-18, ``-1)
nsubj(like-4, I-2)
aux(like-4, 'd-3)
ccomp(says-18, like-4)
det(campaign-6, the-5)
dobj(like-4, campaign-6)
nsubj:xsubj(examine-9, campaign-6)
mark(examine-9, to-7)
advmod(examine-9, critically-8)
xcomp(like-4, examine-9)
advmod(spends-13, how-10)
det(candidate-12, the-11)
nsubj(spends-13, candidate-12)
ccomp(examine-9, spends-13)
nmod:poss(time-15, his-14)
dobj(spends-13, time-15)
punct(says-18, ,-16)
punct(says-18, ''-17)
root(ROOT-0, says-18)
compound(Wiener-20, Richard-19)
nsubj(says-18, Wiener-20)
punct(Wiener-20, ,-21)
det(chairman-25, the-22)
compound(chairman-25, Michigan-23)
compound(chairman-25, Democratic-24)
appos(Wiener-20, chairman-25)
punct(says-18, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#campaign

examine :: A Nielsen spokeswoman said the ratings company is examining `` several different approaches '' to measure commercial ratings , and is running `` several test programs '' using passive meters ./.
det(spokeswoman-3, A-1)
compound(spokeswoman-3, Nielsen-2)
nsubj(said-4, spokeswoman-3)
root(ROOT-0, said-4)
det(company-7, the-5)
compound(company-7, ratings-6)
nsubj(examining-9, company-7)
nsubj(running-22, company-7)
aux(examining-9, is-8)
ccomp(said-4, examining-9)
punct(examining-9, ``-10)
amod(approaches-13, several-11)
amod(approaches-13, different-12)
dobj(examining-9, approaches-13)
punct(examining-9, ''-14)
mark(measure-16, to-15)
advcl(examining-9, measure-16)
amod(ratings-18, commercial-17)
dobj(measure-16, ratings-18)
punct(examining-9, ,-19)
cc(examining-9, and-20)
aux(running-22, is-21)
ccomp(said-4, running-22)
conj:and(examining-9, running-22)
punct(running-22, ``-23)
amod(programs-26, several-24)
compound(programs-26, test-25)
dobj(running-22, programs-26)
punct(running-22, ''-27)
advcl(running-22, using-28)
amod(meters-30, passive-29)
dobj(using-28, meters-30)
punct(said-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#approaches

examine :: `` I privately examined this company 's ability to deal with Japanese equities , and secretly induced the Ministry of Finance to focus on this point , '' says Mr. Miyoda ./.
punct(says-29, ``-1)
nsubj(examined-4, I-2)
nsubj(induced-17, I-2)
advmod(examined-4, privately-3)
ccomp(says-29, examined-4)
det(company-6, this-5)
nmod:poss(ability-8, company-6)
case(company-6, 's-7)
dobj(examined-4, ability-8)
mark(deal-10, to-9)
acl(ability-8, deal-10)
case(equities-13, with-11)
amod(equities-13, Japanese-12)
nmod:with(deal-10, equities-13)
punct(examined-4, ,-14)
cc(examined-4, and-15)
advmod(induced-17, secretly-16)
conj:and(examined-4, induced-17)
ccomp(says-29, induced-17)
det(Ministry-19, the-18)
dobj(induced-17, Ministry-19)
case(Finance-21, of-20)
nmod:of(Ministry-19, Finance-21)
mark(focus-23, to-22)
advcl(induced-17, focus-23)
case(point-26, on-24)
det(point-26, this-25)
nmod:on(focus-23, point-26)
punct(says-29, ,-27)
punct(says-29, ''-28)
root(ROOT-0, says-29)
compound(Miyoda-31, Mr.-30)
nsubj(says-29, Miyoda-31)
punct(says-29, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#ability

examine :: Meanwhile , law-enforcement officials said that investigators are examining the fierce competition that developed between military contractors over a $ 168.9 million contract to build a prototype surveillance blimp for the Navy ./.
advmod(said-5, Meanwhile-1)
punct(said-5, ,-2)
amod(officials-4, law-enforcement-3)
nsubj(said-5, officials-4)
root(ROOT-0, said-5)
mark(examining-9, that-6)
nsubj(examining-9, investigators-7)
aux(examining-9, are-8)
ccomp(said-5, examining-9)
det(competition-12, the-10)
amod(competition-12, fierce-11)
dobj(examining-9, competition-12)
nsubj(developed-14, competition-12)
ref(competition-12, that-13)
acl:relcl(competition-12, developed-14)
case(contractors-17, between-15)
amod(contractors-17, military-16)
nmod:between(developed-14, contractors-17)
case(contract-23, over-18)
det(contract-23, a-19)
amod(contract-23, $-20)
compound(million-22, 168.9-21)
nummod($-20, million-22)
nmod:over(developed-14, contract-23)
mark(build-25, to-24)
acl(contract-23, build-25)
det(blimp-29, a-26)
compound(blimp-29, prototype-27)
compound(blimp-29, surveillance-28)
dobj(build-25, blimp-29)
case(Navy-32, for-30)
det(Navy-32, the-31)
nmod:for(blimp-29, Navy-32)
punct(said-5, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#competition

examine :: The House panel is examining whether Rep. Wright 's 55 % royalties from his book `` Reflections of a Public Man '' amounted to improper conversion of campaign funds to personal use ; the publisher was paid more than $ 250 , 000 by Mr. Wright 's political committees in 1985 and 1986 for campaign work ./.
det(panel-3, The-1)
compound(panel-3, House-2)
nsubj(examining-5, panel-3)
aux(examining-5, is-4)
root(ROOT-0, examining-5)
mark(amounted-23, whether-6)
compound(Wright-8, Rep.-7)
nmod:poss(royalties-12, Wright-8)
case(Wright-8, 's-9)
compound(%-11, 55-10)
amod(royalties-12, %-11)
nsubj(amounted-23, royalties-12)
case(book-15, from-13)
nmod:poss(book-15, his-14)
nmod:from(royalties-12, book-15)
punct(book-15, ``-16)
dep(book-15, Reflections-17)
case(Man-21, of-18)
det(Man-21, a-19)
amod(Man-21, Public-20)
nmod:of(Reflections-17, Man-21)
punct(Man-21, ''-22)
ccomp(examining-5, amounted-23)
case(conversion-26, to-24)
amod(conversion-26, improper-25)
nmod:to(amounted-23, conversion-26)
case(funds-29, of-27)
compound(funds-29, campaign-28)
nmod:of(conversion-26, funds-29)
case(use-32, to-30)
amod(use-32, personal-31)
nmod:to(conversion-26, use-32)
punct(examining-5, ;-33)
det(publisher-35, the-34)
nsubjpass(paid-37, publisher-35)
auxpass(paid-37, was-36)
parataxis(examining-5, paid-37)
advmod($-40, more-38)
mwe(more-38, than-39)
dobj(paid-37, $-40)
nummod($-40, 250-41)
punct($-40, ,-42)
nummod($-40, 000-43)
case(committees-49, by-44)
compound(Wright-46, Mr.-45)
nmod:poss(committees-49, Wright-46)
case(Wright-46, 's-47)
amod(committees-49, political-48)
nmod:agent(paid-37, committees-49)
case(1985-51, in-50)
nmod:in(paid-37, 1985-51)
cc(1985-51, and-52)
nmod:in(paid-37, 1986-53)
conj:and(1985-51, 1986-53)
case(work-56, for-54)
compound(work-56, campaign-55)
nmod:for(paid-37, work-56)
punct(examining-5, .-57)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#panel

examine :: In Taunton , he called together business , labor , political and education leaders to examine the city 's problems ./.
case(Taunton-2, In-1)
nmod:in(called-5, Taunton-2)
punct(called-5, ,-3)
nsubj(called-5, he-4)
root(ROOT-0, called-5)
advmod(called-5, together-6)
compound(leaders-14, business-7)
punct(business-7, ,-8)
conj:and(business-7, labor-9)
compound(leaders-14, labor-9)
punct(business-7, ,-10)
conj:and(business-7, political-11)
compound(leaders-14, political-11)
cc(business-7, and-12)
conj:and(business-7, education-13)
compound(leaders-14, education-13)
dobj(called-5, leaders-14)
mark(examine-16, to-15)
advcl(called-5, examine-16)
det(city-18, the-17)
nmod:poss(problems-20, city-18)
case(city-18, 's-19)
dobj(examine-16, problems-20)
punct(called-5, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#problems

examine :: Mr. Martinelli 's lawyer , Joseph Sharlitt , said he sees `` dangerous '' implications in requiring publishers to disclose quid-pro-quo arrangements: `` It means all business practices of the press can be examined for any tie-in for ads and reprints about companies . ''/''
compound(Martinelli-2, Mr.-1)
nmod:poss(lawyer-4, Martinelli-2)
case(Martinelli-2, 's-3)
nsubj(said-9, lawyer-4)
punct(lawyer-4, ,-5)
compound(Sharlitt-7, Joseph-6)
appos(lawyer-4, Sharlitt-7)
punct(lawyer-4, ,-8)
root(ROOT-0, said-9)
nsubj(sees-11, he-10)
ccomp(said-9, sees-11)
punct(implications-15, ``-12)
amod(implications-15, dangerous-13)
punct(implications-15, ''-14)
dobj(sees-11, implications-15)
mark(requiring-17, in-16)
acl(implications-15, requiring-17)
dobj(requiring-17, publishers-18)
nsubj:xsubj(disclose-20, publishers-18)
mark(disclose-20, to-19)
xcomp(requiring-17, disclose-20)
amod(arrangements-22, quid-pro-quo-21)
dobj(disclose-20, arrangements-22)
punct(said-9, :-23)
punct(said-9, ``-24)
nsubj(means-26, It-25)
ccomp(said-9, means-26)
det(practices-29, all-27)
compound(practices-29, business-28)
nsubjpass(examined-35, practices-29)
nsubj(reprints-42, practices-29)
case(press-32, of-30)
det(press-32, the-31)
nmod:of(practices-29, press-32)
aux(examined-35, can-33)
auxpass(examined-35, be-34)
ccomp(means-26, examined-35)
case(tie-in-38, for-36)
det(tie-in-38, any-37)
nmod:for(examined-35, tie-in-38)
case(ads-40, for-39)
nmod:for(tie-in-38, ads-40)
cc(examined-35, and-41)
ccomp(means-26, reprints-42)
conj:and(examined-35, reprints-42)
case(companies-44, about-43)
nmod:about(reprints-42, companies-44)
punct(said-9, .-45)
punct(said-9, ''-46)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: examine#practices

examine :: Drought concerns are so great that `` they 're examining thunderstorms through a microscope , '' hoping every cloud will bring a downpour , says David Taylor , meteorologist for Weather Services Corp. of Bedford , Mass ./.
compound(concerns-2, Drought-1)
nsubj(great-5, concerns-2)
cop(great-5, are-3)
advmod(great-5, so-4)
ccomp(says-25, great-5)
mark(examining-10, that-6)
punct(examining-10, ``-7)
nsubj(examining-10, they-8)
aux(examining-10, 're-9)
ccomp(great-5, examining-10)
dobj(examining-10, thunderstorms-11)
case(microscope-14, through-12)
det(microscope-14, a-13)
nmod:through(examining-10, microscope-14)
punct(great-5, ,-15)
punct(great-5, ''-16)
xcomp(great-5, hoping-17)
det(cloud-19, every-18)
nsubj(bring-21, cloud-19)
aux(bring-21, will-20)
ccomp(hoping-17, bring-21)
det(downpour-23, a-22)
dobj(bring-21, downpour-23)
punct(says-25, ,-24)
root(ROOT-0, says-25)
compound(Taylor-27, David-26)
nsubj(says-25, Taylor-27)
punct(Taylor-27, ,-28)
appos(Taylor-27, meteorologist-29)
case(Corp.-33, for-30)
compound(Corp.-33, Weather-31)
compound(Corp.-33, Services-32)
nmod:for(meteorologist-29, Corp.-33)
case(Bedford-35, of-34)
nmod:of(Corp.-33, Bedford-35)
punct(Bedford-35, ,-36)
appos(Bedford-35, Mass-37)
punct(says-25, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#thunderstorms

examine :: British Trade and Industry Secretary Lord Young said he plans to appoint an independent investigator to examine his department 's regulatory oversight of James Ferguson Holdings PLC , an investment-management company whose Barlow Clowes Gilt Managers Ltd. unit is being liquidated ./.
compound(Trade-2, British-1)
nsubj(said-8, Trade-2)
cc(Trade-2, and-3)
compound(Young-7, Industry-4)
compound(Young-7, Secretary-5)
compound(Young-7, Lord-6)
conj:and(Trade-2, Young-7)
nsubj(said-8, Young-7)
root(ROOT-0, said-8)
nsubj(plans-10, he-9)
nsubj:xsubj(appoint-12, he-9)
ccomp(said-8, plans-10)
mark(appoint-12, to-11)
xcomp(plans-10, appoint-12)
det(investigator-15, an-13)
amod(investigator-15, independent-14)
dobj(appoint-12, investigator-15)
mark(examine-17, to-16)
advcl(appoint-12, examine-17)
nmod:poss(department-19, his-18)
nmod:poss(oversight-22, department-19)
case(department-19, 's-20)
amod(oversight-22, regulatory-21)
dobj(examine-17, oversight-22)
case(PLC-27, of-23)
compound(PLC-27, James-24)
compound(PLC-27, Ferguson-25)
compound(PLC-27, Holdings-26)
nmod:of(oversight-22, PLC-27)
punct(PLC-27, ,-28)
det(company-31, an-29)
amod(company-31, investment-management-30)
appos(PLC-27, company-31)
nmod:poss(unit-38, company-31)
ref(company-31, whose-32)
compound(unit-38, Barlow-33)
compound(unit-38, Clowes-34)
compound(unit-38, Gilt-35)
compound(unit-38, Managers-36)
compound(unit-38, Ltd.-37)
nsubjpass(liquidated-41, unit-38)
aux(liquidated-41, is-39)
auxpass(liquidated-41, being-40)
acl:relcl(company-31, liquidated-41)
punct(said-8, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#plc

examine :: Two years later a planning group examined the town 's economic future , leading to the incorporation of the Greencastle Development Center in September 1986 ./.
nummod(years-2, Two-1)
nmod:npmod(later-3, years-2)
advmod(examined-7, later-3)
det(group-6, a-4)
compound(group-6, planning-5)
nsubj(examined-7, group-6)
root(ROOT-0, examined-7)
det(town-9, the-8)
nmod:poss(future-12, town-9)
case(town-9, 's-10)
amod(future-12, economic-11)
dobj(examined-7, future-12)
punct(examined-7, ,-13)
advcl(examined-7, leading-14)
case(incorporation-17, to-15)
det(incorporation-17, the-16)
nmod:to(leading-14, incorporation-17)
case(Center-22, of-18)
det(Center-22, the-19)
compound(Center-22, Greencastle-20)
compound(Center-22, Development-21)
nmod:of(incorporation-17, Center-22)
case(September-24, in-23)
nmod:in(incorporation-17, September-24)
nummod(September-24, 1986-25)
punct(examined-7, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#future

examine :: A U.S. District Court judge in Pittsburgh , who was examining BNS 's compliance with federal bank-borrowing regulations , has said he would remove his injunction if Koppers and BNS agreed to merge ./.
det(judge-5, A-1)
compound(judge-5, U.S.-2)
compound(judge-5, District-3)
compound(judge-5, Court-4)
nsubj(examining-11, judge-5)
nsubj(said-21, judge-5)
case(Pittsburgh-7, in-6)
nmod:in(judge-5, Pittsburgh-7)
punct(judge-5, ,-8)
ref(judge-5, who-9)
aux(examining-11, was-10)
acl:relcl(judge-5, examining-11)
nmod:poss(compliance-14, BNS-12)
case(BNS-12, 's-13)
dobj(examining-11, compliance-14)
case(regulations-18, with-15)
amod(regulations-18, federal-16)
amod(regulations-18, bank-borrowing-17)
nmod:with(compliance-14, regulations-18)
punct(judge-5, ,-19)
aux(said-21, has-20)
root(ROOT-0, said-21)
nsubj(remove-24, he-22)
aux(remove-24, would-23)
ccomp(said-21, remove-24)
nmod:poss(injunction-26, his-25)
dobj(remove-24, injunction-26)
mark(agreed-31, if-27)
nsubj(agreed-31, Koppers-28)
nsubj:xsubj(merge-33, Koppers-28)
cc(Koppers-28, and-29)
conj:and(Koppers-28, BNS-30)
nsubj(agreed-31, BNS-30)
nsubj:xsubj(merge-33, BNS-30)
advcl(remove-24, agreed-31)
mark(merge-33, to-32)
xcomp(agreed-31, merge-33)
punct(said-21, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#compliance

examine :: `` We never openly examined the legacy of the Japanese occupation , nor the days of Syngman Rhee or Park Chung Hee ./.
root(ROOT-0, ``-1)
nsubj(examined-5, We-2)
neg(examined-5, never-3)
advmod(examined-5, openly-4)
root(``-1, examined-5)
det(legacy-7, the-6)
dobj(examined-5, legacy-7)
case(occupation-11, of-8)
det(occupation-11, the-9)
amod(occupation-11, Japanese-10)
nmod:of(legacy-7, occupation-11)
punct(examined-5, ,-12)
cc(examined-5, nor-13)
det(days-15, the-14)
root(``-1, days-15)
conj:nor(examined-5, days-15)
case(Rhee-18, of-16)
compound(Rhee-18, Syngman-17)
nmod:of(days-15, Rhee-18)
cc(Rhee-18, or-19)
compound(Hee-22, Park-20)
compound(Hee-22, Chung-21)
nmod:of(days-15, Hee-22)
conj:or(Rhee-18, Hee-22)
punct(examined-5, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#occupation

examine :: Federal investigators also are examining whether Peck employees may have emulated any improper trading for their own or the firm 's account , people familiar with the investigation said ./.
amod(investigators-2, Federal-1)
nsubj(examining-5, investigators-2)
advmod(examining-5, also-3)
aux(examining-5, are-4)
ccomp(said-29, examining-5)
mark(emulated-11, whether-6)
compound(employees-8, Peck-7)
nsubj(emulated-11, employees-8)
aux(emulated-11, may-9)
aux(emulated-11, have-10)
ccomp(examining-5, emulated-11)
det(trading-14, any-12)
amod(trading-14, improper-13)
dobj(emulated-11, trading-14)
case(own-17, for-15)
nmod:poss(own-17, their-16)
nmod:for(trading-14, own-17)
cc(own-17, or-18)
det(firm-20, the-19)
nmod:poss(account-22, firm-20)
case(firm-20, 's-21)
nmod:for(trading-14, account-22)
conj:or(own-17, account-22)
punct(said-29, ,-23)
nsubj(said-29, people-24)
amod(people-24, familiar-25)
case(investigation-28, with-26)
det(investigation-28, the-27)
nmod:with(familiar-25, investigation-28)
root(ROOT-0, said-29)
punct(said-29, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#investigators

examine :: First , they should examine their systems , especially personal computers , research computers and other end-user systems that operate outside conventional data processing departments , to make sure that only authorized programs can be used and that only authorized people can use the machines either directly or remotely ./.
advmod(examine-5, First-1)
punct(examine-5, ,-2)
nsubj(examine-5, they-3)
aux(examine-5, should-4)
root(ROOT-0, examine-5)
nmod:poss(systems-7, their-6)
dobj(examine-5, systems-7)
punct(systems-7, ,-8)
advmod(computers-11, especially-9)
amod(computers-11, personal-10)
appos(systems-7, computers-11)
punct(computers-11, ,-12)
compound(computers-14, research-13)
appos(systems-7, computers-14)
conj:and(computers-11, computers-14)
cc(computers-11, and-15)
amod(systems-18, other-16)
amod(systems-18, end-user-17)
appos(systems-7, systems-18)
conj:and(computers-11, systems-18)
nsubj(operate-20, systems-18)
ref(systems-18, that-19)
acl:relcl(systems-18, operate-20)
amod(departments-25, outside-21)
amod(departments-25, conventional-22)
compound(departments-25, data-23)
compound(departments-25, processing-24)
dobj(operate-20, departments-25)
punct(systems-7, ,-26)
mark(make-28, to-27)
advcl(examine-5, make-28)
xcomp(make-28, sure-29)
mark(used-36, that-30)
advmod(programs-33, only-31)
amod(programs-33, authorized-32)
nsubjpass(used-36, programs-33)
aux(used-36, can-34)
auxpass(used-36, be-35)
ccomp(sure-29, used-36)
cc(used-36, and-37)
mark(use-43, that-38)
advmod(people-41, only-39)
amod(people-41, authorized-40)
nsubj(use-43, people-41)
aux(use-43, can-42)
ccomp(sure-29, use-43)
conj:and(used-36, use-43)
det(machines-45, the-44)
dobj(use-43, machines-45)
cc:preconj(or-48, either-46)
advmod(or-48, directly-47)
advmod(use-43, or-48)
advmod(or-48, remotely-49)
punct(examine-5, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#systems

examine :: In fact , the debate found him at one point cross-examining the senator like a prosecutor ./.
case(fact-2, In-1)
nmod:in(found-6, fact-2)
punct(found-6, ,-3)
det(debate-5, the-4)
nsubj(found-6, debate-5)
root(ROOT-0, found-6)
dobj(found-6, him-7)
case(point-10, at-8)
nummod(point-10, one-9)
nmod:at(found-6, point-10)
acl(point-10, cross-examining-11)
det(senator-13, the-12)
dobj(cross-examining-11, senator-13)
case(prosecutor-16, like-14)
det(prosecutor-16, a-15)
nmod:like(cross-examining-11, prosecutor-16)
punct(found-6, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

examine :: Other hospitals , she says , routinely admitted patients for a colonoscopy -LRB- in which a tube is inserted to examine the colon -RRB- that could have been performed in a doctor 's office for $ 500 ./.
amod(hospitals-2, Other-1)
nsubj(admitted-8, hospitals-2)
punct(says-5, ,-3)
nsubj(says-5, she-4)
parataxis(admitted-8, says-5)
punct(says-5, ,-6)
advmod(admitted-8, routinely-7)
root(ROOT-0, admitted-8)
dobj(admitted-8, patients-9)
case(colonoscopy-12, for-10)
det(colonoscopy-12, a-11)
nmod:for(patients-9, colonoscopy-12)
nmod:in(inserted-19, colonoscopy-12)
punct(inserted-19, -LRB--13)
case(which-15, in-14)
ref(colonoscopy-12, which-15)
det(tube-17, a-16)
nsubjpass(inserted-19, tube-17)
nsubj:xsubj(examine-21, tube-17)
auxpass(inserted-19, is-18)
acl:relcl(colonoscopy-12, inserted-19)
mark(examine-21, to-20)
xcomp(inserted-19, examine-21)
det(colon-23, the-22)
dobj(examine-21, colon-23)
nsubjpass(performed-29, colon-23)
punct(colon-23, -RRB--24)
ref(colon-23, that-25)
aux(performed-29, could-26)
aux(performed-29, have-27)
auxpass(performed-29, been-28)
acl:relcl(colon-23, performed-29)
case(office-34, in-30)
det(doctor-32, a-31)
nmod:poss(office-34, doctor-32)
case(doctor-32, 's-33)
nmod:in(performed-29, office-34)
case(500-37, for-35)
dep(500-37, $-36)
nmod:for(performed-29, 500-37)
punct(admitted-8, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#colon

examine :: MDT makes sterility-assurance systems and examining and operating equipment for the hospital , medical , dental and laboratory markets ./.
nsubj(makes-2, MDT-1)
nsubj(examining-6, MDT-1)
root(ROOT-0, makes-2)
amod(systems-4, sterility-assurance-3)
dobj(makes-2, systems-4)
cc(makes-2, and-5)
conj:and(makes-2, examining-6)
cc(examining-6, and-7)
amod(equipment-9, operating-8)
conj:and(makes-2, equipment-9)
conj:and(examining-6, equipment-9)
case(hospital-12, for-10)
det(hospital-12, the-11)
nmod:for(examining-6, hospital-12)
punct(hospital-12, ,-13)
amod(hospital-12, medical-14)
punct(hospital-12, ,-15)
amod(markets-19, dental-16)
cc(dental-16, and-17)
conj:and(dental-16, laboratory-18)
amod(markets-19, laboratory-18)
appos(hospital-12, markets-19)
punct(makes-2, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#mdt

examine :: Before buying into such a clone , it would be worthwhile to examine the current track record of the fund being cloned ./.
mark(buying-2, Before-1)
advcl(worthwhile-11, buying-2)
case(clone-6, into-3)
det:predet(clone-6, such-4)
det(clone-6, a-5)
nmod:into(buying-2, clone-6)
punct(worthwhile-11, ,-7)
nsubj(worthwhile-11, it-8)
nsubj:xsubj(examine-13, it-8)
aux(worthwhile-11, would-9)
cop(worthwhile-11, be-10)
root(ROOT-0, worthwhile-11)
mark(examine-13, to-12)
xcomp(worthwhile-11, examine-13)
det(record-17, the-14)
amod(record-17, current-15)
compound(record-17, track-16)
dobj(examine-13, record-17)
case(fund-20, of-18)
det(fund-20, the-19)
nmod:of(record-17, fund-20)
auxpass(cloned-22, being-21)
acl(record-17, cloned-22)
punct(worthwhile-11, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#fund

examine :: The Bank Board is examining various alternatives that would bypass the need for any California state approvals ./.
det(Board-3, The-1)
compound(Board-3, Bank-2)
nsubj(examining-5, Board-3)
aux(examining-5, is-4)
root(ROOT-0, examining-5)
amod(alternatives-7, various-6)
dobj(examining-5, alternatives-7)
nsubj(bypass-10, alternatives-7)
ref(alternatives-7, that-8)
aux(bypass-10, would-9)
acl:relcl(alternatives-7, bypass-10)
det(need-12, the-11)
dobj(bypass-10, need-12)
case(approvals-17, for-13)
det(approvals-17, any-14)
compound(approvals-17, California-15)
compound(approvals-17, state-16)
nmod:for(need-12, approvals-17)
punct(examining-5, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#alternatives

examine :: Periodically , a nurse emerges from one of eight examining rooms to bellow out the name of the next patient ./.
advmod(emerges-5, Periodically-1)
punct(emerges-5, ,-2)
det(nurse-4, a-3)
nsubj(emerges-5, nurse-4)
nsubj:xsubj(bellow-13, nurse-4)
root(ROOT-0, emerges-5)
case(one-7, from-6)
nmod:from(emerges-5, one-7)
case(rooms-11, of-8)
nummod(rooms-11, eight-9)
amod(rooms-11, examining-10)
nmod:of(one-7, rooms-11)
mark(bellow-13, to-12)
xcomp(emerges-5, bellow-13)
compound:prt(bellow-13, out-14)
det(name-16, the-15)
dobj(bellow-13, name-16)
case(patient-20, of-17)
det(patient-20, the-18)
amod(patient-20, next-19)
nmod:of(name-16, patient-20)
punct(emerges-5, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#rooms

examine :: Even if doctors examine a woman as soon as she comes in , they often have no time to tell if her fetus is sufficiently developed or if a Caesarean section is crucial ./.
advmod(examine-4, Even-1)
mark(examine-4, if-2)
nsubj(examine-4, doctors-3)
advcl(have-16, examine-4)
det(woman-6, a-5)
dobj(examine-4, woman-6)
advmod(soon-8, as-7)
advmod(examine-4, soon-8)
mark(comes-11, as-9)
nsubj(comes-11, she-10)
advcl(soon-8, comes-11)
compound:prt(comes-11, in-12)
punct(have-16, ,-13)
nsubj(have-16, they-14)
advmod(have-16, often-15)
root(ROOT-0, have-16)
neg(time-18, no-17)
dobj(have-16, time-18)
mark(tell-20, to-19)
acl(time-18, tell-20)
mark(developed-26, if-21)
nmod:poss(fetus-23, her-22)
nsubjpass(developed-26, fetus-23)
auxpass(developed-26, is-24)
advmod(developed-26, sufficiently-25)
advcl(tell-20, developed-26)
cc(developed-26, or-27)
mark(crucial-33, if-28)
det(section-31, a-29)
amod(section-31, Caesarean-30)
nsubj(crucial-33, section-31)
cop(crucial-33, is-32)
advcl(tell-20, crucial-33)
conj:or(developed-26, crucial-33)
punct(have-16, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#woman

examine :: France will examine these proposals closely -- and `` intends to put forward her own proposals , '' he said ./.
nsubj(examine-3, France-1)
nsubj(intends-10, France-1)
nsubj:xsubj(put-12, France-1)
aux(examine-3, will-2)
ccomp(said-20, examine-3)
det(proposals-5, these-4)
dobj(examine-3, proposals-5)
advmod(examine-3, closely-6)
punct(examine-3, ---7)
cc(examine-3, and-8)
punct(examine-3, ``-9)
conj:and(examine-3, intends-10)
ccomp(said-20, intends-10)
mark(put-12, to-11)
xcomp(intends-10, put-12)
advmod(put-12, forward-13)
nmod:poss(proposals-16, her-14)
amod(proposals-16, own-15)
dobj(put-12, proposals-16)
punct(said-20, ,-17)
punct(said-20, ''-18)
nsubj(said-20, he-19)
root(ROOT-0, said-20)
punct(said-20, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#proposals

examine :: But sources inside the company acknowledge that management has examined such options as a restructuring or recapitalization , or a friendly transaction with another company ./.
cc(acknowledge-6, But-1)
nsubj(acknowledge-6, sources-2)
case(company-5, inside-3)
det(company-5, the-4)
nmod:inside(sources-2, company-5)
root(ROOT-0, acknowledge-6)
mark(examined-10, that-7)
nsubj(examined-10, management-8)
aux(examined-10, has-9)
ccomp(acknowledge-6, examined-10)
amod(options-12, such-11)
dobj(examined-10, options-12)
case(restructuring-15, as-13)
det(restructuring-15, a-14)
nmod:as(options-12, restructuring-15)
cc(restructuring-15, or-16)
nmod:as(options-12, recapitalization-17)
conj:or(restructuring-15, recapitalization-17)
punct(restructuring-15, ,-18)
cc(restructuring-15, or-19)
det(transaction-22, a-20)
amod(transaction-22, friendly-21)
nmod:as(options-12, transaction-22)
conj:or(restructuring-15, transaction-22)
case(company-25, with-23)
det(company-25, another-24)
nmod:with(transaction-22, company-25)
punct(acknowledge-6, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#options

examine :: Then , examining supervisors ' performance ratings of managers and professionals in a large manufacturing company , they found the married men consistently drawing higher performance ratings than comparable single men and far more likely to be promoted into higher paying jobs ./.
advmod(found-19, Then-1)
punct(found-19, ,-2)
advcl(found-19, examining-3)
nmod:poss(ratings-7, supervisors-4)
case(supervisors-4, '-5)
compound(ratings-7, performance-6)
dobj(examining-3, ratings-7)
case(managers-9, of-8)
nmod:of(ratings-7, managers-9)
cc(managers-9, and-10)
nmod:of(ratings-7, professionals-11)
conj:and(managers-9, professionals-11)
case(company-16, in-12)
det(company-16, a-13)
amod(company-16, large-14)
compound(company-16, manufacturing-15)
nmod:in(examining-3, company-16)
punct(found-19, ,-17)
nsubj(found-19, they-18)
root(ROOT-0, found-19)
det(men-22, the-20)
amod(men-22, married-21)
nsubj(drawing-24, men-22)
nsubj(likely-35, men-22)
nsubjpass:xsubj(promoted-38, men-22)
advmod(drawing-24, consistently-23)
dep(found-19, drawing-24)
amod(ratings-27, higher-25)
compound(ratings-27, performance-26)
dobj(drawing-24, ratings-27)
case(men-31, than-28)
amod(men-31, comparable-29)
amod(men-31, single-30)
nmod:than(ratings-27, men-31)
cc(drawing-24, and-32)
advmod(more-34, far-33)
advmod(likely-35, more-34)
dep(found-19, likely-35)
conj:and(drawing-24, likely-35)
mark(promoted-38, to-36)
auxpass(promoted-38, be-37)
xcomp(likely-35, promoted-38)
case(jobs-42, into-39)
amod(jobs-42, higher-40)
amod(jobs-42, paying-41)
nmod:into(promoted-38, jobs-42)
punct(found-19, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#managers

examine :: It would be most interesting to see an article that would examine the market value of a college degree by separating out for comparison a group of degreed and non-degreed individuals with similar social and economic backgrounds and levels of intelligence ./.
nsubj(interesting-5, It-1)
nsubj:xsubj(see-7, It-1)
aux(interesting-5, would-2)
cop(interesting-5, be-3)
advmod(interesting-5, most-4)
root(ROOT-0, interesting-5)
mark(see-7, to-6)
xcomp(interesting-5, see-7)
det(article-9, an-8)
dobj(see-7, article-9)
nsubj(examine-12, article-9)
ref(article-9, that-10)
aux(examine-12, would-11)
acl:relcl(article-9, examine-12)
det(value-15, the-13)
compound(value-15, market-14)
dobj(examine-12, value-15)
case(degree-19, of-16)
det(degree-19, a-17)
compound(degree-19, college-18)
nmod:of(value-15, degree-19)
mark(separating-21, by-20)
advcl(examine-12, separating-21)
compound:prt(separating-21, out-22)
case(comparison-24, for-23)
nmod:for(separating-21, comparison-24)
det(group-26, a-25)
dep(comparison-24, group-26)
case(degreed-28, of-27)
nmod:of(group-26, degreed-28)
cc(degreed-28, and-29)
amod(individuals-31, non-degreed-30)
nmod:of(group-26, individuals-31)
conj:and(degreed-28, individuals-31)
case(backgrounds-37, with-32)
amod(backgrounds-37, similar-33)
amod(backgrounds-37, social-34)
cc(social-34, and-35)
conj:and(social-34, economic-36)
amod(backgrounds-37, economic-36)
nmod:with(group-26, backgrounds-37)
cc(backgrounds-37, and-38)
nmod:with(group-26, levels-39)
conj:and(backgrounds-37, levels-39)
case(intelligence-41, of-40)
nmod:of(levels-39, intelligence-41)
punct(interesting-5, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#degree

examine :: Watch these acclaimed motor-mouths crank it to the max , in order to `` examine all aspects of the electoral process '' in a single hour ./.
csubj(crank-5, Watch-1)
det(motor-mouths-4, these-2)
amod(motor-mouths-4, acclaimed-3)
dobj(Watch-1, motor-mouths-4)
root(ROOT-0, crank-5)
dobj(crank-5, it-6)
case(max-9, to-7)
det(max-9, the-8)
nmod:to(crank-5, max-9)
punct(crank-5, ,-10)
mark(examine-15, in-11)
mwe(in-11, order-12)
mark(examine-15, to-13)
punct(examine-15, ``-14)
advcl(crank-5, examine-15)
det(aspects-17, all-16)
dobj(examine-15, aspects-17)
case(process-21, of-18)
det(process-21, the-19)
amod(process-21, electoral-20)
nmod:of(aspects-17, process-21)
punct(examine-15, ''-22)
case(hour-26, in-23)
det(hour-26, a-24)
amod(hour-26, single-25)
nmod:in(examine-15, hour-26)
punct(crank-5, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#process

examine :: Dr. Kinlen , who directs the university 's Cancer Epidemiology Unit , examined leukemia deaths from a U.S. study that had tracked veterans ' smoking between 1954 and 1969 ./.
compound(Kinlen-2, Dr.-1)
nsubj(directs-5, Kinlen-2)
nsubj(examined-13, Kinlen-2)
punct(Kinlen-2, ,-3)
ref(Kinlen-2, who-4)
acl:relcl(Kinlen-2, directs-5)
det(university-7, the-6)
nmod:poss(Unit-11, university-7)
case(university-7, 's-8)
compound(Unit-11, Cancer-9)
compound(Unit-11, Epidemiology-10)
dobj(directs-5, Unit-11)
punct(Kinlen-2, ,-12)
root(ROOT-0, examined-13)
compound(deaths-15, leukemia-14)
dobj(examined-13, deaths-15)
case(study-19, from-16)
det(study-19, a-17)
compound(study-19, U.S.-18)
nmod:from(deaths-15, study-19)
nsubj(tracked-22, study-19)
ref(study-19, that-20)
aux(tracked-22, had-21)
acl:relcl(study-19, tracked-22)
nmod:poss(smoking-25, veterans-23)
case(veterans-23, '-24)
dobj(tracked-22, smoking-25)
case(1954-27, between-26)
nmod:between(smoking-25, 1954-27)
cc(1954-27, and-28)
nmod:between(smoking-25, 1969-29)
conj:and(1954-27, 1969-29)
punct(examined-13, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#deaths

examine :: City Capital Associates , a group led by Steven and Mitchell Rales of Washington , D.C . , indicated that it would be willing to raise its bid for the company to $ 72 a share from $ 70 if it can examine certain non-public documents ./.
compound(Associates-3, City-1)
compound(Associates-3, Capital-2)
root(ROOT-0, Associates-3)
punct(Associates-3, ,-4)
det(group-6, a-5)
appos(Associates-3, group-6)
acl(group-6, led-7)
case(Steven-9, by-8)
nmod:by(led-7, Steven-9)
cc(Steven-9, and-10)
compound(Rales-12, Mitchell-11)
nmod:by(led-7, Rales-12)
conj:and(Steven-9, Rales-12)
case(Washington-14, of-13)
nmod:of(Steven-9, Washington-14)
punct(Washington-14, ,-15)
appos(Washington-14, D.C-16)
punct(Associates-3, .-17)
punct(indicated-2, ,-1)
root(ROOT-0, indicated-2)
mark(willing-7, that-3)
nsubj(willing-7, it-4)
nsubj:xsubj(raise-9, it-4)
aux(willing-7, would-5)
cop(willing-7, be-6)
ccomp(indicated-2, willing-7)
mark(raise-9, to-8)
xcomp(willing-7, raise-9)
nmod:poss(bid-11, its-10)
dobj(raise-9, bid-11)
case(company-14, for-12)
det(company-14, the-13)
nmod:for(bid-11, company-14)
case(72-17, to-15)
dep(72-17, $-16)
nmod:to(raise-9, 72-17)
det(share-19, a-18)
nmod:npmod(72-17, share-19)
case(70-22, from-20)
dep(70-22, $-21)
nmod:from(raise-9, 70-22)
mark(examine-26, if-23)
nsubj(examine-26, it-24)
aux(examine-26, can-25)
advcl(willing-7, examine-26)
amod(documents-29, certain-27)
amod(documents-29, non-public-28)
dobj(examine-26, documents-29)
punct(indicated-2, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#documents

examine :: The study , they said , will examine the feasibility of selling the sporty vehicle being jointly developed by the companies , which are both affiliated with General Motors Corp ./.
det(study-2, The-1)
nsubj(examine-8, study-2)
punct(said-5, ,-3)
nsubj(said-5, they-4)
parataxis(examine-8, said-5)
punct(said-5, ,-6)
aux(examine-8, will-7)
root(ROOT-0, examine-8)
det(feasibility-10, the-9)
dobj(examine-8, feasibility-10)
mark(selling-12, of-11)
acl(feasibility-10, selling-12)
det(vehicle-15, the-13)
amod(vehicle-15, sporty-14)
nsubjpass(developed-18, vehicle-15)
auxpass(developed-18, being-16)
advmod(developed-18, jointly-17)
advcl(selling-12, developed-18)
case(companies-21, by-19)
det(companies-21, the-20)
nmod:agent(developed-18, companies-21)
nsubjpass(affiliated-26, companies-21)
punct(companies-21, ,-22)
ref(companies-21, which-23)
auxpass(affiliated-26, are-24)
dep(affiliated-26, both-25)
acl:relcl(companies-21, affiliated-26)
case(Corp-30, with-27)
compound(Corp-30, General-28)
compound(Corp-30, Motors-29)
nmod:with(affiliated-26, Corp-30)
punct(examine-8, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#feasibility

examine :: `` You could change husbands , but not the situation , '' she thinks as she examines snack foods ./.
punct(thinks-14, ``-1)
nsubj(change-4, You-2)
aux(change-4, could-3)
ccomp(thinks-14, change-4)
dobj(change-4, husbands-5)
punct(change-4, ,-6)
cc(change-4, but-7)
neg(situation-10, not-8)
det(situation-10, the-9)
conj:but(change-4, situation-10)
ccomp(thinks-14, situation-10)
punct(thinks-14, ,-11)
punct(thinks-14, ''-12)
nsubj(thinks-14, she-13)
root(ROOT-0, thinks-14)
mark(examines-17, as-15)
nsubj(examines-17, she-16)
advcl(thinks-14, examines-17)
compound(foods-19, snack-18)
dobj(examines-17, foods-19)
punct(thinks-14, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#foods

examine :: Still , the divergence of the two candidates ' views becomes clear in examining their proposals for dealing with the strifetorn regions of Central America and Southern Africa ./.
advmod(becomes-11, Still-1)
punct(becomes-11, ,-2)
det(divergence-4, the-3)
nsubj(becomes-11, divergence-4)
case(views-10, of-5)
det(candidates-8, the-6)
nummod(candidates-8, two-7)
nmod:poss(views-10, candidates-8)
case(candidates-8, '-9)
nmod:of(divergence-4, views-10)
root(ROOT-0, becomes-11)
xcomp(becomes-11, clear-12)
mark(examining-14, in-13)
advcl(becomes-11, examining-14)
nmod:poss(proposals-16, their-15)
dobj(examining-14, proposals-16)
mark(dealing-18, for-17)
acl(proposals-16, dealing-18)
case(regions-22, with-19)
det(regions-22, the-20)
compound(regions-22, strifetorn-21)
nmod:with(dealing-18, regions-22)
case(America-25, of-23)
compound(America-25, Central-24)
nmod:of(regions-22, America-25)
cc(America-25, and-26)
compound(Africa-28, Southern-27)
nmod:of(regions-22, Africa-28)
conj:and(America-25, Africa-28)
punct(becomes-11, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#proposals

examine :: By filing a complaint , the citizen forces a government investigation , because the Justice Department is required to examine each False Claims suit ./.
mark(filing-2, By-1)
advcl(forces-8, filing-2)
det(complaint-4, a-3)
dobj(filing-2, complaint-4)
punct(forces-8, ,-5)
det(citizen-7, the-6)
nsubj(forces-8, citizen-7)
root(ROOT-0, forces-8)
det(investigation-11, a-9)
compound(investigation-11, government-10)
dobj(forces-8, investigation-11)
punct(forces-8, ,-12)
mark(required-18, because-13)
det(Department-16, the-14)
compound(Department-16, Justice-15)
nsubjpass(required-18, Department-16)
nsubj:xsubj(examine-20, Department-16)
auxpass(required-18, is-17)
advcl(forces-8, required-18)
mark(examine-20, to-19)
xcomp(required-18, examine-20)
det(suit-24, each-21)
amod(suit-24, False-22)
compound(suit-24, Claims-23)
dobj(examine-20, suit-24)
punct(forces-8, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#suit

examine :: My late father-in-law , Jean Le Gorre , once recounted an early experience in the French army during World War I where on bivouac he examined his field ration -- a piece of issue `` hardtack . ''/''
nmod:poss(father-in-law-3, My-1)
amod(father-in-law-3, late-2)
nsubj(recounted-10, father-in-law-3)
punct(father-in-law-3, ,-4)
compound(Gorre-7, Jean-5)
compound(Gorre-7, Le-6)
appos(father-in-law-3, Gorre-7)
punct(father-in-law-3, ,-8)
advmod(recounted-10, once-9)
root(ROOT-0, recounted-10)
det(experience-13, an-11)
amod(experience-13, early-12)
dobj(recounted-10, experience-13)
case(army-17, in-14)
det(army-17, the-15)
amod(army-17, French-16)
nmod:in(experience-13, army-17)
case(War-20, during-18)
compound(War-20, World-19)
nmod:during(experience-13, War-20)
dep(War-20, I-21)
advmod(examined-26, where-22)
case(bivouac-24, on-23)
nmod:on(examined-26, bivouac-24)
nsubj(examined-26, he-25)
acl:relcl(I-21, examined-26)
nmod:poss(ration-29, his-27)
compound(ration-29, field-28)
dobj(examined-26, ration-29)
punct(ration-29, ---30)
det(piece-32, a-31)
dep(ration-29, piece-32)
case(issue-34, of-33)
nmod:of(piece-32, issue-34)
punct(piece-32, ``-35)
dep(piece-32, hardtack-36)
punct(recounted-10, .-37)
punct(recounted-10, ''-38)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: examine#ration

examine :: In other sections , Col. Elting examines the telegraph , map-making , military intelligence and counterintelligence , the importance of flags and banners and of drums and trumpets ./.
case(sections-3, In-1)
amod(sections-3, other-2)
nmod:in(examines-7, sections-3)
punct(examines-7, ,-4)
compound(Elting-6, Col.-5)
nsubj(examines-7, Elting-6)
root(ROOT-0, examines-7)
det(telegraph-9, the-8)
dobj(examines-7, telegraph-9)
punct(telegraph-9, ,-10)
dobj(examines-7, map-making-11)
conj:and(telegraph-9, map-making-11)
punct(telegraph-9, ,-12)
amod(intelligence-14, military-13)
dobj(examines-7, intelligence-14)
conj:and(telegraph-9, intelligence-14)
cc(telegraph-9, and-15)
dobj(examines-7, counterintelligence-16)
conj:and(telegraph-9, counterintelligence-16)
punct(examines-7, ,-17)
det(importance-19, the-18)
dobj(examines-7, importance-19)
dobj(examines-7, importance-19')
dobj(examines-7, importance-19'')
conj:and(importance-19, importance-19')
conj:and(importance-19, importance-19'')
case(flags-21, of-20)
nmod:of(importance-19, flags-21)
cc(importance-19, and-22)
conj(flags-21, banners-23)
cc(importance-19, and-24)
case(drums-26, of-25)
nmod:of(importance-19', drums-26)
cc(importance-19, and-27)
dobj(examines-7, trumpets-28)
conj:and(importance-19, trumpets-28)
punct(examines-7, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#telegraph

examine :: It is way past time for us to examine our relationship with Japan , its treatment of U.S. inventors , and our treatment of patent applications sent from Japan or its local companies ./.
nsubj(time-5, It-1)
cop(time-5, is-2)
advmod(time-5, way-3)
amod(time-5, past-4)
root(ROOT-0, time-5)
mark(examine-9, for-6)
nsubj(examine-9, us-7)
mark(examine-9, to-8)
acl(time-5, examine-9)
nmod:poss(relationship-11, our-10)
dobj(examine-9, relationship-11)
case(Japan-13, with-12)
nmod:with(relationship-11, Japan-13)
punct(time-5, ,-14)
nmod:poss(treatment-16, its-15)
root(,-14, treatment-16)
case(inventors-19, of-17)
compound(inventors-19, U.S.-18)
nmod:of(treatment-16, inventors-19)
punct(treatment-16, ,-20)
cc(treatment-16, and-21)
nmod:poss(treatment-23, our-22)
root(,-14, treatment-23)
conj:and(treatment-16, treatment-23)
case(applications-26, of-24)
compound(applications-26, patent-25)
nmod:of(treatment-23, applications-26)
acl(applications-26, sent-27)
case(Japan-29, from-28)
nmod:from(sent-27, Japan-29)
cc(Japan-29, or-30)
nmod:poss(companies-33, its-31)
amod(companies-33, local-32)
nmod:from(sent-27, companies-33)
conj:or(Japan-29, companies-33)
punct(treatment-16, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#relationship

examine :: The researchers called in healthy members of the Mormon family with the cancer clustering and examined them with a fiber optic device inserted through the bowel that produces images of the inside of the colon ./.
det(researchers-2, The-1)
root(ROOT-0, researchers-2)
acl(researchers-2, called-3)
case(members-6, in-4)
amod(members-6, healthy-5)
nmod:in(called-3, members-6)
case(family-10, of-7)
det(family-10, the-8)
amod(family-10, Mormon-9)
nmod:of(members-6, family-10)
case(clustering-14, with-11)
det(clustering-14, the-12)
compound(clustering-14, cancer-13)
nmod:with(called-3, clustering-14)
cc(researchers-2, and-15)
conj:and(researchers-2, examined-16)
dobj(examined-16, them-17)
case(device-22, with-18)
det(device-22, a-19)
compound(device-22, fiber-20)
amod(device-22, optic-21)
nmod:with(examined-16, device-22)
acl(device-22, inserted-23)
case(bowel-26, through-24)
det(bowel-26, the-25)
nmod:through(inserted-23, bowel-26)
nsubj(produces-28, bowel-26)
ref(bowel-26, that-27)
acl:relcl(bowel-26, produces-28)
dobj(produces-28, images-29)
case(inside-32, of-30)
det(inside-32, the-31)
nmod:of(images-29, inside-32)
case(colon-35, of-33)
det(colon-35, the-34)
nmod:of(inside-32, colon-35)
punct(researchers-2, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#them

examine :: Before examining them , Mr. Araujo says he has to read the MiG flight manual , an unwieldly volume he discovered was written in Chinese ./.
mark(examining-2, Before-1)
advcl(says-7, examining-2)
dobj(examining-2, them-3)
punct(says-7, ,-4)
compound(Araujo-6, Mr.-5)
nsubj(says-7, Araujo-6)
root(ROOT-0, says-7)
nsubj(has-9, he-8)
nsubj:xsubj(read-11, he-8)
ccomp(says-7, has-9)
mark(read-11, to-10)
xcomp(has-9, read-11)
det(manual-15, the-12)
compound(manual-15, MiG-13)
compound(manual-15, flight-14)
nsubjpass(written-23, manual-15)
punct(manual-15, ,-16)
det(volume-19, an-17)
amod(volume-19, unwieldly-18)
appos(manual-15, volume-19)
nsubj(discovered-21, he-20)
acl:relcl(volume-19, discovered-21)
auxpass(written-23, was-22)
ccomp(read-11, written-23)
case(Chinese-25, in-24)
nmod:in(written-23, Chinese-25)
punct(says-7, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#them

examine :: But even though we invested a considerable amount of time in examining and reexamining Coke 's and Pepsi 's consumer research , we could n't find any fatal flaws . ''/''
cc(find-26, But-1)
advmod(invested-5, even-2)
mark(invested-5, though-3)
nsubj(invested-5, we-4)
advcl(find-26, invested-5)
det(amount-8, a-6)
amod(amount-8, considerable-7)
dobj(invested-5, amount-8)
case(time-10, of-9)
nmod:of(amount-8, time-10)
mark(examining-12, in-11)
advcl(invested-5, examining-12)
cc(examining-12, and-13)
advcl(invested-5, reexamining-14)
conj:and(examining-12, reexamining-14)
nmod:poss(research-21, Coke-15)
case(Coke-15, 's-16)
cc(Coke-15, and-17)
conj:and(Coke-15, Pepsi-18)
nmod:poss(research-21, Pepsi-18)
case(Pepsi-18, 's-19)
compound(research-21, consumer-20)
dobj(examining-12, research-21)
punct(find-26, ,-22)
nsubj(find-26, we-23)
aux(find-26, could-24)
neg(find-26, n't-25)
root(ROOT-0, find-26)
det(flaws-29, any-27)
amod(flaws-29, fatal-28)
dobj(find-26, flaws-29)
punct(find-26, .-30)
punct(find-26, ''-31)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: examine#research

examine :: Data rooms opened this week , and for each of the eight packages , at least 10 companies plan to examine the information , Mr. Ketelsen said ./.
compound(rooms-2, Data-1)
nsubj(opened-3, rooms-2)
root(ROOT-0, opened-3)
det(week-5, this-4)
nmod:tmod(opened-3, week-5)
punct(opened-3, ,-6)
cc(opened-3, and-7)
case(each-9, for-8)
nmod:for(said-27, each-9)
case(packages-13, of-10)
det(packages-13, the-11)
nummod(packages-13, eight-12)
nmod:of(each-9, packages-13)
punct(each-9, ,-14)
case(least-16, at-15)
nmod:npmod(10-17, least-16)
nummod(companies-18, 10-17)
nsubj(plan-19, companies-18)
nsubj:xsubj(examine-21, companies-18)
acl:relcl(each-9, plan-19)
mark(examine-21, to-20)
xcomp(plan-19, examine-21)
det(information-23, the-22)
dobj(examine-21, information-23)
punct(each-9, ,-24)
compound(Ketelsen-26, Mr.-25)
nsubj(said-27, Ketelsen-26)
conj:and(opened-3, said-27)
punct(opened-3, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#information

examine :: They examined the death certificates of all children who were killed when hit by a car in Washington state between 1979 and 1983 ./.
nsubj(examined-2, They-1)
root(ROOT-0, examined-2)
det(certificates-5, the-3)
compound(certificates-5, death-4)
dobj(examined-2, certificates-5)
case(children-8, of-6)
det(children-8, all-7)
nmod:of(certificates-5, children-8)
nsubjpass(killed-11, children-8)
ref(children-8, who-9)
auxpass(killed-11, were-10)
acl:relcl(children-8, killed-11)
advmod(hit-13, when-12)
advcl(killed-11, hit-13)
case(car-16, by-14)
det(car-16, a-15)
nmod:by(hit-13, car-16)
case(state-19, in-17)
compound(state-19, Washington-18)
nmod:in(car-16, state-19)
case(1979-21, between-20)
nmod:between(hit-13, 1979-21)
cc(1979-21, and-22)
nmod:between(hit-13, 1983-23)
conj:and(1979-21, 1983-23)
punct(examined-2, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#certificates

examine :: Mr. McKenzie alleged that the parliamentary committee examining the language bill refused to hear testimony from opponents , a charge also made by civil-rights groups ./.
compound(McKenzie-2, Mr.-1)
nsubj(alleged-3, McKenzie-2)
root(ROOT-0, alleged-3)
mark(refused-12, that-4)
det(committee-7, the-5)
amod(committee-7, parliamentary-6)
nsubj(refused-12, committee-7)
nsubj:xsubj(hear-14, committee-7)
acl(committee-7, examining-8)
det(bill-11, the-9)
compound(bill-11, language-10)
dobj(examining-8, bill-11)
ccomp(alleged-3, refused-12)
mark(hear-14, to-13)
xcomp(refused-12, hear-14)
dobj(hear-14, testimony-15)
case(opponents-17, from-16)
nmod:from(testimony-15, opponents-17)
punct(opponents-17, ,-18)
det(charge-20, a-19)
appos(opponents-17, charge-20)
advmod(made-22, also-21)
acl(charge-20, made-22)
case(groups-25, by-23)
compound(groups-25, civil-rights-24)
nmod:by(made-22, groups-25)
punct(alleged-3, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#bill

examine :: In the Airbus case , pilots and safety officials say the plane 's speed and the speed of its engines before the crash are likely to be examined closely by French authorities ./.
case(case-4, In-1)
det(case-4, the-2)
compound(case-4, Airbus-3)
nmod:in(say-10, case-4)
punct(say-10, ,-5)
compound(officials-9, pilots-6)
cc(pilots-6, and-7)
conj:and(pilots-6, safety-8)
compound(officials-9, safety-8)
nsubj(say-10, officials-9)
root(ROOT-0, say-10)
det(plane-12, the-11)
nmod:poss(speed-14, plane-12)
case(plane-12, 's-13)
nsubj(likely-25, speed-14)
nsubjpass:xsubj(examined-28, speed-14)
cc(speed-14, and-15)
det(speed-17, the-16)
conj:and(speed-14, speed-17)
nsubj(likely-25, speed-17)
nsubjpass:xsubj(examined-28, speed-17)
case(engines-20, of-18)
nmod:poss(engines-20, its-19)
nmod:of(speed-17, engines-20)
case(crash-23, before-21)
det(crash-23, the-22)
nmod:before(speed-14, crash-23)
cop(likely-25, are-24)
ccomp(say-10, likely-25)
mark(examined-28, to-26)
auxpass(examined-28, be-27)
xcomp(likely-25, examined-28)
advmod(examined-28, closely-29)
case(authorities-32, by-30)
amod(authorities-32, French-31)
nmod:agent(examined-28, authorities-32)
punct(say-10, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#be

examine :: `` It can now be examined in more detail if the model for restructuring the aerospace industry will hold water , '' Mr. Reuter said ./.
punct(examined-6, ``-1)
nsubjpass(examined-6, It-2)
aux(examined-6, can-3)
advmod(examined-6, now-4)
auxpass(examined-6, be-5)
ccomp(said-25, examined-6)
case(detail-9, in-7)
amod(detail-9, more-8)
nmod:in(examined-6, detail-9)
mark(hold-19, if-10)
det(model-12, the-11)
nsubj(hold-19, model-12)
mark(restructuring-14, for-13)
acl(model-12, restructuring-14)
det(industry-17, the-15)
compound(industry-17, aerospace-16)
dobj(restructuring-14, industry-17)
aux(hold-19, will-18)
advcl(examined-6, hold-19)
dobj(hold-19, water-20)
punct(said-25, ,-21)
punct(said-25, ''-22)
compound(Reuter-24, Mr.-23)
nsubj(said-25, Reuter-24)
root(ROOT-0, said-25)
punct(said-25, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#it

examine :: He said these proposals `` ought always to be listened to with great precaution , and ought never to be adopted till after having been long and carefully examined , not only with the most scrupulous , but with the most suspicious attention ./.
nsubj(said-2, He-1)
root(ROOT-0, said-2)
det(proposals-4, these-3)
nsubj(ought-6, proposals-4)
nsubjpass:xsubj(listened-10, proposals-4)
nsubjpass(adopted-21, proposals-4)
punct(ought-6, ``-5)
ccomp(said-2, ought-6)
advmod(ought-6, always-7)
mark(listened-10, to-8)
auxpass(listened-10, be-9)
xcomp(ought-6, listened-10)
case(precaution-14, to-11)
case(precaution-14, with-12)
amod(precaution-14, great-13)
nmod:with(listened-10, precaution-14)
punct(ought-6, ,-15)
cc(ought-6, and-16)
aux(adopted-21, ought-17)
neg(adopted-21, never-18)
mark(adopted-21, to-19)
auxpass(adopted-21, be-20)
ccomp(said-2, adopted-21)
conj:and(ought-6, adopted-21)
advmod(adopted-21, till-22)
mark(examined-29, after-23)
aux(examined-29, having-24)
auxpass(examined-29, been-25)
advmod(examined-29, long-26)
cc(long-26, and-27)
conj:and(long-26, carefully-28)
advmod(examined-29, carefully-28)
advcl(adopted-21, examined-29)
advcl(adopted-21, examined-29')
conj:but(examined-29, examined-29')
punct(examined-29, ,-30)
neg(only-32, not-31)
cc:preconj(scrupulous-36, only-32)
case(scrupulous-36, with-33)
det(scrupulous-36, the-34)
advmod(scrupulous-36, most-35)
nmod:with(examined-29, scrupulous-36)
punct(scrupulous-36, ,-37)
cc(examined-29, but-38)
case(attention-43, with-39)
det(attention-43, the-40)
advmod(suspicious-42, most-41)
amod(attention-43, suspicious-42)
nmod:with(examined-29', attention-43)
punct(said-2, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#been

examine :: Jan Workinger emerges from American Airlines Flight 115 and examines the faces around Gate 25 ./.
compound(Workinger-2, Jan-1)
nsubj(emerges-3, Workinger-2)
nsubj(examines-10, Workinger-2)
root(ROOT-0, emerges-3)
case(Flight-7, from-4)
compound(Flight-7, American-5)
compound(Flight-7, Airlines-6)
nmod:from(emerges-3, Flight-7)
nummod(Flight-7, 115-8)
cc(emerges-3, and-9)
conj:and(emerges-3, examines-10)
det(faces-12, the-11)
dobj(examines-10, faces-12)
case(Gate-14, around-13)
nmod:around(examines-10, Gate-14)
nummod(Gate-14, 25-15)
punct(emerges-3, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#faces

examine :: In an even more barbed letter sent earlier in the month , James Miller , director of the Office of Management and Budget , charged that in examining the controversial issue of shareholder voting rights , the SEC `` lost sight of an important value -- that of competition . ''/''
case(letter-6, In-1)
det(letter-6, an-2)
advmod(more-4, even-3)
advmod(barbed-5, more-4)
amod(letter-6, barbed-5)
nmod:in(charged-25, letter-6)
acl(letter-6, sent-7)
advmod(sent-7, earlier-8)
case(month-11, in-9)
det(month-11, the-10)
nmod:in(sent-7, month-11)
punct(charged-25, ,-12)
compound(Miller-14, James-13)
nsubj(charged-25, Miller-14)
punct(Miller-14, ,-15)
appos(Miller-14, director-16)
case(Office-19, of-17)
det(Office-19, the-18)
nmod:of(director-16, Office-19)
case(Management-21, of-20)
nmod:of(Office-19, Management-21)
cc(Management-21, and-22)
nmod:of(Office-19, Budget-23)
conj:and(Management-21, Budget-23)
punct(Miller-14, ,-24)
root(ROOT-0, charged-25)
mark(lost-40, that-26)
mark(examining-28, in-27)
advcl(lost-40, examining-28)
det(issue-31, the-29)
amod(issue-31, controversial-30)
dobj(examining-28, issue-31)
case(rights-35, of-32)
compound(rights-35, shareholder-33)
compound(rights-35, voting-34)
nmod:of(issue-31, rights-35)
punct(lost-40, ,-36)
det(SEC-38, the-37)
nsubj(lost-40, SEC-38)
punct(lost-40, ``-39)
ccomp(charged-25, lost-40)
dobj(lost-40, sight-41)
case(value-45, of-42)
det(value-45, an-43)
amod(value-45, important-44)
nmod:of(sight-41, value-45)
punct(lost-40, ---46)
dep(lost-40, that-47)
case(competition-49, of-48)
nmod:of(that-47, competition-49)
punct(charged-25, .-50)
punct(charged-25, ''-51)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: examine#rights

examine :: A New York radio real-estate adviser has been touting Camden 's proximity to Philadelphia , and a busload of speculators drove through the city recently to examine homes ./.
det(adviser-6, A-1)
compound(adviser-6, New-2)
compound(adviser-6, York-3)
compound(adviser-6, radio-4)
compound(adviser-6, real-estate-5)
nsubj(touting-9, adviser-6)
aux(touting-9, has-7)
aux(touting-9, been-8)
root(ROOT-0, touting-9)
nmod:poss(proximity-12, Camden-10)
case(Camden-10, 's-11)
dobj(touting-9, proximity-12)
case(Philadelphia-14, to-13)
nmod:to(touting-9, Philadelphia-14)
punct(touting-9, ,-15)
cc(touting-9, and-16)
det(busload-18, a-17)
conj:and(touting-9, busload-18)
case(speculators-20, of-19)
nmod:of(busload-18, speculators-20)
acl(busload-18, drove-21)
case(city-24, through-22)
det(city-24, the-23)
nmod:through(drove-21, city-24)
advmod(drove-21, recently-25)
mark(examine-27, to-26)
xcomp(drove-21, examine-27)
dobj(examine-27, homes-28)
punct(touting-9, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#homes

examine :: He urged the Norwegian government to press its rights to inspect the Dimona reactor and examine any materials , such as plutonium , possibly made from using the heavy water ./.
nsubj(urged-2, He-1)
root(ROOT-0, urged-2)
det(government-5, the-3)
amod(government-5, Norwegian-4)
dobj(urged-2, government-5)
nsubj:xsubj(press-7, government-5)
mark(press-7, to-6)
xcomp(urged-2, press-7)
nmod:poss(rights-9, its-8)
dobj(press-7, rights-9)
mark(inspect-11, to-10)
acl(rights-9, inspect-11)
det(reactor-14, the-12)
compound(reactor-14, Dimona-13)
dobj(inspect-11, reactor-14)
cc(inspect-11, and-15)
acl(rights-9, examine-16)
conj:and(inspect-11, examine-16)
det(materials-18, any-17)
dobj(examine-16, materials-18)
punct(materials-18, ,-19)
case(plutonium-22, such-20)
mwe(such-20, as-21)
nmod:such_as(materials-18, plutonium-22)
punct(materials-18, ,-23)
advmod(made-25, possibly-24)
acl(materials-18, made-25)
mark(using-27, from-26)
advcl(made-25, using-27)
det(water-30, the-28)
amod(water-30, heavy-29)
dobj(using-27, water-30)
punct(urged-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#materials

examine :: While Mr. McClean had n't fully examined the materials released by Gazelle , he noted that `` the gallium-arsenide market has really been in a chicken-or-egg situation , '' with prices remaining high in part because they are produced in such small volume , and demand curtailed because prices are high ./.
mark(examined-7, While-1)
compound(McClean-3, Mr.-2)
nsubj(examined-7, McClean-3)
aux(examined-7, had-4)
neg(examined-7, n't-5)
advmod(examined-7, fully-6)
advcl(noted-15, examined-7)
det(materials-9, the-8)
dobj(examined-7, materials-9)
acl(materials-9, released-10)
case(Gazelle-12, by-11)
nmod:by(released-10, Gazelle-12)
punct(noted-15, ,-13)
nsubj(noted-15, he-14)
root(ROOT-0, noted-15)
mark(situation-27, that-16)
punct(situation-27, ``-17)
det(market-20, the-18)
compound(market-20, gallium-arsenide-19)
nsubj(situation-27, market-20)
aux(situation-27, has-21)
advmod(situation-27, really-22)
cop(situation-27, been-23)
case(situation-27, in-24)
det(situation-27, a-25)
amod(situation-27, chicken-or-egg-26)
ccomp(noted-15, situation-27)
punct(situation-27, ,-28)
punct(situation-27, ''-29)
mark(remaining-32, with-30)
nsubj(remaining-32, prices-31)
advcl(situation-27, remaining-32)
advmod(remaining-32, high-33)
case(part-35, in-34)
nmod:in(remaining-32, part-35)
mark(produced-39, because-36)
nsubjpass(produced-39, they-37)
auxpass(produced-39, are-38)
advcl(remaining-32, produced-39)
case(volume-43, in-40)
amod(volume-43, such-41)
amod(volume-43, small-42)
nmod:in(produced-39, volume-43)
punct(remaining-32, ,-44)
cc(remaining-32, and-45)
nsubj(curtailed-47, demand-46)
advcl(situation-27, curtailed-47)
conj:and(remaining-32, curtailed-47)
mark(high-51, because-48)
nsubj(high-51, prices-49)
cop(high-51, are-50)
advcl(curtailed-47, high-51)
punct(noted-15, .-52)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#materials

examine :: But that has n't occurred ; meanwhile , it may be a healthy thing that politicians are on notice that character issues may be more deeply examined ./.
cc(occurred-5, But-1)
nsubj(occurred-5, that-2)
aux(occurred-5, has-3)
neg(occurred-5, n't-4)
root(ROOT-0, occurred-5)
punct(occurred-5, ;-6)
advmod(thing-14, meanwhile-7)
punct(thing-14, ,-8)
nsubj(thing-14, it-9)
aux(thing-14, may-10)
cop(thing-14, be-11)
det(thing-14, a-12)
amod(thing-14, healthy-13)
parataxis(occurred-5, thing-14)
mark(notice-19, that-15)
nsubj(notice-19, politicians-16)
cop(notice-19, are-17)
case(notice-19, on-18)
ccomp(thing-14, notice-19)
mark(examined-27, that-20)
compound(issues-22, character-21)
nsubjpass(examined-27, issues-22)
aux(examined-27, may-23)
auxpass(examined-27, be-24)
advmod(deeply-26, more-25)
advmod(examined-27, deeply-26)
ccomp(notice-19, examined-27)
punct(occurred-5, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#issues

examine :: Prompted by news reports of alleged misappropriation of funds , the SEC visited the firm 's New York headquarters last week with the intention of examining business records ./.
advcl(visited-13, Prompted-1)
case(reports-4, by-2)
compound(reports-4, news-3)
nmod:by(Prompted-1, reports-4)
case(misappropriation-7, of-5)
amod(misappropriation-7, alleged-6)
nmod:of(reports-4, misappropriation-7)
case(funds-9, of-8)
nmod:of(misappropriation-7, funds-9)
punct(visited-13, ,-10)
det(SEC-12, the-11)
nsubj(visited-13, SEC-12)
root(ROOT-0, visited-13)
det(firm-15, the-14)
nmod:poss(headquarters-19, firm-15)
case(firm-15, 's-16)
compound(headquarters-19, New-17)
compound(headquarters-19, York-18)
dobj(visited-13, headquarters-19)
amod(week-21, last-20)
nmod:tmod(visited-13, week-21)
case(intention-24, with-22)
det(intention-24, the-23)
nmod:with(visited-13, intention-24)
mark(examining-26, of-25)
acl(intention-24, examining-26)
compound(records-28, business-27)
dobj(examining-26, records-28)
punct(visited-13, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#records

examine :: They said the agency 's enforcement division examined suspicious trading with total potential profit of more than $ 1 million in the May 1986 takeover of Sperry by Burroughs ./.
nsubj(said-2, They-1)
root(ROOT-0, said-2)
det(agency-4, the-3)
nmod:poss(division-7, agency-4)
case(agency-4, 's-5)
compound(division-7, enforcement-6)
nsubj(examined-8, division-7)
ccomp(said-2, examined-8)
amod(trading-10, suspicious-9)
dobj(examined-8, trading-10)
case(profit-14, with-11)
amod(profit-14, total-12)
amod(profit-14, potential-13)
nmod:with(trading-10, profit-14)
case($-18, of-15)
advmod($-18, more-16)
mwe(more-16, than-17)
nmod:of(profit-14, $-18)
compound(million-20, 1-19)
nummod($-18, million-20)
case(takeover-25, in-21)
det(takeover-25, the-22)
compound(takeover-25, May-23)
nummod(takeover-25, 1986-24)
nmod:in(trading-10, takeover-25)
case(Sperry-27, of-26)
nmod:of(takeover-25, Sperry-27)
case(Burroughs-29, by-28)
nmod:by(takeover-25, Burroughs-29)
punct(said-2, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#trading

examine :: During that period I had made a number of wilderness trips into war zones in an effort to examine the reliability of the many conflicting human-rights reports and present an overall picture of the Contra war 's human toll ./.
case(period-3, During-1)
det(period-3, that-2)
nmod:during(made-6, period-3)
nsubj(made-6, I-4)
aux(made-6, had-5)
root(ROOT-0, made-6)
det(number-8, a-7)
dobj(made-6, number-8)
case(trips-11, of-9)
compound(trips-11, wilderness-10)
nmod:of(number-8, trips-11)
case(zones-14, into-12)
compound(zones-14, war-13)
nmod:into(made-6, zones-14)
case(effort-17, in-15)
det(effort-17, an-16)
nmod:in(made-6, effort-17)
mark(examine-19, to-18)
acl(effort-17, examine-19)
det(reliability-21, the-20)
dobj(examine-19, reliability-21)
case(reports-27, of-22)
det(reports-27, the-23)
amod(reports-27, many-24)
amod(reports-27, conflicting-25)
amod(reports-27, human-rights-26)
nmod:of(reliability-21, reports-27)
cc(examine-19, and-28)
acl(effort-17, present-29)
conj:and(examine-19, present-29)
det(picture-32, an-30)
amod(picture-32, overall-31)
dobj(present-29, picture-32)
case(toll-39, of-33)
det(war-36, the-34)
compound(war-36, Contra-35)
nmod:poss(toll-39, war-36)
case(war-36, 's-37)
amod(toll-39, human-38)
nmod:of(picture-32, toll-39)
punct(made-6, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#reports

examine :: A recent study by HHS for the first time examines how many Americans use such treatments , as well as the kinds of `` cures '' they try ./.
det(study-3, A-1)
amod(study-3, recent-2)
nsubj(examines-10, study-3)
case(HHS-5, by-4)
nmod:by(study-3, HHS-5)
case(time-9, for-6)
det(time-9, the-7)
amod(time-9, first-8)
nmod:for(study-3, time-9)
root(ROOT-0, examines-10)
advmod(many-12, how-11)
amod(Americans-13, many-12)
nsubj(use-14, Americans-13)
ccomp(examines-10, use-14)
amod(treatments-16, such-15)
dobj(use-14, treatments-16)
punct(use-14, ,-17)
cc(use-14, as-18)
mwe(as-18, well-19)
mwe(as-18, as-20)
det(kinds-22, the-21)
ccomp(examines-10, kinds-22)
conj:and(use-14, kinds-22)
case(cures-25, of-23)
punct(cures-25, ``-24)
nmod:of(kinds-22, cures-25)
punct(cures-25, ''-26)
nsubj(try-28, they-27)
acl:relcl(cures-25, try-28)
punct(examines-10, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#study

examine :: Only 15 areas of treatment are examined , and several areas where questionable cures flourish -- the weight-loss catagory , for example -- are n't included ./.
advmod(15-2, Only-1)
nummod(areas-3, 15-2)
nsubjpass(examined-7, areas-3)
case(treatment-5, of-4)
nmod:of(areas-3, treatment-5)
auxpass(examined-7, are-6)
root(ROOT-0, examined-7)
punct(examined-7, ,-8)
cc(examined-7, and-9)
amod(areas-11, several-10)
nsubjpass(included-26, areas-11)
advmod(flourish-15, where-12)
amod(cures-14, questionable-13)
nsubj(flourish-15, cures-14)
acl:relcl(areas-11, flourish-15)
punct(areas-11, ---16)
det(catagory-19, the-17)
amod(catagory-19, weight-loss-18)
dep(areas-11, catagory-19)
punct(catagory-19, ,-20)
case(example-22, for-21)
nmod:for(catagory-19, example-22)
punct(areas-11, ---23)
auxpass(included-26, are-24)
neg(included-26, n't-25)
conj:and(examined-7, included-26)
punct(examined-7, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#areas

examine :: `` We ca n't go any further until the commission has in fact examined the application , '' she said ./.
punct(said-20, ``-1)
nsubj(go-5, We-2)
aux(go-5, ca-3)
neg(go-5, n't-4)
ccomp(said-20, go-5)
det(further-7, any-6)
advmod(go-5, further-7)
mark(examined-14, until-8)
det(commission-10, the-9)
nsubj(examined-14, commission-10)
aux(examined-14, has-11)
case(fact-13, in-12)
nmod:in(examined-14, fact-13)
advcl(go-5, examined-14)
det(application-16, the-15)
dobj(examined-14, application-16)
punct(said-20, ,-17)
punct(said-20, ''-18)
nsubj(said-20, she-19)
root(ROOT-0, said-20)
punct(said-20, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#application

examine :: Immunex said the study examined patients with lymph cancers such as leukemia ./.
nsubj(said-2, Immunex-1)
root(ROOT-0, said-2)
det(study-4, the-3)
nsubj(examined-5, study-4)
ccomp(said-2, examined-5)
dobj(examined-5, patients-6)
case(cancers-9, with-7)
compound(cancers-9, lymph-8)
nmod:with(patients-6, cancers-9)
case(leukemia-12, such-10)
mwe(such-10, as-11)
nmod:such_as(cancers-9, leukemia-12)
punct(said-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#patients

examine :: Each area gets a general overview , then is examined beach-by-beach , with basic highway directions , a brief history , and lists of cultural points of interest , noteworthy sealife , indigenous flora and fauna , as well as available parking , camping and picnic facilities ./.
det(area-2, Each-1)
nsubj(gets-3, area-2)
root(ROOT-0, gets-3)
det(overview-6, a-4)
amod(overview-6, general-5)
dobj(gets-3, overview-6)
punct(gets-3, ,-7)
advmod(examined-10, then-8)
auxpass(examined-10, is-9)
parataxis(gets-3, examined-10)
dobj(examined-10, beach-by-beach-11)
punct(beach-by-beach-11, ,-12)
case(directions-16, with-13)
amod(directions-16, basic-14)
compound(directions-16, highway-15)
nmod:with(beach-by-beach-11, directions-16)
punct(directions-16, ,-17)
det(history-20, a-18)
amod(history-20, brief-19)
nmod:with(beach-by-beach-11, history-20)
conj:and(directions-16, history-20)
punct(directions-16, ,-21)
cc(directions-16, and-22)
nmod:with(beach-by-beach-11, lists-23)
conj:and(directions-16, lists-23)
case(points-26, of-24)
amod(points-26, cultural-25)
nmod:of(lists-23, points-26)
case(interest-28, of-27)
nmod:of(points-26, interest-28)
punct(beach-by-beach-11, ,-29)
amod(sealife-31, noteworthy-30)
dobj(examined-10, sealife-31)
conj:and(beach-by-beach-11, sealife-31)
punct(beach-by-beach-11, ,-32)
amod(flora-34, indigenous-33)
dobj(examined-10, flora-34)
conj:and(beach-by-beach-11, flora-34)
cc(beach-by-beach-11, and-35)
dobj(examined-10, fauna-36)
conj:and(beach-by-beach-11, fauna-36)
punct(beach-by-beach-11, ,-37)
cc(beach-by-beach-11, as-38)
mwe(as-38, well-39)
mwe(as-38, as-40)
amod(parking-42, available-41)
dobj(examined-10, parking-42)
conj:and(beach-by-beach-11, parking-42)
punct(parking-42, ,-43)
conj:and(beach-by-beach-11, camping-44)
conj:and(parking-42, camping-44)
cc(parking-42, and-45)
compound(facilities-47, picnic-46)
conj:and(beach-by-beach-11, facilities-47)
conj:and(parking-42, facilities-47)
punct(gets-3, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#beach-by-beach

examine :: SEC staffers have just begun examining corporate cleanup disclosures ./.
compound(staffers-2, SEC-1)
nsubj(begun-5, staffers-2)
aux(begun-5, have-3)
advmod(begun-5, just-4)
root(ROOT-0, begun-5)
xcomp(begun-5, examining-6)
amod(disclosures-9, corporate-7)
compound(disclosures-9, cleanup-8)
dobj(examining-6, disclosures-9)
punct(begun-5, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#disclosures

examine :: Several aspects of the criminal-justice process have been examined ./.
amod(aspects-2, Several-1)
nsubjpass(examined-9, aspects-2)
case(process-6, of-3)
det(process-6, the-4)
compound(process-6, criminal-justice-5)
nmod:of(aspects-2, process-6)
aux(examined-9, have-7)
auxpass(examined-9, been-8)
root(ROOT-0, examined-9)
punct(examined-9, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#aspects

examine :: Much is made of Mr. Hoxsey 's assertion that his files were open to doubters , but only a few brief seconds are devoted to the fact that when the files were examined they were found to be so incomplete that it was impossible to tell whether the `` cured '' patients actually had had cancer or whether conventional treatment had been effective ./.
nsubjpass(made-3, Much-1)
auxpass(made-3, is-2)
root(ROOT-0, made-3)
case(assertion-8, of-4)
compound(Hoxsey-6, Mr.-5)
nmod:poss(assertion-8, Hoxsey-6)
case(Hoxsey-6, 's-7)
nmod:of(made-3, assertion-8)
mark(open-13, that-9)
nmod:poss(files-11, his-10)
nsubj(open-13, files-11)
cop(open-13, were-12)
ccomp(assertion-8, open-13)
case(doubters-15, to-14)
nmod:to(open-13, doubters-15)
punct(made-3, ,-16)
cc(made-3, but-17)
advmod(seconds-22, only-18)
det(seconds-22, a-19)
amod(seconds-22, few-20)
amod(seconds-22, brief-21)
nsubjpass(devoted-24, seconds-22)
auxpass(devoted-24, are-23)
conj:but(made-3, devoted-24)
case(fact-27, to-25)
det(fact-27, the-26)
nmod:to(devoted-24, fact-27)
mark(found-36, that-28)
advmod(examined-33, when-29)
det(files-31, the-30)
nsubjpass(examined-33, files-31)
auxpass(examined-33, were-32)
advcl(found-36, examined-33)
nsubjpass(found-36, they-34)
nsubj:xsubj(incomplete-40, they-34)
auxpass(found-36, were-35)
ccomp(fact-27, found-36)
mark(incomplete-40, to-37)
cop(incomplete-40, be-38)
advmod(incomplete-40, so-39)
xcomp(found-36, incomplete-40)
mark(impossible-44, that-41)
nsubj(impossible-44, it-42)
nsubj:xsubj(tell-46, it-42)
cop(impossible-44, was-43)
ccomp(incomplete-40, impossible-44)
mark(tell-46, to-45)
xcomp(impossible-44, tell-46)
mark(had-55, whether-47)
det(patients-52, the-48)
punct(patients-52, ``-49)
amod(patients-52, cured-50)
punct(patients-52, ''-51)
nsubj(had-55, patients-52)
advmod(had-55, actually-53)
aux(had-55, had-54)
ccomp(tell-46, had-55)
dobj(had-55, cancer-56)
cc(cancer-56, or-57)
mark(effective-63, whether-58)
amod(treatment-60, conventional-59)
nsubj(effective-63, treatment-60)
aux(effective-63, had-61)
cop(effective-63, been-62)
dobj(had-55, effective-63)
conj:or(cancer-56, effective-63)
punct(made-3, .-64)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#files

examine :: A spokesman for Burbank , Calif.-based Walt Disney Co. said the entertainment concern is examining the decision and would n't comment until after its review is complete ./.
det(spokesman-2, A-1)
nsubj(said-10, spokesman-2)
case(Co.-9, for-3)
amod(Calif.-based-6, Burbank-4)
punct(Calif.-based-6, ,-5)
amod(Co.-9, Calif.-based-6)
compound(Co.-9, Walt-7)
compound(Co.-9, Disney-8)
nmod:for(spokesman-2, Co.-9)
root(ROOT-0, said-10)
det(concern-13, the-11)
compound(concern-13, entertainment-12)
nsubj(examining-15, concern-13)
nsubj(comment-21, concern-13)
aux(examining-15, is-14)
ccomp(said-10, examining-15)
det(decision-17, the-16)
dobj(examining-15, decision-17)
cc(examining-15, and-18)
aux(comment-21, would-19)
neg(comment-21, n't-20)
ccomp(said-10, comment-21)
conj:and(examining-15, comment-21)
mark(complete-27, until-22)
mark(complete-27, after-23)
nmod:poss(review-25, its-24)
nsubj(complete-27, review-25)
cop(complete-27, is-26)
advcl(comment-21, complete-27)
punct(said-10, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#decision

examine :: The officials then began to examine some kind of combination between the two international airlines ./.
det(officials-2, The-1)
nsubj(began-4, officials-2)
nsubj:xsubj(examine-6, officials-2)
advmod(began-4, then-3)
root(ROOT-0, began-4)
mark(examine-6, to-5)
xcomp(began-4, examine-6)
det(kind-8, some-7)
dobj(examine-6, kind-8)
case(combination-10, of-9)
nmod:of(kind-8, combination-10)
case(airlines-15, between-11)
det(airlines-15, the-12)
nummod(airlines-15, two-13)
compound(airlines-15, international-14)
nmod:between(combination-10, airlines-15)
punct(began-4, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#combination

examine :: CNW Corp . , the parent of the Chicago & North Western Transportation Co . , said President Reagan has ordered the creation of a presidential emergency board to examine the issues in a labor dispute over crew size , thus temporarily averting a strike that had been scheduled for tomorrow night ./.
compound(Corp-2, CNW-1)
root(ROOT-0, Corp-2)
punct(Corp-2, .-3)
root(ROOT-0, ,-1)
det(parent-3, the-2)
root(,-1, parent-3)
case(Chicago-6, of-4)
det(Chicago-6, the-5)
nmod:of(parent-3, Chicago-6)
cc(Chicago-6, &-7)
compound(Co-11, North-8)
compound(Co-11, Western-9)
compound(Co-11, Transportation-10)
nmod:of(parent-3, Co-11)
conj:&(Chicago-6, Co-11)
punct(parent-3, .-12)
punct(said-2, ,-1)
root(ROOT-0, said-2)
compound(Reagan-4, President-3)
nsubj(ordered-6, Reagan-4)
aux(ordered-6, has-5)
ccomp(said-2, ordered-6)
det(creation-8, the-7)
dobj(ordered-6, creation-8)
nsubj:xsubj(examine-15, creation-8)
case(board-13, of-9)
det(board-13, a-10)
amod(board-13, presidential-11)
compound(board-13, emergency-12)
nmod:of(creation-8, board-13)
mark(examine-15, to-14)
xcomp(ordered-6, examine-15)
det(issues-17, the-16)
dobj(examine-15, issues-17)
case(dispute-21, in-18)
det(dispute-21, a-19)
compound(dispute-21, labor-20)
nmod:in(issues-17, dispute-21)
case(size-24, over-22)
compound(size-24, crew-23)
nmod:over(dispute-21, size-24)
punct(examine-15, ,-25)
advmod(averting-28, thus-26)
advmod(averting-28, temporarily-27)
advcl(examine-15, averting-28)
det(strike-30, a-29)
dobj(averting-28, strike-30)
nsubjpass(scheduled-34, strike-30)
ref(strike-30, that-31)
aux(scheduled-34, had-32)
auxpass(scheduled-34, been-33)
acl:relcl(strike-30, scheduled-34)
case(night-37, for-35)
compound(night-37, tomorrow-36)
nmod:for(scheduled-34, night-37)
punct(said-2, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#issues

examine :: David L. Paul , CenTrust 's chairman and chief executive officer , said it has been talking with Florida Federal `` for three or four weeks '' but came to loggerheads over the ground rules for CenTrust to examine Florida Federal 's books ./.
compound(Paul-3, David-1)
compound(Paul-3, L.-2)
nsubj(said-13, Paul-3)
punct(Paul-3, ,-4)
nmod:poss(chairman-7, CenTrust-5)
case(CenTrust-5, 's-6)
appos(Paul-3, chairman-7)
cc(chairman-7, and-8)
amod(officer-11, chief-9)
compound(officer-11, executive-10)
appos(Paul-3, officer-11)
conj:and(chairman-7, officer-11)
punct(Paul-3, ,-12)
root(ROOT-0, said-13)
nsubj(talking-17, it-14)
nsubj(came-29, it-14)
aux(talking-17, has-15)
aux(talking-17, been-16)
ccomp(said-13, talking-17)
case(Federal-20, with-18)
compound(Federal-20, Florida-19)
nmod:with(talking-17, Federal-20)
punct(talking-17, ``-21)
case(weeks-26, for-22)
nummod(weeks-26, three-23)
cc(three-23, or-24)
conj:or(three-23, four-25)
nummod(weeks-26, four-25)
nmod:for(talking-17, weeks-26)
punct(talking-17, ''-27)
cc(talking-17, but-28)
ccomp(said-13, came-29)
conj:but(talking-17, came-29)
case(loggerheads-31, to-30)
nmod:to(came-29, loggerheads-31)
case(rules-35, over-32)
det(rules-35, the-33)
compound(rules-35, ground-34)
nmod:over(came-29, rules-35)
mark(examine-39, for-36)
nsubj(examine-39, CenTrust-37)
mark(examine-39, to-38)
acl(rules-35, examine-39)
compound(Federal-41, Florida-40)
nmod:poss(books-43, Federal-41)
case(Federal-41, 's-42)
dobj(examine-39, books-43)
punct(said-13, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#books

examine :: Enlarged transparencies of drawings that are lit from behind are hard to examine closely ./.
amod(transparencies-2, Enlarged-1)
nsubj(hard-11, transparencies-2)
nsubj:xsubj(examine-13, transparencies-2)
case(drawings-4, of-3)
nmod:of(transparencies-2, drawings-4)
nsubjpass(lit-7, drawings-4)
ref(drawings-4, that-5)
auxpass(lit-7, are-6)
acl:relcl(drawings-4, lit-7)
case(behind-9, from-8)
nmod:from(lit-7, behind-9)
cop(hard-11, are-10)
root(ROOT-0, hard-11)
mark(examine-13, to-12)
xcomp(hard-11, examine-13)
advmod(examine-13, closely-14)
punct(hard-11, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#transparencies

examine :: The Boeing spokesman said: `` A concern from a longstanding and honored customer like JAL is going to be examined immediately to see what actions we can and shall take ./.
det(spokesman-3, The-1)
compound(spokesman-3, Boeing-2)
nsubj(said-4, spokesman-3)
root(ROOT-0, said-4)
punct(said-4, :-5)
punct(said-4, ``-6)
det(concern-8, A-7)
nsubj(going-18, concern-8)
nsubjpass:xsubj(examined-21, concern-8)
case(longstanding-11, from-9)
det(longstanding-11, a-10)
nmod:from(concern-8, longstanding-11)
cc(longstanding-11, and-12)
amod(customer-14, honored-13)
nmod:from(concern-8, customer-14)
conj:and(longstanding-11, customer-14)
case(JAL-16, like-15)
nmod:like(longstanding-11, JAL-16)
aux(going-18, is-17)
ccomp(said-4, going-18)
mark(examined-21, to-19)
auxpass(examined-21, be-20)
xcomp(going-18, examined-21)
advmod(examined-21, immediately-22)
mark(see-24, to-23)
xcomp(examined-21, see-24)
det(actions-26, what-25)
dobj(can-28, actions-26)
nsubj(can-28, we-27)
nsubj(take-31, we-27)
ccomp(see-24, can-28)
cc(can-28, and-29)
aux(take-31, shall-30)
ccomp(see-24, take-31)
conj:and(can-28, take-31)
punct(said-4, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#be

examine :: If that sounds like obstinacy , perhaps it 's time once more to examine carefully the forces that have kept the Arab-Israeli conflict boiling so long ./.
mark(sounds-3, If-1)
nsubj(sounds-3, that-2)
advcl(time-10, sounds-3)
case(obstinacy-5, like-4)
nmod:like(sounds-3, obstinacy-5)
punct(time-10, ,-6)
advmod(time-10, perhaps-7)
nsubj(time-10, it-8)
cop(time-10, 's-9)
root(ROOT-0, time-10)
advmod(more-12, once-11)
advmod(time-10, more-12)
mark(examine-14, to-13)
acl(time-10, examine-14)
advmod(examine-14, carefully-15)
det(forces-17, the-16)
dobj(examine-14, forces-17)
nsubj(kept-20, forces-17)
ref(forces-17, that-18)
aux(kept-20, have-19)
acl:relcl(forces-17, kept-20)
det(conflict-23, the-21)
amod(conflict-23, Arab-Israeli-22)
nsubj(boiling-24, conflict-23)
dep(kept-20, boiling-24)
advmod(long-26, so-25)
advmod(boiling-24, long-26)
punct(time-10, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#forces

examine :: But some institutional shareholders said they wanted to examine Griffin 's $ 35-a-share offer ./.
cc(said-5, But-1)
det(shareholders-4, some-2)
amod(shareholders-4, institutional-3)
nsubj(said-5, shareholders-4)
root(ROOT-0, said-5)
nsubj(wanted-7, they-6)
nsubj:xsubj(examine-9, they-6)
ccomp(said-5, wanted-7)
mark(examine-9, to-8)
xcomp(wanted-7, examine-9)
nmod:poss(offer-14, Griffin-10)
case(Griffin-10, 's-11)
amod(offer-14, $-12)
dep($-12, 35-a-share-13)
dobj(examine-9, offer-14)
punct(said-5, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#offer

examine :: It said that the companies are examining the possibilities provided within the framework of securities law but that `` all these considerations have n't been in any way concluded . ''/''
nsubj(said-2, It-1)
root(ROOT-0, said-2)
mark(examining-7, that-3)
det(companies-5, the-4)
nsubj(examining-7, companies-5)
aux(examining-7, are-6)
ccomp(said-2, examining-7)
det(possibilities-9, the-8)
dobj(examining-7, possibilities-9)
acl(possibilities-9, provided-10)
case(framework-13, within-11)
det(framework-13, the-12)
nmod:within(provided-10, framework-13)
case(law-16, of-14)
compound(law-16, securities-15)
nmod:of(framework-13, law-16)
cc(examining-7, but-17)
mark(way-28, that-18)
punct(way-28, ``-19)
det:predet(considerations-22, all-20)
det(considerations-22, these-21)
nsubj(way-28, considerations-22)
aux(way-28, have-23)
neg(way-28, n't-24)
cop(way-28, been-25)
case(way-28, in-26)
det(way-28, any-27)
ccomp(said-2, way-28)
conj:but(examining-7, way-28)
dep(way-28, concluded-29)
punct(said-2, .-30)
punct(said-2, ''-31)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: examine#possibilities

examine :: It will examine all the data on the economy , together with the best forecasts its economists can dream up , and plan a monetary policy that will fit the need ./.
nsubj(examine-3, It-1)
nsubj(plan-23, It-1)
aux(examine-3, will-2)
root(ROOT-0, examine-3)
det:predet(data-6, all-4)
det(data-6, the-5)
dobj(examine-3, data-6)
case(economy-9, on-7)
det(economy-9, the-8)
nmod:on(data-6, economy-9)
punct(data-6, ,-10)
case(forecasts-15, together-11)
mwe(together-11, with-12)
det(forecasts-15, the-13)
amod(forecasts-15, best-14)
conj(data-6, forecasts-15)
nmod:poss(economists-17, its-16)
nsubj(dream-19, economists-17)
aux(dream-19, can-18)
acl:relcl(forecasts-15, dream-19)
compound:prt(dream-19, up-20)
punct(data-6, ,-21)
cc(examine-3, and-22)
conj:and(examine-3, plan-23)
det(policy-26, a-24)
amod(policy-26, monetary-25)
dobj(plan-23, policy-26)
nsubj(fit-29, policy-26)
ref(policy-26, that-27)
aux(fit-29, will-28)
acl:relcl(policy-26, fit-29)
det(need-31, the-30)
dobj(fit-29, need-31)
punct(examine-3, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#data

examine :: The investigators also are examining possible tax-law violations involving $ 11 billion in tax-exempt bonds underwritten by other firms ./.
det(investigators-2, The-1)
nsubj(examining-5, investigators-2)
advmod(examining-5, also-3)
aux(examining-5, are-4)
root(ROOT-0, examining-5)
amod(violations-8, possible-6)
compound(violations-8, tax-law-7)
dobj(examining-5, violations-8)
acl(violations-8, involving-9)
dobj(involving-9, $-10)
compound(billion-12, 11-11)
nummod($-10, billion-12)
case(bonds-15, in-13)
amod(bonds-15, tax-exempt-14)
nmod:in($-10, bonds-15)
acl(bonds-15, underwritten-16)
case(firms-19, by-17)
amod(firms-19, other-18)
nmod:by(underwritten-16, firms-19)
punct(examining-5, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#violations

examine :: Federated 's board , following an all-day meeting yesterday , is expected to direct its financial advisers to examine alternatives to the Campeau bid , the sources said ./.
nmod:poss(board-3, Federated-1)
case(Federated-1, 's-2)
nsubjpass(expected-12, board-3)
nsubj:xsubj(direct-14, board-3)
punct(expected-12, ,-4)
case(meeting-8, following-5)
det(meeting-8, an-6)
amod(meeting-8, all-day-7)
nmod:following(expected-12, meeting-8)
nmod:tmod(meeting-8, yesterday-9)
punct(expected-12, ,-10)
auxpass(expected-12, is-11)
ccomp(said-28, expected-12)
mark(direct-14, to-13)
xcomp(expected-12, direct-14)
nmod:poss(advisers-17, its-15)
amod(advisers-17, financial-16)
dobj(direct-14, advisers-17)
nsubj:xsubj(examine-19, advisers-17)
mark(examine-19, to-18)
xcomp(direct-14, examine-19)
dobj(examine-19, alternatives-20)
case(bid-24, to-21)
det(bid-24, the-22)
compound(bid-24, Campeau-23)
nmod:to(alternatives-20, bid-24)
punct(said-28, ,-25)
det(sources-27, the-26)
nsubj(said-28, sources-27)
root(ROOT-0, said-28)
punct(said-28, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#alternatives

examine :: `` Consumer spending would mean a wider -LRB- U.S. -RRB- trade deficit , '' he said , adding , `` we want to examine the content '' of the growth data ./.
punct(said-16, ``-1)
compound(spending-3, Consumer-2)
nsubj(mean-5, spending-3)
aux(mean-5, would-4)
ccomp(said-16, mean-5)
det(deficit-12, a-6)
amod(deficit-12, wider-7)
punct(deficit-12, -LRB--8)
compound(deficit-12, U.S.-9)
punct(deficit-12, -RRB--10)
compound(deficit-12, trade-11)
dobj(mean-5, deficit-12)
punct(said-16, ,-13)
punct(said-16, ''-14)
nsubj(said-16, he-15)
root(ROOT-0, said-16)
punct(said-16, ,-17)
xcomp(said-16, adding-18)
punct(adding-18, ,-19)
punct(adding-18, ``-20)
nsubj(want-22, we-21)
nsubj:xsubj(examine-24, we-21)
ccomp(adding-18, want-22)
mark(examine-24, to-23)
xcomp(want-22, examine-24)
det(content-26, the-25)
dobj(examine-24, content-26)
punct(content-26, ''-27)
case(data-31, of-28)
det(data-31, the-29)
compound(data-31, growth-30)
nmod:of(content-26, data-31)
punct(said-16, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#data

examine :: Operation Hunger recently studied 28 rural black communities and found evidence of malnutrition in more than half of the children examined ./.
compound(Hunger-2, Operation-1)
nsubj(studied-4, Hunger-2)
nsubj(found-10, Hunger-2)
advmod(studied-4, recently-3)
root(ROOT-0, studied-4)
nummod(communities-8, 28-5)
amod(communities-8, rural-6)
amod(communities-8, black-7)
dobj(studied-4, communities-8)
cc(studied-4, and-9)
conj:and(studied-4, found-10)
dobj(found-10, evidence-11)
case(malnutrition-13, of-12)
nmod:of(evidence-11, malnutrition-13)
case(half-17, in-14)
advmod(half-17, more-15)
mwe(more-15, than-16)
nmod:in(evidence-11, half-17)
case(children-20, of-18)
det(children-20, the-19)
nmod:of(half-17, children-20)
acl(children-20, examined-21)
punct(studied-4, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

examine :: A young Oxford graduate comes to Southwest Ireland in 1904 to examine the connections between two incidents in local history that might illuminate the inner logic of a bloody quarter century ./.
det(graduate-4, A-1)
amod(graduate-4, young-2)
compound(graduate-4, Oxford-3)
nsubj(comes-5, graduate-4)
root(ROOT-0, comes-5)
case(Ireland-8, to-6)
compound(Ireland-8, Southwest-7)
nmod:to(comes-5, Ireland-8)
case(1904-10, in-9)
nmod:in(comes-5, 1904-10)
mark(examine-12, to-11)
advcl(comes-5, examine-12)
det(connections-14, the-13)
dobj(examine-12, connections-14)
case(incidents-17, between-15)
nummod(incidents-17, two-16)
nmod:between(connections-14, incidents-17)
nsubj(illuminate-23, incidents-17)
case(history-20, in-18)
amod(history-20, local-19)
nmod:in(incidents-17, history-20)
ref(incidents-17, that-21)
aux(illuminate-23, might-22)
acl:relcl(incidents-17, illuminate-23)
det(logic-26, the-24)
amod(logic-26, inner-25)
dobj(illuminate-23, logic-26)
case(century-31, of-27)
det(century-31, a-28)
amod(century-31, bloody-29)
compound(century-31, quarter-30)
nmod:of(logic-26, century-31)
punct(comes-5, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#connections

examine :: People familiar with the investigation said the SEC is examining both of these motives in its current investigation ./.
nsubj(said-6, People-1)
amod(People-1, familiar-2)
case(investigation-5, with-3)
det(investigation-5, the-4)
nmod:with(familiar-2, investigation-5)
root(ROOT-0, said-6)
det(SEC-8, the-7)
nsubj(examining-10, SEC-8)
aux(examining-10, is-9)
ccomp(said-6, examining-10)
dobj(examining-10, both-11)
case(motives-14, of-12)
det(motives-14, these-13)
nmod:of(both-11, motives-14)
case(investigation-18, in-15)
nmod:poss(investigation-18, its-16)
amod(investigation-18, current-17)
nmod:in(motives-14, investigation-18)
punct(said-6, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#motives

examine :: Another form of front-running likely to be examined in coming months is trading by Wall Street firms in October in anticipation of massive sell orders by money managers using the computerized hedging strategy known as portfolio insurance ./.
det(form-2, Another-1)
root(ROOT-0, form-2)
mark(trading-13, of-3)
nsubj(trading-13, front-running-4)
amod(front-running-4, likely-5)
mark(examined-8, to-6)
auxpass(examined-8, be-7)
xcomp(likely-5, examined-8)
case(months-11, in-9)
amod(months-11, coming-10)
nmod:in(examined-8, months-11)
aux(trading-13, is-12)
acl(form-2, trading-13)
case(firms-17, by-14)
compound(firms-17, Wall-15)
compound(firms-17, Street-16)
nmod:by(trading-13, firms-17)
case(October-19, in-18)
nmod:in(trading-13, October-19)
case(anticipation-21, in-20)
nmod:in(trading-13, anticipation-21)
case(orders-25, of-22)
amod(orders-25, massive-23)
compound(orders-25, sell-24)
nmod:of(anticipation-21, orders-25)
case(managers-28, by-26)
compound(managers-28, money-27)
nmod:by(orders-25, managers-28)
xcomp(trading-13, using-29)
det(strategy-33, the-30)
amod(strategy-33, computerized-31)
compound(strategy-33, hedging-32)
dobj(using-29, strategy-33)
acl(strategy-33, known-34)
case(insurance-37, as-35)
compound(insurance-37, portfolio-36)
nmod:as(known-34, insurance-37)
punct(form-2, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#be

examine :: The approach is Socratic , using stories , questions and open discussion to allow students to examine these ethical concepts ./.
det(approach-2, The-1)
nsubj(Socratic-4, approach-2)
cop(Socratic-4, is-3)
root(ROOT-0, Socratic-4)
punct(Socratic-4, ,-5)
xcomp(Socratic-4, using-6)
dobj(using-6, stories-7)
punct(stories-7, ,-8)
dobj(using-6, questions-9)
conj:and(stories-7, questions-9)
cc(stories-7, and-10)
amod(discussion-12, open-11)
dobj(using-6, discussion-12)
conj:and(stories-7, discussion-12)
mark(allow-14, to-13)
advcl(using-6, allow-14)
dobj(allow-14, students-15)
nsubj:xsubj(examine-17, students-15)
mark(examine-17, to-16)
xcomp(allow-14, examine-17)
det(concepts-20, these-18)
amod(concepts-20, ethical-19)
dobj(examine-17, concepts-20)
punct(Socratic-4, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#concepts

examine :: Several Wall Street investment bankers said clients have instructed them to examine the feasibility of topping the Swiss giant 's bid , but emphasized that interest so far is preliminary ./.
amod(bankers-5, Several-1)
compound(bankers-5, Wall-2)
compound(bankers-5, Street-3)
compound(bankers-5, investment-4)
nsubj(said-6, bankers-5)
nsubj(emphasized-24, bankers-5)
root(ROOT-0, said-6)
nsubj(instructed-9, clients-7)
aux(instructed-9, have-8)
ccomp(said-6, instructed-9)
dobj(instructed-9, them-10)
nsubj:xsubj(examine-12, them-10)
mark(examine-12, to-11)
xcomp(instructed-9, examine-12)
det(feasibility-14, the-13)
dobj(examine-12, feasibility-14)
mark(topping-16, of-15)
acl(feasibility-14, topping-16)
det(giant-19, the-17)
amod(giant-19, Swiss-18)
nmod:poss(bid-21, giant-19)
case(giant-19, 's-20)
dobj(topping-16, bid-21)
punct(said-6, ,-22)
cc(said-6, but-23)
conj:but(said-6, emphasized-24)
mark(preliminary-30, that-25)
nsubj(preliminary-30, interest-26)
advmod(far-28, so-27)
advmod(preliminary-30, far-28)
cop(preliminary-30, is-29)
ccomp(emphasized-24, preliminary-30)
punct(said-6, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#feasibility

examine :: Similarly , Stephen Lister , a senior vice president of the American Stock Exchange , said that in examining the activities of brokers , the exchange 's investigators sometimes encounter brokers who ca n't explain an investment strategy they 've recommended to customers ./.
advmod(said-16, Similarly-1)
punct(said-16, ,-2)
compound(Lister-4, Stephen-3)
nsubj(said-16, Lister-4)
punct(Lister-4, ,-5)
det(president-9, a-6)
amod(president-9, senior-7)
compound(president-9, vice-8)
appos(Lister-4, president-9)
case(Exchange-14, of-10)
det(Exchange-14, the-11)
compound(Exchange-14, American-12)
compound(Exchange-14, Stock-13)
nmod:of(president-9, Exchange-14)
punct(Lister-4, ,-15)
root(ROOT-0, said-16)
mark(encounter-30, that-17)
mark(examining-19, in-18)
advcl(encounter-30, examining-19)
det(activities-21, the-20)
dobj(examining-19, activities-21)
case(brokers-23, of-22)
nmod:of(activities-21, brokers-23)
punct(encounter-30, ,-24)
det(exchange-26, the-25)
nmod:poss(investigators-28, exchange-26)
case(exchange-26, 's-27)
nsubj(encounter-30, investigators-28)
advmod(encounter-30, sometimes-29)
ccomp(said-16, encounter-30)
dobj(encounter-30, brokers-31)
nsubj(explain-35, brokers-31)
ref(brokers-31, who-32)
aux(explain-35, ca-33)
neg(explain-35, n't-34)
acl:relcl(brokers-31, explain-35)
det(strategy-38, an-36)
compound(strategy-38, investment-37)
dobj(explain-35, strategy-38)
nsubj(recommended-41, they-39)
aux(recommended-41, 've-40)
acl:relcl(strategy-38, recommended-41)
case(customers-43, to-42)
nmod:to(recommended-41, customers-43)
punct(said-16, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#brokers

examine :: The study , which examined 50 people who were wearing lap belts during auto accidents , concluded that 32 would have `` fared substantially better if they had been wearing a lap-shoulder belt . ''/''
det(study-2, The-1)
nsubj(examined-5, study-2)
nsubj(concluded-17, study-2)
punct(study-2, ,-3)
ref(study-2, which-4)
acl:relcl(study-2, examined-5)
nummod(people-7, 50-6)
dobj(examined-5, people-7)
nsubj(wearing-10, people-7)
ref(people-7, who-8)
aux(wearing-10, were-9)
acl:relcl(people-7, wearing-10)
compound(belts-12, lap-11)
dobj(wearing-10, belts-12)
case(accidents-15, during-13)
compound(accidents-15, auto-14)
nmod:during(wearing-10, accidents-15)
punct(study-2, ,-16)
root(ROOT-0, concluded-17)
mark(fared-23, that-18)
nsubj(fared-23, 32-19)
aux(fared-23, would-20)
aux(fared-23, have-21)
punct(fared-23, ``-22)
ccomp(concluded-17, fared-23)
advmod(better-25, substantially-24)
advmod(fared-23, better-25)
mark(wearing-30, if-26)
nsubj(wearing-30, they-27)
aux(wearing-30, had-28)
aux(wearing-30, been-29)
advcl(fared-23, wearing-30)
det(belt-33, a-31)
amod(belt-33, lap-shoulder-32)
dobj(wearing-30, belt-33)
punct(concluded-17, .-34)
punct(concluded-17, ''-35)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: examine#people

examine :: The former president does n't see in Mr. Bush the `` independence '' or the `` drive '' to lead a country whose global leadership is increasingly questioned , a subject Mr. Nixon examines in his new book ./.
det(president-3, The-1)
amod(president-3, former-2)
nsubj(see-6, president-3)
aux(see-6, does-4)
neg(see-6, n't-5)
root(ROOT-0, see-6)
case(Bush-9, in-7)
compound(Bush-9, Mr.-8)
nmod:in(see-6, Bush-9)
det(independence-12, the-10)
punct(independence-12, ``-11)
dobj(see-6, independence-12)
punct(independence-12, ''-13)
cc(independence-12, or-14)
det(drive-17, the-15)
punct(drive-17, ``-16)
dobj(see-6, drive-17)
conj:or(independence-12, drive-17)
punct(drive-17, ''-18)
mark(lead-20, to-19)
acl(drive-17, lead-20)
det(country-22, a-21)
dobj(lead-20, country-22)
nmod:poss(leadership-25, country-22)
ref(country-22, whose-23)
amod(leadership-25, global-24)
nsubjpass(questioned-28, leadership-25)
auxpass(questioned-28, is-26)
advmod(questioned-28, increasingly-27)
acl:relcl(country-22, questioned-28)
punct(independence-12, ,-29)
det(Nixon-33, a-30)
amod(Nixon-33, subject-31)
compound(Nixon-33, Mr.-32)
nsubj(examines-34, Nixon-33)
acl:relcl(independence-12, examines-34)
case(book-38, in-35)
nmod:poss(book-38, his-36)
amod(book-38, new-37)
nmod:in(examines-34, book-38)
punct(see-6, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#nixon

examine :: If that sounds like obstinacy , perhaps it 's time once more to examine carefully the forces that have kept the Arab-Israeli conflict boiling so long ./.
mark(sounds-3, If-1)
nsubj(sounds-3, that-2)
advcl(time-10, sounds-3)
case(obstinacy-5, like-4)
nmod:like(sounds-3, obstinacy-5)
punct(time-10, ,-6)
advmod(time-10, perhaps-7)
nsubj(time-10, it-8)
cop(time-10, 's-9)
root(ROOT-0, time-10)
advmod(more-12, once-11)
advmod(time-10, more-12)
mark(examine-14, to-13)
acl(time-10, examine-14)
advmod(examine-14, carefully-15)
det(forces-17, the-16)
dobj(examine-14, forces-17)
nsubj(kept-20, forces-17)
ref(forces-17, that-18)
aux(kept-20, have-19)
acl:relcl(forces-17, kept-20)
det(conflict-23, the-21)
amod(conflict-23, Arab-Israeli-22)
nsubj(boiling-24, conflict-23)
dep(kept-20, boiling-24)
advmod(long-26, so-25)
advmod(boiling-24, long-26)
punct(time-10, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#forces

examine :: Mr. Haraszti , a Budapest dissident and co-editor of the opposition journal Beszelo , examines the intimate and in his view `` symbiotic '' relationship between artists and the state ./.
compound(Haraszti-2, Mr.-1)
nsubj(examines-15, Haraszti-2)
punct(Haraszti-2, ,-3)
det(dissident-6, a-4)
compound(dissident-6, Budapest-5)
appos(Haraszti-2, dissident-6)
cc(dissident-6, and-7)
appos(Haraszti-2, co-editor-8)
conj:and(dissident-6, co-editor-8)
case(Beszelo-13, of-9)
det(Beszelo-13, the-10)
compound(Beszelo-13, opposition-11)
compound(Beszelo-13, journal-12)
nmod:of(co-editor-8, Beszelo-13)
punct(Haraszti-2, ,-14)
root(ROOT-0, examines-15)
det(intimate-17, the-16)
dobj(examines-15, intimate-17)
cc(intimate-17, and-18)
case(view-21, in-19)
nmod:poss(view-21, his-20)
dobj(examines-15, view-21)
conj:and(intimate-17, view-21)
punct(view-21, ``-22)
dep(view-21, symbiotic-23)
punct(view-21, ''-24)
dep(intimate-17, relationship-25)
case(artists-27, between-26)
nmod:between(intimate-17, artists-27)
cc(artists-27, and-28)
det(state-30, the-29)
nmod:between(intimate-17, state-30)
conj:and(artists-27, state-30)
punct(examines-15, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#intimate

examine :: Cabot Medical Corp. said it received approval from the Food and Drug Administration to market a new pump that simplifies a diagnostic procedure for examining the uterus ./.
compound(Corp.-3, Cabot-1)
compound(Corp.-3, Medical-2)
nsubj(said-4, Corp.-3)
root(ROOT-0, said-4)
nsubj(received-6, it-5)
ccomp(said-4, received-6)
dobj(received-6, approval-7)
case(Administration-13, from-8)
det(Administration-13, the-9)
compound(Administration-13, Food-10)
cc(Food-10, and-11)
conj:and(Food-10, Drug-12)
compound(Administration-13, Drug-12)
nmod:from(approval-7, Administration-13)
mark(market-15, to-14)
acl(approval-7, market-15)
det(pump-18, a-16)
amod(pump-18, new-17)
dobj(market-15, pump-18)
nsubj(simplifies-20, pump-18)
ref(pump-18, that-19)
acl:relcl(pump-18, simplifies-20)
det(procedure-23, a-21)
amod(procedure-23, diagnostic-22)
dobj(simplifies-20, procedure-23)
mark(examining-25, for-24)
acl(procedure-23, examining-25)
det(uterus-27, the-26)
dobj(examining-25, uterus-27)
punct(said-4, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#uterus

examine :: Moody 's said it will examine the effect of such a tender offer , if sucessfully completed , on Facet 's capital structure and debt-protection measurements ./.
nsubj(said-3, Moody-1)
case(Moody-1, 's-2)
root(ROOT-0, said-3)
nsubj(examine-6, it-4)
aux(examine-6, will-5)
ccomp(said-3, examine-6)
det(effect-8, the-7)
dobj(examine-6, effect-8)
case(offer-13, of-9)
det:predet(offer-13, such-10)
det(offer-13, a-11)
compound(offer-13, tender-12)
nmod:of(effect-8, offer-13)
punct(examine-6, ,-14)
mark(completed-17, if-15)
advmod(completed-17, sucessfully-16)
advcl(examine-6, completed-17)
punct(examine-6, ,-18)
case(structure-23, on-19)
nmod:poss(structure-23, Facet-20)
case(Facet-20, 's-21)
compound(structure-23, capital-22)
nmod:on(examine-6, structure-23)
cc(structure-23, and-24)
amod(measurements-26, debt-protection-25)
nmod:on(examine-6, measurements-26)
conj:and(structure-23, measurements-26)
punct(said-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#offer

examine :: But a source close to Black & Decker acknowledged that the company had received the information from American Standard and said that the company 's representatives will meet with American Standard officials this afternoon to examine nonpublic information ./.
cc(acknowledged-9, But-1)
det(source-3, a-2)
nsubj(acknowledged-9, source-3)
nsubj(said-21, source-3)
case(Black-6, close-4)
mwe(close-4, to-5)
nmod:close_to(source-3, Black-6)
cc(Black-6, &-7)
nmod:close_to(source-3, Decker-8)
conj:&(Black-6, Decker-8)
root(ROOT-0, acknowledged-9)
mark(received-14, that-10)
det(company-12, the-11)
nsubj(received-14, company-12)
aux(received-14, had-13)
ccomp(acknowledged-9, received-14)
det(information-16, the-15)
dobj(received-14, information-16)
case(Standard-19, from-17)
amod(Standard-19, American-18)
nmod:from(received-14, Standard-19)
cc(acknowledged-9, and-20)
conj:and(acknowledged-9, said-21)
mark(meet-28, that-22)
det(company-24, the-23)
nmod:poss(representatives-26, company-24)
case(company-24, 's-25)
nsubj(meet-28, representatives-26)
nsubj:xsubj(examine-36, representatives-26)
aux(meet-28, will-27)
ccomp(said-21, meet-28)
case(officials-32, with-29)
amod(officials-32, American-30)
amod(officials-32, Standard-31)
nmod:with(meet-28, officials-32)
det(afternoon-34, this-33)
nmod:tmod(meet-28, afternoon-34)
mark(examine-36, to-35)
xcomp(meet-28, examine-36)
amod(information-38, nonpublic-37)
dobj(examine-36, information-38)
punct(acknowledged-9, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#information

examine :: Digging into the affairs of a hypothetical Jones Corp . , for example , Murphy accountants and investigators in many cases will examine each and every document ./.
root(ROOT-0, Digging-1)
case(affairs-4, into-2)
det(affairs-4, the-3)
nmod:into(Digging-1, affairs-4)
case(Corp-9, of-5)
det(Corp-9, a-6)
amod(Corp-9, hypothetical-7)
compound(Corp-9, Jones-8)
nmod:of(affairs-4, Corp-9)
punct(Digging-1, .-10)
punct(examine-13, ,-1)
case(example-3, for-2)
nmod:for(examine-13, example-3)
punct(examine-13, ,-4)
compound(accountants-6, Murphy-5)
nsubj(examine-13, accountants-6)
cc(accountants-6, and-7)
conj:and(accountants-6, investigators-8)
nsubj(examine-13, investigators-8)
case(cases-11, in-9)
amod(cases-11, many-10)
nmod:in(accountants-6, cases-11)
aux(examine-13, will-12)
root(ROOT-0, examine-13)
det(document-17, each-14)
cc(each-14, and-15)
conj:and(each-14, every-16)
det(document-17, every-16)
dobj(examine-13, document-17)
punct(examine-13, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#document

examine :: A senior First Boston official said yesterday that the firm 's internal auditors were still examining the trading problem and had not yet reached any conclusions about its cause ./.
det(official-5, A-1)
amod(official-5, senior-2)
compound(official-5, First-3)
compound(official-5, Boston-4)
nsubj(said-6, official-5)
root(ROOT-0, said-6)
nmod:tmod(said-6, yesterday-7)
mark(examining-16, that-8)
det(firm-10, the-9)
nmod:poss(auditors-13, firm-10)
case(firm-10, 's-11)
amod(auditors-13, internal-12)
nsubj(examining-16, auditors-13)
nsubj(reached-24, auditors-13)
aux(examining-16, were-14)
advmod(examining-16, still-15)
ccomp(said-6, examining-16)
det(problem-19, the-17)
compound(problem-19, trading-18)
dobj(examining-16, problem-19)
cc(examining-16, and-20)
aux(reached-24, had-21)
neg(reached-24, not-22)
advmod(reached-24, yet-23)
ccomp(said-6, reached-24)
conj:and(examining-16, reached-24)
det(conclusions-26, any-25)
dobj(reached-24, conclusions-26)
case(cause-29, about-27)
nmod:poss(cause-29, its-28)
nmod:about(conclusions-26, cause-29)
punct(said-6, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#problem

examine :: The program is designed to let people using personal computers on a network plan meetings , share comments , track projects and examine libraries of documents ./.
det(program-2, The-1)
nsubjpass(designed-4, program-2)
nsubj:xsubj(let-6, program-2)
auxpass(designed-4, is-3)
root(ROOT-0, designed-4)
mark(let-6, to-5)
xcomp(designed-4, let-6)
dobj(let-6, people-7)
acl(people-7, using-8)
amod(computers-10, personal-9)
dobj(using-8, computers-10)
case(meetings-15, on-11)
det(meetings-15, a-12)
compound(meetings-15, network-13)
compound(meetings-15, plan-14)
nmod:on(using-8, meetings-15)
punct(let-6, ,-16)
compound(comments-18, share-17)
root(,-16, comments-18)
punct(comments-18, ,-19)
compound(projects-21, track-20)
root(,-16, projects-21)
conj:and(comments-18, projects-21)
cc(comments-18, and-22)
root(,-16, examine-23)
conj:and(comments-18, examine-23)
dobj(examine-23, libraries-24)
case(documents-26, of-25)
nmod:of(libraries-24, documents-26)
punct(comments-18, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#documents

examine :: First , there is the problem of establishing precisely what `` meaning '' each senator understood concerning every provision of every treaty at the time the Senate gave its consent to ratification . -LRB- From my observation , most senators do not attend treaty hearings , read committee reports on treaties , or even personally examine the texts of most proposed treaties before they are called upon to vote. -RRB-/-RRB-
advmod(is-4, First-1)
punct(is-4, ,-2)
expl(is-4, there-3)
root(ROOT-0, is-4)
det(problem-6, the-5)
nsubj(is-4, problem-6)
mark(establishing-8, of-7)
acl(problem-6, establishing-8)
advmod(establishing-8, precisely-9)
det(meaning-12, what-10)
punct(meaning-12, ``-11)
dobj(understood-16, meaning-12)
punct(meaning-12, ''-13)
det(senator-15, each-14)
nsubj(understood-16, senator-15)
ccomp(establishing-8, understood-16)
xcomp(understood-16, concerning-17)
det(provision-19, every-18)
dobj(concerning-17, provision-19)
case(treaty-22, of-20)
det(treaty-22, every-21)
nmod:of(provision-19, treaty-22)
case(time-25, at-23)
det(time-25, the-24)
nmod:at(concerning-17, time-25)
det(Senate-27, the-26)
nsubj(gave-28, Senate-27)
acl:relcl(time-25, gave-28)
nmod:poss(consent-30, its-29)
dobj(gave-28, consent-30)
case(ratification-32, to-31)
nmod:to(gave-28, ratification-32)
punct(is-4, .-33)
punct(attend-10, -LRB--1)
case(observation-4, From-2)
nmod:poss(observation-4, my-3)
nmod:from(attend-10, observation-4)
punct(attend-10, ,-5)
amod(senators-7, most-6)
nsubj(attend-10, senators-7)
aux(attend-10, do-8)
neg(attend-10, not-9)
ccomp(reports-16, attend-10)
compound(hearings-12, treaty-11)
dobj(attend-10, hearings-12)
punct(reports-16, ,-13)
compound(committee-15, read-14)
nsubj(reports-16, committee-15)
nsubj(examine-23, committee-15)
root(ROOT-0, reports-16)
case(treaties-18, on-17)
nmod:on(reports-16, treaties-18)
punct(reports-16, ,-19)
cc(reports-16, or-20)
advmod(personally-22, even-21)
advmod(examine-23, personally-22)
conj:or(reports-16, examine-23)
det(texts-25, the-24)
dobj(examine-23, texts-25)
case(treaties-29, of-26)
amod(treaties-29, most-27)
amod(treaties-29, proposed-28)
nmod:of(texts-25, treaties-29)
mark(called-33, before-30)
nsubjpass(called-33, they-31)
auxpass(called-33, are-32)
advcl(examine-23, called-33)
mark(vote-36, upon-34)
mark(vote-36, to-35)
advcl(called-33, vote-36)
punct(reports-16, .-37)
punct(reports-16, -RRB--38)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: examine#treaties

examine :: If you wish to examine why college costs rise faster than the cost-of-living index , you can start with our libraries ./.
mark(wish-3, If-1)
nsubj(wish-3, you-2)
nsubj:xsubj(examine-5, you-2)
advcl(start-18, wish-3)
mark(examine-5, to-4)
xcomp(wish-3, examine-5)
advmod(rise-9, why-6)
compound(costs-8, college-7)
nsubj(rise-9, costs-8)
ccomp(examine-5, rise-9)
advmod(rise-9, faster-10)
case(index-14, than-11)
det(index-14, the-12)
amod(index-14, cost-of-living-13)
nmod:than(faster-10, index-14)
punct(start-18, ,-15)
nsubj(start-18, you-16)
aux(start-18, can-17)
root(ROOT-0, start-18)
case(libraries-21, with-19)
nmod:poss(libraries-21, our-20)
nmod:with(start-18, libraries-21)
punct(start-18, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#you

examine :: At 9 p.m . , a doctor examines her and orders tests ./.
case(9-2, At-1)
root(ROOT-0, 9-2)
advmod(9-2, p.m-3)
punct(9-2, .-4)
punct(examines-4, ,-1)
det(doctor-3, a-2)
nsubj(examines-4, doctor-3)
root(ROOT-0, examines-4)
nsubj(tests-8, her-5)
cc(her-5, and-6)
conj:and(her-5, orders-7)
nsubj(tests-8, orders-7)
xcomp(examines-4, tests-8)
punct(examines-4, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#doctor

examine :: The documents , filed with the National Highway Traffic Safety Administration , also indicated that a GM technical committee examining the complaints at one point recommended to GM management that the cars be recalled -- but subsequently reversed itself ./.
det(documents-2, The-1)
nsubj(indicated-14, documents-2)
punct(documents-2, ,-3)
acl(documents-2, filed-4)
case(Administration-11, with-5)
det(Administration-11, the-6)
compound(Administration-11, National-7)
compound(Administration-11, Highway-8)
compound(Administration-11, Traffic-9)
compound(Administration-11, Safety-10)
nmod:with(filed-4, Administration-11)
punct(documents-2, ,-12)
advmod(indicated-14, also-13)
root(ROOT-0, indicated-14)
mark(recommended-26, that-15)
det(committee-19, a-16)
compound(committee-19, GM-17)
compound(committee-19, technical-18)
nsubj(recommended-26, committee-19)
acl(committee-19, examining-20)
det(complaints-22, the-21)
dobj(examining-20, complaints-22)
case(point-25, at-23)
nummod(point-25, one-24)
nmod:at(examining-20, point-25)
ccomp(indicated-14, recommended-26)
case(management-29, to-27)
compound(management-29, GM-28)
nmod:to(recommended-26, management-29)
mark(recalled-34, that-30)
det(cars-32, the-31)
nsubjpass(recalled-34, cars-32)
nsubjpass(reversed-38, cars-32)
auxpass(recalled-34, be-33)
ccomp(recommended-26, recalled-34)
punct(recalled-34, ---35)
cc(recalled-34, but-36)
advmod(reversed-38, subsequently-37)
ccomp(recommended-26, reversed-38)
conj:but(recalled-34, reversed-38)
dobj(reversed-38, itself-39)
punct(indicated-14, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#complaints

examine :: Another form of front-running likely to be examined in coming months is trading by Wall Street firms in October in anticipation of massive sell orders by money managers using the computerized hedging strategy known as portfolio insurance ./.
det(form-2, Another-1)
root(ROOT-0, form-2)
mark(trading-13, of-3)
nsubj(trading-13, front-running-4)
amod(front-running-4, likely-5)
mark(examined-8, to-6)
auxpass(examined-8, be-7)
xcomp(likely-5, examined-8)
case(months-11, in-9)
amod(months-11, coming-10)
nmod:in(examined-8, months-11)
aux(trading-13, is-12)
acl(form-2, trading-13)
case(firms-17, by-14)
compound(firms-17, Wall-15)
compound(firms-17, Street-16)
nmod:by(trading-13, firms-17)
case(October-19, in-18)
nmod:in(trading-13, October-19)
case(anticipation-21, in-20)
nmod:in(trading-13, anticipation-21)
case(orders-25, of-22)
amod(orders-25, massive-23)
compound(orders-25, sell-24)
nmod:of(anticipation-21, orders-25)
case(managers-28, by-26)
compound(managers-28, money-27)
nmod:by(orders-25, managers-28)
xcomp(trading-13, using-29)
det(strategy-33, the-30)
amod(strategy-33, computerized-31)
compound(strategy-33, hedging-32)
dobj(using-29, strategy-33)
acl(strategy-33, known-34)
case(insurance-37, as-35)
compound(insurance-37, portfolio-36)
nmod:as(known-34, insurance-37)
punct(form-2, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#be

examine :: Most historians of the Tulipmania were so intent on demonstrating the follies of speculative markets and thereby providing a case for controlling market activities that they neglected to examine the market fundamentals of bulb pricing ./.
amod(historians-2, Most-1)
nsubj(intent-8, historians-2)
case(Tulipmania-5, of-3)
det(Tulipmania-5, the-4)
nmod:of(historians-2, Tulipmania-5)
cop(intent-8, were-6)
advmod(intent-8, so-7)
root(ROOT-0, intent-8)
mark(demonstrating-10, on-9)
advcl(intent-8, demonstrating-10)
det(follies-12, the-11)
dobj(demonstrating-10, follies-12)
case(markets-15, of-13)
amod(markets-15, speculative-14)
nmod:of(follies-12, markets-15)
cc(demonstrating-10, and-16)
advmod(providing-18, thereby-17)
advcl(intent-8, providing-18)
conj:and(demonstrating-10, providing-18)
det(case-20, a-19)
dobj(providing-18, case-20)
mark(controlling-22, for-21)
acl(case-20, controlling-22)
compound(activities-24, market-23)
dobj(controlling-22, activities-24)
mark(neglected-27, that-25)
nsubj(neglected-27, they-26)
nsubj:xsubj(examine-29, they-26)
ccomp(activities-24, neglected-27)
mark(examine-29, to-28)
xcomp(neglected-27, examine-29)
det(fundamentals-32, the-30)
compound(fundamentals-32, market-31)
dobj(examine-29, fundamentals-32)
case(pricing-35, of-33)
compound(pricing-35, bulb-34)
nmod:of(fundamentals-32, pricing-35)
punct(intent-8, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#pricing

examine :: Moreover , the SEC would have the right to examine books and records without prior warning ./.
advmod(have-6, Moreover-1)
punct(have-6, ,-2)
det(SEC-4, the-3)
nsubj(have-6, SEC-4)
aux(have-6, would-5)
root(ROOT-0, have-6)
det(right-8, the-7)
dobj(have-6, right-8)
mark(examine-10, to-9)
acl(right-8, examine-10)
dobj(examine-10, books-11)
cc(books-11, and-12)
dobj(examine-10, records-13)
conj:and(books-11, records-13)
case(warning-16, without-14)
amod(warning-16, prior-15)
nmod:without(examine-10, warning-16)
punct(have-6, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#books

examine :: The second will examine policies that could lessen current concentrations of gases that contribute to global warming ./.
det(second-2, The-1)
nsubj(examine-4, second-2)
aux(examine-4, will-3)
root(ROOT-0, examine-4)
dobj(examine-4, policies-5)
nsubj(lessen-8, policies-5)
ref(policies-5, that-6)
aux(lessen-8, could-7)
acl:relcl(policies-5, lessen-8)
amod(concentrations-10, current-9)
dobj(lessen-8, concentrations-10)
case(gases-12, of-11)
nmod:of(concentrations-10, gases-12)
nsubj(contribute-14, gases-12)
ref(gases-12, that-13)
acl:relcl(gases-12, contribute-14)
case(warming-17, to-15)
amod(warming-17, global-16)
nmod:to(contribute-14, warming-17)
punct(examine-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#policies

examine :: For the standard `` pap '' smear , a technician examines the cells on the swab for visual evidence of abnormalities that indicate pre-cancerous changes in the cervix ./.
case(smear-7, For-1)
det(smear-7, the-2)
amod(smear-7, standard-3)
punct(smear-7, ``-4)
compound(smear-7, pap-5)
punct(smear-7, ''-6)
nmod:for(examines-11, smear-7)
punct(examines-11, ,-8)
det(technician-10, a-9)
nsubj(examines-11, technician-10)
root(ROOT-0, examines-11)
det(cells-13, the-12)
dobj(examines-11, cells-13)
case(swab-16, on-14)
det(swab-16, the-15)
nmod:on(examines-11, swab-16)
case(evidence-19, for-17)
amod(evidence-19, visual-18)
nmod:for(examines-11, evidence-19)
case(abnormalities-21, of-20)
nmod:of(evidence-19, abnormalities-21)
nsubj(indicate-23, abnormalities-21)
ref(abnormalities-21, that-22)
acl:relcl(abnormalities-21, indicate-23)
amod(changes-25, pre-cancerous-24)
dobj(indicate-23, changes-25)
case(cervix-28, in-26)
det(cervix-28, the-27)
nmod:in(changes-25, cervix-28)
punct(examines-11, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#cells

examine :: He has closely examined the works of Hieronymus Bosch , but their crowded worlds of paradise and writhing sinners yielded few medical rewards ./.
nsubj(examined-4, He-1)
aux(examined-4, has-2)
advmod(examined-4, closely-3)
root(ROOT-0, examined-4)
det(works-6, the-5)
dobj(examined-4, works-6)
case(Bosch-9, of-7)
compound(Bosch-9, Hieronymus-8)
nmod:of(works-6, Bosch-9)
punct(examined-4, ,-10)
cc(examined-4, but-11)
nmod:poss(worlds-14, their-12)
amod(worlds-14, crowded-13)
nsubj(yielded-20, worlds-14)
case(paradise-16, of-15)
nmod:of(worlds-14, paradise-16)
cc(paradise-16, and-17)
amod(sinners-19, writhing-18)
nmod:of(worlds-14, sinners-19)
conj:and(paradise-16, sinners-19)
conj:but(examined-4, yielded-20)
amod(rewards-23, few-21)
amod(rewards-23, medical-22)
dobj(yielded-20, rewards-23)
punct(examined-4, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#works

examine :: It 's a step designed to get around potential subpoena limitations by enabling lawyers to examine Seattle witnesses from here ./.
nsubj(step-4, It-1)
cop(step-4, 's-2)
det(step-4, a-3)
root(ROOT-0, step-4)
acl(step-4, designed-5)
mark(get-7, to-6)
xcomp(designed-5, get-7)
case(limitations-11, around-8)
amod(limitations-11, potential-9)
compound(limitations-11, subpoena-10)
nmod:around(get-7, limitations-11)
mark(enabling-13, by-12)
advcl(get-7, enabling-13)
dobj(enabling-13, lawyers-14)
nsubj:xsubj(examine-16, lawyers-14)
mark(examine-16, to-15)
xcomp(enabling-13, examine-16)
compound(witnesses-18, Seattle-17)
dobj(examine-16, witnesses-18)
case(here-20, from-19)
nmod:from(examine-16, here-20)
punct(step-4, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#witnesses

examine :: A Dr. E `` examined a horse that had warts on its forelegs , '' begins one item in the newsletter , which withholds names of vets and patients ./.
det(E-3, A-1)
compound(E-3, Dr.-2)
nsubj(examined-5, E-3)
punct(examined-5, ``-4)
root(ROOT-0, examined-5)
det(horse-7, a-6)
dobj(examined-5, horse-7)
nsubj(had-9, horse-7)
ref(horse-7, that-8)
acl:relcl(horse-7, had-9)
dobj(had-9, warts-10)
case(forelegs-13, on-11)
nmod:poss(forelegs-13, its-12)
nmod:on(had-9, forelegs-13)
punct(examined-5, ,-14)
punct(examined-5, ''-15)
dep(examined-5, begins-16)
nummod(item-18, one-17)
dobj(begins-16, item-18)
case(newsletter-21, in-19)
det(newsletter-21, the-20)
nmod:in(begins-16, newsletter-21)
nsubj(withholds-24, newsletter-21)
punct(newsletter-21, ,-22)
ref(newsletter-21, which-23)
acl:relcl(newsletter-21, withholds-24)
dobj(withholds-24, names-25)
case(vets-27, of-26)
nmod:of(names-25, vets-27)
cc(vets-27, and-28)
nmod:of(names-25, patients-29)
conj:and(vets-27, patients-29)
punct(examined-5, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#horse

examine :: In Kindred 1002 alone , the scientists have examined 350 members ./.
case(Kindred-2, In-1)
nmod:in(examined-9, Kindred-2)
nummod(Kindred-2, 1002-3)
advmod(Kindred-2, alone-4)
punct(examined-9, ,-5)
det(scientists-7, the-6)
nsubj(examined-9, scientists-7)
aux(examined-9, have-8)
root(ROOT-0, examined-9)
nummod(members-11, 350-10)
dobj(examined-9, members-11)
punct(examined-9, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#members

examine :: One of the contracts prosecutors are examining -- the development job for the Navy 's carrier-based advanced tactical aircraft -- was subject to a `` best and final offer , '' known as a BAFO , and then a `` best and revised final offer , '' known as a BARFO. Investigators are looking at whether Melvyn Paisley improperly steered the multibillion-dollar job to McDonnell Douglas Corp. and General Dynamics Corp. while he was assistant Navy secretary ./.
nsubj(subject-22, One-1)
case(contracts-4, of-2)
det(contracts-4, the-3)
nmod:of(One-1, contracts-4)
nsubj(examining-7, prosecutors-5)
aux(examining-7, are-6)
acl:relcl(contracts-4, examining-7)
punct(One-1, ---8)
det(job-11, the-9)
compound(job-11, development-10)
dep(One-1, job-11)
case(aircraft-19, for-12)
det(Navy-14, the-13)
nmod:poss(aircraft-19, Navy-14)
case(Navy-14, 's-15)
amod(aircraft-19, carrier-based-16)
amod(aircraft-19, advanced-17)
amod(aircraft-19, tactical-18)
nmod:for(job-11, aircraft-19)
punct(One-1, ---20)
cop(subject-22, was-21)
root(ROOT-0, subject-22)
case(offer-29, to-23)
det(offer-29, a-24)
punct(offer-29, ``-25)
amod(offer-29, best-26)
cc(best-26, and-27)
conj:and(best-26, final-28)
amod(offer-29, final-28)
nmod:to(subject-22, offer-29)
punct(subject-22, ,-30)
punct(subject-22, ''-31)
acl(subject-22, known-32)
case(BAFO-35, as-33)
det(BAFO-35, a-34)
nmod:as(known-32, BAFO-35)
punct(subject-22, ,-36)
cc(subject-22, and-37)
advmod(offer-45, then-38)
det(offer-45, a-39)
punct(offer-45, ``-40)
amod(offer-45, best-41)
cc(best-41, and-42)
conj:and(best-41, revised-43)
amod(offer-45, revised-43)
amod(offer-45, final-44)
conj:and(subject-22, offer-45)
punct(subject-22, ,-46)
punct(subject-22, ''-47)
dep(subject-22, known-48)
case(BARFO-51, as-49)
det(BARFO-51, a-50)
nmod:as(known-48, BARFO-51)
punct(subject-22, .-52)
nsubj(looking-3, Investigators-1)
aux(looking-3, are-2)
root(ROOT-0, looking-3)
mark(steered-9, at-4)
mark(steered-9, whether-5)
compound(Paisley-7, Melvyn-6)
nsubj(steered-9, Paisley-7)
advmod(steered-9, improperly-8)
advcl(looking-3, steered-9)
det(job-12, the-10)
amod(job-12, multibillion-dollar-11)
dobj(steered-9, job-12)
case(Corp.-16, to-13)
compound(Corp.-16, McDonnell-14)
compound(Corp.-16, Douglas-15)
nmod:to(steered-9, Corp.-16)
cc(Corp.-16, and-17)
compound(Corp.-20, General-18)
compound(Corp.-20, Dynamics-19)
nmod:to(steered-9, Corp.-20)
conj:and(Corp.-16, Corp.-20)
mark(secretary-26, while-21)
nsubj(secretary-26, he-22)
cop(secretary-26, was-23)
amod(secretary-26, assistant-24)
compound(secretary-26, Navy-25)
advcl(steered-9, secretary-26)
punct(looking-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#prosecutors

examine :: Particularly remarkable in this context are Whistler 's lyrical 1864 depiction of an English woman examining a blue-and-white ceramic vase , which mixes Chinese and Japanese themes , and Monet 's astonishingly brash depiction of his wife in a bright red kimono , surrounded by fans ./.
advmod(remarkable-2, Particularly-1)
dep(are-6, remarkable-2)
case(context-5, in-3)
det(context-5, this-4)
nmod:in(remarkable-2, context-5)
root(ROOT-0, are-6)
nmod:poss(depiction-11, Whistler-7)
case(Whistler-7, 's-8)
amod(depiction-11, lyrical-9)
nummod(depiction-11, 1864-10)
nsubj(are-6, depiction-11)
case(woman-15, of-12)
det(woman-15, an-13)
amod(woman-15, English-14)
nmod:of(depiction-11, woman-15)
acl(woman-15, examining-16)
det(vase-20, a-17)
amod(vase-20, blue-and-white-18)
amod(vase-20, ceramic-19)
dobj(examining-16, vase-20)
nsubj(mixes-23, vase-20)
punct(vase-20, ,-21)
ref(vase-20, which-22)
acl:relcl(vase-20, mixes-23)
amod(themes-27, Chinese-24)
cc(Chinese-24, and-25)
conj:and(Chinese-24, Japanese-26)
amod(themes-27, Japanese-26)
dobj(mixes-23, themes-27)
punct(are-6, ,-28)
cc(are-6, and-29)
nmod:poss(depiction-34, Monet-30)
case(Monet-30, 's-31)
advmod(brash-33, astonishingly-32)
amod(depiction-34, brash-33)
conj:and(are-6, depiction-34)
case(wife-37, of-35)
nmod:poss(wife-37, his-36)
nmod:of(depiction-34, wife-37)
case(kimono-42, in-38)
det(kimono-42, a-39)
amod(kimono-42, bright-40)
amod(kimono-42, red-41)
nmod:in(depiction-34, kimono-42)
punct(depiction-34, ,-43)
acl(depiction-34, surrounded-44)
case(fans-46, by-45)
nmod:by(surrounded-44, fans-46)
punct(are-6, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#vase

examine :: If the Mulheren case does go forward , Mr. Puccio , a partner at Milbank , Tweed , Hadley & McCloy , would likely become the first defense lawyer to cross-examine Mr. Boesky , a role that would guarantee Mr. Puccio enormous media attention ./.
mark(go-6, If-1)
det(case-4, the-2)
compound(case-4, Mulheren-3)
nsubj(go-6, case-4)
aux(go-6, does-5)
advcl(become-25, go-6)
advmod(go-6, forward-7)
punct(become-25, ,-8)
compound(Puccio-10, Mr.-9)
nsubj(become-25, Puccio-10)
punct(Puccio-10, ,-11)
det(partner-13, a-12)
appos(Puccio-10, partner-13)
case(Milbank-15, at-14)
nmod:at(partner-13, Milbank-15)
punct(Milbank-15, ,-16)
nmod:at(partner-13, Tweed-17)
conj:&(Milbank-15, Tweed-17)
punct(Milbank-15, ,-18)
nmod:at(partner-13, Hadley-19)
conj:&(Milbank-15, Hadley-19)
cc(Milbank-15, &-20)
nmod:at(partner-13, McCloy-21)
conj:&(Milbank-15, McCloy-21)
punct(Puccio-10, ,-22)
aux(become-25, would-23)
advmod(become-25, likely-24)
root(ROOT-0, become-25)
det(lawyer-29, the-26)
amod(lawyer-29, first-27)
compound(lawyer-29, defense-28)
xcomp(become-25, lawyer-29)
mark(cross-examine-31, to-30)
acl(lawyer-29, cross-examine-31)
compound(Boesky-33, Mr.-32)
dobj(cross-examine-31, Boesky-33)
punct(Boesky-33, ,-34)
det(role-36, a-35)
appos(Boesky-33, role-36)
nsubj(guarantee-39, role-36)
ref(role-36, that-37)
aux(guarantee-39, would-38)
acl:relcl(role-36, guarantee-39)
compound(Puccio-41, Mr.-40)
iobj(guarantee-39, Puccio-41)
amod(attention-44, enormous-42)
compound(attention-44, media-43)
dobj(guarantee-39, attention-44)
punct(become-25, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

examine :: But David Bartholomew , an assistant vice president of Merrill Lynch , says that over a 12-year period he examined , Mr. Finckle 's six-month forecasts were 85 % accurate ./.
cc(says-13, But-1)
compound(Bartholomew-3, David-2)
nsubj(says-13, Bartholomew-3)
punct(Bartholomew-3, ,-4)
det(president-8, an-5)
amod(president-8, assistant-6)
compound(president-8, vice-7)
appos(Bartholomew-3, president-8)
case(Lynch-11, of-9)
compound(Lynch-11, Merrill-10)
nmod:of(president-8, Lynch-11)
punct(Bartholomew-3, ,-12)
root(ROOT-0, says-13)
mark(accurate-30, that-14)
case(period-18, over-15)
det(period-18, a-16)
amod(period-18, 12-year-17)
nmod:over(accurate-30, period-18)
nsubj(examined-20, he-19)
acl:relcl(period-18, examined-20)
punct(accurate-30, ,-21)
compound(Finckle-23, Mr.-22)
nmod:poss(forecasts-26, Finckle-23)
case(Finckle-23, 's-24)
amod(forecasts-26, six-month-25)
nsubj(accurate-30, forecasts-26)
cop(accurate-30, were-27)
nummod(%-29, 85-28)
nmod:npmod(accurate-30, %-29)
ccomp(says-13, accurate-30)
punct(says-13, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#he

examine :: Citibank has examined several Texas banks , but thus far has decided that it did n't have enough confidence in the short-term Texas outlook to take the plunge ./.
nsubj(examined-3, Citibank-1)
nsubj(decided-12, Citibank-1)
aux(examined-3, has-2)
root(ROOT-0, examined-3)
amod(banks-6, several-4)
compound(banks-6, Texas-5)
dobj(examined-3, banks-6)
punct(examined-3, ,-7)
cc(examined-3, but-8)
advmod(decided-12, thus-9)
advmod(decided-12, far-10)
aux(decided-12, has-11)
conj:but(examined-3, decided-12)
mark(have-17, that-13)
nsubj(have-17, it-14)
aux(have-17, did-15)
neg(have-17, n't-16)
ccomp(decided-12, have-17)
amod(confidence-19, enough-18)
dobj(have-17, confidence-19)
case(outlook-24, in-20)
det(outlook-24, the-21)
amod(outlook-24, short-term-22)
compound(outlook-24, Texas-23)
nmod:in(confidence-19, outlook-24)
mark(take-26, to-25)
acl(confidence-19, take-26)
det(plunge-28, the-27)
dobj(take-26, plunge-28)
punct(examined-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#banks

examine :: Herbert Weisberg , a political scientist at Ohio State University , analyzed national election data compiled by the University of Michigan and concluded , `` When one examines voting in the 1984 election , one finds the largest voting differences on the basis of race and income , followed by differences based on marital status , religion , gender , and region . ''/''
compound(Weisberg-2, Herbert-1)
nsubj(analyzed-12, Weisberg-2)
nsubj(concluded-23, Weisberg-2)
punct(Weisberg-2, ,-3)
det(scientist-6, a-4)
amod(scientist-6, political-5)
appos(Weisberg-2, scientist-6)
case(University-10, at-7)
compound(University-10, Ohio-8)
compound(University-10, State-9)
nmod:at(scientist-6, University-10)
punct(Weisberg-2, ,-11)
root(ROOT-0, analyzed-12)
amod(data-15, national-13)
compound(data-15, election-14)
dobj(analyzed-12, data-15)
acl(data-15, compiled-16)
case(University-19, by-17)
det(University-19, the-18)
nmod:by(compiled-16, University-19)
case(Michigan-21, of-20)
nmod:of(University-19, Michigan-21)
cc(analyzed-12, and-22)
conj:and(analyzed-12, concluded-23)
punct(concluded-23, ,-24)
punct(concluded-23, ``-25)
advmod(examines-28, When-26)
nsubj(examines-28, one-27)
advcl(finds-36, examines-28)
dobj(examines-28, voting-29)
case(election-33, in-30)
det(election-33, the-31)
nummod(election-33, 1984-32)
nmod:in(examines-28, election-33)
punct(finds-36, ,-34)
nsubj(finds-36, one-35)
ccomp(concluded-23, finds-36)
det(differences-40, the-37)
amod(differences-40, largest-38)
compound(differences-40, voting-39)
dobj(finds-36, differences-40)
case(basis-43, on-41)
det(basis-43, the-42)
nmod:on(differences-40, basis-43)
case(race-45, of-44)
nmod:of(basis-43, race-45)
cc(race-45, and-46)
nmod:of(basis-43, income-47)
conj:and(race-45, income-47)
punct(finds-36, ,-48)
advcl(finds-36, followed-49)
case(differences-51, by-50)
nmod:by(followed-49, differences-51)
case(status-55, based-52)
mwe(based-52, on-53)
amod(status-55, marital-54)
nmod:based_on(differences-51, status-55)
punct(status-55, ,-56)
nmod:based_on(differences-51, religion-57)
conj:and(status-55, religion-57)
punct(status-55, ,-58)
nmod:based_on(differences-51, gender-59)
conj:and(status-55, gender-59)
punct(status-55, ,-60)
cc(status-55, and-61)
nmod:based_on(differences-51, region-62)
conj:and(status-55, region-62)
punct(analyzed-12, .-63)
punct(analyzed-12, ''-64)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: examine#voting

examine :: `` We tried to protect as many people as we could , examining every job , every structure and every expense , '' Mr. Traub said ./.
punct(said-26, ``-1)
nsubj(tried-3, We-2)
ccomp(said-26, tried-3)
mark(protect-5, to-4)
xcomp(tried-3, protect-5)
advmod(people-8, as-6)
amod(people-8, many-7)
dobj(protect-5, people-8)
mark(could-11, as-9)
nsubj(could-11, we-10)
acl:relcl(people-8, could-11)
punct(tried-3, ,-12)
xcomp(tried-3, examining-13)
det(job-15, every-14)
dobj(examining-13, job-15)
punct(tried-3, ,-16)
det(structure-18, every-17)
dobj(tried-3, structure-18)
nsubj:xsubj(protect-5, structure-18)
cc(structure-18, and-19)
det(expense-21, every-20)
dobj(tried-3, expense-21)
nsubj:xsubj(protect-5, expense-21)
conj:and(structure-18, expense-21)
punct(said-26, ,-22)
punct(said-26, ''-23)
compound(Traub-25, Mr.-24)
nsubj(said-26, Traub-25)
root(ROOT-0, said-26)
punct(said-26, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#job

examine :: The May employment data will be minutely examined by economists who are sifting for clues to the pace of inflation and interest rates ./.
det(data-4, The-1)
compound(data-4, May-2)
compound(data-4, employment-3)
nsubjpass(examined-8, data-4)
aux(examined-8, will-5)
auxpass(examined-8, be-6)
advmod(examined-8, minutely-7)
root(ROOT-0, examined-8)
case(economists-10, by-9)
nmod:agent(examined-8, economists-10)
nsubj(sifting-13, economists-10)
ref(economists-10, who-11)
aux(sifting-13, are-12)
acl:relcl(economists-10, sifting-13)
case(clues-15, for-14)
nmod:for(sifting-13, clues-15)
case(pace-18, to-16)
det(pace-18, the-17)
nmod:to(clues-15, pace-18)
case(inflation-20, of-19)
nmod:of(pace-18, inflation-20)
cc(inflation-20, and-21)
compound(rates-23, interest-22)
nmod:of(pace-18, rates-23)
conj:and(inflation-20, rates-23)
punct(examined-8, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: examine#data

fill :: By the time they reached the Inner Court many were beginning to look bleary-eyed as they wandered through a sea of glass cases filled with everything from Han jugs to Ming wall-scrolls and jades ./.
case(time-3, By-1)
det(time-3, the-2)
root(ROOT-0, time-3)
nsubj(reached-5, they-4)
acl:relcl(time-3, reached-5)
det(Court-8, the-6)
amod(Court-8, Inner-7)
dobj(reached-5, Court-8)
nsubj(beginning-11, many-9)
nsubj:xsubj(look-13, many-9)
aux(beginning-11, were-10)
acl:relcl(Court-8, beginning-11)
mark(look-13, to-12)
xcomp(beginning-11, look-13)
xcomp(look-13, bleary-eyed-14)
mark(wandered-17, as-15)
nsubj(wandered-17, they-16)
advcl(beginning-11, wandered-17)
case(sea-20, through-18)
det(sea-20, a-19)
nmod:through(wandered-17, sea-20)
case(cases-23, of-21)
compound(cases-23, glass-22)
nmod:of(sea-20, cases-23)
acl(cases-23, filled-24)
case(everything-26, with-25)
nmod:with(filled-24, everything-26)
case(jugs-29, from-27)
compound(jugs-29, Han-28)
nmod:from(everything-26, jugs-29)
case(wall-scrolls-32, to-30)
amod(wall-scrolls-32, Ming-31)
nmod:to(jugs-29, wall-scrolls-32)
cc(wall-scrolls-32, and-33)
nmod:to(jugs-29, jades-34)
conj:and(wall-scrolls-32, jades-34)
punct(time-3, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#everything

fill :: And Mr. Karnes , a political unknown selected by GOP Gov. Kay Orr to fill a Senate vacancy created by the death of Edward Zorinsky 18 months ago , is followed by the shadow of his rival wherever he goes ./.
cc(followed-31, And-1)
compound(Karnes-3, Mr.-2)
nsubjpass(followed-31, Karnes-3)
punct(Karnes-3, ,-4)
det(unknown-7, a-5)
amod(unknown-7, political-6)
appos(Karnes-3, unknown-7)
acl(unknown-7, selected-8)
case(Orr-13, by-9)
compound(Orr-13, GOP-10)
compound(Orr-13, Gov.-11)
compound(Orr-13, Kay-12)
nmod:by(selected-8, Orr-13)
mark(fill-15, to-14)
xcomp(selected-8, fill-15)
det(vacancy-18, a-16)
compound(vacancy-18, Senate-17)
dobj(fill-15, vacancy-18)
acl(vacancy-18, created-19)
case(death-22, by-20)
det(death-22, the-21)
nmod:by(created-19, death-22)
case(Zorinsky-25, of-23)
compound(Zorinsky-25, Edward-24)
nmod:of(death-22, Zorinsky-25)
nummod(months-27, 18-26)
nmod:npmod(ago-28, months-27)
advmod(fill-15, ago-28)
punct(Karnes-3, ,-29)
auxpass(followed-31, is-30)
root(ROOT-0, followed-31)
case(shadow-34, by-32)
det(shadow-34, the-33)
nmod:agent(followed-31, shadow-34)
case(rival-37, of-35)
nmod:poss(rival-37, his-36)
nmod:of(shadow-34, rival-37)
advmod(goes-40, wherever-38)
nsubj(goes-40, he-39)
dep(rival-37, goes-40)
punct(followed-31, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#vacancy

fill :: Stories of dog restaurants being shooed from areas tourists frequent filled the foreign press in pre-Olympic days ./.
nsubjpass(shooed-6, Stories-1)
case(restaurants-4, of-2)
compound(restaurants-4, dog-3)
nmod:of(Stories-1, restaurants-4)
auxpass(shooed-6, being-5)
root(ROOT-0, shooed-6)
case(tourists-9, from-7)
compound(tourists-9, areas-8)
nmod:from(shooed-6, tourists-9)
amod(tourists-9, frequent-10)
acl(frequent-10, filled-11)
det(press-14, the-12)
amod(press-14, foreign-13)
dobj(filled-11, press-14)
case(days-17, in-15)
amod(days-17, pre-Olympic-16)
nmod:in(filled-11, days-17)
punct(shooed-6, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#press

fill :: In an extreme close-up , Mr. Gorton 's face then fills the screen: `` I needed to listen more , and the voters made that point crystal clear ./.
case(close-up-4, In-1)
det(close-up-4, an-2)
amod(close-up-4, extreme-3)
nmod:in(fills-11, close-up-4)
punct(fills-11, ,-5)
compound(Gorton-7, Mr.-6)
nmod:poss(face-9, Gorton-7)
case(Gorton-7, 's-8)
nsubj(fills-11, face-9)
advmod(fills-11, then-10)
root(ROOT-0, fills-11)
det(screen-13, the-12)
dobj(fills-11, screen-13)
punct(fills-11, :-14)
punct(fills-11, ``-15)
nsubj(needed-17, I-16)
nsubj:xsubj(listen-19, I-16)
parataxis(fills-11, needed-17)
mark(listen-19, to-18)
xcomp(needed-17, listen-19)
dobj(listen-19, more-20)
punct(needed-17, ,-21)
cc(needed-17, and-22)
det(voters-24, the-23)
nsubj(made-25, voters-24)
parataxis(fills-11, made-25)
conj:and(needed-17, made-25)
det(point-27, that-26)
nsubj(clear-29, point-27)
nmod:npmod(clear-29, crystal-28)
xcomp(made-25, clear-29)
punct(fills-11, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#screen

fill :: Their melanin-producing system keeps the skin constantly filled with the dark pigment ./.
nmod:poss(system-3, Their-1)
amod(system-3, melanin-producing-2)
nsubj(keeps-4, system-3)
root(ROOT-0, keeps-4)
det(skin-6, the-5)
dobj(keeps-4, skin-6)
advmod(filled-8, constantly-7)
acl(skin-6, filled-8)
case(pigment-12, with-9)
det(pigment-12, the-10)
amod(pigment-12, dark-11)
nmod:with(filled-8, pigment-12)
punct(keeps-4, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#pigment

fill :: Levi Strauss & Co. moved from a 13-page booklet `` filled with details and procedures '' to a half-page statement of principles , says a spokeswoman ./.
compound(Strauss-2, Levi-1)
nsubj(moved-5, Strauss-2)
cc(Strauss-2, &-3)
conj:&(Strauss-2, Co.-4)
nsubj(moved-5, Co.-4)
ccomp(says-24, moved-5)
case(booklet-9, from-6)
det(booklet-9, a-7)
amod(booklet-9, 13-page-8)
nmod:from(moved-5, booklet-9)
punct(booklet-9, ``-10)
acl(booklet-9, filled-11)
case(details-13, with-12)
nmod:with(filled-11, details-13)
cc(details-13, and-14)
nmod:with(filled-11, procedures-15)
conj:and(details-13, procedures-15)
punct(details-13, ''-16)
case(statement-20, to-17)
det(statement-20, a-18)
amod(statement-20, half-page-19)
nmod:to(details-13, statement-20)
case(principles-22, of-21)
nmod:of(statement-20, principles-22)
punct(says-24, ,-23)
root(ROOT-0, says-24)
det(spokeswoman-26, a-25)
nsubj(says-24, spokeswoman-26)
punct(says-24, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#details

fill :: The short-term parking lots at Newark Airport in New Jersey now fill up several times a week -- even though it costs $ 48 a day to park there ./.
det(lots-4, The-1)
amod(lots-4, short-term-2)
compound(lots-4, parking-3)
nsubj(fill-12, lots-4)
case(Airport-7, at-5)
compound(Airport-7, Newark-6)
nmod:at(lots-4, Airport-7)
case(Jersey-10, in-8)
compound(Jersey-10, New-9)
nmod:in(Airport-7, Jersey-10)
advmod(fill-12, now-11)
root(ROOT-0, fill-12)
compound:prt(fill-12, up-13)
amod(times-15, several-14)
dobj(fill-12, times-15)
det(week-17, a-16)
nmod:npmod(times-15, week-17)
punct(fill-12, ---18)
advmod(costs-22, even-19)
mark(costs-22, though-20)
nsubj(costs-22, it-21)
advcl(fill-12, costs-22)
dep(48-24, $-23)
dobj(costs-22, 48-24)
det(day-26, a-25)
nmod:npmod(48-24, day-26)
mark(park-28, to-27)
advcl(costs-22, park-28)
advmod(park-28, there-29)
punct(fill-12, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#times

fill :: It was a fight that filled magazines and books and gave professors case histories for business schools ./.
nsubj(fight-4, It-1)
cop(fight-4, was-2)
det(fight-4, a-3)
root(ROOT-0, fight-4)
nsubj(filled-6, fight-4)
nsubj(gave-11, fight-4)
ref(fight-4, that-5)
acl:relcl(fight-4, filled-6)
dobj(filled-6, magazines-7)
cc(magazines-7, and-8)
dobj(filled-6, books-9)
conj:and(magazines-7, books-9)
cc(filled-6, and-10)
acl:relcl(fight-4, gave-11)
conj:and(filled-6, gave-11)
compound(histories-14, professors-12)
compound(histories-14, case-13)
dobj(gave-11, histories-14)
case(schools-17, for-15)
compound(schools-17, business-16)
nmod:for(gave-11, schools-17)
punct(fight-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#magazines

fill :: Mr. Cossa 's grain bin may be filling up , but just last month another 100 peasants -- looking for food and security -- moved into the village to escape the fighting in the countryside ./.
compound(Cossa-2, Mr.-1)
nmod:poss(bin-5, Cossa-2)
case(Cossa-2, 's-3)
compound(bin-5, grain-4)
nsubj(filling-8, bin-5)
aux(filling-8, may-6)
aux(filling-8, be-7)
root(ROOT-0, filling-8)
compound:prt(filling-8, up-9)
punct(filling-8, ,-10)
cc(filling-8, but-11)
advmod(month-14, just-12)
amod(month-14, last-13)
nmod:tmod(moved-25, month-14)
det(peasants-17, another-15)
nummod(peasants-17, 100-16)
nsubj(moved-25, peasants-17)
nsubj:xsubj(escape-30, peasants-17)
punct(peasants-17, ---18)
acl(peasants-17, looking-19)
case(food-21, for-20)
nmod:for(looking-19, food-21)
cc(food-21, and-22)
nmod:for(looking-19, security-23)
conj:and(food-21, security-23)
punct(peasants-17, ---24)
conj:but(filling-8, moved-25)
case(village-28, into-26)
det(village-28, the-27)
nmod:into(moved-25, village-28)
mark(escape-30, to-29)
xcomp(moved-25, escape-30)
det(fighting-32, the-31)
dobj(escape-30, fighting-32)
case(countryside-35, in-33)
det(countryside-35, the-34)
nmod:in(fighting-32, countryside-35)
punct(filling-8, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#bin

fill :: The `` catastrophic illness '' health-care bill approved by Congress yesterday will fill some major gaps in Medicare coverage for the elderly ./.
det(bill-7, The-1)
punct(bill-7, ``-2)
amod(bill-7, catastrophic-3)
compound(bill-7, illness-4)
punct(bill-7, ''-5)
compound(bill-7, health-care-6)
nsubj(fill-13, bill-7)
acl(bill-7, approved-8)
case(Congress-10, by-9)
nmod:by(approved-8, Congress-10)
nmod:tmod(bill-7, yesterday-11)
aux(fill-13, will-12)
root(ROOT-0, fill-13)
det(gaps-16, some-14)
amod(gaps-16, major-15)
dobj(fill-13, gaps-16)
case(coverage-19, in-17)
compound(coverage-19, Medicare-18)
nmod:in(gaps-16, coverage-19)
case(elderly-22, for-20)
det(elderly-22, the-21)
nmod:for(fill-13, elderly-22)
punct(fill-13, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#gaps

fill :: After being widowed at the age of 50 , this heretofore conventional woman began making sculptures , systematically filling her house and yard with her weird creations ./.
mark(widowed-3, After-1)
auxpass(widowed-3, being-2)
advcl(began-14, widowed-3)
case(age-6, at-4)
det(age-6, the-5)
nmod:at(widowed-3, age-6)
case(50-8, of-7)
nmod:of(age-6, 50-8)
punct(began-14, ,-9)
det(woman-13, this-10)
advmod(conventional-12, heretofore-11)
amod(woman-13, conventional-12)
nsubj(began-14, woman-13)
root(ROOT-0, began-14)
xcomp(began-14, making-15)
dobj(making-15, sculptures-16)
punct(making-15, ,-17)
advmod(filling-19, systematically-18)
advcl(making-15, filling-19)
nmod:poss(house-21, her-20)
dobj(filling-19, house-21)
cc(house-21, and-22)
dobj(filling-19, yard-23)
conj:and(house-21, yard-23)
case(creations-27, with-24)
nmod:poss(creations-27, her-25)
amod(creations-27, weird-26)
nmod:with(filling-19, creations-27)
punct(began-14, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#house

fill :: The generally accepted reason for the softening of TPA sales is that wholesalers filled their distribution pipeline , and hospital usage now is coming out of wholesalers ' stocks of the drug -- not new sales , Ms. Behrens said ./.
det(reason-4, The-1)
advmod(accepted-3, generally-2)
amod(reason-4, accepted-3)
nsubj(is-11, reason-4)
case(softening-7, for-5)
det(softening-7, the-6)
nmod:for(reason-4, softening-7)
case(sales-10, of-8)
compound(sales-10, TPA-9)
nmod:of(softening-7, sales-10)
root(ROOT-0, is-11)
mark(filled-14, that-12)
nsubj(filled-14, wholesalers-13)
ccomp(is-11, filled-14)
nmod:poss(pipeline-17, their-15)
compound(pipeline-17, distribution-16)
dobj(filled-14, pipeline-17)
punct(filled-14, ,-18)
cc(filled-14, and-19)
compound(usage-21, hospital-20)
nsubj(coming-24, usage-21)
advmod(coming-24, now-22)
aux(coming-24, is-23)
ccomp(is-11, coming-24)
conj:and(filled-14, coming-24)
case(stocks-29, out-25)
mwe(out-25, of-26)
nmod:poss(stocks-29, wholesalers-27)
case(wholesalers-27, '-28)
nmod:out_of(coming-24, stocks-29)
case(drug-32, of-30)
det(drug-32, the-31)
nmod:of(stocks-29, drug-32)
punct(coming-24, ---33)
neg(sales-36, not-34)
amod(sales-36, new-35)
ccomp(said-40, sales-36)
punct(said-40, ,-37)
compound(Behrens-39, Ms.-38)
nsubj(said-40, Behrens-39)
parataxis(coming-24, said-40)
punct(is-11, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#pipeline

fill :: In 1985 and 1986 , when pictures of rioting blacks and rampaging white policemen filled television screens around the world , the perception was that South Africa 's white-dominated government was losing its grip ./.
case(1985-2, In-1)
root(ROOT-0, 1985-2)
cc(1985-2, and-3)
conj:and(1985-2, 1986-4)
punct(1985-2, ,-5)
advmod(was-24, when-6)
advcl(was-24, pictures-7)
case(blacks-10, of-8)
compound(blacks-10, rioting-9)
nmod:of(pictures-7, blacks-10)
cc(pictures-7, and-11)
conj:and(pictures-7, rampaging-12)
advcl(was-24, rampaging-12)
amod(policemen-14, white-13)
dobj(rampaging-12, policemen-14)
amod(screens-17, filled-15)
compound(screens-17, television-16)
dep(policemen-14, screens-17)
case(world-20, around-18)
det(world-20, the-19)
nmod:around(screens-17, world-20)
punct(was-24, ,-21)
det(perception-23, the-22)
nsubj(was-24, perception-23)
root(,-5, was-24)
mark(losing-32, that-25)
compound(Africa-27, South-26)
nmod:poss(government-30, Africa-27)
case(Africa-27, 's-28)
amod(government-30, white-dominated-29)
nsubj(losing-32, government-30)
aux(losing-32, was-31)
ccomp(was-24, losing-32)
nmod:poss(grip-34, its-33)
dobj(losing-32, grip-34)
punct(was-24, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#screens

fill :: Last year the movies were filled with babies ./.
amod(year-2, Last-1)
nmod:tmod(filled-6, year-2)
det(movies-4, the-3)
nsubjpass(filled-6, movies-4)
auxpass(filled-6, were-5)
root(ROOT-0, filled-6)
case(babies-8, with-7)
nmod:with(filled-6, babies-8)
punct(filled-6, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#movies

fill :: American life being filled with headaches , aspirin began to catch on ./.
compound(life-2, American-1)
nsubjpass(filled-4, life-2)
auxpass(filled-4, being-3)
root(ROOT-0, filled-4)
case(headaches-6, with-5)
nmod:with(filled-4, headaches-6)
punct(filled-4, ,-7)
nsubj(began-9, aspirin-8)
nsubj:xsubj(catch-11, aspirin-8)
parataxis(filled-4, began-9)
mark(catch-11, to-10)
xcomp(began-9, catch-11)
compound:prt(catch-11, on-12)
punct(filled-4, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#life

fill :: His inadequacy , vacillation and -LRB- a favorite -RRB- `` imbecility '' were widely condemned , along with his intellect , or lack of it: `` You can not . .. fill his . .. empty skull with brains . ''/''
nmod:poss(inadequacy-2, His-1)
nsubjpass(condemned-15, inadequacy-2)
punct(inadequacy-2, ,-3)
conj:and(inadequacy-2, vacillation-4)
nsubjpass(condemned-15, vacillation-4)
cc(inadequacy-2, and-5)
punct(favorite-8, -LRB--6)
det(favorite-8, a-7)
conj:and(inadequacy-2, favorite-8)
nsubjpass(condemned-15, favorite-8)
punct(favorite-8, -RRB--9)
punct(favorite-8, ``-10)
dep(favorite-8, imbecility-11)
punct(favorite-8, ''-12)
auxpass(condemned-15, were-13)
advmod(condemned-15, widely-14)
root(ROOT-0, condemned-15)
punct(condemned-15, ,-16)
case(intellect-20, along-17)
mwe(along-17, with-18)
nmod:poss(intellect-20, his-19)
nmod:along_with(condemned-15, intellect-20)
punct(intellect-20, ,-21)
cc(intellect-20, or-22)
nmod:along_with(condemned-15, lack-23)
conj:or(intellect-20, lack-23)
case(it-25, of-24)
nmod:of(lack-23, it-25)
punct(condemned-15, :-26)
punct(condemned-15, ``-27)
nsubj(can-29, You-28)
ccomp(condemned-15, can-29)
neg(can-29, not-30)
punct(condemned-15, .-31)
punct(condemned-15, .-32)
punct(condemned-15, .-33)
root(ROOT-0, fill-1)
dobj(fill-1, his-2)
punct(fill-1, .-3)
punct(fill-1, .-4)
punct(fill-1, .-5)
amod(skull-2, empty-1)
root(ROOT-0, skull-2)
case(brains-4, with-3)
nmod:with(skull-2, brains-4)
punct(skull-2, .-5)
punct(skull-2, ''-6)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fill#his

fill :: The priest , a young bearded man with a flat-topped black hat , wore gold vestments that glistened in the candlelight as he processed around the filled church ./.
det(priest-2, The-1)
nsubj(wore-14, priest-2)
punct(priest-2, ,-3)
det(man-7, a-4)
amod(man-7, young-5)
amod(man-7, bearded-6)
appos(priest-2, man-7)
case(hat-12, with-8)
det(hat-12, a-9)
amod(hat-12, flat-topped-10)
amod(hat-12, black-11)
nmod:with(man-7, hat-12)
punct(priest-2, ,-13)
root(ROOT-0, wore-14)
amod(vestments-16, gold-15)
dobj(wore-14, vestments-16)
nsubj(glistened-18, vestments-16)
ref(vestments-16, that-17)
acl:relcl(vestments-16, glistened-18)
case(candlelight-21, in-19)
det(candlelight-21, the-20)
nmod:in(glistened-18, candlelight-21)
mark(processed-24, as-22)
nsubj(processed-24, he-23)
advcl(glistened-18, processed-24)
case(church-28, around-25)
det(church-28, the-26)
amod(church-28, filled-27)
nmod:around(processed-24, church-28)
punct(wore-14, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#church

fill :: He is laboriously filling out the cash-flow statement his bank requires for a spring-planting loan ./.
nsubj(filling-4, He-1)
aux(filling-4, is-2)
advmod(filling-4, laboriously-3)
root(ROOT-0, filling-4)
compound:prt(filling-4, out-5)
det(statement-8, the-6)
amod(statement-8, cash-flow-7)
dobj(filling-4, statement-8)
nmod:poss(bank-10, his-9)
nsubj(requires-11, bank-10)
acl:relcl(statement-8, requires-11)
case(loan-15, for-12)
det(loan-15, a-13)
amod(loan-15, spring-planting-14)
nmod:for(requires-11, loan-15)
punct(filling-4, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#statement

fill :: Last year the movies were filled with babies ./.
amod(year-2, Last-1)
nmod:tmod(filled-6, year-2)
det(movies-4, the-3)
nsubjpass(filled-6, movies-4)
auxpass(filled-6, were-5)
root(ROOT-0, filled-6)
case(babies-8, with-7)
nmod:with(filled-6, babies-8)
punct(filled-6, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#movies

fill :: But on this wintry afternoon when the air is filled with the smell of homemade cinnamon buns , Doris Van Sickle , once the Boone County Democratic women 's chairman , is surrounded by her new allies -- political novices eager to meet Marlene Elwell , the Michigan housewife who has organized the Midwest for the former religious broadcaster ./.
cc(surrounded-33, But-1)
case(afternoon-5, on-2)
det(afternoon-5, this-3)
amod(afternoon-5, wintry-4)
nmod:on(surrounded-33, afternoon-5)
advmod(filled-10, when-6)
det(air-8, the-7)
nsubjpass(filled-10, air-8)
auxpass(filled-10, is-9)
acl:relcl(afternoon-5, filled-10)
case(smell-13, with-11)
det(smell-13, the-12)
nmod:with(filled-10, smell-13)
case(buns-17, of-14)
amod(buns-17, homemade-15)
compound(buns-17, cinnamon-16)
nmod:of(smell-13, buns-17)
punct(surrounded-33, ,-18)
compound(Sickle-21, Doris-19)
compound(Sickle-21, Van-20)
nsubjpass(surrounded-33, Sickle-21)
punct(Sickle-21, ,-22)
advmod(chairman-30, once-23)
det(women-28, the-24)
compound(women-28, Boone-25)
compound(women-28, County-26)
amod(women-28, Democratic-27)
nmod:poss(chairman-30, women-28)
case(women-28, 's-29)
appos(Sickle-21, chairman-30)
punct(Sickle-21, ,-31)
auxpass(surrounded-33, is-32)
root(ROOT-0, surrounded-33)
case(allies-37, by-34)
nmod:poss(allies-37, her-35)
amod(allies-37, new-36)
nmod:agent(surrounded-33, allies-37)
punct(allies-37, ---38)
amod(novices-40, political-39)
dep(allies-37, novices-40)
amod(novices-40, eager-41)
mark(meet-43, to-42)
xcomp(eager-41, meet-43)
compound(Elwell-45, Marlene-44)
dobj(meet-43, Elwell-45)
punct(Elwell-45, ,-46)
det(housewife-49, the-47)
compound(housewife-49, Michigan-48)
appos(Elwell-45, housewife-49)
nsubj(organized-52, housewife-49)
ref(housewife-49, who-50)
aux(organized-52, has-51)
acl:relcl(housewife-49, organized-52)
det(Midwest-54, the-53)
dobj(organized-52, Midwest-54)
case(broadcaster-59, for-55)
det(broadcaster-59, the-56)
amod(broadcaster-59, former-57)
amod(broadcaster-59, religious-58)
nmod:for(organized-52, broadcaster-59)
punct(surrounded-33, .-60)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#air

fill :: Elise holds out empty arms , pleading with Andrew to fill them , but the chasm is too wide , the distance traveled in different directions too great ./.
nsubj(holds-2, Elise-1)
root(ROOT-0, holds-2)
compound:prt(holds-2, out-3)
amod(arms-5, empty-4)
dobj(holds-2, arms-5)
punct(holds-2, ,-6)
advcl(holds-2, pleading-7)
case(Andrew-9, with-8)
nmod:with(pleading-7, Andrew-9)
mark(fill-11, to-10)
xcomp(pleading-7, fill-11)
dobj(fill-11, them-12)
punct(holds-2, ,-13)
cc(holds-2, but-14)
det(chasm-16, the-15)
nsubj(wide-19, chasm-16)
cop(wide-19, is-17)
advmod(wide-19, too-18)
conj:but(holds-2, wide-19)
punct(wide-19, ,-20)
det(distance-22, the-21)
nsubj(traveled-23, distance-22)
ccomp(wide-19, traveled-23)
case(directions-26, in-24)
amod(directions-26, different-25)
nmod:in(traveled-23, directions-26)
advmod(great-28, too-27)
xcomp(traveled-23, great-28)
punct(holds-2, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#them

fill :: But it 's truly disappointing to see him turning to television parodies to fill out the play ./.
cc(disappointing-5, But-1)
nsubj(disappointing-5, it-2)
nsubj:xsubj(see-7, it-2)
cop(disappointing-5, 's-3)
advmod(disappointing-5, truly-4)
root(ROOT-0, disappointing-5)
mark(see-7, to-6)
xcomp(disappointing-5, see-7)
nsubj(turning-9, him-8)
nsubj:xsubj(fill-14, him-8)
dep(see-7, turning-9)
case(parodies-12, to-10)
compound(parodies-12, television-11)
nmod:to(turning-9, parodies-12)
mark(fill-14, to-13)
xcomp(turning-9, fill-14)
compound:prt(fill-14, out-15)
det(play-17, the-16)
dobj(fill-14, play-17)
punct(disappointing-5, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#play

fill :: The stock market 's sideways course this year may fill many investors with frustration , but to one Ohio money manager with a strong track record , it spells opportunity ./.
det(market-3, The-1)
compound(market-3, stock-2)
nmod:poss(course-6, market-3)
case(market-3, 's-4)
amod(course-6, sideways-5)
nsubj(fill-10, course-6)
det(year-8, this-7)
nmod:tmod(fill-10, year-8)
aux(fill-10, may-9)
root(ROOT-0, fill-10)
amod(investors-12, many-11)
dobj(fill-10, investors-12)
case(frustration-14, with-13)
nmod:with(fill-10, frustration-14)
punct(fill-10, ,-15)
cc(fill-10, but-16)
case(manager-21, to-17)
nummod(manager-21, one-18)
compound(manager-21, Ohio-19)
compound(manager-21, money-20)
conj:but(fill-10, manager-21)
case(record-26, with-22)
det(record-26, a-23)
amod(record-26, strong-24)
compound(record-26, track-25)
nmod:with(manager-21, record-26)
punct(manager-21, ,-27)
nsubj(spells-29, it-28)
acl:relcl(manager-21, spells-29)
dobj(spells-29, opportunity-30)
punct(fill-10, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#investors

fill :: Mr. Vann 's life is a stunning story , its surface brilliance concealing sexual compulsions that filled his private life with lies ./.
compound(Vann-2, Mr.-1)
nmod:poss(life-4, Vann-2)
case(Vann-2, 's-3)
nsubj(story-8, life-4)
cop(story-8, is-5)
det(story-8, a-6)
amod(story-8, stunning-7)
root(ROOT-0, story-8)
punct(story-8, ,-9)
nmod:poss(brilliance-12, its-10)
compound(brilliance-12, surface-11)
appos(story-8, brilliance-12)
acl(brilliance-12, concealing-13)
amod(compulsions-15, sexual-14)
dobj(concealing-13, compulsions-15)
nsubj(filled-17, compulsions-15)
ref(compulsions-15, that-16)
acl:relcl(compulsions-15, filled-17)
nmod:poss(life-20, his-18)
amod(life-20, private-19)
dobj(filled-17, life-20)
case(lies-22, with-21)
nmod:with(filled-17, lies-22)
punct(story-8, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#life

fill :: The subject is Oedipus 's death , and perhaps because death is the one thing that still fills us with awe , the excellence of this scene transmits a shiver of the tragedy 's original force ./.
det(subject-2, The-1)
nsubj(death-6, subject-2)
cop(death-6, is-3)
nmod:poss(death-6, Oedipus-4)
case(Oedipus-4, 's-5)
root(ROOT-0, death-6)
punct(death-6, ,-7)
cc(death-6, and-8)
advmod(thing-15, perhaps-9)
mark(thing-15, because-10)
nsubj(thing-15, death-11)
cop(thing-15, is-12)
det(thing-15, the-13)
nummod(thing-15, one-14)
nsubj(fills-18, thing-15)
nmod(transmits-28, thing-15)
ref(thing-15, that-16)
advmod(fills-18, still-17)
acl:relcl(thing-15, fills-18)
dobj(fills-18, us-19)
case(awe-21, with-20)
nmod:with(fills-18, awe-21)
punct(transmits-28, ,-22)
det(excellence-24, the-23)
nsubj(transmits-28, excellence-24)
case(scene-27, of-25)
det(scene-27, this-26)
nmod:of(excellence-24, scene-27)
conj:and(death-6, transmits-28)
det(shiver-30, a-29)
dobj(transmits-28, shiver-30)
case(force-36, of-31)
det(tragedy-33, the-32)
nmod:poss(force-36, tragedy-33)
case(tragedy-33, 's-34)
amod(force-36, original-35)
nmod:of(shiver-30, force-36)
punct(death-6, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#us

fill :: STATES MOVE to fill what they see as a void in job training ./.
nsubj(MOVE-2, STATES-1)
nsubj:xsubj(fill-4, STATES-1)
root(ROOT-0, MOVE-2)
mark(fill-4, to-3)
xcomp(MOVE-2, fill-4)
dobj(see-7, what-5)
nsubj(see-7, they-6)
ccomp(fill-4, see-7)
case(void-10, as-8)
det(void-10, a-9)
nmod:as(see-7, void-10)
case(training-13, in-11)
compound(training-13, job-12)
nmod:in(void-10, training-13)
punct(MOVE-2, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#states

fill :: After years of being out of work and on welfare , many of the unemployed now lack the ability or initiative to fill openings ./.
case(years-2, After-1)
conj:and(years-2, years-2')
nmod:after(lack-17, years-2)
nmod:after(lack-17, years-2')
mark(work-7, of-3)
cop(work-7, being-4)
case(work-7, out-5)
mwe(out-5, of-6)
acl(years-2, work-7)
cc(years-2, and-8)
case(welfare-10, on-9)
acl(years-2', welfare-10)
punct(lack-17, ,-11)
nsubj(lack-17, many-12)
case(unemployed-15, of-13)
det(unemployed-15, the-14)
nmod:of(many-12, unemployed-15)
advmod(lack-17, now-16)
root(ROOT-0, lack-17)
det(ability-19, the-18)
dobj(lack-17, ability-19)
cc(ability-19, or-20)
dobj(lack-17, initiative-21)
conj:or(ability-19, initiative-21)
mark(fill-23, to-22)
acl(ability-19, fill-23)
dobj(fill-23, openings-24)
punct(lack-17, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#openings

fill :: Back then in 1876 , Wagner nearly went bankrupt trying to fill up his new theater , and a good many who did attend , among them Tchaikovsky , left word of the boredom they barely conquered listening to this gigantic parable of love , lust , power and greed dovetailed over decades out of quaint Nordic myths and some 200 leitmotives ./.
advmod(then-2, Back-1)
advmod(went-8, then-2)
case(1876-4, in-3)
nmod:in(went-8, 1876-4)
punct(went-8, ,-5)
nsubj(went-8, Wagner-6)
nsubj(many-21, Wagner-6)
advmod(went-8, nearly-7)
root(ROOT-0, went-8)
xcomp(went-8, bankrupt-9)
acl(bankrupt-9, trying-10)
mark(fill-12, to-11)
xcomp(trying-10, fill-12)
compound:prt(fill-12, up-13)
nmod:poss(theater-16, his-14)
amod(theater-16, new-15)
dobj(fill-12, theater-16)
punct(went-8, ,-17)
cc(went-8, and-18)
det(many-21, a-19)
amod(many-21, good-20)
conj:and(went-8, many-21)
nsubj(attend-24, many-21)
ref(many-21, who-22)
aux(attend-24, did-23)
acl:relcl(many-21, attend-24)
punct(many-21, ,-25)
case(them-27, among-26)
nmod:among(many-21, them-27)
nsubj(dovetailed-51, Tchaikovsky-28)
punct(Tchaikovsky-28, ,-29)
amod(word-31, left-30)
appos(Tchaikovsky-28, word-31)
case(boredom-34, of-32)
det(boredom-34, the-33)
nmod:of(word-31, boredom-34)
nsubj(conquered-37, they-35)
advmod(conquered-37, barely-36)
acl:relcl(boredom-34, conquered-37)
xcomp(conquered-37, listening-38)
case(parable-42, to-39)
det(parable-42, this-40)
amod(parable-42, gigantic-41)
nmod:to(listening-38, parable-42)
case(love-44, of-43)
nmod:of(parable-42, love-44)
punct(love-44, ,-45)
nmod:of(parable-42, lust-46)
conj:and(love-44, lust-46)
punct(love-44, ,-47)
nmod:of(parable-42, power-48)
conj:and(love-44, power-48)
cc(love-44, and-49)
nmod:of(parable-42, greed-50)
conj:and(love-44, greed-50)
acl:relcl(many-21, dovetailed-51)
case(decades-53, over-52)
nmod:over(dovetailed-51, decades-53)
case(myths-58, out-54)
mwe(out-54, of-55)
amod(myths-58, quaint-56)
amod(myths-58, Nordic-57)
nmod:out_of(dovetailed-51, myths-58)
cc(dovetailed-51, and-59)
advmod(200-61, some-60)
nummod(leitmotives-62, 200-61)
acl:relcl(many-21, leitmotives-62)
conj:and(dovetailed-51, leitmotives-62)
punct(went-8, .-63)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#theater

fill :: Lillian Vernon Corp . , a mail-order company , said it is experiencing delays in filling orders at its new national distribution center in Virginia Beach , Va ./.
compound(Corp-3, Lillian-1)
compound(Corp-3, Vernon-2)
root(ROOT-0, Corp-3)
punct(Corp-3, .-4)
punct(said-6, ,-1)
det(company-4, a-2)
amod(company-4, mail-order-3)
nsubj(said-6, company-4)
punct(said-6, ,-5)
root(ROOT-0, said-6)
nsubj(experiencing-9, it-7)
aux(experiencing-9, is-8)
ccomp(said-6, experiencing-9)
dobj(experiencing-9, delays-10)
mark(filling-12, in-11)
advcl(experiencing-9, filling-12)
dobj(filling-12, orders-13)
case(center-19, at-14)
nmod:poss(center-19, its-15)
amod(center-19, new-16)
amod(center-19, national-17)
compound(center-19, distribution-18)
nmod:at(filling-12, center-19)
case(Beach-22, in-20)
compound(Beach-22, Virginia-21)
nmod:in(center-19, Beach-22)
punct(Beach-22, ,-23)
appos(Beach-22, Va-24)
punct(said-6, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#orders

fill :: In the second race , to fill the upperhouse Diet seat vacated by Mr. Sato 's campaign for the governorship , the pro-tax reform candidate , Kentaro Ishihara , won by an even wider margin ./.
case(race-4, In-1)
det(race-4, the-2)
amod(race-4, second-3)
nmod:in(fill-7, race-4)
punct(fill-7, ,-5)
mark(fill-7, to-6)
root(ROOT-0, fill-7)
det(seat-11, the-8)
compound(seat-11, upperhouse-9)
compound(seat-11, Diet-10)
dobj(fill-7, seat-11)
acl(seat-11, vacated-12)
case(campaign-17, by-13)
compound(Sato-15, Mr.-14)
nmod:poss(campaign-17, Sato-15)
case(Sato-15, 's-16)
nmod:by(vacated-12, campaign-17)
case(governorship-20, for-18)
det(governorship-20, the-19)
nmod:for(campaign-17, governorship-20)
punct(fill-7, ,-21)
det(candidate-25, the-22)
amod(candidate-25, pro-tax-23)
compound(candidate-25, reform-24)
dobj(fill-7, candidate-25)
punct(candidate-25, ,-26)
compound(Ishihara-28, Kentaro-27)
appos(candidate-25, Ishihara-28)
punct(candidate-25, ,-29)
acl(candidate-25, won-30)
case(margin-35, by-31)
det(margin-35, an-32)
advmod(wider-34, even-33)
amod(margin-35, wider-34)
nmod:by(won-30, margin-35)
punct(fill-7, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#seat

fill :: I 've gotten so many invitations , in fact , that I 've stopped filling out the forms , with their requests that I list my `` creative works '' and `` awards , honors , grants . ''/''
nsubj(gotten-3, I-1)
aux(gotten-3, 've-2)
root(ROOT-0, gotten-3)
advmod(many-5, so-4)
amod(invitations-6, many-5)
dobj(gotten-3, invitations-6)
punct(gotten-3, ,-7)
case(fact-9, in-8)
nmod:in(gotten-3, fact-9)
punct(gotten-3, ,-10)
mark(stopped-14, that-11)
nsubj(stopped-14, I-12)
aux(stopped-14, 've-13)
ccomp(gotten-3, stopped-14)
xcomp(stopped-14, filling-15)
compound:prt(filling-15, out-16)
det(forms-18, the-17)
dobj(filling-15, forms-18)
punct(stopped-14, ,-19)
case(requests-22, with-20)
nmod:poss(requests-22, their-21)
nmod:with(stopped-14, requests-22)
mark(list-25, that-23)
nsubj(list-25, I-24)
ccomp(requests-22, list-25)
nmod:poss(works-29, my-26)
punct(works-29, ``-27)
amod(works-29, creative-28)
dobj(list-25, works-29)
punct(works-29, ''-30)
cc(works-29, and-31)
punct(works-29, ``-32)
dobj(list-25, awards-33)
conj:and(works-29, awards-33)
punct(awards-33, ,-34)
conj(awards-33, honors-35)
punct(awards-33, ,-36)
conj(awards-33, grants-37)
punct(gotten-3, .-38)
punct(gotten-3, ''-39)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fill#forms

fill :: After seven years of Republican appointments , the courts of appeals are filled with able judges of a moderate to conservative stripe ./.
case(years-3, After-1)
nummod(years-3, seven-2)
nmod:after(filled-13, years-3)
case(appointments-6, of-4)
amod(appointments-6, Republican-5)
nmod:of(years-3, appointments-6)
punct(filled-13, ,-7)
det(courts-9, the-8)
nsubjpass(filled-13, courts-9)
case(appeals-11, of-10)
nmod:of(courts-9, appeals-11)
auxpass(filled-13, are-12)
root(ROOT-0, filled-13)
case(judges-16, with-14)
amod(judges-16, able-15)
nmod:with(filled-13, judges-16)
case(a-18, of-17)
nmod:of(judges-16, a-18)
amod(a-18, moderate-19)
case(stripe-22, to-20)
amod(stripe-22, conservative-21)
nmod:to(moderate-19, stripe-22)
punct(filled-13, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#courts

fill :: Soon they 'll also be able to fill their screens with photographs ./.
advmod(able-6, Soon-1)
nsubj(able-6, they-2)
nsubj:xsubj(fill-8, they-2)
aux(able-6, 'll-3)
advmod(able-6, also-4)
cop(able-6, be-5)
root(ROOT-0, able-6)
mark(fill-8, to-7)
xcomp(able-6, fill-8)
nmod:poss(screens-10, their-9)
dobj(fill-8, screens-10)
case(photographs-12, with-11)
nmod:with(fill-8, photographs-12)
punct(able-6, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#screens

fill :: As the U.S . , the world 's largest grain producer , has fewer crops to export , other nations will fill the gap ./.
case(U.S-3, As-1)
det(U.S-3, the-2)
root(ROOT-0, U.S-3)
punct(U.S-3, .-4)
punct(has-9, ,-1)
det(world-3, the-2)
nmod:poss(producer-7, world-3)
case(world-3, 's-4)
amod(producer-7, largest-5)
compound(producer-7, grain-6)
nsubj(has-9, producer-7)
punct(producer-7, ,-8)
parataxis(fill-18, has-9)
amod(crops-11, fewer-10)
dobj(has-9, crops-11)
mark(export-13, to-12)
acl(crops-11, export-13)
punct(has-9, ,-14)
amod(nations-16, other-15)
nsubj(fill-18, nations-16)
aux(fill-18, will-17)
root(ROOT-0, fill-18)
det(gap-20, the-19)
dobj(fill-18, gap-20)
punct(fill-18, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#gap

fill :: The typical opinion of the Supreme Court is so long and verbose , so filled with legalese synonyms , so encrusted with substantive footnotes , so totally unclear and inconsistent in the use of legal terms of art that only the devoted professional can hope to follow and understand what is going on ./.
det(opinion-3, The-1)
amod(opinion-3, typical-2)
nsubj(long-10, opinion-3)
nsubj(verbose-12, opinion-3)
nsubj(filled-15, opinion-3)
nsubj(encrusted-21, opinion-3)
nsubj(unclear-28, opinion-3)
nsubj(inconsistent-30, opinion-3)
case(Court-7, of-4)
det(Court-7, the-5)
compound(Court-7, Supreme-6)
nmod:of(opinion-3, Court-7)
cop(long-10, is-8)
advmod(long-10, so-9)
root(ROOT-0, long-10)
cc(long-10, and-11)
conj:and(long-10, verbose-12)
punct(long-10, ,-13)
advmod(filled-15, so-14)
conj:and(long-10, filled-15)
case(synonyms-18, with-16)
compound(synonyms-18, legalese-17)
nmod:with(filled-15, synonyms-18)
punct(long-10, ,-19)
advmod(encrusted-21, so-20)
conj:and(long-10, encrusted-21)
case(footnotes-24, with-22)
amod(footnotes-24, substantive-23)
nmod:with(encrusted-21, footnotes-24)
punct(long-10, ,-25)
advmod(totally-27, so-26)
advmod(unclear-28, totally-27)
conj:and(long-10, unclear-28)
cc(long-10, and-29)
conj:and(long-10, inconsistent-30)
case(use-33, in-31)
det(use-33, the-32)
nmod:in(long-10, use-33)
case(terms-36, of-34)
amod(terms-36, legal-35)
nmod:of(use-33, terms-36)
case(art-38, of-37)
nmod:of(terms-36, art-38)
mark(hope-45, that-39)
advmod(professional-43, only-40)
det(professional-43, the-41)
amod(professional-43, devoted-42)
nsubj(hope-45, professional-43)
nsubj:xsubj(follow-47, professional-43)
aux(hope-45, can-44)
ccomp(long-10, hope-45)
mark(follow-47, to-46)
xcomp(hope-45, follow-47)
cc(follow-47, and-48)
xcomp(hope-45, understand-49)
conj:and(follow-47, understand-49)
nsubj(going-52, what-50)
aux(going-52, is-51)
ccomp(follow-47, going-52)
compound:prt(going-52, on-53)
punct(long-10, .-54)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#opinion

fill :: `` In doing so , it would be filling the wishes of the U.S. government , which also is concerned that the dollar could rise too quickly ./.
punct(filling-9, ``-1)
mark(doing-3, In-2)
advcl(filling-9, doing-3)
advmod(doing-3, so-4)
punct(filling-9, ,-5)
nsubj(filling-9, it-6)
aux(filling-9, would-7)
aux(filling-9, be-8)
root(ROOT-0, filling-9)
det(wishes-11, the-10)
dobj(filling-9, wishes-11)
case(government-15, of-12)
det(government-15, the-13)
compound(government-15, U.S.-14)
nmod:of(wishes-11, government-15)
nsubjpass(concerned-20, government-15)
punct(government-15, ,-16)
ref(government-15, which-17)
advmod(concerned-20, also-18)
auxpass(concerned-20, is-19)
acl:relcl(government-15, concerned-20)
mark(rise-25, that-21)
det(dollar-23, the-22)
nsubj(rise-25, dollar-23)
aux(rise-25, could-24)
ccomp(concerned-20, rise-25)
advmod(quickly-27, too-26)
advmod(rise-25, quickly-27)
punct(filling-9, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#wishes

fill :: Wynfred Joshua of the Defense Intelligence Agency says that if the U.S. does n't seize the opportunity to engage the Iranians , the Soviet Union will fill the void ./.
amod(Joshua-2, Wynfred-1)
nsubj(says-8, Joshua-2)
case(Agency-7, of-3)
det(Agency-7, the-4)
compound(Agency-7, Defense-5)
compound(Agency-7, Intelligence-6)
nmod:of(Joshua-2, Agency-7)
root(ROOT-0, says-8)
mark(fill-27, that-9)
mark(seize-15, if-10)
det(U.S.-12, the-11)
nsubj(seize-15, U.S.-12)
aux(seize-15, does-13)
neg(seize-15, n't-14)
advcl(fill-27, seize-15)
det(opportunity-17, the-16)
dobj(seize-15, opportunity-17)
mark(engage-19, to-18)
acl(opportunity-17, engage-19)
det(Iranians-21, the-20)
dobj(engage-19, Iranians-21)
punct(fill-27, ,-22)
det(Union-25, the-23)
compound(Union-25, Soviet-24)
nsubj(fill-27, Union-25)
aux(fill-27, will-26)
ccomp(says-8, fill-27)
det(void-29, the-28)
dobj(fill-27, void-29)
punct(says-8, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#void

fill :: In a city where night life leans toward kids cruising on weekends , Gene Harris and his cohorts have filled a void and then some ./.
case(city-3, In-1)
det(city-3, a-2)
nmod:in(filled-20, city-3)
advmod(leans-7, where-4)
compound(life-6, night-5)
nsubj(leans-7, life-6)
acl:relcl(city-3, leans-7)
case(kids-9, toward-8)
nmod:toward(leans-7, kids-9)
acl(kids-9, cruising-10)
case(weekends-12, on-11)
nmod:on(cruising-10, weekends-12)
punct(filled-20, ,-13)
compound(Harris-15, Gene-14)
nsubj(filled-20, Harris-15)
cc(Harris-15, and-16)
nmod:poss(cohorts-18, his-17)
conj:and(Harris-15, cohorts-18)
nsubj(filled-20, cohorts-18)
aux(filled-20, have-19)
root(ROOT-0, filled-20)
det(void-22, a-21)
dobj(filled-20, void-22)
cc(filled-20, and-23)
advmod(some-25, then-24)
conj:and(filled-20, some-25)
punct(filled-20, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#void

fill :: Their flagship center in Cambridge 's booming Kendall Square has filled all 44 openings , and 90 children are on the waiting list ./.
nmod:poss(center-3, Their-1)
compound(center-3, flagship-2)
nsubj(filled-11, center-3)
case(Square-9, in-4)
nmod:poss(Square-9, Cambridge-5)
case(Cambridge-5, 's-6)
amod(Square-9, booming-7)
compound(Square-9, Kendall-8)
nmod:in(center-3, Square-9)
aux(filled-11, has-10)
root(ROOT-0, filled-11)
advmod(44-13, all-12)
nummod(openings-14, 44-13)
dobj(filled-11, openings-14)
punct(filled-11, ,-15)
cc(filled-11, and-16)
nummod(children-18, 90-17)
nsubj(list-23, children-18)
cop(list-23, are-19)
case(list-23, on-20)
det(list-23, the-21)
compound(list-23, waiting-22)
conj:and(filled-11, list-23)
punct(filled-11, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#openings

fill :: The Soviet leader gave vent to his criticism of Washington 's policies in general toward Moscow , which he described as filled with contradictions ./.
det(leader-3, The-1)
amod(leader-3, Soviet-2)
nsubj(gave-4, leader-3)
root(ROOT-0, gave-4)
dobj(gave-4, vent-5)
case(criticism-8, to-6)
nmod:poss(criticism-8, his-7)
nmod:to(gave-4, criticism-8)
dobj(described-20, criticism-8)
case(policies-12, of-9)
nmod:poss(policies-12, Washington-10)
case(Washington-10, 's-11)
nmod:of(criticism-8, policies-12)
case(general-14, in-13)
nmod:in(criticism-8, general-14)
case(Moscow-16, toward-15)
nmod:toward(general-14, Moscow-16)
punct(criticism-8, ,-17)
ref(criticism-8, which-18)
nsubj(described-20, he-19)
acl:relcl(criticism-8, described-20)
mark(filled-22, as-21)
advcl(described-20, filled-22)
case(contradictions-24, with-23)
nmod:with(filled-22, contradictions-24)
punct(gave-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#contradictions

fill :: To keep from wresting top executives from the driver 's seat , Runzheimer says , more companies are trying to fill fleets with less expensive models ./.
mark(keep-2, To-1)
root(ROOT-0, keep-2)
mark(wresting-4, from-3)
advcl(keep-2, wresting-4)
amod(executives-6, top-5)
dobj(wresting-4, executives-6)
case(seat-11, from-7)
det(driver-9, the-8)
nmod:poss(seat-11, driver-9)
case(driver-9, 's-10)
nmod:from(wresting-4, seat-11)
punct(says-14, ,-12)
nsubj(says-14, Runzheimer-13)
parataxis(keep-2, says-14)
punct(says-14, ,-15)
amod(companies-17, more-16)
nsubj(trying-19, companies-17)
nsubj:xsubj(fill-21, companies-17)
aux(trying-19, are-18)
ccomp(keep-2, trying-19)
mark(fill-21, to-20)
xcomp(trying-19, fill-21)
dobj(fill-21, fleets-22)
case(models-26, with-23)
advmod(expensive-25, less-24)
amod(models-26, expensive-25)
nmod:with(fill-21, models-26)
punct(keep-2, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#fleets

fill :: Locusts fill the eerie silence of old battlegrounds ; peasants give live locusts to their babies as toys ./.
nsubj(fill-2, Locusts-1)
root(ROOT-0, fill-2)
det(silence-5, the-3)
amod(silence-5, eerie-4)
dobj(fill-2, silence-5)
case(battlegrounds-8, of-6)
amod(battlegrounds-8, old-7)
nmod:of(silence-5, battlegrounds-8)
punct(fill-2, ;-9)
nsubj(give-11, peasants-10)
parataxis(fill-2, give-11)
amod(locusts-13, live-12)
dobj(give-11, locusts-13)
case(babies-16, to-14)
nmod:poss(babies-16, their-15)
nmod:to(give-11, babies-16)
case(toys-18, as-17)
nmod:as(give-11, toys-18)
punct(fill-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#battlegrounds

fill :: It no longer fills its stage with second-rate English aria-mongers ./.
nsubj(fills-4, It-1)
neg(longer-3, no-2)
advmod(fills-4, longer-3)
root(ROOT-0, fills-4)
nmod:poss(stage-6, its-5)
dobj(fills-4, stage-6)
case(aria-mongers-10, with-7)
amod(aria-mongers-10, second-rate-8)
amod(aria-mongers-10, English-9)
nmod:with(fills-4, aria-mongers-10)
punct(fills-4, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#stage

fill :: He now says that specialty retailing fills the bill , but he made a number of profitable forays in the meantime ./.
nsubj(says-3, He-1)
advmod(says-3, now-2)
root(ROOT-0, says-3)
mark(fills-7, that-4)
compound(retailing-6, specialty-5)
nsubj(fills-7, retailing-6)
ccomp(says-3, fills-7)
det(bill-9, the-8)
dobj(fills-7, bill-9)
punct(says-3, ,-10)
cc(says-3, but-11)
nsubj(made-13, he-12)
conj:but(says-3, made-13)
det(number-15, a-14)
dobj(made-13, number-15)
case(forays-18, of-16)
amod(forays-18, profitable-17)
nmod:of(number-15, forays-18)
case(meantime-21, in-19)
det(meantime-21, the-20)
nmod:in(made-13, meantime-21)
punct(says-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#bill

fill :: Critics argue that Barclays 's expansion simply will fill its loan book with bad debts nobody else wants , a contention bank officials dispute ./.
nsubj(argue-2, Critics-1)
root(ROOT-0, argue-2)
mark(fill-9, that-3)
nmod:poss(expansion-6, Barclays-4)
case(Barclays-4, 's-5)
nsubj(fill-9, expansion-6)
advmod(fill-9, simply-7)
aux(fill-9, will-8)
ccomp(argue-2, fill-9)
nmod:poss(book-12, its-10)
compound(book-12, loan-11)
dobj(fill-9, book-12)
dep(dispute-24, with-13)
dep(dispute-24, bad-14)
dep(dispute-24, debts-15)
nsubj(wants-18, nobody-16)
amod(nobody-16, else-17)
acl:relcl(debts-15, wants-18)
punct(debts-15, ,-19)
det(officials-23, a-20)
compound(officials-23, contention-21)
compound(officials-23, bank-22)
nsubj(dispute-24, officials-23)
advcl(fill-9, dispute-24)
punct(argue-2, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#book

fill :: The executives ' positions at their previous agencies have n't yet been filled ./.
det(executives-2, The-1)
nmod:poss(positions-4, executives-2)
case(executives-2, '-3)
nsubjpass(filled-13, positions-4)
case(agencies-8, at-5)
nmod:poss(agencies-8, their-6)
amod(agencies-8, previous-7)
nmod:at(positions-4, agencies-8)
aux(filled-13, have-9)
neg(filled-13, n't-10)
advmod(filled-13, yet-11)
auxpass(filled-13, been-12)
root(ROOT-0, filled-13)
punct(filled-13, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#positions

fill :: Leasing defers more of the profit from filled orders to the future , he said ./.
nsubj(defers-2, Leasing-1)
ccomp(said-15, defers-2)
dobj(defers-2, more-3)
case(profit-6, of-4)
det(profit-6, the-5)
nmod:of(more-3, profit-6)
case(orders-9, from-7)
amod(orders-9, filled-8)
nmod:from(defers-2, orders-9)
case(future-12, to-10)
det(future-12, the-11)
nmod:to(orders-9, future-12)
punct(said-15, ,-13)
nsubj(said-15, he-14)
root(ROOT-0, said-15)
punct(said-15, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#orders

fill :: The regional carrier said load factor , or the percentage of available seats filled , decreased to 43 % from 44 % in October 1987 ./.
det(carrier-3, The-1)
amod(carrier-3, regional-2)
nsubj(said-4, carrier-3)
root(ROOT-0, said-4)
compound(factor-6, load-5)
nsubj(decreased-16, factor-6)
punct(factor-6, ,-7)
cc(factor-6, or-8)
det(percentage-10, the-9)
conj:or(factor-6, percentage-10)
nsubj(decreased-16, percentage-10)
case(seats-13, of-11)
amod(seats-13, available-12)
nmod:of(percentage-10, seats-13)
acl(seats-13, filled-14)
punct(factor-6, ,-15)
ccomp(said-4, decreased-16)
case(%-19, to-17)
nummod(%-19, 43-18)
nmod:to(decreased-16, %-19)
case(%-22, from-20)
nummod(%-22, 44-21)
nmod:from(decreased-16, %-22)
case(October-24, in-23)
nmod:in(%-22, October-24)
nummod(October-24, 1987-25)
punct(said-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fill :: The county also got two letters of reference , filled with praise for Mrs. Guba ./.
det(county-2, The-1)
nsubj(got-4, county-2)
advmod(got-4, also-3)
root(ROOT-0, got-4)
nummod(letters-6, two-5)
dobj(got-4, letters-6)
case(reference-8, of-7)
nmod:of(letters-6, reference-8)
punct(letters-6, ,-9)
acl(letters-6, filled-10)
case(praise-12, with-11)
nmod:with(filled-10, praise-12)
case(Guba-15, for-13)
compound(Guba-15, Mrs.-14)
nmod:for(praise-12, Guba-15)
punct(got-4, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#praise

fill :: Mostly , the controversy leaves a black hole in the Hispanic political firmament that wo n't be filled for some time ./.
advmod(leaves-5, Mostly-1)
punct(leaves-5, ,-2)
det(controversy-4, the-3)
nsubj(leaves-5, controversy-4)
root(ROOT-0, leaves-5)
det(hole-8, a-6)
amod(hole-8, black-7)
dobj(leaves-5, hole-8)
nsubjpass(filled-18, hole-8)
case(firmament-13, in-9)
det(firmament-13, the-10)
amod(firmament-13, Hispanic-11)
amod(firmament-13, political-12)
nmod:in(hole-8, firmament-13)
ref(hole-8, that-14)
aux(filled-18, wo-15)
neg(filled-18, n't-16)
auxpass(filled-18, be-17)
acl:relcl(hole-8, filled-18)
case(time-21, for-19)
det(time-21, some-20)
nmod:for(filled-18, time-21)
punct(leaves-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#hole

fill :: Also , Charles L. Magee , formerly deputy general counsel , was named vice president , general counsel and secretary , filling vacancies created when Richard Stewart resigned to pursue private law practice ./.
advmod(named-13, Also-1)
punct(named-13, ,-2)
compound(Magee-5, Charles-3)
compound(Magee-5, L.-4)
nsubjpass(named-13, Magee-5)
punct(Magee-5, ,-6)
advmod(counsel-10, formerly-7)
compound(counsel-10, deputy-8)
amod(counsel-10, general-9)
appos(Magee-5, counsel-10)
punct(Magee-5, ,-11)
auxpass(named-13, was-12)
root(ROOT-0, named-13)
compound(president-15, vice-14)
xcomp(named-13, president-15)
punct(president-15, ,-16)
amod(counsel-18, general-17)
xcomp(named-13, counsel-18)
conj:and(president-15, counsel-18)
cc(president-15, and-19)
xcomp(named-13, secretary-20)
conj:and(president-15, secretary-20)
punct(named-13, ,-21)
xcomp(named-13, filling-22)
dobj(filling-22, vacancies-23)
acl(vacancies-23, created-24)
advmod(resigned-28, when-25)
compound(Stewart-27, Richard-26)
nsubj(resigned-28, Stewart-27)
nsubj:xsubj(pursue-30, Stewart-27)
advcl(created-24, resigned-28)
mark(pursue-30, to-29)
xcomp(resigned-28, pursue-30)
amod(practice-33, private-31)
compound(practice-33, law-32)
dobj(pursue-30, practice-33)
punct(named-13, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#vacancies

fill :: Allen J. Krowe , 56 years old , leaves his job as executive vice president and a director of IBM to fill the positions at Texaco currently held by Richard G. Brinkman , who at 61 , will retire early ./.
compound(Krowe-3, Allen-1)
compound(Krowe-3, J.-2)
nsubj(leaves-9, Krowe-3)
punct(Krowe-3, ,-4)
nummod(years-6, 56-5)
nmod:npmod(old-7, years-6)
amod(Krowe-3, old-7)
punct(Krowe-3, ,-8)
root(ROOT-0, leaves-9)
nmod:poss(job-11, his-10)
dobj(leaves-9, job-11)
case(president-15, as-12)
amod(president-15, executive-13)
compound(president-15, vice-14)
nmod:as(job-11, president-15)
cc(president-15, and-16)
det(director-18, a-17)
nmod:as(job-11, director-18)
conj:and(president-15, director-18)
case(IBM-20, of-19)
nmod:of(director-18, IBM-20)
mark(fill-22, to-21)
acl(job-11, fill-22)
det(positions-24, the-23)
dobj(fill-22, positions-24)
case(Texaco-26, at-25)
nmod:at(positions-24, Texaco-26)
advmod(held-28, currently-27)
acl(Texaco-26, held-28)
case(Brinkman-32, by-29)
compound(Brinkman-32, Richard-30)
compound(Brinkman-32, G.-31)
nmod:by(held-28, Brinkman-32)
nsubj(retire-39, Brinkman-32)
punct(Brinkman-32, ,-33)
ref(Brinkman-32, who-34)
case(61-36, at-35)
nmod:at(retire-39, 61-36)
punct(retire-39, ,-37)
aux(retire-39, will-38)
acl:relcl(Brinkman-32, retire-39)
advmod(retire-39, early-40)
punct(leaves-9, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#positions

fill :: Compaq Computer Corp. is expected to unveil today a long-awaited line of laptop computers , filling a gaping hole in the company 's product line ./.
compound(Corp.-3, Compaq-1)
compound(Corp.-3, Computer-2)
nsubjpass(expected-5, Corp.-3)
nsubj:xsubj(unveil-7, Corp.-3)
auxpass(expected-5, is-4)
root(ROOT-0, expected-5)
mark(unveil-7, to-6)
xcomp(expected-5, unveil-7)
nmod:tmod(unveil-7, today-8)
det(line-11, a-9)
amod(line-11, long-awaited-10)
dobj(unveil-7, line-11)
case(computers-14, of-12)
compound(computers-14, laptop-13)
nmod:of(line-11, computers-14)
punct(expected-5, ,-15)
xcomp(expected-5, filling-16)
det(hole-19, a-17)
amod(hole-19, gaping-18)
dobj(filling-16, hole-19)
case(line-25, in-20)
det(company-22, the-21)
nmod:poss(line-25, company-22)
case(company-22, 's-23)
compound(line-25, product-24)
nmod:in(hole-19, line-25)
punct(expected-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#hole

fill :: Fern C. Portnoy was named to the board of this membership warehouse chain , filling a vacancy ./.
compound(Portnoy-3, Fern-1)
compound(Portnoy-3, C.-2)
nsubjpass(named-5, Portnoy-3)
auxpass(named-5, was-4)
root(ROOT-0, named-5)
case(board-8, to-6)
det(board-8, the-7)
nmod:to(named-5, board-8)
case(chain-13, of-9)
det(chain-13, this-10)
compound(chain-13, membership-11)
compound(chain-13, warehouse-12)
nmod:of(board-8, chain-13)
punct(named-5, ,-14)
xcomp(named-5, filling-15)
det(vacancy-17, a-16)
dobj(filling-15, vacancy-17)
punct(named-5, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#vacancy

fill :: While filling movie houses and exciting donors are both honorable tasks , the facts do n't support the histrionics ./.
mark(filling-2, While-1)
csubj(tasks-11, filling-2)
compound(houses-4, movie-3)
dobj(filling-2, houses-4)
cc(houses-4, and-5)
amod(donors-7, exciting-6)
dobj(filling-2, donors-7)
conj:and(houses-4, donors-7)
cop(tasks-11, are-8)
det(tasks-11, both-9)
amod(tasks-11, honorable-10)
nmod(support-17, tasks-11)
punct(support-17, ,-12)
det(facts-14, the-13)
nsubj(support-17, facts-14)
aux(support-17, do-15)
neg(support-17, n't-16)
root(ROOT-0, support-17)
det(histrionics-19, the-18)
dobj(support-17, histrionics-19)
punct(support-17, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#houses

fill :: The appointments , filling vacant posts , are the first since the company 's top officers resigned at the end of May ./.
det(appointments-2, The-1)
nsubj(first-10, appointments-2)
punct(first-10, ,-3)
advcl(first-10, filling-4)
amod(posts-6, vacant-5)
dobj(filling-4, posts-6)
punct(first-10, ,-7)
cop(first-10, are-8)
det(first-10, the-9)
root(ROOT-0, first-10)
mark(resigned-17, since-11)
det(company-13, the-12)
nmod:poss(officers-16, company-13)
case(company-13, 's-14)
amod(officers-16, top-15)
nsubj(resigned-17, officers-16)
advcl(first-10, resigned-17)
case(end-20, at-18)
det(end-20, the-19)
nmod:at(resigned-17, end-20)
case(May-22, of-21)
nmod:of(end-20, May-22)
punct(first-10, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#posts

fill :: The airline said its load factor , or the percentage of available seats filled , was 60.4 % in August , unchanged from a year earlier ./.
det(airline-2, The-1)
nsubj(said-3, airline-2)
root(ROOT-0, said-3)
nmod:poss(factor-6, its-4)
compound(factor-6, load-5)
nsubj(%-18, factor-6)
punct(factor-6, ,-7)
cc(factor-6, or-8)
det(percentage-10, the-9)
conj:or(factor-6, percentage-10)
nsubj(%-18, percentage-10)
case(seats-13, of-11)
amod(seats-13, available-12)
nmod:of(percentage-10, seats-13)
acl(seats-13, filled-14)
punct(factor-6, ,-15)
cop(%-18, was-16)
nummod(%-18, 60.4-17)
ccomp(said-3, %-18)
case(August-20, in-19)
nmod:in(%-18, August-20)
punct(%-18, ,-21)
amod(%-18, unchanged-22)
case(earlier-26, from-23)
det(year-25, a-24)
nmod:npmod(earlier-26, year-25)
advcl(unchanged-22, earlier-26)
punct(said-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fill :: And with no individual or group coming forward to fill the vacuum , `` no one knows how or when order and government will be restored . ''/''
cc(knows-17, And-1)
case(individual-4, with-2)
neg(individual-4, no-3)
nmod:with(knows-17, individual-4)
cc(individual-4, or-5)
nsubj(coming-7, group-6)
nsubj:xsubj(fill-10, group-6)
conj:or(individual-4, coming-7)
nmod:with(knows-17, coming-7)
advmod(coming-7, forward-8)
mark(fill-10, to-9)
xcomp(coming-7, fill-10)
det(vacuum-12, the-11)
dobj(fill-10, vacuum-12)
punct(knows-17, ,-13)
punct(knows-17, ``-14)
neg(one-16, no-15)
nsubj(knows-17, one-16)
root(ROOT-0, knows-17)
advmod(restored-26, how-18)
cc(how-18, or-19)
conj:or(how-18, when-20)
advmod(restored-26, when-20)
nsubjpass(restored-26, order-21)
cc(order-21, and-22)
conj:and(order-21, government-23)
nsubjpass(restored-26, government-23)
aux(restored-26, will-24)
auxpass(restored-26, be-25)
ccomp(knows-17, restored-26)
punct(knows-17, .-27)
punct(knows-17, ''-28)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fill#vacuum

fill :: Wo n't fill a cardboard box ./.
aux(fill-3, Wo-1)
neg(fill-3, n't-2)
root(ROOT-0, fill-3)
det(box-6, a-4)
compound(box-6, cardboard-5)
dobj(fill-3, box-6)
punct(fill-3, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#box

fill :: The three board positions will be filled by Michael Tun Zan , executive vice president of Pacific Bank ; Khateeb Lateef , an investment adviser ; and Theodore M. Bell , an attorney ./.
det(positions-4, The-1)
nummod(positions-4, three-2)
compound(positions-4, board-3)
nsubjpass(filled-7, positions-4)
aux(filled-7, will-5)
auxpass(filled-7, be-6)
root(ROOT-0, filled-7)
case(Zan-11, by-8)
compound(Zan-11, Michael-9)
compound(Zan-11, Tun-10)
nmod:agent(filled-7, Zan-11)
punct(Zan-11, ,-12)
amod(president-15, executive-13)
compound(president-15, vice-14)
appos(Zan-11, president-15)
case(Bank-18, of-16)
compound(Bank-18, Pacific-17)
nmod:of(president-15, Bank-18)
punct(filled-7, ;-19)
compound(Lateef-21, Khateeb-20)
dep(filled-7, Lateef-21)
punct(Lateef-21, ,-22)
det(adviser-25, an-23)
compound(adviser-25, investment-24)
appos(Lateef-21, adviser-25)
punct(Lateef-21, ;-26)
cc(Lateef-21, and-27)
compound(Bell-30, Theodore-28)
compound(Bell-30, M.-29)
dep(filled-7, Bell-30)
conj:and(Lateef-21, Bell-30)
punct(Bell-30, ,-31)
det(attorney-33, an-32)
appos(Bell-30, attorney-33)
punct(filled-7, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#positions

fill :: But the rumor was embraced by the market as it helped fill in the paucity of news on which to trade , according to participants ./.
cc(embraced-5, But-1)
det(rumor-3, the-2)
nsubjpass(embraced-5, rumor-3)
auxpass(embraced-5, was-4)
root(ROOT-0, embraced-5)
case(market-8, by-6)
det(market-8, the-7)
nmod:agent(embraced-5, market-8)
mark(helped-11, as-9)
nsubj(helped-11, it-10)
advcl(embraced-5, helped-11)
ccomp(helped-11, fill-12)
case(paucity-15, in-13)
det(paucity-15, the-14)
nmod:in(fill-12, paucity-15)
case(news-17, of-16)
nmod:of(paucity-15, news-17)
nmod:on(trade-21, news-17)
case(which-19, on-18)
ref(news-17, which-19)
mark(trade-21, to-20)
acl:relcl(news-17, trade-21)
punct(embraced-5, ,-22)
case(participants-25, according-23)
mwe(according-23, to-24)
nmod:according_to(embraced-5, participants-25)
punct(embraced-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#paucity

fill :: `` We 're evaluating and talking to our customers , '' a spokesman says , `` but it is not clear what role biodegradable plastics will fill . ''/''
punct(says-14, ``-1)
nsubj(evaluating-4, We-2)
nsubj(talking-6, We-2)
aux(evaluating-4, 're-3)
ccomp(says-14, evaluating-4)
cc(evaluating-4, and-5)
conj:and(evaluating-4, talking-6)
ccomp(says-14, talking-6)
case(customers-9, to-7)
nmod:poss(customers-9, our-8)
nmod:to(talking-6, customers-9)
punct(says-14, ,-10)
punct(says-14, ''-11)
det(spokesman-13, a-12)
nsubj(says-14, spokesman-13)
root(ROOT-0, says-14)
punct(says-14, ,-15)
punct(says-14, ``-16)
cc(says-14, but-17)
nsubj(clear-21, it-18)
cop(clear-21, is-19)
neg(clear-21, not-20)
conj:but(says-14, clear-21)
det(role-23, what-22)
dobj(fill-27, role-23)
amod(plastics-25, biodegradable-24)
nsubj(fill-27, plastics-25)
aux(fill-27, will-26)
ccomp(clear-21, fill-27)
punct(says-14, .-28)
punct(says-14, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fill#role

fill :: Arden L. Bement Jr . , vice president , technical resources , of TRW Inc . , was named a director of this maker of electronic test and measurement instruments , filling a vacancy ./.
compound(Jr-4, Arden-1)
compound(Jr-4, L.-2)
compound(Jr-4, Bement-3)
root(ROOT-0, Jr-4)
punct(Jr-4, .-5)
root(ROOT-0, ,-1)
compound(president-3, vice-2)
root(,-1, president-3)
punct(president-3, ,-4)
amod(resources-6, technical-5)
appos(president-3, resources-6)
punct(president-3, ,-7)
case(Inc-10, of-8)
compound(Inc-10, TRW-9)
nmod:of(president-3, Inc-10)
punct(president-3, .-11)
punct(named-3, ,-1)
auxpass(named-3, was-2)
root(ROOT-0, named-3)
det(director-5, a-4)
xcomp(named-3, director-5)
case(maker-8, of-6)
det(maker-8, this-7)
nmod:of(director-5, maker-8)
case(test-11, of-9)
amod(test-11, electronic-10)
nmod:of(maker-8, test-11)
cc(test-11, and-12)
compound(instruments-14, measurement-13)
nmod:of(maker-8, instruments-14)
conj:and(test-11, instruments-14)
punct(named-3, ,-15)
xcomp(named-3, filling-16)
det(vacancy-18, a-17)
dobj(filling-16, vacancy-18)
punct(named-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#vacancy

fill :: He fills a vacancy created by the resignation of Henry W. Lorin ./.
nsubj(fills-2, He-1)
root(ROOT-0, fills-2)
det(vacancy-4, a-3)
dobj(fills-2, vacancy-4)
acl(vacancy-4, created-5)
case(resignation-8, by-6)
det(resignation-8, the-7)
nmod:by(created-5, resignation-8)
case(Lorin-12, of-9)
compound(Lorin-12, Henry-10)
compound(Lorin-12, W.-11)
nmod:of(resignation-8, Lorin-12)
punct(fills-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#vacancy

fill :: Although the office towers filled up quickly -LRB- they 're still 96 % occupied -RRB- , the tony stores -- including Cartier and Mark Cross -- foundered ./.
mark(filled-5, Although-1)
det(towers-4, the-2)
compound(towers-4, office-3)
nsubj(filled-5, towers-4)
advcl(foundered-27, filled-5)
compound:prt(filled-5, up-6)
advmod(filled-5, quickly-7)
punct(occupied-14, -LRB--8)
nsubjpass(occupied-14, they-9)
auxpass(occupied-14, 're-10)
advmod(occupied-14, still-11)
nummod(%-13, 96-12)
dep(occupied-14, %-13)
dep(filled-5, occupied-14)
punct(occupied-14, -RRB--15)
punct(foundered-27, ,-16)
det(stores-19, the-17)
compound(stores-19, tony-18)
nsubj(foundered-27, stores-19)
punct(Cartier-22, ---20)
case(Cartier-22, including-21)
nmod:including(stores-19, Cartier-22)
cc(Cartier-22, and-23)
compound(Cross-25, Mark-24)
nmod:including(stores-19, Cross-25)
conj:and(Cartier-22, Cross-25)
punct(Cartier-22, ---26)
root(ROOT-0, foundered-27)
punct(foundered-27, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#towers

fill :: THE NEW YORK OFFICES of Simulations Publications Inc. looked like a poorly financed college fraternity house: shabby furniture , maze-like corridors , rooms filled with mountains of paper ./.
det(OFFICES-4, THE-1)
compound(OFFICES-4, NEW-2)
compound(OFFICES-4, YORK-3)
nsubj(looked-9, OFFICES-4)
case(Inc.-8, of-5)
compound(Inc.-8, Simulations-6)
compound(Inc.-8, Publications-7)
nmod:of(OFFICES-4, Inc.-8)
root(ROOT-0, looked-9)
case(house-16, like-10)
det(house-16, a-11)
advmod(financed-13, poorly-12)
amod(house-16, financed-13)
compound(house-16, college-14)
compound(house-16, fraternity-15)
nmod:like(looked-9, house-16)
punct(looked-9, :-17)
amod(furniture-19, shabby-18)
dobj(looked-9, furniture-19)
punct(furniture-19, ,-20)
amod(corridors-22, maze-like-21)
conj(furniture-19, corridors-22)
punct(furniture-19, ,-23)
appos(furniture-19, rooms-24)
acl(rooms-24, filled-25)
case(mountains-27, with-26)
nmod:with(filled-25, mountains-27)
case(paper-29, of-28)
nmod:of(mountains-27, paper-29)
punct(looked-9, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#mountains

fill :: Department stores nationwide are cutting back on apparel from such designers as Calvin Klein , Ralph Lauren and Liz Claiborne and instead filling racks with store brands ./.
compound(stores-2, Department-1)
nsubj(cutting-5, stores-2)
nsubj(filling-23, stores-2)
advmod(cutting-5, nationwide-3)
aux(cutting-5, are-4)
root(ROOT-0, cutting-5)
compound:prt(cutting-5, back-6)
case(apparel-8, on-7)
nmod:on(cutting-5, apparel-8)
case(designers-11, from-9)
amod(designers-11, such-10)
nmod:from(apparel-8, designers-11)
case(Klein-14, as-12)
compound(Klein-14, Calvin-13)
nmod:as(designers-11, Klein-14)
punct(Klein-14, ,-15)
compound(Lauren-17, Ralph-16)
nmod:as(designers-11, Lauren-17)
conj:and(Klein-14, Lauren-17)
cc(Klein-14, and-18)
compound(Claiborne-20, Liz-19)
nmod:as(designers-11, Claiborne-20)
conj:and(Klein-14, Claiborne-20)
cc(cutting-5, and-21)
advmod(filling-23, instead-22)
conj:and(cutting-5, filling-23)
dobj(filling-23, racks-24)
case(brands-27, with-25)
compound(brands-27, store-26)
nmod:with(filling-23, brands-27)
punct(cutting-5, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#racks

fill :: Conceivably , either the Federal Land Bank of Columbia , S.C . , or the Federal Land Bank of Texas , based in Austin , or both , could extend their operations to fill the lending void after the liquidation , said Mr. Naylor , the system 's chief regulator ./.
root(ROOT-0, Conceivably-1)
punct(Conceivably-1, ,-2)
cc:preconj(Bank-7, either-3)
det(Bank-7, the-4)
amod(Bank-7, Federal-5)
compound(Bank-7, Land-6)
root(,-2, Bank-7)
case(Columbia-9, of-8)
nmod:of(Bank-7, Columbia-9)
punct(Bank-7, ,-10)
appos(Bank-7, S.C-11)
punct(Bank-7, .-12)
punct(Bank-6, ,-1)
cc(Bank-6, or-2)
det(Bank-6, the-3)
amod(Bank-6, Federal-4)
compound(Bank-6, Land-5)
nsubj(extend-18, Bank-6)
case(Texas-8, of-7)
nmod:of(Bank-6, Texas-8)
punct(Bank-6, ,-9)
acl(Bank-6, based-10)
case(Austin-12, in-11)
nmod:in(based-10, Austin-12)
punct(Bank-6, ,-13)
cc(Bank-6, or-14)
conj:or(Bank-6, both-15)
nsubj(extend-18, both-15)
punct(Bank-6, ,-16)
aux(extend-18, could-17)
ccomp(said-30, extend-18)
nmod:poss(operations-20, their-19)
dobj(extend-18, operations-20)
mark(fill-22, to-21)
advcl(extend-18, fill-22)
det(void-25, the-23)
compound(void-25, lending-24)
dobj(fill-22, void-25)
case(liquidation-28, after-26)
det(liquidation-28, the-27)
nmod:after(fill-22, liquidation-28)
punct(said-30, ,-29)
root(ROOT-0, said-30)
compound(Naylor-32, Mr.-31)
nsubj(said-30, Naylor-32)
punct(Naylor-32, ,-33)
det(system-35, the-34)
nmod:poss(regulator-38, system-35)
case(system-35, 's-36)
amod(regulator-38, chief-37)
appos(Naylor-32, regulator-38)
punct(said-30, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#void

fill :: He fills positions that have been vacant for more than a year ./.
nsubj(fills-2, He-1)
root(ROOT-0, fills-2)
dobj(fills-2, positions-3)
nsubj(vacant-7, positions-3)
ref(positions-3, that-4)
aux(vacant-7, have-5)
cop(vacant-7, been-6)
acl:relcl(positions-3, vacant-7)
case(year-12, for-8)
advmod(a-11, more-9)
mwe(more-9, than-10)
nummod(year-12, a-11)
nmod:for(vacant-7, year-12)
punct(fills-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#positions

fill :: The NWA Inc. unit 's load factor for the month , or percentage of available seats filled , dropped to 64.6 % from 65.8 % ./.
det(unit-4, The-1)
compound(unit-4, NWA-2)
compound(unit-4, Inc.-3)
nmod:poss(factor-7, unit-4)
case(unit-4, 's-5)
compound(factor-7, load-6)
nsubj(dropped-19, factor-7)
case(month-10, for-8)
det(month-10, the-9)
nmod:for(factor-7, month-10)
punct(factor-7, ,-11)
cc(factor-7, or-12)
conj:or(factor-7, percentage-13)
nsubj(dropped-19, percentage-13)
case(seats-16, of-14)
amod(seats-16, available-15)
nmod:of(percentage-13, seats-16)
acl(seats-16, filled-17)
punct(factor-7, ,-18)
root(ROOT-0, dropped-19)
case(%-22, to-20)
nummod(%-22, 64.6-21)
nmod:to(dropped-19, %-22)
case(%-25, from-23)
nummod(%-25, 65.8-24)
nmod:from(dropped-19, %-25)
punct(dropped-19, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fill :: Agency officials said that it could be weeks before Mr. Meese can announce his choice to fill the deputy attorney general 's spot and that the work of the department 's top budgetary group -- previously headed by the deputy -- has come to a near standstill ./.
compound(officials-2, Agency-1)
nsubj(said-3, officials-2)
root(ROOT-0, said-3)
mark(weeks-8, that-4)
nsubj(weeks-8, it-5)
aux(weeks-8, could-6)
cop(weeks-8, be-7)
ccomp(said-3, weeks-8)
mark(announce-13, before-9)
compound(Meese-11, Mr.-10)
nsubj(announce-13, Meese-11)
aux(announce-13, can-12)
advcl(weeks-8, announce-13)
nmod:poss(choice-15, his-14)
dobj(announce-13, choice-15)
mark(fill-17, to-16)
advcl(announce-13, fill-17)
det(general-21, the-18)
compound(general-21, deputy-19)
compound(general-21, attorney-20)
nmod:poss(spot-23, general-21)
case(general-21, 's-22)
dobj(fill-17, spot-23)
cc(announce-13, and-24)
mark(come-43, that-25)
det(work-27, the-26)
nsubj(come-43, work-27)
case(group-34, of-28)
det(department-30, the-29)
nmod:poss(group-34, department-30)
case(department-30, 's-31)
amod(group-34, top-32)
amod(group-34, budgetary-33)
nmod:of(work-27, group-34)
punct(group-34, ---35)
advmod(headed-37, previously-36)
acl(group-34, headed-37)
case(deputy-40, by-38)
det(deputy-40, the-39)
nmod:by(headed-37, deputy-40)
punct(group-34, ---41)
aux(come-43, has-42)
advcl(weeks-8, come-43)
conj:and(announce-13, come-43)
case(standstill-47, to-44)
det(standstill-47, a-45)
amod(standstill-47, near-46)
nmod:to(come-43, standstill-47)
punct(said-3, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#spot

fill :: The regional carrier , which has three DC-9 aircraft and uses two of them for charter flights , also said William E. Lindsey , its chairman , was elected to the additional post of chief executive officer , filling a vacancy created by the resignation in February of Thomas Volz ./.
det(carrier-3, The-1)
amod(carrier-3, regional-2)
nsubj(has-6, carrier-3)
nsubj(uses-11, carrier-3)
nsubj(said-20, carrier-3)
punct(carrier-3, ,-4)
ref(carrier-3, which-5)
acl:relcl(carrier-3, has-6)
nummod(aircraft-9, three-7)
compound(aircraft-9, DC-9-8)
dobj(has-6, aircraft-9)
cc(has-6, and-10)
acl:relcl(carrier-3, uses-11)
conj:and(has-6, uses-11)
dobj(uses-11, two-12)
case(them-14, of-13)
nmod:of(two-12, them-14)
case(flights-17, for-15)
compound(flights-17, charter-16)
nmod:for(uses-11, flights-17)
punct(carrier-3, ,-18)
advmod(said-20, also-19)
root(ROOT-0, said-20)
compound(Lindsey-23, William-21)
compound(Lindsey-23, E.-22)
nsubjpass(elected-29, Lindsey-23)
punct(Lindsey-23, ,-24)
nmod:poss(chairman-26, its-25)
appos(Lindsey-23, chairman-26)
punct(Lindsey-23, ,-27)
auxpass(elected-29, was-28)
ccomp(said-20, elected-29)
case(post-33, to-30)
det(post-33, the-31)
amod(post-33, additional-32)
nmod:to(elected-29, post-33)
case(officer-37, of-34)
amod(officer-37, chief-35)
compound(officer-37, executive-36)
nmod:of(post-33, officer-37)
punct(elected-29, ,-38)
xcomp(elected-29, filling-39)
det(vacancy-41, a-40)
dobj(filling-39, vacancy-41)
acl(vacancy-41, created-42)
case(resignation-45, by-43)
det(resignation-45, the-44)
nmod:by(created-42, resignation-45)
case(February-47, in-46)
nmod:in(resignation-45, February-47)
case(Volz-50, of-48)
compound(Volz-50, Thomas-49)
nmod:of(February-47, Volz-50)
punct(said-20, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#vacancy

fill :: Mr. Tassin 's new team will be filled out by Stephen Gardner , 28 , and Christopher Kreidler , 24 , who were hired during the past year to work with the group ./.
compound(Tassin-2, Mr.-1)
nmod:poss(team-5, Tassin-2)
case(Tassin-2, 's-3)
amod(team-5, new-4)
nsubjpass(filled-8, team-5)
aux(filled-8, will-6)
auxpass(filled-8, be-7)
root(ROOT-0, filled-8)
compound:prt(filled-8, out-9)
case(Gardner-12, by-10)
compound(Gardner-12, Stephen-11)
nmod:agent(filled-8, Gardner-12)
punct(Gardner-12, ,-13)
amod(Gardner-12, 28-14)
punct(Gardner-12, ,-15)
cc(Gardner-12, and-16)
compound(Kreidler-18, Christopher-17)
nmod:agent(filled-8, Kreidler-18)
conj:and(Gardner-12, Kreidler-18)
nsubjpass(hired-24, Kreidler-18)
nsubj:xsubj(work-30, Kreidler-18)
punct(Kreidler-18, ,-19)
amod(Kreidler-18, 24-20)
punct(Kreidler-18, ,-21)
ref(Kreidler-18, who-22)
auxpass(hired-24, were-23)
acl:relcl(Kreidler-18, hired-24)
case(year-28, during-25)
det(year-28, the-26)
amod(year-28, past-27)
nmod:during(hired-24, year-28)
mark(work-30, to-29)
xcomp(hired-24, work-30)
case(group-33, with-31)
det(group-33, the-32)
nmod:with(work-30, group-33)
punct(filled-8, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#team

fill :: About 80 separate documents had to be filled out , many of them in an effort to reassure institutional money managers about the company 's credit-worthiness and prospects , Mr. Koch says , adding , `` There were times I wanted to kill . ''/''
advmod(80-2, About-1)
nummod(documents-4, 80-2)
amod(documents-4, separate-3)
nsubj(had-5, documents-4)
nsubjpass:xsubj(filled-8, documents-4)
root(ROOT-0, had-5)
mark(filled-8, to-6)
auxpass(filled-8, be-7)
xcomp(had-5, filled-8)
compound:prt(filled-8, out-9)
punct(says-32, ,-10)
ccomp(says-32, many-11)
case(them-13, of-12)
nmod:of(many-11, them-13)
case(effort-16, in-14)
det(effort-16, an-15)
nmod:in(many-11, effort-16)
mark(reassure-18, to-17)
acl(effort-16, reassure-18)
amod(managers-21, institutional-19)
compound(managers-21, money-20)
dobj(reassure-18, managers-21)
case(credit-worthiness-26, about-22)
det(company-24, the-23)
nmod:poss(credit-worthiness-26, company-24)
case(company-24, 's-25)
nmod:about(reassure-18, credit-worthiness-26)
cc(credit-worthiness-26, and-27)
nmod:about(reassure-18, prospects-28)
conj:and(credit-worthiness-26, prospects-28)
punct(says-32, ,-29)
compound(Koch-31, Mr.-30)
nsubj(says-32, Koch-31)
dep(had-5, says-32)
punct(says-32, ,-33)
xcomp(says-32, adding-34)
punct(adding-34, ,-35)
punct(adding-34, ``-36)
expl(were-38, There-37)
ccomp(adding-34, were-38)
nsubj(were-38, times-39)
nsubj(wanted-41, I-40)
nsubj:xsubj(kill-43, I-40)
acl:relcl(times-39, wanted-41)
mark(kill-43, to-42)
xcomp(wanted-41, kill-43)
punct(had-5, .-44)
punct(had-5, ''-45)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fill#be

fill :: Two executive vice presidents resigned from First Chicago Corp. to take other jobs , and the banking concern shifted some officers to fill the vacancies ./.
nummod(presidents-4, Two-1)
amod(presidents-4, executive-2)
compound(presidents-4, vice-3)
nsubj(resigned-5, presidents-4)
nsubj:xsubj(take-11, presidents-4)
root(ROOT-0, resigned-5)
case(Corp.-9, from-6)
amod(Corp.-9, First-7)
compound(Corp.-9, Chicago-8)
nmod:from(resigned-5, Corp.-9)
mark(take-11, to-10)
xcomp(resigned-5, take-11)
amod(jobs-13, other-12)
dobj(take-11, jobs-13)
punct(resigned-5, ,-14)
cc(resigned-5, and-15)
det(concern-18, the-16)
compound(concern-18, banking-17)
nsubj(shifted-19, concern-18)
conj:and(resigned-5, shifted-19)
det(officers-21, some-20)
dobj(shifted-19, officers-21)
mark(fill-23, to-22)
advcl(shifted-19, fill-23)
det(vacancies-25, the-24)
dobj(fill-23, vacancies-25)
punct(resigned-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#vacancies

fill :: An examiner last May described Sasson 's records as unorganized , scattered and incomplete -- `` suitcases . .. filled with canceled checks and bank statements . ''/''
det(examiner-2, An-1)
nsubj(described-5, examiner-2)
advmod(described-5, last-3)
aux(described-5, May-4)
root(ROOT-0, described-5)
nmod:poss(records-8, Sasson-6)
case(Sasson-6, 's-7)
dobj(described-5, records-8)
case(unorganized-10, as-9)
advcl(described-5, unorganized-10)
punct(unorganized-10, ,-11)
advcl(described-5, scattered-12)
conj:and(unorganized-10, scattered-12)
cc(unorganized-10, and-13)
advcl(described-5, incomplete-14)
conj:and(unorganized-10, incomplete-14)
punct(described-5, ---15)
punct(described-5, ``-16)
dobj(described-5, suitcases-17)
punct(described-5, .-18)
punct(described-5, .-19)
punct(described-5, .-20)
root(ROOT-0, filled-1)
case(checks-4, with-2)
amod(checks-4, canceled-3)
nmod:with(filled-1, checks-4)
cc(checks-4, and-5)
compound(statements-7, bank-6)
nmod:with(filled-1, statements-7)
conj:and(checks-4, statements-7)
punct(filled-1, .-8)
punct(filled-1, ''-9)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fill#checks

fill :: Now , in a suit filed in State Supreme Court in Manhattan , Claiborne alleges that Avon failed to keep an agreement to continue filling orders for the former venture , which had 1987 sales of about $ 27 million ./.
advmod(alleges-15, Now-1)
punct(alleges-15, ,-2)
case(suit-5, in-3)
det(suit-5, a-4)
nmod:in(alleges-15, suit-5)
acl(suit-5, filed-6)
case(Court-10, in-7)
compound(Court-10, State-8)
compound(Court-10, Supreme-9)
nmod:in(filed-6, Court-10)
case(Manhattan-12, in-11)
nmod:in(Court-10, Manhattan-12)
punct(alleges-15, ,-13)
nsubj(alleges-15, Claiborne-14)
root(ROOT-0, alleges-15)
mark(failed-18, that-16)
nsubj(failed-18, Avon-17)
nsubj:xsubj(keep-20, Avon-17)
ccomp(alleges-15, failed-18)
mark(keep-20, to-19)
xcomp(failed-18, keep-20)
det(agreement-22, an-21)
dobj(keep-20, agreement-22)
mark(continue-24, to-23)
acl(agreement-22, continue-24)
xcomp(continue-24, filling-25)
dobj(filling-25, orders-26)
case(venture-30, for-27)
det(venture-30, the-28)
amod(venture-30, former-29)
nmod:for(orders-26, venture-30)
nsubj(had-33, venture-30)
punct(venture-30, ,-31)
ref(venture-30, which-32)
acl:relcl(venture-30, had-33)
nummod(sales-35, 1987-34)
dobj(had-33, sales-35)
case($-38, of-36)
advmod($-38, about-37)
nmod:of(sales-35, $-38)
compound(million-40, 27-39)
nummod($-38, million-40)
punct(alleges-15, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#orders

fill :: Since then , Mr. Cahouet has filled nearly every major spot in Mellon 's upper management with executives from New York and West Coast banking centers ./.
case(then-2, Since-1)
nmod:since(filled-7, then-2)
punct(filled-7, ,-3)
compound(Cahouet-5, Mr.-4)
nsubj(filled-7, Cahouet-5)
aux(filled-7, has-6)
root(ROOT-0, filled-7)
advmod(spot-11, nearly-8)
det(spot-11, every-9)
amod(spot-11, major-10)
dobj(filled-7, spot-11)
case(management-16, in-12)
nmod:poss(management-16, Mellon-13)
case(Mellon-13, 's-14)
amod(management-16, upper-15)
nmod:in(spot-11, management-16)
case(executives-18, with-17)
nmod:with(filled-7, executives-18)
case(York-21, from-19)
compound(York-21, New-20)
nmod:from(executives-18, York-21)
cc(York-21, and-22)
compound(centers-26, West-23)
compound(centers-26, Coast-24)
compound(centers-26, banking-25)
nmod:from(executives-18, centers-26)
conj:and(York-21, centers-26)
punct(filled-7, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#spot

fill :: Passenger loads , the number of seats filled per plane , increased to 58.8 % from 56.1 % ./.
compound(loads-2, Passenger-1)
nsubj(increased-12, loads-2)
punct(loads-2, ,-3)
det(number-5, the-4)
appos(loads-2, number-5)
case(seats-7, of-6)
nmod:of(number-5, seats-7)
acl(seats-7, filled-8)
case(plane-10, per-9)
nmod:per(filled-8, plane-10)
punct(loads-2, ,-11)
root(ROOT-0, increased-12)
case(%-15, to-13)
nummod(%-15, 58.8-14)
nmod:to(increased-12, %-15)
case(%-18, from-16)
nummod(%-18, 56.1-17)
nmod:from(increased-12, %-18)
punct(increased-12, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#plane

fill :: Christman Air System , with just 30 % of its seats filled on a typical flight , is losing money ./.
compound(System-3, Christman-1)
compound(System-3, Air-2)
nsubj(losing-19, System-3)
punct(losing-19, ,-4)
case(%-8, with-5)
advmod(30-7, just-6)
nummod(%-8, 30-7)
nmod:with(losing-19, %-8)
case(seats-11, of-9)
nmod:poss(seats-11, its-10)
nmod:of(%-8, seats-11)
acl(%-8, filled-12)
case(flight-16, on-13)
det(flight-16, a-14)
amod(flight-16, typical-15)
nmod:on(filled-12, flight-16)
punct(losing-19, ,-17)
aux(losing-19, is-18)
root(ROOT-0, losing-19)
dobj(losing-19, money-20)
punct(losing-19, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#flight

fill :: Johnson & Johnson , caught off guard by the sudden surge in demand , says it is several weeks behind filling orders ./.
nsubj(caught-5, Johnson-1)
cc(Johnson-1, &-2)
conj:&(Johnson-1, Johnson-3)
nsubj(caught-5, Johnson-3)
punct(Johnson-1, ,-4)
root(ROOT-0, caught-5)
compound:prt(caught-5, off-6)
dobj(caught-5, guard-7)
case(surge-11, by-8)
det(surge-11, the-9)
amod(surge-11, sudden-10)
nmod:by(caught-5, surge-11)
case(demand-13, in-12)
nmod:in(surge-11, demand-13)
punct(caught-5, ,-14)
dep(caught-5, says-15)
nsubj(weeks-19, it-16)
cop(weeks-19, is-17)
amod(weeks-19, several-18)
ccomp(says-15, weeks-19)
mark(filling-21, behind-20)
acl(weeks-19, filling-21)
dobj(filling-21, orders-22)
punct(caught-5, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#orders

fill :: The airline said its January load factor , or the percentage of available seats filled , fell to 49.3 % from 52.8 % ./.
det(airline-2, The-1)
nsubj(said-3, airline-2)
root(ROOT-0, said-3)
nmod:poss(factor-7, its-4)
compound(factor-7, January-5)
compound(factor-7, load-6)
nsubj(fell-17, factor-7)
punct(factor-7, ,-8)
cc(factor-7, or-9)
det(percentage-11, the-10)
conj:or(factor-7, percentage-11)
nsubj(fell-17, percentage-11)
case(seats-14, of-12)
amod(seats-14, available-13)
nmod:of(percentage-11, seats-14)
acl(seats-14, filled-15)
punct(factor-7, ,-16)
ccomp(said-3, fell-17)
case(%-20, to-18)
nummod(%-20, 49.3-19)
nmod:to(fell-17, %-20)
case(%-23, from-21)
nummod(%-23, 52.8-22)
nmod:from(fell-17, %-23)
punct(said-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fill :: The airline said load factor , or the percentage of seats filled , was 39.3 % , up from 37.7 % a year earlier ./.
det(airline-2, The-1)
nsubj(said-3, airline-2)
root(ROOT-0, said-3)
compound(factor-5, load-4)
nsubj(%-16, factor-5)
punct(factor-5, ,-6)
cc(factor-5, or-7)
det(percentage-9, the-8)
conj:or(factor-5, percentage-9)
nsubj(%-16, percentage-9)
case(seats-11, of-10)
nmod:of(percentage-9, seats-11)
acl(seats-11, filled-12)
punct(factor-5, ,-13)
cop(%-16, was-14)
nummod(%-16, 39.3-15)
ccomp(said-3, %-16)
punct(%-16, ,-17)
advmod(%-16, up-18)
case(%-21, from-19)
nummod(%-21, 37.7-20)
nmod:from(up-18, %-21)
det(year-23, a-22)
nmod:npmod(earlier-24, year-23)
advmod(%-21, earlier-24)
punct(said-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fill :: Ad agency J. Walter Thompson Co . , moving to fill what is widely viewed as a critical management gap , hired a senior executive from rival Omnicom Group Inc. to become its top financial officer ./.
compound(Co-6, Ad-1)
compound(Co-6, agency-2)
compound(Co-6, J.-3)
compound(Co-6, Walter-4)
compound(Co-6, Thompson-5)
root(ROOT-0, Co-6)
punct(Co-6, .-7)
punct(hired-15, ,-1)
advcl(hired-15, moving-2)
mark(fill-4, to-3)
xcomp(moving-2, fill-4)
nsubjpass(viewed-8, what-5)
auxpass(viewed-8, is-6)
advmod(viewed-8, widely-7)
ccomp(fill-4, viewed-8)
case(gap-13, as-9)
det(gap-13, a-10)
amod(gap-13, critical-11)
compound(gap-13, management-12)
nmod:as(viewed-8, gap-13)
punct(hired-15, ,-14)
root(ROOT-0, hired-15)
det(executive-18, a-16)
amod(executive-18, senior-17)
dobj(hired-15, executive-18)
case(Inc.-23, from-19)
amod(Inc.-23, rival-20)
compound(Inc.-23, Omnicom-21)
compound(Inc.-23, Group-22)
nmod:from(executive-18, Inc.-23)
mark(become-25, to-24)
acl(executive-18, become-25)
nmod:poss(officer-29, its-26)
amod(officer-29, top-27)
amod(officer-29, financial-28)
xcomp(become-25, officer-29)
punct(hired-15, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fill :: The Nihon Keizai Shimbun , Japan 's leading business daily , reports that U.S. companies take an average of six months to a year to fill orders for Japanese buyers ./.
det(Shimbun-4, The-1)
compound(Shimbun-4, Nihon-2)
compound(Shimbun-4, Keizai-3)
nsubj(reports-12, Shimbun-4)
punct(Shimbun-4, ,-5)
nmod:poss(business-9, Japan-6)
case(Japan-6, 's-7)
amod(business-9, leading-8)
appos(Shimbun-4, business-9)
advmod(business-9, daily-10)
punct(Shimbun-4, ,-11)
root(ROOT-0, reports-12)
mark(take-16, that-13)
compound(companies-15, U.S.-14)
nsubj(take-16, companies-15)
ccomp(reports-12, take-16)
det(average-18, an-17)
dobj(take-16, average-18)
case(months-21, of-19)
nummod(months-21, six-20)
nmod:of(average-18, months-21)
case(year-24, to-22)
det(year-24, a-23)
nmod:to(take-16, year-24)
mark(fill-26, to-25)
advcl(take-16, fill-26)
dobj(fill-26, orders-27)
case(buyers-30, for-28)
amod(buyers-30, Japanese-29)
nmod:for(orders-27, buyers-30)
punct(reports-12, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#orders

fill :: A spokesman for the real estate investment trust , which was set up a year ago to lease properties to American Medical International Inc . , a health-care concern , said there is n't any immediate plan to fill the chief executive position ./.
det(spokesman-2, A-1)
root(ROOT-0, spokesman-2)
case(trust-8, for-3)
det(trust-8, the-4)
amod(trust-8, real-5)
compound(trust-8, estate-6)
compound(trust-8, investment-7)
nmod:for(spokesman-2, trust-8)
nsubjpass(set-12, trust-8)
nsubj:xsubj(lease-18, trust-8)
punct(trust-8, ,-9)
ref(trust-8, which-10)
auxpass(set-12, was-11)
acl:relcl(trust-8, set-12)
compound:prt(set-12, up-13)
det(year-15, a-14)
nmod:npmod(ago-16, year-15)
advmod(set-12, ago-16)
mark(lease-18, to-17)
xcomp(set-12, lease-18)
dobj(lease-18, properties-19)
case(Inc-24, to-20)
compound(Inc-24, American-21)
compound(Inc-24, Medical-22)
compound(Inc-24, International-23)
nmod:to(lease-18, Inc-24)
punct(spokesman-2, .-25)
punct(said-6, ,-1)
det(concern-4, a-2)
compound(concern-4, health-care-3)
nsubj(said-6, concern-4)
punct(said-6, ,-5)
root(ROOT-0, said-6)
expl(is-8, there-7)
ccomp(said-6, is-8)
neg(is-8, n't-9)
det(plan-12, any-10)
amod(plan-12, immediate-11)
nsubj(is-8, plan-12)
mark(fill-14, to-13)
acl(plan-12, fill-14)
det(position-18, the-15)
amod(position-18, chief-16)
compound(position-18, executive-17)
dobj(fill-14, position-18)
punct(said-6, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#position

fill :: James Thornton and Irvin Kupper were elected to the board of this operator of drugstores , home health centers and dry cleaning stores , filling vacancies ./.
compound(Thornton-2, James-1)
nsubjpass(elected-7, Thornton-2)
cc(Thornton-2, and-3)
compound(Kupper-5, Irvin-4)
conj:and(Thornton-2, Kupper-5)
nsubjpass(elected-7, Kupper-5)
auxpass(elected-7, were-6)
root(ROOT-0, elected-7)
case(board-10, to-8)
det(board-10, the-9)
nmod:to(elected-7, board-10)
case(operator-13, of-11)
det(operator-13, this-12)
nmod:of(board-10, operator-13)
case(drugstores-15, of-14)
nmod:of(operator-13, drugstores-15)
punct(drugstores-15, ,-16)
compound(centers-19, home-17)
compound(centers-19, health-18)
nmod:of(operator-13, centers-19)
conj:and(drugstores-15, centers-19)
cc(drugstores-15, and-20)
amod(stores-23, dry-21)
compound(stores-23, cleaning-22)
nmod:of(operator-13, stores-23)
conj:and(drugstores-15, stores-23)
punct(elected-7, ,-24)
xcomp(elected-7, filling-25)
dobj(filling-25, vacancies-26)
punct(elected-7, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#vacancies

fill :: But this is an institution , filled with patients who 've lost their health and some who 've lost their minds ./.
cc(institution-5, But-1)
nsubj(institution-5, this-2)
cop(institution-5, is-3)
det(institution-5, an-4)
root(ROOT-0, institution-5)
punct(institution-5, ,-6)
acl(institution-5, filled-7)
case(patients-9, with-8)
nmod:with(filled-7, patients-9)
nsubj(lost-12, patients-9)
ref(patients-9, who-10)
aux(lost-12, 've-11)
acl:relcl(patients-9, lost-12)
nmod:poss(health-14, their-13)
dobj(lost-12, health-14)
cc(lost-12, and-15)
acl:relcl(patients-9, some-16)
conj:and(lost-12, some-16)
nsubj(lost-19, some-16)
ref(some-16, who-17)
aux(lost-19, 've-18)
acl:relcl(some-16, lost-19)
nmod:poss(minds-21, their-20)
dobj(lost-19, minds-21)
punct(institution-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#patients

fill :: Formerly senior vice president of the international division of the New York Stock Exchange , he fills a vacancy created by recent resignations ./.
advmod(president-4, Formerly-1)
amod(president-4, senior-2)
compound(president-4, vice-3)
ccomp(fills-17, president-4)
case(division-8, of-5)
det(division-8, the-6)
compound(division-8, international-7)
nmod:of(president-4, division-8)
case(Exchange-14, of-9)
det(Exchange-14, the-10)
compound(Exchange-14, New-11)
compound(Exchange-14, York-12)
compound(Exchange-14, Stock-13)
nmod:of(division-8, Exchange-14)
punct(fills-17, ,-15)
nsubj(fills-17, he-16)
root(ROOT-0, fills-17)
det(vacancy-19, a-18)
dobj(fills-17, vacancy-19)
acl(vacancy-19, created-20)
case(resignations-23, by-21)
amod(resignations-23, recent-22)
nmod:by(created-20, resignations-23)
punct(fills-17, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#vacancy

fill :: One young man , out of work for two years , says all the jobs he applies for are being filled by blacks ; another man , nearing retirement , bitterly complains that the wages of his black colleagues are rising faster than his ./.
nummod(man-3, One-1)
amod(man-3, young-2)
nsubj(says-12, man-3)
punct(man-3, ,-4)
case(work-7, out-5)
mwe(out-5, of-6)
nmod:out_of(man-3, work-7)
case(years-10, for-8)
nummod(years-10, two-9)
nmod:for(work-7, years-10)
punct(man-3, ,-11)
root(ROOT-0, says-12)
det:predet(jobs-15, all-13)
det(jobs-15, the-14)
nsubjpass(filled-21, jobs-15)
nsubj(applies-17, he-16)
acl:relcl(jobs-15, applies-17)
nmod(applies-17, for-18)
aux(filled-21, are-19)
auxpass(filled-21, being-20)
ccomp(says-12, filled-21)
case(blacks-23, by-22)
nmod:agent(filled-21, blacks-23)
punct(says-12, ;-24)
det(man-26, another-25)
nsubj(complains-32, man-26)
punct(man-26, ,-27)
acl(man-26, nearing-28)
dobj(nearing-28, retirement-29)
punct(man-26, ,-30)
advmod(complains-32, bitterly-31)
parataxis(says-12, complains-32)
mark(rising-41, that-33)
det(wages-35, the-34)
nsubj(rising-41, wages-35)
case(colleagues-39, of-36)
nmod:poss(colleagues-39, his-37)
amod(colleagues-39, black-38)
nmod:of(wages-35, colleagues-39)
aux(rising-41, are-40)
ccomp(complains-32, rising-41)
advmod(rising-41, faster-42)
case(his-44, than-43)
nmod:than(faster-42, his-44)
punct(says-12, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#jobs

fill :: The load factor , or percentage of seats filled , for the month declined to 54.6 % from 55.7 % a year earlier ./.
det(factor-3, The-1)
compound(factor-3, load-2)
nsubj(declined-14, factor-3)
punct(factor-3, ,-4)
cc(factor-3, or-5)
conj:or(factor-3, percentage-6)
nsubj(declined-14, percentage-6)
case(seats-8, of-7)
nmod:of(percentage-6, seats-8)
acl(seats-8, filled-9)
punct(factor-3, ,-10)
case(month-13, for-11)
det(month-13, the-12)
nmod:for(factor-3, month-13)
root(ROOT-0, declined-14)
case(%-17, to-15)
nummod(%-17, 54.6-16)
nmod:to(declined-14, %-17)
case(%-20, from-18)
nummod(%-20, 55.7-19)
nmod:from(declined-14, %-20)
det(year-22, a-21)
nmod:npmod(earlier-23, year-22)
advmod(%-20, earlier-23)
punct(declined-14, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fill :: Load factor , or percentage of seats filled , was 56.5 % in December , down slightly from 56.6 % in the year-ago period ./.
compound(factor-2, Load-1)
nsubj(%-12, factor-2)
punct(factor-2, ,-3)
cc(factor-2, or-4)
conj:or(factor-2, percentage-5)
nsubj(%-12, percentage-5)
case(seats-7, of-6)
nmod:of(percentage-5, seats-7)
acl(seats-7, filled-8)
punct(factor-2, ,-9)
cop(%-12, was-10)
nummod(%-12, 56.5-11)
root(ROOT-0, %-12)
case(December-14, in-13)
nmod:in(%-12, December-14)
punct(%-12, ,-15)
advmod(%-12, down-16)
advmod(down-16, slightly-17)
case(%-20, from-18)
nummod(%-20, 56.6-19)
nmod:from(slightly-17, %-20)
case(period-24, in-21)
det(period-24, the-22)
amod(period-24, year-ago-23)
nmod:in(%-20, period-24)
punct(%-12, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fill :: Its load factor , or percentage of seats filled , rose to 47.4 % from 41.8 % ./.
nmod:poss(factor-3, Its-1)
compound(factor-3, load-2)
nsubj(rose-11, factor-3)
punct(factor-3, ,-4)
cc(factor-3, or-5)
conj:or(factor-3, percentage-6)
nsubj(rose-11, percentage-6)
case(seats-8, of-7)
nmod:of(percentage-6, seats-8)
acl(seats-8, filled-9)
punct(factor-3, ,-10)
root(ROOT-0, rose-11)
case(%-14, to-12)
nummod(%-14, 47.4-13)
nmod:to(rose-11, %-14)
case(%-17, from-15)
nummod(%-17, 41.8-16)
nmod:from(rose-11, %-17)
punct(rose-11, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fill :: The new chairman has been a board member since Nov. 1 , 1985 , filling a term that expires Aug. 27 , 1990 ./.
det(chairman-3, The-1)
amod(chairman-3, new-2)
nsubj(member-8, chairman-3)
aux(member-8, has-4)
cop(member-8, been-5)
det(member-8, a-6)
compound(member-8, board-7)
root(ROOT-0, member-8)
case(Nov.-10, since-9)
nmod:since(member-8, Nov.-10)
nummod(Nov.-10, 1-11)
punct(Nov.-10, ,-12)
nummod(Nov.-10, 1985-13)
punct(member-8, ,-14)
advcl(member-8, filling-15)
det(term-17, a-16)
dobj(filling-15, term-17)
nsubj(expires-19, term-17)
ref(term-17, that-18)
acl:relcl(term-17, expires-19)
nmod:tmod(expires-19, Aug.-20)
nummod(Aug.-20, 27-21)
punct(Aug.-20, ,-22)
nummod(Aug.-20, 1990-23)
punct(member-8, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#term

fill :: To fill these growing gaps , Congress increasingly has turned to employers to expand coverage to even more employees and non-employees ./.
mark(fill-2, To-1)
advcl(turned-10, fill-2)
det(gaps-5, these-3)
amod(gaps-5, growing-4)
dobj(fill-2, gaps-5)
punct(turned-10, ,-6)
nsubj(turned-10, Congress-7)
nsubj:xsubj(expand-14, Congress-7)
advmod(turned-10, increasingly-8)
aux(turned-10, has-9)
root(ROOT-0, turned-10)
case(employers-12, to-11)
nmod:to(turned-10, employers-12)
mark(expand-14, to-13)
xcomp(turned-10, expand-14)
dobj(expand-14, coverage-15)
case(employees-19, to-16)
advmod(more-18, even-17)
amod(employees-19, more-18)
nmod:to(expand-14, employees-19)
cc(employees-19, and-20)
nmod:to(expand-14, non-employees-21)
conj:and(employees-19, non-employees-21)
punct(turned-10, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#gaps

fill :: She filled out a report right away ./.
nsubj(filled-2, She-1)
root(ROOT-0, filled-2)
compound:prt(filled-2, out-3)
det(report-5, a-4)
dobj(filled-2, report-5)
advmod(away-7, right-6)
advmod(filled-2, away-7)
punct(filled-2, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#report

fill :: Instead , `` They should expel all the people living in the {British} countryside and allow secondary forests to grow and fill these new forests with wolves and bears etc. so you can study them before studying tropical animals . ''/''
advmod(expel-6, Instead-1)
punct(expel-6, ,-2)
punct(expel-6, ``-3)
nsubj(expel-6, They-4)
nsubj(allow-18, They-4)
nsubj(bears-31, They-4)
aux(expel-6, should-5)
root(ROOT-0, expel-6)
det:predet(people-9, all-7)
det(people-9, the-8)
dobj(expel-6, people-9)
acl(people-9, living-10)
case(countryside-16, in-11)
det(countryside-16, the-12)
punct(countryside-16, -LCB--13)
amod(countryside-16, British-14)
punct(countryside-16, -RCB--15)
nmod:in(living-10, countryside-16)
cc(expel-6, and-17)
conj:and(expel-6, allow-18)
amod(forests-20, secondary-19)
dobj(allow-18, forests-20)
nsubj:xsubj(grow-22, forests-20)
mark(grow-22, to-21)
xcomp(allow-18, grow-22)
cc(grow-22, and-23)
xcomp(allow-18, fill-24)
conj:and(grow-22, fill-24)
det(forests-27, these-25)
amod(forests-27, new-26)
dobj(grow-22, forests-27)
case(wolves-29, with-28)
nmod:with(grow-22, wolves-29)
cc(expel-6, and-30)
conj:and(expel-6, bears-31)
dobj(bears-31, etc.-32)
mark(study-36, so-33)
nsubj(study-36, you-34)
aux(study-36, can-35)
advcl(bears-31, study-36)
dobj(study-36, them-37)
mark(studying-39, before-38)
advcl(study-36, studying-39)
amod(animals-41, tropical-40)
dobj(studying-39, animals-41)
punct(expel-6, .-42)
punct(expel-6, ''-43)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

fill :: Though they may fill some of the same military needs , the missiles are quite different from any arms the Saudis have sought from the U.S ./.
mark(fill-4, Though-1)
nsubj(fill-4, they-2)
aux(fill-4, may-3)
advcl(different-16, fill-4)
dobj(fill-4, some-5)
case(needs-10, of-6)
det(needs-10, the-7)
amod(needs-10, same-8)
amod(needs-10, military-9)
nmod:of(some-5, needs-10)
punct(different-16, ,-11)
det(missiles-13, the-12)
nsubj(different-16, missiles-13)
cop(different-16, are-14)
advmod(different-16, quite-15)
root(ROOT-0, different-16)
case(arms-19, from-17)
det(arms-19, any-18)
nmod:from(different-16, arms-19)
det(Saudis-21, the-20)
nsubj(sought-23, Saudis-21)
aux(sought-23, have-22)
acl:relcl(arms-19, sought-23)
case(U.S-26, from-24)
det(U.S-26, the-25)
nmod:from(sought-23, U.S-26)
punct(different-16, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#needs

fill :: IBP was harshly critical of the report , charging that the portions referring to IBP are `` filled with innuendo and gross overstatements '' and that the hearings were held `` to serve the egotistical needs of Congressman Lantos . ''/''
nsubj(critical-4, IBP-1)
cop(critical-4, was-2)
advmod(critical-4, harshly-3)
root(ROOT-0, critical-4)
case(report-7, of-5)
det(report-7, the-6)
nmod:of(critical-4, report-7)
punct(critical-4, ,-8)
xcomp(critical-4, charging-9)
mark(filled-18, that-10)
det(portions-12, the-11)
nsubjpass(filled-18, portions-12)
acl(portions-12, referring-13)
case(IBP-15, to-14)
nmod:to(referring-13, IBP-15)
auxpass(filled-18, are-16)
punct(filled-18, ``-17)
ccomp(charging-9, filled-18)
case(innuendo-20, with-19)
nmod:with(filled-18, innuendo-20)
cc(innuendo-20, and-21)
amod(overstatements-23, gross-22)
nmod:with(filled-18, overstatements-23)
conj:and(innuendo-20, overstatements-23)
punct(filled-18, ''-24)
cc(filled-18, and-25)
mark(held-30, that-26)
det(hearings-28, the-27)
nsubjpass(held-30, hearings-28)
nsubj:xsubj(serve-33, hearings-28)
auxpass(held-30, were-29)
ccomp(charging-9, held-30)
conj:and(filled-18, held-30)
punct(held-30, ``-31)
mark(serve-33, to-32)
xcomp(held-30, serve-33)
det(needs-36, the-34)
amod(needs-36, egotistical-35)
dobj(serve-33, needs-36)
case(Lantos-39, of-37)
compound(Lantos-39, Congressman-38)
nmod:of(needs-36, Lantos-39)
punct(critical-4, .-40)
punct(critical-4, ''-41)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fill#portions

fill :: `` We believe the person who is working on the line , making our ice cream , filling the pints , is a very important person , '' Mr. Cohen says ./.
root(ROOT-0, ``-1)
nsubj(believe-3, We-2)
root(``-1, believe-3)
det(person-5, the-4)
dobj(believe-3, person-5)
nsubj(working-8, person-5)
ref(person-5, who-6)
aux(working-8, is-7)
acl:relcl(person-5, working-8)
case(line-11, on-9)
det(line-11, the-10)
nmod:on(working-8, line-11)
punct(believe-3, ,-12)
csubj(person-26, making-13)
nmod:poss(cream-16, our-14)
compound(cream-16, ice-15)
dobj(making-13, cream-16)
punct(making-13, ,-17)
advcl(making-13, filling-18)
det(pints-20, the-19)
dobj(filling-18, pints-20)
punct(making-13, ,-21)
cop(person-26, is-22)
det(person-26, a-23)
advmod(important-25, very-24)
amod(person-26, important-25)
ccomp(says-31, person-26)
punct(says-31, ,-27)
punct(says-31, ''-28)
compound(Cohen-30, Mr.-29)
nsubj(says-31, Cohen-30)
parataxis(believe-3, says-31)
punct(believe-3, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#pints

fill :: But to take this often-repeated mistake as a basis for the misleading conclusion that our streets will be forever filled with happy motorists , secure in their bliss because of endless oil supplies , is so naive as to border on irresponsibility ./.
cc(naive-37, But-1)
mark(take-3, to-2)
csubj(naive-37, take-3)
det(mistake-6, this-4)
amod(mistake-6, often-repeated-5)
dobj(take-3, mistake-6)
case(basis-9, as-7)
det(basis-9, a-8)
nmod:as(take-3, basis-9)
case(conclusion-13, for-10)
det(conclusion-13, the-11)
amod(conclusion-13, misleading-12)
nmod:for(basis-9, conclusion-13)
mark(filled-20, that-14)
nmod:poss(streets-16, our-15)
nsubjpass(filled-20, streets-16)
aux(filled-20, will-17)
auxpass(filled-20, be-18)
advmod(filled-20, forever-19)
ccomp(conclusion-13, filled-20)
case(motorists-23, with-21)
amod(motorists-23, happy-22)
nmod:with(filled-20, motorists-23)
punct(filled-20, ,-24)
xcomp(filled-20, secure-25)
case(bliss-28, in-26)
nmod:poss(bliss-28, their-27)
nmod:in(secure-25, bliss-28)
case(supplies-33, because-29)
mwe(because-29, of-30)
amod(supplies-33, endless-31)
compound(supplies-33, oil-32)
nmod:because_of(secure-25, supplies-33)
punct(filled-20, ,-34)
cop(naive-37, is-35)
advmod(naive-37, so-36)
root(ROOT-0, naive-37)
mark(border-40, as-38)
mark(border-40, to-39)
advcl(naive-37, border-40)
case(irresponsibility-42, on-41)
nmod:on(border-40, irresponsibility-42)
punct(naive-37, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#streets

fill :: Clergymen , philosophers , sociologists and political scientists have filled the pages of scholarly journals about the subject ./.
nsubj(filled-10, Clergymen-1)
punct(Clergymen-1, ,-2)
conj:and(Clergymen-1, philosophers-3)
nsubj(filled-10, philosophers-3)
punct(Clergymen-1, ,-4)
conj:and(Clergymen-1, sociologists-5)
nsubj(filled-10, sociologists-5)
cc(Clergymen-1, and-6)
amod(scientists-8, political-7)
conj:and(Clergymen-1, scientists-8)
nsubj(filled-10, scientists-8)
aux(filled-10, have-9)
root(ROOT-0, filled-10)
det(pages-12, the-11)
dobj(filled-10, pages-12)
case(journals-15, of-13)
amod(journals-15, scholarly-14)
nmod:of(pages-12, journals-15)
case(subject-18, about-16)
det(subject-18, the-17)
nmod:about(pages-12, subject-18)
punct(filled-10, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#pages

fill :: Fred J. Kupel , chief financial officer and vice president , finance and administration , at this forest products concern , was named a director , filling a vacancy and returning board membership to 11 ./.
compound(Kupel-3, Fred-1)
compound(Kupel-3, J.-2)
nsubjpass(named-23, Kupel-3)
punct(Kupel-3, ,-4)
amod(officer-7, chief-5)
amod(officer-7, financial-6)
appos(Kupel-3, officer-7)
cc(officer-7, and-8)
compound(president-10, vice-9)
appos(Kupel-3, president-10)
conj:and(officer-7, president-10)
punct(Kupel-3, ,-11)
appos(Kupel-3, finance-12)
cc(finance-12, and-13)
appos(Kupel-3, administration-14)
conj:and(finance-12, administration-14)
punct(Kupel-3, ,-15)
case(concern-20, at-16)
det(concern-20, this-17)
compound(concern-20, forest-18)
compound(concern-20, products-19)
nmod:at(Kupel-3, concern-20)
punct(Kupel-3, ,-21)
auxpass(named-23, was-22)
root(ROOT-0, named-23)
det(director-25, a-24)
xcomp(named-23, director-25)
punct(named-23, ,-26)
ccomp(named-23, filling-27)
det(vacancy-29, a-28)
dobj(filling-27, vacancy-29)
cc(filling-27, and-30)
ccomp(named-23, returning-31)
conj:and(filling-27, returning-31)
compound(membership-33, board-32)
dobj(returning-31, membership-33)
case(11-35, to-34)
nmod:to(returning-31, 11-35)
punct(named-23, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#vacancy

fill :: Merrill O. Burns , an executive vice president of Manufacturers Hanover Corp . , was named a director of this utility , filling a vacancy ./.
compound(Burns-3, Merrill-1)
compound(Burns-3, O.-2)
root(ROOT-0, Burns-3)
punct(Burns-3, ,-4)
det(president-8, an-5)
amod(president-8, executive-6)
compound(president-8, vice-7)
appos(Burns-3, president-8)
case(Corp-12, of-9)
compound(Corp-12, Manufacturers-10)
compound(Corp-12, Hanover-11)
nmod:of(president-8, Corp-12)
punct(Burns-3, .-13)
punct(named-3, ,-1)
auxpass(named-3, was-2)
root(ROOT-0, named-3)
det(director-5, a-4)
xcomp(named-3, director-5)
case(utility-8, of-6)
det(utility-8, this-7)
nmod:of(director-5, utility-8)
punct(named-3, ,-9)
xcomp(named-3, filling-10)
det(vacancy-12, a-11)
dobj(filling-10, vacancy-12)
punct(named-3, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#vacancy

fill :: Skywest said its load factor , or the percentage of seats filled , decreased to 38.3 % from 41.5 % ./.
nsubj(said-2, Skywest-1)
root(ROOT-0, said-2)
nmod:poss(factor-5, its-3)
compound(factor-5, load-4)
nsubj(decreased-14, factor-5)
punct(factor-5, ,-6)
cc(factor-5, or-7)
det(percentage-9, the-8)
conj:or(factor-5, percentage-9)
nsubj(decreased-14, percentage-9)
case(seats-11, of-10)
nmod:of(percentage-9, seats-11)
acl(seats-11, filled-12)
punct(factor-5, ,-13)
ccomp(said-2, decreased-14)
case(%-17, to-15)
nummod(%-17, 38.3-16)
nmod:to(decreased-14, %-17)
case(%-20, from-18)
nummod(%-20, 41.5-19)
nmod:from(decreased-14, %-20)
punct(said-2, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fill :: The company has n't filled the board vacancies ./.
det(company-2, The-1)
nsubj(filled-5, company-2)
aux(filled-5, has-3)
neg(filled-5, n't-4)
root(ROOT-0, filled-5)
det(vacancies-8, the-6)
compound(vacancies-8, board-7)
dobj(filled-5, vacancies-8)
punct(filled-5, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#vacancies

fill :: John E. Overmyer , president of this maker of petroleum dispensing equipment and systems , was named to the additional post of chairman , filling a vacancy ./.
compound(Overmyer-3, John-1)
compound(Overmyer-3, E.-2)
nsubjpass(named-17, Overmyer-3)
punct(Overmyer-3, ,-4)
appos(Overmyer-3, president-5)
case(maker-8, of-6)
det(maker-8, this-7)
nmod:of(president-5, maker-8)
case(equipment-12, of-9)
compound(equipment-12, petroleum-10)
amod(equipment-12, dispensing-11)
nmod:of(maker-8, equipment-12)
cc(equipment-12, and-13)
nmod:of(maker-8, systems-14)
conj:and(equipment-12, systems-14)
punct(Overmyer-3, ,-15)
auxpass(named-17, was-16)
root(ROOT-0, named-17)
case(post-21, to-18)
det(post-21, the-19)
amod(post-21, additional-20)
nmod:to(named-17, post-21)
case(chairman-23, of-22)
nmod:of(post-21, chairman-23)
punct(named-17, ,-24)
xcomp(named-17, filling-25)
det(vacancy-27, a-26)
dobj(filling-25, vacancy-27)
punct(named-17, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#vacancy

fill :: In addition to those delicately written billets-doux of musical modernism , `` Pelleas et Melisande , '' `` Afternoon of a Faun '' and `` Claire de Lune , '' the composer also left sheafs of correspondence in a minor key , notes to friends and foes filled with hapless chords and lonesome measures ./.
case(those-4, In-1)
mwe(In-1, addition-2)
mwe(In-1, to-3)
root(ROOT-0, those-4)
advmod(written-6, delicately-5)
amod(billets-doux-7, written-6)
nsubj(notes-43, billets-doux-7)
case(modernism-10, of-8)
amod(modernism-10, musical-9)
nmod:of(billets-doux-7, modernism-10)
punct(billets-doux-7, ,-11)
punct(billets-doux-7, ``-12)
compound(Melisande-15, Pelleas-13)
compound(Melisande-15, et-14)
dep(billets-doux-7, Melisande-15)
punct(billets-doux-7, ,-16)
punct(billets-doux-7, ''-17)
punct(billets-doux-7, ``-18)
conj:and(billets-doux-7, Afternoon-19)
nsubj(notes-43, Afternoon-19)
case(Faun-22, of-20)
det(Faun-22, a-21)
nmod:of(Afternoon-19, Faun-22)
punct(billets-doux-7, ''-23)
cc(billets-doux-7, and-24)
punct(billets-doux-7, ``-25)
compound(Lune-28, Claire-26)
compound(Lune-28, de-27)
conj:and(billets-doux-7, Lune-28)
nsubj(notes-43, Lune-28)
punct(billets-doux-7, ,-29)
punct(billets-doux-7, ''-30)
det(composer-32, the-31)
nsubj(left-34, composer-32)
advmod(left-34, also-33)
acl:relcl(billets-doux-7, left-34)
dobj(left-34, sheafs-35)
case(correspondence-37, of-36)
nmod:of(sheafs-35, correspondence-37)
case(key-41, in-38)
det(key-41, a-39)
amod(key-41, minor-40)
nmod:in(left-34, key-41)
punct(billets-doux-7, ,-42)
acl:relcl(those-4, notes-43)
case(friends-45, to-44)
nmod:to(notes-43, friends-45)
cc(friends-45, and-46)
nmod:to(notes-43, foes-47)
conj:and(friends-45, foes-47)
acl(friends-45, filled-48)
case(chords-51, with-49)
amod(chords-51, hapless-50)
nmod:with(filled-48, chords-51)
cc(chords-51, and-52)
amod(measures-54, lonesome-53)
nmod:with(filled-48, measures-54)
conj:and(chords-51, measures-54)
punct(those-4, .-55)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#chords

fill :: Baaron Pittenger , a long-time USOC aide who had served as acting executive director after Mr. Miller left , was named to fill the vacant post until year end , when Mr. Schiller 's contract expires ./.
compound(Pittenger-2, Baaron-1)
nsubjpass(named-21, Pittenger-2)
nsubj:xsubj(fill-23, Pittenger-2)
punct(Pittenger-2, ,-3)
det(aide-7, a-4)
amod(aide-7, long-time-5)
compound(aide-7, USOC-6)
appos(Pittenger-2, aide-7)
nsubj(served-10, aide-7)
ref(aide-7, who-8)
aux(served-10, had-9)
acl:relcl(aide-7, served-10)
case(director-14, as-11)
amod(director-14, acting-12)
compound(director-14, executive-13)
nmod:as(served-10, director-14)
mark(left-18, after-15)
compound(Miller-17, Mr.-16)
nsubj(left-18, Miller-17)
advcl(served-10, left-18)
punct(Pittenger-2, ,-19)
auxpass(named-21, was-20)
root(ROOT-0, named-21)
mark(fill-23, to-22)
xcomp(named-21, fill-23)
det(post-26, the-24)
amod(post-26, vacant-25)
dobj(fill-23, post-26)
case(end-29, until-27)
compound(end-29, year-28)
nmod:until(named-21, end-29)
punct(end-29, ,-30)
advmod(expires-36, when-31)
compound(Schiller-33, Mr.-32)
nmod:poss(contract-35, Schiller-33)
case(Schiller-33, 's-34)
nsubj(expires-36, contract-35)
acl:relcl(end-29, expires-36)
punct(named-21, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#post

fill :: Mr. Choi , filling three pages with computations , offers this stern -- and unsettling -- advice to one American business reporter: `` Do n't write about investing this summer ./.
compound(Choi-2, Mr.-1)
nsubj(offers-10, Choi-2)
punct(Choi-2, ,-3)
acl(Choi-2, filling-4)
nummod(pages-6, three-5)
dobj(filling-4, pages-6)
case(computations-8, with-7)
nmod:with(filling-4, computations-8)
punct(Choi-2, ,-9)
root(ROOT-0, offers-10)
det(stern-12, this-11)
dobj(offers-10, stern-12)
punct(offers-10, ---13)
cc(offers-10, and-14)
amod(advice-17, unsettling-15)
punct(advice-17, ---16)
conj:and(offers-10, advice-17)
case(reporter-22, to-18)
nummod(reporter-22, one-19)
amod(reporter-22, American-20)
compound(reporter-22, business-21)
nmod:to(advice-17, reporter-22)
punct(advice-17, :-23)
punct(advice-17, ``-24)
aux(write-27, Do-25)
neg(write-27, n't-26)
dep(advice-17, write-27)
mark(investing-29, about-28)
advcl(write-27, investing-29)
det(summer-31, this-30)
nmod:tmod(investing-29, summer-31)
punct(offers-10, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#pages

fill :: In addition to filling a hole in United 's top management , the action marks the first big personnel move by Mr. Wolf , who was named to his posts last month ./.
mark(filling-4, In-1)
mwe(In-1, addition-2)
mwe(In-1, to-3)
acl(marks-15, filling-4)
det(hole-6, a-5)
dobj(filling-4, hole-6)
case(management-11, in-7)
nmod:poss(management-11, United-8)
case(United-8, 's-9)
amod(management-11, top-10)
nmod:in(hole-6, management-11)
punct(marks-15, ,-12)
det(action-14, the-13)
nsubj(marks-15, action-14)
root(ROOT-0, marks-15)
det(personnel-19, the-16)
amod(personnel-19, first-17)
amod(personnel-19, big-18)
nsubj(move-20, personnel-19)
ccomp(marks-15, move-20)
case(Wolf-23, by-21)
compound(Wolf-23, Mr.-22)
nmod:by(move-20, Wolf-23)
nsubjpass(named-27, Wolf-23)
punct(Wolf-23, ,-24)
ref(Wolf-23, who-25)
auxpass(named-27, was-26)
acl:relcl(Wolf-23, named-27)
case(posts-30, to-28)
nmod:poss(posts-30, his-29)
nmod:to(named-27, posts-30)
amod(month-32, last-31)
nmod:tmod(named-27, month-32)
punct(marks-15, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#hole

fill :: David L. Meister was named president of this provider of cable television programming , filling a vacancy ./.
compound(Meister-3, David-1)
compound(Meister-3, L.-2)
nsubjpass(named-5, Meister-3)
auxpass(named-5, was-4)
root(ROOT-0, named-5)
xcomp(named-5, president-6)
case(provider-9, of-7)
det(provider-9, this-8)
nmod:of(president-6, provider-9)
case(programming-13, of-10)
compound(programming-13, cable-11)
compound(programming-13, television-12)
nmod:of(provider-9, programming-13)
punct(named-5, ,-14)
xcomp(named-5, filling-15)
det(vacancy-17, a-16)
dobj(filling-15, vacancy-17)
punct(named-5, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#vacancy

fill :: And if occupancy ran low , the administrator would just let the doctors know and the beds would fill up ./.
cc(let-11, And-1)
mark(ran-4, if-2)
nsubj(ran-4, occupancy-3)
advcl(let-11, ran-4)
xcomp(ran-4, low-5)
punct(let-11, ,-6)
det(administrator-8, the-7)
nsubj(let-11, administrator-8)
aux(let-11, would-9)
advmod(let-11, just-10)
root(ROOT-0, let-11)
det(doctors-13, the-12)
nsubj(know-14, doctors-13)
ccomp(let-11, know-14)
cc(know-14, and-15)
det(beds-17, the-16)
nsubj(fill-19, beds-17)
aux(fill-19, would-18)
ccomp(let-11, fill-19)
conj:and(know-14, fill-19)
compound:prt(fill-19, up-20)
punct(let-11, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#beds

fill :: But industry lobbyists argued successfully that reconstituting spent plastic containers into such alternative products as flower pots , drainpipes , synthetic lumber , and filling for pillows and sleeping bags should count against the recycling targets ./.
cc(argued-4, But-1)
compound(lobbyists-3, industry-2)
nsubj(argued-4, lobbyists-3)
root(ROOT-0, argued-4)
advmod(argued-4, successfully-5)
mark(count-32, that-6)
csubj(count-32, reconstituting-7)
acl(reconstituting-7, spent-8)
amod(containers-10, plastic-9)
dobj(spent-8, containers-10)
case(products-14, into-11)
amod(products-14, such-12)
amod(products-14, alternative-13)
nmod:into(spent-8, products-14)
case(pots-17, as-15)
compound(pots-17, flower-16)
nmod:as(products-14, pots-17)
punct(pots-17, ,-18)
nmod:as(products-14, drainpipes-19)
conj:and(pots-17, drainpipes-19)
punct(pots-17, ,-20)
amod(lumber-22, synthetic-21)
nmod:as(products-14, lumber-22)
conj:and(pots-17, lumber-22)
punct(pots-17, ,-23)
cc(pots-17, and-24)
nmod:as(products-14, filling-25)
conj:and(pots-17, filling-25)
case(pillows-27, for-26)
nmod:for(filling-25, pillows-27)
cc(pillows-27, and-28)
amod(bags-30, sleeping-29)
nmod:for(filling-25, bags-30)
conj:and(pillows-27, bags-30)
aux(count-32, should-31)
ccomp(argued-4, count-32)
case(targets-36, against-33)
det(targets-36, the-34)
compound(targets-36, recycling-35)
nmod:against(count-32, targets-36)
punct(argued-4, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#pillows

fill :: The situation for soybeans does n't become critical until next week , when the crop 's need for moisture soars as its pods begin to fill with beans ./.
det(situation-2, The-1)
nsubj(become-7, situation-2)
case(soybeans-4, for-3)
nmod:for(situation-2, soybeans-4)
aux(become-7, does-5)
neg(become-7, n't-6)
root(ROOT-0, become-7)
xcomp(become-7, critical-8)
case(week-11, until-9)
amod(week-11, next-10)
nmod:until(become-7, week-11)
punct(week-11, ,-12)
advmod(soars-20, when-13)
det(crop-15, the-14)
nmod:poss(need-17, crop-15)
case(crop-15, 's-16)
nsubj(soars-20, need-17)
case(moisture-19, for-18)
nmod:for(need-17, moisture-19)
acl:relcl(week-11, soars-20)
mark(begin-24, as-21)
nmod:poss(pods-23, its-22)
nsubj(begin-24, pods-23)
nsubj:xsubj(fill-26, pods-23)
advcl(soars-20, begin-24)
mark(fill-26, to-25)
xcomp(begin-24, fill-26)
case(beans-28, with-27)
nmod:with(fill-26, beans-28)
punct(become-7, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#pods

fill :: `` They say it 's demeaning to the steer , but how would they know that ? '' asks Mr. Souther , who compares it to `` wild-cow milking '' -- an event in which one person tries to calm a wild cow while another tries to fill up a Coke bottle with wild-cow milk ./.
root(ROOT-0, ``-1)
nsubj(say-3, They-2)
root(``-1, say-3)
nsubj(demeaning-6, it-4)
cop(demeaning-6, 's-5)
ccomp(say-3, demeaning-6)
case(steer-9, to-7)
det(steer-9, the-8)
nmod:to(demeaning-6, steer-9)
punct(say-3, ,-10)
cc(say-3, but-11)
advmod(know-15, how-12)
aux(know-15, would-13)
nsubj(know-15, they-14)
root(``-1, know-15)
conj:but(say-3, know-15)
dobj(know-15, that-16)
punct(say-3, ?-17)
punct(say-3, ''-18)
root(ROOT-0, asks-1)
compound(Souther-3, Mr.-2)
dobj(asks-1, Souther-3)
nsubj(compares-6, Souther-3)
punct(Souther-3, ,-4)
ref(Souther-3, who-5)
acl:relcl(Souther-3, compares-6)
dobj(compares-6, it-7)
case(milking-11, to-8)
punct(milking-11, ``-9)
amod(milking-11, wild-cow-10)
nmod:to(compares-6, milking-11)
punct(milking-11, ''-12)
punct(milking-11, ---13)
det(event-15, an-14)
dep(milking-11, event-15)
nmod:in(tries-20, event-15)
case(which-17, in-16)
ref(event-15, which-17)
nummod(person-19, one-18)
nsubj(tries-20, person-19)
nsubj:xsubj(calm-22, person-19)
acl:relcl(event-15, tries-20)
mark(calm-22, to-21)
xcomp(tries-20, calm-22)
det(cow-25, a-23)
amod(cow-25, wild-24)
dobj(calm-22, cow-25)
mark(tries-28, while-26)
nsubj(tries-28, another-27)
nsubj:xsubj(fill-30, another-27)
advcl(calm-22, tries-28)
mark(fill-30, to-29)
xcomp(tries-28, fill-30)
compound:prt(fill-30, up-31)
det(bottle-34, a-32)
compound(bottle-34, Coke-33)
dobj(fill-30, bottle-34)
case(milk-37, with-35)
amod(milk-37, wild-cow-36)
nmod:with(bottle-34, milk-37)
punct(asks-1, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#bottle

fill :: I found that the journalists were delighted to find a young person interested enough in their trade to come in and go through the press clippings in those fascinating metal drawers that filled the morgue ./.
nsubj(found-2, I-1)
root(ROOT-0, found-2)
mark(delighted-7, that-3)
det(journalists-5, the-4)
nsubj(delighted-7, journalists-5)
nsubj:xsubj(find-9, journalists-5)
cop(delighted-7, were-6)
ccomp(found-2, delighted-7)
mark(find-9, to-8)
xcomp(delighted-7, find-9)
det(person-12, a-10)
amod(person-12, young-11)
dobj(find-9, person-12)
amod(person-12, interested-13)
advmod(interested-13, enough-14)
case(trade-17, in-15)
nmod:poss(trade-17, their-16)
nmod:in(interested-13, trade-17)
mark(come-19, to-18)
xcomp(interested-13, come-19)
nmod(come-19, in-20)
cc(come-19, and-21)
xcomp(interested-13, go-22)
conj:and(come-19, go-22)
case(clippings-26, through-23)
det(clippings-26, the-24)
compound(clippings-26, press-25)
nmod:through(go-22, clippings-26)
case(drawers-31, in-27)
det(drawers-31, those-28)
amod(drawers-31, fascinating-29)
compound(drawers-31, metal-30)
nmod:in(clippings-26, drawers-31)
nsubj(filled-33, drawers-31)
ref(drawers-31, that-32)
acl:relcl(drawers-31, filled-33)
det(morgue-35, the-34)
dobj(filled-33, morgue-35)
punct(found-2, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fill#morgue

fix :: In a prepared statement , Chairman and Chief Executive Officer Charles Schwab said , `` We 're taking responsibility for what happened , for fixing it , and for making sure that it does n't happen again . ''/''
case(statement-4, In-1)
det(statement-4, a-2)
amod(statement-4, prepared-3)
nmod:in(said-13, statement-4)
punct(said-13, ,-5)
nsubj(said-13, Chairman-6)
cc(Chairman-6, and-7)
amod(Schwab-12, Chief-8)
amod(Schwab-12, Executive-9)
compound(Schwab-12, Officer-10)
compound(Schwab-12, Charles-11)
conj:and(Chairman-6, Schwab-12)
nsubj(said-13, Schwab-12)
root(ROOT-0, said-13)
punct(said-13, ,-14)
punct(said-13, ``-15)
nsubj(taking-18, We-16)
nsubj(making-30, We-16)
aux(taking-18, 're-17)
ccomp(said-13, taking-18)
dobj(taking-18, responsibility-19)
mark(happened-22, for-20)
nsubj(happened-22, what-21)
acl(responsibility-19, happened-22)
punct(happened-22, ,-23)
mark(fixing-25, for-24)
advcl(happened-22, fixing-25)
dobj(fixing-25, it-26)
punct(taking-18, ,-27)
cc(taking-18, and-28)
mark(making-30, for-29)
ccomp(said-13, making-30)
conj:and(taking-18, making-30)
xcomp(making-30, sure-31)
mark(happen-36, that-32)
nsubj(happen-36, it-33)
aux(happen-36, does-34)
neg(happen-36, n't-35)
ccomp(sure-31, happen-36)
advmod(happen-36, again-37)
punct(said-13, .-38)
punct(said-13, ''-39)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fix#it

fix :: So , a few months ago he paid the equivalent of about $ 800 to get his nose fixed ./.
advmod(paid-8, So-1)
punct(paid-8, ,-2)
det(months-5, a-3)
amod(months-5, few-4)
nmod:npmod(ago-6, months-5)
advmod(paid-8, ago-6)
nsubj(paid-8, he-7)
root(ROOT-0, paid-8)
det(equivalent-10, the-9)
dobj(paid-8, equivalent-10)
case($-13, of-11)
advmod($-13, about-12)
nmod:of(equivalent-10, $-13)
nummod($-13, 800-14)
mark(get-16, to-15)
advcl(paid-8, get-16)
nmod:poss(nose-18, his-17)
nsubj(fixed-19, nose-18)
dep(get-16, fixed-19)
punct(paid-8, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#nose

fix :: Meanwhile , Congress is turning up the pressure on the FAA to fix O ' Hare 's problems ./.
advmod(turning-5, Meanwhile-1)
punct(turning-5, ,-2)
nsubj(turning-5, Congress-3)
aux(turning-5, is-4)
root(ROOT-0, turning-5)
compound:prt(turning-5, up-6)
det(pressure-8, the-7)
dobj(turning-5, pressure-8)
case(FAA-11, on-9)
det(FAA-11, the-10)
nmod:on(pressure-8, FAA-11)
mark(fix-13, to-12)
acl(pressure-8, fix-13)
compound(problems-18, O-14)
punct(problems-18, '-15)
nmod:poss(problems-18, Hare-16)
case(Hare-16, 's-17)
dobj(fix-13, problems-18)
punct(turning-5, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#problems

fix :: In late May , a rumor spread through the city that the government would raise the price of rice , which has been fixed for years at 14 U.S. cents a pound ./.
case(May-3, In-1)
amod(May-3, late-2)
root(ROOT-0, May-3)
punct(May-3, ,-4)
det(spread-7, a-5)
compound(spread-7, rumor-6)
root(,-4, spread-7)
case(city-10, through-8)
det(city-10, the-9)
nmod:through(spread-7, city-10)
mark(raise-15, that-11)
det(government-13, the-12)
nsubj(raise-15, government-13)
aux(raise-15, would-14)
ccomp(spread-7, raise-15)
det(price-17, the-16)
dobj(raise-15, price-17)
case(rice-19, of-18)
nmod:of(price-17, rice-19)
nsubjpass(fixed-24, rice-19)
punct(rice-19, ,-20)
ref(rice-19, which-21)
aux(fixed-24, has-22)
auxpass(fixed-24, been-23)
acl:relcl(rice-19, fixed-24)
case(years-26, for-25)
nmod:for(fixed-24, years-26)
case(cents-30, at-27)
nummod(cents-30, 14-28)
compound(cents-30, U.S.-29)
nmod:at(fixed-24, cents-30)
det(pound-32, a-31)
nmod:npmod(cents-30, pound-32)
punct(spread-7, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#rice

fix :: It also vindicates Pratt 's efforts to fix problems in customer service that contributed to its loss of dominance in the commercial jet engine field to General Electric Co ./.
nsubj(vindicates-3, It-1)
advmod(vindicates-3, also-2)
root(ROOT-0, vindicates-3)
nmod:poss(efforts-6, Pratt-4)
case(Pratt-4, 's-5)
dobj(vindicates-3, efforts-6)
mark(fix-8, to-7)
acl(efforts-6, fix-8)
dobj(fix-8, problems-9)
nsubj(contributed-14, problems-9)
case(service-12, in-10)
compound(service-12, customer-11)
nmod:in(problems-9, service-12)
ref(problems-9, that-13)
acl:relcl(problems-9, contributed-14)
case(loss-17, to-15)
nmod:poss(loss-17, its-16)
nmod:to(contributed-14, loss-17)
case(dominance-19, of-18)
nmod:of(loss-17, dominance-19)
case(field-25, in-20)
det(field-25, the-21)
amod(field-25, commercial-22)
compound(field-25, jet-23)
compound(field-25, engine-24)
nmod:in(loss-17, field-25)
case(Co-29, to-26)
compound(Co-29, General-27)
compound(Co-29, Electric-28)
nmod:to(loss-17, Co-29)
punct(vindicates-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#problems

fix :: But Mr. Sherlund said he thinks the company has taken steps to fix that problem ./.
cc(said-4, But-1)
compound(Sherlund-3, Mr.-2)
nsubj(said-4, Sherlund-3)
root(ROOT-0, said-4)
nsubj(thinks-6, he-5)
ccomp(said-4, thinks-6)
det(company-8, the-7)
nsubj(taken-10, company-8)
aux(taken-10, has-9)
ccomp(thinks-6, taken-10)
dobj(taken-10, steps-11)
mark(fix-13, to-12)
acl(steps-11, fix-13)
det(problem-15, that-14)
dobj(fix-13, problem-15)
punct(said-4, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#problem

fix :: The improvements have `` been a catalyst for other owners nearby to fix up their buildings too , '' adds David Fiederlein , the building agent ./.
det(improvements-2, The-1)
nsubj(catalyst-7, improvements-2)
nsubj:xsubj(fix-13, improvements-2)
aux(catalyst-7, have-3)
punct(catalyst-7, ``-4)
cop(catalyst-7, been-5)
det(catalyst-7, a-6)
ccomp(adds-20, catalyst-7)
case(owners-10, for-8)
amod(owners-10, other-9)
nmod:for(catalyst-7, owners-10)
advmod(catalyst-7, nearby-11)
mark(fix-13, to-12)
xcomp(catalyst-7, fix-13)
compound:prt(fix-13, up-14)
nmod:poss(buildings-16, their-15)
dobj(fix-13, buildings-16)
advmod(fix-13, too-17)
punct(adds-20, ,-18)
punct(adds-20, ''-19)
root(ROOT-0, adds-20)
compound(Fiederlein-22, David-21)
nsubj(adds-20, Fiederlein-22)
punct(Fiederlein-22, ,-23)
det(agent-26, the-24)
compound(agent-26, building-25)
appos(Fiederlein-22, agent-26)
punct(adds-20, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#buildings

fix :: The non-OPEC group 's proposal fixes different cuts for each participant for the months of May and June -- then to be re-evaluated -- as follows: Mexico , 68 , 000 barrels a day ; Egypt , 22 , 500 ; Oman , 27 , 500 ; China , 30 , 000 ; Angola , 20 , 000 , and Malaysia , 15 , 000 ./.
det(group-3, The-1)
amod(group-3, non-OPEC-2)
nmod:poss(fixes-6, group-3)
case(group-3, 's-4)
compound(fixes-6, proposal-5)
nsubj(cuts-8, fixes-6)
nsubjpass:xsubj(re-evaluated-23, fixes-6)
amod(cuts-8, different-7)
root(ROOT-0, cuts-8)
case(participant-11, for-9)
det(participant-11, each-10)
nmod:for(cuts-8, participant-11)
case(months-14, for-12)
det(months-14, the-13)
nmod:for(cuts-8, months-14)
case(May-16, of-15)
nmod:of(months-14, May-16)
cc(May-16, and-17)
nmod:of(months-14, June-18)
conj:and(May-16, June-18)
punct(cuts-8, ---19)
advmod(cuts-8, then-20)
mark(re-evaluated-23, to-21)
auxpass(re-evaluated-23, be-22)
xcomp(cuts-8, re-evaluated-23)
punct(follows-26, ---24)
mark(follows-26, as-25)
parataxis(re-evaluated-23, follows-26)
punct(follows-26, :-27)
dep(follows-26, Mexico-28)
punct(Mexico-28, ,-29)
amod(Mexico-28, 68-30)
punct(Mexico-28, ,-31)
nummod(barrels-33, 000-32)
appos(Mexico-28, barrels-33)
det(day-35, a-34)
nmod:npmod(barrels-33, day-35)
punct(Mexico-28, ;-36)
dep(follows-26, Egypt-37)
conj:and(Mexico-28, Egypt-37)
punct(Egypt-37, ,-38)
nummod(Egypt-37, 22-39)
punct(Egypt-37, ,-40)
nummod(Egypt-37, 500-41)
punct(Mexico-28, ;-42)
dep(follows-26, Oman-43)
conj:and(Mexico-28, Oman-43)
punct(Oman-43, ,-44)
nummod(Oman-43, 27-45)
punct(Oman-43, ,-46)
nummod(Oman-43, 500-47)
punct(Mexico-28, ;-48)
dep(follows-26, China-49)
conj:and(Mexico-28, China-49)
punct(China-49, ,-50)
nummod(China-49, 30-51)
punct(China-49, ,-52)
nummod(China-49, 000-53)
punct(Mexico-28, ;-54)
dep(follows-26, Angola-55)
conj:and(Mexico-28, Angola-55)
punct(Angola-55, ,-56)
nummod(Angola-55, 20-57)
punct(Angola-55, ,-58)
nummod(Angola-55, 000-59)
punct(Mexico-28, ,-60)
cc(Mexico-28, and-61)
dep(follows-26, Malaysia-62)
conj:and(Mexico-28, Malaysia-62)
punct(Malaysia-62, ,-63)
nummod(Malaysia-62, 15-64)
punct(Malaysia-62, ,-65)
nummod(Malaysia-62, 000-66)
punct(cuts-8, .-67)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#group

fix :: `` The Saudis always have been careful about fixing something that is n't broken . ''/''
root(ROOT-0, ``-1)
det(Saudis-3, The-2)
nsubj(careful-7, Saudis-3)
advmod(careful-7, always-4)
aux(careful-7, have-5)
cop(careful-7, been-6)
root(``-1, careful-7)
mark(fixing-9, about-8)
advcl(careful-7, fixing-9)
dobj(fixing-9, something-10)
nsubjpass(broken-14, something-10)
ref(something-10, that-11)
auxpass(broken-14, is-12)
neg(broken-14, n't-13)
acl:relcl(something-10, broken-14)
punct(careful-7, .-15)
punct(careful-7, ''-16)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fix#something

fix :: With exchange rates credibly fixed , only slight British gold losses were necessary to increase British short-term interest rates sufficiently -- say , less than 50 basis points -- to keep the funds on deposit in London until gradually disbursed to finance the evolving U.S. trade deficit ./.
mark(fixed-5, With-1)
compound(rates-3, exchange-2)
nsubj(fixed-5, rates-3)
advmod(fixed-5, credibly-4)
advcl(necessary-13, fixed-5)
punct(necessary-13, ,-6)
advmod(slight-8, only-7)
amod(losses-11, slight-8)
amod(losses-11, British-9)
compound(losses-11, gold-10)
nsubj(necessary-13, losses-11)
nsubj:xsubj(increase-15, losses-11)
cop(necessary-13, were-12)
root(ROOT-0, necessary-13)
mark(increase-15, to-14)
xcomp(necessary-13, increase-15)
amod(rates-19, British-16)
amod(rates-19, short-term-17)
compound(rates-19, interest-18)
dobj(increase-15, rates-19)
advmod(increase-15, sufficiently-20)
punct(increase-15, ---21)
parataxis(increase-15, say-22)
punct(say-22, ,-23)
advmod(50-26, less-24)
mwe(less-24, than-25)
nummod(points-28, 50-26)
compound(points-28, basis-27)
dobj(say-22, points-28)
punct(keep-31, ---29)
mark(keep-31, to-30)
dep(points-28, keep-31)
det(funds-33, the-32)
dobj(keep-31, funds-33)
case(deposit-35, on-34)
nmod:on(funds-33, deposit-35)
case(London-37, in-36)
nmod:in(keep-31, London-37)
mark(disbursed-40, until-38)
advmod(disbursed-40, gradually-39)
advcl(keep-31, disbursed-40)
mark(finance-42, to-41)
xcomp(disbursed-40, finance-42)
det(deficit-47, the-43)
amod(deficit-47, evolving-44)
compound(deficit-47, U.S.-45)
compound(deficit-47, trade-46)
dobj(finance-42, deficit-47)
punct(necessary-13, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#rates

fix :: Now it falls to William H. Spoor , the 65-year-old former chairman , to fix things ./.
advmod(falls-3, Now-1)
nsubj(falls-3, it-2)
nsubj:xsubj(fix-15, it-2)
root(ROOT-0, falls-3)
case(Spoor-7, to-4)
compound(Spoor-7, William-5)
compound(Spoor-7, H.-6)
nmod:to(falls-3, Spoor-7)
punct(Spoor-7, ,-8)
det(chairman-12, the-9)
amod(chairman-12, 65-year-old-10)
amod(chairman-12, former-11)
appos(Spoor-7, chairman-12)
punct(Spoor-7, ,-13)
mark(fix-15, to-14)
xcomp(falls-3, fix-15)
dobj(fix-15, things-16)
punct(falls-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#things

fix :: It is `` Hotlanta '' : capital city of the South at a time when the South has risen ; city of myriad services at a time when the service economy rules ; city of the 1980s , more suburban than downtown , more footloose than fixed ./.
nsubj(Hotlanta-4, It-1)
cop(Hotlanta-4, is-2)
punct(Hotlanta-4, ``-3)
root(ROOT-0, Hotlanta-4)
punct(Hotlanta-4, ''-5)
punct(Hotlanta-4, :-6)
compound(city-8, capital-7)
dep(Hotlanta-4, city-8)
case(South-11, of-9)
det(South-11, the-10)
nmod:of(city-8, South-11)
case(time-14, at-12)
det(time-14, a-13)
nmod:at(city-8, time-14)
advmod(risen-19, when-15)
det(South-17, the-16)
nsubj(risen-19, South-17)
aux(risen-19, has-18)
acl:relcl(time-14, risen-19)
punct(city-8, ;-20)
dep(city-8, city-21)
case(services-24, of-22)
amod(services-24, myriad-23)
nmod:of(city-21, services-24)
case(time-27, at-25)
det(time-27, a-26)
nmod:at(city-21, time-27)
amod(time-27, when-28)
det(rules-32, the-29)
compound(rules-32, service-30)
compound(rules-32, economy-31)
dep(when-28, rules-32)
punct(rules-32, ;-33)
dep(rules-32, city-34)
case(1980s-37, of-35)
det(1980s-37, the-36)
nmod:of(city-34, 1980s-37)
punct(city-34, ,-38)
advmod(suburban-40, more-39)
amod(city-34, suburban-40)
case(downtown-42, than-41)
nmod:than(suburban-40, downtown-42)
punct(city-34, ,-43)
amod(footloose-45, more-44)
appos(city-34, footloose-45)
mark(fixed-47, than-46)
advcl(footloose-45, fixed-47)
punct(Hotlanta-4, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fix :: Also , growing competition is forcing many utilities to lower rates , though costs remain fixed , thus squeezing profits ./.
advmod(forcing-6, Also-1)
punct(forcing-6, ,-2)
amod(competition-4, growing-3)
nsubj(forcing-6, competition-4)
aux(forcing-6, is-5)
root(ROOT-0, forcing-6)
amod(utilities-8, many-7)
dobj(forcing-6, utilities-8)
case(rates-11, to-9)
amod(rates-11, lower-10)
nmod:to(forcing-6, rates-11)
punct(forcing-6, ,-12)
mark(remain-15, though-13)
nsubj(remain-15, costs-14)
advcl(forcing-6, remain-15)
xcomp(remain-15, fixed-16)
punct(remain-15, ,-17)
advmod(squeezing-19, thus-18)
xcomp(remain-15, squeezing-19)
dobj(squeezing-19, profits-20)
punct(forcing-6, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fix :: The question is , do you fix some of these problems by spending more on them or by divesting ? ''/''
det(question-2, The-1)
nsubj(is-3, question-2)
root(ROOT-0, is-3)
punct(is-3, ,-4)
aux(fix-7, do-5)
nsubj(fix-7, you-6)
ccomp(is-3, fix-7)
dobj(fix-7, some-8)
case(problems-11, of-9)
det(problems-11, these-10)
nmod:of(some-8, problems-11)
mark(spending-13, by-12)
advcl(fix-7, spending-13)
dobj(spending-13, more-14)
case(them-16, on-15)
nmod:on(spending-13, them-16)
cc(spending-13, or-17)
mark(divesting-19, by-18)
advcl(fix-7, divesting-19)
conj:or(spending-13, divesting-19)
punct(is-3, ?-20)
punct(is-3, ''-21)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fix#problems

fix :: Dealers said the volume of selling orders made it impossible to fix the closing prices ./.
nsubj(said-2, Dealers-1)
root(ROOT-0, said-2)
det(volume-4, the-3)
nsubj(made-8, volume-4)
case(orders-7, of-5)
amod(orders-7, selling-6)
nmod:of(volume-4, orders-7)
ccomp(said-2, made-8)
nsubj(fix-12, it-9)
dep(fix-12, impossible-10)
mark(fix-12, to-11)
xcomp(made-8, fix-12)
det(prices-15, the-13)
compound(prices-15, closing-14)
dobj(fix-12, prices-15)
punct(said-2, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#prices

fix :: Under prospective payment , the charges are fixed in advance , and hospitals can no longer play Robin Hood ./.
case(payment-3, Under-1)
amod(payment-3, prospective-2)
nmod:under(fixed-8, payment-3)
punct(fixed-8, ,-4)
det(charges-6, the-5)
nsubjpass(fixed-8, charges-6)
auxpass(fixed-8, are-7)
root(ROOT-0, fixed-8)
case(advance-10, in-9)
nmod:in(fixed-8, advance-10)
punct(fixed-8, ,-11)
cc(fixed-8, and-12)
nsubj(play-17, hospitals-13)
aux(play-17, can-14)
neg(longer-16, no-15)
advmod(play-17, longer-16)
conj:and(fixed-8, play-17)
compound(Hood-19, Robin-18)
dobj(play-17, Hood-19)
punct(fixed-8, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#charges

fix :: If he eventually wins the war -- curbs Eastern 's costs and fixes Continental 's service problems -- his airlines , with their exceptional size and market dominance , may become for him a kind of mass-production profit machine ./.
mark(wins-4, If-1)
nsubj(wins-4, he-2)
advmod(wins-4, eventually-3)
advcl(become-31, wins-4)
det(war-6, the-5)
dobj(wins-4, war-6)
punct(curbs-8, ---7)
dep(wins-4, curbs-8)
nmod:poss(costs-11, Eastern-9)
case(Eastern-9, 's-10)
dep(curbs-8, costs-11)
cc(costs-11, and-12)
compound(Continental-14, fixes-13)
nmod:poss(problems-17, Continental-14)
case(Continental-14, 's-15)
compound(problems-17, service-16)
dep(curbs-8, problems-17)
conj:and(costs-11, problems-17)
punct(curbs-8, ---18)
nmod:poss(airlines-20, his-19)
nsubj(become-31, airlines-20)
punct(airlines-20, ,-21)
case(size-25, with-22)
nmod:poss(size-25, their-23)
amod(size-25, exceptional-24)
nmod:with(airlines-20, size-25)
cc(size-25, and-26)
compound(dominance-28, market-27)
nmod:with(airlines-20, dominance-28)
conj:and(size-25, dominance-28)
punct(airlines-20, ,-29)
aux(become-31, may-30)
root(ROOT-0, become-31)
case(him-33, for-32)
nmod:for(become-31, him-33)
det(kind-35, a-34)
xcomp(become-31, kind-35)
case(machine-39, of-36)
compound(machine-39, mass-production-37)
compound(machine-39, profit-38)
nmod:of(kind-35, machine-39)
punct(become-31, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fix :: `` I 'm quite sure there was someone within the IBM structure that could have just reached in and fixed it . ''/''
root(ROOT-0, ``-1)
nsubj(sure-5, I-2)
cop(sure-5, 'm-3)
advmod(sure-5, quite-4)
root(``-1, sure-5)
expl(was-7, there-6)
ccomp(sure-5, was-7)
nsubj(was-7, someone-8)
nsubjpass(reached-17, someone-8)
nsubjpass(fixed-20, someone-8)
case(structure-12, within-9)
det(structure-12, the-10)
compound(structure-12, IBM-11)
nmod:within(someone-8, structure-12)
ref(someone-8, that-13)
aux(reached-17, could-14)
aux(reached-17, have-15)
advmod(reached-17, just-16)
acl:relcl(someone-8, reached-17)
compound:prt(reached-17, in-18)
cc(reached-17, and-19)
acl:relcl(someone-8, fixed-20)
conj:and(reached-17, fixed-20)
dobj(fixed-20, it-21)
punct(sure-5, .-22)
punct(sure-5, ''-23)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fix#it

fix :: The growing consensus in the computer industry is that midsized products are the weakest part of IBM 's business right now , and that IBM needs to fix that problem in 1988 ./.
det(consensus-3, The-1)
amod(consensus-3, growing-2)
nsubj(is-8, consensus-3)
case(industry-7, in-4)
det(industry-7, the-5)
compound(industry-7, computer-6)
nmod:in(consensus-3, industry-7)
root(ROOT-0, is-8)
mark(part-15, that-9)
amod(products-11, midsized-10)
nsubj(part-15, products-11)
cop(part-15, are-12)
det(part-15, the-13)
amod(part-15, weakest-14)
ccomp(is-8, part-15)
case(business-19, of-16)
nmod:poss(business-19, IBM-17)
case(IBM-17, 's-18)
nmod:of(part-15, business-19)
advmod(now-21, right-20)
advmod(part-15, now-21)
punct(part-15, ,-22)
cc(part-15, and-23)
mark(needs-26, that-24)
nsubj(needs-26, IBM-25)
nsubj:xsubj(fix-28, IBM-25)
ccomp(is-8, needs-26)
conj:and(part-15, needs-26)
mark(fix-28, to-27)
xcomp(needs-26, fix-28)
det(problem-30, that-29)
dobj(fix-28, problem-30)
case(1988-32, in-31)
nmod:in(fix-28, 1988-32)
punct(is-8, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#problem

fix :: Your Oct. 18 international-page article `` Lawson Accused of Miscues on Economy: British Chancellor Strayed From Strict Monetarism '' illustrates that a country can not radically reduce marginal tax rates without a deterioration of its current trade account ; nor can it continue to simultaneously keep exchange rates fixed without suffering an inevitable increase in its inflation rate ./.
nmod:poss(article-5, Your-1)
compound(article-5, Oct.-2)
nummod(article-5, 18-3)
amod(article-5, international-page-4)
root(ROOT-0, article-5)
punct(article-5, ``-6)
compound(Accused-8, Lawson-7)
dep(article-5, Accused-8)
case(Miscues-10, of-9)
nmod:of(Accused-8, Miscues-10)
case(Economy-12, on-11)
nmod:on(Accused-8, Economy-12)
punct(article-5, :-13)
compound(Chancellor-15, British-14)
nsubj(Strayed-16, Chancellor-15)
nsubj(illustrates-21, Chancellor-15)
dep(article-5, Strayed-16)
case(Monetarism-19, From-17)
amod(Monetarism-19, Strict-18)
nmod:from(Strayed-16, Monetarism-19)
punct(Strayed-16, ''-20)
dep(article-5, illustrates-21)
conj:nor(Strayed-16, illustrates-21)
mark(reduce-28, that-22)
det(country-24, a-23)
nsubj(reduce-28, country-24)
aux(reduce-28, can-25)
neg(reduce-28, not-26)
advmod(reduce-28, radically-27)
ccomp(illustrates-21, reduce-28)
amod(rates-31, marginal-29)
compound(rates-31, tax-30)
dobj(reduce-28, rates-31)
case(deterioration-34, without-32)
det(deterioration-34, a-33)
nmod:without(reduce-28, deterioration-34)
case(account-39, of-35)
nmod:poss(account-39, its-36)
amod(account-39, current-37)
compound(account-39, trade-38)
nmod:of(deterioration-34, account-39)
punct(Strayed-16, ;-40)
cc(Strayed-16, nor-41)
aux(continue-44, can-42)
nsubj(continue-44, it-43)
nsubj:xsubj(keep-47, it-43)
dep(article-5, continue-44)
conj:nor(Strayed-16, continue-44)
mark(keep-47, to-45)
advmod(keep-47, simultaneously-46)
xcomp(continue-44, keep-47)
compound(rates-49, exchange-48)
nsubj(fixed-50, rates-49)
ccomp(keep-47, fixed-50)
mark(suffering-52, without-51)
advcl(fixed-50, suffering-52)
det(increase-55, an-53)
amod(increase-55, inevitable-54)
dobj(suffering-52, increase-55)
case(rate-59, in-56)
nmod:poss(rate-59, its-57)
compound(rate-59, inflation-58)
nmod:in(increase-55, rate-59)
punct(article-5, .-60)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#rates

fix :: The consulting firm of Data Resources Inc. expects business fixed investment this year to top the 1987 outlays by 11.1 % ./.
det(firm-3, The-1)
compound(firm-3, consulting-2)
nsubj(expects-8, firm-3)
case(Inc.-7, of-4)
compound(Inc.-7, Data-5)
compound(Inc.-7, Resources-6)
nmod:of(firm-3, Inc.-7)
root(ROOT-0, expects-8)
compound(investment-11, business-9)
amod(investment-11, fixed-10)
dobj(expects-8, investment-11)
det(year-13, this-12)
nmod:tmod(expects-8, year-13)
mark(top-15, to-14)
advcl(expects-8, top-15)
det(outlays-18, the-16)
nummod(outlays-18, 1987-17)
dobj(top-15, outlays-18)
case(%-21, by-19)
nummod(%-21, 11.1-20)
nmod:by(top-15, %-21)
punct(expects-8, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#investment

fix :: `` I fix it too many times already , '' he says , adding that he is waiting for a formal treaty ./.
punct(says-12, ``-1)
nsubj(fix-3, I-2)
ccomp(says-12, fix-3)
dobj(fix-3, it-4)
advmod(many-6, too-5)
amod(times-7, many-6)
nmod:tmod(fix-3, times-7)
advmod(times-7, already-8)
punct(says-12, ,-9)
punct(says-12, ''-10)
nsubj(says-12, he-11)
root(ROOT-0, says-12)
punct(says-12, ,-13)
xcomp(says-12, adding-14)
mark(waiting-18, that-15)
nsubj(waiting-18, he-16)
aux(waiting-18, is-17)
ccomp(adding-14, waiting-18)
case(treaty-22, for-19)
det(treaty-22, a-20)
amod(treaty-22, formal-21)
nmod:for(waiting-18, treaty-22)
punct(says-12, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#it

fix :: The study does have several major assumptions -- the biggest being that Medicare expenditures are fixed ; the figures reflect a simple shift of money from one doctor 's pocket to another ./.
det(study-2, The-1)
nsubj(have-4, study-2)
aux(have-4, does-3)
root(ROOT-0, have-4)
amod(assumptions-7, several-5)
amod(assumptions-7, major-6)
dobj(have-4, assumptions-7)
punct(assumptions-7, ---8)
det(fixed-16, the-9)
dep(fixed-16, biggest-10)
dep(fixed-16, being-11)
mark(fixed-16, that-12)
compound(expenditures-14, Medicare-13)
nsubjpass(fixed-16, expenditures-14)
auxpass(fixed-16, are-15)
dep(assumptions-7, fixed-16)
punct(have-4, ;-17)
det(figures-19, the-18)
nsubj(reflect-20, figures-19)
parataxis(have-4, reflect-20)
det(shift-23, a-21)
amod(shift-23, simple-22)
dobj(reflect-20, shift-23)
case(money-25, of-24)
nmod:of(shift-23, money-25)
case(pocket-30, from-26)
nummod(doctor-28, one-27)
nmod:poss(pocket-30, doctor-28)
case(doctor-28, 's-29)
nmod:from(shift-23, pocket-30)
case(another-32, to-31)
nmod:to(shift-23, another-32)
punct(have-4, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#expenditures

fix :: `` They could probably buy the whole Tenneco refinery for what they 'd spend fixing up the other , '' said Thomas Manning , vice president of the consulting firm Purvin & Gertz Inc . , Houston ./.
punct(said-21, ``-1)
nsubj(buy-5, They-2)
aux(buy-5, could-3)
advmod(buy-5, probably-4)
ccomp(said-21, buy-5)
det(refinery-9, the-6)
amod(refinery-9, whole-7)
compound(refinery-9, Tenneco-8)
dobj(buy-5, refinery-9)
mark(spend-14, for-10)
dobj(spend-14, what-11)
nsubj(spend-14, they-12)
aux(spend-14, 'd-13)
advcl(buy-5, spend-14)
xcomp(spend-14, fixing-15)
compound:prt(fixing-15, up-16)
det(other-18, the-17)
dobj(fixing-15, other-18)
punct(said-21, ,-19)
punct(said-21, ''-20)
root(ROOT-0, said-21)
compound(Manning-23, Thomas-22)
nsubj(said-21, Manning-23)
punct(Manning-23, ,-24)
compound(president-26, vice-25)
appos(Manning-23, president-26)
case(Purvin-31, of-27)
det(Purvin-31, the-28)
compound(Purvin-31, consulting-29)
compound(Purvin-31, firm-30)
nmod:of(president-26, Purvin-31)
cc(Purvin-31, &-32)
compound(Inc-34, Gertz-33)
nmod:of(president-26, Inc-34)
conj:&(Purvin-31, Inc-34)
punct(said-21, .-35)
punct(Houston-2, ,-1)
root(ROOT-0, Houston-2)
punct(Houston-2, .-3)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#other

fix :: All eyes are fixed on 18 television sets showing the changing of the guard at Buckingham Palace ./.
det(eyes-2, All-1)
nsubjpass(fixed-4, eyes-2)
auxpass(fixed-4, are-3)
root(ROOT-0, fixed-4)
case(sets-8, on-5)
nummod(sets-8, 18-6)
compound(sets-8, television-7)
nmod:on(fixed-4, sets-8)
acl(sets-8, showing-9)
det(changing-11, the-10)
dobj(showing-9, changing-11)
case(guard-14, of-12)
det(guard-14, the-13)
nmod:of(changing-11, guard-14)
case(Palace-17, at-15)
compound(Palace-17, Buckingham-16)
nmod:at(changing-11, Palace-17)
punct(fixed-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#eyes

fix :: The evidence showed he had helped fix two juries , and threatened to choke to death a woman witness against him ./.
det(evidence-2, The-1)
nsubj(showed-3, evidence-2)
nsubj(threatened-12, evidence-2)
nsubj:xsubj(choke-14, evidence-2)
root(ROOT-0, showed-3)
nsubj(helped-6, he-4)
aux(helped-6, had-5)
ccomp(showed-3, helped-6)
ccomp(helped-6, fix-7)
nummod(juries-9, two-8)
dobj(fix-7, juries-9)
punct(showed-3, ,-10)
cc(showed-3, and-11)
conj:and(showed-3, threatened-12)
mark(choke-14, to-13)
xcomp(threatened-12, choke-14)
case(death-16, to-15)
nmod:to(choke-14, death-16)
det(witness-19, a-17)
compound(witness-19, woman-18)
dobj(choke-14, witness-19)
case(him-21, against-20)
nmod:against(witness-19, him-21)
punct(showed-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#juries

fix :: Scott fit in well here , buying youngsters ' prize animals at the county fair and helping fix up the high-school football field ./.
nsubj(fit-2, Scott-1)
root(ROOT-0, fit-2)
compound:prt(fit-2, in-3)
advmod(here-5, well-4)
advmod(fit-2, here-5)
punct(fit-2, ,-6)
ccomp(fit-2, buying-7)
nmod:poss(animals-11, youngsters-8)
case(youngsters-8, '-9)
compound(animals-11, prize-10)
dobj(buying-7, animals-11)
case(fair-15, at-12)
det(fair-15, the-13)
compound(fair-15, county-14)
nmod:at(buying-7, fair-15)
cc(buying-7, and-16)
ccomp(fit-2, helping-17)
conj:and(buying-7, helping-17)
ccomp(helping-17, fix-18)
compound:prt(fix-18, up-19)
det(field-23, the-20)
compound(field-23, high-school-21)
compound(field-23, football-22)
dobj(fix-18, field-23)
punct(fit-2, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#field

fix :: The indictment alleges that Ms. Myerson gave Justice Gabel 's daughter a $ 19 , 000-a-year city job in exchange for fixing Mr. Capasso 's 1985 divorce case ./.
det(indictment-2, The-1)
nsubj(alleges-3, indictment-2)
root(ROOT-0, alleges-3)
mark(gave-7, that-4)
compound(Myerson-6, Ms.-5)
nsubj(gave-7, Myerson-6)
ccomp(alleges-3, gave-7)
compound(Gabel-9, Justice-8)
nmod:poss(daughter-11, Gabel-9)
case(Gabel-9, 's-10)
iobj(gave-7, daughter-11)
det(job-18, a-12)
dep(19-14, $-13)
amod(job-18, 19-14)
punct(19-14, ,-15)
dep(19-14, 000-a-year-16)
compound(job-18, city-17)
dobj(gave-7, job-18)
case(exchange-20, in-19)
nmod:in(job-18, exchange-20)
mark(fixing-22, for-21)
acl(job-18, fixing-22)
compound(Capasso-24, Mr.-23)
nmod:poss(case-28, Capasso-24)
case(Capasso-24, 's-25)
nummod(case-28, 1985-26)
compound(case-28, divorce-27)
dobj(fixing-22, case-28)
punct(alleges-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#case

fix :: Bush and Dukakis should be asked to clarify where they stand on this important distinction , for it 's clear that the real work of fixing the schools will fall to local politicians and school boards ./.
nsubjpass(asked-6, Bush-1)
nsubj:xsubj(clarify-8, Bush-1)
cc(Bush-1, and-2)
conj:and(Bush-1, Dukakis-3)
nsubjpass(asked-6, Dukakis-3)
nsubj:xsubj(clarify-8, Dukakis-3)
aux(asked-6, should-4)
auxpass(asked-6, be-5)
root(ROOT-0, asked-6)
mark(clarify-8, to-7)
xcomp(asked-6, clarify-8)
advmod(stand-11, where-9)
nsubj(stand-11, they-10)
advcl(clarify-8, stand-11)
case(distinction-15, on-12)
det(distinction-15, this-13)
amod(distinction-15, important-14)
nmod:on(stand-11, distinction-15)
punct(asked-6, ,-16)
mark(clear-20, for-17)
nsubj(clear-20, it-18)
cop(clear-20, 's-19)
advcl(asked-6, clear-20)
mark(fall-30, that-21)
det(work-24, the-22)
amod(work-24, real-23)
nsubj(fall-30, work-24)
mark(fixing-26, of-25)
acl(work-24, fixing-26)
det(schools-28, the-27)
dobj(fixing-26, schools-28)
aux(fall-30, will-29)
ccomp(clear-20, fall-30)
case(politicians-33, to-31)
amod(politicians-33, local-32)
nmod:to(fall-30, politicians-33)
cc(politicians-33, and-34)
compound(boards-36, school-35)
nmod:to(fall-30, boards-36)
conj:and(politicians-33, boards-36)
punct(asked-6, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#schools

fix :: `` It 's like they 're bleeding from the carotid artery , and we 're having to fix it with a Band-Aid . ''/''
root(ROOT-0, ``-1)
nsubj(bleeding-7, It-2)
cop(bleeding-7, 's-3)
mark(bleeding-7, like-4)
nsubj(bleeding-7, they-5)
aux(bleeding-7, 're-6)
root(``-1, bleeding-7)
case(artery-11, from-8)
det(artery-11, the-9)
compound(artery-11, carotid-10)
nmod:from(bleeding-7, artery-11)
punct(bleeding-7, ,-12)
cc(bleeding-7, and-13)
nsubj(having-16, we-14)
nsubj:xsubj(fix-18, we-14)
aux(having-16, 're-15)
root(``-1, having-16)
conj:and(bleeding-7, having-16)
mark(fix-18, to-17)
xcomp(having-16, fix-18)
dobj(fix-18, it-19)
case(Band-Aid-22, with-20)
det(Band-Aid-22, a-21)
nmod:with(fix-18, Band-Aid-22)
punct(bleeding-7, .-23)
punct(bleeding-7, ''-24)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fix#it

fix :: General Cinema has announced plans to fix up and expand the 22-store flagship chain , an undertaking estimated at more than $ 100 million ./.
amod(Cinema-2, General-1)
nsubj(announced-4, Cinema-2)
aux(announced-4, has-3)
root(ROOT-0, announced-4)
dobj(announced-4, plans-5)
mark(fix-7, to-6)
acl(plans-5, fix-7)
compound:prt(fix-7, up-8)
cc(fix-7, and-9)
acl(plans-5, expand-10)
conj:and(fix-7, expand-10)
det(chain-14, the-11)
amod(chain-14, 22-store-12)
compound(chain-14, flagship-13)
dobj(fix-7, chain-14)
punct(chain-14, ,-15)
det(undertaking-17, an-16)
appos(chain-14, undertaking-17)
acl(undertaking-17, estimated-18)
case($-22, at-19)
advmod($-22, more-20)
mwe(more-20, than-21)
nmod:at(estimated-18, $-22)
compound(million-24, 100-23)
nummod($-22, million-24)
punct(announced-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#chain

fix :: He added that neither the Fed , nor any other U.S. government agency or international body should try to fix exchange rates ./.
nsubj(added-2, He-1)
root(ROOT-0, added-2)
mark(try-18, that-3)
cc:preconj(Fed-6, neither-4)
det(Fed-6, the-5)
nsubj(try-18, Fed-6)
nsubj:xsubj(fix-20, Fed-6)
punct(Fed-6, ,-7)
cc(Fed-6, nor-8)
det(agency-13, any-9)
amod(agency-13, other-10)
compound(agency-13, U.S.-11)
compound(agency-13, government-12)
conj:nor(Fed-6, agency-13)
nsubj(try-18, agency-13)
nsubj:xsubj(fix-20, agency-13)
cc(agency-13, or-14)
amod(body-16, international-15)
conj:nor(Fed-6, body-16)
conj:or(agency-13, body-16)
aux(try-18, should-17)
ccomp(added-2, try-18)
mark(fix-20, to-19)
xcomp(try-18, fix-20)
compound(rates-22, exchange-21)
dobj(fix-20, rates-22)
punct(added-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#rates

fix :: In a statement , Mr. Kennedy announced that the raise would `` fix '' the promise of a living wage made 50 years ago when the minimum wage was created -- a promise he says was broken by the Reagan administration ./.
case(statement-3, In-1)
det(statement-3, a-2)
nmod:in(announced-7, statement-3)
punct(announced-7, ,-4)
compound(Kennedy-6, Mr.-5)
nsubj(announced-7, Kennedy-6)
root(ROOT-0, announced-7)
mark(fix-13, that-8)
det(raise-10, the-9)
nsubj(fix-13, raise-10)
aux(fix-13, would-11)
punct(fix-13, ``-12)
ccomp(announced-7, fix-13)
punct(fix-13, ''-14)
det(promise-16, the-15)
nsubj(made-21, promise-16)
case(wage-20, of-17)
det(wage-20, a-18)
compound(wage-20, living-19)
nmod:of(promise-16, wage-20)
ccomp(fix-13, made-21)
nummod(years-23, 50-22)
nmod:npmod(ago-24, years-23)
advmod(made-21, ago-24)
advmod(created-30, when-25)
det(wage-28, the-26)
amod(wage-28, minimum-27)
nsubjpass(created-30, wage-28)
auxpass(created-30, was-29)
advcl(made-21, created-30)
punct(announced-7, ---31)
det(promise-33, a-32)
nmod:npmod(announced-7, promise-33)
nsubj(says-35, he-34)
acl:relcl(promise-33, says-35)
auxpass(broken-37, was-36)
ccomp(says-35, broken-37)
case(administration-41, by-38)
det(administration-41, the-39)
compound(administration-41, Reagan-40)
nmod:agent(broken-37, administration-41)
punct(announced-7, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#raise

fix :: Delta Flight 943 from Cincinnati to Jackson , Miss . , is an example of a flight `` fixed '' by schedule changes ./.
compound(Flight-2, Delta-1)
root(ROOT-0, Flight-2)
nummod(Flight-2, 943-3)
case(Cincinnati-5, from-4)
nmod:from(Flight-2, Cincinnati-5)
case(Jackson-7, to-6)
nmod:to(Flight-2, Jackson-7)
punct(Jackson-7, ,-8)
appos(Jackson-7, Miss-9)
punct(Flight-2, .-10)
punct(example-4, ,-1)
cop(example-4, is-2)
det(example-4, an-3)
root(ROOT-0, example-4)
case(flight-7, of-5)
det(flight-7, a-6)
nmod:of(example-4, flight-7)
punct(flight-7, ``-8)
acl(flight-7, fixed-9)
punct(flight-7, ''-10)
case(changes-13, by-11)
compound(changes-13, schedule-12)
nmod:by(flight-7, changes-13)
punct(example-4, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fix :: Florida Attorney General Bob Butterworth said that past and present officials of Velda Farms Dairy of Miami , formerly a unit of closely held Dallas-based Southland , acknowledged that Velda conspired with other milk companies to fix prices in the sale of milk to Florida public schools ./.
compound(Butterworth-5, Florida-1)
compound(Butterworth-5, Attorney-2)
compound(Butterworth-5, General-3)
compound(Butterworth-5, Bob-4)
nsubj(said-6, Butterworth-5)
root(ROOT-0, said-6)
mark(acknowledged-28, that-7)
amod(officials-11, past-8)
cc(past-8, and-9)
conj:and(past-8, present-10)
amod(officials-11, present-10)
nsubj(acknowledged-28, officials-11)
case(Dairy-15, of-12)
compound(Dairy-15, Velda-13)
compound(Dairy-15, Farms-14)
nmod:of(officials-11, Dairy-15)
case(Miami-17, of-16)
nmod:of(Dairy-15, Miami-17)
punct(Dairy-15, ,-18)
advmod(unit-21, formerly-19)
det(unit-21, a-20)
appos(Dairy-15, unit-21)
case(Southland-26, of-22)
advmod(held-24, closely-23)
amod(Southland-26, held-24)
amod(Southland-26, Dallas-based-25)
nmod:of(unit-21, Southland-26)
punct(Dairy-15, ,-27)
ccomp(said-6, acknowledged-28)
mark(conspired-31, that-29)
nsubj(conspired-31, Velda-30)
nsubj:xsubj(fix-37, Velda-30)
ccomp(acknowledged-28, conspired-31)
case(companies-35, with-32)
amod(companies-35, other-33)
compound(companies-35, milk-34)
nmod:with(conspired-31, companies-35)
mark(fix-37, to-36)
xcomp(conspired-31, fix-37)
dobj(fix-37, prices-38)
case(sale-41, in-39)
det(sale-41, the-40)
nmod:in(fix-37, sale-41)
case(milk-43, of-42)
nmod:of(sale-41, milk-43)
case(schools-47, to-44)
compound(schools-47, Florida-45)
compound(schools-47, public-46)
nmod:to(sale-41, schools-47)
punct(said-6, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#prices

fix :: Investors , analysts and members of the local banking community generally view Mr. Hillas as an able manager with a solid knowledge of the capital markets , a keen eye for evaluating banking companies and their businesses , and a knack for helping fix ailing firms ./.
nsubj(view-12, Investors-1)
punct(Investors-1, ,-2)
conj:and(Investors-1, analysts-3)
nsubj(view-12, analysts-3)
cc(Investors-1, and-4)
conj:and(Investors-1, members-5)
nsubj(view-12, members-5)
case(community-10, of-6)
det(community-10, the-7)
amod(community-10, local-8)
compound(community-10, banking-9)
nmod:of(members-5, community-10)
advmod(view-12, generally-11)
root(ROOT-0, view-12)
compound(Hillas-14, Mr.-13)
dobj(view-12, Hillas-14)
case(manager-18, as-15)
det(manager-18, an-16)
amod(manager-18, able-17)
nmod:as(view-12, manager-18)
case(knowledge-22, with-19)
det(knowledge-22, a-20)
amod(knowledge-22, solid-21)
nmod:with(manager-18, knowledge-22)
case(markets-26, of-23)
det(markets-26, the-24)
compound(markets-26, capital-25)
nmod:of(knowledge-22, markets-26)
punct(knowledge-22, ,-27)
det(eye-30, a-28)
amod(eye-30, keen-29)
nmod:with(manager-18, eye-30)
conj:and(knowledge-22, eye-30)
mark(evaluating-32, for-31)
acl(eye-30, evaluating-32)
compound(companies-34, banking-33)
dobj(evaluating-32, companies-34)
cc(companies-34, and-35)
nmod:poss(businesses-37, their-36)
dobj(evaluating-32, businesses-37)
conj:and(companies-34, businesses-37)
punct(knowledge-22, ,-38)
cc(knowledge-22, and-39)
det(knack-41, a-40)
nmod:with(manager-18, knack-41)
conj:and(knowledge-22, knack-41)
mark(helping-43, for-42)
acl(knack-41, helping-43)
ccomp(helping-43, fix-44)
amod(firms-46, ailing-45)
dobj(fix-44, firms-46)
punct(view-12, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#firms

fix :: -- The justices refused to hear an antitrust appeal by actor Paul Newman and director George Roy Hill in a suit charging that MCA Inc. and its Universal City Studios Inc. unit conspired to fix the percentage of film revenue paid to artists ./.
punct(refused-4, ---1)
det(justices-3, The-2)
nsubj(refused-4, justices-3)
nsubj:xsubj(hear-6, justices-3)
root(ROOT-0, refused-4)
mark(hear-6, to-5)
xcomp(refused-4, hear-6)
det(appeal-9, an-7)
amod(appeal-9, antitrust-8)
dobj(hear-6, appeal-9)
case(Newman-13, by-10)
compound(Newman-13, actor-11)
compound(Newman-13, Paul-12)
nmod:by(appeal-9, Newman-13)
cc(Newman-13, and-14)
compound(Hill-18, director-15)
compound(Hill-18, George-16)
compound(Hill-18, Roy-17)
nmod:by(appeal-9, Hill-18)
conj:and(Newman-13, Hill-18)
case(suit-21, in-19)
det(suit-21, a-20)
nmod:in(appeal-9, suit-21)
acl(suit-21, charging-22)
mark(conspired-33, that-23)
compound(Inc.-25, MCA-24)
nsubj(conspired-33, Inc.-25)
nsubj:xsubj(fix-35, Inc.-25)
cc(Inc.-25, and-26)
nmod:poss(unit-32, its-27)
amod(unit-32, Universal-28)
compound(unit-32, City-29)
compound(unit-32, Studios-30)
compound(unit-32, Inc.-31)
conj:and(Inc.-25, unit-32)
nsubj(conspired-33, unit-32)
nsubj:xsubj(fix-35, unit-32)
ccomp(charging-22, conspired-33)
mark(fix-35, to-34)
xcomp(conspired-33, fix-35)
det(percentage-37, the-36)
dobj(fix-35, percentage-37)
case(revenue-40, of-38)
compound(revenue-40, film-39)
nmod:of(percentage-37, revenue-40)
acl(revenue-40, paid-41)
case(artists-43, to-42)
nmod:to(paid-41, artists-43)
punct(refused-4, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#revenue

fix :: Details of the plan have n't been fixed , but the outline calls for shareholders in both banks to exchange their stock for shares in the new bank on a basis of parity ./.
nsubjpass(fixed-8, Details-1)
case(plan-4, of-2)
det(plan-4, the-3)
nmod:of(Details-1, plan-4)
aux(fixed-8, have-5)
neg(fixed-8, n't-6)
auxpass(fixed-8, been-7)
root(ROOT-0, fixed-8)
punct(fixed-8, ,-9)
cc(fixed-8, but-10)
det(outline-12, the-11)
nsubj(calls-13, outline-12)
nsubj:xsubj(exchange-20, outline-12)
conj:but(fixed-8, calls-13)
case(shareholders-15, for-14)
nmod:for(calls-13, shareholders-15)
case(banks-18, in-16)
det(banks-18, both-17)
nmod:in(shareholders-15, banks-18)
mark(exchange-20, to-19)
xcomp(calls-13, exchange-20)
nmod:poss(stock-22, their-21)
dobj(exchange-20, stock-22)
case(shares-24, for-23)
nmod:for(exchange-20, shares-24)
case(bank-28, in-25)
det(bank-28, the-26)
amod(bank-28, new-27)
nmod:in(shares-24, bank-28)
case(basis-31, on-29)
det(basis-31, a-30)
nmod:on(exchange-20, basis-31)
case(parity-33, of-32)
nmod:of(basis-31, parity-33)
punct(fixed-8, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#details

fix :: Mr. Guy , a N.M. Rothschild & Sons director , said his bank and four other London bullion houses -- Mocatta & Goldsmid Ltd . , Sharps Pixley Ltd . , Samuel Montagu & Co. and Mase Wespac Ltd . -- will continue to carry out the 60-year-old tradition of fixing the price of gold twice a day ./.
compound(Guy-2, Mr.-1)
nsubj(said-11, Guy-2)
punct(Guy-2, ,-3)
det(Rothschild-6, a-4)
compound(Rothschild-6, N.M.-5)
appos(Guy-2, Rothschild-6)
cc(Rothschild-6, &-7)
compound(director-9, Sons-8)
appos(Guy-2, director-9)
conj:&(Rothschild-6, director-9)
punct(Guy-2, ,-10)
root(ROOT-0, said-11)
nmod:poss(bank-13, his-12)
dobj(said-11, bank-13)
cc(bank-13, and-14)
nummod(houses-19, four-15)
amod(houses-19, other-16)
compound(houses-19, London-17)
compound(houses-19, bullion-18)
dobj(said-11, houses-19)
conj:and(bank-13, houses-19)
punct(bank-13, ---20)
compound(Ltd-24, Mocatta-21)
cc(Mocatta-21, &-22)
conj:&(Mocatta-21, Goldsmid-23)
compound(Ltd-24, Goldsmid-23)
dep(bank-13, Ltd-24)
punct(said-11, .-25)
punct(Ltd-4, ,-1)
compound(Ltd-4, Sharps-2)
compound(Ltd-4, Pixley-3)
root(ROOT-0, Ltd-4)
punct(Ltd-4, .-5)
root(ROOT-0, ,-1)
compound(Montagu-3, Samuel-2)
root(,-1, Montagu-3)
cc(Montagu-3, &-4)
root(,-1, Co.-5)
conj:&(Montagu-3, Co.-5)
cc(Montagu-3, and-6)
compound(Ltd-9, Mase-7)
compound(Ltd-9, Wespac-8)
root(,-1, Ltd-9)
conj:and(Montagu-3, Ltd-9)
punct(Montagu-3, .-10)
punct(continue-3, ---1)
aux(continue-3, will-2)
root(ROOT-0, continue-3)
mark(carry-5, to-4)
xcomp(continue-3, carry-5)
compound:prt(carry-5, out-6)
det(tradition-9, the-7)
amod(tradition-9, 60-year-old-8)
dobj(carry-5, tradition-9)
mark(fixing-11, of-10)
acl(tradition-9, fixing-11)
det(price-13, the-12)
dobj(fixing-11, price-13)
case(gold-15, of-14)
nmod:of(price-13, gold-15)
advmod(day-18, twice-16)
det(day-18, a-17)
nmod:tmod(fixing-11, day-18)
punct(continue-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#gold

fix :: Ford will recall 103 , 000 1986 Aerostar , Bronco II , and Ranger SuperCab vehicles to fix an electrical problem in vehicles equipped with front power lumbar seats ./.
nsubj(recall-3, Ford-1)
aux(recall-3, will-2)
root(ROOT-0, recall-3)
dobj(recall-3, 103-4)
punct(103-4, ,-5)
compound(1986-7, 000-6)
nummod(Aerostar-8, 1986-7)
dobj(recall-3, Aerostar-8)
conj:and(103-4, Aerostar-8)
punct(103-4, ,-9)
compound(II-11, Bronco-10)
dobj(recall-3, II-11)
conj:and(103-4, II-11)
punct(103-4, ,-12)
cc(103-4, and-13)
compound(vehicles-16, Ranger-14)
compound(vehicles-16, SuperCab-15)
dobj(recall-3, vehicles-16)
conj:and(103-4, vehicles-16)
mark(fix-18, to-17)
advcl(recall-3, fix-18)
det(problem-21, an-19)
amod(problem-21, electrical-20)
dobj(fix-18, problem-21)
case(vehicles-23, in-22)
nmod:in(problem-21, vehicles-23)
acl(vehicles-23, equipped-24)
case(seats-29, with-25)
amod(seats-29, front-26)
compound(seats-29, power-27)
compound(seats-29, lumbar-28)
nmod:with(equipped-24, seats-29)
punct(recall-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#problem

fix :: The truck manufacturers , bidding on 15 , 000 trucks rather than 5 , 000 , were able to offer a better price because of the greater quantity and the ability to spread their start-up and fixed costs over a larger base ./.
det(manufacturers-3, The-1)
compound(manufacturers-3, truck-2)
root(ROOT-0, manufacturers-3)
punct(manufacturers-3, ,-4)
appos(manufacturers-3, bidding-5)
case(able-18, on-6)
nummod(able-18, 15-7)
punct(able-18, ,-8)
nummod(trucks-10, 000-9)
nsubj(able-18, trucks-10)
case(5-13, rather-11)
mwe(rather-11, than-12)
nmod:rather_than(trucks-10, 5-13)
punct(5-13, ,-14)
appos(5-13, 000-15)
punct(5-13, ,-16)
cop(able-18, were-17)
nmod:on(bidding-5, able-18)
mark(offer-20, to-19)
acl(able-18, offer-20)
det(price-23, a-21)
amod(price-23, better-22)
dobj(offer-20, price-23)
case(quantity-28, because-24)
mwe(because-24, of-25)
det(quantity-28, the-26)
amod(quantity-28, greater-27)
nmod:because_of(offer-20, quantity-28)
cc(quantity-28, and-29)
det(ability-31, the-30)
nmod:because_of(offer-20, ability-31)
conj:and(quantity-28, ability-31)
mark(spread-33, to-32)
acl(ability-31, spread-33)
nmod:poss(start-up-35, their-34)
dobj(spread-33, start-up-35)
cc(spread-33, and-36)
amod(costs-38, fixed-37)
acl(ability-31, costs-38)
conj:and(spread-33, costs-38)
case(base-42, over-39)
det(base-42, a-40)
amod(base-42, larger-41)
nmod:over(costs-38, base-42)
punct(manufacturers-3, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#costs

fix :: `` If you 're an engineer , it 's better to get out and run an air-conditioner repair company -- or fix kettles , '' a European diplomat says ./.
punct(says-29, ``-1)
mark(engineer-6, If-2)
nsubj(engineer-6, you-3)
cop(engineer-6, 're-4)
det(engineer-6, an-5)
advcl(better-10, engineer-6)
punct(better-10, ,-7)
nsubj(better-10, it-8)
cop(better-10, 's-9)
ccomp(says-29, better-10)
mark(get-12, to-11)
ccomp(better-10, get-12)
advmod(get-12, out-13)
cc(get-12, and-14)
ccomp(better-10, run-15)
conj:and(get-12, run-15)
det(company-19, an-16)
compound(company-19, air-conditioner-17)
compound(company-19, repair-18)
dobj(run-15, company-19)
punct(get-12, ---20)
cc(get-12, or-21)
ccomp(better-10, fix-22)
conj:and(get-12, fix-22)
dobj(fix-22, kettles-23)
punct(says-29, ,-24)
punct(says-29, ''-25)
det(diplomat-28, a-26)
amod(diplomat-28, European-27)
nsubj(says-29, diplomat-28)
root(ROOT-0, says-29)
punct(says-29, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#kettles

fix :: A domestic price rule will result in stable exchange rates over the long run , just as Prof. McKinnon 's proposal to fix nominal rates or put them within a band would do ./.
det(rule-4, A-1)
amod(rule-4, domestic-2)
compound(rule-4, price-3)
nsubj(result-6, rule-4)
aux(result-6, will-5)
root(ROOT-0, result-6)
case(rates-10, in-7)
amod(rates-10, stable-8)
compound(rates-10, exchange-9)
nmod:in(do-33, rates-10)
case(run-14, over-11)
det(run-14, the-12)
amod(run-14, long-13)
nmod:over(rates-10, run-14)
punct(rates-10, ,-15)
advmod(proposal-21, just-16)
case(proposal-21, as-17)
compound(McKinnon-19, Prof.-18)
nmod:poss(proposal-21, McKinnon-19)
case(McKinnon-19, 's-20)
nsubj(do-33, proposal-21)
mark(fix-23, to-22)
acl(proposal-21, fix-23)
amod(rates-25, nominal-24)
dobj(fix-23, rates-25)
cc(fix-23, or-26)
acl(proposal-21, put-27)
conj:or(fix-23, put-27)
dobj(put-27, them-28)
case(band-31, within-29)
det(band-31, a-30)
nmod:within(put-27, band-31)
aux(do-33, would-32)
ccomp(result-6, do-33)
punct(result-6, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#rates

fix :: `` If there be any fixed star in our constitutional constellation , '' the court ruled , `` it is that no official , high or petty , can prescribe what shall be orthodox in politics , nationalism , religion , or other matters of opinion . ''/''
punct(is-20, ``-1)
mark(be-4, If-2)
expl(be-4, there-3)
advcl(is-20, be-4)
det(star-7, any-5)
amod(star-7, fixed-6)
nsubj(be-4, star-7)
case(constellation-11, in-8)
nmod:poss(constellation-11, our-9)
amod(constellation-11, constitutional-10)
nmod:in(star-7, constellation-11)
punct(ruled-16, ,-12)
punct(ruled-16, ''-13)
det(court-15, the-14)
nsubj(ruled-16, court-15)
parataxis(is-20, ruled-16)
punct(ruled-16, ,-17)
punct(is-20, ``-18)
nsubj(is-20, it-19)
root(ROOT-0, is-20)
mark(prescribe-30, that-21)
neg(official-23, no-22)
nsubj(prescribe-30, official-23)
punct(official-23, ,-24)
amod(official-23, high-25)
cc(high-25, or-26)
amod(official-23, petty-27)
conj:or(high-25, petty-27)
punct(official-23, ,-28)
aux(prescribe-30, can-29)
ccomp(is-20, prescribe-30)
nsubj(orthodox-34, what-31)
aux(orthodox-34, shall-32)
cop(orthodox-34, be-33)
ccomp(prescribe-30, orthodox-34)
case(politics-36, in-35)
nmod:in(orthodox-34, politics-36)
punct(politics-36, ,-37)
nmod:in(orthodox-34, nationalism-38)
conj:or(politics-36, nationalism-38)
punct(politics-36, ,-39)
nmod:in(orthodox-34, religion-40)
conj:or(politics-36, religion-40)
punct(politics-36, ,-41)
cc(politics-36, or-42)
amod(matters-44, other-43)
nmod:in(orthodox-34, matters-44)
conj:or(politics-36, matters-44)
case(opinion-46, of-45)
nmod:of(matters-44, opinion-46)
punct(is-20, .-47)
punct(is-20, ''-48)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fix#star

fix :: Currently , the company is fixing only 200 to 300 units a day , far below TRW 's goal of 2 , 000 units a day ./.
advmod(fixing-6, Currently-1)
punct(fixing-6, ,-2)
det(company-4, the-3)
nsubj(fixing-6, company-4)
aux(fixing-6, is-5)
root(ROOT-0, fixing-6)
advmod(200-8, only-7)
dobj(fixing-6, 200-8)
case(units-11, to-9)
nummod(units-11, 300-10)
nmod:to(fixing-6, units-11)
det(day-13, a-12)
nmod:npmod(units-11, day-13)
punct(fixing-6, ,-14)
advmod(goal-19, far-15)
case(goal-19, below-16)
nmod:poss(goal-19, TRW-17)
case(TRW-17, 's-18)
nmod:below(fixing-6, goal-19)
case(units-24, of-20)
nummod(units-24, 2-21)
punct(units-24, ,-22)
nummod(units-24, 000-23)
nmod:of(goal-19, units-24)
det(day-26, a-25)
nmod:npmod(units-24, day-26)
punct(fixing-6, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#200

fix :: The Founders , however , not only indicated that the monetary unit should be a standard -LRB- that is , somehow fixed -RRB- , but also told us what that standard is by explicitly referring to the `` dollar '' in the Constitution and the Bill of Rights ./.
det(Founders-2, The-1)
nsubj(indicated-8, Founders-2)
nsubj(told-27, Founders-2)
punct(indicated-8, ,-3)
advmod(indicated-8, however-4)
punct(indicated-8, ,-5)
neg(only-7, not-6)
cc:preconj(indicated-8, only-7)
root(ROOT-0, indicated-8)
mark(standard-16, that-9)
det(unit-12, the-10)
amod(unit-12, monetary-11)
nsubj(standard-16, unit-12)
aux(standard-16, should-13)
cop(standard-16, be-14)
det(standard-16, a-15)
ccomp(indicated-8, standard-16)
punct(fixed-22, -LRB--17)
nsubjpass(fixed-22, that-18)
auxpass(fixed-22, is-19)
punct(fixed-22, ,-20)
advmod(fixed-22, somehow-21)
dep(standard-16, fixed-22)
punct(fixed-22, -RRB--23)
punct(indicated-8, ,-24)
cc(indicated-8, but-25)
advmod(told-27, also-26)
conj:and(indicated-8, told-27)
dobj(told-27, us-28)
dobj(referring-35, what-29)
det(standard-31, that-30)
nsubj(referring-35, standard-31)
cop(referring-35, is-32)
mark(referring-35, by-33)
advmod(referring-35, explicitly-34)
ccomp(told-27, referring-35)
case(dollar-39, to-36)
det(dollar-39, the-37)
punct(dollar-39, ``-38)
nmod:to(referring-35, dollar-39)
punct(referring-35, ''-40)
case(Constitution-43, in-41)
det(Constitution-43, the-42)
nmod:in(referring-35, Constitution-43)
cc(Constitution-43, and-44)
det(Bill-46, the-45)
nmod:in(referring-35, Bill-46)
conj:and(Constitution-43, Bill-46)
case(Rights-48, of-47)
nmod:of(Bill-46, Rights-48)
punct(indicated-8, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#that

fix :: `` If it is n't working , we 'll fix it , '' says Mr. Teets , promising further restructuring if the dog is n't running right in the next few years ./.
punct(says-14, ``-1)
mark(working-6, If-2)
nsubj(working-6, it-3)
aux(working-6, is-4)
neg(working-6, n't-5)
advcl(fix-10, working-6)
punct(fix-10, ,-7)
nsubj(fix-10, we-8)
aux(fix-10, 'll-9)
ccomp(says-14, fix-10)
dobj(fix-10, it-11)
punct(says-14, ,-12)
punct(says-14, ''-13)
root(ROOT-0, says-14)
compound(Teets-16, Mr.-15)
nsubj(says-14, Teets-16)
punct(says-14, ,-17)
advcl(says-14, promising-18)
amod(restructuring-20, further-19)
dobj(promising-18, restructuring-20)
mark(running-26, if-21)
det(dog-23, the-22)
nsubj(running-26, dog-23)
aux(running-26, is-24)
neg(running-26, n't-25)
advcl(promising-18, running-26)
advmod(running-26, right-27)
case(years-32, in-28)
det(years-32, the-29)
amod(years-32, next-30)
amod(years-32, few-31)
nmod:in(running-26, years-32)
punct(says-14, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#it

fix :: Mechanics have stripped one airworthy helicopter down to its skeleton for parts to fix three others ./.
nsubj(stripped-3, Mechanics-1)
aux(stripped-3, have-2)
root(ROOT-0, stripped-3)
nummod(helicopter-6, one-4)
amod(helicopter-6, airworthy-5)
dobj(stripped-3, helicopter-6)
case(skeleton-10, down-7)
case(skeleton-10, to-8)
nmod:poss(skeleton-10, its-9)
nmod:to(stripped-3, skeleton-10)
case(parts-12, for-11)
nmod:for(skeleton-10, parts-12)
mark(fix-14, to-13)
advcl(stripped-3, fix-14)
nummod(others-16, three-15)
dobj(fix-14, others-16)
punct(stripped-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#others

fix :: The West German Bundesbank 's decision to boost its rate on securities repurchase agreements by 0.25 percentage point to a fixed 4.25 % rate came as no surprise , traders said , and lent little or no support to the mark against the dollar ./.
det(Bundesbank-4, The-1)
amod(German-3, West-2)
amod(Bundesbank-4, German-3)
nmod:poss(decision-6, Bundesbank-4)
case(Bundesbank-4, 's-5)
nsubj(repurchase-13, decision-6)
nsubj(lent-34, decision-6)
mark(boost-8, to-7)
acl(decision-6, boost-8)
nmod:poss(rate-10, its-9)
dobj(boost-8, rate-10)
case(securities-12, on-11)
nmod:on(rate-10, securities-12)
root(ROOT-0, repurchase-13)
dobj(repurchase-13, agreements-14)
case(point-18, by-15)
nummod(point-18, 0.25-16)
compound(point-18, percentage-17)
nmod:by(repurchase-13, point-18)
case(rate-24, to-19)
det(rate-24, a-20)
amod(rate-24, fixed-21)
compound(%-23, 4.25-22)
amod(rate-24, %-23)
nmod:to(repurchase-13, rate-24)
dep(repurchase-13, came-25)
case(surprise-28, as-26)
neg(surprise-28, no-27)
nmod:as(came-25, surprise-28)
punct(said-31, ,-29)
nsubj(said-31, traders-30)
dep(repurchase-13, said-31)
punct(said-31, ,-32)
cc(repurchase-13, and-33)
conj:and(repurchase-13, lent-34)
amod(support-38, little-35)
cc(little-35, or-36)
conj:or(little-35, no-37)
amod(support-38, no-37)
dobj(lent-34, support-38)
case(mark-41, to-39)
det(mark-41, the-40)
nmod:to(lent-34, mark-41)
case(dollar-44, against-42)
det(dollar-44, the-43)
nmod:against(lent-34, dollar-44)
punct(repurchase-13, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#rate

fix :: We begged his mother for months to let us take him into Nha Trang and have it fixed ./.
nsubj(begged-2, We-1)
root(ROOT-0, begged-2)
nmod:poss(mother-4, his-3)
dobj(begged-2, mother-4)
case(months-6, for-5)
nmod:for(begged-2, months-6)
mark(let-8, to-7)
advcl(begged-2, let-8)
nsubj(take-10, us-9)
ccomp(let-8, take-10)
dobj(take-10, him-11)
case(Trang-14, into-12)
compound(Trang-14, Nha-13)
nmod:into(take-10, Trang-14)
cc(begged-2, and-15)
aux(fixed-18, have-16)
nsubj(fixed-18, it-17)
conj:and(begged-2, fixed-18)
punct(begged-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#it

fix :: The debentures will carry a rate that 's fixed , but can increase based on natural gas prices ./.
det(debentures-2, The-1)
nsubj(carry-4, debentures-2)
nsubj(increase-13, debentures-2)
aux(carry-4, will-3)
root(ROOT-0, carry-4)
det(rate-6, a-5)
dobj(carry-4, rate-6)
nsubjpass(fixed-9, rate-6)
ref(rate-6, that-7)
auxpass(fixed-9, 's-8)
acl:relcl(rate-6, fixed-9)
punct(carry-4, ,-10)
cc(carry-4, but-11)
aux(increase-13, can-12)
conj:but(carry-4, increase-13)
case(prices-18, based-14)
mwe(based-14, on-15)
amod(prices-18, natural-16)
compound(prices-18, gas-17)
advcl(increase-13, prices-18)
punct(carry-4, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#rate

fix :: Well , back in 1983 , a special bipartisan commission was given the assignment of `` fixing '' the Social Security system , then perceived to be headed for bankruptcy , for the next 75 years ./.
advmod(given-12, Well-1)
punct(given-12, ,-2)
advmod(1983-5, back-3)
case(1983-5, in-4)
nmod:in(given-12, 1983-5)
punct(given-12, ,-6)
det(commission-10, a-7)
amod(commission-10, special-8)
amod(commission-10, bipartisan-9)
nsubjpass(given-12, commission-10)
auxpass(given-12, was-11)
root(ROOT-0, given-12)
det(assignment-14, the-13)
dobj(given-12, assignment-14)
case(fixing-17, of-15)
punct(fixing-17, ``-16)
nmod:of(assignment-14, fixing-17)
punct(fixing-17, ''-18)
det(system-22, the-19)
compound(system-22, Social-20)
compound(system-22, Security-21)
dobj(fixing-17, system-22)
punct(fixing-17, ,-23)
advmod(perceived-25, then-24)
dep(fixing-17, perceived-25)
mark(headed-28, to-26)
auxpass(headed-28, be-27)
xcomp(perceived-25, headed-28)
case(bankruptcy-30, for-29)
nmod:for(headed-28, bankruptcy-30)
punct(fixing-17, ,-31)
case(years-36, for-32)
det(years-36, the-33)
amod(years-36, next-34)
nummod(years-36, 75-35)
nmod:for(fixing-17, years-36)
punct(given-12, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#system

fix :: Senate negotiators last week tried to persuade the House to at least include a fallback provision that would fix the problem in case Justice is right and the agreement is found unconstitutional ./.
compound(negotiators-2, Senate-1)
nsubj(tried-5, negotiators-2)
nsubj:xsubj(persuade-7, negotiators-2)
amod(week-4, last-3)
nmod:tmod(tried-5, week-4)
csubj(right-26, tried-5)
mark(persuade-7, to-6)
xcomp(tried-5, persuade-7)
det(House-9, the-8)
dobj(persuade-7, House-9)
nsubj:xsubj(include-13, House-9)
mark(include-13, to-10)
advmod(include-13, at-11)
mwe(at-11, least-12)
xcomp(persuade-7, include-13)
det(provision-16, a-14)
amod(provision-16, fallback-15)
dobj(include-13, provision-16)
nsubj(fix-19, provision-16)
ref(provision-16, that-17)
aux(fix-19, would-18)
acl:relcl(provision-16, fix-19)
det(problem-21, the-20)
dobj(fix-19, problem-21)
case(Justice-24, in-22)
compound(Justice-24, case-23)
nmod:in(fix-19, Justice-24)
cop(right-26, is-25)
root(ROOT-0, right-26)
cc(right-26, and-27)
det(agreement-29, the-28)
nsubjpass(found-31, agreement-29)
auxpass(found-31, is-30)
conj:and(right-26, found-31)
xcomp(found-31, unconstitutional-32)
punct(right-26, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#problem

fix :: He arranged for a new working part to be airlifted in 12 hours to Houston , fixed the dish , and the remainder of the tournament was carried by ESPN ./.
nsubj(arranged-2, He-1)
root(ROOT-0, arranged-2)
case(part-7, for-3)
det(part-7, a-4)
amod(part-7, new-5)
amod(part-7, working-6)
nmod:for(arranged-2, part-7)
mark(airlifted-10, to-8)
auxpass(airlifted-10, be-9)
acl(part-7, airlifted-10)
case(hours-13, in-11)
nummod(hours-13, 12-12)
nmod:in(airlifted-10, hours-13)
case(Houston-15, to-14)
nmod:to(hours-13, Houston-15)
punct(part-7, ,-16)
acl(part-7, fixed-17)
det(dish-19, the-18)
dobj(fixed-17, dish-19)
punct(arranged-2, ,-20)
cc(arranged-2, and-21)
det(remainder-23, the-22)
nsubjpass(carried-28, remainder-23)
case(tournament-26, of-24)
det(tournament-26, the-25)
nmod:of(remainder-23, tournament-26)
auxpass(carried-28, was-27)
conj:and(arranged-2, carried-28)
case(ESPN-30, by-29)
nmod:agent(carried-28, ESPN-30)
punct(arranged-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#dish

fix :: But the commission 's most controversial recommendation by far would remove the FAA from the Transportation Department and re-establish it as the independent and renamed Federal Aviation Authority , complete with an administrator and a `` safety czar , '' both of whom would serve fixed terms of seven years ./.
cc(remove-11, But-1)
det(commission-3, the-2)
nmod:poss(recommendation-7, commission-3)
case(commission-3, 's-4)
advmod(controversial-6, most-5)
amod(recommendation-7, controversial-6)
nsubj(remove-11, recommendation-7)
nsubj(re-establish-19, recommendation-7)
nsubj(complete-30, recommendation-7)
case(far-9, by-8)
advmod(remove-11, far-9)
aux(remove-11, would-10)
root(ROOT-0, remove-11)
det(FAA-13, the-12)
dobj(remove-11, FAA-13)
case(Department-17, from-14)
det(Department-17, the-15)
compound(Department-17, Transportation-16)
nmod:from(remove-11, Department-17)
cc(remove-11, and-18)
conj:and(remove-11, re-establish-19)
dobj(re-establish-19, it-20)
case(Authority-28, as-21)
det(Authority-28, the-22)
amod(Authority-28, independent-23)
cc(independent-23, and-24)
conj:and(independent-23, renamed-25)
amod(Authority-28, renamed-25)
compound(Authority-28, Federal-26)
compound(Authority-28, Aviation-27)
nmod:as(re-establish-19, Authority-28)
punct(remove-11, ,-29)
conj:and(remove-11, complete-30)
case(administrator-33, with-31)
det(administrator-33, an-32)
nmod:with(complete-30, administrator-33)
cc(administrator-33, and-34)
det(czar-38, a-35)
punct(czar-38, ``-36)
compound(czar-38, safety-37)
nmod:with(complete-30, czar-38)
conj:and(administrator-33, czar-38)
punct(remove-11, ,-39)
punct(remove-11, ''-40)
nsubj(serve-45, both-41)
case(whom-43, of-42)
nmod:of(both-41, whom-43)
aux(serve-45, would-44)
ccomp(remove-11, serve-45)
amod(terms-47, fixed-46)
dobj(serve-45, terms-47)
case(years-50, of-48)
nummod(years-50, seven-49)
nmod:of(terms-47, years-50)
punct(remove-11, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#terms

fix :: Edward A. Brennan , chairman and chief executive officer , repeated to analysts something he said he recently told his managers about Sears 's businesses: `` If it is n't achieving its expected return on capital , their mandate is to fix it in a timely fashion , or exit the position and redeploy assets . ''/''
compound(Brennan-3, Edward-1)
compound(Brennan-3, A.-2)
nsubj(repeated-11, Brennan-3)
punct(Brennan-3, ,-4)
appos(Brennan-3, chairman-5)
cc(chairman-5, and-6)
amod(officer-9, chief-7)
compound(officer-9, executive-8)
appos(Brennan-3, officer-9)
conj:and(chairman-5, officer-9)
punct(Brennan-3, ,-10)
root(ROOT-0, repeated-11)
case(analysts-13, to-12)
nmod:to(repeated-11, analysts-13)
dobj(repeated-11, something-14)
nsubj(said-16, he-15)
acl:relcl(something-14, said-16)
nsubj(told-19, he-17)
advmod(told-19, recently-18)
ccomp(said-16, told-19)
nmod:poss(managers-21, his-20)
dobj(told-19, managers-21)
case(businesses-25, about-22)
nmod:poss(businesses-25, Sears-23)
case(Sears-23, 's-24)
nmod:about(told-19, businesses-25)
punct(repeated-11, :-26)
punct(repeated-11, ``-27)
mark(achieving-32, If-28)
nsubj(achieving-32, it-29)
aux(achieving-32, is-30)
neg(achieving-32, n't-31)
advcl(is-41, achieving-32)
nmod:poss(return-35, its-33)
amod(return-35, expected-34)
dobj(achieving-32, return-35)
case(capital-37, on-36)
nmod:on(return-35, capital-37)
punct(is-41, ,-38)
nmod:poss(mandate-40, their-39)
nsubj(is-41, mandate-40)
nsubj:xsubj(fix-43, mandate-40)
ccomp(repeated-11, is-41)
mark(fix-43, to-42)
xcomp(is-41, fix-43)
dobj(fix-43, it-44)
case(fashion-48, in-45)
det(fashion-48, a-46)
amod(fashion-48, timely-47)
nmod:in(fix-43, fashion-48)
punct(fashion-48, ,-49)
cc(fashion-48, or-50)
compound(position-53, exit-51)
det(position-53, the-52)
nmod:in(fix-43, position-53)
conj:or(fashion-48, position-53)
cc(fix-43, and-54)
xcomp(is-41, redeploy-55)
conj:and(fix-43, redeploy-55)
dobj(redeploy-55, assets-56)
punct(repeated-11, .-57)
punct(repeated-11, ''-58)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fix#it

fix :: The jump in rates in the bond market last week means many lenders will increase fixed mortgage rates further this week ./.
det(jump-2, The-1)
nsubj(means-11, jump-2)
case(rates-4, in-3)
nmod:in(jump-2, rates-4)
case(market-8, in-5)
det(market-8, the-6)
compound(market-8, bond-7)
nmod:in(jump-2, market-8)
amod(week-10, last-9)
nmod:tmod(means-11, week-10)
root(ROOT-0, means-11)
amod(lenders-13, many-12)
nsubj(increase-15, lenders-13)
aux(increase-15, will-14)
ccomp(means-11, increase-15)
amod(rates-18, fixed-16)
compound(rates-18, mortgage-17)
dobj(increase-15, rates-18)
advmod(week-21, further-19)
det(week-21, this-20)
nmod:tmod(increase-15, week-21)
punct(means-11, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#rates

fix :: Automatic transmissions of all makes are sometimes mis-shifted by careless drivers , it says , adding that its later models were n't fixed , just refined ./.
amod(transmissions-2, Automatic-1)
nsubjpass(mis-shifted-8, transmissions-2)
case(makes-5, of-3)
det(makes-5, all-4)
nmod:of(transmissions-2, makes-5)
auxpass(mis-shifted-8, are-6)
advmod(mis-shifted-8, sometimes-7)
root(ROOT-0, mis-shifted-8)
case(drivers-11, by-9)
amod(drivers-11, careless-10)
nmod:agent(mis-shifted-8, drivers-11)
punct(says-14, ,-12)
nsubj(says-14, it-13)
parataxis(mis-shifted-8, says-14)
punct(says-14, ,-15)
xcomp(mis-shifted-8, adding-16)
mark(fixed-23, that-17)
nmod:poss(models-20, its-18)
amod(models-20, later-19)
nsubjpass(fixed-23, models-20)
auxpass(fixed-23, were-21)
neg(fixed-23, n't-22)
ccomp(adding-16, fixed-23)
punct(fixed-23, ,-24)
advmod(refined-26, just-25)
dep(fixed-23, refined-26)
punct(mis-shifted-8, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#models

fix :: These grants are the public finance equivalent of a lottery for state and local governments that continually fix the odds in their favor of obtaining one ./.
det(grants-2, These-1)
nsubj(equivalent-7, grants-2)
cop(equivalent-7, are-3)
det(equivalent-7, the-4)
amod(equivalent-7, public-5)
compound(equivalent-7, finance-6)
root(ROOT-0, equivalent-7)
case(lottery-10, of-8)
det(lottery-10, a-9)
nmod:of(equivalent-7, lottery-10)
case(governments-15, for-11)
compound(governments-15, state-12)
cc(state-12, and-13)
conj:and(state-12, local-14)
compound(governments-15, local-14)
nmod:for(lottery-10, governments-15)
nsubj(fix-18, governments-15)
ref(governments-15, that-16)
advmod(fix-18, continually-17)
acl:relcl(governments-15, fix-18)
det(odds-20, the-19)
dobj(fix-18, odds-20)
case(favor-23, in-21)
nmod:poss(favor-23, their-22)
nmod:in(odds-20, favor-23)
mark(obtaining-25, of-24)
acl(favor-23, obtaining-25)
dobj(obtaining-25, one-26)
punct(equivalent-7, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#odds

fix :: The U.S. sales arm of Honda Motor Co. of Japan said it is recalling approximately 66 , 000 Honda Prelude cars to fix a defect that could cause smoke or fire under the hood ./.
det(arm-4, The-1)
compound(arm-4, U.S.-2)
compound(arm-4, sales-3)
nsubj(said-11, arm-4)
case(Co.-8, of-5)
compound(Co.-8, Honda-6)
compound(Co.-8, Motor-7)
nmod:of(arm-4, Co.-8)
case(Japan-10, of-9)
nmod:of(Co.-8, Japan-10)
root(ROOT-0, said-11)
nsubj(recalling-14, it-12)
aux(recalling-14, is-13)
ccomp(said-11, recalling-14)
advmod(66-16, approximately-15)
dobj(recalling-14, 66-16)
punct(66-16, ,-17)
nummod(cars-21, 000-18)
compound(cars-21, Honda-19)
compound(cars-21, Prelude-20)
appos(66-16, cars-21)
mark(fix-23, to-22)
acl(cars-21, fix-23)
det(defect-25, a-24)
dobj(fix-23, defect-25)
nsubj(cause-28, defect-25)
ref(defect-25, that-26)
aux(cause-28, could-27)
acl:relcl(defect-25, cause-28)
dobj(cause-28, smoke-29)
cc(smoke-29, or-30)
dobj(cause-28, fire-31)
conj:or(smoke-29, fire-31)
case(hood-34, under-32)
det(hood-34, the-33)
nmod:under(cause-28, hood-34)
punct(said-11, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#defect

fix :: Because exchange rates were securely fixed , the strength of international arbitrage in markets for tradable goods was remarkable ./.
mark(fixed-6, Because-1)
compound(rates-3, exchange-2)
nsubjpass(fixed-6, rates-3)
auxpass(fixed-6, were-4)
advmod(fixed-6, securely-5)
advcl(remarkable-19, fixed-6)
punct(remarkable-19, ,-7)
det(strength-9, the-8)
nsubj(remarkable-19, strength-9)
case(arbitrage-12, of-10)
amod(arbitrage-12, international-11)
nmod:of(strength-9, arbitrage-12)
case(markets-14, in-13)
nmod:in(strength-9, markets-14)
case(goods-17, for-15)
amod(goods-17, tradable-16)
nmod:for(markets-14, goods-17)
cop(remarkable-19, was-18)
root(ROOT-0, remarkable-19)
punct(remarkable-19, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#rates

fix :: A group of containerized-waste customers charged that Waste Management Inc. and Browning-Ferris Industries Inc. conspired on a nationwide basis to fix prices for container-refuse service ./.
det(group-2, A-1)
nsubj(charged-6, group-2)
case(customers-5, of-3)
compound(customers-5, containerized-waste-4)
nmod:of(group-2, customers-5)
root(ROOT-0, charged-6)
mark(conspired-15, that-7)
compound(Inc.-10, Waste-8)
compound(Inc.-10, Management-9)
nsubj(conspired-15, Inc.-10)
cc(Inc.-10, and-11)
compound(Inc.-14, Browning-Ferris-12)
compound(Inc.-14, Industries-13)
conj:and(Inc.-10, Inc.-14)
nsubj(conspired-15, Inc.-14)
ccomp(charged-6, conspired-15)
case(basis-19, on-16)
det(basis-19, a-17)
amod(basis-19, nationwide-18)
nmod:on(conspired-15, basis-19)
mark(fix-21, to-20)
acl(basis-19, fix-21)
dobj(fix-21, prices-22)
case(service-25, for-23)
compound(service-25, container-refuse-24)
nmod:for(fix-21, service-25)
punct(charged-6, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#prices

fix :: So far this year , investors have snapped up $ 2.12 billion of Eurobonds carrying Japanese equity warrants ; warrants let investors buy an issuer 's stock at a fixed price within a set period ./.
advmod(far-2, So-1)
advmod(snapped-8, far-2)
det(year-4, this-3)
nmod:tmod(snapped-8, year-4)
punct(snapped-8, ,-5)
nsubj(snapped-8, investors-6)
aux(snapped-8, have-7)
root(ROOT-0, snapped-8)
compound:prt(snapped-8, up-9)
dobj(snapped-8, $-10)
compound(billion-12, 2.12-11)
nummod($-10, billion-12)
case(Eurobonds-14, of-13)
nmod:of($-10, Eurobonds-14)
acl(Eurobonds-14, carrying-15)
amod(warrants-18, Japanese-16)
compound(warrants-18, equity-17)
dobj(carrying-15, warrants-18)
punct(snapped-8, ;-19)
nsubj(let-21, warrants-20)
parataxis(snapped-8, let-21)
nsubj(buy-23, investors-22)
ccomp(let-21, buy-23)
det(issuer-25, an-24)
nmod:poss(stock-27, issuer-25)
case(issuer-25, 's-26)
dobj(buy-23, stock-27)
case(price-31, at-28)
det(price-31, a-29)
amod(price-31, fixed-30)
nmod:at(buy-23, price-31)
case(period-35, within-32)
det(period-35, a-33)
compound(period-35, set-34)
nmod:within(buy-23, period-35)
punct(snapped-8, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#price

fix :: Brokerage rates are fixed by the finance ministry , so discount brokerage is n't possible , unlike London where the fixed commissions were abolished in 1986 ./.
compound(rates-2, Brokerage-1)
nsubjpass(fixed-4, rates-2)
auxpass(fixed-4, are-3)
root(ROOT-0, fixed-4)
case(ministry-8, by-5)
det(ministry-8, the-6)
compound(ministry-8, finance-7)
nmod:agent(fixed-4, ministry-8)
punct(fixed-4, ,-9)
advmod(possible-15, so-10)
amod(brokerage-12, discount-11)
nsubj(possible-15, brokerage-12)
cop(possible-15, is-13)
neg(possible-15, n't-14)
advcl(fixed-4, possible-15)
punct(fixed-4, ,-16)
case(London-18, unlike-17)
nmod:unlike(fixed-4, London-18)
advmod(abolished-24, where-19)
det(commissions-22, the-20)
amod(commissions-22, fixed-21)
nsubjpass(abolished-24, commissions-22)
auxpass(abolished-24, were-23)
acl:relcl(London-18, abolished-24)
case(1986-26, in-25)
nmod:in(abolished-24, 1986-26)
punct(fixed-4, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#rates

fix :: Compact disk players are comparatively simple , mostly a motor to spin the disk and a fixed laser to read it ./.
amod(players-3, Compact-1)
compound(players-3, disk-2)
nsubj(simple-6, players-3)
cop(simple-6, are-4)
advmod(simple-6, comparatively-5)
root(ROOT-0, simple-6)
punct(simple-6, ,-7)
advmod(motor-10, mostly-8)
det(motor-10, a-9)
appos(simple-6, motor-10)
mark(spin-12, to-11)
acl(motor-10, spin-12)
det(disk-14, the-13)
dobj(spin-12, disk-14)
cc(motor-10, and-15)
det(laser-18, a-16)
amod(laser-18, fixed-17)
appos(simple-6, laser-18)
conj:and(motor-10, laser-18)
mark(read-20, to-19)
acl(laser-18, read-20)
dobj(read-20, it-21)
punct(simple-6, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#laser

fix :: But unit trusts -- unmanaged portfolios with a fixed set of securities , often municipal bonds -- have slipped through the regulatory cracks ./.
cc(slipped-19, But-1)
compound(trusts-3, unit-2)
nsubj(slipped-19, trusts-3)
punct(portfolios-6, ---4)
amod(portfolios-6, unmanaged-5)
dep(trusts-3, portfolios-6)
case(set-10, with-7)
det(set-10, a-8)
amod(set-10, fixed-9)
nmod:with(portfolios-6, set-10)
case(securities-12, of-11)
nmod:of(set-10, securities-12)
punct(portfolios-6, ,-13)
advmod(bonds-16, often-14)
amod(bonds-16, municipal-15)
appos(portfolios-6, bonds-16)
punct(portfolios-6, ---17)
aux(slipped-19, have-18)
root(ROOT-0, slipped-19)
case(cracks-23, through-20)
det(cracks-23, the-21)
amod(cracks-23, regulatory-22)
nmod:through(slipped-19, cracks-23)
punct(slipped-19, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#set

fix :: When federal Medicare officials fixed rates for hospital reimbursements five years ago , executives at 3M and Abbott Laboratories separately began to worry about how their sales to hospitals would be affected ./.
advmod(fixed-5, When-1)
amod(officials-4, federal-2)
compound(officials-4, Medicare-3)
nsubj(fixed-5, officials-4)
advcl(began-21, fixed-5)
dobj(fixed-5, rates-6)
case(reimbursements-9, for-7)
compound(reimbursements-9, hospital-8)
nmod:for(rates-6, reimbursements-9)
nummod(years-11, five-10)
nmod:npmod(ago-12, years-11)
advmod(fixed-5, ago-12)
punct(began-21, ,-13)
nsubj(began-21, executives-14)
nsubj:xsubj(worry-23, executives-14)
case(3M-16, at-15)
nmod:at(executives-14, 3M-16)
cc(3M-16, and-17)
compound(separately-20, Abbott-18)
compound(separately-20, Laboratories-19)
nmod:at(executives-14, separately-20)
conj:and(3M-16, separately-20)
root(ROOT-0, began-21)
mark(worry-23, to-22)
xcomp(began-21, worry-23)
mark(affected-32, about-24)
advmod(affected-32, how-25)
nmod:poss(sales-27, their-26)
nsubjpass(affected-32, sales-27)
case(hospitals-29, to-28)
nmod:to(sales-27, hospitals-29)
aux(affected-32, would-30)
auxpass(affected-32, be-31)
advcl(worry-23, affected-32)
punct(began-21, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#rates

fix :: Because exchange rates were securely fixed , the strength of international arbitrage in markets for tradable goods was remarkable ./.
mark(fixed-6, Because-1)
compound(rates-3, exchange-2)
nsubjpass(fixed-6, rates-3)
auxpass(fixed-6, were-4)
advmod(fixed-6, securely-5)
advcl(remarkable-19, fixed-6)
punct(remarkable-19, ,-7)
det(strength-9, the-8)
nsubj(remarkable-19, strength-9)
case(arbitrage-12, of-10)
amod(arbitrage-12, international-11)
nmod:of(strength-9, arbitrage-12)
case(markets-14, in-13)
nmod:in(strength-9, markets-14)
case(goods-17, for-15)
amod(goods-17, tradable-16)
nmod:for(markets-14, goods-17)
cop(remarkable-19, was-18)
root(ROOT-0, remarkable-19)
punct(remarkable-19, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#rates

fix :: But , according to the EC Commission , the GATT panel agreed with the EC 's contention that Japan 's monitoring has the effect of improperly fixing prices paid by third-country users ./.
cc(agreed-12, But-1)
punct(agreed-12, ,-2)
case(Commission-7, according-3)
mwe(according-3, to-4)
det(Commission-7, the-5)
compound(Commission-7, EC-6)
nmod:according_to(agreed-12, Commission-7)
punct(agreed-12, ,-8)
det(panel-11, the-9)
compound(panel-11, GATT-10)
nsubj(agreed-12, panel-11)
root(ROOT-0, agreed-12)
case(contention-17, with-13)
det(EC-15, the-14)
nmod:poss(contention-17, EC-15)
case(EC-15, 's-16)
nmod:with(agreed-12, contention-17)
mark(has-22, that-18)
nmod:poss(monitoring-21, Japan-19)
case(Japan-19, 's-20)
nsubj(has-22, monitoring-21)
ccomp(contention-17, has-22)
det(effect-24, the-23)
dobj(has-22, effect-24)
case(prices-28, of-25)
advmod(fixing-27, improperly-26)
amod(prices-28, fixing-27)
nmod:of(effect-24, prices-28)
acl(prices-28, paid-29)
case(users-32, by-30)
amod(users-32, third-country-31)
nmod:by(paid-29, users-32)
punct(agreed-12, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#prices

fix :: It is for this reason that the advocates of a gold or commodity standard want to tie the dollar to a fixed price in relation to gold or other metals -- a horizontal restraint ./.
nsubj(reason-5, It-1)
cop(reason-5, is-2)
case(reason-5, for-3)
det(reason-5, this-4)
root(ROOT-0, reason-5)
mark(want-15, that-6)
det(advocates-8, the-7)
nsubj(want-15, advocates-8)
nsubj:xsubj(tie-17, advocates-8)
case(standard-14, of-9)
det(standard-14, a-10)
compound(standard-14, gold-11)
cc(gold-11, or-12)
conj:or(gold-11, commodity-13)
compound(standard-14, commodity-13)
nmod:of(advocates-8, standard-14)
ccomp(reason-5, want-15)
mark(tie-17, to-16)
xcomp(want-15, tie-17)
det(dollar-19, the-18)
dobj(tie-17, dollar-19)
case(price-23, to-20)
det(price-23, a-21)
amod(price-23, fixed-22)
nmod:to(tie-17, price-23)
case(relation-25, in-24)
nmod:in(tie-17, relation-25)
case(gold-27, to-26)
nmod:to(relation-25, gold-27)
cc(gold-27, or-28)
amod(metals-30, other-29)
nmod:to(relation-25, metals-30)
conj:or(gold-27, metals-30)
punct(reason-5, ---31)
det(restraint-34, a-32)
amod(restraint-34, horizontal-33)
dep(reason-5, restraint-34)
punct(reason-5, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#price

fix :: Sir Nicholas , who presided over many changes at the exchange , helped lay the foundation for the `` Big Bang '' deregulation of Britain 's securities markets by agreeing to end fixed commissions and other rules ./.
compound(Nicholas-2, Sir-1)
nsubj(presided-5, Nicholas-2)
nsubj(helped-13, Nicholas-2)
punct(Nicholas-2, ,-3)
ref(Nicholas-2, who-4)
acl:relcl(Nicholas-2, presided-5)
case(changes-8, over-6)
amod(changes-8, many-7)
nmod:over(presided-5, changes-8)
case(exchange-11, at-9)
det(exchange-11, the-10)
nmod:at(changes-8, exchange-11)
punct(Nicholas-2, ,-12)
root(ROOT-0, helped-13)
ccomp(helped-13, lay-14)
det(foundation-16, the-15)
dobj(lay-14, foundation-16)
case(deregulation-23, for-17)
det(deregulation-23, the-18)
punct(deregulation-23, ``-19)
amod(deregulation-23, Big-20)
compound(deregulation-23, Bang-21)
punct(deregulation-23, ''-22)
nmod:for(lay-14, deregulation-23)
case(markets-28, of-24)
nmod:poss(markets-28, Britain-25)
case(Britain-25, 's-26)
compound(markets-28, securities-27)
nmod:of(deregulation-23, markets-28)
mark(agreeing-30, by-29)
advcl(lay-14, agreeing-30)
mark(end-32, to-31)
xcomp(agreeing-30, end-32)
amod(commissions-34, fixed-33)
dobj(end-32, commissions-34)
cc(commissions-34, and-35)
amod(rules-37, other-36)
dobj(end-32, rules-37)
conj:and(commissions-34, rules-37)
punct(helped-13, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#commissions

fix :: A group of containerized-waste customers charged that Waste Management Inc. and Browning-Ferris Industries Inc. conspired on a nationwide basis to fix prices for container-refuse service ./.
det(group-2, A-1)
nsubj(charged-6, group-2)
case(customers-5, of-3)
compound(customers-5, containerized-waste-4)
nmod:of(group-2, customers-5)
root(ROOT-0, charged-6)
mark(conspired-15, that-7)
compound(Inc.-10, Waste-8)
compound(Inc.-10, Management-9)
nsubj(conspired-15, Inc.-10)
cc(Inc.-10, and-11)
compound(Inc.-14, Browning-Ferris-12)
compound(Inc.-14, Industries-13)
conj:and(Inc.-10, Inc.-14)
nsubj(conspired-15, Inc.-14)
ccomp(charged-6, conspired-15)
case(basis-19, on-16)
det(basis-19, a-17)
amod(basis-19, nationwide-18)
nmod:on(conspired-15, basis-19)
mark(fix-21, to-20)
acl(basis-19, fix-21)
dobj(fix-21, prices-22)
case(service-25, for-23)
compound(service-25, container-refuse-24)
nmod:for(fix-21, service-25)
punct(charged-6, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#prices

fix :: The company did n't fix the problems fast enough ./.
det(company-2, The-1)
nsubj(fix-5, company-2)
aux(fix-5, did-3)
neg(fix-5, n't-4)
root(ROOT-0, fix-5)
det(problems-7, the-6)
dobj(fix-5, problems-7)
advmod(enough-9, fast-8)
advmod(fix-5, enough-9)
punct(fix-5, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#problems

fix :: Less fortunate are cotton growers in Chinandega , ranchers near Leon and other private producers who must operate in the government-controlled formal economy that is ensnared in the red tape of paper work , acreage allotments , distribution regulations and fixed prices ./.
advmod(fortunate-2, Less-1)
dep(are-3, fortunate-2)
root(ROOT-0, are-3)
compound(growers-5, cotton-4)
nsubj(are-3, growers-5)
case(Chinandega-7, in-6)
nmod:in(growers-5, Chinandega-7)
punct(Chinandega-7, ,-8)
appos(Chinandega-7, ranchers-9)
case(Leon-11, near-10)
nmod:near(ranchers-9, Leon-11)
cc(Leon-11, and-12)
amod(producers-15, other-13)
amod(producers-15, private-14)
nmod:near(ranchers-9, producers-15)
conj:and(Leon-11, producers-15)
nsubj(operate-18, producers-15)
ref(producers-15, who-16)
aux(operate-18, must-17)
acl:relcl(producers-15, operate-18)
case(economy-23, in-19)
det(economy-23, the-20)
amod(economy-23, government-controlled-21)
amod(economy-23, formal-22)
nmod:in(operate-18, economy-23)
nsubjpass(ensnared-26, that-24)
auxpass(ensnared-26, is-25)
ccomp(operate-18, ensnared-26)
case(tape-30, in-27)
det(tape-30, the-28)
amod(tape-30, red-29)
nmod:in(ensnared-26, tape-30)
case(work-33, of-31)
compound(work-33, paper-32)
nmod:of(tape-30, work-33)
punct(Chinandega-7, ,-34)
compound(allotments-36, acreage-35)
appos(Chinandega-7, allotments-36)
punct(Chinandega-7, ,-37)
compound(regulations-39, distribution-38)
nmod:in(growers-5, regulations-39)
conj:and(Chinandega-7, regulations-39)
cc(Chinandega-7, and-40)
amod(prices-42, fixed-41)
nmod:in(growers-5, prices-42)
conj:and(Chinandega-7, prices-42)
punct(are-3, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#prices

fix :: We certainly do not need price limits ; Washington wo n't be any better at fixing stock prices than it was at fixing gasoline prices ./.
nsubj(need-5, We-1)
advmod(need-5, certainly-2)
aux(need-5, do-3)
neg(need-5, not-4)
root(ROOT-0, need-5)
compound(limits-7, price-6)
dobj(need-5, limits-7)
punct(need-5, ;-8)
nsubj(better-14, Washington-9)
aux(better-14, wo-10)
neg(better-14, n't-11)
cop(better-14, be-12)
advmod(better-14, any-13)
parataxis(need-5, better-14)
mark(fixing-16, at-15)
advcl(better-14, fixing-16)
compound(prices-18, stock-17)
dobj(fixing-16, prices-18)
mark(fixing-23, than-19)
nsubj(fixing-23, it-20)
aux(fixing-23, was-21)
mark(fixing-23, at-22)
advcl(better-14, fixing-23)
compound(prices-25, gasoline-24)
dobj(fixing-23, prices-25)
punct(need-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#prices

fix :: The suit had asserted that Thiokol was wrong in telling the National Aeronautics and Space Administration that the rocket defect could be fixed ./.
det(suit-2, The-1)
nsubj(asserted-4, suit-2)
aux(asserted-4, had-3)
root(ROOT-0, asserted-4)
mark(wrong-8, that-5)
nsubj(wrong-8, Thiokol-6)
cop(wrong-8, was-7)
ccomp(asserted-4, wrong-8)
mark(telling-10, in-9)
advcl(wrong-8, telling-10)
det(Aeronautics-13, the-11)
compound(Aeronautics-13, National-12)
dobj(telling-10, Aeronautics-13)
cc(Aeronautics-13, and-14)
compound(Administration-16, Space-15)
dobj(telling-10, Administration-16)
conj:and(Aeronautics-13, Administration-16)
mark(fixed-23, that-17)
det(defect-20, the-18)
compound(defect-20, rocket-19)
nsubjpass(fixed-23, defect-20)
aux(fixed-23, could-21)
auxpass(fixed-23, be-22)
ccomp(telling-10, fixed-23)
punct(asserted-4, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#defect

fix :: One of the funniest scenes in the play comes near the end , when Frank visits Sylvester 's apartment to fix a leak in the ceiling ./.
nsubj(comes-9, One-1)
case(scenes-5, of-2)
det(scenes-5, the-3)
amod(scenes-5, funniest-4)
nmod:of(One-1, scenes-5)
case(play-8, in-6)
det(play-8, the-7)
nmod:in(scenes-5, play-8)
root(ROOT-0, comes-9)
case(end-12, near-10)
det(end-12, the-11)
nmod:near(comes-9, end-12)
punct(end-12, ,-13)
advmod(visits-16, when-14)
nsubj(visits-16, Frank-15)
acl:relcl(end-12, visits-16)
nmod:poss(apartment-19, Sylvester-17)
case(Sylvester-17, 's-18)
dobj(visits-16, apartment-19)
mark(fix-21, to-20)
advcl(visits-16, fix-21)
det(leak-23, a-22)
dobj(fix-21, leak-23)
case(ceiling-26, in-24)
det(ceiling-26, the-25)
nmod:in(leak-23, ceiling-26)
punct(comes-9, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#leak

fix :: BMW of North America Inc. and Chrysler Corp. are recalling a total of 22 , 000 cars in California to fix faulty anti-smog devices , according to California officials ./.
nsubj(recalling-10, BMW-1)
case(Inc.-5, of-2)
compound(Inc.-5, North-3)
compound(Inc.-5, America-4)
nmod:of(BMW-1, Inc.-5)
cc(Inc.-5, and-6)
compound(Corp.-8, Chrysler-7)
nmod:of(BMW-1, Corp.-8)
conj:and(Inc.-5, Corp.-8)
aux(recalling-10, are-9)
root(ROOT-0, recalling-10)
det(total-12, a-11)
dobj(recalling-10, total-12)
acl(total-12, of-13)
root(of-13, 22-14)
punct(22-14, ,-15)
nummod(cars-17, 000-16)
root(,-15, cars-17)
case(California-19, in-18)
nmod:in(cars-17, California-19)
mark(fix-21, to-20)
acl(cars-17, fix-21)
amod(devices-24, faulty-22)
amod(devices-24, anti-smog-23)
dobj(fix-21, devices-24)
punct(cars-17, ,-25)
case(officials-29, according-26)
mwe(according-26, to-27)
compound(officials-29, California-28)
nmod:according_to(cars-17, officials-29)
punct(cars-17, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#devices

fix :: Medserv also signed a $ 10 million licensing agreement to provide equipment , training and raw materials for a dental-technology facility that will be able to produce enough fillings to fix 50 million Soviet cavities ./.
nsubj(signed-3, Medserv-1)
advmod(signed-3, also-2)
root(ROOT-0, signed-3)
det(agreement-9, a-4)
amod(agreement-9, $-5)
compound(million-7, 10-6)
nummod($-5, million-7)
compound(agreement-9, licensing-8)
dobj(signed-3, agreement-9)
mark(provide-11, to-10)
acl(agreement-9, provide-11)
dobj(provide-11, equipment-12)
punct(equipment-12, ,-13)
dobj(provide-11, training-14)
conj:and(equipment-12, training-14)
cc(equipment-12, and-15)
amod(materials-17, raw-16)
dobj(provide-11, materials-17)
conj:and(equipment-12, materials-17)
case(facility-21, for-18)
det(facility-21, a-19)
amod(facility-21, dental-technology-20)
nmod:for(provide-11, facility-21)
nsubj(able-25, facility-21)
nsubj:xsubj(produce-27, facility-21)
ref(facility-21, that-22)
aux(able-25, will-23)
cop(able-25, be-24)
acl:relcl(facility-21, able-25)
mark(produce-27, to-26)
xcomp(able-25, produce-27)
amod(fillings-29, enough-28)
dobj(produce-27, fillings-29)
mark(fix-31, to-30)
advcl(produce-27, fix-31)
compound(million-33, 50-32)
nummod(cavities-35, million-33)
amod(cavities-35, Soviet-34)
dobj(fix-31, cavities-35)
punct(signed-3, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#cavities

fix :: This approach is just one of several being weighed to fix the small leak on the launch pad and avoid rolling Discovery back to a hangar for repairs , which could delay the planned early September launch by as much as two months ./.
det(approach-2, This-1)
nsubj(one-5, approach-2)
cop(one-5, is-3)
advmod(one-5, just-4)
root(ROOT-0, one-5)
mark(weighed-9, of-6)
advmod(weighed-9, several-7)
auxpass(weighed-9, being-8)
acl(one-5, weighed-9)
mark(fix-11, to-10)
xcomp(weighed-9, fix-11)
det(leak-14, the-12)
amod(leak-14, small-13)
dobj(fix-11, leak-14)
case(pad-18, on-15)
det(pad-18, the-16)
compound(pad-18, launch-17)
nmod:on(leak-14, pad-18)
cc(fix-11, and-19)
xcomp(weighed-9, avoid-20)
conj:and(fix-11, avoid-20)
amod(Discovery-22, rolling-21)
dobj(avoid-20, Discovery-22)
advmod(avoid-20, back-23)
case(hangar-26, to-24)
det(hangar-26, a-25)
nmod:to(back-23, hangar-26)
nsubj(delay-32, hangar-26)
case(repairs-28, for-27)
nmod:for(hangar-26, repairs-28)
punct(hangar-26, ,-29)
ref(hangar-26, which-30)
aux(delay-32, could-31)
acl:relcl(hangar-26, delay-32)
det(launch-37, the-33)
amod(launch-37, planned-34)
amod(launch-37, early-35)
compound(launch-37, September-36)
dobj(delay-32, launch-37)
case(months-43, by-38)
advmod(two-42, as-39)
advmod(two-42, much-40)
advmod(two-42, as-41)
nummod(months-43, two-42)
nmod:by(delay-32, months-43)
punct(one-5, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#leak

fix :: `` But there are some things we can fix right now ./.
punct(are-4, ``-1)
cc(are-4, But-2)
expl(are-4, there-3)
root(ROOT-0, are-4)
det(things-6, some-5)
nsubj(are-4, things-6)
nsubj(fix-9, we-7)
aux(fix-9, can-8)
acl:relcl(things-6, fix-9)
advmod(now-11, right-10)
advmod(fix-9, now-11)
punct(are-4, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#we

fix :: She demanded that he send an engineer to fix it ./.
nsubj(demanded-2, She-1)
root(ROOT-0, demanded-2)
mark(send-5, that-3)
nsubj(send-5, he-4)
ccomp(demanded-2, send-5)
det(engineer-7, an-6)
dobj(send-5, engineer-7)
mark(fix-9, to-8)
advcl(send-5, fix-9)
dobj(fix-9, it-10)
punct(demanded-2, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#it

fix :: Mr. Schlachter was drawn to Maaco after talking with a franchisee who fixed a friend 's car ./.
compound(Schlachter-2, Mr.-1)
nsubjpass(drawn-4, Schlachter-2)
auxpass(drawn-4, was-3)
root(ROOT-0, drawn-4)
case(Maaco-6, to-5)
nmod:to(drawn-4, Maaco-6)
mark(talking-8, after-7)
advcl(drawn-4, talking-8)
case(franchisee-11, with-9)
det(franchisee-11, a-10)
nmod:with(talking-8, franchisee-11)
nsubj(fixed-13, franchisee-11)
ref(franchisee-11, who-12)
acl:relcl(franchisee-11, fixed-13)
det(friend-15, a-14)
nmod:poss(car-17, friend-15)
case(friend-15, 's-16)
dobj(fixed-13, car-17)
punct(drawn-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#car

fix :: As the Army pressed Oshkosh to fix the trucks , says Col. Ronald Cundrick , an Army lawyer , `` we had them stacked all over the place . ''/''
mark(pressed-4, As-1)
det(Army-3, the-2)
nsubj(pressed-4, Army-3)
advcl(says-11, pressed-4)
dobj(pressed-4, Oshkosh-5)
mark(fix-7, to-6)
advcl(pressed-4, fix-7)
det(trucks-9, the-8)
dobj(fix-7, trucks-9)
punct(says-11, ,-10)
root(ROOT-0, says-11)
compound(Cundrick-14, Col.-12)
compound(Cundrick-14, Ronald-13)
nsubj(says-11, Cundrick-14)
punct(Cundrick-14, ,-15)
det(lawyer-18, an-16)
compound(lawyer-18, Army-17)
appos(Cundrick-14, lawyer-18)
punct(Cundrick-14, ,-19)
punct(had-22, ``-20)
nsubj(had-22, we-21)
acl:relcl(Cundrick-14, had-22)
nsubj(stacked-24, them-23)
ccomp(had-22, stacked-24)
advmod(place-28, all-25)
case(place-28, over-26)
det(place-28, the-27)
nmod:over(stacked-24, place-28)
punct(says-11, .-29)
punct(says-11, ''-30)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fix#trucks

fix :: The new method of temporarily fixing them involved installing an overlay of sheet metal with screws and liquid adhesives ./.
det(method-3, The-1)
amod(method-3, new-2)
root(ROOT-0, method-3)
mark(fixing-6, of-4)
advmod(fixing-6, temporarily-5)
acl(method-3, fixing-6)
dobj(fixing-6, them-7)
xcomp(fixing-6, involved-8)
dep(involved-8, installing-9)
det(overlay-11, an-10)
dobj(installing-9, overlay-11)
case(metal-14, of-12)
compound(metal-14, sheet-13)
nmod:of(overlay-11, metal-14)
case(screws-16, with-15)
nmod:with(installing-9, screws-16)
cc(screws-16, and-17)
amod(adhesives-19, liquid-18)
nmod:with(installing-9, adhesives-19)
conj:and(screws-16, adhesives-19)
punct(method-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fix#them

flood :: But in June 1987 , two doctors affiliated with Ueno Fine Chemical Co. reported that in test-tube studies , dextran sulfate was an effective antiviral agent against AIDS. Almost overnight , desperate American AIDS patients flooded Kowa with demands for the drug ./.
cc(reported-14, But-1)
case(June-3, in-2)
nmod:in(reported-14, June-3)
nummod(June-3, 1987-4)
punct(reported-14, ,-5)
nummod(doctors-7, two-6)
nsubj(reported-14, doctors-7)
acl(doctors-7, affiliated-8)
case(Co.-13, with-9)
compound(Co.-13, Ueno-10)
compound(Co.-13, Fine-11)
compound(Co.-13, Chemical-12)
nmod:with(affiliated-8, Co.-13)
root(ROOT-0, reported-14)
mark(agent-26, that-15)
case(studies-18, in-16)
compound(studies-18, test-tube-17)
nmod:in(agent-26, studies-18)
punct(agent-26, ,-19)
compound(sulfate-21, dextran-20)
nsubj(agent-26, sulfate-21)
cop(agent-26, was-22)
det(agent-26, an-23)
amod(agent-26, effective-24)
amod(agent-26, antiviral-25)
ccomp(reported-14, agent-26)
case(AIDS-28, against-27)
nmod:against(agent-26, AIDS-28)
punct(reported-14, .-29)
advmod(overnight-2, Almost-1)
advmod(flooded-8, overnight-2)
punct(flooded-8, ,-3)
amod(patients-7, desperate-4)
amod(patients-7, American-5)
compound(patients-7, AIDS-6)
nsubj(flooded-8, patients-7)
root(ROOT-0, flooded-8)
dobj(flooded-8, Kowa-9)
case(demands-11, with-10)
nmod:with(flooded-8, demands-11)
case(drug-14, for-12)
det(drug-14, the-13)
nmod:for(demands-11, drug-14)
punct(flooded-8, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#kowa

flood :: `` Dog cases were flooding the court system that 's flooded already , '' Mr. Margolis , the animal behaviorist and expert witness , says ./.
punct(says-25, ``-1)
compound(cases-3, Dog-2)
nsubj(flooding-5, cases-3)
aux(flooding-5, were-4)
ccomp(says-25, flooding-5)
det(system-8, the-6)
compound(system-8, court-7)
dobj(flooding-5, system-8)
nsubjpass(flooded-11, system-8)
ref(system-8, that-9)
auxpass(flooded-11, 's-10)
acl:relcl(system-8, flooded-11)
advmod(flooded-11, already-12)
punct(says-25, ,-13)
punct(says-25, ''-14)
compound(Margolis-16, Mr.-15)
nsubj(says-25, Margolis-16)
punct(Margolis-16, ,-17)
det(behaviorist-20, the-18)
compound(behaviorist-20, animal-19)
appos(Margolis-16, behaviorist-20)
cc(behaviorist-20, and-21)
compound(witness-23, expert-22)
appos(Margolis-16, witness-23)
conj:and(behaviorist-20, witness-23)
punct(Margolis-16, ,-24)
root(ROOT-0, says-25)
punct(says-25, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#system

flood :: Mr. Davis says he has been flooded with requests for berths on future flights since announcing the October launch ./.
compound(Davis-2, Mr.-1)
nsubj(says-3, Davis-2)
root(ROOT-0, says-3)
nsubjpass(flooded-7, he-4)
aux(flooded-7, has-5)
auxpass(flooded-7, been-6)
ccomp(says-3, flooded-7)
case(requests-9, with-8)
nmod:with(flooded-7, requests-9)
case(berths-11, for-10)
nmod:for(requests-9, berths-11)
case(flights-14, on-12)
amod(flights-14, future-13)
nmod:on(berths-11, flights-14)
mark(announcing-16, since-15)
advcl(flooded-7, announcing-16)
det(launch-19, the-17)
compound(launch-19, October-18)
dobj(announcing-16, launch-19)
punct(says-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#he

flood :: THIS YEAR marketers are again flooding supermarket shelves with new products -- everything from Cajun popcorn to ketchup in spray cans ./.
det(marketers-3, THIS-1)
compound(marketers-3, YEAR-2)
nsubj(flooding-6, marketers-3)
aux(flooding-6, are-4)
advmod(flooding-6, again-5)
root(ROOT-0, flooding-6)
compound(shelves-8, supermarket-7)
dobj(flooding-6, shelves-8)
case(products-11, with-9)
amod(products-11, new-10)
nmod:with(flooding-6, products-11)
punct(flooding-6, ---12)
dobj(flooding-6, everything-13)
case(popcorn-16, from-14)
amod(popcorn-16, Cajun-15)
nmod:from(everything-13, popcorn-16)
case(ketchup-18, to-17)
nmod:to(popcorn-16, ketchup-18)
case(cans-21, in-19)
compound(cans-21, spray-20)
nmod:in(popcorn-16, cans-21)
punct(flooding-6, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#shelves

flood :: A synthetic version , prepared by means of recombinant DNA , is to be given in an intravenous infusion in the hope that flooding the body with false targets would mop up virus particles and prevent them from infecting cells of the body ./.
det(version-3, A-1)
amod(version-3, synthetic-2)
nsubj(is-12, version-3)
nsubjpass:xsubj(given-15, version-3)
punct(version-3, ,-4)
acl(version-3, prepared-5)
case(DNA-10, by-6)
mwe(by-6, means-7)
mwe(by-6, of-8)
amod(DNA-10, recombinant-9)
nmod:by_means_of(prepared-5, DNA-10)
punct(version-3, ,-11)
root(ROOT-0, is-12)
mark(given-15, to-13)
auxpass(given-15, be-14)
xcomp(is-12, given-15)
case(infusion-19, in-16)
det(infusion-19, an-17)
amod(infusion-19, intravenous-18)
nmod:in(given-15, infusion-19)
case(hope-22, in-20)
det(hope-22, the-21)
nmod:in(infusion-19, hope-22)
mark(mop-31, that-23)
csubj(mop-31, flooding-24)
csubj(prevent-36, flooding-24)
det(body-26, the-25)
dobj(flooding-24, body-26)
case(targets-29, with-27)
amod(targets-29, false-28)
nmod:with(flooding-24, targets-29)
aux(mop-31, would-30)
ccomp(hope-22, mop-31)
compound:prt(mop-31, up-32)
compound(particles-34, virus-33)
dobj(mop-31, particles-34)
cc(mop-31, and-35)
ccomp(hope-22, prevent-36)
conj:and(mop-31, prevent-36)
dobj(prevent-36, them-37)
mark(infecting-39, from-38)
advcl(prevent-36, infecting-39)
dobj(infecting-39, cells-40)
case(body-43, of-41)
det(body-43, the-42)
nmod:of(cells-40, body-43)
punct(is-12, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#body

flood :: Others are flooding their local television broadcasts with press releases and advertising that stresses the quality and safety of the vehicles ./.
nsubj(flooding-3, Others-1)
aux(flooding-3, are-2)
root(ROOT-0, flooding-3)
nmod:poss(broadcasts-7, their-4)
amod(broadcasts-7, local-5)
compound(broadcasts-7, television-6)
dobj(flooding-3, broadcasts-7)
case(releases-10, with-8)
compound(releases-10, press-9)
nmod:with(flooding-3, releases-10)
nsubj(stresses-14, releases-10)
cc(releases-10, and-11)
nmod:with(flooding-3, advertising-12)
conj:and(releases-10, advertising-12)
nsubj(stresses-14, advertising-12)
ref(releases-10, that-13)
acl:relcl(releases-10, stresses-14)
det(quality-16, the-15)
dobj(stresses-14, quality-16)
cc(quality-16, and-17)
dobj(stresses-14, safety-18)
conj:and(quality-16, safety-18)
case(vehicles-21, of-19)
det(vehicles-21, the-20)
nmod:of(quality-16, vehicles-21)
punct(flooding-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#broadcasts

flood :: Smelling new money , U.S. non-profits flooded the foundations with proposals , says Hiroshi Kamura of the Japan Center for International Exchange ./.
advcl(flooded-7, Smelling-1)
amod(money-3, new-2)
dobj(Smelling-1, money-3)
punct(flooded-7, ,-4)
compound(non-profits-6, U.S.-5)
nsubj(flooded-7, non-profits-6)
ccomp(says-13, flooded-7)
det(foundations-9, the-8)
dobj(flooded-7, foundations-9)
case(proposals-11, with-10)
nmod:with(flooded-7, proposals-11)
punct(says-13, ,-12)
root(ROOT-0, says-13)
compound(Kamura-15, Hiroshi-14)
nsubj(says-13, Kamura-15)
case(Center-19, of-16)
det(Center-19, the-17)
compound(Center-19, Japan-18)
nmod:of(Kamura-15, Center-19)
case(Exchange-22, for-20)
compound(Exchange-22, International-21)
nmod:for(Center-19, Exchange-22)
punct(says-13, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#foundations

flood :: During most of this decade , apparel prices rose slowly , because low-priced imports flooded into the U.S. and domestic manufacturers tried to stay competitive ./.
case(most-2, During-1)
nmod:during(rose-9, most-2)
case(decade-5, of-3)
det(decade-5, this-4)
nmod:of(most-2, decade-5)
punct(rose-9, ,-6)
compound(prices-8, apparel-7)
nsubj(rose-9, prices-8)
root(ROOT-0, rose-9)
advmod(rose-9, slowly-10)
punct(rose-9, ,-11)
mark(flooded-15, because-12)
amod(imports-14, low-priced-13)
nsubj(flooded-15, imports-14)
advcl(rose-9, flooded-15)
case(U.S.-18, into-16)
det(U.S.-18, the-17)
nmod:into(flooded-15, U.S.-18)
cc(flooded-15, and-19)
amod(manufacturers-21, domestic-20)
nsubj(tried-22, manufacturers-21)
nsubj:xsubj(stay-24, manufacturers-21)
advcl(rose-9, tried-22)
conj:and(flooded-15, tried-22)
mark(stay-24, to-23)
xcomp(tried-22, stay-24)
xcomp(stay-24, competitive-25)
punct(rose-9, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#imports

flood :: The U.S. Patent and Trademark Office is flooded with them ./.
det(Patent-3, The-1)
compound(Patent-3, U.S.-2)
nsubjpass(flooded-8, Patent-3)
cc(Patent-3, and-4)
compound(Office-6, Trademark-5)
conj:and(Patent-3, Office-6)
nsubjpass(flooded-8, Office-6)
auxpass(flooded-8, is-7)
root(ROOT-0, flooded-8)
case(them-10, with-9)
nmod:with(flooded-8, them-10)
punct(flooded-8, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#patent

flood :: Cancellations flooded in , slashing expected revenues by $ 300 , 000 over the December Jewish holiday of Hanukkah alone ./.
root(ROOT-0, Cancellations-1)
acl(Cancellations-1, flooded-2)
nmod(flooded-2, in-3)
punct(Cancellations-1, ,-4)
root(,-4, slashing-5)
amod(revenues-7, expected-6)
dobj(slashing-5, revenues-7)
case(300-10, by-8)
dep(300-10, $-9)
nmod:by(slashing-5, 300-10)
punct(slashing-5, ,-11)
root(,-11, 000-12)
case(holiday-17, over-13)
det(holiday-17, the-14)
compound(holiday-17, December-15)
amod(holiday-17, Jewish-16)
nmod:over(000-12, holiday-17)
case(Hanukkah-19, of-18)
nmod:of(holiday-17, Hanukkah-19)
advmod(Hanukkah-19, alone-20)
punct(000-12, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#in

flood :: The court has been flooded with briefs by manufacturers and the insurance industry , which argue for limits on liability and damages , and by consumer groups and plaintiffs ' lawyers , which oppose limits ./.
det(court-2, The-1)
nsubjpass(flooded-5, court-2)
aux(flooded-5, has-3)
auxpass(flooded-5, been-4)
root(ROOT-0, flooded-5)
case(briefs-7, with-6)
nmod:with(flooded-5, briefs-7)
case(manufacturers-9, by-8)
nmod:agent(flooded-5, manufacturers-9)
cc(manufacturers-9, and-10)
det(industry-13, the-11)
compound(industry-13, insurance-12)
nmod:agent(flooded-5, industry-13)
conj:and(manufacturers-9, industry-13)
nsubj(argue-16, industry-13)
punct(industry-13, ,-14)
ref(industry-13, which-15)
acl:relcl(industry-13, argue-16)
case(limits-18, for-17)
nmod:for(argue-16, limits-18)
case(liability-20, on-19)
nmod:on(limits-18, liability-20)
cc(liability-20, and-21)
nmod:on(limits-18, damages-22)
conj:and(liability-20, damages-22)
punct(flooded-5, ,-23)
cc(flooded-5, and-24)
case(groups-27, by-25)
compound(groups-27, consumer-26)
conj:and(flooded-5, groups-27)
cc(groups-27, and-28)
nmod:poss(lawyers-31, plaintiffs-29)
case(plaintiffs-29, '-30)
conj:and(flooded-5, lawyers-31)
conj:and(groups-27, lawyers-31)
nsubj(oppose-34, lawyers-31)
punct(lawyers-31, ,-32)
ref(lawyers-31, which-33)
acl:relcl(lawyers-31, oppose-34)
dobj(oppose-34, limits-35)
punct(flooded-5, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#court

flood :: The protein , called CD4 , mimics the virus 's natural targets in the body , thus flooding the system with false targets and diverting the virus from its normal course of attack ./.
det(protein-2, The-1)
nsubj(mimics-7, protein-2)
punct(protein-2, ,-3)
acl(protein-2, called-4)
xcomp(called-4, CD4-5)
punct(protein-2, ,-6)
root(ROOT-0, mimics-7)
det(virus-9, the-8)
nmod:poss(targets-12, virus-9)
case(virus-9, 's-10)
amod(targets-12, natural-11)
dobj(mimics-7, targets-12)
case(body-15, in-13)
det(body-15, the-14)
nmod:in(targets-12, body-15)
punct(mimics-7, ,-16)
advmod(flooding-18, thus-17)
dep(mimics-7, flooding-18)
det(system-20, the-19)
dobj(flooding-18, system-20)
case(targets-23, with-21)
amod(targets-23, false-22)
nmod:with(flooding-18, targets-23)
cc(flooding-18, and-24)
dep(mimics-7, diverting-25)
conj:and(flooding-18, diverting-25)
det(virus-27, the-26)
dobj(diverting-25, virus-27)
case(course-31, from-28)
nmod:poss(course-31, its-29)
amod(course-31, normal-30)
nmod:from(diverting-25, course-31)
case(attack-33, of-32)
nmod:of(course-31, attack-33)
punct(mimics-7, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#system

flood :: The fact that Japanese applicants obtained nearly 25 % more awards than they did in 1986 has raised apprehensions in the Reagan administration that Japan is `` flooding '' the patent office with applications in the anticipation that it will gain a commercial advantage over U.S. firms in coming years ./.
det(fact-2, The-1)
root(ROOT-0, fact-2)
mark(obtained-6, that-3)
amod(applicants-5, Japanese-4)
nsubj(obtained-6, applicants-5)
ccomp(fact-2, obtained-6)
advmod(25-8, nearly-7)
nummod(%-9, 25-8)
nmod:npmod(more-10, %-9)
amod(awards-11, more-10)
dobj(obtained-6, awards-11)
mark(raised-18, than-12)
nsubj(raised-18, they-13)
aux(raised-18, did-14)
case(1986-16, in-15)
nmod:in(did-14, 1986-16)
aux(raised-18, has-17)
advcl(awards-11, raised-18)
dobj(raised-18, apprehensions-19)
case(administration-23, in-20)
det(administration-23, the-21)
compound(administration-23, Reagan-22)
nmod:in(raised-18, administration-23)
mark(flooding-28, that-24)
nsubj(flooding-28, Japan-25)
cop(flooding-28, is-26)
punct(flooding-28, ``-27)
ccomp(administration-23, flooding-28)
punct(flooding-28, ''-29)
det(office-32, the-30)
compound(office-32, patent-31)
dobj(flooding-28, office-32)
case(applications-34, with-33)
nmod:with(office-32, applications-34)
case(anticipation-37, in-35)
det(anticipation-37, the-36)
nmod:in(applications-34, anticipation-37)
mark(gain-41, that-38)
nsubj(gain-41, it-39)
aux(gain-41, will-40)
dep(office-32, gain-41)
det(advantage-44, a-42)
amod(advantage-44, commercial-43)
dobj(gain-41, advantage-44)
case(firms-47, over-45)
compound(firms-47, U.S.-46)
nmod:over(advantage-44, firms-47)
case(years-50, in-48)
amod(years-50, coming-49)
nmod:in(gain-41, years-50)
punct(fact-2, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#office

flood :: The court has been flooded with briefs by manufacturers and the insurance industry , which argue for limits on liability and damages , and by consumer groups and plaintiffs ' lawyers , which oppose limits ./.
det(court-2, The-1)
nsubjpass(flooded-5, court-2)
aux(flooded-5, has-3)
auxpass(flooded-5, been-4)
root(ROOT-0, flooded-5)
case(briefs-7, with-6)
nmod:with(flooded-5, briefs-7)
case(manufacturers-9, by-8)
nmod:agent(flooded-5, manufacturers-9)
cc(manufacturers-9, and-10)
det(industry-13, the-11)
compound(industry-13, insurance-12)
nmod:agent(flooded-5, industry-13)
conj:and(manufacturers-9, industry-13)
nsubj(argue-16, industry-13)
punct(industry-13, ,-14)
ref(industry-13, which-15)
acl:relcl(industry-13, argue-16)
case(limits-18, for-17)
nmod:for(argue-16, limits-18)
case(liability-20, on-19)
nmod:on(limits-18, liability-20)
cc(liability-20, and-21)
nmod:on(limits-18, damages-22)
conj:and(liability-20, damages-22)
punct(flooded-5, ,-23)
cc(flooded-5, and-24)
case(groups-27, by-25)
compound(groups-27, consumer-26)
conj:and(flooded-5, groups-27)
cc(groups-27, and-28)
nmod:poss(lawyers-31, plaintiffs-29)
case(plaintiffs-29, '-30)
conj:and(flooded-5, lawyers-31)
conj:and(groups-27, lawyers-31)
nsubj(oppose-34, lawyers-31)
punct(lawyers-31, ,-32)
ref(lawyers-31, which-33)
acl:relcl(lawyers-31, oppose-34)
dobj(oppose-34, limits-35)
punct(flooded-5, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#court

flood :: But Cameloot was just another loser among the entries that flooded the offices of Circus Circus Enterprises Inc. during a contest to name its planned $ 290 million castle-theme resort ./.
cc(loser-6, But-1)
nsubj(loser-6, Cameloot-2)
cop(loser-6, was-3)
advmod(loser-6, just-4)
det(loser-6, another-5)
root(ROOT-0, loser-6)
case(entries-9, among-7)
det(entries-9, the-8)
nmod:among(loser-6, entries-9)
nsubj(flooded-11, entries-9)
ref(entries-9, that-10)
acl:relcl(entries-9, flooded-11)
det(offices-13, the-12)
dobj(flooded-11, offices-13)
case(Inc.-18, of-14)
compound(Inc.-18, Circus-15)
compound(Inc.-18, Circus-16)
compound(Inc.-18, Enterprises-17)
nmod:of(offices-13, Inc.-18)
case(contest-21, during-19)
det(contest-21, a-20)
nmod:during(flooded-11, contest-21)
mark(name-23, to-22)
acl(contest-21, name-23)
nmod:poss(resort-30, its-24)
amod(resort-30, planned-25)
amod(resort-30, $-26)
compound(million-28, 290-27)
nummod($-26, million-28)
amod(resort-30, castle-theme-29)
dobj(name-23, resort-30)
punct(loser-6, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#inc.

flood :: That point was rammed home during his recent visit to Siberia , where he was flooded with complaints about awful living standards , a lack of basic foodstuffs and bureaucrats who were blocking improvements ./.
det(point-2, That-1)
nsubjpass(rammed-4, point-2)
auxpass(rammed-4, was-3)
root(ROOT-0, rammed-4)
advmod(rammed-4, home-5)
case(visit-9, during-6)
nmod:poss(visit-9, his-7)
amod(visit-9, recent-8)
nmod:during(rammed-4, visit-9)
case(Siberia-11, to-10)
nmod:to(visit-9, Siberia-11)
punct(Siberia-11, ,-12)
advmod(flooded-16, where-13)
nsubjpass(flooded-16, he-14)
auxpass(flooded-16, was-15)
acl:relcl(Siberia-11, flooded-16)
case(complaints-18, with-17)
nmod:with(flooded-16, complaints-18)
case(standards-22, about-19)
amod(standards-22, awful-20)
compound(standards-22, living-21)
nmod:about(complaints-18, standards-22)
punct(visit-9, ,-23)
det(lack-25, a-24)
appos(visit-9, lack-25)
case(foodstuffs-28, of-26)
amod(foodstuffs-28, basic-27)
nmod:of(lack-25, foodstuffs-28)
nsubj(blocking-33, foodstuffs-28)
cc(foodstuffs-28, and-29)
nmod:of(lack-25, bureaucrats-30)
conj:and(foodstuffs-28, bureaucrats-30)
nsubj(blocking-33, bureaucrats-30)
ref(foodstuffs-28, who-31)
aux(blocking-33, were-32)
acl:relcl(foodstuffs-28, blocking-33)
dobj(blocking-33, improvements-34)
punct(rammed-4, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#he

flood :: Meanwhile , state and private testing laboratories were flooded with thousands of grain samples as merchants and farmers sought reassurance that their commodities were safe ./.
advmod(flooded-9, Meanwhile-1)
punct(flooded-9, ,-2)
compound(laboratories-7, state-3)
cc(state-3, and-4)
conj:and(state-3, private-5)
compound(laboratories-7, private-5)
compound(laboratories-7, testing-6)
nsubjpass(flooded-9, laboratories-7)
auxpass(flooded-9, were-8)
root(ROOT-0, flooded-9)
case(thousands-11, with-10)
nmod:with(flooded-9, thousands-11)
case(samples-14, of-12)
compound(samples-14, grain-13)
nmod:of(thousands-11, samples-14)
case(merchants-16, as-15)
nmod:as(flooded-9, merchants-16)
cc(merchants-16, and-17)
nmod:as(flooded-9, farmers-18)
conj:and(merchants-16, farmers-18)
dep(flooded-9, sought-19)
dobj(sought-19, reassurance-20)
mark(safe-25, that-21)
nmod:poss(commodities-23, their-22)
nsubj(safe-25, commodities-23)
cop(safe-25, were-24)
ccomp(reassurance-20, safe-25)
punct(flooded-9, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#laboratories

flood :: In the following decade , the Federal Reserve flooded the banks with reserves , providing the raw material for BankAmerica 's profligate lending policies while also creating a spiraling inflation ./.
case(decade-4, In-1)
det(decade-4, the-2)
amod(decade-4, following-3)
nmod:in(flooded-9, decade-4)
punct(flooded-9, ,-5)
det(Reserve-8, the-6)
compound(Reserve-8, Federal-7)
nsubj(flooded-9, Reserve-8)
root(ROOT-0, flooded-9)
det(banks-11, the-10)
dobj(flooded-9, banks-11)
case(reserves-13, with-12)
nmod:with(flooded-9, reserves-13)
punct(flooded-9, ,-14)
advcl(flooded-9, providing-15)
det(material-18, the-16)
amod(material-18, raw-17)
dobj(providing-15, material-18)
case(policies-24, for-19)
nmod:poss(policies-24, BankAmerica-20)
case(BankAmerica-20, 's-21)
amod(policies-24, profligate-22)
compound(policies-24, lending-23)
nmod:for(material-18, policies-24)
mark(creating-27, while-25)
advmod(creating-27, also-26)
advcl(providing-15, creating-27)
det(inflation-30, a-28)
amod(inflation-30, spiraling-29)
dobj(creating-27, inflation-30)
punct(flooded-9, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#banks

flood :: `` It floods the area instead of having hot pinpoints of glaring light . ''/''
root(ROOT-0, ``-1)
nsubj(floods-3, It-2)
nsubj(having-8, It-2)
root(``-1, floods-3)
det(area-5, the-4)
dobj(floods-3, area-5)
cc(floods-3, instead-6)
mwe(instead-6, of-7)
root(``-1, having-8)
conj:negcc(floods-3, having-8)
amod(pinpoints-10, hot-9)
dobj(having-8, pinpoints-10)
mark(glaring-12, of-11)
advcl(pinpoints-10, glaring-12)
dobj(glaring-12, light-13)
punct(floods-3, .-14)
punct(floods-3, ''-15)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: flood#area

flood :: `` We 're already being flooded by inquiries from many major companies as to how -LRB- the board -RRB- can do this . ''/''
root(ROOT-0, ``-1)
nsubjpass(flooded-6, We-2)
aux(flooded-6, 're-3)
advmod(flooded-6, already-4)
auxpass(flooded-6, being-5)
root(``-1, flooded-6)
case(inquiries-8, by-7)
nmod:agent(flooded-6, inquiries-8)
case(companies-12, from-9)
amod(companies-12, many-10)
amod(companies-12, major-11)
nmod:from(inquiries-8, companies-12)
mark(do-21, as-13)
mark(do-21, to-14)
advmod(do-21, how-15)
punct(do-21, -LRB--16)
det(board-18, the-17)
nsubj(do-21, board-18)
punct(do-21, -RRB--19)
aux(do-21, can-20)
advcl(flooded-6, do-21)
dobj(do-21, this-22)
punct(flooded-6, .-23)
punct(flooded-6, ''-24)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: flood#we

flood :: Mr. Takeda , for one , thinks the Thais turned away from communism after the Vietnamese invaded Cambodia in 1979 and Thailand was flooded with refugees from its communist neighbors ./.
compound(Takeda-2, Mr.-1)
nsubj(thinks-7, Takeda-2)
punct(thinks-7, ,-3)
case(one-5, for-4)
nmod:for(thinks-7, one-5)
punct(thinks-7, ,-6)
root(ROOT-0, thinks-7)
det(Thais-9, the-8)
nsubj(turned-10, Thais-9)
ccomp(thinks-7, turned-10)
case(communism-13, away-11)
mwe(away-11, from-12)
nmod:away_from(turned-10, communism-13)
case(Cambodia-18, after-14)
det(Cambodia-18, the-15)
amod(Cambodia-18, Vietnamese-16)
amod(Cambodia-18, invaded-17)
nmod:after(turned-10, Cambodia-18)
case(1979-20, in-19)
nmod:in(turned-10, 1979-20)
cc(1979-20, and-21)
nmod:in(turned-10, Thailand-22)
conj:and(1979-20, Thailand-22)
auxpass(flooded-24, was-23)
dep(turned-10, flooded-24)
case(refugees-26, with-25)
nmod:with(flooded-24, refugees-26)
case(neighbors-30, from-27)
nmod:poss(neighbors-30, its-28)
amod(neighbors-30, communist-29)
nmod:from(refugees-26, neighbors-30)
punct(thinks-7, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#was

flood :: While investors generally reacted either indifferently or negatively to the dozens of quarterly earnings reports that flooded the market , there were a few exceptions ./.
mark(reacted-4, While-1)
nsubj(reacted-4, investors-2)
advmod(reacted-4, generally-3)
advcl(were-22, reacted-4)
cc:preconj(indifferently-6, either-5)
advmod(reacted-4, indifferently-6)
cc(indifferently-6, or-7)
advmod(reacted-4, negatively-8)
conj:or(indifferently-6, negatively-8)
case(dozens-11, to-9)
det(dozens-11, the-10)
nmod:to(reacted-4, dozens-11)
case(reports-15, of-12)
amod(reports-15, quarterly-13)
compound(reports-15, earnings-14)
nmod:of(dozens-11, reports-15)
nsubj(flooded-17, reports-15)
ref(reports-15, that-16)
acl:relcl(reports-15, flooded-17)
det(market-19, the-18)
dobj(flooded-17, market-19)
punct(were-22, ,-20)
expl(were-22, there-21)
root(ROOT-0, were-22)
det(exceptions-25, a-23)
amod(exceptions-25, few-24)
nsubj(were-22, exceptions-25)
punct(were-22, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#market

flood :: Refugees from Romania have been flooding into Hungary by the thousands ./.
nsubj(flooding-6, Refugees-1)
case(Romania-3, from-2)
nmod:from(Refugees-1, Romania-3)
aux(flooding-6, have-4)
aux(flooding-6, been-5)
root(ROOT-0, flooding-6)
case(Hungary-8, into-7)
nmod:into(flooding-6, Hungary-8)
case(thousands-11, by-9)
det(thousands-11, the-10)
nmod:by(flooding-6, thousands-11)
punct(flooding-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#refugees

flood :: The company says it now is flooded with requests from state and private health agencies and hospitals seeking their own P.R. bonanza from the cholesterol craze ./.
det(company-2, The-1)
nsubj(says-3, company-2)
root(ROOT-0, says-3)
nsubjpass(flooded-7, it-4)
advmod(flooded-7, now-5)
auxpass(flooded-7, is-6)
ccomp(says-3, flooded-7)
case(requests-9, with-8)
nmod:with(flooded-7, requests-9)
case(agencies-15, from-10)
compound(agencies-15, state-11)
cc(state-11, and-12)
conj:and(state-11, private-13)
compound(agencies-15, private-13)
compound(agencies-15, health-14)
nmod:from(requests-9, agencies-15)
cc(agencies-15, and-16)
nmod:from(requests-9, hospitals-17)
conj:and(agencies-15, hospitals-17)
acl(requests-9, seeking-18)
nmod:poss(bonanza-22, their-19)
amod(bonanza-22, own-20)
compound(bonanza-22, P.R.-21)
dobj(seeking-18, bonanza-22)
case(craze-26, from-23)
det(craze-26, the-24)
compound(craze-26, cholesterol-25)
nmod:from(bonanza-22, craze-26)
punct(says-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#it

flood :: Since Taipei lifted a travel ban in November , residents of Taiwan have flooded into China to visit relatives ./.
mark(lifted-3, Since-1)
nsubj(lifted-3, Taipei-2)
advcl(flooded-14, lifted-3)
det(ban-6, a-4)
compound(ban-6, travel-5)
dobj(lifted-3, ban-6)
case(November-8, in-7)
nmod:in(lifted-3, November-8)
punct(flooded-14, ,-9)
nsubj(flooded-14, residents-10)
nsubj:xsubj(visit-18, residents-10)
case(Taiwan-12, of-11)
nmod:of(residents-10, Taiwan-12)
aux(flooded-14, have-13)
root(ROOT-0, flooded-14)
case(China-16, into-15)
nmod:into(flooded-14, China-16)
mark(visit-18, to-17)
xcomp(flooded-14, visit-18)
dobj(visit-18, relatives-19)
punct(flooded-14, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#residents

flood :: Now its 12 , 000 acres of manmade hills , soaring granite towers and glistening plazas linked by Venetian canals are flooded with almost a billion dollars in debt ./.
advmod(flooded-22, Now-1)
dep(flooded-22, its-2)
dep(flooded-22, 12-3)
punct(flooded-22, ,-4)
nummod(acres-6, 000-5)
nsubjpass(flooded-22, acres-6)
case(hills-9, of-7)
compound(hills-9, manmade-8)
nmod:of(acres-6, hills-9)
punct(acres-6, ,-10)
amod(towers-13, soaring-11)
compound(towers-13, granite-12)
appos(acres-6, towers-13)
cc(towers-13, and-14)
appos(acres-6, glistening-15)
conj:and(towers-13, glistening-15)
dobj(glistening-15, plazas-16)
acl(plazas-16, linked-17)
case(canals-20, by-18)
amod(canals-20, Venetian-19)
nmod:by(linked-17, canals-20)
auxpass(flooded-22, are-21)
root(ROOT-0, flooded-22)
case(dollars-27, with-23)
advmod(billion-26, almost-24)
advmod(billion-26, a-25)
nummod(dollars-27, billion-26)
nmod:with(flooded-22, dollars-27)
case(debt-29, in-28)
nmod:in(dollars-27, debt-29)
punct(flooded-22, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#acres

flood :: White-collar Indians and Pakistanis flooded into the U.S. in the 1960s , and many of their children have reached marriage age ./.
amod(Indians-2, White-collar-1)
nsubj(flooded-5, Indians-2)
cc(Indians-2, and-3)
conj:and(Indians-2, Pakistanis-4)
nsubj(flooded-5, Pakistanis-4)
root(ROOT-0, flooded-5)
case(U.S.-8, into-6)
det(U.S.-8, the-7)
nmod:into(flooded-5, U.S.-8)
case(1960s-11, in-9)
det(1960s-11, the-10)
nmod:in(flooded-5, 1960s-11)
punct(flooded-5, ,-12)
cc(flooded-5, and-13)
nsubj(reached-19, many-14)
case(children-17, of-15)
nmod:poss(children-17, their-16)
nmod:of(many-14, children-17)
aux(reached-19, have-18)
conj:and(flooded-5, reached-19)
compound(age-21, marriage-20)
dobj(reached-19, age-21)
punct(flooded-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#indians

flood :: Santa Clara , Calif.-based Intel -- which makes a broad line of semiconductor products -- along with most other big U.S. chip makers , quit making so-called DRAM , or dynamic random access memory , chips after Japanese chip makers flooded the U.S. with cheap memory chips earlier in the decade ./.
compound(Clara-2, Santa-1)
root(ROOT-0, Clara-2)
nsubj(makes-8, Clara-2)
punct(Clara-2, ,-3)
compound(Intel-5, Calif.-based-4)
appos(Clara-2, Intel-5)
punct(Clara-2, ---6)
ref(Clara-2, which-7)
acl:relcl(Clara-2, makes-8)
det(line-11, a-9)
amod(line-11, broad-10)
dobj(makes-8, line-11)
case(products-14, of-12)
compound(products-14, semiconductor-13)
nmod:of(line-11, products-14)
punct(makers-23, ---15)
case(makers-23, along-16)
mwe(along-16, with-17)
amod(makers-23, most-18)
amod(makers-23, other-19)
amod(makers-23, big-20)
compound(makers-23, U.S.-21)
compound(makers-23, chip-22)
dep(line-11, makers-23)
punct(makers-23, ,-24)
aux(making-26, quit-25)
appos(makers-23, making-26)
amod(DRAM-28, so-called-27)
dobj(making-26, DRAM-28)
punct(DRAM-28, ,-29)
cc(DRAM-28, or-30)
amod(memory-34, dynamic-31)
amod(memory-34, random-32)
compound(memory-34, access-33)
dobj(making-26, memory-34)
conj:or(DRAM-28, memory-34)
punct(making-26, ,-35)
dep(making-26, chips-36)
mark(flooded-41, after-37)
amod(makers-40, Japanese-38)
compound(makers-40, chip-39)
nsubj(flooded-41, makers-40)
acl(chips-36, flooded-41)
det(U.S.-43, the-42)
dobj(flooded-41, U.S.-43)
case(chips-47, with-44)
amod(chips-47, cheap-45)
compound(chips-47, memory-46)
nmod:with(flooded-41, chips-47)
advmod(flooded-41, earlier-48)
case(decade-51, in-49)
det(decade-51, the-50)
nmod:in(earlier-48, decade-51)
punct(Clara-2, .-52)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#u.s.

flood :: Shortly afterward , Bob Adams Inc. in Boston flooded 21 universities nationwide with 10 , 000 copies of its annual two bits of advice , a publication called `` Careers and the M.B.A . ''/''
advmod(afterward-2, Shortly-1)
advmod(flooded-9, afterward-2)
punct(flooded-9, ,-3)
compound(Inc.-6, Bob-4)
compound(Inc.-6, Adams-5)
nsubj(flooded-9, Inc.-6)
case(Boston-8, in-7)
nmod:in(Inc.-6, Boston-8)
root(ROOT-0, flooded-9)
nummod(universities-11, 21-10)
nmod:npmod(nationwide-12, universities-11)
advmod(flooded-9, nationwide-12)
nmod(flooded-9, with-13)
root(with-13, 10-14)
punct(10-14, ,-15)
nummod(copies-17, 000-16)
root(,-15, copies-17)
case(bits-22, of-18)
nmod:poss(bits-22, its-19)
amod(bits-22, annual-20)
nummod(bits-22, two-21)
nmod:of(copies-17, bits-22)
case(advice-24, of-23)
nmod:of(bits-22, advice-24)
punct(copies-17, ,-25)
det(publication-27, a-26)
appos(copies-17, publication-27)
acl(publication-27, called-28)
punct(Careers-30, ``-29)
xcomp(called-28, Careers-30)
cc(publication-27, and-31)
det(M.B.A-33, the-32)
appos(copies-17, M.B.A-33)
conj:and(publication-27, M.B.A-33)
punct(copies-17, .-34)
punct(copies-17, ''-35)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: flood#inc.

flood :: His public-relations people have flooded reporters with copies of his speeches ./.
nmod:poss(people-3, His-1)
compound(people-3, public-relations-2)
nsubj(flooded-5, people-3)
aux(flooded-5, have-4)
root(ROOT-0, flooded-5)
dobj(flooded-5, reporters-6)
case(copies-8, with-7)
nmod:with(flooded-5, copies-8)
case(speeches-11, of-9)
nmod:poss(speeches-11, his-10)
nmod:of(copies-8, speeches-11)
punct(flooded-5, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#reporters

flood :: Designers there have n't any intention of flooding the U.S. with Siberia-made , scratchy woolen socks or a line of apres-bowling wear ./.
root(ROOT-0, Designers-1)
expl(intention-6, there-2)
aux(intention-6, have-3)
neg(intention-6, n't-4)
det(intention-6, any-5)
acl:relcl(Designers-1, intention-6)
mark(flooding-8, of-7)
acl(intention-6, flooding-8)
det(U.S.-10, the-9)
dobj(flooding-8, U.S.-10)
case(Siberia-made-12, with-11)
nmod:with(flooding-8, Siberia-made-12)
punct(Siberia-made-12, ,-13)
compound(socks-16, scratchy-14)
compound(socks-16, woolen-15)
nmod:with(flooding-8, socks-16)
conj:or(Siberia-made-12, socks-16)
cc(Siberia-made-12, or-17)
det(line-19, a-18)
nmod:with(flooding-8, line-19)
conj:or(Siberia-made-12, line-19)
case(wear-22, of-20)
amod(wear-22, apres-bowling-21)
nmod:of(line-19, wear-22)
punct(Designers-1, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#u.s.

flood :: The glutted oil market could soon be flooded with even more Persian Gulf crude ./.
det(market-4, The-1)
amod(market-4, glutted-2)
compound(market-4, oil-3)
nsubjpass(flooded-8, market-4)
aux(flooded-8, could-5)
advmod(flooded-8, soon-6)
auxpass(flooded-8, be-7)
root(ROOT-0, flooded-8)
case(crude-14, with-9)
advmod(more-11, even-10)
amod(crude-14, more-11)
amod(crude-14, Persian-12)
compound(crude-14, Gulf-13)
nmod:with(flooded-8, crude-14)
punct(flooded-8, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#market

flood :: So far , the outside money has n't flooded in ; Owens-Illinois and affiliates still account for 95 % of the mutual funds ' total assets of $ 267 million ./.
advmod(far-2, So-1)
advmod(flooded-9, far-2)
punct(flooded-9, ,-3)
det(money-6, the-4)
amod(money-6, outside-5)
nsubjpass(flooded-9, money-6)
aux(flooded-9, has-7)
neg(flooded-9, n't-8)
root(ROOT-0, flooded-9)
compound:prt(flooded-9, in-10)
punct(flooded-9, ;-11)
nsubj(account-16, Owens-Illinois-12)
cc(Owens-Illinois-12, and-13)
conj:and(Owens-Illinois-12, affiliates-14)
nsubj(account-16, affiliates-14)
advmod(account-16, still-15)
conj(flooded-9, account-16)
case(%-19, for-17)
nummod(%-19, 95-18)
nmod:for(account-16, %-19)
case(assets-26, of-20)
det(funds-23, the-21)
amod(funds-23, mutual-22)
nmod:poss(assets-26, funds-23)
case(funds-23, '-24)
amod(assets-26, total-25)
nmod:of(%-19, assets-26)
case($-28, of-27)
nmod:of(assets-26, $-28)
compound(million-30, 267-29)
nummod($-28, million-30)
punct(flooded-9, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#money

flood :: Mr. Applegate said he sees the third-quarter earnings reports now flooding the market as the best results that can be expected for some time ./.
compound(Applegate-2, Mr.-1)
nsubj(said-3, Applegate-2)
root(ROOT-0, said-3)
nsubj(sees-5, he-4)
ccomp(said-3, sees-5)
det(reports-9, the-6)
amod(reports-9, third-quarter-7)
compound(reports-9, earnings-8)
dobj(sees-5, reports-9)
advmod(flooding-11, now-10)
acl(reports-9, flooding-11)
det(market-13, the-12)
dobj(flooding-11, market-13)
case(results-17, as-14)
det(results-17, the-15)
amod(results-17, best-16)
nmod:as(flooding-11, results-17)
nsubjpass(expected-21, results-17)
ref(results-17, that-18)
aux(expected-21, can-19)
auxpass(expected-21, be-20)
acl:relcl(results-17, expected-21)
case(time-24, for-22)
det(time-24, some-23)
nmod:for(expected-21, time-24)
punct(said-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#market

flood :: Saudi Arabia is expected to continue flooding the market with oil for at least two more weeks , until two OPEC committees meet to consider how they might rein in production and prop up prices ./.
compound(Arabia-2, Saudi-1)
nsubjpass(expected-4, Arabia-2)
nsubj:xsubj(continue-6, Arabia-2)
auxpass(expected-4, is-3)
root(ROOT-0, expected-4)
mark(continue-6, to-5)
xcomp(expected-4, continue-6)
xcomp(continue-6, flooding-7)
det(market-9, the-8)
dobj(flooding-7, market-9)
case(oil-11, with-10)
nmod:with(flooding-7, oil-11)
case(weeks-17, for-12)
case(least-14, at-13)
nmod:npmod(two-15, least-14)
nummod(weeks-17, two-15)
amod(weeks-17, more-16)
nmod:for(flooding-7, weeks-17)
punct(expected-4, ,-18)
mark(meet-23, until-19)
nummod(committees-22, two-20)
compound(committees-22, OPEC-21)
nsubj(meet-23, committees-22)
nsubj:xsubj(consider-25, committees-22)
advcl(expected-4, meet-23)
mark(consider-25, to-24)
xcomp(meet-23, consider-25)
advmod(rein-29, how-26)
nsubj(rein-29, they-27)
nsubj(prop-33, they-27)
aux(rein-29, might-28)
ccomp(consider-25, rein-29)
case(production-31, in-30)
nmod:in(rein-29, production-31)
cc(rein-29, and-32)
ccomp(consider-25, prop-33)
conj:and(rein-29, prop-33)
compound:prt(prop-33, up-34)
dobj(prop-33, prices-35)
punct(expected-4, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#market

flood :: The specter raised by economic nationalists is that the country will be flooded with foreign materials ./.
det(specter-2, The-1)
nsubj(is-7, specter-2)
acl(specter-2, raised-3)
case(nationalists-6, by-4)
amod(nationalists-6, economic-5)
nmod:by(raised-3, nationalists-6)
root(ROOT-0, is-7)
mark(flooded-13, that-8)
det(country-10, the-9)
nsubjpass(flooded-13, country-10)
aux(flooded-13, will-11)
auxpass(flooded-13, be-12)
ccomp(is-7, flooded-13)
case(materials-16, with-14)
amod(materials-16, foreign-15)
nmod:with(flooded-13, materials-16)
punct(is-7, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#country

flood :: Saudi Arabia is expected to continue flooding the market with oil for at least two more weeks , until two OPEC panels meet to consider ways to curb output and prop up prices ./.
compound(Arabia-2, Saudi-1)
nsubjpass(expected-4, Arabia-2)
nsubj:xsubj(continue-6, Arabia-2)
auxpass(expected-4, is-3)
root(ROOT-0, expected-4)
mark(continue-6, to-5)
xcomp(expected-4, continue-6)
xcomp(continue-6, flooding-7)
det(market-9, the-8)
dobj(flooding-7, market-9)
case(oil-11, with-10)
nmod:with(flooding-7, oil-11)
case(weeks-17, for-12)
case(least-14, at-13)
nmod:npmod(two-15, least-14)
nummod(weeks-17, two-15)
amod(weeks-17, more-16)
nmod:for(flooding-7, weeks-17)
punct(expected-4, ,-18)
mark(meet-23, until-19)
nummod(panels-22, two-20)
compound(panels-22, OPEC-21)
nsubj(meet-23, panels-22)
nsubj:xsubj(consider-25, panels-22)
advcl(expected-4, meet-23)
mark(consider-25, to-24)
xcomp(meet-23, consider-25)
dobj(consider-25, ways-26)
mark(curb-28, to-27)
acl(ways-26, curb-28)
dobj(curb-28, output-29)
cc(curb-28, and-30)
acl(ways-26, prop-31)
conj:and(curb-28, prop-31)
compound:prt(prop-31, up-32)
dobj(prop-31, prices-33)
punct(expected-4, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#market

flood :: Saudi Arabia openly declared war on the rest of OPEC , vowing to continue flooding the market with crude oil until the cartel 's members honor their production quotas ./.
compound(Arabia-2, Saudi-1)
nsubj(declared-4, Arabia-2)
advmod(declared-4, openly-3)
root(ROOT-0, declared-4)
dobj(declared-4, war-5)
case(rest-8, on-6)
det(rest-8, the-7)
nmod:on(war-5, rest-8)
case(OPEC-10, of-9)
nmod:of(rest-8, OPEC-10)
punct(declared-4, ,-11)
advcl(declared-4, vowing-12)
mark(continue-14, to-13)
xcomp(vowing-12, continue-14)
xcomp(continue-14, flooding-15)
det(market-17, the-16)
dobj(flooding-15, market-17)
case(oil-20, with-18)
amod(oil-20, crude-19)
nmod:with(flooding-15, oil-20)
mark(honor-26, until-21)
det(cartel-23, the-22)
nmod:poss(members-25, cartel-23)
case(cartel-23, 's-24)
nsubj(honor-26, members-25)
advcl(continue-14, honor-26)
nmod:poss(quotas-29, their-27)
compound(quotas-29, production-28)
dobj(honor-26, quotas-29)
punct(declared-4, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#market

flood :: Indeed , research is being slowed because state laboratories have been flooded with requests by veterinarians for tests on livestock feed ./.
advmod(slowed-6, Indeed-1)
punct(slowed-6, ,-2)
nsubjpass(slowed-6, research-3)
aux(slowed-6, is-4)
auxpass(slowed-6, being-5)
root(ROOT-0, slowed-6)
mark(flooded-12, because-7)
compound(laboratories-9, state-8)
nsubjpass(flooded-12, laboratories-9)
aux(flooded-12, have-10)
auxpass(flooded-12, been-11)
advcl(slowed-6, flooded-12)
case(requests-14, with-13)
nmod:with(flooded-12, requests-14)
case(veterinarians-16, by-15)
nmod:by(requests-14, veterinarians-16)
case(tests-18, for-17)
nmod:for(requests-14, tests-18)
case(feed-21, on-19)
compound(feed-21, livestock-20)
nmod:on(tests-18, feed-21)
punct(slowed-6, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#laboratories

flood :: In the weeks that followed , South Korean television sets , Taiwanese cassette players and imported clothes flooded shop windows -- apparently the harvest of a new policy that allows businessmen to import goods with foreign currency held abroad ./.
case(weeks-3, In-1)
det(weeks-3, the-2)
nsubj(followed-5, weeks-3)
nmod:in(flooded-18, weeks-3)
ref(weeks-3, that-4)
acl:relcl(weeks-3, followed-5)
punct(flooded-18, ,-6)
amod(Korean-8, South-7)
amod(sets-10, Korean-8)
compound(sets-10, television-9)
nsubj(flooded-18, sets-10)
punct(sets-10, ,-11)
amod(players-14, Taiwanese-12)
compound(players-14, cassette-13)
conj:and(sets-10, players-14)
nsubj(flooded-18, players-14)
cc(sets-10, and-15)
amod(clothes-17, imported-16)
conj:and(sets-10, clothes-17)
nsubj(flooded-18, clothes-17)
root(ROOT-0, flooded-18)
compound(windows-20, shop-19)
dobj(flooded-18, windows-20)
punct(flooded-18, ---21)
advmod(harvest-24, apparently-22)
det(harvest-24, the-23)
nsubj(held-38, harvest-24)
case(policy-28, of-25)
det(policy-28, a-26)
amod(policy-28, new-27)
nmod:of(harvest-24, policy-28)
nsubj(allows-30, policy-28)
ref(policy-28, that-29)
acl:relcl(policy-28, allows-30)
dobj(allows-30, businessmen-31)
nsubj:xsubj(import-33, businessmen-31)
mark(import-33, to-32)
xcomp(allows-30, import-33)
dobj(import-33, goods-34)
case(currency-37, with-35)
amod(currency-37, foreign-36)
nmod:with(import-33, currency-37)
parataxis(flooded-18, held-38)
advmod(held-38, abroad-39)
punct(flooded-18, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#windows

flood :: With so many people earning free tickets so easily , the market is flooded with coupons , depressing their value ./.
root(ROOT-0, With-1)
advmod(many-3, so-2)
amod(people-4, many-3)
root(With-1, people-4)
advcl(flooded-14, earning-5)
amod(tickets-7, free-6)
dobj(earning-5, tickets-7)
advmod(easily-9, so-8)
advmod(earning-5, easily-9)
punct(flooded-14, ,-10)
det(market-12, the-11)
nsubjpass(flooded-14, market-12)
auxpass(flooded-14, is-13)
acl:relcl(people-4, flooded-14)
case(coupons-16, with-15)
nmod:with(flooded-14, coupons-16)
punct(flooded-14, ,-17)
xcomp(flooded-14, depressing-18)
nmod:poss(value-20, their-19)
dobj(depressing-18, value-20)
punct(people-4, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#market

flood :: PRESS RELEASES about lawyers are flooding newspaper offices as the profession becomes more aggressive about marketing ./.
compound(RELEASES-2, PRESS-1)
nsubj(flooding-6, RELEASES-2)
case(lawyers-4, about-3)
nmod:about(RELEASES-2, lawyers-4)
aux(flooding-6, are-5)
root(ROOT-0, flooding-6)
compound(offices-8, newspaper-7)
dobj(flooding-6, offices-8)
mark(becomes-12, as-9)
det(profession-11, the-10)
nsubj(becomes-12, profession-11)
advcl(flooding-6, becomes-12)
advmod(aggressive-14, more-13)
xcomp(becomes-12, aggressive-14)
case(marketing-16, about-15)
nmod:about(aggressive-14, marketing-16)
punct(flooding-6, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#offices

flood :: This has given a sheepskin a rarity value unimagined in the 1970s , when the well-educated flooded the labor market and the cabbie with a doctorate drove his way into national folklore ./.
nsubj(given-3, This-1)
aux(given-3, has-2)
root(ROOT-0, given-3)
det(sheepskin-5, a-4)
iobj(given-3, sheepskin-5)
det(value-8, a-6)
compound(value-8, rarity-7)
dobj(given-3, value-8)
acl(value-8, unimagined-9)
case(1970s-12, in-10)
det(1970s-12, the-11)
nmod:in(unimagined-9, 1970s-12)
punct(value-8, ,-13)
advmod(flooded-17, when-14)
det(well-educated-16, the-15)
nsubj(flooded-17, well-educated-16)
advcl(given-3, flooded-17)
det(market-20, the-18)
compound(market-20, labor-19)
nsubj(drove-27, market-20)
cc(market-20, and-21)
det(cabbie-23, the-22)
conj:and(market-20, cabbie-23)
nsubj(drove-27, cabbie-23)
case(doctorate-26, with-24)
det(doctorate-26, a-25)
nmod:with(cabbie-23, doctorate-26)
ccomp(flooded-17, drove-27)
nmod:poss(way-29, his-28)
dobj(drove-27, way-29)
case(folklore-32, into-30)
amod(folklore-32, national-31)
nmod:into(drove-27, folklore-32)
punct(given-3, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#well-educated

flood :: Most of the land will be flooded when the project is finished ./.
nsubjpass(flooded-7, Most-1)
case(land-4, of-2)
det(land-4, the-3)
nmod:of(Most-1, land-4)
aux(flooded-7, will-5)
auxpass(flooded-7, be-6)
root(ROOT-0, flooded-7)
advmod(finished-12, when-8)
det(project-10, the-9)
nsubjpass(finished-12, project-10)
auxpass(finished-12, is-11)
advcl(flooded-7, finished-12)
punct(flooded-7, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#most

flood :: He said that in the wake of the airliner incident , U.S. intelligence agencies have been flooded with warnings , many of them of questionable reliability , of possible Iranian-sponsored attacks ./.
nsubj(said-2, He-1)
root(ROOT-0, said-2)
mark(flooded-17, that-3)
case(wake-6, in-4)
det(wake-6, the-5)
nmod:in(flooded-17, wake-6)
case(incident-10, of-7)
det(incident-10, the-8)
compound(incident-10, airliner-9)
nmod:of(wake-6, incident-10)
punct(flooded-17, ,-11)
compound(agencies-14, U.S.-12)
compound(agencies-14, intelligence-13)
nsubjpass(flooded-17, agencies-14)
aux(flooded-17, have-15)
auxpass(flooded-17, been-16)
ccomp(said-2, flooded-17)
case(warnings-19, with-18)
nmod:with(flooded-17, warnings-19)
punct(flooded-17, ,-20)
dobj(flooded-17, many-21)
case(them-23, of-22)
nmod:of(many-21, them-23)
case(reliability-26, of-24)
amod(reliability-26, questionable-25)
nmod:of(many-21, reliability-26)
punct(many-21, ,-27)
case(attacks-31, of-28)
amod(attacks-31, possible-29)
amod(attacks-31, Iranian-sponsored-30)
nmod:of(many-21, attacks-31)
punct(said-2, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#them

flood :: Ronald Simmons , the board 's president , said the meeting was scheduled because the board has been `` flooded with phone calls '' for several weeks about rumors of a sweeping IBM cut of the Boca Raton work force ./.
compound(Simmons-2, Ronald-1)
nsubj(said-9, Simmons-2)
punct(Simmons-2, ,-3)
det(board-5, the-4)
nmod:poss(president-7, board-5)
case(board-5, 's-6)
appos(Simmons-2, president-7)
punct(Simmons-2, ,-8)
root(ROOT-0, said-9)
det(meeting-11, the-10)
nsubjpass(scheduled-13, meeting-11)
auxpass(scheduled-13, was-12)
ccomp(said-9, scheduled-13)
mark(flooded-20, because-14)
det(board-16, the-15)
nsubjpass(flooded-20, board-16)
aux(flooded-20, has-17)
auxpass(flooded-20, been-18)
punct(flooded-20, ``-19)
advcl(scheduled-13, flooded-20)
case(calls-23, with-21)
compound(calls-23, phone-22)
nmod:with(flooded-20, calls-23)
punct(calls-23, ''-24)
case(weeks-27, for-25)
amod(weeks-27, several-26)
nmod:for(calls-23, weeks-27)
case(rumors-29, about-28)
nmod:about(weeks-27, rumors-29)
case(cut-34, of-30)
det(cut-34, a-31)
amod(cut-34, sweeping-32)
compound(cut-34, IBM-33)
nmod:of(rumors-29, cut-34)
case(force-40, of-35)
det(force-40, the-36)
compound(force-40, Boca-37)
compound(force-40, Raton-38)
compound(force-40, work-39)
nmod:of(cut-34, force-40)
punct(said-9, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#board

flood :: The department 's Commodity Credit Corp. has flooded the market with corn `` to contain the damage to the livestock sector from rising prices or a shortage of feed , '' said Ewen Wilson , assistant agriculture secretary for economics ./.
det(department-2, The-1)
nmod:poss(Corp.-6, department-2)
case(department-2, 's-3)
compound(Corp.-6, Commodity-4)
compound(Corp.-6, Credit-5)
nsubj(flooded-8, Corp.-6)
aux(flooded-8, has-7)
ccomp(said-32, flooded-8)
det(market-10, the-9)
dobj(flooded-8, market-10)
case(corn-12, with-11)
nmod:with(flooded-8, corn-12)
punct(corn-12, ``-13)
mark(contain-15, to-14)
acl(corn-12, contain-15)
det(damage-17, the-16)
dobj(contain-15, damage-17)
case(sector-21, to-18)
det(sector-21, the-19)
compound(sector-21, livestock-20)
nmod:to(damage-17, sector-21)
case(prices-24, from-22)
amod(prices-24, rising-23)
nmod:from(damage-17, prices-24)
cc(prices-24, or-25)
det(shortage-27, a-26)
nmod:from(damage-17, shortage-27)
conj:or(prices-24, shortage-27)
case(feed-29, of-28)
nmod:of(shortage-27, feed-29)
punct(said-32, ,-30)
punct(said-32, ''-31)
root(ROOT-0, said-32)
compound(Wilson-34, Ewen-33)
nsubj(said-32, Wilson-34)
punct(Wilson-34, ,-35)
amod(secretary-38, assistant-36)
compound(secretary-38, agriculture-37)
appos(Wilson-34, secretary-38)
case(economics-40, for-39)
nmod:for(secretary-38, economics-40)
punct(said-32, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#market

flood :: `` We 've tried to set up a barrier against such people , '' says an official at one institute that has been flooded with applications ./.
punct(says-15, ``-1)
nsubj(tried-4, We-2)
nsubj:xsubj(set-6, We-2)
aux(tried-4, 've-3)
ccomp(says-15, tried-4)
mark(set-6, to-5)
xcomp(tried-4, set-6)
compound:prt(set-6, up-7)
det(barrier-9, a-8)
dobj(set-6, barrier-9)
case(people-12, against-10)
amod(people-12, such-11)
nmod:against(barrier-9, people-12)
punct(says-15, ,-13)
punct(says-15, ''-14)
root(ROOT-0, says-15)
det(official-17, an-16)
nsubj(says-15, official-17)
nsubjpass(flooded-24, official-17)
case(institute-20, at-18)
nummod(institute-20, one-19)
nmod:at(official-17, institute-20)
ref(official-17, that-21)
aux(flooded-24, has-22)
auxpass(flooded-24, been-23)
acl:relcl(official-17, flooded-24)
case(applications-26, with-25)
nmod:with(flooded-24, applications-26)
punct(says-15, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#official

flood :: The situation shows how the 1985 farm legislation , which flooded the farm economy with cash the past three years , also expanded the government 's exposure to losses ./.
det(situation-2, The-1)
nsubj(shows-3, situation-2)
root(ROOT-0, shows-3)
advmod(expanded-23, how-4)
det(legislation-8, the-5)
nummod(legislation-8, 1985-6)
compound(legislation-8, farm-7)
nsubj(flooded-11, legislation-8)
nsubj(expanded-23, legislation-8)
punct(legislation-8, ,-9)
ref(legislation-8, which-10)
acl:relcl(legislation-8, flooded-11)
det(economy-14, the-12)
compound(economy-14, farm-13)
dobj(flooded-11, economy-14)
case(cash-16, with-15)
nmod:with(flooded-11, cash-16)
det(years-20, the-17)
amod(years-20, past-18)
nummod(years-20, three-19)
nmod:tmod(cash-16, years-20)
punct(legislation-8, ,-21)
advmod(expanded-23, also-22)
ccomp(shows-3, expanded-23)
det(government-25, the-24)
nmod:poss(exposure-27, government-25)
case(government-25, 's-26)
dobj(expanded-23, exposure-27)
case(losses-29, to-28)
nmod:to(exposure-27, losses-29)
punct(shows-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#economy

flood :: But after the proposal was announced , members of the Aircraft Owners and Pilots Association flooded Congress and the FAA with 80 , 000 letters -- a record number for an aviation issue ./.
cc(flooded-16, But-1)
mark(announced-6, after-2)
det(proposal-4, the-3)
nsubjpass(announced-6, proposal-4)
auxpass(announced-6, was-5)
advcl(flooded-16, announced-6)
punct(flooded-16, ,-7)
nsubj(flooded-16, members-8)
case(Owners-12, of-9)
det(Owners-12, the-10)
compound(Owners-12, Aircraft-11)
nmod:of(members-8, Owners-12)
cc(Owners-12, and-13)
compound(Association-15, Pilots-14)
nmod:of(members-8, Association-15)
conj:and(Owners-12, Association-15)
root(ROOT-0, flooded-16)
dobj(flooded-16, Congress-17)
cc(Congress-17, and-18)
det(FAA-20, the-19)
dobj(flooded-16, FAA-20)
conj:and(Congress-17, FAA-20)
case(80-22, with-21)
nmod:with(flooded-16, 80-22)
punct(80-22, ,-23)
nummod(letters-25, 000-24)
appos(80-22, letters-25)
punct(80-22, ---26)
det(number-29, a-27)
compound(number-29, record-28)
dep(80-22, number-29)
case(issue-33, for-30)
det(issue-33, an-31)
compound(issue-33, aviation-32)
nmod:for(number-29, issue-33)
punct(flooded-16, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#congress

flood :: `` This is serious because the financial community is getting flooded with these things , '' said Robert Siller , an FBI agent investigating the Ohio incidents ./.
punct(said-17, ``-1)
nsubj(serious-4, This-2)
cop(serious-4, is-3)
ccomp(said-17, serious-4)
mark(getting-10, because-5)
det(community-8, the-6)
amod(community-8, financial-7)
nsubj(getting-10, community-8)
aux(getting-10, is-9)
advcl(serious-4, getting-10)
xcomp(getting-10, flooded-11)
case(things-14, with-12)
det(things-14, these-13)
nmod:with(flooded-11, things-14)
punct(said-17, ,-15)
punct(said-17, ''-16)
root(ROOT-0, said-17)
compound(Siller-19, Robert-18)
nsubj(said-17, Siller-19)
punct(Siller-19, ,-20)
det(agent-23, an-21)
compound(agent-23, FBI-22)
appos(Siller-19, agent-23)
acl(agent-23, investigating-24)
det(incidents-27, the-25)
compound(incidents-27, Ohio-26)
dobj(investigating-24, incidents-27)
punct(said-17, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#things

flood :: Fusion charges that shortly after it sold a high-intensity microwave lamp to Mitsubishi in 1977 , the Japanese company `` reverse-engineered '' the product and flooded the Japanese Patent Office with 200 separate claims to this type of technology ./.
compound(charges-2, Fusion-1)
root(ROOT-0, charges-2)
nsubj(sold-7, charges-2)
ref(charges-2, that-3)
advmod(sold-7, shortly-4)
mark(sold-7, after-5)
nsubj(sold-7, it-6)
acl:relcl(charges-2, sold-7)
det(lamp-11, a-8)
amod(lamp-11, high-intensity-9)
compound(lamp-11, microwave-10)
dobj(sold-7, lamp-11)
case(Mitsubishi-13, to-12)
nmod:to(sold-7, Mitsubishi-13)
case(1977-15, in-14)
nmod:in(sold-7, 1977-15)
punct(charges-2, ,-16)
det(company-19, the-17)
amod(company-19, Japanese-18)
appos(charges-2, company-19)
punct(reverse-engineered-21, ``-20)
dep(company-19, reverse-engineered-21)
punct(reverse-engineered-21, ''-22)
det(product-24, the-23)
dobj(reverse-engineered-21, product-24)
cc(reverse-engineered-21, and-25)
dep(company-19, flooded-26)
conj:and(reverse-engineered-21, flooded-26)
det(Office-30, the-27)
amod(Office-30, Japanese-28)
compound(Office-30, Patent-29)
dobj(flooded-26, Office-30)
case(claims-34, with-31)
nummod(claims-34, 200-32)
amod(claims-34, separate-33)
nmod:with(flooded-26, claims-34)
case(type-37, to-35)
det(type-37, this-36)
nmod:to(claims-34, type-37)
case(technology-39, of-38)
nmod:of(type-37, technology-39)
punct(charges-2, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#office

flood :: When it was first dedicated , residents flooded local newspapers with letters saying they hated it ; they likened it to a banana or a kid relieving himself from a bridge ./.
advmod(dedicated-5, When-1)
nsubjpass(dedicated-5, it-2)
auxpass(dedicated-5, was-3)
advmod(dedicated-5, first-4)
advcl(flooded-8, dedicated-5)
punct(flooded-8, ,-6)
nsubj(flooded-8, residents-7)
root(ROOT-0, flooded-8)
amod(newspapers-10, local-9)
dobj(flooded-8, newspapers-10)
mark(saying-13, with-11)
nsubj(saying-13, letters-12)
advcl(flooded-8, saying-13)
nsubj(hated-15, they-14)
ccomp(saying-13, hated-15)
dobj(hated-15, it-16)
punct(flooded-8, ;-17)
nsubj(likened-19, they-18)
parataxis(flooded-8, likened-19)
dobj(likened-19, it-20)
case(banana-23, to-21)
det(banana-23, a-22)
nmod:to(likened-19, banana-23)
cc(banana-23, or-24)
det(kid-26, a-25)
nmod:to(likened-19, kid-26)
conj:or(banana-23, kid-26)
acl(kid-26, relieving-27)
dobj(relieving-27, himself-28)
case(bridge-31, from-29)
det(bridge-31, a-30)
nmod:from(relieving-27, bridge-31)
punct(flooded-8, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#newspapers

flood :: While much of the world points to a still-stubborn 8 % unemployment rate , and argues that providing jobs for these 2.2 million Germans would create a new consumer demand , German officials insist that flooding the economy with money wo n't necessarily create jobs ./.
root(ROOT-0, While-1)
dep(While-1, much-2)
case(points-6, of-3)
det(points-6, the-4)
compound(points-6, world-5)
nmod:of(much-2, points-6)
case(rate-13, to-7)
det(rate-13, a-8)
amod(rate-13, still-stubborn-9)
compound(%-11, 8-10)
amod(rate-13, %-11)
compound(rate-13, unemployment-12)
nmod:to(much-2, rate-13)
punct(much-2, ,-14)
cc(much-2, and-15)
dep(While-1, argues-16)
conj:and(much-2, argues-16)
mark(create-26, that-17)
csubj(create-26, providing-18)
dobj(providing-18, jobs-19)
case(Germans-24, for-20)
det(Germans-24, these-21)
compound(million-23, 2.2-22)
nummod(Germans-24, million-23)
nmod:for(providing-18, Germans-24)
aux(create-26, would-25)
ccomp(argues-16, create-26)
det(demand-30, a-27)
amod(demand-30, new-28)
compound(demand-30, consumer-29)
dobj(create-26, demand-30)
mark(create-44, demand-30)
punct(demand-30, ,-31)
amod(officials-33, German-32)
nsubj(insist-34, officials-33)
acl:relcl(demand-30, insist-34)
ref(demand-30, that-35)
csubj(create-44, flooding-36)
det(economy-38, the-37)
dobj(flooding-36, economy-38)
case(money-40, with-39)
nmod:with(flooding-36, money-40)
aux(create-44, wo-41)
neg(create-44, n't-42)
advmod(create-44, necessarily-43)
ccomp(insist-34, create-44)
dobj(create-44, jobs-45)
punct(While-1, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#economy

flood :: Supermarket chains are n't willing to pay much for beef because they 've been flooded with cheap poultry ./.
compound(chains-2, Supermarket-1)
nsubj(willing-5, chains-2)
nsubj:xsubj(pay-7, chains-2)
cop(willing-5, are-3)
neg(willing-5, n't-4)
root(ROOT-0, willing-5)
mark(pay-7, to-6)
xcomp(willing-5, pay-7)
dobj(pay-7, much-8)
case(beef-10, for-9)
nmod:for(pay-7, beef-10)
mark(flooded-15, because-11)
nsubjpass(flooded-15, they-12)
aux(flooded-15, 've-13)
auxpass(flooded-15, been-14)
advcl(willing-5, flooded-15)
case(poultry-18, with-16)
amod(poultry-18, cheap-17)
nmod:with(flooded-15, poultry-18)
punct(willing-5, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#they

flood :: Letters flooded in to Social Work , most of them chastising both the authors and the respected journal , which has a circulation of 116 , 000 ./.
ccomp(chastising-11, Letters-1)
acl(Letters-1, flooded-2)
advmod(flooded-2, in-3)
case(Work-6, to-4)
amod(Work-6, Social-5)
nmod:to(flooded-2, Work-6)
punct(chastising-11, ,-7)
nsubj(chastising-11, most-8)
case(them-10, of-9)
nmod:of(most-8, them-10)
root(ROOT-0, chastising-11)
cc:preconj(authors-14, both-12)
det(authors-14, the-13)
dobj(chastising-11, authors-14)
cc(authors-14, and-15)
det(journal-18, the-16)
amod(journal-18, respected-17)
dobj(chastising-11, journal-18)
conj:and(authors-14, journal-18)
nsubj(has-21, journal-18)
punct(journal-18, ,-19)
ref(journal-18, which-20)
acl:relcl(journal-18, has-21)
det(circulation-23, a-22)
dobj(has-21, circulation-23)
case(116-25, of-24)
nmod:of(circulation-23, 116-25)
punct(116-25, ,-26)
appos(116-25, 000-27)
punct(chastising-11, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#work

flood :: Moreover , savings and loan associations , the main housing lenders , have been flooded with deposits since the stock-market crash ./.
advmod(flooded-15, Moreover-1)
punct(flooded-15, ,-2)
nsubjpass(flooded-15, savings-3)
cc(savings-3, and-4)
compound(associations-6, loan-5)
conj:and(savings-3, associations-6)
nsubjpass(flooded-15, associations-6)
punct(savings-3, ,-7)
det(lenders-11, the-8)
amod(lenders-11, main-9)
compound(lenders-11, housing-10)
appos(savings-3, lenders-11)
punct(savings-3, ,-12)
aux(flooded-15, have-13)
auxpass(flooded-15, been-14)
root(ROOT-0, flooded-15)
case(deposits-17, with-16)
nmod:with(flooded-15, deposits-17)
case(crash-21, since-18)
det(crash-21, the-19)
compound(crash-21, stock-market-20)
nmod:since(flooded-15, crash-21)
punct(flooded-15, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#savings

flood :: `` If the S & P would 've closed , sell orders would 've flooded New York '' and sent the stock market sharply lower , said one harried trader overlooking the raucous S & P trading pit ./.
punct(said-27, ``-1)
mark(closed-9, If-2)
det(S-4, the-3)
nsubj(closed-9, S-4)
cc(S-4, &-5)
conj:&(S-4, P-6)
nsubj(closed-9, P-6)
aux(closed-9, would-7)
aux(closed-9, 've-8)
advcl(flooded-15, closed-9)
punct(flooded-15, ,-10)
amod(orders-12, sell-11)
nsubj(flooded-15, orders-12)
nsubj(sent-20, orders-12)
aux(flooded-15, would-13)
aux(flooded-15, 've-14)
ccomp(said-27, flooded-15)
compound(York-17, New-16)
dobj(flooded-15, York-17)
punct(flooded-15, ''-18)
cc(flooded-15, and-19)
conj:and(flooded-15, sent-20)
ccomp(said-27, sent-20)
det(market-23, the-21)
compound(market-23, stock-22)
dobj(sent-20, market-23)
advmod(lower-25, sharply-24)
advmod(sent-20, lower-25)
punct(said-27, ,-26)
root(ROOT-0, said-27)
nsubj(harried-29, one-28)
ccomp(said-27, harried-29)
dobj(harried-29, trader-30)
acl(trader-30, overlooking-31)
det(S-34, the-32)
amod(S-34, raucous-33)
dobj(overlooking-31, S-34)
cc(S-34, &-35)
compound(pit-38, P-36)
compound(pit-38, trading-37)
dobj(overlooking-31, pit-38)
conj:&(S-34, pit-38)
punct(said-27, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#york

flood :: Carole Pfeffer put an ad seeking them in a trade publication and was flooded with close to 1 , 000 pictures ./.
compound(Pfeffer-2, Carole-1)
nsubj(put-3, Pfeffer-2)
nsubjpass(flooded-14, Pfeffer-2)
root(ROOT-0, put-3)
det(ad-5, an-4)
dobj(put-3, ad-5)
acl(ad-5, seeking-6)
dobj(seeking-6, them-7)
case(publication-11, in-8)
det(publication-11, a-9)
compound(publication-11, trade-10)
nmod:in(seeking-6, publication-11)
cc(put-3, and-12)
auxpass(flooded-14, was-13)
conj:and(put-3, flooded-14)
case(pictures-21, with-15)
case(1-18, close-16)
mwe(close-16, to-17)
nmod:close_to(pictures-21, 1-18)
punct(1-18, ,-19)
nummod(pictures-21, 000-20)
nmod:with(flooded-14, pictures-21)
punct(put-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#pfeffer

flood :: Researchers at the University of Illinois , which Mr. Harvey said may have found a chemical that prevents the disease , were also flooded with phone calls ./.
nsubjpass(flooded-24, Researchers-1)
case(University-4, at-2)
det(University-4, the-3)
nmod:at(Researchers-1, University-4)
dobj(said-11, University-4)
case(Illinois-6, of-5)
nmod:of(University-4, Illinois-6)
punct(University-4, ,-7)
ref(University-4, which-8)
compound(Harvey-10, Mr.-9)
nsubj(said-11, Harvey-10)
acl:relcl(University-4, said-11)
aux(found-14, may-12)
aux(found-14, have-13)
ccomp(said-11, found-14)
det(chemical-16, a-15)
dobj(found-14, chemical-16)
nsubj(prevents-18, chemical-16)
ref(chemical-16, that-17)
acl:relcl(chemical-16, prevents-18)
det(disease-20, the-19)
dobj(prevents-18, disease-20)
punct(University-4, ,-21)
auxpass(flooded-24, were-22)
advmod(flooded-24, also-23)
root(ROOT-0, flooded-24)
case(calls-27, with-25)
compound(calls-27, phone-26)
nmod:with(flooded-24, calls-27)
punct(flooded-24, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#researchers

flood :: If the area were flooded , these mud-embedded bombs might loosen and float to the surface ./.
mark(flooded-5, If-1)
det(area-3, the-2)
nsubjpass(flooded-5, area-3)
auxpass(flooded-5, were-4)
advcl(loosen-11, flooded-5)
punct(loosen-11, ,-6)
det(bombs-9, these-7)
amod(bombs-9, mud-embedded-8)
nsubj(loosen-11, bombs-9)
nsubj(float-13, bombs-9)
aux(loosen-11, might-10)
root(ROOT-0, loosen-11)
cc(loosen-11, and-12)
conj:and(loosen-11, float-13)
case(surface-16, to-14)
det(surface-16, the-15)
nmod:to(float-13, surface-16)
punct(loosen-11, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#area

flood :: The vice president 's confrontation with Mr. Rather also has raised further questions about the media 's performance this political season , as CBS and its affiliates were flooded with phone calls , mostly critical of Mr. Rather ./.
det(president-3, The-1)
compound(president-3, vice-2)
nmod:poss(confrontation-5, president-3)
case(president-3, 's-4)
nsubj(raised-11, confrontation-5)
case(Rather-8, with-6)
compound(Rather-8, Mr.-7)
nmod:with(confrontation-5, Rather-8)
advmod(raised-11, also-9)
aux(raised-11, has-10)
root(ROOT-0, raised-11)
amod(questions-13, further-12)
dobj(raised-11, questions-13)
case(performance-18, about-14)
det(media-16, the-15)
nmod:poss(performance-18, media-16)
case(media-16, 's-17)
nmod:about(questions-13, performance-18)
det(season-21, this-19)
amod(season-21, political-20)
nmod:tmod(raised-11, season-21)
punct(raised-11, ,-22)
case(CBS-24, as-23)
nmod:as(flooded-29, CBS-24)
cc(CBS-24, and-25)
nmod:poss(affiliates-27, its-26)
conj:and(CBS-24, affiliates-27)
nmod:as(flooded-29, affiliates-27)
auxpass(flooded-29, were-28)
parataxis(raised-11, flooded-29)
case(calls-32, with-30)
compound(calls-32, phone-31)
nmod:with(flooded-29, calls-32)
punct(flooded-29, ,-33)
advmod(critical-35, mostly-34)
xcomp(flooded-29, critical-35)
case(Rather-38, of-36)
compound(Rather-38, Mr.-37)
nmod:of(critical-35, Rather-38)
punct(raised-11, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#were

flood :: `` If the S & P would 've closed , sell orders would 've flooded New York '' and sent the stock market sharply lower , said one harried trader overlooking the raucous S & P trading pit ./.
punct(said-27, ``-1)
mark(closed-9, If-2)
det(S-4, the-3)
nsubj(closed-9, S-4)
cc(S-4, &-5)
conj:&(S-4, P-6)
nsubj(closed-9, P-6)
aux(closed-9, would-7)
aux(closed-9, 've-8)
advcl(flooded-15, closed-9)
punct(flooded-15, ,-10)
amod(orders-12, sell-11)
nsubj(flooded-15, orders-12)
nsubj(sent-20, orders-12)
aux(flooded-15, would-13)
aux(flooded-15, 've-14)
ccomp(said-27, flooded-15)
compound(York-17, New-16)
dobj(flooded-15, York-17)
punct(flooded-15, ''-18)
cc(flooded-15, and-19)
conj:and(flooded-15, sent-20)
ccomp(said-27, sent-20)
det(market-23, the-21)
compound(market-23, stock-22)
dobj(sent-20, market-23)
advmod(lower-25, sharply-24)
advmod(sent-20, lower-25)
punct(said-27, ,-26)
root(ROOT-0, said-27)
nsubj(harried-29, one-28)
ccomp(said-27, harried-29)
dobj(harried-29, trader-30)
acl(trader-30, overlooking-31)
det(S-34, the-32)
amod(S-34, raucous-33)
dobj(overlooking-31, S-34)
cc(S-34, &-35)
compound(pit-38, P-36)
compound(pit-38, trading-37)
dobj(overlooking-31, pit-38)
conj:&(S-34, pit-38)
punct(said-27, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#york

flood :: Carole Pfeffer put an ad seeking them in a trade publication and was flooded with close to 1 , 000 pictures ./.
compound(Pfeffer-2, Carole-1)
nsubj(put-3, Pfeffer-2)
nsubjpass(flooded-14, Pfeffer-2)
root(ROOT-0, put-3)
det(ad-5, an-4)
dobj(put-3, ad-5)
acl(ad-5, seeking-6)
dobj(seeking-6, them-7)
case(publication-11, in-8)
det(publication-11, a-9)
compound(publication-11, trade-10)
nmod:in(seeking-6, publication-11)
cc(put-3, and-12)
auxpass(flooded-14, was-13)
conj:and(put-3, flooded-14)
case(pictures-21, with-15)
case(1-18, close-16)
mwe(close-16, to-17)
nmod:close_to(pictures-21, 1-18)
punct(1-18, ,-19)
nummod(pictures-21, 000-20)
nmod:with(flooded-14, pictures-21)
punct(put-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#pfeffer

flood :: And gang killings -- though still occurring at the rate of several a week -- have declined sharply since the police flooded the streets ./.
cc(declined-17, And-1)
compound(killings-3, gang-2)
nsubj(declined-17, killings-3)
punct(occurring-7, ---4)
mark(occurring-7, though-5)
advmod(occurring-7, still-6)
dep(killings-3, occurring-7)
case(rate-10, at-8)
det(rate-10, the-9)
nmod:at(occurring-7, rate-10)
case(week-14, of-11)
amod(week-14, several-12)
det(week-14, a-13)
nmod:of(rate-10, week-14)
punct(occurring-7, ---15)
aux(declined-17, have-16)
root(ROOT-0, declined-17)
advmod(declined-17, sharply-18)
mark(flooded-22, since-19)
det(police-21, the-20)
nsubj(flooded-22, police-21)
advcl(declined-17, flooded-22)
det(streets-24, the-23)
dobj(flooded-22, streets-24)
punct(declined-17, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#streets

flood :: The vice president 's confrontation with Mr. Rather also has raised further questions about the media 's performance this political season , as CBS and its affiliates were flooded with phone calls , mostly critical of Mr. Rather ./.
det(president-3, The-1)
compound(president-3, vice-2)
nmod:poss(confrontation-5, president-3)
case(president-3, 's-4)
nsubj(raised-11, confrontation-5)
case(Rather-8, with-6)
compound(Rather-8, Mr.-7)
nmod:with(confrontation-5, Rather-8)
advmod(raised-11, also-9)
aux(raised-11, has-10)
root(ROOT-0, raised-11)
amod(questions-13, further-12)
dobj(raised-11, questions-13)
case(performance-18, about-14)
det(media-16, the-15)
nmod:poss(performance-18, media-16)
case(media-16, 's-17)
nmod:about(questions-13, performance-18)
det(season-21, this-19)
amod(season-21, political-20)
nmod:tmod(raised-11, season-21)
punct(raised-11, ,-22)
case(CBS-24, as-23)
nmod:as(flooded-29, CBS-24)
cc(CBS-24, and-25)
nmod:poss(affiliates-27, its-26)
conj:and(CBS-24, affiliates-27)
nmod:as(flooded-29, affiliates-27)
auxpass(flooded-29, were-28)
parataxis(raised-11, flooded-29)
case(calls-32, with-30)
compound(calls-32, phone-31)
nmod:with(flooded-29, calls-32)
punct(flooded-29, ,-33)
advmod(critical-35, mostly-34)
xcomp(flooded-29, critical-35)
case(Rather-38, of-36)
compound(Rather-38, Mr.-37)
nmod:of(critical-35, Rather-38)
punct(raised-11, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#were

flood :: Mr. Cicerone and his colleagues slogged into flooded rice paddies a few years ago to take methane measurements ./.
compound(Cicerone-2, Mr.-1)
nsubj(slogged-6, Cicerone-2)
nsubj:xsubj(take-16, Cicerone-2)
cc(Cicerone-2, and-3)
nmod:poss(colleagues-5, his-4)
conj:and(Cicerone-2, colleagues-5)
nsubj(slogged-6, colleagues-5)
nsubj:xsubj(take-16, colleagues-5)
root(ROOT-0, slogged-6)
case(paddies-10, into-7)
amod(paddies-10, flooded-8)
compound(paddies-10, rice-9)
nmod:into(slogged-6, paddies-10)
det(years-13, a-11)
amod(years-13, few-12)
nmod:npmod(ago-14, years-13)
advmod(slogged-6, ago-14)
mark(take-16, to-15)
xcomp(slogged-6, take-16)
compound(measurements-18, methane-17)
dobj(take-16, measurements-18)
punct(slogged-6, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#paddies

flood :: One morning , he finds that the staff was able to turn back young fans trying to get up to Mick Jagger 's suite and that a pipe broke and flooded room 928 , which luckily was unoccupied ./.
nummod(morning-2, One-1)
nmod:tmod(finds-5, morning-2)
punct(finds-5, ,-3)
nsubj(finds-5, he-4)
root(ROOT-0, finds-5)
mark(able-10, that-6)
det(staff-8, the-7)
nsubj(able-10, staff-8)
nsubj:xsubj(turn-12, staff-8)
cop(able-10, was-9)
ccomp(finds-5, able-10)
mark(turn-12, to-11)
xcomp(able-10, turn-12)
compound:prt(turn-12, back-13)
amod(fans-15, young-14)
nsubj(trying-16, fans-15)
nsubj:xsubj(get-18, fans-15)
dep(turn-12, trying-16)
mark(get-18, to-17)
xcomp(trying-16, get-18)
compound:prt(get-18, up-19)
case(suite-24, to-20)
compound(Jagger-22, Mick-21)
nmod:poss(suite-24, Jagger-22)
case(Jagger-22, 's-23)
nmod:to(get-18, suite-24)
cc(trying-16, and-25)
mark(broke-29, that-26)
det(pipe-28, a-27)
nsubj(broke-29, pipe-28)
nsubj(flooded-31, pipe-28)
dep(turn-12, broke-29)
conj:and(trying-16, broke-29)
cc(broke-29, and-30)
conj:and(trying-16, flooded-31)
conj:and(broke-29, flooded-31)
dobj(broke-29, room-32)
nsubj(unoccupied-38, room-32)
nummod(room-32, 928-33)
punct(room-32, ,-34)
ref(room-32, which-35)
advmod(unoccupied-38, luckily-36)
cop(unoccupied-38, was-37)
acl:relcl(room-32, unoccupied-38)
punct(finds-5, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#pipe

flood :: Osman Geragandi Koko looked at the mounds of mud above the surface of water covering the flooded shanty town of Jebel Kusha ./.
compound(Koko-3, Osman-1)
compound(Koko-3, Geragandi-2)
nsubj(looked-4, Koko-3)
root(ROOT-0, looked-4)
case(mounds-7, at-5)
det(mounds-7, the-6)
nmod:at(looked-4, mounds-7)
case(mud-9, of-8)
nmod:of(mounds-7, mud-9)
case(surface-12, above-10)
det(surface-12, the-11)
nmod:above(looked-4, surface-12)
case(water-14, of-13)
nmod:of(surface-12, water-14)
xcomp(looked-4, covering-15)
det(town-19, the-16)
amod(town-19, flooded-17)
amod(town-19, shanty-18)
dobj(covering-15, town-19)
case(Kusha-22, of-20)
compound(Kusha-22, Jebel-21)
nmod:of(town-19, Kusha-22)
punct(looked-4, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flood#town

flourish :: As a sport , though , sea kayaking suddenly has begun to flourish on both coasts of North America and far beyond , to the point where you can take sea kayak tours in such wet Edens as Belize , Baja California , Puerto Rico , Hawaii , Fiji , Tonga , the Maldive Islands and Patagonia , or go on `` full-moon paddles '' off the star-strewn beaches of Malibu , where I first took the plunge ./.
case(sport-3, As-1)
det(sport-3, a-2)
nmod:as(begun-11, sport-3)
punct(begun-11, ,-4)
advmod(begun-11, though-5)
punct(begun-11, ,-6)
compound(kayaking-8, sea-7)
nsubj(begun-11, kayaking-8)
nsubj:xsubj(flourish-13, kayaking-8)
advmod(begun-11, suddenly-9)
aux(begun-11, has-10)
root(ROOT-0, begun-11)
mark(flourish-13, to-12)
xcomp(begun-11, flourish-13)
case(coasts-16, on-14)
det(coasts-16, both-15)
nmod:on(flourish-13, coasts-16)
case(America-19, of-17)
compound(America-19, North-18)
nmod:of(coasts-16, America-19)
cc(coasts-16, and-20)
advmod(beyond-22, far-21)
nmod:on(flourish-13, beyond-22)
conj:and(coasts-16, beyond-22)
punct(begun-11, ,-23)
case(point-26, to-24)
det(point-26, the-25)
nmod:to(begun-11, point-26)
advmod(take-30, where-27)
nsubj(take-30, you-28)
nsubj(go-60, you-28)
aux(take-30, can-29)
acl:relcl(point-26, take-30)
compound(tours-33, sea-31)
compound(tours-33, kayak-32)
dobj(take-30, tours-33)
case(Edens-37, in-34)
amod(Edens-37, such-35)
amod(Edens-37, wet-36)
nmod:in(take-30, Edens-37)
case(Belize-39, as-38)
nmod:as(Edens-37, Belize-39)
punct(Belize-39, ,-40)
compound(California-42, Baja-41)
nmod:as(Edens-37, California-42)
conj:and(Belize-39, California-42)
punct(Belize-39, ,-43)
compound(Rico-45, Puerto-44)
nmod:as(Edens-37, Rico-45)
conj:and(Belize-39, Rico-45)
punct(Belize-39, ,-46)
nmod:as(Edens-37, Hawaii-47)
conj:and(Belize-39, Hawaii-47)
punct(Belize-39, ,-48)
nmod:as(Edens-37, Fiji-49)
conj:and(Belize-39, Fiji-49)
punct(Belize-39, ,-50)
nmod:as(Edens-37, Tonga-51)
conj:and(Belize-39, Tonga-51)
punct(Belize-39, ,-52)
det(Islands-55, the-53)
compound(Islands-55, Maldive-54)
nmod:as(Edens-37, Islands-55)
conj:and(Belize-39, Islands-55)
cc(Belize-39, and-56)
nmod:as(Edens-37, Patagonia-57)
conj:and(Belize-39, Patagonia-57)
punct(take-30, ,-58)
cc(take-30, or-59)
acl:relcl(point-26, go-60)
conj:or(take-30, go-60)
case(paddles-64, on-61)
punct(paddles-64, ``-62)
amod(paddles-64, full-moon-63)
nmod:on(go-60, paddles-64)
punct(paddles-64, ''-65)
case(beaches-69, off-66)
det(beaches-69, the-67)
amod(beaches-69, star-strewn-68)
nmod:off(go-60, beaches-69)
case(Malibu-71, of-70)
nmod:of(beaches-69, Malibu-71)
punct(Malibu-71, ,-72)
advmod(took-76, where-73)
nsubj(took-76, I-74)
advmod(took-76, first-75)
acl:relcl(Malibu-71, took-76)
det(plunge-78, the-77)
dobj(took-76, plunge-78)
punct(begun-11, .-79)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#kayaking

flourish :: A giant bank , once rumored to be failing , suddenly flourishes ./.
det(bank-3, A-1)
amod(bank-3, giant-2)
nsubjpass(rumored-6, bank-3)
nsubj:xsubj(failing-9, bank-3)
punct(rumored-6, ,-4)
advmod(rumored-6, once-5)
root(ROOT-0, rumored-6)
mark(failing-9, to-7)
aux(failing-9, be-8)
xcomp(rumored-6, failing-9)
punct(failing-9, ,-10)
advmod(flourishes-12, suddenly-11)
nmod(failing-9, flourishes-12)
punct(rumored-6, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

flourish :: Billion-dollar offerings could flounder or flourish on what Mr. Rudloff said ./.
amod(offerings-2, Billion-dollar-1)
nsubj(flounder-4, offerings-2)
nsubj(flourish-6, offerings-2)
aux(flounder-4, could-3)
root(ROOT-0, flounder-4)
cc(flounder-4, or-5)
conj:or(flounder-4, flourish-6)
mark(said-11, on-7)
dobj(said-11, what-8)
compound(Rudloff-10, Mr.-9)
nsubj(said-11, Rudloff-10)
advcl(flounder-4, said-11)
punct(flounder-4, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#offerings

flourish :: The calm way in which she discards some of the more unlikely legends and willful misinterpretations that flourish among Bronte scholars is admirable ./.
det(way-3, The-1)
amod(way-3, calm-2)
nmod:in(discards-7, way-3)
nsubj(admirable-23, way-3)
case(which-5, in-4)
ref(way-3, which-5)
nsubj(discards-7, she-6)
acl:relcl(way-3, discards-7)
dobj(discards-7, some-8)
case(legends-13, of-9)
det(legends-13, the-10)
advmod(unlikely-12, more-11)
amod(legends-13, unlikely-12)
nmod:of(some-8, legends-13)
nsubj(flourish-18, legends-13)
cc(legends-13, and-14)
amod(misinterpretations-16, willful-15)
nmod:of(some-8, misinterpretations-16)
conj:and(legends-13, misinterpretations-16)
nsubj(flourish-18, misinterpretations-16)
ref(legends-13, that-17)
acl:relcl(legends-13, flourish-18)
case(scholars-21, among-19)
compound(scholars-21, Bronte-20)
nmod:among(flourish-18, scholars-21)
cop(admirable-23, is-22)
root(ROOT-0, admirable-23)
punct(admirable-23, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#legends

flourish :: The clash of goals is rare in postwar Japan , where consensus has enabled banks and industry to flourish ./.
det(clash-2, The-1)
nsubj(rare-6, clash-2)
case(goals-4, of-3)
nmod:of(clash-2, goals-4)
cop(rare-6, is-5)
root(ROOT-0, rare-6)
case(Japan-9, in-7)
amod(Japan-9, postwar-8)
nmod:in(rare-6, Japan-9)
punct(Japan-9, ,-10)
advmod(enabled-14, where-11)
nsubj(enabled-14, consensus-12)
aux(enabled-14, has-13)
acl:relcl(Japan-9, enabled-14)
dobj(enabled-14, banks-15)
nsubj:xsubj(flourish-19, banks-15)
cc(banks-15, and-16)
dobj(enabled-14, industry-17)
conj:and(banks-15, industry-17)
nsubj:xsubj(flourish-19, industry-17)
mark(flourish-19, to-18)
xcomp(enabled-14, flourish-19)
punct(rare-6, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#banks

flourish :: And the court rejected the attempt to foster patriotism through compulsion as an insult to the American tradition: `` To believe that patriotism will not flourish if patriotic ceremonies are voluntary and spontaneous instead of a compulsory routine is to make an unflattering estimate of the appeal of our institutions to free minds . ''/''
cc(rejected-4, And-1)
det(court-3, the-2)
nsubj(rejected-4, court-3)
root(ROOT-0, rejected-4)
det(attempt-6, the-5)
dobj(rejected-4, attempt-6)
mark(foster-8, to-7)
acl(attempt-6, foster-8)
dobj(foster-8, patriotism-9)
case(compulsion-11, through-10)
nmod:through(foster-8, compulsion-11)
case(insult-14, as-12)
det(insult-14, an-13)
nmod:as(foster-8, insult-14)
case(tradition-18, to-15)
det(tradition-18, the-16)
amod(tradition-18, American-17)
nmod:to(insult-14, tradition-18)
punct(rejected-4, :-19)
punct(rejected-4, ``-20)
mark(believe-22, To-21)
csubj(is-40, believe-22)
mark(flourish-27, that-23)
nsubj(flourish-27, patriotism-24)
aux(flourish-27, will-25)
neg(flourish-27, not-26)
ccomp(believe-22, flourish-27)
mark(voluntary-32, if-28)
amod(ceremonies-30, patriotic-29)
nsubj(voluntary-32, ceremonies-30)
nsubj(spontaneous-34, ceremonies-30)
cop(voluntary-32, are-31)
advcl(flourish-27, voluntary-32)
cc(voluntary-32, and-33)
advcl(flourish-27, spontaneous-34)
conj:and(voluntary-32, spontaneous-34)
case(routine-39, instead-35)
mwe(instead-35, of-36)
det(routine-39, a-37)
amod(routine-39, compulsory-38)
nmod:instead_of(voluntary-32, routine-39)
ccomp(rejected-4, is-40)
mark(make-42, to-41)
xcomp(is-40, make-42)
det(estimate-45, an-43)
amod(estimate-45, unflattering-44)
dobj(make-42, estimate-45)
case(appeal-48, of-46)
det(appeal-48, the-47)
nmod:of(estimate-45, appeal-48)
case(institutions-51, of-49)
nmod:poss(institutions-51, our-50)
nmod:of(appeal-48, institutions-51)
case(minds-54, to-52)
amod(minds-54, free-53)
nmod:to(appeal-48, minds-54)
punct(rejected-4, .-55)
punct(rejected-4, ''-56)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: flourish#patriotism

flourish :: In this isolated valley where peasants furrow their cornfields with mule-drawn wooden plows , archaeologists are unearthing a cradle of ancient Mexican civilization -- an Olmec settlement that flourished between 1200 and 600 B.C ./.
case(valley-4, In-1)
det(valley-4, this-2)
amod(valley-4, isolated-3)
nmod:in(unearthing-17, valley-4)
advmod(furrow-7, where-5)
nsubj(furrow-7, peasants-6)
acl:relcl(valley-4, furrow-7)
nmod:poss(cornfields-9, their-8)
dobj(furrow-7, cornfields-9)
case(plows-13, with-10)
amod(wooden-12, mule-drawn-11)
amod(plows-13, wooden-12)
nmod:with(furrow-7, plows-13)
punct(unearthing-17, ,-14)
nsubj(unearthing-17, archaeologists-15)
aux(unearthing-17, are-16)
root(ROOT-0, unearthing-17)
det(cradle-19, a-18)
dobj(unearthing-17, cradle-19)
case(civilization-23, of-20)
amod(civilization-23, ancient-21)
amod(civilization-23, Mexican-22)
nmod:of(cradle-19, civilization-23)
punct(civilization-23, ---24)
det(settlement-27, an-25)
compound(settlement-27, Olmec-26)
dep(civilization-23, settlement-27)
nsubj(flourished-29, settlement-27)
ref(settlement-27, that-28)
acl:relcl(settlement-27, flourished-29)
case(B.C-34, between-30)
nummod(B.C-34, 1200-31)
cc(1200-31, and-32)
conj:and(1200-31, 600-33)
nummod(B.C-34, 600-33)
nmod:between(flourished-29, B.C-34)
punct(unearthing-17, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#settlement

flourish :: The message Mr. Welch says he is sending , however , is that by cutting management layers and delegating responsibility , `` we are trying to create an atmosphere where people want to work , a nonbureaucracy where people have a chance to flourish ./.
det(message-2, The-1)
root(ROOT-0, message-2)
compound(Welch-4, Mr.-3)
nsubj(says-5, Welch-4)
acl:relcl(message-2, says-5)
nsubj(sending-8, he-6)
aux(sending-8, is-7)
ccomp(says-5, sending-8)
punct(sending-8, ,-9)
advmod(sending-8, however-10)
punct(sending-8, ,-11)
cop(trying-25, is-12)
mark(trying-25, that-13)
mark(cutting-15, by-14)
advcl(trying-25, cutting-15)
compound(layers-17, management-16)
dobj(cutting-15, layers-17)
cc(cutting-15, and-18)
conj:and(cutting-15, delegating-19)
advcl(trying-25, delegating-19)
dobj(delegating-19, responsibility-20)
punct(trying-25, ,-21)
punct(trying-25, ``-22)
nsubj(trying-25, we-23)
aux(trying-25, are-24)
advcl(sending-8, trying-25)
mark(create-27, to-26)
xcomp(trying-25, create-27)
det(atmosphere-29, an-28)
dobj(create-27, atmosphere-29)
advmod(want-32, where-30)
nsubj(want-32, people-31)
nsubj:xsubj(work-34, people-31)
acl:relcl(atmosphere-29, want-32)
mark(work-34, to-33)
xcomp(want-32, work-34)
punct(trying-25, ,-35)
det(nonbureaucracy-37, a-36)
dobj(trying-25, nonbureaucracy-37)
nsubj:xsubj(create-27, nonbureaucracy-37)
advmod(have-40, where-38)
nsubj(have-40, people-39)
acl:relcl(nonbureaucracy-37, have-40)
det(chance-42, a-41)
dobj(have-40, chance-42)
mark(flourish-44, to-43)
acl(chance-42, flourish-44)
punct(message-2, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

flourish :: Stickball -- a street version of baseball that has flourished here since the Depression -- has never been a social climber 's game ./.
nsubj(game-23, Stickball-1)
punct(Stickball-1, ---2)
det(version-5, a-3)
compound(version-5, street-4)
dep(Stickball-1, version-5)
nsubj(flourished-10, version-5)
case(baseball-7, of-6)
nmod:of(version-5, baseball-7)
ref(version-5, that-8)
aux(flourished-10, has-9)
acl:relcl(version-5, flourished-10)
advmod(flourished-10, here-11)
case(Depression-14, since-12)
det(Depression-14, the-13)
nmod:since(flourished-10, Depression-14)
punct(Stickball-1, ---15)
aux(game-23, has-16)
neg(game-23, never-17)
cop(game-23, been-18)
det(climber-21, a-19)
amod(climber-21, social-20)
nmod:poss(game-23, climber-21)
case(climber-21, 's-22)
root(ROOT-0, game-23)
punct(game-23, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#version

flourish :: But entertainment flourished , with audio and video items logging the biggest quarterly increase in consumption -- $ 23.2 billion ./.
cc(flourished-3, But-1)
nsubj(flourished-3, entertainment-2)
root(ROOT-0, flourished-3)
punct(flourished-3, ,-4)
case(items-9, with-5)
compound(items-9, audio-6)
cc(audio-6, and-7)
conj:and(audio-6, video-8)
compound(items-9, video-8)
nmod:with(flourished-3, items-9)
acl(items-9, logging-10)
det(increase-14, the-11)
amod(increase-14, biggest-12)
amod(increase-14, quarterly-13)
dobj(logging-10, increase-14)
case(consumption-16, in-15)
nmod:in(increase-14, consumption-16)
punct(increase-14, ---17)
dep(increase-14, $-18)
compound(billion-20, 23.2-19)
nummod($-18, billion-20)
punct(flourished-3, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#entertainment

flourish :: Escapism is said to have flourished ./.
nsubjpass(said-3, Escapism-1)
nsubj:xsubj(flourished-6, Escapism-1)
auxpass(said-3, is-2)
root(ROOT-0, said-3)
mark(flourished-6, to-4)
aux(flourished-6, have-5)
xcomp(said-3, flourished-6)
punct(said-3, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#escapism

flourish :: As Amsterdam flourished , once powerful Antwerp declined under Spanish rule , though this is n't readily evident from the colorful oil sketches prepared by Rubens for the grand triumphal arches welcoming a new Catholic governor-general in 1635 ./.
mark(flourished-3, As-1)
nsubj(flourished-3, Amsterdam-2)
advcl(declined-8, flourished-3)
punct(declined-8, ,-4)
advmod(powerful-6, once-5)
amod(Antwerp-7, powerful-6)
nsubj(declined-8, Antwerp-7)
root(ROOT-0, declined-8)
case(rule-11, under-9)
amod(rule-11, Spanish-10)
nmod:under(declined-8, rule-11)
punct(declined-8, ,-12)
mark(evident-18, though-13)
nsubj(evident-18, this-14)
cop(evident-18, is-15)
neg(evident-18, n't-16)
advmod(evident-18, readily-17)
advcl(declined-8, evident-18)
case(sketches-23, from-19)
det(sketches-23, the-20)
amod(sketches-23, colorful-21)
compound(sketches-23, oil-22)
nmod:from(evident-18, sketches-23)
acl(sketches-23, prepared-24)
case(Rubens-26, by-25)
nmod:by(prepared-24, Rubens-26)
case(arches-31, for-27)
det(arches-31, the-28)
compound(arches-31, grand-29)
amod(arches-31, triumphal-30)
nmod:for(prepared-24, arches-31)
acl(arches-31, welcoming-32)
det(governor-general-36, a-33)
amod(governor-general-36, new-34)
amod(governor-general-36, Catholic-35)
dobj(welcoming-32, governor-general-36)
case(1635-38, in-37)
nmod:in(welcoming-32, 1635-38)
punct(declined-8, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#amsterdam

flourish :: Mr. Shamir spent Tu Bishvat planting a tree at a Jewish settlement on the occupied West Bank , where he said he expected the settlement movement to grow and flourish ./.
compound(Shamir-2, Mr.-1)
nsubj(spent-3, Shamir-2)
root(ROOT-0, spent-3)
compound(Bishvat-5, Tu-4)
nsubj(planting-6, Bishvat-5)
dep(spent-3, planting-6)
det(tree-8, a-7)
dobj(planting-6, tree-8)
case(settlement-12, at-9)
det(settlement-12, a-10)
amod(settlement-12, Jewish-11)
nmod:at(planting-6, settlement-12)
case(Bank-17, on-13)
det(Bank-17, the-14)
amod(Bank-17, occupied-15)
compound(Bank-17, West-16)
nmod:on(settlement-12, Bank-17)
punct(Bank-17, ,-18)
advmod(said-21, where-19)
nsubj(said-21, he-20)
acl:relcl(Bank-17, said-21)
nsubj(expected-23, he-22)
ccomp(said-21, expected-23)
det(movement-26, the-24)
compound(movement-26, settlement-25)
dobj(expected-23, movement-26)
nsubj:xsubj(grow-28, movement-26)
mark(grow-28, to-27)
xcomp(expected-23, grow-28)
cc(grow-28, and-29)
xcomp(expected-23, flourish-30)
conj:and(grow-28, flourish-30)
punct(spent-3, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

flourish :: Even before Mr. Grosz took over , smaller private companies , still called cooperatives here , were beginning to flourish ./.
advmod(took-5, Even-1)
mark(took-5, before-2)
compound(Grosz-4, Mr.-3)
nsubj(took-5, Grosz-4)
advcl(beginning-18, took-5)
compound:prt(took-5, over-6)
punct(beginning-18, ,-7)
amod(companies-10, smaller-8)
amod(companies-10, private-9)
nsubj(beginning-18, companies-10)
nsubj:xsubj(flourish-20, companies-10)
punct(companies-10, ,-11)
advmod(called-13, still-12)
acl(companies-10, called-13)
xcomp(called-13, cooperatives-14)
advmod(cooperatives-14, here-15)
punct(companies-10, ,-16)
aux(beginning-18, were-17)
root(ROOT-0, beginning-18)
mark(flourish-20, to-19)
xcomp(beginning-18, flourish-20)
punct(beginning-18, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#companies

flourish :: In the U.S . , software has flourished as something of a cottage industry ; in Japan , companies have set up software factories with 1 , 000 employees or more ./.
case(U.S-3, In-1)
det(U.S-3, the-2)
root(ROOT-0, U.S-3)
punct(U.S-3, .-4)
punct(flourished-4, ,-1)
nsubj(flourished-4, software-2)
aux(flourished-4, has-3)
root(ROOT-0, flourished-4)
case(something-6, as-5)
nmod:as(flourished-4, something-6)
case(industry-10, of-7)
det(industry-10, a-8)
compound(industry-10, cottage-9)
nmod:of(something-6, industry-10)
punct(flourished-4, ;-11)
case(Japan-13, in-12)
nmod:in(set-17, Japan-13)
punct(set-17, ,-14)
nsubj(set-17, companies-15)
aux(set-17, have-16)
parataxis(flourished-4, set-17)
compound:prt(set-17, up-18)
compound(factories-20, software-19)
dobj(set-17, factories-20)
nmod(set-17, with-21)
root(with-21, 1-22)
punct(1-22, ,-23)
nummod(employees-25, 000-24)
root(,-23, employees-25)
cc(more-27, or-26)
nummod(employees-25, more-27)
punct(employees-25, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#software

flourish :: For starters , factoring has flourished because many merchants are so willing to do it for a share of the telemarketer 's proceeds ./.
case(starters-2, For-1)
nmod:for(flourished-6, starters-2)
punct(flourished-6, ,-3)
nsubj(flourished-6, factoring-4)
aux(flourished-6, has-5)
root(ROOT-0, flourished-6)
mark(willing-12, because-7)
amod(merchants-9, many-8)
nsubj(willing-12, merchants-9)
nsubj:xsubj(do-14, merchants-9)
cop(willing-12, are-10)
advmod(willing-12, so-11)
advcl(flourished-6, willing-12)
mark(do-14, to-13)
xcomp(willing-12, do-14)
dobj(do-14, it-15)
case(share-18, for-16)
det(share-18, a-17)
nmod:for(do-14, share-18)
case(proceeds-23, of-19)
det(telemarketer-21, the-20)
nmod:poss(proceeds-23, telemarketer-21)
case(telemarketer-21, 's-22)
nmod:of(share-18, proceeds-23)
punct(flourished-6, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#factoring

flourish :: In many of these countries , voters are restive as democracy fails to ease the problems of economic stagnation , onerous debt and the massive corruption that accompanies the flourishing drug trade ./.
case(many-2, In-1)
nmod:in(restive-9, many-2)
case(countries-5, of-3)
det(countries-5, these-4)
nmod:of(many-2, countries-5)
punct(restive-9, ,-6)
nsubj(restive-9, voters-7)
cop(restive-9, are-8)
root(ROOT-0, restive-9)
mark(fails-12, as-10)
nsubj(fails-12, democracy-11)
nsubj:xsubj(ease-14, democracy-11)
advcl(restive-9, fails-12)
mark(ease-14, to-13)
xcomp(fails-12, ease-14)
det(problems-16, the-15)
dobj(ease-14, problems-16)
case(stagnation-19, of-17)
amod(stagnation-19, economic-18)
nmod:of(problems-16, stagnation-19)
punct(stagnation-19, ,-20)
amod(debt-22, onerous-21)
nmod:of(problems-16, debt-22)
conj:and(stagnation-19, debt-22)
cc(stagnation-19, and-23)
det(corruption-26, the-24)
amod(corruption-26, massive-25)
nmod:of(problems-16, corruption-26)
conj:and(stagnation-19, corruption-26)
nsubj(accompanies-28, corruption-26)
ref(corruption-26, that-27)
acl:relcl(corruption-26, accompanies-28)
det(trade-32, the-29)
amod(trade-32, flourishing-30)
compound(trade-32, drug-31)
dobj(accompanies-28, trade-32)
punct(restive-9, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#trade

flourish :: British farmers flourish under the EC 's Common Agriculture Policy , and its food companies have grown to global giants , in part because of EC markets ./.
amod(farmers-2, British-1)
nsubj(flourish-3, farmers-2)
root(ROOT-0, flourish-3)
case(Policy-10, under-4)
det(EC-6, the-5)
nmod:poss(Policy-10, EC-6)
case(EC-6, 's-7)
amod(Policy-10, Common-8)
compound(Policy-10, Agriculture-9)
nmod:under(flourish-3, Policy-10)
punct(flourish-3, ,-11)
cc(flourish-3, and-12)
nmod:poss(companies-15, its-13)
compound(companies-15, food-14)
nsubj(grown-17, companies-15)
aux(grown-17, have-16)
conj:and(flourish-3, grown-17)
case(giants-20, to-18)
amod(giants-20, global-19)
nmod:to(grown-17, giants-20)
punct(grown-17, ,-21)
case(part-23, in-22)
nmod:in(markets-27, part-23)
case(markets-27, because-24)
mwe(because-24, of-25)
compound(markets-27, EC-26)
nmod:because_of(grown-17, markets-27)
punct(flourish-3, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#farmers

flourish :: In the classic model , a bull market flourishes when money flows into the market ./.
case(model-4, In-1)
det(model-4, the-2)
amod(model-4, classic-3)
root(ROOT-0, model-4)
punct(model-4, ,-5)
det(flourishes-9, a-6)
compound(flourishes-9, bull-7)
compound(flourishes-9, market-8)
root(,-5, flourishes-9)
advmod(flows-12, when-10)
nsubj(flows-12, money-11)
acl:relcl(flourishes-9, flows-12)
case(market-15, into-13)
det(market-15, the-14)
nmod:into(flows-12, market-15)
punct(flourishes-9, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

flourish :: To their astonishment , the alfalfa plants flourished , doubling their foliage and weight ./.
case(astonishment-3, To-1)
nmod:poss(astonishment-3, their-2)
nmod:to(flourished-8, astonishment-3)
punct(flourished-8, ,-4)
det(plants-7, the-5)
compound(plants-7, alfalfa-6)
nsubj(flourished-8, plants-7)
root(ROOT-0, flourished-8)
punct(flourished-8, ,-9)
xcomp(flourished-8, doubling-10)
nmod:poss(foliage-12, their-11)
dobj(doubling-10, foliage-12)
cc(foliage-12, and-13)
dobj(doubling-10, weight-14)
conj:and(foliage-12, weight-14)
punct(flourished-8, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#plants

flourish :: The astronauts also grew samples of proteins used in AIDS and cancer research that are difficult to make on Earth , but which may flourish under near-weightless conditions ./.
det(astronauts-2, The-1)
nsubj(grew-4, astronauts-2)
advmod(grew-4, also-3)
root(ROOT-0, grew-4)
dobj(grew-4, samples-5)
nsubj(difficult-16, samples-5)
case(proteins-7, of-6)
nmod:of(samples-5, proteins-7)
acl(proteins-7, used-8)
case(AIDS-10, in-9)
nmod:in(used-8, AIDS-10)
cc(AIDS-10, and-11)
compound(research-13, cancer-12)
nmod:in(used-8, research-13)
conj:and(AIDS-10, research-13)
ref(samples-5, that-14)
cop(difficult-16, are-15)
acl:relcl(samples-5, difficult-16)
mark(make-18, to-17)
ccomp(difficult-16, make-18)
case(Earth-20, on-19)
nmod:on(make-18, Earth-20)
punct(grew-4, ,-21)
cc(grew-4, but-22)
nsubj(flourish-25, which-23)
aux(flourish-25, may-24)
conj:but(grew-4, flourish-25)
case(conditions-28, under-26)
amod(conditions-28, near-weightless-27)
nmod:under(flourish-25, conditions-28)
punct(grew-4, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#which

flourish :: `` Pacifism flourished under absolute U.S. protection ./.
root(ROOT-0, ``-1)
nsubj(flourished-3, Pacifism-2)
root(``-1, flourished-3)
case(protection-7, under-4)
amod(protection-7, absolute-5)
compound(protection-7, U.S.-6)
nmod:under(flourished-3, protection-7)
punct(flourished-3, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#pacifism

flourish :: These and other figures from a 62 , 000-household survey conducted by the Census Bureau describe a flourishing economy in which the fruits of prosperity are n't equally shared by all Americans ./.
amod(figures-4, These-1)
cc(These-1, and-2)
conj:and(These-1, other-3)
amod(figures-4, other-3)
nsubj(describe-16, figures-4)
case(survey-10, from-5)
det(survey-10, a-6)
nummod(survey-10, 62-7)
punct(survey-10, ,-8)
amod(survey-10, 000-household-9)
nmod:from(figures-4, survey-10)
acl(survey-10, conducted-11)
case(Bureau-15, by-12)
det(Bureau-15, the-13)
compound(Bureau-15, Census-14)
nmod:by(conducted-11, Bureau-15)
root(ROOT-0, describe-16)
det(economy-19, a-17)
amod(economy-19, flourishing-18)
dobj(describe-16, economy-19)
nmod:in(shared-29, economy-19)
case(which-21, in-20)
ref(economy-19, which-21)
det(fruits-23, the-22)
nsubjpass(shared-29, fruits-23)
case(prosperity-25, of-24)
nmod:of(fruits-23, prosperity-25)
auxpass(shared-29, are-26)
neg(shared-29, n't-27)
advmod(shared-29, equally-28)
acl:relcl(economy-19, shared-29)
case(Americans-32, by-30)
det(Americans-32, all-31)
nmod:agent(shared-29, Americans-32)
punct(describe-16, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#economy

flourish :: The reservoir , used mostly for agriculture , is the source of the artesian wells that allowed oases to flourish along the coast for hundreds of years ./.
det(reservoir-2, The-1)
nsubj(source-11, reservoir-2)
punct(reservoir-2, ,-3)
acl(reservoir-2, used-4)
advmod(used-4, mostly-5)
case(agriculture-7, for-6)
nmod:for(used-4, agriculture-7)
punct(reservoir-2, ,-8)
cop(source-11, is-9)
det(source-11, the-10)
root(ROOT-0, source-11)
case(wells-15, of-12)
det(wells-15, the-13)
amod(wells-15, artesian-14)
nmod:of(source-11, wells-15)
nsubj(allowed-17, wells-15)
ref(wells-15, that-16)
acl:relcl(wells-15, allowed-17)
dobj(allowed-17, oases-18)
nsubj:xsubj(flourish-20, oases-18)
mark(flourish-20, to-19)
xcomp(allowed-17, flourish-20)
case(coast-23, along-21)
det(coast-23, the-22)
nmod:along(flourish-20, coast-23)
case(hundreds-25, for-24)
nmod:for(flourish-20, hundreds-25)
case(years-27, of-26)
nmod:of(hundreds-25, years-27)
punct(source-11, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#oases

flourish :: Christian and Jewish scholars flourished in the Moslem courts ./.
amod(scholars-4, Christian-1)
cc(Christian-1, and-2)
conj:and(Christian-1, Jewish-3)
amod(scholars-4, Jewish-3)
nsubj(flourished-5, scholars-4)
root(ROOT-0, flourished-5)
case(courts-9, in-6)
det(courts-9, the-7)
compound(courts-9, Moslem-8)
nmod:in(flourished-5, courts-9)
punct(flourished-5, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#scholars

flourish :: Because of continuing uncertainties associated with the stock market and inflation , he said consumer demand for CDs will flourish if interest rates get nearer to 10 % ./.
case(uncertainties-4, Because-1)
mwe(Because-1, of-2)
amod(uncertainties-4, continuing-3)
nmod:because_of(said-14, uncertainties-4)
acl(uncertainties-4, associated-5)
case(market-9, with-6)
det(market-9, the-7)
compound(market-9, stock-8)
nmod:with(associated-5, market-9)
cc(market-9, and-10)
nmod:with(associated-5, inflation-11)
conj:and(market-9, inflation-11)
punct(said-14, ,-12)
nsubj(said-14, he-13)
root(ROOT-0, said-14)
compound(demand-16, consumer-15)
nsubj(flourish-20, demand-16)
case(CDs-18, for-17)
nmod:for(demand-16, CDs-18)
aux(flourish-20, will-19)
ccomp(said-14, flourish-20)
mark(get-24, if-21)
compound(rates-23, interest-22)
nsubj(get-24, rates-23)
advcl(flourish-20, get-24)
advmod(get-24, nearer-25)
case(%-28, to-26)
nummod(%-28, 10-27)
nmod:to(nearer-25, %-28)
punct(said-14, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#demand

flourish :: By 1981 the lower end of the Pawtuxet , into which Ciba-Geigy had been pouring 1.2 million gallons of waste each day , could support only those organisms that flourish in sewage and toxic waste ./.
case(1981-2, By-1)
nmod:by(support-25, 1981-2)
det(end-5, the-3)
amod(end-5, lower-4)
nsubj(support-25, end-5)
case(Pawtuxet-8, of-6)
det(Pawtuxet-8, the-7)
nmod:of(end-5, Pawtuxet-8)
nmod:into(pouring-15, Pawtuxet-8)
punct(Pawtuxet-8, ,-9)
case(which-11, into-10)
ref(Pawtuxet-8, which-11)
nsubj(pouring-15, Ciba-Geigy-12)
aux(pouring-15, had-13)
aux(pouring-15, been-14)
acl:relcl(Pawtuxet-8, pouring-15)
compound(million-17, 1.2-16)
nummod(gallons-18, million-17)
dobj(pouring-15, gallons-18)
case(waste-20, of-19)
nmod:of(gallons-18, waste-20)
det(day-22, each-21)
nmod:tmod(pouring-15, day-22)
punct(Pawtuxet-8, ,-23)
aux(support-25, could-24)
root(ROOT-0, support-25)
advmod(organisms-28, only-26)
det(organisms-28, those-27)
dobj(support-25, organisms-28)
nsubj(flourish-30, organisms-28)
ref(organisms-28, that-29)
acl:relcl(organisms-28, flourish-30)
case(sewage-32, in-31)
nmod:in(flourish-30, sewage-32)
cc(sewage-32, and-33)
amod(waste-35, toxic-34)
nmod:in(flourish-30, waste-35)
conj:and(sewage-32, waste-35)
punct(support-25, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#organisms

flourish :: It may help explain why insider trading could have flourished unchecked for so long on Wall Street ./.
nsubj(help-3, It-1)
aux(help-3, may-2)
root(ROOT-0, help-3)
ccomp(help-3, explain-4)
advmod(flourished-10, why-5)
compound(trading-7, insider-6)
nsubj(flourished-10, trading-7)
aux(flourished-10, could-8)
aux(flourished-10, have-9)
advcl(explain-4, flourished-10)
advmod(flourished-10, unchecked-11)
case(long-14, for-12)
advmod(long-14, so-13)
nmod:for(flourished-10, long-14)
case(Street-17, on-15)
compound(Street-17, Wall-16)
nmod:on(flourished-10, Street-17)
punct(help-3, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#trading

flourish :: Baseball flourished in certain parts of England and Wales before World War II ./.
nsubj(flourished-2, Baseball-1)
root(ROOT-0, flourished-2)
case(parts-5, in-3)
amod(parts-5, certain-4)
nmod:in(flourished-2, parts-5)
case(England-7, of-6)
nmod:of(parts-5, England-7)
cc(England-7, and-8)
nmod:of(parts-5, Wales-9)
conj:and(England-7, Wales-9)
case(II-13, before-10)
compound(II-13, World-11)
compound(II-13, War-12)
nmod:before(flourished-2, II-13)
punct(flourished-2, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#baseball

flourish :: The company flourished in Japan 's roaring '80s by diversifying into niches that much of the country 's staid business culture dismissed ./.
det(company-2, The-1)
nsubj(flourished-3, company-2)
root(ROOT-0, flourished-3)
case(Japan-5, in-4)
nmod:'s(flourished-3, Japan-5)
case(Japan-5, 's-6)
dep(Japan-5, roaring-7)
dobj(roaring-7, '80s-8)
mark(diversifying-10, by-9)
advcl(roaring-7, diversifying-10)
case(niches-12, into-11)
nmod:into(diversifying-10, niches-12)
dobj(dismissed-22, niches-12)
ref(niches-12, that-13)
nsubj(dismissed-22, much-14)
case(culture-21, of-15)
det(country-17, the-16)
nmod:poss(culture-21, country-17)
case(country-17, 's-18)
amod(culture-21, staid-19)
compound(culture-21, business-20)
nmod:of(much-14, culture-21)
acl:relcl(niches-12, dismissed-22)
punct(flourished-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#company

flourish :: The unit 's soda ash business is flourishing , analysts say ./.
det(unit-2, The-1)
nmod:poss(business-6, unit-2)
case(unit-2, 's-3)
compound(business-6, soda-4)
amod(business-6, ash-5)
nsubj(flourishing-8, business-6)
aux(flourishing-8, is-7)
ccomp(say-11, flourishing-8)
punct(say-11, ,-9)
nsubj(say-11, analysts-10)
root(ROOT-0, say-11)
punct(say-11, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#business

flourish :: Another problem facing Mr. Gorbachev is the growing nationalist sentiment among the Soviet Union 's ethnic minorities , sentiment that is flourishing in the current political climate ./.
det(problem-2, Another-1)
nsubj(sentiment-10, problem-2)
acl(problem-2, facing-3)
compound(Gorbachev-5, Mr.-4)
dobj(facing-3, Gorbachev-5)
cop(sentiment-10, is-6)
det(sentiment-10, the-7)
amod(sentiment-10, growing-8)
amod(sentiment-10, nationalist-9)
root(ROOT-0, sentiment-10)
case(minorities-17, among-11)
det(Union-14, the-12)
compound(Union-14, Soviet-13)
nmod:poss(minorities-17, Union-14)
case(Union-14, 's-15)
amod(minorities-17, ethnic-16)
nmod:among(sentiment-10, minorities-17)
punct(minorities-17, ,-18)
appos(minorities-17, sentiment-19)
nsubj(flourishing-22, sentiment-19)
ref(sentiment-19, that-20)
aux(flourishing-22, is-21)
acl:relcl(sentiment-19, flourishing-22)
case(climate-27, in-23)
det(climate-27, the-24)
amod(climate-27, current-25)
amod(climate-27, political-26)
nmod:in(flourishing-22, climate-27)
punct(sentiment-10, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#sentiment

flourish :: The explanation seems to be that Mr. Linh , though born in the north , spent most of his life in the south , where capitalism flourished until the Communists took over in 1975 ./.
det(explanation-2, The-1)
nsubj(seems-3, explanation-2)
nsubj:xsubj(be-5, explanation-2)
root(ROOT-0, seems-3)
mark(be-5, to-4)
xcomp(seems-3, be-5)
mark(spent-16, that-6)
compound(Linh-8, Mr.-7)
nsubj(spent-16, Linh-8)
punct(spent-16, ,-9)
mark(born-11, though-10)
advcl(spent-16, born-11)
case(north-14, in-12)
det(north-14, the-13)
nmod:in(born-11, north-14)
punct(spent-16, ,-15)
ccomp(be-5, spent-16)
dobj(spent-16, most-17)
case(life-20, of-18)
nmod:poss(life-20, his-19)
nmod:of(most-17, life-20)
case(south-23, in-21)
det(south-23, the-22)
nmod:in(spent-16, south-23)
punct(south-23, ,-24)
advmod(flourished-27, where-25)
nsubj(flourished-27, capitalism-26)
acl:relcl(south-23, flourished-27)
mark(took-31, until-28)
det(Communists-30, the-29)
nsubj(took-31, Communists-30)
advcl(flourished-27, took-31)
compound:prt(took-31, over-32)
case(1975-34, in-33)
nmod:in(took-31, 1975-34)
punct(seems-3, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#capitalism

flourish :: It reveals that while PACs are flourishing , political competition is n't ./.
nsubj(reveals-2, It-1)
root(ROOT-0, reveals-2)
mark(is-11, that-3)
mark(flourishing-7, while-4)
nsubj(flourishing-7, PACs-5)
aux(flourishing-7, are-6)
advcl(is-11, flourishing-7)
punct(is-11, ,-8)
amod(competition-10, political-9)
nsubj(is-11, competition-10)
ccomp(reveals-2, is-11)
neg(is-11, n't-12)
punct(reveals-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#pacs

flourish :: A talent like his would flourish best in a relatively genteel and restrained political culture -- or , failing that , in a parliamentary system where he could be handed a safe seat and told to stop worrying ./.
det(talent-2, A-1)
root(ROOT-0, talent-2)
mark(flourish-6, like-3)
nsubj(flourish-6, his-4)
aux(flourish-6, would-5)
acl(talent-2, flourish-6)
advmod(flourish-6, best-7)
case(culture-15, in-8)
det(culture-15, a-9)
advmod(genteel-11, relatively-10)
amod(culture-15, genteel-11)
cc(genteel-11, and-12)
conj:and(genteel-11, restrained-13)
amod(culture-15, restrained-13)
amod(culture-15, political-14)
nmod:in(flourish-6, culture-15)
punct(talent-2, ---16)
cc(talent-2, or-17)
punct(talent-2, ,-18)
dep(talent-2, failing-19)
dep(failing-19, that-20)
punct(that-20, ,-21)
case(system-25, in-22)
det(system-25, a-23)
amod(system-25, parliamentary-24)
root(,-21, system-25)
advmod(handed-30, where-26)
nsubjpass(handed-30, he-27)
nsubjpass(told-35, he-27)
nsubj:xsubj(stop-37, he-27)
aux(handed-30, could-28)
auxpass(handed-30, be-29)
acl:relcl(system-25, handed-30)
det(seat-33, a-31)
amod(seat-33, safe-32)
dobj(handed-30, seat-33)
cc(handed-30, and-34)
acl:relcl(system-25, told-35)
conj:and(handed-30, told-35)
mark(stop-37, to-36)
xcomp(told-35, stop-37)
xcomp(stop-37, worrying-38)
punct(system-25, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#his

flourish :: Indeed , the one truly revolutionary asssumption at loose in the world now is economic: Economies flourish in free markets ./.
advmod(economic-15, Indeed-1)
punct(economic-15, ,-2)
det(asssumption-7, the-3)
nummod(asssumption-7, one-4)
advmod(revolutionary-6, truly-5)
amod(asssumption-7, revolutionary-6)
nsubj(economic-15, asssumption-7)
case(loose-9, at-8)
nmod:at(asssumption-7, loose-9)
case(world-12, in-10)
det(world-12, the-11)
nmod:in(loose-9, world-12)
advmod(economic-15, now-13)
cop(economic-15, is-14)
root(ROOT-0, economic-15)
punct(economic-15, :-16)
compound(flourish-18, Economies-17)
dep(economic-15, flourish-18)
case(markets-21, in-19)
amod(markets-21, free-20)
nmod:in(flourish-18, markets-21)
punct(economic-15, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#markets

flourish :: Despite these problems , Western officials are optimistic that the superpower relationship has a unique opportunity to flourish because of both nations ' economic problems , need for defense cuts and desire to concentrate on domestic affairs ./.
case(problems-3, Despite-1)
det(problems-3, these-2)
nmod:despite(optimistic-8, problems-3)
punct(optimistic-8, ,-4)
amod(officials-6, Western-5)
nsubj(optimistic-8, officials-6)
cop(optimistic-8, are-7)
root(ROOT-0, optimistic-8)
mark(has-13, that-9)
det(relationship-12, the-10)
compound(relationship-12, superpower-11)
nsubj(has-13, relationship-12)
ccomp(optimistic-8, has-13)
det(opportunity-16, a-14)
amod(opportunity-16, unique-15)
dobj(has-13, opportunity-16)
mark(flourish-18, to-17)
acl(opportunity-16, flourish-18)
case(problems-25, because-19)
mwe(because-19, of-20)
det(nations-22, both-21)
nmod:poss(problems-25, nations-22)
case(nations-22, '-23)
amod(problems-25, economic-24)
nmod:because_of(flourish-18, problems-25)
punct(optimistic-8, ,-26)
dep(optimistic-8, need-27)
case(cuts-30, for-28)
compound(cuts-30, defense-29)
nmod:for(need-27, cuts-30)
cc(cuts-30, and-31)
nmod:for(need-27, desire-32)
conj:and(cuts-30, desire-32)
mark(concentrate-34, to-33)
acl(desire-32, concentrate-34)
case(affairs-37, on-35)
amod(affairs-37, domestic-36)
nmod:on(concentrate-34, affairs-37)
punct(optimistic-8, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#problems

flourish :: Only 15 areas of treatment are examined , and several areas where questionable cures flourish -- the weight-loss catagory , for example -- are n't included ./.
advmod(15-2, Only-1)
nummod(areas-3, 15-2)
nsubjpass(examined-7, areas-3)
case(treatment-5, of-4)
nmod:of(areas-3, treatment-5)
auxpass(examined-7, are-6)
root(ROOT-0, examined-7)
punct(examined-7, ,-8)
cc(examined-7, and-9)
amod(areas-11, several-10)
nsubjpass(included-26, areas-11)
advmod(flourish-15, where-12)
amod(cures-14, questionable-13)
nsubj(flourish-15, cures-14)
acl:relcl(areas-11, flourish-15)
punct(areas-11, ---16)
det(catagory-19, the-17)
amod(catagory-19, weight-loss-18)
dep(areas-11, catagory-19)
punct(catagory-19, ,-20)
case(example-22, for-21)
nmod:for(catagory-19, example-22)
punct(areas-11, ---23)
auxpass(included-26, are-24)
neg(included-26, n't-25)
conj:and(examined-7, included-26)
punct(examined-7, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#cures

flourish :: Buyers ' clubs flourish in Manhattan and San Francisco to help the infected and the sick obtain experimental drugs like dextran sulfate , imported from Japan , where it is available over the counter as a way to reduce blood cholesterol ./.
nmod:poss(clubs-3, Buyers-1)
case(Buyers-1, '-2)
nsubj(flourish-4, clubs-3)
nsubj:xsubj(help-11, clubs-3)
root(ROOT-0, flourish-4)
case(Manhattan-6, in-5)
nmod:in(flourish-4, Manhattan-6)
cc(Manhattan-6, and-7)
compound(Francisco-9, San-8)
nmod:in(flourish-4, Francisco-9)
conj:and(Manhattan-6, Francisco-9)
mark(help-11, to-10)
xcomp(flourish-4, help-11)
det(infected-13, the-12)
nsubj(obtain-17, infected-13)
cc(infected-13, and-14)
det(sick-16, the-15)
conj:and(infected-13, sick-16)
nsubj(obtain-17, sick-16)
ccomp(help-11, obtain-17)
amod(drugs-19, experimental-18)
dobj(obtain-17, drugs-19)
case(sulfate-22, like-20)
compound(sulfate-22, dextran-21)
nmod:like(drugs-19, sulfate-22)
punct(obtain-17, ,-23)
dep(obtain-17, imported-24)
case(Japan-26, from-25)
nmod:from(imported-24, Japan-26)
punct(Japan-26, ,-27)
advmod(available-31, where-28)
nsubj(available-31, it-29)
cop(available-31, is-30)
acl:relcl(Japan-26, available-31)
case(counter-34, over-32)
det(counter-34, the-33)
nmod:over(available-31, counter-34)
case(way-37, as-35)
det(way-37, a-36)
nmod:as(available-31, way-37)
mark(reduce-39, to-38)
acl(way-37, reduce-39)
compound(cholesterol-41, blood-40)
dobj(reduce-39, cholesterol-41)
punct(flourish-4, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#clubs

flourish :: At the beginning of the book , Mr. Haraszti asks , `` Is freedom really necessary for art to flourish ? ''/''
case(beginning-3, At-1)
det(beginning-3, the-2)
nmod:at(asks-10, beginning-3)
case(book-6, of-4)
det(book-6, the-5)
nmod:of(beginning-3, book-6)
punct(asks-10, ,-7)
compound(Haraszti-9, Mr.-8)
nsubj(asks-10, Haraszti-9)
root(ROOT-0, asks-10)
punct(asks-10, ,-11)
punct(asks-10, ``-12)
cop(necessary-16, Is-13)
nsubj(necessary-16, freedom-14)
advmod(necessary-16, really-15)
dep(asks-10, necessary-16)
mark(flourish-20, for-17)
nsubj(flourish-20, art-18)
mark(flourish-20, to-19)
advcl(necessary-16, flourish-20)
punct(necessary-16, ?-21)
punct(asks-10, ''-22)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: flourish#art

flourish :: `` With Henry 's departure , these people are going to flourish , '' says Salomon President Thomas Strauss ./.
punct(says-15, ``-1)
case(departure-5, With-2)
nmod:poss(departure-5, Henry-3)
case(Henry-3, 's-4)
nmod:with(going-10, departure-5)
punct(going-10, ,-6)
det(people-8, these-7)
nsubj(going-10, people-8)
nsubj:xsubj(flourish-12, people-8)
aux(going-10, are-9)
ccomp(says-15, going-10)
mark(flourish-12, to-11)
xcomp(going-10, flourish-12)
punct(says-15, ,-13)
punct(says-15, ''-14)
root(ROOT-0, says-15)
compound(Strauss-19, Salomon-16)
compound(Strauss-19, President-17)
compound(Strauss-19, Thomas-18)
nsubj(says-15, Strauss-19)
punct(says-15, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#people

flourish :: Yet Houston Industries Inc. is flourishing , even with a unit operating the $ 5.3 billion South Texas nuclear project ./.
advmod(flourishing-6, Yet-1)
compound(Inc.-4, Houston-2)
compound(Inc.-4, Industries-3)
nsubj(flourishing-6, Inc.-4)
aux(flourishing-6, is-5)
root(ROOT-0, flourishing-6)
punct(flourishing-6, ,-7)
advmod(unit-11, even-8)
case(unit-11, with-9)
det(unit-11, a-10)
nmod:with(flourishing-6, unit-11)
acl(unit-11, operating-12)
det(project-20, the-13)
amod(project-20, $-14)
compound(billion-16, 5.3-15)
nummod($-14, billion-16)
compound(project-20, South-17)
compound(project-20, Texas-18)
amod(project-20, nuclear-19)
dobj(operating-12, project-20)
punct(flourishing-6, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#inc.

flourish :: A senior administration official says Gen. Noriega , who has been indicted by two U.S. grand juries on drug charges , is only `` the most obvious product but not the cause '' of the country 's weak civilian leadership , rampant corruption and flourishing money-laundering operations ./.
det(official-4, A-1)
amod(official-4, senior-2)
compound(official-4, administration-3)
nsubj(says-5, official-4)
root(ROOT-0, says-5)
compound(Noriega-7, Gen.-6)
nsubjpass(indicted-12, Noriega-7)
nsubj(product-28, Noriega-7)
punct(Noriega-7, ,-8)
ref(Noriega-7, who-9)
aux(indicted-12, has-10)
auxpass(indicted-12, been-11)
acl:relcl(Noriega-7, indicted-12)
case(juries-17, by-13)
nummod(juries-17, two-14)
compound(juries-17, U.S.-15)
compound(juries-17, grand-16)
nmod:agent(indicted-12, juries-17)
case(charges-20, on-18)
compound(charges-20, drug-19)
nmod:on(indicted-12, charges-20)
punct(Noriega-7, ,-21)
cop(product-28, is-22)
advmod(product-28, only-23)
punct(product-28, ``-24)
det(product-28, the-25)
advmod(obvious-27, most-26)
amod(product-28, obvious-27)
ccomp(says-5, product-28)
cc(not-30, but-29)
cc(product-28, not-30)
det(cause-32, the-31)
ccomp(says-5, cause-32)
conj:negcc(product-28, cause-32)
punct(cause-32, ''-33)
case(leadership-40, of-34)
det(country-36, the-35)
nmod:poss(leadership-40, country-36)
case(country-36, 's-37)
amod(leadership-40, weak-38)
amod(leadership-40, civilian-39)
nmod:of(cause-32, leadership-40)
punct(product-28, ,-41)
amod(corruption-43, rampant-42)
ccomp(says-5, corruption-43)
conj:negcc(product-28, corruption-43)
cc(product-28, and-44)
amod(operations-47, flourishing-45)
compound(operations-47, money-laundering-46)
ccomp(says-5, operations-47)
conj:negcc(product-28, operations-47)
punct(says-5, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#operations

flourish :: And the black middle class has flourished in the past 20 years as opportunities in various professions have opened up ./.
cc(flourished-7, And-1)
det(class-5, the-2)
amod(class-5, black-3)
amod(class-5, middle-4)
nsubj(flourished-7, class-5)
aux(flourished-7, has-6)
root(ROOT-0, flourished-7)
case(years-12, in-8)
det(years-12, the-9)
amod(years-12, past-10)
nummod(years-12, 20-11)
nmod:in(flourished-7, years-12)
case(opportunities-14, as-13)
nmod:as(opened-19, opportunities-14)
case(professions-17, in-15)
amod(professions-17, various-16)
nmod:in(opportunities-14, professions-17)
aux(opened-19, have-18)
ccomp(flourished-7, opened-19)
compound:prt(opened-19, up-20)
punct(flourished-7, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#class

flourish :: The thesis already has been broadly bruited -- that over the past five centuries the great empires -LRB- Spanish , Dutch , French , British -RRB- have risen , flourished and won their wars because their effective military power was backed by a superior economic force ./.
det(thesis-2, The-1)
nsubjpass(bruited-7, thesis-2)
advmod(bruited-7, already-3)
aux(bruited-7, has-4)
auxpass(bruited-7, been-5)
advmod(bruited-7, broadly-6)
root(ROOT-0, bruited-7)
punct(bruited-7, ---8)
mark(risen-28, that-9)
case(centuries-14, over-10)
det(centuries-14, the-11)
amod(centuries-14, past-12)
nummod(centuries-14, five-13)
nmod:over(risen-28, centuries-14)
det(empires-17, the-15)
amod(empires-17, great-16)
nsubj(risen-28, empires-17)
nsubj(flourished-30, empires-17)
nsubj(won-32, empires-17)
punct(Spanish-19, -LRB--18)
dep(empires-17, Spanish-19)
punct(Spanish-19, ,-20)
conj(Spanish-19, Dutch-21)
punct(Spanish-19, ,-22)
conj(Spanish-19, French-23)
punct(Spanish-19, ,-24)
dep(Spanish-19, British-25)
punct(Spanish-19, -RRB--26)
aux(risen-28, have-27)
ccomp(bruited-7, risen-28)
punct(risen-28, ,-29)
ccomp(bruited-7, flourished-30)
conj:and(risen-28, flourished-30)
cc(risen-28, and-31)
ccomp(bruited-7, won-32)
conj:and(risen-28, won-32)
nmod:poss(wars-34, their-33)
dobj(won-32, wars-34)
mark(backed-41, because-35)
nmod:poss(power-39, their-36)
amod(power-39, effective-37)
amod(power-39, military-38)
nsubjpass(backed-41, power-39)
auxpass(backed-41, was-40)
advcl(risen-28, backed-41)
case(force-46, by-42)
det(force-46, a-43)
amod(force-46, superior-44)
amod(force-46, economic-45)
nmod:agent(backed-41, force-46)
punct(bruited-7, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#empires

flourish :: Industry consultants predict groupware will flourish because personal-computer software that helps individuals work better has n't noticeably increased the productivity of groups ./.
compound(consultants-2, Industry-1)
nsubj(predict-3, consultants-2)
root(ROOT-0, predict-3)
nsubj(flourish-6, groupware-4)
aux(flourish-6, will-5)
ccomp(predict-3, flourish-6)
mark(increased-18, because-7)
compound(software-9, personal-computer-8)
nsubj(helps-11, software-9)
nsubj(increased-18, software-9)
ref(software-9, that-10)
acl:relcl(software-9, helps-11)
nsubj(work-13, individuals-12)
ccomp(helps-11, work-13)
advmod(work-13, better-14)
aux(increased-18, has-15)
neg(increased-18, n't-16)
advmod(increased-18, noticeably-17)
advcl(flourish-6, increased-18)
det(productivity-20, the-19)
dobj(increased-18, productivity-20)
case(groups-22, of-21)
nmod:of(productivity-20, groups-22)
punct(predict-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#groupware

flourish :: Spanish-speaking television is flourishing as well -- providing better opportunities to reach the Hispanic audience ./.
amod(television-2, Spanish-speaking-1)
nsubj(flourishing-4, television-2)
aux(flourishing-4, is-3)
root(ROOT-0, flourishing-4)
advmod(flourishing-4, as-5)
mwe(as-5, well-6)
punct(flourishing-4, ---7)
parataxis(flourishing-4, providing-8)
amod(opportunities-10, better-9)
dobj(providing-8, opportunities-10)
mark(reach-12, to-11)
acl(opportunities-10, reach-12)
det(audience-15, the-13)
amod(audience-15, Hispanic-14)
dobj(reach-12, audience-15)
punct(flourishing-4, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#television

flourish :: The broad argument of Mr. Levin 's book , within whose parameters all his wonderful analogies flourish , is considerably overstated ./.
det(argument-3, The-1)
amod(argument-3, broad-2)
nsubjpass(overstated-21, argument-3)
case(book-8, of-4)
compound(Levin-6, Mr.-5)
nmod:poss(book-8, Levin-6)
case(Levin-6, 's-7)
nmod:of(argument-3, book-8)
punct(book-8, ,-9)
case(parameters-12, within-10)
nmod:poss(parameters-12, whose-11)
nmod:within(book-8, parameters-12)
det:predet(analogies-16, all-13)
nmod:poss(analogies-16, his-14)
amod(analogies-16, wonderful-15)
nsubj(flourish-17, analogies-16)
acl:relcl(parameters-12, flourish-17)
punct(book-8, ,-18)
auxpass(overstated-21, is-19)
advmod(overstated-21, considerably-20)
root(ROOT-0, overstated-21)
punct(overstated-21, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#analogies

flourish :: Imports grew at a fast rate , he said , because of the flourishing re-export trade and , to a lesser extent , because of strong domestic demand ./.
nsubj(grew-2, Imports-1)
root(ROOT-0, grew-2)
case(rate-6, at-3)
det(rate-6, a-4)
amod(rate-6, fast-5)
nmod:at(grew-2, rate-6)
punct(said-9, ,-7)
nsubj(said-9, he-8)
parataxis(grew-2, said-9)
punct(said-9, ,-10)
case(trade-16, because-11)
mwe(because-11, of-12)
det(trade-16, the-13)
amod(trade-16, flourishing-14)
compound(trade-16, re-export-15)
nmod:because_of(grew-2, trade-16)
cc(trade-16, and-17)
punct(extent-22, ,-18)
case(extent-22, to-19)
det(extent-22, a-20)
amod(extent-22, lesser-21)
nmod:to(trade-16, extent-22)
punct(extent-22, ,-23)
case(demand-28, because-24)
mwe(because-24, of-25)
amod(demand-28, strong-26)
amod(demand-28, domestic-27)
nmod:because_of(grew-2, demand-28)
punct(grew-2, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#trade

flourish :: China , also an ally of North Korea , is sure to come , and `` unofficial '' trade with Beijing , despite the lack of diplomatic relations , is flourishing ./.
nsubj(sure-11, China-1)
nsubj:xsubj(come-13, China-1)
punct(China-1, ,-2)
advmod(ally-5, also-3)
det(ally-5, an-4)
appos(China-1, ally-5)
case(Korea-8, of-6)
compound(Korea-8, North-7)
nmod:of(ally-5, Korea-8)
punct(China-1, ,-9)
cop(sure-11, is-10)
root(ROOT-0, sure-11)
mark(come-13, to-12)
xcomp(sure-11, come-13)
punct(sure-11, ,-14)
cc(sure-11, and-15)
punct(trade-19, ``-16)
amod(trade-19, unofficial-17)
punct(trade-19, ''-18)
nsubj(flourishing-31, trade-19)
case(Beijing-21, with-20)
nmod:with(trade-19, Beijing-21)
punct(trade-19, ,-22)
case(lack-25, despite-23)
det(lack-25, the-24)
nmod:despite(trade-19, lack-25)
case(relations-28, of-26)
amod(relations-28, diplomatic-27)
nmod:of(lack-25, relations-28)
punct(trade-19, ,-29)
aux(flourishing-31, is-30)
conj:and(sure-11, flourishing-31)
punct(sure-11, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#trade

flourish :: McDonald 's is flourishing in 11 other nations in the region ./.
nsubj(flourishing-4, McDonald-1)
case(McDonald-1, 's-2)
aux(flourishing-4, is-3)
root(ROOT-0, flourishing-4)
case(nations-8, in-5)
nummod(nations-8, 11-6)
amod(nations-8, other-7)
nmod:in(flourishing-4, nations-8)
case(region-11, in-9)
det(region-11, the-10)
nmod:in(flourishing-4, region-11)
punct(flourishing-4, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#mcdonald

flourish :: A Texas Air spokesman declines to say what income , if any , the parent company is drawing from this flourishing new unit ./.
det(spokesman-4, A-1)
compound(spokesman-4, Texas-2)
compound(spokesman-4, Air-3)
nsubj(declines-5, spokesman-4)
nsubj:xsubj(say-7, spokesman-4)
root(ROOT-0, declines-5)
mark(say-7, to-6)
xcomp(declines-5, say-7)
det(income-9, what-8)
dobj(drawing-18, income-9)
punct(any-12, ,-10)
mark(any-12, if-11)
dep(drawing-18, any-12)
punct(any-12, ,-13)
det(company-16, the-14)
compound(company-16, parent-15)
nsubj(drawing-18, company-16)
aux(drawing-18, is-17)
ccomp(say-7, drawing-18)
case(unit-23, from-19)
det(unit-23, this-20)
amod(unit-23, flourishing-21)
amod(unit-23, new-22)
nmod:from(drawing-18, unit-23)
punct(declines-5, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#unit

flourish :: At the beginning of the book , Mr. Haraszti asks , `` Is freedom really necessary for art to flourish ? ''/''
case(beginning-3, At-1)
det(beginning-3, the-2)
nmod:at(asks-10, beginning-3)
case(book-6, of-4)
det(book-6, the-5)
nmod:of(beginning-3, book-6)
punct(asks-10, ,-7)
compound(Haraszti-9, Mr.-8)
nsubj(asks-10, Haraszti-9)
root(ROOT-0, asks-10)
punct(asks-10, ,-11)
punct(asks-10, ``-12)
cop(necessary-16, Is-13)
nsubj(necessary-16, freedom-14)
advmod(necessary-16, really-15)
dep(asks-10, necessary-16)
mark(flourish-20, for-17)
nsubj(flourish-20, art-18)
mark(flourish-20, to-19)
advcl(necessary-16, flourish-20)
punct(necessary-16, ?-21)
punct(asks-10, ''-22)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: flourish#art

flourish :: For that , Dillard needs to study hard , retailing analysts and consultants say , because the small cities where Dillard has flourished are n't much of a training ground for the markets it wants to enter ./.
case(that-2, For-1)
nmod:for(needs-5, that-2)
punct(needs-5, ,-3)
nsubj(needs-5, Dillard-4)
nsubj:xsubj(study-7, Dillard-4)
root(ROOT-0, needs-5)
mark(study-7, to-6)
xcomp(needs-5, study-7)
advmod(study-7, hard-8)
punct(say-14, ,-9)
amod(analysts-11, retailing-10)
nsubj(say-14, analysts-11)
cc(analysts-11, and-12)
conj:and(analysts-11, consultants-13)
nsubj(say-14, consultants-13)
parataxis(hard-8, say-14)
punct(say-14, ,-15)
mark(are-24, because-16)
det(cities-19, the-17)
amod(cities-19, small-18)
nsubj(are-24, cities-19)
advmod(flourished-23, where-20)
nsubj(flourished-23, Dillard-21)
aux(flourished-23, has-22)
acl:relcl(cities-19, flourished-23)
advcl(hard-8, are-24)
neg(are-24, n't-25)
dep(n't-25, much-26)
case(ground-30, of-27)
det(ground-30, a-28)
compound(ground-30, training-29)
nmod:of(much-26, ground-30)
case(markets-33, for-31)
det(markets-33, the-32)
nmod:for(ground-30, markets-33)
nsubj(wants-35, it-34)
nsubj:xsubj(enter-37, it-34)
acl:relcl(markets-33, wants-35)
mark(enter-37, to-36)
xcomp(wants-35, enter-37)
punct(needs-5, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#dillard

flourish :: And the black middle class has flourished in the past 20 years as opportunities in various professions have opened up ./.
cc(flourished-7, And-1)
det(class-5, the-2)
amod(class-5, black-3)
amod(class-5, middle-4)
nsubj(flourished-7, class-5)
aux(flourished-7, has-6)
root(ROOT-0, flourished-7)
case(years-12, in-8)
det(years-12, the-9)
amod(years-12, past-10)
nummod(years-12, 20-11)
nmod:in(flourished-7, years-12)
case(opportunities-14, as-13)
nmod:as(opened-19, opportunities-14)
case(professions-17, in-15)
amod(professions-17, various-16)
nmod:in(opportunities-14, professions-17)
aux(opened-19, have-18)
ccomp(flourished-7, opened-19)
compound:prt(opened-19, up-20)
punct(flourished-7, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#class

flourish :: Industry consultants predict groupware will flourish because personal-computer software that helps individuals work better has n't noticeably increased the productivity of groups ./.
compound(consultants-2, Industry-1)
nsubj(predict-3, consultants-2)
root(ROOT-0, predict-3)
nsubj(flourish-6, groupware-4)
aux(flourish-6, will-5)
ccomp(predict-3, flourish-6)
mark(increased-18, because-7)
compound(software-9, personal-computer-8)
nsubj(helps-11, software-9)
nsubj(increased-18, software-9)
ref(software-9, that-10)
acl:relcl(software-9, helps-11)
nsubj(work-13, individuals-12)
ccomp(helps-11, work-13)
advmod(work-13, better-14)
aux(increased-18, has-15)
neg(increased-18, n't-16)
advmod(increased-18, noticeably-17)
advcl(flourish-6, increased-18)
det(productivity-20, the-19)
dobj(increased-18, productivity-20)
case(groups-22, of-21)
nmod:of(productivity-20, groups-22)
punct(predict-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#groupware

flourish :: Boston is flourishing , office space in the South End is still cheaper than in nearby business districts , and deregulation of deposit rates allows banks to compete in new ways ./.
nsubj(flourishing-3, Boston-1)
aux(flourishing-3, is-2)
root(ROOT-0, flourishing-3)
punct(flourishing-3, ,-4)
compound(space-6, office-5)
nsubj(cheaper-13, space-6)
case(End-10, in-7)
det(End-10, the-8)
amod(End-10, South-9)
nmod:in(space-6, End-10)
cop(cheaper-13, is-11)
advmod(cheaper-13, still-12)
ccomp(flourishing-3, cheaper-13)
case(districts-18, than-14)
case(districts-18, in-15)
amod(districts-18, nearby-16)
compound(districts-18, business-17)
nmod:in(cheaper-13, districts-18)
punct(flourishing-3, ,-19)
cc(flourishing-3, and-20)
nsubj(allows-25, deregulation-21)
case(rates-24, of-22)
compound(rates-24, deposit-23)
nmod:of(deregulation-21, rates-24)
conj:and(flourishing-3, allows-25)
dobj(allows-25, banks-26)
nsubj:xsubj(compete-28, banks-26)
mark(compete-28, to-27)
xcomp(allows-25, compete-28)
case(ways-31, in-29)
amod(ways-31, new-30)
nmod:in(compete-28, ways-31)
punct(flourishing-3, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#boston

flourish :: For entrepreneurship to flourish , it must be clear to all Poles that money-making not only will be permitted but also will be fostered ./.
case(entrepreneurship-2, For-1)
nmod:for(clear-9, entrepreneurship-2)
mark(flourish-4, to-3)
acl(entrepreneurship-2, flourish-4)
punct(clear-9, ,-5)
nsubj(clear-9, it-6)
aux(clear-9, must-7)
cop(clear-9, be-8)
root(ROOT-0, clear-9)
case(Poles-12, to-10)
det(Poles-12, all-11)
nmod:to(clear-9, Poles-12)
dobj(permitted-19, Poles-12)
ref(Poles-12, that-13)
nsubjpass(permitted-19, money-making-14)
nsubjpass(fostered-24, money-making-14)
neg(only-16, not-15)
cc:preconj(permitted-19, only-16)
aux(permitted-19, will-17)
auxpass(permitted-19, be-18)
acl:relcl(Poles-12, permitted-19)
cc(permitted-19, but-20)
advmod(fostered-24, also-21)
aux(fostered-24, will-22)
auxpass(fostered-24, be-23)
acl:relcl(Poles-12, fostered-24)
conj:and(permitted-19, fostered-24)
punct(clear-9, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

flourish :: International collaboration flourishes between the major laboratories ./.
amod(flourishes-3, International-1)
compound(flourishes-3, collaboration-2)
root(ROOT-0, flourishes-3)
case(laboratories-7, between-4)
det(laboratories-7, the-5)
amod(laboratories-7, major-6)
nmod:between(flourishes-3, laboratories-7)
punct(flourishes-3, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#laboratories

flourish :: The three pairs of lovers are members of the European planter class ; the mechanicals are Brazilian workmen ; and the fairy folk are practitioners of the voodoolike religion of Macumba , the African-based cult worship that flourished outside the law in Brazil 's jungles ./.
det(pairs-3, The-1)
nummod(pairs-3, three-2)
nsubj(members-7, pairs-3)
case(lovers-5, of-4)
nmod:of(pairs-3, lovers-5)
cop(members-7, are-6)
root(ROOT-0, members-7)
case(class-12, of-8)
det(class-12, the-9)
amod(class-12, European-10)
compound(class-12, planter-11)
nmod:of(members-7, class-12)
punct(members-7, ;-13)
det(mechanicals-15, the-14)
nsubj(workmen-18, mechanicals-15)
cop(workmen-18, are-16)
amod(workmen-18, Brazilian-17)
conj:and(members-7, workmen-18)
punct(members-7, ;-19)
cc(members-7, and-20)
det(folk-23, the-21)
compound(folk-23, fairy-22)
nsubj(practitioners-25, folk-23)
cop(practitioners-25, are-24)
conj:and(members-7, practitioners-25)
case(religion-29, of-26)
det(religion-29, the-27)
amod(religion-29, voodoolike-28)
nmod:of(practitioners-25, religion-29)
case(Macumba-31, of-30)
nmod:of(religion-29, Macumba-31)
punct(Macumba-31, ,-32)
det(worship-36, the-33)
amod(worship-36, African-based-34)
compound(worship-36, cult-35)
appos(Macumba-31, worship-36)
nsubj(flourished-38, worship-36)
ref(worship-36, that-37)
acl:relcl(worship-36, flourished-38)
case(law-41, outside-39)
det(law-41, the-40)
nmod:outside(flourished-38, law-41)
case(jungles-45, in-42)
nmod:poss(jungles-45, Brazil-43)
case(Brazil-43, 's-44)
nmod:in(law-41, jungles-45)
punct(members-7, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#worship

flourish :: Methane-making bacteria flourish first in the stomach of ruminants like cattle , where they aid their hosts by digesting carbohydrates , particularly the cellulose-rich plant stalks and leaves ./.
amod(bacteria-2, Methane-making-1)
nsubj(flourish-3, bacteria-2)
root(ROOT-0, flourish-3)
advmod(flourish-3, first-4)
case(stomach-7, in-5)
det(stomach-7, the-6)
nmod:in(flourish-3, stomach-7)
case(ruminants-9, of-8)
nmod:of(stomach-7, ruminants-9)
case(cattle-11, like-10)
nmod:like(ruminants-9, cattle-11)
punct(cattle-11, ,-12)
advmod(aid-15, where-13)
nsubj(aid-15, they-14)
acl:relcl(cattle-11, aid-15)
nmod:poss(hosts-17, their-16)
dobj(aid-15, hosts-17)
mark(digesting-19, by-18)
advcl(aid-15, digesting-19)
dobj(digesting-19, carbohydrates-20)
punct(cattle-11, ,-21)
advmod(stalks-26, particularly-22)
det(stalks-26, the-23)
amod(stalks-26, cellulose-rich-24)
compound(stalks-26, plant-25)
appos(cattle-11, stalks-26)
cc(cattle-11, and-27)
nmod:like(ruminants-9, leaves-28)
conj:and(cattle-11, leaves-28)
punct(flourish-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#bacteria

flourish :: Another major Japanese concern is that any mold that slips throught U.S. screening procedures would flourish during the long passage to Japan ./.
det(concern-4, Another-1)
amod(concern-4, major-2)
amod(concern-4, Japanese-3)
nsubj(is-5, concern-4)
root(ROOT-0, is-5)
mark(flourish-16, that-6)
det(mold-8, any-7)
nsubj(slips-10, mold-8)
nsubj(flourish-16, mold-8)
ref(mold-8, that-9)
acl:relcl(mold-8, slips-10)
amod(procedures-14, throught-11)
compound(procedures-14, U.S.-12)
compound(procedures-14, screening-13)
dobj(slips-10, procedures-14)
aux(flourish-16, would-15)
ccomp(is-5, flourish-16)
case(passage-20, during-17)
det(passage-20, the-18)
amod(passage-20, long-19)
nmod:during(flourish-16, passage-20)
case(Japan-22, to-21)
nmod:to(passage-20, Japan-22)
punct(is-5, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#mold

flourish :: It flourishes in dry weather , occasionally infecting peanut and cottonseed crops in the Southeast ./.
nsubj(flourishes-2, It-1)
root(ROOT-0, flourishes-2)
case(weather-5, in-3)
amod(weather-5, dry-4)
nmod:in(flourishes-2, weather-5)
punct(weather-5, ,-6)
advmod(infecting-8, occasionally-7)
acl(weather-5, infecting-8)
compound(crops-12, peanut-9)
cc(peanut-9, and-10)
conj:and(peanut-9, cottonseed-11)
compound(crops-12, cottonseed-11)
dobj(infecting-8, crops-12)
case(Southeast-15, in-13)
det(Southeast-15, the-14)
nmod:in(infecting-8, Southeast-15)
punct(flourishes-2, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#it

flourish :: To keep the bananas flourishing in winter , you need a $ 3 , 400 heat blower and $ 5 , 500 of diesel fuel ./.
mark(keep-2, To-1)
advcl(need-10, keep-2)
det(bananas-4, the-3)
nsubj(flourishing-5, bananas-4)
dep(keep-2, flourishing-5)
case(winter-7, in-6)
nmod:in(flourishing-5, winter-7)
punct(need-10, ,-8)
nsubj(need-10, you-9)
root(ROOT-0, need-10)
dobj(need-10, a-11)
dep(3-13, $-12)
dep(a-11, 3-13)
punct(3-13, ,-14)
nummod(blower-17, 400-15)
compound(blower-17, heat-16)
dep(a-11, blower-17)
conj:and(3-13, blower-17)
cc(3-13, and-18)
dep(5-20, $-19)
dep(a-11, 5-20)
conj:and(3-13, 5-20)
punct(5-20, ,-21)
amod(5-20, 500-22)
case(fuel-25, of-23)
compound(fuel-25, diesel-24)
nmod:of(500-22, fuel-25)
punct(need-10, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#bananas

flourish :: As they flourish , they provide food and hiding places for little fish , which in turn provide food for bigger fish , and so on ./.
mark(flourish-3, As-1)
nsubj(flourish-3, they-2)
advcl(provide-6, flourish-3)
punct(provide-6, ,-4)
nsubj(provide-6, they-5)
root(ROOT-0, provide-6)
compound(places-10, food-7)
cc(food-7, and-8)
conj:and(food-7, hiding-9)
compound(places-10, hiding-9)
dobj(provide-6, places-10)
case(fish-13, for-11)
amod(fish-13, little-12)
nmod:for(places-10, fish-13)
nsubj(provide-18, fish-13)
punct(fish-13, ,-14)
ref(fish-13, which-15)
case(turn-17, in-16)
nmod:in(provide-18, turn-17)
acl:relcl(fish-13, provide-18)
dobj(provide-18, food-19)
case(fish-22, for-20)
amod(fish-22, bigger-21)
nmod:for(food-19, fish-22)
punct(fish-13, ,-23)
cc(provide-6, and-24)
advmod(on-26, so-25)
advmod(provide-6, on-26)
punct(provide-6, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flourish#they

flow :: The focus on takeover issues provided market players with a chance to `` keep the juices flowing without going to sleep , '' said Edward P. Nicoski , a market analyst at Piper Jaffray & Hopwood , Minneapolis ./.
det(focus-2, The-1)
nsubj(provided-6, focus-2)
case(issues-5, on-3)
compound(issues-5, takeover-4)
nmod:on(focus-2, issues-5)
ccomp(said-24, provided-6)
compound(players-8, market-7)
dobj(provided-6, players-8)
case(chance-11, with-9)
det(chance-11, a-10)
nmod:with(provided-6, chance-11)
mark(keep-14, to-12)
punct(keep-14, ``-13)
acl(chance-11, keep-14)
det(juices-16, the-15)
nsubj(flowing-17, juices-16)
dep(keep-14, flowing-17)
mark(going-19, without-18)
advcl(flowing-17, going-19)
mark(sleep-21, to-20)
xcomp(going-19, sleep-21)
punct(said-24, ,-22)
punct(said-24, ''-23)
root(ROOT-0, said-24)
compound(Nicoski-27, Edward-25)
compound(Nicoski-27, P.-26)
nsubj(said-24, Nicoski-27)
punct(Nicoski-27, ,-28)
det(analyst-31, a-29)
compound(analyst-31, market-30)
appos(Nicoski-27, analyst-31)
case(Jaffray-34, at-32)
compound(Jaffray-34, Piper-33)
nmod:at(analyst-31, Jaffray-34)
cc(Jaffray-34, &-35)
nmod:at(analyst-31, Hopwood-36)
conj:&(Jaffray-34, Hopwood-36)
punct(Jaffray-34, ,-37)
appos(Jaffray-34, Minneapolis-38)
punct(said-24, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#juices

flow :: On June 15 , the Senate passed by a vote of 96 to 0 a resolution -- sponsored by two Democrats , Sasser of Tennessee and Bradley of New Jersey -- urging the President to place the issue of the impact on Western security of credit flows to Warsaw-pact countries on the formal agenda at Toronto ./.
case(June-2, On-1)
nmod:on(passed-7, June-2)
nummod(June-2, 15-3)
punct(passed-7, ,-4)
det(Senate-6, the-5)
nsubj(passed-7, Senate-6)
root(ROOT-0, passed-7)
case(vote-10, by-8)
det(vote-10, a-9)
nmod:by(passed-7, vote-10)
case(resolution-16, of-11)
compound(0-14, 96-12)
dep(0-14, to-13)
nummod(resolution-16, 0-14)
det(resolution-16, a-15)
nmod:of(vote-10, resolution-16)
punct(vote-10, ---17)
acl(vote-10, sponsored-18)
case(Democrats-21, by-19)
nummod(Democrats-21, two-20)
nmod:by(sponsored-18, Democrats-21)
punct(Democrats-21, ,-22)
appos(Democrats-21, Sasser-23)
case(Tennessee-25, of-24)
nmod:of(Sasser-23, Tennessee-25)
cc(Sasser-23, and-26)
appos(Democrats-21, Bradley-27)
conj:and(Sasser-23, Bradley-27)
case(Jersey-30, of-28)
compound(Jersey-30, New-29)
nmod:of(Bradley-27, Jersey-30)
punct(vote-10, ---31)
csubj(flows-47, urging-32)
det(President-34, the-33)
dobj(urging-32, President-34)
nsubj:xsubj(place-36, President-34)
mark(place-36, to-35)
xcomp(urging-32, place-36)
det(issue-38, the-37)
dobj(place-36, issue-38)
case(impact-41, of-39)
det(impact-41, the-40)
nmod:of(issue-38, impact-41)
case(security-44, on-42)
amod(security-44, Western-43)
nmod:on(impact-41, security-44)
case(credit-46, of-45)
nmod:of(security-44, credit-46)
dep(vote-10, flows-47)
case(countries-50, to-48)
amod(countries-50, Warsaw-pact-49)
nmod:to(flows-47, countries-50)
case(agenda-54, on-51)
det(agenda-54, the-52)
amod(agenda-54, formal-53)
nmod:on(flows-47, agenda-54)
case(Toronto-56, at-55)
nmod:at(agenda-54, Toronto-56)
punct(passed-7, .-57)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#countries

flow :: But Mead kept the information flowing to all bona fide customers of its service ./.
cc(kept-3, But-1)
nsubj(kept-3, Mead-2)
root(ROOT-0, kept-3)
det(information-5, the-4)
nsubj(flowing-6, information-5)
dep(kept-3, flowing-6)
case(customers-11, to-7)
det(customers-11, all-8)
compound(customers-11, bona-9)
compound(customers-11, fide-10)
nmod:to(flowing-6, customers-11)
case(service-14, of-12)
nmod:poss(service-14, its-13)
nmod:of(customers-11, service-14)
punct(kept-3, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#information

flow :: `` That would have an impact on aid flowing to El Salvador . ''/''
root(ROOT-0, ``-1)
nsubj(have-4, That-2)
aux(have-4, would-3)
root(``-1, have-4)
det(impact-6, an-5)
dobj(have-4, impact-6)
case(aid-8, on-7)
nmod:on(impact-6, aid-8)
acl(aid-8, flowing-9)
case(Salvador-12, to-10)
compound(Salvador-12, El-11)
nmod:to(flowing-9, Salvador-12)
punct(have-4, .-13)
punct(have-4, ''-14)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: flow#salvador

flow :: The people who make the decisions -- directors and big institutional investors -- seem prepared to keep the money flowing to the top so long as the return to shareholders is deemed adequate ./.
det(people-2, The-1)
nsubj(make-4, people-2)
nsubj(seem-14, people-2)
ref(people-2, who-3)
acl:relcl(people-2, make-4)
det(decisions-6, the-5)
dobj(make-4, decisions-6)
punct(decisions-6, ---7)
dep(decisions-6, directors-8)
cc(directors-8, and-9)
amod(investors-12, big-10)
amod(investors-12, institutional-11)
dep(decisions-6, investors-12)
conj:and(directors-8, investors-12)
punct(decisions-6, ---13)
root(ROOT-0, seem-14)
xcomp(seem-14, prepared-15)
mark(keep-17, to-16)
xcomp(prepared-15, keep-17)
det(money-19, the-18)
nsubj(flowing-20, money-19)
dep(keep-17, flowing-20)
case(top-23, to-21)
det(top-23, the-22)
nmod:to(flowing-20, top-23)
advmod(long-25, so-24)
advmod(flowing-20, long-25)
mark(deemed-32, as-26)
det(return-28, the-27)
nsubjpass(deemed-32, return-28)
case(shareholders-30, to-29)
nmod:to(return-28, shareholders-30)
auxpass(deemed-32, is-31)
advcl(long-25, deemed-32)
xcomp(deemed-32, adequate-33)
punct(seem-14, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#money

flow :: As late as Wednesday night , jets carrying signatures were still touching down at the airport in Brasilia , and motorcades were flowing into town ./.
advmod(late-2, As-1)
advmod(touching-12, late-2)
case(night-5, as-3)
compound(night-5, Wednesday-4)
nmod:as(late-2, night-5)
punct(touching-12, ,-6)
nsubj(touching-12, jets-7)
acl(jets-7, carrying-8)
dobj(carrying-8, signatures-9)
aux(touching-12, were-10)
advmod(touching-12, still-11)
root(ROOT-0, touching-12)
compound:prt(touching-12, down-13)
case(airport-16, at-14)
det(airport-16, the-15)
nmod:at(touching-12, airport-16)
case(Brasilia-18, in-17)
nmod:in(touching-12, Brasilia-18)
punct(touching-12, ,-19)
cc(touching-12, and-20)
nsubj(flowing-23, motorcades-21)
aux(flowing-23, were-22)
conj:and(touching-12, flowing-23)
case(town-25, into-24)
nmod:into(flowing-23, town-25)
punct(touching-12, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#motorcades

flow :: If Europe should be a region where merchandise moves freely , why should n't people flow freely ?/.
mark(region-6, If-1)
nsubj(region-6, Europe-2)
aux(region-6, should-3)
cop(region-6, be-4)
det(region-6, a-5)
dep(flow-16, region-6)
advmod(moves-9, where-7)
nsubj(moves-9, merchandise-8)
acl:relcl(region-6, moves-9)
advmod(moves-9, freely-10)
punct(flow-16, ,-11)
advmod(flow-16, why-12)
aux(flow-16, should-13)
neg(flow-16, n't-14)
nsubj(flow-16, people-15)
root(ROOT-0, flow-16)
advmod(flow-16, freely-17)
punct(flow-16, ?-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#people

flow :: As in 1913 , private capital flows among the principal industrial economies are now huge relative to official reserves and to the underlying flow of commodity trade ./.
case(1913-3, As-1)
case(1913-3, in-2)
nmod:in(flows-7, 1913-3)
punct(flows-7, ,-4)
amod(capital-6, private-5)
nsubj(flows-7, capital-6)
root(ROOT-0, flows-7)
case(economies-12, among-8)
det(economies-12, the-9)
amod(economies-12, principal-10)
amod(economies-12, industrial-11)
nmod:among(flows-7, economies-12)
cop(huge-15, are-13)
advmod(huge-15, now-14)
ccomp(flows-7, huge-15)
advmod(huge-15, relative-16)
advmod(huge-15, relative-16')
conj:and(relative-16, relative-16')
case(reserves-19, to-17)
amod(reserves-19, official-18)
nmod:to(relative-16, reserves-19)
cc(relative-16, and-20)
case(flow-24, to-21)
det(flow-24, the-22)
amod(flow-24, underlying-23)
nmod:to(relative-16', flow-24)
case(trade-27, of-25)
compound(trade-27, commodity-26)
nmod:of(flow-24, trade-27)
punct(flows-7, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#capital

flow :: The music was really flowing , finally ./.
det(music-2, The-1)
nsubj(flowing-5, music-2)
aux(flowing-5, was-3)
advmod(flowing-5, really-4)
root(ROOT-0, flowing-5)
punct(flowing-5, ,-6)
advmod(flowing-5, finally-7)
punct(flowing-5, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#music

flow :: Even now , the cash flows of Federated , owned by Robert Campeau , provide relatively thin coverage of debt charges , says one analyst ./.
advmod(now-2, Even-1)
advmod(provide-15, now-2)
punct(provide-15, ,-3)
det(flows-6, the-4)
compound(flows-6, cash-5)
nsubj(provide-15, flows-6)
case(Federated-8, of-7)
nmod:of(flows-6, Federated-8)
punct(Federated-8, ,-9)
acl(Federated-8, owned-10)
case(Campeau-13, by-11)
compound(Campeau-13, Robert-12)
nmod:by(owned-10, Campeau-13)
punct(Federated-8, ,-14)
ccomp(says-23, provide-15)
advmod(thin-17, relatively-16)
amod(coverage-18, thin-17)
dobj(provide-15, coverage-18)
case(charges-21, of-19)
compound(charges-21, debt-20)
nmod:of(coverage-18, charges-21)
punct(says-23, ,-22)
root(ROOT-0, says-23)
nummod(analyst-25, one-24)
nsubj(says-23, analyst-25)
punct(says-23, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#federated

flow :: From the seminars flowed requests for help in updating substandard tanks ./.
case(seminars-3, From-1)
det(seminars-3, the-2)
root(ROOT-0, seminars-3)
amod(requests-5, flowed-4)
dep(seminars-3, requests-5)
case(help-7, for-6)
nmod:for(requests-5, help-7)
mark(updating-9, in-8)
acl(help-7, updating-9)
amod(tanks-11, substandard-10)
dobj(updating-9, tanks-11)
punct(seminars-3, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#requests

flow :: By tapping the precision of the official U.S. timekeeping device , county officials say they can improve the timing of stoplights on major roads to allow traffic to flow more smoothly at posted speeds ./.
mark(tapping-2, By-1)
advcl(say-14, tapping-2)
det(precision-4, the-3)
dobj(tapping-2, precision-4)
case(device-10, of-5)
det(device-10, the-6)
amod(device-10, official-7)
compound(device-10, U.S.-8)
amod(device-10, timekeeping-9)
nmod:of(precision-4, device-10)
punct(say-14, ,-11)
compound(officials-13, county-12)
nsubj(say-14, officials-13)
root(ROOT-0, say-14)
nsubj(improve-17, they-15)
aux(improve-17, can-16)
ccomp(say-14, improve-17)
det(timing-19, the-18)
dobj(improve-17, timing-19)
case(stoplights-21, of-20)
nmod:of(timing-19, stoplights-21)
case(roads-24, on-22)
amod(roads-24, major-23)
nmod:on(timing-19, roads-24)
mark(allow-26, to-25)
advcl(improve-17, allow-26)
dobj(allow-26, traffic-27)
nsubj:xsubj(flow-29, traffic-27)
mark(flow-29, to-28)
xcomp(allow-26, flow-29)
advmod(smoothly-31, more-30)
advmod(flow-29, smoothly-31)
case(speeds-34, at-32)
amod(speeds-34, posted-33)
nmod:at(flow-29, speeds-34)
punct(say-14, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#traffic

flow :: The emotions in it flow between the playwright and his audience ./.
det(emotions-2, The-1)
root(ROOT-0, emotions-2)
mark(flow-5, in-3)
nsubj(flow-5, it-4)
acl(emotions-2, flow-5)
case(playwright-8, between-6)
det(playwright-8, the-7)
nmod:between(flow-5, playwright-8)
cc(playwright-8, and-9)
nmod:poss(audience-11, his-10)
nmod:between(flow-5, audience-11)
conj:and(playwright-8, audience-11)
punct(emotions-2, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#it

flow :: I beg the tribunal to understand that my zeal did not flow from sympathy with the goals or behavior of most of my clients ./.
nsubj(beg-2, I-1)
root(ROOT-0, beg-2)
det(tribunal-4, the-3)
dobj(beg-2, tribunal-4)
mark(understand-6, to-5)
advcl(beg-2, understand-6)
mark(flow-12, that-7)
nmod:poss(zeal-9, my-8)
nsubj(flow-12, zeal-9)
aux(flow-12, did-10)
neg(flow-12, not-11)
ccomp(understand-6, flow-12)
case(sympathy-14, from-13)
nmod:from(flow-12, sympathy-14)
case(goals-17, with-15)
det(goals-17, the-16)
nmod:with(sympathy-14, goals-17)
cc(goals-17, or-18)
nmod:with(sympathy-14, behavior-19)
conj:or(goals-17, behavior-19)
case(most-21, of-20)
nmod:of(goals-17, most-21)
case(clients-24, of-22)
nmod:poss(clients-24, my-23)
nmod:of(most-21, clients-24)
punct(beg-2, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#zeal

flow :: With huge amounts of debt needed to pay for megadeals , buyers are seeking targets with rich cash flows to cover interest costs on that debt ./.
case(amounts-3, With-1)
amod(amounts-3, huge-2)
nmod:with(seeking-14, amounts-3)
case(debt-5, of-4)
nmod:of(amounts-3, debt-5)
acl(amounts-3, needed-6)
mark(pay-8, to-7)
xcomp(needed-6, pay-8)
case(megadeals-10, for-9)
nmod:for(pay-8, megadeals-10)
punct(seeking-14, ,-11)
nsubj(seeking-14, buyers-12)
aux(seeking-14, are-13)
root(ROOT-0, seeking-14)
nsubj(flows-19, targets-15)
nsubj:xsubj(cover-21, targets-15)
case(cash-18, with-16)
amod(cash-18, rich-17)
nmod:with(targets-15, cash-18)
ccomp(seeking-14, flows-19)
mark(cover-21, to-20)
xcomp(flows-19, cover-21)
compound(costs-23, interest-22)
dobj(cover-21, costs-23)
case(debt-26, on-24)
det(debt-26, that-25)
nmod:on(costs-23, debt-26)
punct(seeking-14, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#targets

flow :: `` Our suspicion is that very pessimistic views on trade are paying insufficient attention to the dynamic factors -- namely , the investment flows that are likely to result from the improved competitivenes of U.S. industry , '' said John Lipsky , a director at Salomon Brothers ./.
punct(said-39, ``-1)
nmod:poss(suspicion-3, Our-2)
nsubj(is-4, suspicion-3)
ccomp(said-39, is-4)
mark(paying-12, that-5)
advmod(pessimistic-7, very-6)
amod(views-8, pessimistic-7)
nsubj(paying-12, views-8)
case(trade-10, on-9)
nmod:on(views-8, trade-10)
aux(paying-12, are-11)
ccomp(is-4, paying-12)
amod(attention-14, insufficient-13)
dobj(paying-12, attention-14)
case(factors-18, to-15)
det(factors-18, the-16)
amod(factors-18, dynamic-17)
nmod:to(paying-12, factors-18)
nsubj(likely-27, factors-18)
nsubj:xsubj(result-29, factors-18)
punct(factors-18, ---19)
advmod(factors-18, namely-20)
punct(factors-18, ,-21)
det(investment-23, the-22)
nsubj(flows-24, investment-23)
acl:relcl(factors-18, flows-24)
ref(factors-18, that-25)
cop(likely-27, are-26)
ccomp(flows-24, likely-27)
mark(result-29, to-28)
xcomp(likely-27, result-29)
case(competitivenes-33, from-30)
det(competitivenes-33, the-31)
amod(competitivenes-33, improved-32)
nmod:from(result-29, competitivenes-33)
case(industry-36, of-34)
compound(industry-36, U.S.-35)
nmod:of(competitivenes-33, industry-36)
punct(said-39, ,-37)
punct(said-39, ''-38)
root(ROOT-0, said-39)
compound(Lipsky-41, John-40)
nsubj(said-39, Lipsky-41)
punct(Lipsky-41, ,-42)
det(director-44, a-43)
appos(Lipsky-41, director-44)
case(Brothers-47, at-45)
compound(Brothers-47, Salomon-46)
nmod:at(director-44, Brothers-47)
punct(said-39, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#investment

flow :: `` And from it flow many of the phenomena which we find disturbing in the Kremlin 's conduct of foreign policy: the secretiveness , the lack of frankness , the duplicity , the wary suspiciousness and the basic unfriendliness of purpose . ''/''
punct(flow-5, ``-1)
cc(flow-5, And-2)
case(it-4, from-3)
nmod:from(flow-5, it-4)
root(ROOT-0, flow-5)
dobj(flow-5, many-6)
case(phenomena-9, of-7)
det(phenomena-9, the-8)
nmod:of(many-6, phenomena-9)
dobj(find-12, phenomena-9)
ref(phenomena-9, which-10)
nsubj(find-12, we-11)
acl:relcl(phenomena-9, find-12)
xcomp(find-12, disturbing-13)
case(conduct-18, in-14)
det(Kremlin-16, the-15)
nmod:poss(conduct-18, Kremlin-16)
case(Kremlin-16, 's-17)
nmod:in(disturbing-13, conduct-18)
case(policy-21, of-19)
amod(policy-21, foreign-20)
nmod:of(conduct-18, policy-21)
punct(flow-5, :-22)
det(secretiveness-24, the-23)
dep(flow-5, secretiveness-24)
punct(secretiveness-24, ,-25)
det(lack-27, the-26)
appos(secretiveness-24, lack-27)
case(frankness-29, of-28)
nmod:of(lack-27, frankness-29)
punct(secretiveness-24, ,-30)
det(duplicity-32, the-31)
appos(secretiveness-24, duplicity-32)
punct(secretiveness-24, ,-33)
det(suspiciousness-36, the-34)
amod(suspiciousness-36, wary-35)
appos(secretiveness-24, suspiciousness-36)
cc(suspiciousness-36, and-37)
det(unfriendliness-40, the-38)
amod(unfriendliness-40, basic-39)
appos(secretiveness-24, unfriendliness-40)
conj:and(suspiciousness-36, unfriendliness-40)
case(purpose-42, of-41)
nmod:of(unfriendliness-40, purpose-42)
punct(flow-5, .-43)
punct(flow-5, ''-44)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: flow#phenomena

flow :: And , `` These characteristics of Soviet policy , like the postulate from which they flow , are basic to the internal nature of Soviet power , and will be with us , whether in the foreground or the background , until the internal nature of Soviet power is changed . ''/''
cc(postulate-12, And-1)
punct(postulate-12, ,-2)
punct(postulate-12, ``-3)
det(characteristics-5, These-4)
nsubj(postulate-12, characteristics-5)
case(policy-8, of-6)
amod(policy-8, Soviet-7)
nmod:of(characteristics-5, policy-8)
punct(postulate-12, ,-9)
case(postulate-12, like-10)
det(postulate-12, the-11)
root(ROOT-0, postulate-12)
case(which-14, from-13)
nmod:from(flow-16, which-14)
nsubj(flow-16, they-15)
nsubj(basic-19, they-15)
ccomp(postulate-12, flow-16)
punct(flow-16, ,-17)
cop(basic-19, are-18)
ccomp(postulate-12, basic-19)
conj:and(flow-16, basic-19)
case(nature-23, to-20)
det(nature-23, the-21)
amod(nature-23, internal-22)
nmod:to(basic-19, nature-23)
case(power-26, of-24)
amod(power-26, Soviet-25)
nmod:of(nature-23, power-26)
punct(flow-16, ,-27)
cc(flow-16, and-28)
aux(us-32, will-29)
cop(us-32, be-30)
case(us-32, with-31)
ccomp(postulate-12, us-32)
conj:and(flow-16, us-32)
punct(us-32, ,-33)
mark(changed-50, whether-34)
case(foreground-37, in-35)
det(foreground-37, the-36)
nmod:in(changed-50, foreground-37)
cc(foreground-37, or-38)
det(background-40, the-39)
conj:or(foreground-37, background-40)
nmod:in(changed-50, background-40)
punct(changed-50, ,-41)
mark(changed-50, until-42)
det(nature-45, the-43)
amod(nature-45, internal-44)
nsubjpass(changed-50, nature-45)
case(power-48, of-46)
amod(power-48, Soviet-47)
nmod:of(nature-45, power-48)
auxpass(changed-50, is-49)
dep(us-32, changed-50)
punct(postulate-12, .-51)
punct(postulate-12, ''-52)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: flow#they

flow :: By 9 a.m . , the cadets are off to class , batlike figures in dark , flowing rain capes , black briefcases clutched with precision in their left hands ./.
case(9-2, By-1)
root(ROOT-0, 9-2)
advmod(9-2, a.m-3)
punct(9-2, .-4)
punct(are-4, ,-1)
det(cadets-3, the-2)
nsubj(are-4, cadets-3)
root(ROOT-0, are-4)
advmod(are-4, off-5)
case(class-7, to-6)
nmod:to(off-5, class-7)
punct(are-4, ,-8)
amod(figures-10, batlike-9)
dep(are-4, figures-10)
case(capes-16, in-11)
amod(capes-16, dark-12)
punct(capes-16, ,-13)
amod(capes-16, flowing-14)
compound(capes-16, rain-15)
nmod:in(figures-10, capes-16)
punct(capes-16, ,-17)
amod(briefcases-19, black-18)
appos(capes-16, briefcases-19)
acl(briefcases-19, clutched-20)
case(precision-22, with-21)
nmod:with(clutched-20, precision-22)
case(hands-26, in-23)
nmod:poss(hands-26, their-24)
amod(hands-26, left-25)
nmod:in(clutched-20, hands-26)
punct(are-4, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#capes

flow :: The economic statistics flowing out of Washington last week were almost too good to be true ./.
det(statistics-3, The-1)
amod(statistics-3, economic-2)
nsubj(good-13, statistics-3)
nsubj:xsubj(true-16, statistics-3)
acl(statistics-3, flowing-4)
case(Washington-7, out-5)
mwe(out-5, of-6)
nmod:out_of(flowing-4, Washington-7)
amod(week-9, last-8)
nmod:tmod(flowing-4, week-9)
cop(good-13, were-10)
advmod(good-13, almost-11)
advmod(good-13, too-12)
root(ROOT-0, good-13)
mark(true-16, to-14)
cop(true-16, be-15)
xcomp(good-13, true-16)
punct(good-13, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#washington

flow :: For the past eight years , all the pious high-mindedness has been flowing in one direction ./.
case(years-5, For-1)
det(years-5, the-2)
amod(years-5, past-3)
nummod(years-5, eight-4)
nmod:for(flowing-13, years-5)
punct(flowing-13, ,-6)
det:predet(high-mindedness-10, all-7)
det(high-mindedness-10, the-8)
amod(high-mindedness-10, pious-9)
nsubj(flowing-13, high-mindedness-10)
aux(flowing-13, has-11)
aux(flowing-13, been-12)
root(ROOT-0, flowing-13)
case(direction-16, in-14)
nummod(direction-16, one-15)
nmod:in(flowing-13, direction-16)
punct(flowing-13, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#high-mindedness

flow :: `` Day by day the opportunity was flowing away like blood draining out of my arm . '' -RRB-/-RRB-
root(ROOT-0, ``-1)
nmod:tmod(flowing-8, Day-2)
case(day-4, by-3)
nmod:by(Day-2, day-4)
det(opportunity-6, the-5)
nsubj(flowing-8, opportunity-6)
aux(flowing-8, was-7)
root(``-1, flowing-8)
compound:prt(flowing-8, away-9)
case(blood-11, like-10)
nmod:like(flowing-8, blood-11)
acl(blood-11, draining-12)
case(arm-16, out-13)
mwe(out-13, of-14)
nmod:poss(arm-16, my-15)
nmod:out_of(draining-12, arm-16)
punct(flowing-8, .-17)
punct(flowing-8, ''-18)
punct(flowing-8, -RRB--19)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: flow#opportunity

flow :: `` We do n't know which he painted first , the deformity or the sweep of her flowing hair , '' he says firmly ./.
punct(says-23, ``-1)
nsubj(know-5, We-2)
aux(know-5, do-3)
neg(know-5, n't-4)
ccomp(says-23, know-5)
dobj(painted-8, which-6)
nsubj(painted-8, he-7)
ccomp(know-5, painted-8)
advmod(painted-8, first-9)
punct(says-23, ,-10)
det(deformity-12, the-11)
nsubj(says-23, deformity-12)
cc(deformity-12, or-13)
det(sweep-15, the-14)
conj:or(deformity-12, sweep-15)
nsubj(says-23, sweep-15)
case(hair-19, of-16)
nmod:poss(hair-19, her-17)
amod(hair-19, flowing-18)
nmod:of(sweep-15, hair-19)
punct(says-23, ,-20)
punct(says-23, ''-21)
nsubj(says-23, he-22)
root(ROOT-0, says-23)
advmod(says-23, firmly-24)
punct(says-23, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#hair

flow :: Considering the gold flowing into this town , it might do a little better by its patron saint ./.
advcl(do-11, Considering-1)
det(gold-3, the-2)
dobj(Considering-1, gold-3)
acl(gold-3, flowing-4)
case(town-7, into-5)
det(town-7, this-6)
nmod:into(flowing-4, town-7)
punct(do-11, ,-8)
nsubj(do-11, it-9)
aux(do-11, might-10)
root(ROOT-0, do-11)
det(little-13, a-12)
nmod:npmod(better-14, little-13)
advmod(do-11, better-14)
case(saint-18, by-15)
nmod:poss(saint-18, its-16)
compound(saint-18, patron-17)
nmod:by(do-11, saint-18)
punct(do-11, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#town

flow :: Bellini 's flowing line is served only by the conductor , Alberto Zedda ./.
nmod:poss(line-4, Bellini-1)
case(Bellini-1, 's-2)
amod(line-4, flowing-3)
nsubjpass(served-6, line-4)
auxpass(served-6, is-5)
root(ROOT-0, served-6)
advmod(conductor-10, only-7)
case(conductor-10, by-8)
det(conductor-10, the-9)
nmod:agent(served-6, conductor-10)
punct(conductor-10, ,-11)
compound(Zedda-13, Alberto-12)
appos(conductor-10, Zedda-13)
punct(served-6, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#line

flow :: Mr. Marino said the the mechanism calls for debt service to be met from property and sales tax revenue that flows through the state comptroller 's office before being diverted to city coffers ./.
compound(Marino-2, Mr.-1)
nsubj(said-3, Marino-2)
root(ROOT-0, said-3)
det:predet(mechanism-6, the-4)
det(mechanism-6, the-5)
nsubj(calls-7, mechanism-6)
ccomp(said-3, calls-7)
mark(met-13, for-8)
compound(service-10, debt-9)
nsubjpass(met-13, service-10)
mark(met-13, to-11)
auxpass(met-13, be-12)
advcl(calls-7, met-13)
case(property-15, from-14)
nmod:from(met-13, property-15)
nsubj(flows-21, property-15)
cc(property-15, and-16)
compound(revenue-19, sales-17)
compound(revenue-19, tax-18)
nmod:from(met-13, revenue-19)
conj:and(property-15, revenue-19)
nsubj(flows-21, revenue-19)
ref(property-15, that-20)
acl:relcl(property-15, flows-21)
case(office-27, through-22)
det(comptroller-25, the-23)
compound(comptroller-25, state-24)
nmod:poss(office-27, comptroller-25)
case(comptroller-25, 's-26)
nmod:through(flows-21, office-27)
mark(diverted-30, before-28)
auxpass(diverted-30, being-29)
advcl(flows-21, diverted-30)
case(coffers-33, to-31)
compound(coffers-33, city-32)
nmod:to(diverted-30, coffers-33)
punct(said-3, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#property

flow :: By following a trait as it flows through several generations and across vast branches of a family , scientists can see whether it is the result of chance or whether it `` segregates '' in a pattern that is probably due to the inheritance of a gene ./.
mark(following-2, By-1)
advcl(see-21, following-2)
det(trait-4, a-3)
dobj(following-2, trait-4)
mark(flows-7, as-5)
nsubj(flows-7, it-6)
nsubj(flows-7', it-6)
advcl(following-2, flows-7)
advcl(following-2, flows-7')
conj:and(flows-7, flows-7')
case(generations-10, through-8)
amod(generations-10, several-9)
nmod:through(flows-7, generations-10)
cc(flows-7, and-11)
case(branches-14, across-12)
amod(branches-14, vast-13)
nmod:across(flows-7', branches-14)
case(family-17, of-15)
det(family-17, a-16)
nmod:of(branches-14, family-17)
punct(see-21, ,-18)
nsubj(see-21, scientists-19)
aux(see-21, can-20)
root(ROOT-0, see-21)
mark(result-26, whether-22)
nsubj(result-26, it-23)
cop(result-26, is-24)
det(result-26, the-25)
ccomp(see-21, result-26)
case(chance-28, of-27)
nmod:of(result-26, chance-28)
cc(result-26, or-29)
mark(segregates-33, whether-30)
nsubj(segregates-33, it-31)
punct(segregates-33, ``-32)
ccomp(see-21, segregates-33)
conj:or(result-26, segregates-33)
punct(segregates-33, ''-34)
case(pattern-37, in-35)
det(pattern-37, a-36)
nmod:in(segregates-33, pattern-37)
nsubj(due-41, pattern-37)
ref(pattern-37, that-38)
cop(due-41, is-39)
advmod(due-41, probably-40)
acl:relcl(pattern-37, due-41)
case(inheritance-44, to-42)
det(inheritance-44, the-43)
nmod:to(due-41, inheritance-44)
case(gene-47, of-45)
det(gene-47, a-46)
nmod:of(inheritance-44, gene-47)
punct(see-21, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#it

flow :: Capital has been flowing out of West German investments at an unprecedented rate , helping to explain why the Bundesbank has been raising interest rates in a bid to prop up the mark ./.
nsubj(flowing-4, Capital-1)
aux(flowing-4, has-2)
aux(flowing-4, been-3)
root(ROOT-0, flowing-4)
case(investments-9, out-5)
mwe(out-5, of-6)
amod(German-8, West-7)
amod(investments-9, German-8)
nmod:out_of(flowing-4, investments-9)
case(rate-13, at-10)
det(rate-13, an-11)
amod(rate-13, unprecedented-12)
nmod:at(flowing-4, rate-13)
punct(flowing-4, ,-14)
advcl(flowing-4, helping-15)
mark(explain-17, to-16)
xcomp(helping-15, explain-17)
advmod(raising-23, why-18)
det(Bundesbank-20, the-19)
nsubj(raising-23, Bundesbank-20)
aux(raising-23, has-21)
aux(raising-23, been-22)
advcl(explain-17, raising-23)
compound(rates-25, interest-24)
dobj(raising-23, rates-25)
case(bid-28, in-26)
det(bid-28, a-27)
nmod:in(raising-23, bid-28)
mark(prop-30, to-29)
acl(bid-28, prop-30)
compound:prt(prop-30, up-31)
det(mark-33, the-32)
dobj(prop-30, mark-33)
punct(flowing-4, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#capital

flow :: The bolt and trigger flowed silently and smoothly as a river down its banks ./.
det(bolt-2, The-1)
nsubj(flowed-5, bolt-2)
cc(bolt-2, and-3)
conj:and(bolt-2, trigger-4)
nsubj(flowed-5, trigger-4)
root(ROOT-0, flowed-5)
advmod(flowed-5, silently-6)
cc(silently-6, and-7)
advmod(flowed-5, smoothly-8)
conj:and(silently-6, smoothly-8)
case(river-11, as-9)
det(river-11, a-10)
nmod:as(flowed-5, river-11)
case(banks-14, down-12)
nmod:poss(banks-14, its-13)
nmod:down(river-11, banks-14)
punct(flowed-5, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#bolt

flow :: Yet U.S. trade with and corporate activity in Panama continues , as do most flows from non-U.S. sources ./.
cc(continues-10, Yet-1)
compound(trade-3, U.S.-2)
conj:and(trade-3, trade-3')
nsubj(continues-10, trade-3)
nsubj(continues-10, trade-3')
case(activity-7, with-4)
cc(with-4, and-5)
conj:and(with-4, corporate-6)
nmod:corporate(trade-3', activity-7)
nmod:with(trade-3, activity-7)
case(Panama-9, in-8)
nmod:in(activity-7, Panama-9)
root(ROOT-0, continues-10)
punct(continues-10, ,-11)
dep(do-13, as-12)
advcl(continues-10, do-13)
amod(flows-15, most-14)
nsubj(do-13, flows-15)
case(sources-18, from-16)
amod(sources-18, non-U.S.-17)
nmod:from(flows-15, sources-18)
punct(continues-10, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#sources

flow :: If not for the intimacy between the U.S. and Royal navies that enabled missiles , intelligence and much else to flow instantly through long-established channels and liaison groups , Britain would not have prevailed in the Falklands ./.
mark(prevailed-34, If-1)
neg(intimacy-5, not-2)
case(intimacy-5, for-3)
det(intimacy-5, the-4)
nsubj(enabled-13, intimacy-5)
nmod:for(prevailed-34, intimacy-5)
case(U.S.-8, between-6)
det(U.S.-8, the-7)
nmod:between(intimacy-5, U.S.-8)
cc(U.S.-8, and-9)
compound(navies-11, Royal-10)
nmod:between(intimacy-5, navies-11)
conj:and(U.S.-8, navies-11)
ref(intimacy-5, that-12)
acl:relcl(intimacy-5, enabled-13)
dobj(enabled-13, missiles-14)
punct(missiles-14, ,-15)
dobj(enabled-13, intelligence-16)
conj:and(missiles-14, intelligence-16)
cc(missiles-14, and-17)
dobj(enabled-13, much-18)
conj:and(missiles-14, much-18)
advmod(much-18, else-19)
mark(flow-21, to-20)
acl(much-18, flow-21)
advmod(flow-21, instantly-22)
case(channels-25, through-23)
amod(channels-25, long-established-24)
nmod:through(flow-21, channels-25)
cc(channels-25, and-26)
compound(groups-28, liaison-27)
nmod:through(flow-21, groups-28)
conj:and(channels-25, groups-28)
punct(prevailed-34, ,-29)
nsubjpass(prevailed-34, Britain-30)
aux(prevailed-34, would-31)
neg(prevailed-34, not-32)
aux(prevailed-34, have-33)
root(ROOT-0, prevailed-34)
case(Falklands-37, in-35)
det(Falklands-37, the-36)
nmod:in(prevailed-34, Falklands-37)
punct(prevailed-34, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#channels

flow :: By the 17th century , fashion had replaced utility , and cavalier Frenchmen donned ornate linen and lace cravats , knotted in the center with long flowing ends that accented their moustaches ./.
case(century-4, By-1)
det(century-4, the-2)
amod(century-4, 17th-3)
nmod:by(replaced-8, century-4)
punct(replaced-8, ,-5)
nsubj(replaced-8, fashion-6)
aux(replaced-8, had-7)
root(ROOT-0, replaced-8)
dobj(replaced-8, utility-9)
punct(replaced-8, ,-10)
cc(replaced-8, and-11)
compound(Frenchmen-13, cavalier-12)
nsubj(donned-14, Frenchmen-13)
conj:and(replaced-8, donned-14)
amod(linen-16, ornate-15)
dobj(donned-14, linen-16)
cc(linen-16, and-17)
compound(cravats-19, lace-18)
dobj(donned-14, cravats-19)
conj:and(linen-16, cravats-19)
punct(donned-14, ,-20)
advcl(donned-14, knotted-21)
case(center-24, in-22)
det(center-24, the-23)
nmod:in(knotted-21, center-24)
case(ends-28, with-25)
amod(ends-28, long-26)
amod(ends-28, flowing-27)
nmod:with(knotted-21, ends-28)
nsubj(accented-30, ends-28)
ref(ends-28, that-29)
acl:relcl(ends-28, accented-30)
nmod:poss(moustaches-32, their-31)
dobj(accented-30, moustaches-32)
punct(replaced-8, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#ends

flow :: In a letter to Robert W. Page , assistant Army secretary for civil works , the Illinois governor called the situation on the rivers `` a navigation emergency '' and requested the corps to divert Great Lakes water at Chicago to get river traffic flowing again ./.
case(letter-3, In-1)
det(letter-3, a-2)
root(ROOT-0, letter-3)
case(Page-7, to-4)
compound(Page-7, Robert-5)
compound(Page-7, W.-6)
nmod:to(letter-3, Page-7)
punct(letter-3, ,-8)
compound(secretary-11, assistant-9)
compound(secretary-11, Army-10)
root(,-8, secretary-11)
case(works-14, for-12)
amod(works-14, civil-13)
nmod:for(secretary-11, works-14)
punct(secretary-11, ,-15)
det(governor-18, the-16)
compound(governor-18, Illinois-17)
nsubj(called-19, governor-18)
nsubj(requested-31, governor-18)
acl:relcl(secretary-11, called-19)
det(situation-21, the-20)
dobj(called-19, situation-21)
case(rivers-24, on-22)
det(rivers-24, the-23)
nmod:on(called-19, rivers-24)
punct(rivers-24, ``-25)
det(emergency-28, a-26)
compound(emergency-28, navigation-27)
dep(rivers-24, emergency-28)
punct(rivers-24, ''-29)
cc(called-19, and-30)
acl:relcl(secretary-11, requested-31)
conj:and(called-19, requested-31)
det(corps-33, the-32)
dobj(requested-31, corps-33)
mark(divert-35, to-34)
advcl(requested-31, divert-35)
amod(water-38, Great-36)
compound(water-38, Lakes-37)
dobj(divert-35, water-38)
case(Chicago-40, at-39)
nmod:at(divert-35, Chicago-40)
mark(get-42, to-41)
advcl(divert-35, get-42)
compound(traffic-44, river-43)
nsubj(flowing-45, traffic-44)
dep(get-42, flowing-45)
advmod(flowing-45, again-46)
punct(secretary-11, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#traffic

flow :: Although a study for the Justice Department found that more than 99 % of all telephone traffic flows through the local networks , the Bell companies fear that a significant portion of their business could be drained off ./.
mark(found-8, Although-1)
det(study-3, a-2)
nsubj(found-8, study-3)
case(Department-7, for-4)
det(Department-7, the-5)
compound(Department-7, Justice-6)
nmod:for(study-3, Department-7)
advcl(fear-27, found-8)
mark(flows-18, that-9)
advmod(99-12, more-10)
mwe(more-10, than-11)
nummod(%-13, 99-12)
nsubj(flows-18, %-13)
case(traffic-17, of-14)
det(traffic-17, all-15)
compound(traffic-17, telephone-16)
nmod:of(%-13, traffic-17)
ccomp(found-8, flows-18)
case(networks-22, through-19)
det(networks-22, the-20)
amod(networks-22, local-21)
nmod:through(flows-18, networks-22)
punct(fear-27, ,-23)
det(companies-26, the-24)
compound(companies-26, Bell-25)
nsubj(fear-27, companies-26)
root(ROOT-0, fear-27)
mark(drained-37, that-28)
det(portion-31, a-29)
amod(portion-31, significant-30)
nsubjpass(drained-37, portion-31)
case(business-34, of-32)
nmod:poss(business-34, their-33)
nmod:of(portion-31, business-34)
aux(drained-37, could-35)
auxpass(drained-37, be-36)
ccomp(fear-27, drained-37)
compound:prt(drained-37, off-38)
punct(fear-27, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#%

flow :: The government 's obsession with winning hearts and minds on the local level flows from its failure to entice black leaders into token participation at the national level ./.
det(government-2, The-1)
nmod:poss(obsession-4, government-2)
case(government-2, 's-3)
nsubj(flows-14, obsession-4)
case(hearts-7, with-5)
amod(hearts-7, winning-6)
nmod:with(obsession-4, hearts-7)
cc(hearts-7, and-8)
nmod:with(obsession-4, minds-9)
conj:and(hearts-7, minds-9)
case(level-13, on-10)
det(level-13, the-11)
amod(level-13, local-12)
nmod:on(obsession-4, level-13)
root(ROOT-0, flows-14)
case(failure-17, from-15)
nmod:poss(failure-17, its-16)
nmod:from(flows-14, failure-17)
mark(entice-19, to-18)
acl(failure-17, entice-19)
amod(leaders-21, black-20)
dobj(entice-19, leaders-21)
case(participation-24, into-22)
amod(participation-24, token-23)
nmod:into(entice-19, participation-24)
case(level-28, at-25)
det(level-28, the-26)
amod(level-28, national-27)
nmod:at(participation-24, level-28)
punct(flows-14, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#obsession

flow :: The well flowed at a daily rate of 225 barrels of oil and 1 , 000 cubic feet of natural gas from a depth of 8 , 596 feet in a pump test ./.
det(well-2, The-1)
nsubj(flowed-3, well-2)
root(ROOT-0, flowed-3)
case(rate-7, at-4)
det(rate-7, a-5)
amod(rate-7, daily-6)
nmod:at(flowed-3, rate-7)
case(barrels-10, of-8)
nummod(barrels-10, 225-9)
nmod:of(rate-7, barrels-10)
case(oil-12, of-11)
nmod:of(barrels-10, oil-12)
cc(barrels-10, and-13)
nmod:of(rate-7, 1-14)
conj:and(barrels-10, 1-14)
punct(1-14, ,-15)
nummod(feet-18, 000-16)
amod(feet-18, cubic-17)
appos(1-14, feet-18)
case(gas-21, of-19)
amod(gas-21, natural-20)
nmod:of(feet-18, gas-21)
case(depth-24, from-22)
det(depth-24, a-23)
nmod:from(feet-18, depth-24)
acl(depth-24, of-25)
root(of-25, 8-26)
punct(8-26, ,-27)
nummod(feet-29, 596-28)
root(,-27, feet-29)
case(test-33, in-30)
det(test-33, a-31)
compound(test-33, pump-32)
nmod:in(feet-29, test-33)
punct(feet-29, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#well

flow :: During the 45 minutes that followed , Sen. Dole and other Republicans complained that too much business money is flowing to Democrats ./.
case(minutes-4, During-1)
det(minutes-4, the-2)
nummod(minutes-4, 45-3)
nsubj(followed-6, minutes-4)
nmod:during(complained-13, minutes-4)
ref(minutes-4, that-5)
acl:relcl(minutes-4, followed-6)
punct(complained-13, ,-7)
compound(Dole-9, Sen.-8)
nsubj(complained-13, Dole-9)
cc(Dole-9, and-10)
amod(Republicans-12, other-11)
conj:and(Dole-9, Republicans-12)
nsubj(complained-13, Republicans-12)
root(ROOT-0, complained-13)
mark(flowing-20, that-14)
advmod(much-16, too-15)
amod(money-18, much-16)
compound(money-18, business-17)
nsubj(flowing-20, money-18)
aux(flowing-20, is-19)
ccomp(complained-13, flowing-20)
case(Democrats-22, to-21)
nmod:to(flowing-20, Democrats-22)
punct(complained-13, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#money

flow :: Nobody , however , could have foreseen the chain of events that would flow from this one ./.
nsubj(foreseen-7, Nobody-1)
punct(foreseen-7, ,-2)
advmod(foreseen-7, however-3)
punct(foreseen-7, ,-4)
aux(foreseen-7, could-5)
aux(foreseen-7, have-6)
root(ROOT-0, foreseen-7)
det(chain-9, the-8)
dobj(foreseen-7, chain-9)
case(events-11, of-10)
nmod:of(chain-9, events-11)
nsubj(flow-14, events-11)
ref(events-11, that-12)
aux(flow-14, would-13)
acl:relcl(events-11, flow-14)
case(one-17, from-15)
det(one-17, this-16)
nmod:from(flow-14, one-17)
punct(foreseen-7, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#events

flow :: So it should n't come as a big surprise that the world 's art is now flowing to Japan ./.
advmod(come-5, So-1)
nsubj(come-5, it-2)
aux(come-5, should-3)
neg(come-5, n't-4)
root(ROOT-0, come-5)
case(surprise-9, as-6)
det(surprise-9, a-7)
amod(surprise-9, big-8)
nmod:as(come-5, surprise-9)
mark(flowing-17, that-10)
det(world-12, the-11)
nmod:poss(art-14, world-12)
case(world-12, 's-13)
nsubj(flowing-17, art-14)
aux(flowing-17, is-15)
advmod(flowing-17, now-16)
ccomp(surprise-9, flowing-17)
case(Japan-19, to-18)
nmod:to(flowing-17, Japan-19)
punct(come-5, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#art

flow :: For decades , U.S.-Japan relations have more or less flowed from the last broad agreement most people remember the countries signing -- on the deck of the Battleship Missouri in 1945 ./.
case(decades-2, For-1)
nmod:for(have-6, decades-2)
punct(have-6, ,-3)
amod(relations-5, U.S.-Japan-4)
nsubj(have-6, relations-5)
root(ROOT-0, have-6)
advmod(flowed-10, more-7)
cc(more-7, or-8)
conj:or(more-7, less-9)
advmod(flowed-10, less-9)
xcomp(have-6, flowed-10)
case(agreement-15, from-11)
det(agreement-15, the-12)
amod(agreement-15, last-13)
amod(agreement-15, broad-14)
nmod:from(flowed-10, agreement-15)
amod(people-17, most-16)
nsubj(remember-18, people-17)
ccomp(flowed-10, remember-18)
det(countries-20, the-19)
nsubj(signing-21, countries-20)
ccomp(remember-18, signing-21)
punct(signing-21, ---22)
case(deck-25, on-23)
det(deck-25, the-24)
nmod:on(signing-21, deck-25)
case(Missouri-29, of-26)
det(Missouri-29, the-27)
compound(Missouri-29, Battleship-28)
nmod:of(deck-25, Missouri-29)
case(1945-31, in-30)
nmod:in(deck-25, 1945-31)
punct(have-6, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#agreement

flow :: `` Money does tend to flow into the best-performing funds rather than the bottom funds that are poised for recovery , '' says Fidelity 's Mr. Litvack ./.
punct(says-23, ``-1)
nsubj(tend-4, Money-2)
nsubj:xsubj(flow-6, Money-2)
aux(tend-4, does-3)
ccomp(says-23, tend-4)
mark(flow-6, to-5)
xcomp(tend-4, flow-6)
case(funds-10, into-7)
det(funds-10, the-8)
amod(funds-10, best-performing-9)
nmod:into(flow-6, funds-10)
cc(flow-6, rather-11)
mwe(rather-11, than-12)
det(funds-15, the-13)
amod(funds-15, bottom-14)
xcomp(tend-4, funds-15)
conj:negcc(flow-6, funds-15)
nsubjpass(poised-18, funds-15)
ref(funds-15, that-16)
auxpass(poised-18, are-17)
acl:relcl(funds-15, poised-18)
case(recovery-20, for-19)
nmod:for(poised-18, recovery-20)
punct(says-23, ,-21)
punct(says-23, ''-22)
root(ROOT-0, says-23)
nmod:poss(Litvack-27, Fidelity-24)
case(Fidelity-24, 's-25)
compound(Litvack-27, Mr.-26)
nsubj(says-23, Litvack-27)
punct(says-23, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#money

flow :: For the most part the events flow swiftly , from the decision by the gamblers to bribe the players , to the players ' decision to accept the bribe , to the games , to the newspaper expose , to the trial ./.
case(part-4, For-1)
det(part-4, the-2)
amod(part-4, most-3)
root(ROOT-0, part-4)
det(flow-7, the-5)
compound(flow-7, events-6)
dep(part-4, flow-7)
advmod(flow-7, swiftly-8)
punct(flow-7, ,-9)
case(decision-12, from-10)
det(decision-12, the-11)
nmod:from(flow-7, decision-12)
case(gamblers-15, by-13)
det(gamblers-15, the-14)
nmod:by(decision-12, gamblers-15)
mark(bribe-17, to-16)
acl(decision-12, bribe-17)
det(players-19, the-18)
dobj(bribe-17, players-19)
punct(flow-7, ,-20)
case(decision-25, to-21)
det(players-23, the-22)
nmod:poss(decision-25, players-23)
case(players-23, '-24)
nmod:to(flow-7, decision-25)
mark(accept-27, to-26)
acl(decision-25, accept-27)
det(bribe-29, the-28)
dobj(accept-27, bribe-29)
punct(flow-7, ,-30)
case(games-33, to-31)
det(games-33, the-32)
nmod:to(flow-7, games-33)
punct(flow-7, ,-34)
case(newspaper-37, to-35)
det(newspaper-37, the-36)
nmod:to(flow-7, newspaper-37)
dep(newspaper-37, expose-38)
punct(flow-7, ,-39)
case(trial-42, to-40)
det(trial-42, the-41)
nmod:to(flow-7, trial-42)
punct(part-4, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#decision

flow :: From the answer to the Vietnam issue , should it ever be conclusively decided , will flow the prevailing view of America 's world role ./.
case(answer-3, From-1)
det(answer-3, the-2)
nmod:from(decided-14, answer-3)
case(issue-7, to-4)
det(issue-7, the-5)
compound(issue-7, Vietnam-6)
nmod:to(answer-3, issue-7)
punct(decided-14, ,-8)
aux(decided-14, should-9)
nsubjpass(decided-14, it-10)
advmod(decided-14, ever-11)
auxpass(decided-14, be-12)
advmod(decided-14, conclusively-13)
root(ROOT-0, decided-14)
punct(decided-14, ,-15)
aux(flow-17, will-16)
ccomp(decided-14, flow-17)
det(view-20, the-18)
amod(view-20, prevailing-19)
dobj(flow-17, view-20)
case(role-25, of-21)
nmod:poss(role-25, America-22)
case(America-22, 's-23)
compound(role-25, world-24)
nmod:of(view-20, role-25)
punct(decided-14, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#role

flow :: `` Germany is being regarded more and more as a high-cost producer of goods , and money will flow more and more to countries that produce more efficiently , '' said Christopher S. Bourdain , a senior financial markets adviser at BankAmerica International ./.
punct(said-31, ``-1)
nsubjpass(regarded-5, Germany-2)
aux(regarded-5, is-3)
auxpass(regarded-5, being-4)
ccomp(said-31, regarded-5)
dobj(regarded-5, more-6)
cc(more-6, and-7)
dobj(regarded-5, more-8)
conj:and(more-6, more-8)
case(producer-12, as-9)
det(producer-12, a-10)
amod(producer-12, high-cost-11)
nmod:as(more-6, producer-12)
case(goods-14, of-13)
nmod:of(producer-12, goods-14)
punct(regarded-5, ,-15)
cc(regarded-5, and-16)
nsubj(flow-19, money-17)
aux(flow-19, will-18)
conj:and(regarded-5, flow-19)
ccomp(said-31, flow-19)
dobj(flow-19, more-20)
cc(more-20, and-21)
dobj(flow-19, more-22)
conj:and(more-20, more-22)
case(countries-24, to-23)
nmod:to(flow-19, countries-24)
nsubj(produce-26, countries-24)
ref(countries-24, that-25)
acl:relcl(countries-24, produce-26)
advmod(efficiently-28, more-27)
advmod(produce-26, efficiently-28)
punct(said-31, ,-29)
punct(said-31, ''-30)
root(ROOT-0, said-31)
compound(Bourdain-34, Christopher-32)
compound(Bourdain-34, S.-33)
nsubj(said-31, Bourdain-34)
punct(Bourdain-34, ,-35)
det(adviser-40, a-36)
amod(adviser-40, senior-37)
amod(adviser-40, financial-38)
compound(adviser-40, markets-39)
appos(Bourdain-34, adviser-40)
case(International-43, at-41)
compound(International-43, BankAmerica-42)
nmod:at(adviser-40, International-43)
punct(said-31, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#more

flow :: Instead , improved earnings flowed in large part from last year 's decision to reintroduce a five-stick , 25-cent pack of sugared gum ./.
advmod(flowed-5, Instead-1)
punct(flowed-5, ,-2)
amod(earnings-4, improved-3)
nsubj(flowed-5, earnings-4)
root(ROOT-0, flowed-5)
case(part-8, in-6)
amod(part-8, large-7)
nmod:in(flowed-5, part-8)
case(decision-13, from-9)
amod(year-11, last-10)
nmod:poss(decision-13, year-11)
case(year-11, 's-12)
nmod:from(flowed-5, decision-13)
mark(reintroduce-15, to-14)
acl(decision-13, reintroduce-15)
det(pack-20, a-16)
amod(pack-20, five-stick-17)
punct(pack-20, ,-18)
amod(pack-20, 25-cent-19)
dobj(reintroduce-15, pack-20)
case(gum-23, of-21)
amod(gum-23, sugared-22)
nmod:of(pack-20, gum-23)
punct(flowed-5, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#earnings

flow :: `` It 's capital that would otherwise not flow into the industry , '' says Charter One 's Mr. Koch , who also is head of the National Council of Savings Institutions ./.
punct(says-15, ``-1)
nsubj(capital-4, It-2)
cop(capital-4, 's-3)
nsubj(flow-9, capital-4)
ccomp(says-15, capital-4)
ref(capital-4, that-5)
aux(flow-9, would-6)
advmod(flow-9, otherwise-7)
neg(flow-9, not-8)
acl:relcl(capital-4, flow-9)
case(industry-12, into-10)
det(industry-12, the-11)
nmod:into(flow-9, industry-12)
punct(says-15, ,-13)
punct(says-15, ''-14)
root(ROOT-0, says-15)
compound(One-17, Charter-16)
nmod:poss(Koch-20, One-17)
case(One-17, 's-18)
compound(Koch-20, Mr.-19)
nsubj(says-15, Koch-20)
nsubj(head-25, Koch-20)
punct(Koch-20, ,-21)
ref(Koch-20, who-22)
advmod(head-25, also-23)
cop(head-25, is-24)
acl:relcl(Koch-20, head-25)
case(Council-29, of-26)
det(Council-29, the-27)
compound(Council-29, National-28)
nmod:of(head-25, Council-29)
case(Institutions-32, of-30)
compound(Institutions-32, Savings-31)
nmod:of(Council-29, Institutions-32)
punct(says-15, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#capital

flow :: Steps were being taken , Occidental said , to remove natural gas from the pipelines that flow into Piper ./.
nsubjpass(taken-4, Steps-1)
nsubj:xsubj(remove-10, Steps-1)
aux(taken-4, were-2)
auxpass(taken-4, being-3)
root(ROOT-0, taken-4)
punct(said-7, ,-5)
nsubj(said-7, Occidental-6)
parataxis(taken-4, said-7)
punct(said-7, ,-8)
mark(remove-10, to-9)
xcomp(taken-4, remove-10)
amod(gas-12, natural-11)
dobj(remove-10, gas-12)
case(pipelines-15, from-13)
det(pipelines-15, the-14)
nmod:from(remove-10, pipelines-15)
nsubj(flow-17, pipelines-15)
ref(pipelines-15, that-16)
acl:relcl(pipelines-15, flow-17)
case(Piper-19, into-18)
nmod:into(flow-17, Piper-19)
punct(taken-4, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#pipelines

flow :: The Investment Company Institute , a Washington-based trade association , said the increase partly reflected money flowing back to the funds from longer-term debt instruments amid this week 's uneven bond-market performance ./.
det(Institute-4, The-1)
compound(Institute-4, Investment-2)
compound(Institute-4, Company-3)
nsubj(said-11, Institute-4)
punct(Institute-4, ,-5)
det(association-9, a-6)
amod(association-9, Washington-based-7)
compound(association-9, trade-8)
appos(Institute-4, association-9)
punct(Institute-4, ,-10)
root(ROOT-0, said-11)
det(increase-13, the-12)
nsubj(reflected-15, increase-13)
advmod(reflected-15, partly-14)
ccomp(said-11, reflected-15)
dobj(reflected-15, money-16)
acl(money-16, flowing-17)
advmod(flowing-17, back-18)
case(funds-21, to-19)
det(funds-21, the-20)
nmod:to(flowing-17, funds-21)
case(instruments-25, from-22)
amod(instruments-25, longer-term-23)
compound(instruments-25, debt-24)
nmod:from(funds-21, instruments-25)
case(performance-32, amid-26)
det(week-28, this-27)
nmod:poss(performance-32, week-28)
case(week-28, 's-29)
amod(performance-32, uneven-30)
amod(performance-32, bond-market-31)
nmod:amid(reflected-15, performance-32)
punct(said-11, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#funds

flow :: The well flowed at a rate of seven million cubic feet of gas a day through a 14 64-inch opening at depths of 12 , 500 feet ./.
det(well-2, The-1)
nsubj(flowed-3, well-2)
root(ROOT-0, flowed-3)
case(rate-6, at-4)
det(rate-6, a-5)
nmod:at(flowed-3, rate-6)
case(feet-11, of-7)
compound(million-9, seven-8)
nummod(feet-11, million-9)
amod(feet-11, cubic-10)
nmod:of(rate-6, feet-11)
case(gas-13, of-12)
nmod:of(feet-11, gas-13)
det(day-15, a-14)
nmod:npmod(feet-11, day-15)
case(opening-20, through-16)
det(opening-20, a-17)
nummod(opening-20, 14-18)
amod(opening-20, 64-inch-19)
nmod:through(flowed-3, opening-20)
case(depths-22, at-21)
nmod:at(opening-20, depths-22)
case(feet-27, of-23)
nummod(feet-27, 12-24)
punct(feet-27, ,-25)
nummod(feet-27, 500-26)
nmod:of(depths-22, feet-27)
punct(flowed-3, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#well

flow :: The well flowed at a rate of 153 barrels of oil per day with no water , at depths of between 7 , 618 feet and 7 , 638 feet ./.
det(well-2, The-1)
nsubj(flowed-3, well-2)
root(ROOT-0, flowed-3)
case(rate-6, at-4)
det(rate-6, a-5)
nmod:at(flowed-3, rate-6)
case(barrels-9, of-7)
nummod(barrels-9, 153-8)
nmod:of(rate-6, barrels-9)
case(oil-11, of-10)
nmod:of(barrels-9, oil-11)
case(day-13, per-12)
nmod:per(flowed-3, day-13)
case(water-16, with-14)
neg(water-16, no-15)
nmod:with(flowed-3, water-16)
punct(flowed-3, ,-17)
case(depths-19, at-18)
nmod:at(flowed-3, depths-19)
acl(depths-19, of-20)
amod(7-22, between-21)
dobj(of-20, 7-22)
punct(7-22, ,-23)
nummod(feet-25, 618-24)
dobj(of-20, feet-25)
conj:and(7-22, feet-25)
cc(7-22, and-26)
dobj(of-20, 7-27)
conj:and(7-22, 7-27)
punct(7-22, ,-28)
nummod(feet-30, 638-29)
appos(7-22, feet-30)
punct(flowed-3, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#well

flow :: He said global capital flows that once primarily went from the Northern to the Southern Hemisphere `` now flow within the golden triangle of London , New York and Tokyo . ''/''
nsubj(said-2, He-1)
root(ROOT-0, said-2)
amod(capital-4, global-3)
nsubj(flows-5, capital-4)
ccomp(said-2, flows-5)
nsubj(went-9, that-6)
advmod(went-9, once-7)
advmod(went-9, primarily-8)
ccomp(flows-5, went-9)
case(Northern-12, from-10)
det(Northern-12, the-11)
nmod:from(went-9, Northern-12)
case(Hemisphere-16, to-13)
det(Hemisphere-16, the-14)
compound(Hemisphere-16, Southern-15)
nmod:to(went-9, Hemisphere-16)
punct(went-9, ``-17)
advmod(flow-19, now-18)
dobj(went-9, flow-19)
case(triangle-23, within-20)
det(triangle-23, the-21)
compound(triangle-23, golden-22)
nmod:within(flow-19, triangle-23)
case(London-25, of-24)
nmod:of(triangle-23, London-25)
punct(triangle-23, ,-26)
compound(York-28, New-27)
nmod:within(flow-19, York-28)
conj:and(triangle-23, York-28)
cc(triangle-23, and-29)
nmod:within(flow-19, Tokyo-30)
conj:and(triangle-23, Tokyo-30)
punct(said-2, .-31)
punct(said-2, ''-32)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: flow#capital

flow :: By contrast , continuing to let foreign oil producers buy equity in U.S. refineries would help the U.S. economy by allowing these plants to operate at closer to maximum capacity and encouraging additional capital to flow into the U.S ./.
case(contrast-2, By-1)
nmod:by(help-16, contrast-2)
punct(help-16, ,-3)
csubj(help-16, continuing-4)
mark(let-6, to-5)
xcomp(continuing-4, let-6)
amod(producers-9, foreign-7)
compound(producers-9, oil-8)
nsubj(buy-10, producers-9)
ccomp(let-6, buy-10)
dobj(buy-10, equity-11)
case(refineries-14, in-12)
compound(refineries-14, U.S.-13)
nmod:in(buy-10, refineries-14)
aux(help-16, would-15)
root(ROOT-0, help-16)
det(economy-19, the-17)
compound(economy-19, U.S.-18)
dobj(help-16, economy-19)
mark(allowing-21, by-20)
advcl(help-16, allowing-21)
det(plants-23, these-22)
dobj(allowing-21, plants-23)
nsubj:xsubj(operate-25, plants-23)
mark(operate-25, to-24)
xcomp(allowing-21, operate-25)
case(closer-27, at-26)
nmod:at(operate-25, closer-27)
case(capacity-30, to-28)
amod(capacity-30, maximum-29)
nmod:to(closer-27, capacity-30)
cc(closer-27, and-31)
amod(capital-34, encouraging-32)
amod(capital-34, additional-33)
nmod:at(operate-25, capital-34)
conj:and(closer-27, capital-34)
mark(flow-36, to-35)
acl(capital-34, flow-36)
case(U.S-39, into-37)
det(U.S-39, the-38)
nmod:into(flow-36, U.S-39)
punct(help-16, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#u.s

flow :: Dollars flowed from automated teller machines ./.
nsubj(flowed-2, Dollars-1)
root(ROOT-0, flowed-2)
case(machines-6, from-3)
amod(machines-6, automated-4)
compound(machines-6, teller-5)
nmod:from(flowed-2, machines-6)
punct(flowed-2, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#dollars

flow :: The company said oil and gas flowed from two zones ./.
det(company-2, The-1)
nsubj(said-3, company-2)
root(ROOT-0, said-3)
nsubj(flowed-7, oil-4)
cc(oil-4, and-5)
conj:and(oil-4, gas-6)
nsubj(flowed-7, gas-6)
ccomp(said-3, flowed-7)
case(zones-10, from-8)
nummod(zones-10, two-9)
nmod:from(flowed-7, zones-10)
punct(said-3, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#oil

flow :: Between the two friends , money flows both ways ./.
case(friends-4, Between-1)
det(friends-4, the-2)
nummod(friends-4, two-3)
nmod:between(flows-7, friends-4)
punct(flows-7, ,-5)
nsubj(flows-7, money-6)
root(ROOT-0, flows-7)
det(ways-9, both-8)
dobj(flows-7, ways-9)
punct(flows-7, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#ways

flow :: The moves may also signal that more of the marketing clout at Coca-Cola may flow out of the domestic soft-drink division and upstairs to corporate headquarters , according to both insiders and industry experts ./.
det(moves-2, The-1)
nsubj(signal-5, moves-2)
aux(signal-5, may-3)
advmod(signal-5, also-4)
root(ROOT-0, signal-5)
mark(flow-15, that-6)
nsubj(flow-15, more-7)
case(clout-11, of-8)
det(clout-11, the-9)
compound(clout-11, marketing-10)
nmod:of(more-7, clout-11)
case(Coca-Cola-13, at-12)
nmod:at(clout-11, Coca-Cola-13)
aux(flow-15, may-14)
ccomp(signal-5, flow-15)
case(division-21, out-16)
mwe(out-16, of-17)
det(division-21, the-18)
amod(division-21, domestic-19)
compound(division-21, soft-drink-20)
nmod:out_of(flow-15, division-21)
cc(division-21, and-22)
nmod:out_of(flow-15, upstairs-23)
conj:and(division-21, upstairs-23)
case(headquarters-26, to-24)
amod(headquarters-26, corporate-25)
nmod:to(flow-15, headquarters-26)
punct(signal-5, ,-27)
case(insiders-31, according-28)
mwe(according-28, to-29)
cc:preconj(insiders-31, both-30)
nmod:according_to(signal-5, insiders-31)
cc(insiders-31, and-32)
compound(experts-34, industry-33)
nmod:according_to(signal-5, experts-34)
conj:and(insiders-31, experts-34)
punct(signal-5, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#more

flow :: In February , money flowed out of stock funds for the first time since October ./.
case(February-2, In-1)
nmod:in(flowed-5, February-2)
punct(flowed-5, ,-3)
nsubj(flowed-5, money-4)
root(ROOT-0, flowed-5)
case(funds-9, out-6)
mwe(out-6, of-7)
compound(funds-9, stock-8)
nmod:out_of(flowed-5, funds-9)
case(time-13, for-10)
det(time-13, the-11)
amod(time-13, first-12)
nmod:for(flowed-5, time-13)
case(October-15, since-14)
nmod:since(time-13, October-15)
punct(flowed-5, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#money

flow :: Up to $ 2 million of Dal-Tile 's money flowed through First Republic daily in payments received and bills paid ./.
case($-3, Up-1)
mwe(Up-1, to-2)
root(ROOT-0, $-3)
compound(million-5, 2-4)
nummod($-3, million-5)
case(money-9, of-6)
nmod:poss(money-9, Dal-Tile-7)
case(Dal-Tile-7, 's-8)
nmod:of($-3, money-9)
acl($-3, flowed-10)
case(daily-14, through-11)
amod(daily-14, First-12)
compound(daily-14, Republic-13)
nmod:through(flowed-10, daily-14)
case(payments-16, in-15)
nmod:in(flowed-10, payments-16)
acl(payments-16, received-17)
cc(received-17, and-18)
acl(payments-16, bills-19)
conj:and(received-17, bills-19)
dep(received-17, paid-20)
punct($-3, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#daily

flow :: Tears flowing , he stares at the picture till dawn ./.
nsubj(flowing-2, Tears-1)
ccomp(stares-5, flowing-2)
punct(stares-5, ,-3)
nsubj(stares-5, he-4)
root(ROOT-0, stares-5)
case(picture-8, at-6)
det(picture-8, the-7)
nmod:at(stares-5, picture-8)
case(dawn-10, till-9)
nmod:till(picture-8, dawn-10)
punct(stares-5, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#tears

flow :: `` As these -LRB- new fat substitutes -RRB- flow through the body , they may have laxative properties , '' he says ./.
punct(says-22, ``-1)
mark(have-16, As-2)
det(flow-9, these-3)
punct(substitutes-7, -LRB--4)
amod(substitutes-7, new-5)
amod(substitutes-7, fat-6)
dep(flow-9, substitutes-7)
punct(substitutes-7, -RRB--8)
nsubj(have-16, flow-9)
case(body-12, through-10)
det(body-12, the-11)
nmod:through(flow-9, body-12)
punct(have-16, ,-13)
nsubj(have-16, they-14)
aux(have-16, may-15)
ccomp(says-22, have-16)
compound(properties-18, laxative-17)
dobj(have-16, properties-18)
punct(says-22, ,-19)
punct(says-22, ''-20)
nsubj(says-22, he-21)
root(ROOT-0, says-22)
punct(says-22, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#body

flow :: Bombs and other debris flowing into the lake will be gently trapped and later removed ./.
nsubjpass(trapped-12, Bombs-1)
nsubjpass(removed-15, Bombs-1)
cc(Bombs-1, and-2)
amod(debris-4, other-3)
conj:and(Bombs-1, debris-4)
nsubjpass(trapped-12, debris-4)
acl(Bombs-1, flowing-5)
case(lake-8, into-6)
det(lake-8, the-7)
nmod:into(flowing-5, lake-8)
aux(trapped-12, will-9)
auxpass(trapped-12, be-10)
advmod(trapped-12, gently-11)
root(ROOT-0, trapped-12)
cc(trapped-12, and-13)
advmod(removed-15, later-14)
conj:and(trapped-12, removed-15)
punct(trapped-12, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#lake

flow :: Of the three intervals tested , it said one flowed 5 , 325 barrels of oil a day , a second flowed 23.5 million cubic feet of gas a day and a third flowed 44 million cubic feet of gas a day ./.
case(intervals-4, Of-1)
det(intervals-4, the-2)
nummod(intervals-4, three-3)
nmod:of(said-8, intervals-4)
acl(intervals-4, tested-5)
punct(said-8, ,-6)
nsubj(said-8, it-7)
root(ROOT-0, said-8)
nsubj(flowed-10, one-9)
ccomp(said-8, flowed-10)
dobj(flowed-10, 5-11)
punct(5-11, ,-12)
nummod(barrels-14, 325-13)
appos(5-11, barrels-14)
case(oil-16, of-15)
nmod:of(barrels-14, oil-16)
det(day-18, a-17)
nmod:npmod(barrels-14, day-18)
punct(5-11, ,-19)
det(second-21, a-20)
dep(flowed-22, second-21)
appos(5-11, flowed-22)
compound(million-24, 23.5-23)
nummod(feet-26, million-24)
amod(feet-26, cubic-25)
dobj(flowed-22, feet-26)
case(gas-28, of-27)
nmod:of(feet-26, gas-28)
det(day-30, a-29)
nmod:npmod(feet-26, day-30)
cc(flowed-22, and-31)
det(feet-38, a-32)
advmod(flowed-34, third-33)
amod(feet-38, flowed-34)
compound(million-36, 44-35)
nummod(feet-38, million-36)
amod(feet-38, cubic-37)
appos(5-11, feet-38)
conj:and(flowed-22, feet-38)
case(gas-40, of-39)
nmod:of(feet-38, gas-40)
det(day-42, a-41)
nmod:npmod(feet-38, day-42)
punct(said-8, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#5

flow :: Beer flowed from big pitchers as a cooling obbligato to the hot sounds ./.
nsubj(flowed-2, Beer-1)
root(ROOT-0, flowed-2)
case(pitchers-5, from-3)
amod(pitchers-5, big-4)
nmod:from(flowed-2, pitchers-5)
case(obbligato-9, as-6)
det(obbligato-9, a-7)
compound(obbligato-9, cooling-8)
nmod:as(flowed-2, obbligato-9)
case(sounds-13, to-10)
det(sounds-13, the-11)
amod(sounds-13, hot-12)
nmod:to(obbligato-9, sounds-13)
punct(flowed-2, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#beer

flow :: What I can say is that these things are inexplicably beautiful , as is almost always the case in Mr. Wilson 's work ; that Mr. Muller 's text , in the translation of Carl Weber , keeps finding new ways to express the contradictions of the human spirit ; and that `` Quartet '' seems to flow through its two-hour running time like a shifting stream of hot lava -- you do n't know where it 's going next , but you want to be sure and leave it plenty of room ./.
dobj(say-4, What-1)
nsubj(say-4, I-2)
aux(say-4, can-3)
csubj(is-5, say-4)
root(ROOT-0, is-5)
mark(beautiful-11, that-6)
det(things-8, these-7)
nsubj(beautiful-11, things-8)
cop(beautiful-11, are-9)
advmod(beautiful-11, inexplicably-10)
ccomp(is-5, beautiful-11)
punct(beautiful-11, ,-12)
mark(case-18, as-13)
cop(case-18, is-14)
advmod(always-16, almost-15)
advmod(case-18, always-16)
det(case-18, the-17)
advcl(beautiful-11, case-18)
case(work-23, in-19)
compound(Wilson-21, Mr.-20)
nmod:poss(work-23, Wilson-21)
case(Wilson-21, 's-22)
nmod:in(case-18, work-23)
punct(is-5, ;-24)
mark(keeps-38, that-25)
compound(Muller-27, Mr.-26)
nmod:poss(text-29, Muller-27)
case(Muller-27, 's-28)
nsubj(keeps-38, text-29)
punct(text-29, ,-30)
case(translation-33, in-31)
det(translation-33, the-32)
nmod:in(text-29, translation-33)
case(Weber-36, of-34)
compound(Weber-36, Carl-35)
nmod:of(translation-33, Weber-36)
punct(text-29, ,-37)
parataxis(is-5, keeps-38)
xcomp(keeps-38, finding-39)
amod(ways-41, new-40)
dobj(finding-39, ways-41)
mark(express-43, to-42)
acl(ways-41, express-43)
det(contradictions-45, the-44)
dobj(express-43, contradictions-45)
case(spirit-49, of-46)
det(spirit-49, the-47)
amod(spirit-49, human-48)
nmod:of(contradictions-45, spirit-49)
punct(keeps-38, ;-50)
cc(keeps-38, and-51)
mark(seems-56, that-52)
punct(seems-56, ``-53)
nsubj(seems-56, Quartet-54)
nsubj:xsubj(flow-58, Quartet-54)
punct(seems-56, ''-55)
parataxis(is-5, seems-56)
conj:and(keeps-38, seems-56)
mark(flow-58, to-57)
xcomp(seems-56, flow-58)
case(time-63, through-59)
nmod:poss(time-63, its-60)
amod(time-63, two-hour-61)
amod(time-63, running-62)
nmod:through(flow-58, time-63)
case(stream-67, like-64)
det(stream-67, a-65)
amod(stream-67, shifting-66)
nmod:like(time-63, stream-67)
case(lava-70, of-68)
amod(lava-70, hot-69)
nmod:of(stream-67, lava-70)
punct(seems-56, ---71)
nsubj(know-75, you-72)
aux(know-75, do-73)
neg(know-75, n't-74)
ccomp(seems-56, know-75)
advmod(going-79, where-76)
nsubj(going-79, it-77)
aux(going-79, 's-78)
ccomp(know-75, going-79)
advmod(going-79, next-80)
punct(seems-56, ,-81)
cc(seems-56, but-82)
nsubj(want-84, you-83)
nsubj:xsubj(sure-87, you-83)
conj:and(keeps-38, want-84)
conj:but(seems-56, want-84)
mark(sure-87, to-85)
cop(sure-87, be-86)
xcomp(want-84, sure-87)
cc(sure-87, and-88)
xcomp(want-84, leave-89)
conj:and(sure-87, leave-89)
dobj(leave-89, it-90)
advmod(leave-89, plenty-91)
case(room-93, of-92)
nmod:of(plenty-91, room-93)
punct(is-5, .-94)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#quartet

flow :: Gifts flow from commodity brokers , Wall Street houses , developers , insurance firms , Pentagon suppliers , oil companies and labor unions , including the Teamsters ./.
compound(flow-2, Gifts-1)
root(ROOT-0, flow-2)
case(brokers-5, from-3)
compound(brokers-5, commodity-4)
nmod:from(flow-2, brokers-5)
punct(flow-2, ,-6)
compound(houses-9, Wall-7)
compound(houses-9, Street-8)
conj:and(flow-2, houses-9)
punct(flow-2, ,-10)
conj:and(flow-2, developers-11)
punct(flow-2, ,-12)
compound(firms-14, insurance-13)
conj:and(flow-2, firms-14)
punct(flow-2, ,-15)
compound(suppliers-17, Pentagon-16)
conj:and(flow-2, suppliers-17)
punct(flow-2, ,-18)
compound(companies-20, oil-19)
conj:and(flow-2, companies-20)
cc(flow-2, and-21)
compound(unions-23, labor-22)
conj:and(flow-2, unions-23)
punct(flow-2, ,-24)
case(Teamsters-27, including-25)
det(Teamsters-27, the-26)
nmod:including(flow-2, Teamsters-27)
punct(flow-2, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#brokers

flow :: But if he is viewed after New Hampshire as the genuine right-wing article , it may start to flow ./.
cc(start-17, But-1)
mark(viewed-5, if-2)
nsubjpass(viewed-5, he-3)
auxpass(viewed-5, is-4)
advcl(start-17, viewed-5)
case(Hampshire-8, after-6)
compound(Hampshire-8, New-7)
nmod:after(viewed-5, Hampshire-8)
case(article-13, as-9)
det(article-13, the-10)
amod(article-13, genuine-11)
amod(article-13, right-wing-12)
nmod:as(viewed-5, article-13)
punct(start-17, ,-14)
nsubj(start-17, it-15)
nsubj:xsubj(flow-19, it-15)
aux(start-17, may-16)
root(ROOT-0, start-17)
mark(flow-19, to-18)
xcomp(start-17, flow-19)
punct(start-17, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#it

flow :: The ventilation system is designed to keep air pressure inside the building 's 12 laboratories slightly below normal , so that air from the hallways always flows into the labs to keep microbes from being carried out ./.
det(system-3, The-1)
compound(system-3, ventilation-2)
nsubjpass(designed-5, system-3)
nsubj:xsubj(keep-7, system-3)
auxpass(designed-5, is-4)
root(ROOT-0, designed-5)
mark(keep-7, to-6)
xcomp(designed-5, keep-7)
compound(pressure-9, air-8)
dobj(keep-7, pressure-9)
case(laboratories-15, inside-10)
det(building-12, the-11)
nmod:poss(laboratories-15, building-12)
case(building-12, 's-13)
nummod(laboratories-15, 12-14)
nmod:inside(keep-7, laboratories-15)
advmod(normal-18, slightly-16)
case(normal-18, below-17)
advcl(keep-7, normal-18)
punct(designed-5, ,-19)
case(air-22, so-20)
mwe(so-20, that-21)
nmod:so_that(designed-5, air-22)
case(hallways-25, from-23)
det(hallways-25, the-24)
nmod:from(air-22, hallways-25)
advmod(flows-27, always-26)
acl(air-22, flows-27)
case(labs-30, into-28)
det(labs-30, the-29)
nmod:into(flows-27, labs-30)
mark(keep-32, to-31)
xcomp(flows-27, keep-32)
dobj(keep-32, microbes-33)
mark(carried-36, from-34)
auxpass(carried-36, being-35)
advcl(keep-32, carried-36)
compound:prt(carried-36, out-37)
punct(designed-5, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#labs

flow :: So far , the rare discovery of aflatoxin in the Midwest two weeks ago has only served to slow the normal drop in corn futures prices that comes as the harvest flows into hundreds of grain elevators , and they in turn sell futures contracts at the Chicago Board of Trade in order to hedge their purchases from farmers ./.
advmod(far-2, So-1)
advmod(served-17, far-2)
punct(served-17, ,-3)
det(discovery-6, the-4)
amod(discovery-6, rare-5)
nsubj(served-17, discovery-6)
nsubj:xsubj(slow-19, discovery-6)
case(aflatoxin-8, of-7)
nmod:of(discovery-6, aflatoxin-8)
case(Midwest-11, in-9)
det(Midwest-11, the-10)
nmod:in(discovery-6, Midwest-11)
nummod(weeks-13, two-12)
nmod:npmod(ago-14, weeks-13)
advmod(served-17, ago-14)
aux(served-17, has-15)
advmod(served-17, only-16)
root(ROOT-0, served-17)
mark(slow-19, to-18)
xcomp(served-17, slow-19)
det(drop-22, the-20)
amod(drop-22, normal-21)
dobj(slow-19, drop-22)
nsubj(comes-28, drop-22)
case(prices-26, in-23)
compound(prices-26, corn-24)
compound(prices-26, futures-25)
nmod:in(drop-22, prices-26)
ref(drop-22, that-27)
acl:relcl(drop-22, comes-28)
mark(flows-32, as-29)
det(harvest-31, the-30)
nsubj(flows-32, harvest-31)
advcl(comes-28, flows-32)
case(hundreds-34, into-33)
nmod:into(flows-32, hundreds-34)
case(elevators-37, of-35)
compound(elevators-37, grain-36)
nmod:of(hundreds-34, elevators-37)
punct(served-17, ,-38)
cc(served-17, and-39)
nsubj(sell-43, they-40)
case(turn-42, in-41)
nmod:in(sell-43, turn-42)
conj:and(served-17, sell-43)
compound(contracts-45, futures-44)
dobj(sell-43, contracts-45)
case(Board-49, at-46)
det(Board-49, the-47)
compound(Board-49, Chicago-48)
nmod:at(sell-43, Board-49)
case(Trade-51, of-50)
nmod:of(Board-49, Trade-51)
mark(hedge-55, in-52)
mwe(in-52, order-53)
mark(hedge-55, to-54)
advcl(sell-43, hedge-55)
nmod:poss(purchases-57, their-56)
dobj(hedge-55, purchases-57)
case(farmers-59, from-58)
nmod:from(purchases-57, farmers-59)
punct(served-17, .-60)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#harvest

flow :: When the warm vapor flows through the narrowed midpoint , it speeds up and its pressure drops ./.
advmod(flows-5, When-1)
det(vapor-4, the-2)
amod(vapor-4, warm-3)
nsubj(flows-5, vapor-4)
advcl(speeds-12, flows-5)
case(midpoint-9, through-6)
det(midpoint-9, the-7)
amod(midpoint-9, narrowed-8)
nmod:through(flows-5, midpoint-9)
punct(speeds-12, ,-10)
nsubj(speeds-12, it-11)
root(ROOT-0, speeds-12)
compound:prt(speeds-12, up-13)
cc(speeds-12, and-14)
nmod:poss(drops-17, its-15)
compound(drops-17, pressure-16)
conj:and(speeds-12, drops-17)
punct(speeds-12, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#vapor

flow :: These electrons then flow back and forth from one silicon layer to the other , creating an electric field whose current can be tapped ./.
det(electrons-2, These-1)
nsubj(flow-4, electrons-2)
advmod(flow-4, then-3)
root(ROOT-0, flow-4)
advmod(flow-4, back-5)
cc(flow-4, and-6)
conj:and(flow-4, forth-7)
case(layer-11, from-8)
nummod(layer-11, one-9)
compound(layer-11, silicon-10)
nmod:from(forth-7, layer-11)
case(other-14, to-12)
det(other-14, the-13)
nmod:to(layer-11, other-14)
punct(flow-4, ,-15)
advcl(flow-4, creating-16)
det(field-19, an-17)
amod(field-19, electric-18)
dobj(creating-16, field-19)
nmod:poss(current-21, field-19)
ref(field-19, whose-20)
nsubjpass(tapped-24, current-21)
aux(tapped-24, can-22)
auxpass(tapped-24, be-23)
acl:relcl(field-19, tapped-24)
punct(flow-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#electrons

flow :: To hold the property-tax rate low , Addison never built a system to process the sewage flowing from its many developments ./.
mark(hold-2, To-1)
advcl(built-10, hold-2)
det(low-6, the-3)
amod(low-6, property-tax-4)
dep(low-6, rate-5)
dobj(hold-2, low-6)
punct(built-10, ,-7)
nsubj(built-10, Addison-8)
neg(built-10, never-9)
root(ROOT-0, built-10)
det(system-12, a-11)
dobj(built-10, system-12)
mark(process-14, to-13)
acl(system-12, process-14)
det(sewage-16, the-15)
dobj(process-14, sewage-16)
acl(sewage-16, flowing-17)
case(developments-21, from-18)
nmod:poss(developments-21, its-19)
amod(developments-21, many-20)
nmod:from(flowing-17, developments-21)
punct(built-10, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: flow#developments

fly :: Mr. Tyson was in London on business and had to fly back this weekend ./.
compound(Tyson-2, Mr.-1)
nsubj(London-5, Tyson-2)
nsubj(fly-11, Tyson-2)
cop(London-5, was-3)
case(London-5, in-4)
root(ROOT-0, London-5)
case(business-7, on-6)
nmod:on(London-5, business-7)
cc(London-5, and-8)
aux(fly-11, had-9)
mark(fly-11, to-10)
conj:and(London-5, fly-11)
advmod(fly-11, back-12)
det(weekend-14, this-13)
nmod:tmod(fly-11, weekend-14)
punct(London-5, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#tyson

fly :: By endorsing bank authority to underwrite corporate equities , the senators gave the Fed a defense against claims that such a move would fly in the face of congressional opposition ./.
mark(endorsing-2, By-1)
advcl(gave-12, endorsing-2)
compound(authority-4, bank-3)
dobj(endorsing-2, authority-4)
mark(underwrite-6, to-5)
acl(authority-4, underwrite-6)
amod(equities-8, corporate-7)
dobj(underwrite-6, equities-8)
punct(gave-12, ,-9)
det(senators-11, the-10)
nsubj(gave-12, senators-11)
root(ROOT-0, gave-12)
det(Fed-14, the-13)
iobj(gave-12, Fed-14)
det(defense-16, a-15)
dobj(gave-12, defense-16)
case(claims-18, against-17)
nmod:against(defense-16, claims-18)
mark(fly-24, that-19)
det:predet(move-22, such-20)
det(move-22, a-21)
nsubj(fly-24, move-22)
aux(fly-24, would-23)
ccomp(claims-18, fly-24)
case(face-27, in-25)
det(face-27, the-26)
nmod:in(fly-24, face-27)
case(opposition-30, of-28)
amod(opposition-30, congressional-29)
nmod:of(face-27, opposition-30)
punct(gave-12, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#move

fly :: Sunworld had recently been operating as a charter airline flying 120 flights a month ./.
nsubj(operating-5, Sunworld-1)
aux(operating-5, had-2)
advmod(operating-5, recently-3)
aux(operating-5, been-4)
root(ROOT-0, operating-5)
case(airline-9, as-6)
det(airline-9, a-7)
compound(airline-9, charter-8)
nmod:as(operating-5, airline-9)
acl(airline-9, flying-10)
nummod(flights-12, 120-11)
dobj(flying-10, flights-12)
det(month-14, a-13)
nmod:npmod(flights-12, month-14)
punct(operating-5, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#flights

fly :: In a discussion on board his Air Force jet as he flew to a speech here , Mr. Bush also indicated that he would attempt to have it both ways in budget negotiations with Congress , saying he is willing to negotiate deficit-reduction steps but wo n't want to include new taxes in the negotiations ./.
case(discussion-3, In-1)
det(discussion-3, a-2)
nmod:in(indicated-21, discussion-3)
case(board-5, on-4)
nmod:on(discussion-3, board-5)
nmod:poss(jet-9, his-6)
compound(jet-9, Air-7)
compound(jet-9, Force-8)
dobj(board-5, jet-9)
mark(flew-12, as-10)
nsubj(flew-12, he-11)
acl(discussion-3, flew-12)
case(speech-15, to-13)
det(speech-15, a-14)
nmod:to(flew-12, speech-15)
advmod(speech-15, here-16)
punct(indicated-21, ,-17)
compound(Bush-19, Mr.-18)
nsubj(indicated-21, Bush-19)
advmod(indicated-21, also-20)
root(ROOT-0, indicated-21)
mark(attempt-25, that-22)
nsubj(attempt-25, he-23)
nsubj:xsubj(have-27, he-23)
aux(attempt-25, would-24)
ccomp(indicated-21, attempt-25)
mark(have-27, to-26)
xcomp(attempt-25, have-27)
iobj(have-27, it-28)
det(ways-30, both-29)
dobj(have-27, ways-30)
case(negotiations-33, in-31)
compound(negotiations-33, budget-32)
nmod:in(ways-30, negotiations-33)
case(Congress-35, with-34)
nmod:with(negotiations-33, Congress-35)
punct(indicated-21, ,-36)
xcomp(indicated-21, saying-37)
nsubj(willing-40, he-38)
nsubj:xsubj(negotiate-42, he-38)
nsubj(want-48, he-38)
nsubj:xsubj(include-50, he-38)
cop(willing-40, is-39)
ccomp(saying-37, willing-40)
mark(negotiate-42, to-41)
xcomp(willing-40, negotiate-42)
amod(steps-44, deficit-reduction-43)
dobj(negotiate-42, steps-44)
cc(willing-40, but-45)
aux(want-48, wo-46)
neg(want-48, n't-47)
ccomp(saying-37, want-48)
conj:but(willing-40, want-48)
mark(include-50, to-49)
xcomp(want-48, include-50)
amod(taxes-52, new-51)
dobj(include-50, taxes-52)
case(negotiations-55, in-53)
det(negotiations-55, the-54)
nmod:in(taxes-52, negotiations-55)
punct(indicated-21, .-56)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#he

fly :: It 's a great fare , but there 's a slight problem: Eastern does n't fly that route ./.
nsubj(fare-5, It-1)
cop(fare-5, 's-2)
det(fare-5, a-3)
amod(fare-5, great-4)
root(ROOT-0, fare-5)
punct(fare-5, ,-6)
cc(fare-5, but-7)
expl('s-9, there-8)
conj:but(fare-5, 's-9)
det(problem-12, a-10)
amod(problem-12, slight-11)
nsubj('s-9, problem-12)
punct('s-9, :-13)
nsubj(fly-17, Eastern-14)
aux(fly-17, does-15)
neg(fly-17, n't-16)
parataxis('s-9, fly-17)
det(route-19, that-18)
dobj(fly-17, route-19)
punct(fare-5, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#route

fly :: The new calculations showed the shuttle could fly safely , he said ./.
det(calculations-3, The-1)
amod(calculations-3, new-2)
nsubj(showed-4, calculations-3)
ccomp(said-12, showed-4)
det(shuttle-6, the-5)
nsubj(fly-8, shuttle-6)
aux(fly-8, could-7)
ccomp(showed-4, fly-8)
advmod(fly-8, safely-9)
punct(said-12, ,-10)
nsubj(said-12, he-11)
root(ROOT-0, said-12)
punct(said-12, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#shuttle

fly :: With more carriers flying abroad , airlines are pressuring the FAA to allow them to use foreign repair stations to perform major maintenance work ./.
mark(flying-4, With-1)
amod(carriers-3, more-2)
nsubj(flying-4, carriers-3)
advcl(pressuring-9, flying-4)
advmod(flying-4, abroad-5)
punct(pressuring-9, ,-6)
nsubj(pressuring-9, airlines-7)
aux(pressuring-9, are-8)
root(ROOT-0, pressuring-9)
det(FAA-11, the-10)
dobj(pressuring-9, FAA-11)
nsubj:xsubj(allow-13, FAA-11)
mark(allow-13, to-12)
xcomp(pressuring-9, allow-13)
dobj(allow-13, them-14)
nsubj:xsubj(use-16, them-14)
mark(use-16, to-15)
xcomp(allow-13, use-16)
amod(stations-19, foreign-17)
compound(stations-19, repair-18)
dobj(use-16, stations-19)
mark(perform-21, to-20)
advcl(use-16, perform-21)
amod(work-24, major-22)
compound(work-24, maintenance-23)
dobj(perform-21, work-24)
punct(pressuring-9, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#carriers

fly :: To keep those flowerpots from flying , companies more and more try to prepare employees for working with AIDS patients ./.
mark(keep-2, To-1)
advcl(try-12, keep-2)
det(flowerpots-4, those-3)
dobj(keep-2, flowerpots-4)
mark(flying-6, from-5)
advcl(keep-2, flying-6)
punct(try-12, ,-7)
nsubj(try-12, companies-8)
nsubj:xsubj(prepare-14, companies-8)
advmod(try-12, more-9)
cc(more-9, and-10)
conj:and(more-9, more-11)
advmod(try-12, more-11)
root(ROOT-0, try-12)
mark(prepare-14, to-13)
xcomp(try-12, prepare-14)
dobj(prepare-14, employees-15)
mark(working-17, for-16)
advcl(prepare-14, working-17)
case(patients-20, with-18)
compound(patients-20, AIDS-19)
nmod:with(working-17, patients-20)
punct(try-12, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fly :: Three former scholarship winners now fly border patrol for the U.S. Customs Service ./.
nummod(winners-4, Three-1)
amod(winners-4, former-2)
compound(winners-4, scholarship-3)
nsubj(fly-6, winners-4)
advmod(fly-6, now-5)
root(ROOT-0, fly-6)
compound(patrol-8, border-7)
dobj(fly-6, patrol-8)
case(Service-13, for-9)
det(Service-13, the-10)
compound(Service-13, U.S.-11)
compound(Service-13, Customs-12)
nmod:for(fly-6, Service-13)
punct(fly-6, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#patrol

fly :: Under a temporary restraining order entered early this month , Judge Parker barred Eastern from eliminating the jobs , but specifically permitted the company to cut its flying ./.
case(order-5, Under-1)
det(order-5, a-2)
amod(order-5, temporary-3)
compound(order-5, restraining-4)
nmod:under(barred-13, order-5)
acl(order-5, entered-6)
advmod(month-9, early-7)
det(month-9, this-8)
nmod:tmod(entered-6, month-9)
punct(barred-13, ,-10)
compound(Parker-12, Judge-11)
nsubj(barred-13, Parker-12)
nsubj(permitted-22, Parker-12)
root(ROOT-0, barred-13)
dobj(barred-13, Eastern-14)
mark(eliminating-16, from-15)
advcl(barred-13, eliminating-16)
det(jobs-18, the-17)
dobj(eliminating-16, jobs-18)
punct(barred-13, ,-19)
cc(barred-13, but-20)
advmod(permitted-22, specifically-21)
conj:but(barred-13, permitted-22)
det(company-24, the-23)
dobj(permitted-22, company-24)
nsubj:xsubj(cut-26, company-24)
mark(cut-26, to-25)
xcomp(permitted-22, cut-26)
nmod:poss(flying-28, its-27)
dobj(cut-26, flying-28)
punct(barred-13, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#its

fly :: Ever since President Reagan in February 1986 called for U.S. development of an `` Orient Express , '' a futuristic aircraft that would fly from New York to Tokyo in two hours , MITI 's aerospace mavens have been itching to get Japan into the action ./.
root(ROOT-0, Ever-1)
root(Ever-1, since-2)
compound(Reagan-4, President-3)
root(since-2, Reagan-4)
case(February-6, in-5)
nmod:in(Reagan-4, February-6)
nummod(February-6, 1986-7)
acl(February-6, called-8)
case(development-11, for-9)
compound(development-11, U.S.-10)
nmod:for(called-8, development-11)
case(Express-16, of-12)
det(Express-16, an-13)
punct(Express-16, ``-14)
compound(Express-16, Orient-15)
nmod:of(development-11, Express-16)
punct(Reagan-4, ,-17)
punct(Reagan-4, ''-18)
det(aircraft-21, a-19)
amod(aircraft-21, futuristic-20)
nsubj(fly-24, aircraft-21)
nsubj(itching-40, aircraft-21)
nsubj:xsubj(get-42, aircraft-21)
ref(aircraft-21, that-22)
aux(fly-24, would-23)
acl:relcl(aircraft-21, fly-24)
case(York-27, from-25)
compound(York-27, New-26)
nmod:from(fly-24, York-27)
case(Tokyo-29, to-28)
nmod:to(fly-24, Tokyo-29)
case(hours-32, in-30)
nummod(hours-32, two-31)
nmod:in(fly-24, hours-32)
punct(aircraft-21, ,-33)
nmod:poss(mavens-37, MITI-34)
case(MITI-34, 's-35)
compound(mavens-37, aerospace-36)
appos(aircraft-21, mavens-37)
aux(itching-40, have-38)
aux(itching-40, been-39)
acl:relcl(Reagan-4, itching-40)
mark(get-42, to-41)
xcomp(itching-40, get-42)
dobj(get-42, Japan-43)
case(action-46, into-44)
det(action-46, the-45)
nmod:into(get-42, action-46)
punct(Reagan-4, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#aircraft

fly :: In return it got to shape the festivities , glamorizing things with a sprinkling of film and rock music personalities -LRB- Jane Seymour , Pierce Brosnan and Ringo Starr supplied this year 's dazzle -RRB- and flying in a roster of writers and photographers for publicity ./.
case(return-2, In-1)
nmod:in(got-4, return-2)
nsubj(got-4, it-3)
nsubj:xsubj(shape-6, it-3)
root(ROOT-0, got-4)
mark(shape-6, to-5)
xcomp(got-4, shape-6)
det(festivities-8, the-7)
dobj(shape-6, festivities-8)
punct(got-4, ,-9)
xcomp(got-4, glamorizing-10)
dobj(glamorizing-10, things-11)
case(sprinkling-14, with-12)
det(sprinkling-14, a-13)
nmod:with(glamorizing-10, sprinkling-14)
case(film-16, of-15)
nmod:of(sprinkling-14, film-16)
cc(film-16, and-17)
compound(personalities-20, rock-18)
compound(personalities-20, music-19)
nmod:of(sprinkling-14, personalities-20)
conj:and(film-16, personalities-20)
punct(Seymour-23, -LRB--21)
compound(Seymour-23, Jane-22)
nsubj(supplied-30, Seymour-23)
nsubj(flying-37, Seymour-23)
punct(Seymour-23, ,-24)
compound(Brosnan-26, Pierce-25)
conj:and(Seymour-23, Brosnan-26)
nsubj(supplied-30, Brosnan-26)
cc(Seymour-23, and-27)
compound(Starr-29, Ringo-28)
conj:and(Seymour-23, Starr-29)
nsubj(supplied-30, Starr-29)
parataxis(got-4, supplied-30)
det(year-32, this-31)
nmod:poss(dazzle-34, year-32)
case(year-32, 's-33)
dobj(supplied-30, dazzle-34)
punct(supplied-30, -RRB--35)
cc(supplied-30, and-36)
parataxis(got-4, flying-37)
conj:and(supplied-30, flying-37)
case(roster-40, in-38)
det(roster-40, a-39)
nmod:in(flying-37, roster-40)
case(writers-42, of-41)
nmod:of(roster-40, writers-42)
cc(writers-42, and-43)
nmod:of(roster-40, photographers-44)
conj:and(writers-42, photographers-44)
case(publicity-46, for-45)
nmod:for(flying-37, publicity-46)
punct(got-4, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#seymour

fly :: Unfortunately , `` Phantasm II '' also concerns a flying metal ball with speed-drill attachments , which affixes itself to one 's forehead and then drains the brain ./.
advmod(concerns-8, Unfortunately-1)
punct(concerns-8, ,-2)
punct(concerns-8, ``-3)
compound(II-5, Phantasm-4)
nsubj(concerns-8, II-5)
punct(concerns-8, ''-6)
advmod(concerns-8, also-7)
root(ROOT-0, concerns-8)
det(ball-12, a-9)
amod(ball-12, flying-10)
compound(ball-12, metal-11)
dobj(concerns-8, ball-12)
case(attachments-15, with-13)
amod(attachments-15, speed-drill-14)
nmod:with(ball-12, attachments-15)
nsubj(affixes-18, attachments-15)
nsubj(drains-26, attachments-15)
punct(attachments-15, ,-16)
ref(attachments-15, which-17)
acl:relcl(attachments-15, affixes-18)
dobj(affixes-18, itself-19)
case(forehead-23, to-20)
nmod:poss(forehead-23, one-21)
case(one-21, 's-22)
nmod:to(affixes-18, forehead-23)
cc(affixes-18, and-24)
advmod(drains-26, then-25)
acl:relcl(attachments-15, drains-26)
conj:and(affixes-18, drains-26)
det(brain-28, the-27)
dobj(drains-26, brain-28)
punct(concerns-8, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#ball

fly :: A slick young marketing executive at the firm chastises him: `` I told you it would n't fly ./.
det(executive-5, A-1)
amod(executive-5, slick-2)
amod(executive-5, young-3)
compound(executive-5, marketing-4)
nsubj(chastises-9, executive-5)
case(firm-8, at-6)
det(firm-8, the-7)
nmod:at(executive-5, firm-8)
root(ROOT-0, chastises-9)
dobj(chastises-9, him-10)
punct(chastises-9, :-11)
punct(chastises-9, ``-12)
nsubj(told-14, I-13)
ccomp(chastises-9, told-14)
dobj(told-14, you-15)
nsubj(fly-19, it-16)
aux(fly-19, would-17)
neg(fly-19, n't-18)
ccomp(told-14, fly-19)
punct(chastises-9, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#it

fly :: As a first step , the phone company offers a recorded message reproducing what is purported to be the sound of a flying saucer taped in Europe ./.
case(step-4, As-1)
det(step-4, a-2)
amod(step-4, first-3)
nmod:as(offers-9, step-4)
punct(offers-9, ,-5)
det(company-8, the-6)
compound(company-8, phone-7)
nsubj(offers-9, company-8)
root(ROOT-0, offers-9)
det(message-12, a-10)
amod(message-12, recorded-11)
dobj(offers-9, message-12)
acl(message-12, reproducing-13)
nsubj(purported-16, what-14)
nsubj:xsubj(sound-20, what-14)
cop(purported-16, is-15)
ccomp(reproducing-13, purported-16)
mark(sound-20, to-17)
cop(sound-20, be-18)
det(sound-20, the-19)
xcomp(purported-16, sound-20)
case(saucer-24, of-21)
det(saucer-24, a-22)
amod(saucer-24, flying-23)
nmod:of(sound-20, saucer-24)
acl(saucer-24, taped-25)
case(Europe-27, in-26)
nmod:in(taped-25, Europe-27)
punct(offers-9, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#saucer

fly :: And Mr. Gorbachev 's proposal to remove aircraft -- which easily can fly back to Central Europe during a crisis -- would be meaningless unless they are destroyed , Mr. Chalmers says ./.
cc(meaningless-24, And-1)
compound(Gorbachev-3, Mr.-2)
nmod:poss(proposal-5, Gorbachev-3)
case(Gorbachev-3, 's-4)
nsubj(fly-13, proposal-5)
nsubj(meaningless-24, proposal-5)
mark(remove-7, to-6)
acl(proposal-5, remove-7)
dobj(remove-7, aircraft-8)
punct(proposal-5, ---9)
ref(proposal-5, which-10)
advmod(fly-13, easily-11)
aux(fly-13, can-12)
acl:relcl(proposal-5, fly-13)
advmod(fly-13, back-14)
case(Europe-17, to-15)
compound(Europe-17, Central-16)
nmod:to(fly-13, Europe-17)
case(crisis-20, during-18)
det(crisis-20, a-19)
nmod:during(fly-13, crisis-20)
punct(proposal-5, ---21)
aux(meaningless-24, would-22)
cop(meaningless-24, be-23)
ccomp(says-32, meaningless-24)
mark(destroyed-28, unless-25)
nsubjpass(destroyed-28, they-26)
auxpass(destroyed-28, are-27)
advcl(meaningless-24, destroyed-28)
punct(says-32, ,-29)
compound(Chalmers-31, Mr.-30)
nsubj(says-32, Chalmers-31)
root(ROOT-0, says-32)
punct(says-32, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#proposal

fly :: Using cameras that shoot up to 44 , 000 pictures a second , and then turning them into slow-motion movies , the Boston photographer has helped customers solve problems with baseball pitchers ' throwing arms , high-speed factory machines , flashlamps that trigger lasers and a wide array of things that explode , fly , break apart or otherwise move too quickly to be seen clearly ./.
advcl(helped-26, Using-1)
dobj(Using-1, cameras-2)
nsubj(shoot-4, cameras-2)
ref(cameras-2, that-3)
acl:relcl(cameras-2, shoot-4)
case(44-7, up-5)
case(44-7, to-6)
nmod:to(shoot-4, 44-7)
punct(helped-26, ,-8)
nummod(pictures-10, 000-9)
dep(helped-26, pictures-10)
det(second-12, a-11)
nmod:npmod(pictures-10, second-12)
punct(pictures-10, ,-13)
cc(pictures-10, and-14)
advmod(turning-16, then-15)
conj:and(pictures-10, turning-16)
dep(helped-26, turning-16)
dobj(turning-16, them-17)
case(movies-20, into-18)
amod(movies-20, slow-motion-19)
nmod:into(turning-16, movies-20)
punct(helped-26, ,-21)
det(photographer-24, the-22)
compound(photographer-24, Boston-23)
nsubj(helped-26, photographer-24)
aux(helped-26, has-25)
root(ROOT-0, helped-26)
nsubj(solve-28, customers-27)
ccomp(helped-26, solve-28)
dobj(solve-28, problems-29)
case(pitchers-32, with-30)
compound(pitchers-32, baseball-31)
nmod:with(problems-29, pitchers-32)
case(pitchers-32, '-33)
dep(pitchers-32, throwing-34)
dobj(throwing-34, arms-35)
punct(throwing-34, ,-36)
amod(machines-39, high-speed-37)
compound(machines-39, factory-38)
conj(throwing-34, machines-39)
punct(throwing-34, ,-40)
conj(throwing-34, flashlamps-41)
nsubj(trigger-43, flashlamps-41)
ref(flashlamps-41, that-42)
acl:relcl(flashlamps-41, trigger-43)
dobj(trigger-43, lasers-44)
cc(lasers-44, and-45)
det(array-48, a-46)
amod(array-48, wide-47)
dobj(trigger-43, array-48)
conj:and(lasers-44, array-48)
case(things-50, of-49)
nmod:of(array-48, things-50)
nsubj(explode-52, things-50)
nsubj(fly-54, things-50)
nsubj(break-56, things-50)
nsubj(move-60, things-50)
nsubjpass:xsubj(seen-65, things-50)
ref(things-50, that-51)
acl:relcl(things-50, explode-52)
punct(explode-52, ,-53)
acl:relcl(things-50, fly-54)
conj:or(explode-52, fly-54)
punct(explode-52, ,-55)
acl:relcl(things-50, break-56)
conj:or(explode-52, break-56)
compound:prt(break-56, apart-57)
cc(explode-52, or-58)
advmod(move-60, otherwise-59)
acl:relcl(things-50, move-60)
conj:or(explode-52, move-60)
advmod(quickly-62, too-61)
advmod(move-60, quickly-62)
mark(seen-65, to-63)
auxpass(seen-65, be-64)
xcomp(move-60, seen-65)
advmod(seen-65, clearly-66)
punct(helped-26, .-67)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#things

fly :: When the chairman of Santa Fe Southern Pacific Corp. flew into town a few months ago in the corporate jet , a small group of trainmen here knew they had struck a raw nerve ./.
advmod(flew-10, When-1)
det(chairman-3, the-2)
nsubj(flew-10, chairman-3)
case(Corp.-9, of-4)
compound(Corp.-9, Santa-5)
compound(Corp.-9, Fe-6)
compound(Corp.-9, Southern-7)
compound(Corp.-9, Pacific-8)
nmod:of(chairman-3, Corp.-9)
advcl(knew-28, flew-10)
case(town-12, into-11)
nmod:into(flew-10, town-12)
det(months-15, a-13)
amod(months-15, few-14)
nmod:npmod(ago-16, months-15)
advmod(flew-10, ago-16)
case(jet-20, in-17)
det(jet-20, the-18)
amod(jet-20, corporate-19)
nmod:in(flew-10, jet-20)
punct(knew-28, ,-21)
det(group-24, a-22)
amod(group-24, small-23)
nsubj(knew-28, group-24)
case(trainmen-26, of-25)
nmod:of(group-24, trainmen-26)
advmod(knew-28, here-27)
root(ROOT-0, knew-28)
nsubj(struck-31, they-29)
aux(struck-31, had-30)
ccomp(knew-28, struck-31)
det(nerve-34, a-32)
amod(nerve-34, raw-33)
dobj(struck-31, nerve-34)
punct(knew-28, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#chairman

fly :: Eastern has made elaborate preparations to keep the airline flying with non-union workers ./.
nsubj(made-3, Eastern-1)
aux(made-3, has-2)
root(ROOT-0, made-3)
amod(preparations-5, elaborate-4)
dobj(made-3, preparations-5)
mark(keep-7, to-6)
advcl(made-3, keep-7)
det(airline-9, the-8)
nsubj(flying-10, airline-9)
dep(keep-7, flying-10)
case(workers-13, with-11)
amod(workers-13, non-union-12)
nmod:with(flying-10, workers-13)
punct(made-3, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#airline

fly :: Orion , a contract carrier which formerly flew for United Parcel Service , had agreed to replace Eastern pilots if they followed the machinists on a walkout ./.
nsubj(agreed-15, Orion-1)
nsubj:xsubj(replace-17, Orion-1)
punct(Orion-1, ,-2)
det(carrier-5, a-3)
compound(carrier-5, contract-4)
appos(Orion-1, carrier-5)
nsubj(flew-8, carrier-5)
ref(carrier-5, which-6)
advmod(flew-8, formerly-7)
acl:relcl(carrier-5, flew-8)
case(Service-12, for-9)
compound(Service-12, United-10)
compound(Service-12, Parcel-11)
nmod:for(flew-8, Service-12)
punct(Orion-1, ,-13)
aux(agreed-15, had-14)
root(ROOT-0, agreed-15)
mark(replace-17, to-16)
xcomp(agreed-15, replace-17)
compound(pilots-19, Eastern-18)
dobj(replace-17, pilots-19)
mark(followed-22, if-20)
nsubj(followed-22, they-21)
advcl(agreed-15, followed-22)
det(machinists-24, the-23)
dobj(followed-22, machinists-24)
case(walkout-27, on-25)
det(walkout-27, a-26)
nmod:on(followed-22, walkout-27)
punct(agreed-15, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#carrier

fly :: He added , `` Hal -LRB- Riney -RRB- flew into Miami this morning and offered us certain reassurances about the relationship that led us to the decision . ''/''
nsubj(added-2, He-1)
root(ROOT-0, added-2)
punct(added-2, ,-3)
punct(added-2, ``-4)
nsubj(flew-9, Hal-5)
nsubj(offered-15, Hal-5)
punct(Riney-7, -LRB--6)
appos(Hal-5, Riney-7)
punct(Riney-7, -RRB--8)
xcomp(added-2, flew-9)
case(Miami-11, into-10)
nmod:into(flew-9, Miami-11)
det(morning-13, this-12)
nmod:tmod(flew-9, morning-13)
cc(flew-9, and-14)
xcomp(added-2, offered-15)
conj:and(flew-9, offered-15)
iobj(offered-15, us-16)
amod(reassurances-18, certain-17)
dobj(offered-15, reassurances-18)
case(relationship-21, about-19)
det(relationship-21, the-20)
nmod:about(reassurances-18, relationship-21)
nsubj(led-23, relationship-21)
ref(relationship-21, that-22)
acl:relcl(relationship-21, led-23)
dobj(led-23, us-24)
case(decision-27, to-25)
det(decision-27, the-26)
nmod:to(led-23, decision-27)
punct(added-2, .-28)
punct(added-2, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fly#hal

fly :: Already , he has changed the French political landscape in a way that may be more long-lasting than the Reagan Revolution in the U.S. Building the Socialist Party from scratch in 1971 , Mr. Mitterrand went on to prove that a leftist could get elected without France 's flying apart ./.
advmod(changed-5, Already-1)
punct(changed-5, ,-2)
nsubj(changed-5, he-3)
aux(changed-5, has-4)
root(ROOT-0, changed-5)
det(landscape-9, the-6)
amod(landscape-9, French-7)
amod(landscape-9, political-8)
dobj(changed-5, landscape-9)
case(way-12, in-10)
det(way-12, a-11)
nmod:in(changed-5, way-12)
nsubj(long-lasting-17, way-12)
ref(way-12, that-13)
aux(long-lasting-17, may-14)
cop(long-lasting-17, be-15)
advmod(long-lasting-17, more-16)
acl:relcl(way-12, long-lasting-17)
case(Revolution-21, than-18)
det(Revolution-21, the-19)
compound(Revolution-21, Reagan-20)
nmod:than(long-lasting-17, Revolution-21)
case(Building-25, in-22)
det(Building-25, the-23)
compound(Building-25, U.S.-24)
nmod:in(Revolution-21, Building-25)
det(Party-28, the-26)
compound(Party-28, Socialist-27)
nsubj(went-36, Party-28)
nsubj:xsubj(prove-39, Party-28)
case(scratch-30, from-29)
nmod:from(Party-28, scratch-30)
case(1971-32, in-31)
nmod:in(Party-28, 1971-32)
punct(Party-28, ,-33)
compound(Mitterrand-35, Mr.-34)
appos(Party-28, Mitterrand-35)
acl:relcl(Building-25, went-36)
compound:prt(went-36, on-37)
mark(prove-39, to-38)
xcomp(went-36, prove-39)
mark(elected-45, that-40)
det(leftist-42, a-41)
nsubjpass(elected-45, leftist-42)
aux(elected-45, could-43)
auxpass(elected-45, get-44)
ccomp(prove-39, elected-45)
mark(flying-49, without-46)
nsubj(flying-49, France-47)
case(France-47, 's-48)
advcl(elected-45, flying-49)
advmod(flying-49, apart-50)
punct(changed-5, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#france

fly :: But even if this plan does n't fly , Mr. Robinson sees advantages in announcing it ./.
cc(sees-12, But-1)
advmod(fly-8, even-2)
mark(fly-8, if-3)
det(plan-5, this-4)
nsubj(fly-8, plan-5)
aux(fly-8, does-6)
neg(fly-8, n't-7)
advcl(sees-12, fly-8)
punct(sees-12, ,-9)
compound(Robinson-11, Mr.-10)
nsubj(sees-12, Robinson-11)
root(ROOT-0, sees-12)
dobj(sees-12, advantages-13)
mark(announcing-15, in-14)
advcl(sees-12, announcing-15)
dobj(announcing-15, it-16)
punct(sees-12, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#plan

fly :: `` If you fly with five connections , you can earn 15 , 000 miles , '' says William Byrnes , a Boston-based free-lance writer who has devised several ways to make so many connections ./.
punct(says-18, ``-1)
mark(fly-4, If-2)
nsubj(fly-4, you-3)
advcl(earn-11, fly-4)
case(connections-7, with-5)
nummod(connections-7, five-6)
nmod:with(fly-4, connections-7)
punct(earn-11, ,-8)
nsubj(earn-11, you-9)
aux(earn-11, can-10)
ccomp(says-18, earn-11)
dobj(earn-11, 15-12)
punct(15-12, ,-13)
nummod(miles-15, 000-14)
appos(15-12, miles-15)
punct(says-18, ,-16)
punct(says-18, ''-17)
root(ROOT-0, says-18)
compound(Byrnes-20, William-19)
nsubj(says-18, Byrnes-20)
punct(Byrnes-20, ,-21)
det(writer-25, a-22)
amod(writer-25, Boston-based-23)
amod(writer-25, free-lance-24)
appos(Byrnes-20, writer-25)
nsubj(devised-28, writer-25)
ref(writer-25, who-26)
aux(devised-28, has-27)
acl:relcl(writer-25, devised-28)
amod(ways-30, several-29)
dobj(devised-28, ways-30)
mark(make-32, to-31)
acl(ways-30, make-32)
advmod(many-34, so-33)
amod(connections-35, many-34)
dobj(make-32, connections-35)
punct(says-18, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#you

fly :: As previously reported , Eastern , locked in a longstanding labor-management feud , has contracted with Orion Air , a unit of Primark Corp . , to provide pilots to fly Eastern aircraft should contract talks end in a strike ./.
mark(reported-3, As-1)
advmod(reported-3, previously-2)
advcl(contracted-15, reported-3)
punct(contracted-15, ,-4)
nsubj(contracted-15, Eastern-5)
punct(Eastern-5, ,-6)
acl(Eastern-5, locked-7)
case(feud-12, in-8)
det(feud-12, a-9)
amod(feud-12, longstanding-10)
compound(feud-12, labor-management-11)
nmod:in(locked-7, feud-12)
punct(Eastern-5, ,-13)
aux(contracted-15, has-14)
root(ROOT-0, contracted-15)
case(Air-18, with-16)
compound(Air-18, Orion-17)
nmod:with(contracted-15, Air-18)
punct(Air-18, ,-19)
det(unit-21, a-20)
appos(Air-18, unit-21)
case(Corp-24, of-22)
compound(Corp-24, Primark-23)
nmod:of(unit-21, Corp-24)
punct(contracted-15, .-25)
punct(contract-10, ,-1)
mark(provide-3, to-2)
csubj(contract-10, provide-3)
dobj(provide-3, pilots-4)
mark(fly-6, to-5)
advcl(provide-3, fly-6)
amod(aircraft-8, Eastern-7)
dobj(fly-6, aircraft-8)
aux(contract-10, should-9)
root(ROOT-0, contract-10)
nsubj(end-12, talks-11)
ccomp(contract-10, end-12)
case(strike-15, in-13)
det(strike-15, a-14)
nmod:in(end-12, strike-15)
punct(contract-10, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#aircraft

fly :: In ground tests , parts keep fracturing and flying apart ./.
case(tests-3, In-1)
compound(tests-3, ground-2)
nmod:in(keep-6, tests-3)
punct(keep-6, ,-4)
nsubj(keep-6, parts-5)
root(ROOT-0, keep-6)
nsubj(apart-10, fracturing-7)
cc(fracturing-7, and-8)
conj:and(fracturing-7, flying-9)
nsubj(apart-10, flying-9)
xcomp(keep-6, apart-10)
punct(keep-6, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fly :: There are some indications that people who take sedatives do n't necessarily have to fly to forget ./.
expl(are-2, There-1)
root(ROOT-0, are-2)
det(indications-4, some-3)
nsubj(are-2, indications-4)
mark(have-13, that-5)
nsubj(take-8, people-6)
nsubj(have-13, people-6)
nsubj:xsubj(fly-15, people-6)
ref(people-6, who-7)
acl:relcl(people-6, take-8)
dobj(take-8, sedatives-9)
aux(have-13, do-10)
neg(have-13, n't-11)
advmod(have-13, necessarily-12)
ccomp(indications-4, have-13)
mark(fly-15, to-14)
xcomp(have-13, fly-15)
mark(forget-17, to-16)
xcomp(fly-15, forget-17)
punct(are-2, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#people

fly :: Selecting , keeping and replacing the personnel necessary to run the U.S. government is a lot closer to baseball than to flying ./.
nsubj(closer-17, Selecting-1)
punct(Selecting-1, ,-2)
acl(Selecting-1, keeping-3)
cc(keeping-3, and-4)
acl(Selecting-1, replacing-5)
conj:and(keeping-3, replacing-5)
det(personnel-7, the-6)
nsubj(necessary-8, personnel-7)
nsubj:xsubj(run-10, personnel-7)
xcomp(keeping-3, necessary-8)
mark(run-10, to-9)
xcomp(necessary-8, run-10)
det(government-13, the-11)
compound(government-13, U.S.-12)
dobj(run-10, government-13)
cop(closer-17, is-14)
det(lot-16, a-15)
nmod:npmod(closer-17, lot-16)
root(ROOT-0, closer-17)
case(baseball-19, to-18)
nmod:to(closer-17, baseball-19)
case(flying-22, than-20)
mark(flying-22, to-21)
advcl(closer-17, flying-22)
punct(closer-17, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fly :: `` On silent nights , great flocks of white birds fly formations past the Camino 's Lobby Bar . . . ./.
punct(fly-11, ``-1)
case(nights-4, On-2)
amod(nights-4, silent-3)
nmod:on(fly-11, nights-4)
punct(fly-11, ,-5)
amod(flocks-7, great-6)
nsubj(fly-11, flocks-7)
case(birds-10, of-8)
amod(birds-10, white-9)
nmod:of(flocks-7, birds-10)
root(ROOT-0, fly-11)
dobj(fly-11, formations-12)
case(Bar-18, past-13)
det(Camino-15, the-14)
nmod:poss(Bar-18, Camino-15)
case(Camino-15, 's-16)
compound(Bar-18, Lobby-17)
nmod:past(formations-12, Bar-18)
punct(fly-11, ...-19)
punct(fly-11, /-20)
punct(fly-11, .-21)
Return str :: fly#formations

fly :: Rumors fly at Smith Barney that its parent , Primerica , is disgusted and ready to sell the firm , though Primerica denies it ./.
nsubj(fly-2, Rumors-1)
root(ROOT-0, fly-2)
case(Barney-5, at-3)
compound(Barney-5, Smith-4)
nmod:at(fly-2, Barney-5)
mark(disgusted-13, that-6)
nmod:poss(parent-8, its-7)
nsubj(disgusted-13, parent-8)
nsubj(ready-15, parent-8)
nsubj:xsubj(sell-17, parent-8)
punct(parent-8, ,-9)
appos(parent-8, Primerica-10)
punct(parent-8, ,-11)
cop(disgusted-13, is-12)
ccomp(fly-2, disgusted-13)
cc(disgusted-13, and-14)
ccomp(fly-2, ready-15)
conj:and(disgusted-13, ready-15)
mark(sell-17, to-16)
xcomp(ready-15, sell-17)
det(firm-19, the-18)
dobj(sell-17, firm-19)
punct(fly-2, ,-20)
mark(denies-23, though-21)
nsubj(denies-23, Primerica-22)
advcl(fly-2, denies-23)
dobj(denies-23, it-24)
punct(fly-2, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#rumors

fly :: As previously reported , Eastern , locked in a longstanding labor-management feud , has contracted with Orion Air , a unit of Primark Corp . , to provide pilots to fly Eastern aircraft should contract talks end in a strike ./.
mark(reported-3, As-1)
advmod(reported-3, previously-2)
advcl(contracted-15, reported-3)
punct(contracted-15, ,-4)
nsubj(contracted-15, Eastern-5)
punct(Eastern-5, ,-6)
acl(Eastern-5, locked-7)
case(feud-12, in-8)
det(feud-12, a-9)
amod(feud-12, longstanding-10)
compound(feud-12, labor-management-11)
nmod:in(locked-7, feud-12)
punct(Eastern-5, ,-13)
aux(contracted-15, has-14)
root(ROOT-0, contracted-15)
case(Air-18, with-16)
compound(Air-18, Orion-17)
nmod:with(contracted-15, Air-18)
punct(Air-18, ,-19)
det(unit-21, a-20)
appos(Air-18, unit-21)
case(Corp-24, of-22)
compound(Corp-24, Primark-23)
nmod:of(unit-21, Corp-24)
punct(contracted-15, .-25)
punct(contract-10, ,-1)
mark(provide-3, to-2)
csubj(contract-10, provide-3)
dobj(provide-3, pilots-4)
mark(fly-6, to-5)
advcl(provide-3, fly-6)
amod(aircraft-8, Eastern-7)
dobj(fly-6, aircraft-8)
aux(contract-10, should-9)
root(ROOT-0, contract-10)
nsubj(end-12, talks-11)
ccomp(contract-10, end-12)
case(strike-15, in-13)
det(strike-15, a-14)
nmod:in(end-12, strike-15)
punct(contract-10, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#aircraft

fly :: During 1987 , America West added 2 , 900 employees , boosted its fleet of aircraft to 69 from 46 and added 11 cities to the 34 it flew to in 1986 ./.
case(1987-2, During-1)
nmod:during(added-6, 1987-2)
punct(added-6, ,-3)
compound(West-5, America-4)
nsubj(added-6, West-5)
root(ROOT-0, added-6)
dobj(added-6, 2-7)
punct(2-7, ,-8)
nummod(employees-10, 900-9)
appos(2-7, employees-10)
punct(2-7, ,-11)
dep(added-6, boosted-12)
nmod:poss(fleet-14, its-13)
dobj(boosted-12, fleet-14)
case(aircraft-16, of-15)
nmod:of(fleet-14, aircraft-16)
case(69-18, to-17)
nmod:to(boosted-12, 69-18)
case(46-20, from-19)
nmod:from(boosted-12, 46-20)
cc(boosted-12, and-21)
dep(added-6, added-22)
conj:and(boosted-12, added-22)
nummod(cities-24, 11-23)
dobj(added-22, cities-24)
case(34-27, to-25)
det(34-27, the-26)
nmod:to(added-22, 34-27)
nsubj(flew-29, it-28)
acl:relcl(34-27, flew-29)
case(1986-32, to-30)
case(1986-32, in-31)
nmod:in(flew-29, 1986-32)
punct(added-6, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#it

fly :: In ground tests , parts keep fracturing and flying apart ./.
case(tests-3, In-1)
compound(tests-3, ground-2)
nmod:in(keep-6, tests-3)
punct(keep-6, ,-4)
nsubj(keep-6, parts-5)
root(ROOT-0, keep-6)
nsubj(apart-10, fracturing-7)
cc(fracturing-7, and-8)
conj:and(fracturing-7, flying-9)
nsubj(apart-10, flying-9)
xcomp(keep-6, apart-10)
punct(keep-6, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fly :: Can Congress encourage democracy in other countries by flying foreigners here to watch it fight over the budget ?/.
aux(encourage-3, Can-1)
nsubj(encourage-3, Congress-2)
root(ROOT-0, encourage-3)
dobj(encourage-3, democracy-4)
case(countries-7, in-5)
amod(countries-7, other-6)
nmod:in(encourage-3, countries-7)
mark(flying-9, by-8)
advcl(encourage-3, flying-9)
dobj(flying-9, foreigners-10)
advmod(flying-9, here-11)
mark(watch-13, to-12)
advcl(flying-9, watch-13)
nsubj(fight-15, it-14)
ccomp(watch-13, fight-15)
case(budget-18, over-16)
det(budget-18, the-17)
nmod:over(fight-15, budget-18)
punct(encourage-3, ?-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#foreigners

fly :: That he can play the hawk , given his 11-year record in the House and Senate , shows what a dovish flock he 's flying with ./.
mark(play-4, That-1)
nsubj(play-4, he-2)
aux(play-4, can-3)
root(ROOT-0, play-4)
det(hawk-6, the-5)
dobj(play-4, hawk-6)
punct(play-4, ,-7)
case(record-11, given-8)
nmod:poss(record-11, his-9)
amod(record-11, 11-year-10)
nmod:given(play-4, record-11)
case(House-14, in-12)
det(House-14, the-13)
nmod:in(record-11, House-14)
cc(House-14, and-15)
nmod:in(record-11, Senate-16)
conj:and(House-14, Senate-16)
punct(play-4, ,-17)
dep(play-4, shows-18)
dobj(shows-18, what-19)
det(flock-22, a-20)
amod(flock-22, dovish-21)
nsubj(what-19, flock-22)
nsubj(flying-25, he-23)
aux(flying-25, 's-24)
acl:relcl(flock-22, flying-25)
nmod(flying-25, with-26)
punct(play-4, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#he

fly :: In early 1984 , some officers at New York 's Bankers Trust Co. devised a way for Mexico to shed some of its huge U.S. bank debt -- a plan remarkably similar to one embraced last week by Morgan Guaranty Trust Co. and Mexico -- but it did n't fly ./.
case(1984-3, In-1)
amod(1984-3, early-2)
nmod:in(devised-14, 1984-3)
punct(devised-14, ,-4)
det(officers-6, some-5)
nsubj(devised-14, officers-6)
case(Co.-13, at-7)
compound(York-9, New-8)
nmod:poss(Co.-13, York-9)
case(York-9, 's-10)
compound(Co.-13, Bankers-11)
compound(Co.-13, Trust-12)
nmod:at(officers-6, Co.-13)
root(ROOT-0, devised-14)
det(way-16, a-15)
dobj(devised-14, way-16)
mark(shed-20, for-17)
nsubj(shed-20, Mexico-18)
mark(shed-20, to-19)
acl(way-16, shed-20)
dobj(shed-20, some-21)
case(debt-27, of-22)
nmod:poss(debt-27, its-23)
amod(debt-27, huge-24)
compound(debt-27, U.S.-25)
compound(debt-27, bank-26)
nmod:of(some-21, debt-27)
punct(devised-14, ---28)
det(plan-30, a-29)
nsubj(embraced-35, plan-30)
advmod(similar-32, remarkably-31)
amod(plan-30, similar-32)
case(one-34, to-33)
nmod:to(similar-32, one-34)
parataxis(devised-14, embraced-35)
amod(week-37, last-36)
nmod:tmod(embraced-35, week-37)
case(Co.-42, by-38)
compound(Co.-42, Morgan-39)
compound(Co.-42, Guaranty-40)
compound(Co.-42, Trust-41)
nmod:by(embraced-35, Co.-42)
cc(Co.-42, and-43)
nmod:by(embraced-35, Mexico-44)
conj:and(Co.-42, Mexico-44)
punct(embraced-35, ---45)
cc(embraced-35, but-46)
nsubj(fly-50, it-47)
aux(fly-50, did-48)
neg(fly-50, n't-49)
parataxis(devised-14, fly-50)
conj:but(embraced-35, fly-50)
punct(devised-14, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#it

fly :: Parker was a musical pointillist who turned melodies into dots of sound and sent them flying like machine gun fire ./.
nsubj(pointillist-5, Parker-1)
cop(pointillist-5, was-2)
det(pointillist-5, a-3)
amod(pointillist-5, musical-4)
root(ROOT-0, pointillist-5)
nsubj(turned-7, pointillist-5)
nsubj(sent-14, pointillist-5)
ref(pointillist-5, who-6)
acl:relcl(pointillist-5, turned-7)
dobj(turned-7, melodies-8)
case(dots-10, into-9)
nmod:into(turned-7, dots-10)
case(sound-12, of-11)
nmod:of(dots-10, sound-12)
cc(turned-7, and-13)
acl:relcl(pointillist-5, sent-14)
conj:and(turned-7, sent-14)
nsubj(flying-16, them-15)
dep(sent-14, flying-16)
case(fire-20, like-17)
compound(fire-20, machine-18)
compound(fire-20, gun-19)
nmod:like(flying-16, fire-20)
punct(pointillist-5, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#them

fly :: Cohen and Kravis was described as cordial , angry charges flew like hail behind the scenes ./.
nsubjpass(described-5, Cohen-1)
cc(Cohen-1, and-2)
conj:and(Cohen-1, Kravis-3)
nsubjpass(described-5, Kravis-3)
auxpass(described-5, was-4)
root(ROOT-0, described-5)
case(cordial-7, as-6)
nmod:as(flew-11, cordial-7)
punct(flew-11, ,-8)
amod(charges-10, angry-9)
nsubj(flew-11, charges-10)
ccomp(described-5, flew-11)
case(hail-13, like-12)
nmod:like(flew-11, hail-13)
case(scenes-16, behind-14)
det(scenes-16, the-15)
nmod:behind(flew-11, scenes-16)
punct(described-5, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#charges

fly :: Not surprisingly , Helsinki is most appealing when things are kept Finnish , be it architecture , artifacts or sailors . -LRB- Finnish sailors , who train on one of Helsinki 's bucolic islands , sport blond hair , tans and jaunty white caps that look like flying saucers. -RRB-/-RRB-
dep(surprisingly-2, Not-1)
advmod(appealing-7, surprisingly-2)
punct(appealing-7, ,-3)
nsubj(appealing-7, Helsinki-4)
cop(appealing-7, is-5)
advmod(appealing-7, most-6)
root(ROOT-0, appealing-7)
advmod(kept-11, when-8)
nsubjpass(kept-11, things-9)
auxpass(kept-11, are-10)
advcl(appealing-7, kept-11)
xcomp(kept-11, Finnish-12)
punct(appealing-7, ,-13)
dep(appealing-7, be-14)
xcomp(be-14, it-15)
dep(it-15, architecture-16)
punct(architecture-16, ,-17)
dep(it-15, artifacts-18)
conj:or(architecture-16, artifacts-18)
cc(architecture-16, or-19)
dep(it-15, sailors-20)
conj:or(architecture-16, sailors-20)
punct(appealing-7, .-21)
root(ROOT-0, -LRB--1)
amod(sailors-3, Finnish-2)
root(-LRB--1, sailors-3)
nsubj(train-6, sailors-3)
punct(sailors-3, ,-4)
ref(sailors-3, who-5)
acl:relcl(sailors-3, train-6)
case(one-8, on-7)
nmod:on(train-6, one-8)
nsubj(look-25, one-8)
case(islands-13, of-9)
nmod:poss(islands-13, Helsinki-10)
case(Helsinki-10, 's-11)
amod(islands-13, bucolic-12)
nmod:of(one-8, islands-13)
punct(one-8, ,-14)
compound(hair-17, sport-15)
amod(hair-17, blond-16)
nmod:on(train-6, hair-17)
conj:and(one-8, hair-17)
nsubj(look-25, hair-17)
punct(one-8, ,-18)
nmod:on(train-6, tans-19)
conj:and(one-8, tans-19)
nsubj(look-25, tans-19)
cc(one-8, and-20)
amod(caps-23, jaunty-21)
amod(caps-23, white-22)
nmod:on(train-6, caps-23)
conj:and(one-8, caps-23)
nsubj(look-25, caps-23)
ref(one-8, that-24)
acl:relcl(one-8, look-25)
mark(flying-27, like-26)
advcl(look-25, flying-27)
dobj(flying-27, saucers-28)
punct(sailors-3, .-29)
punct(sailors-3, -RRB--30)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: fly#saucers

fly :: Back in the early 1970s , when Mr. Trudeau created `` Doonesbury , '' he was able to invent quirky countercultural characters that allowed his delicately accurate barbs to fly in all directions ./.
advmod(1970s-5, Back-1)
case(1970s-5, in-2)
det(1970s-5, the-3)
amod(1970s-5, early-4)
nmod:in(able-17, 1970s-5)
punct(1970s-5, ,-6)
advmod(created-10, when-7)
compound(Trudeau-9, Mr.-8)
nsubj(created-10, Trudeau-9)
acl:relcl(1970s-5, created-10)
punct(created-10, ``-11)
dobj(created-10, Doonesbury-12)
punct(able-17, ,-13)
punct(able-17, ''-14)
nsubj(able-17, he-15)
nsubj:xsubj(invent-19, he-15)
cop(able-17, was-16)
root(ROOT-0, able-17)
mark(invent-19, to-18)
xcomp(able-17, invent-19)
amod(characters-22, quirky-20)
amod(characters-22, countercultural-21)
dobj(invent-19, characters-22)
nsubj(allowed-24, characters-22)
ref(characters-22, that-23)
acl:relcl(characters-22, allowed-24)
nmod:poss(barbs-28, his-25)
advmod(accurate-27, delicately-26)
amod(barbs-28, accurate-27)
dobj(allowed-24, barbs-28)
nsubj:xsubj(fly-30, barbs-28)
mark(fly-30, to-29)
xcomp(allowed-24, fly-30)
case(directions-33, in-31)
det(directions-33, all-32)
nmod:in(fly-30, directions-33)
punct(able-17, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#barbs

fly :: Gary Lynch , the director of enforcement at the SEC , recalls some investment bankers who passed their polygraph tests with flying colors during insider-trading probes ./.
compound(Lynch-2, Gary-1)
nsubj(recalls-12, Lynch-2)
punct(Lynch-2, ,-3)
det(director-5, the-4)
appos(Lynch-2, director-5)
case(enforcement-7, of-6)
nmod:of(director-5, enforcement-7)
case(SEC-10, at-8)
det(SEC-10, the-9)
nmod:at(director-5, SEC-10)
punct(Lynch-2, ,-11)
root(ROOT-0, recalls-12)
det(bankers-15, some-13)
compound(bankers-15, investment-14)
dobj(recalls-12, bankers-15)
nsubj(passed-17, bankers-15)
ref(bankers-15, who-16)
acl:relcl(bankers-15, passed-17)
nmod:poss(tests-20, their-18)
compound(tests-20, polygraph-19)
dobj(passed-17, tests-20)
case(colors-23, with-21)
amod(colors-23, flying-22)
nmod:with(passed-17, colors-23)
case(probes-26, during-24)
compound(probes-26, insider-trading-25)
nmod:during(passed-17, probes-26)
punct(recalls-12, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#colors

fly :: In a flying start last year , checkers gave thumbs down to junk priced at $ 10 billion ./.
case(start-4, In-1)
det(start-4, a-2)
amod(start-4, flying-3)
nmod:in(gave-9, start-4)
amod(year-6, last-5)
nmod:tmod(gave-9, year-6)
punct(gave-9, ,-7)
nsubj(gave-9, checkers-8)
root(ROOT-0, gave-9)
dobj(gave-9, thumbs-10)
advmod(gave-9, down-11)
case(junk-13, to-12)
nmod:to(down-11, junk-13)
acl(junk-13, priced-14)
case($-16, at-15)
nmod:at(priced-14, $-16)
compound(billion-18, 10-17)
nummod($-16, billion-18)
punct(gave-9, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#start

fly :: I can see the memos flying from one faceless bureaucrat to another ./.
nsubj(see-3, I-1)
aux(see-3, can-2)
root(ROOT-0, see-3)
det(memos-5, the-4)
dobj(see-3, memos-5)
acl(memos-5, flying-6)
case(bureaucrat-10, from-7)
nummod(bureaucrat-10, one-8)
amod(bureaucrat-10, faceless-9)
nmod:from(flying-6, bureaucrat-10)
case(another-12, to-11)
nmod:to(bureaucrat-10, another-12)
punct(see-3, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#bureaucrat

fly :: The fare restructuring , aimed at tying prices to mileage flown , apparently will wipe away many of the bargain-basement fares currently available to leisure travelers , and make it likely that those travelers will pay $ 10 to $ 30 more on most fares ./.
det(restructuring-3, The-1)
compound(restructuring-3, fare-2)
nsubj(wipe-15, restructuring-3)
nsubj(make-29, restructuring-3)
punct(restructuring-3, ,-4)
acl(restructuring-3, aimed-5)
mark(tying-7, at-6)
advcl(aimed-5, tying-7)
dobj(tying-7, prices-8)
case(mileage-10, to-9)
nmod:to(tying-7, mileage-10)
acl(mileage-10, flown-11)
punct(restructuring-3, ,-12)
advmod(wipe-15, apparently-13)
aux(wipe-15, will-14)
root(ROOT-0, wipe-15)
advmod(wipe-15, away-16)
nsubj(available-23, many-17)
case(fares-21, of-18)
det(fares-21, the-19)
compound(fares-21, bargain-basement-20)
nmod:of(many-17, fares-21)
advmod(available-23, currently-22)
xcomp(wipe-15, available-23)
case(travelers-26, to-24)
compound(travelers-26, leisure-25)
nmod:to(available-23, travelers-26)
punct(wipe-15, ,-27)
cc(wipe-15, and-28)
conj:and(wipe-15, make-29)
nsubj(pay-36, it-30)
dep(pay-36, likely-31)
mark(pay-36, that-32)
det(travelers-34, those-33)
nsubj(pay-36, travelers-34)
aux(pay-36, will-35)
xcomp(make-29, pay-36)
dep($-40, $-37)
compound($-40, 10-38)
dep($-40, to-39)
dobj(pay-36, $-40)
nummod($-40, 30-41)
amod($-40, more-42)
case(fares-45, on-43)
amod(fares-45, most-44)
nmod:on(pay-36, fares-45)
punct(wipe-15, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fly :: Lawsuits and lawsuit-threats are flying ./.
nsubj(flying-5, Lawsuits-1)
cc(Lawsuits-1, and-2)
conj:and(Lawsuits-1, lawsuit-threats-3)
nsubj(flying-5, lawsuit-threats-3)
aux(flying-5, are-4)
root(ROOT-0, flying-5)
punct(flying-5, .-6)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#lawsuits

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: Smugglers countered by flying low and slow ./.
root(ROOT-0, Smugglers-1)
acl(Smugglers-1, countered-2)
mark(flying-4, by-3)
advcl(countered-2, flying-4)
advmod(flying-4, low-5)
cc(low-5, and-6)
advmod(flying-4, slow-7)
conj:and(low-5, slow-7)
punct(Smugglers-1, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

fly :: `` There are a lot of fares to clean out , '' says a spokeswoman for Eastern , which stopped flying from Los Angeles to San Francisco earlier this summer ./.
punct(says-13, ``-1)
expl(are-3, There-2)
ccomp(says-13, are-3)
det(lot-5, a-4)
nsubj(are-3, lot-5)
case(fares-7, of-6)
nmod:of(lot-5, fares-7)
mark(clean-9, to-8)
acl(lot-5, clean-9)
compound:prt(clean-9, out-10)
punct(says-13, ,-11)
punct(says-13, ''-12)
root(ROOT-0, says-13)
det(spokeswoman-15, a-14)
nsubj(says-13, spokeswoman-15)
case(Eastern-17, for-16)
nmod:for(spokeswoman-15, Eastern-17)
nsubj(stopped-20, Eastern-17)
punct(Eastern-17, ,-18)
ref(Eastern-17, which-19)
acl:relcl(Eastern-17, stopped-20)
xcomp(stopped-20, flying-21)
case(Angeles-24, from-22)
compound(Angeles-24, Los-23)
nmod:from(flying-21, Angeles-24)
case(Francisco-27, to-25)
compound(Francisco-27, San-26)
nmod:to(flying-21, Francisco-27)
advmod(summer-30, earlier-28)
det(summer-30, this-29)
nmod:tmod(flying-21, summer-30)
punct(says-13, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#angeles

fly :: The FAA found that Northwest was requiring international flight crews to fly a domestic leg as well before going off duty ./.
det(FAA-2, The-1)
nsubj(found-3, FAA-2)
root(ROOT-0, found-3)
mark(requiring-7, that-4)
nsubj(requiring-7, Northwest-5)
aux(requiring-7, was-6)
ccomp(found-3, requiring-7)
amod(crews-10, international-8)
compound(crews-10, flight-9)
dobj(requiring-7, crews-10)
nsubj:xsubj(fly-12, crews-10)
mark(fly-12, to-11)
xcomp(requiring-7, fly-12)
det(leg-15, a-13)
amod(leg-15, domestic-14)
dobj(fly-12, leg-15)
cc(fly-12, as-16)
mwe(as-16, well-17)
mwe(as-16, before-18)
xcomp(requiring-7, going-19)
conj:and(fly-12, going-19)
compound:prt(going-19, off-20)
dobj(going-19, duty-21)
punct(found-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#leg

fly :: But are airports being used by people who are flying more often -- or by people who simply are taking more connections ?/.
cc(used-5, But-1)
aux(used-5, are-2)
nsubjpass(used-5, airports-3)
auxpass(used-5, being-4)
root(ROOT-0, used-5)
case(people-7, by-6)
nmod:agent(used-5, people-7)
nsubj(flying-10, people-7)
ref(people-7, who-8)
aux(flying-10, are-9)
acl:relcl(people-7, flying-10)
advmod(often-12, more-11)
advmod(flying-10, often-12)
punct(flying-10, ---13)
cc(flying-10, or-14)
case(people-16, by-15)
acl:relcl(people-7, people-16)
conj:or(flying-10, people-16)
nsubj(taking-20, people-16)
ref(people-16, who-17)
advmod(taking-20, simply-18)
aux(taking-20, are-19)
acl:relcl(people-16, taking-20)
amod(connections-22, more-21)
dobj(taking-20, connections-22)
punct(used-5, ?-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#people

fly :: But the Warsaw Pact is only 15 minutes flying time from Switzerland , and Swiss skies thus represent a self-contained defense sector at Europe 's core ./.
cc(time-10, But-1)
det(Pact-4, the-2)
compound(Pact-4, Warsaw-3)
nsubj(time-10, Pact-4)
cop(time-10, is-5)
advmod(15-7, only-6)
nummod(minutes-8, 15-7)
nmod:npmod(time-10, minutes-8)
amod(time-10, flying-9)
root(ROOT-0, time-10)
case(Switzerland-12, from-11)
nmod:from(time-10, Switzerland-12)
punct(time-10, ,-13)
cc(time-10, and-14)
amod(skies-16, Swiss-15)
nsubj(represent-18, skies-16)
advmod(represent-18, thus-17)
conj:and(time-10, represent-18)
det(sector-22, a-19)
amod(sector-22, self-contained-20)
compound(sector-22, defense-21)
dobj(represent-18, sector-22)
case(core-26, at-23)
nmod:poss(core-26, Europe-24)
case(Europe-24, 's-25)
nmod:at(sector-22, core-26)
punct(time-10, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#time

fly :: From next Monday to Oct. 15 , it will let passengers qualify for triple mileage if they fly a round trip between Newark , N.J . , and Kansas City , Mo . , or between Newark and Minneapolis St ./.
case(Monday-3, From-1)
amod(Monday-3, next-2)
nmod:from(let-10, Monday-3)
case(Oct.-5, to-4)
nmod:to(Monday-3, Oct.-5)
nummod(Oct.-5, 15-6)
punct(let-10, ,-7)
nsubj(let-10, it-8)
aux(let-10, will-9)
root(ROOT-0, let-10)
nsubj(qualify-12, passengers-11)
ccomp(let-10, qualify-12)
case(mileage-15, for-13)
amod(mileage-15, triple-14)
nmod:for(qualify-12, mileage-15)
mark(fly-18, if-16)
nsubj(fly-18, they-17)
advcl(qualify-12, fly-18)
det(trip-21, a-19)
amod(trip-21, round-20)
dobj(fly-18, trip-21)
case(Newark-23, between-22)
nmod:between(trip-21, Newark-23)
punct(Newark-23, ,-24)
appos(Newark-23, N.J-25)
punct(let-10, .-26)
punct(City-4, ,-1)
cc(City-4, and-2)
compound(City-4, Kansas-3)
root(ROOT-0, City-4)
punct(City-4, ,-5)
appos(City-4, Mo-6)
punct(City-4, .-7)
root(ROOT-0, ,-1)
root(,-1, or-2)
case(Newark-4, between-3)
nmod:between(or-2, Newark-4)
cc(Newark-4, and-5)
compound(St-7, Minneapolis-6)
nmod:between(or-2, St-7)
conj:and(Newark-4, St-7)
punct(or-2, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#trip

fly :: The route generates about $ 120 million in revenue for United , which has been flying it since 1983 ./.
det(route-2, The-1)
nsubj(generates-3, route-2)
root(ROOT-0, generates-3)
advmod($-5, about-4)
dobj(generates-3, $-5)
compound(million-7, 120-6)
nummod($-5, million-7)
case(revenue-9, in-8)
nmod:in($-5, revenue-9)
case(United-11, for-10)
nmod:for($-5, United-11)
nsubj(flying-16, United-11)
punct(United-11, ,-12)
ref(United-11, which-13)
aux(flying-16, has-14)
aux(flying-16, been-15)
acl:relcl(United-11, flying-16)
dobj(flying-16, it-17)
case(1983-19, since-18)
nmod:since(flying-16, 1983-19)
punct(generates-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#it

fly :: Eastern 's cutbacks have benefited Continental in other ways , the affidavit claims: Roughly 4 % of Eastern 's flying capacity competes with Continental , it says , compared with 9.3 % in January 1987 ./.
nmod:poss(cutbacks-3, Eastern-1)
case(Eastern-1, 's-2)
nsubj(benefited-5, cutbacks-3)
aux(benefited-5, have-4)
root(ROOT-0, benefited-5)
dobj(benefited-5, Continental-6)
case(ways-9, in-7)
amod(ways-9, other-8)
nmod:in(benefited-5, ways-9)
punct(benefited-5, ,-10)
det(claims-13, the-11)
compound(claims-13, affidavit-12)
root(,-10, claims-13)
punct(claims-13, :-14)
advmod(4-16, Roughly-15)
nummod(%-17, 4-16)
nsubj(competes-23, %-17)
case(capacity-22, of-18)
nmod:poss(capacity-22, Eastern-19)
case(Eastern-19, 's-20)
amod(capacity-22, flying-21)
nmod:of(%-17, capacity-22)
dep(claims-13, competes-23)
case(Continental-25, with-24)
nmod:with(competes-23, Continental-25)
punct(says-28, ,-26)
nsubj(says-28, it-27)
parataxis(competes-23, says-28)
punct(says-28, ,-29)
case(%-33, compared-30)
mwe(compared-30, with-31)
nummod(%-33, 9.3-32)
advcl(competes-23, %-33)
case(January-35, in-34)
nmod:in(%-33, January-35)
nummod(January-35, 1987-36)
punct(claims-13, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#capacity

fly :: Airlines say they have lessened the risk by focusing increases on business fliers , who often must fly at any price ./.
nsubj(say-2, Airlines-1)
root(ROOT-0, say-2)
nsubj(lessened-5, they-3)
aux(lessened-5, have-4)
ccomp(say-2, lessened-5)
det(risk-7, the-6)
dobj(lessened-5, risk-7)
mark(focusing-9, by-8)
advcl(lessened-5, focusing-9)
dobj(focusing-9, increases-10)
case(fliers-13, on-11)
compound(fliers-13, business-12)
nmod:on(increases-10, fliers-13)
nsubj(fly-18, fliers-13)
punct(fliers-13, ,-14)
ref(fliers-13, who-15)
advmod(fly-18, often-16)
aux(fly-18, must-17)
acl:relcl(fliers-13, fly-18)
case(price-21, at-19)
det(price-21, any-20)
nmod:at(fly-18, price-21)
punct(say-2, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#fliers

fly :: The 47-year-old spaceman , who flew aboard a Soyuz capsule last December , reportedly was preparing for the first manned flight of a Soviet space shuttle ./.
det(spaceman-3, The-1)
amod(spaceman-3, 47-year-old-2)
nsubj(flew-6, spaceman-3)
nsubj(preparing-16, spaceman-3)
punct(spaceman-3, ,-4)
ref(spaceman-3, who-5)
acl:relcl(spaceman-3, flew-6)
case(capsule-10, aboard-7)
det(capsule-10, a-8)
compound(capsule-10, Soyuz-9)
nmod:aboard(flew-6, capsule-10)
amod(December-12, last-11)
nmod:tmod(flew-6, December-12)
punct(spaceman-3, ,-13)
advmod(preparing-16, reportedly-14)
aux(preparing-16, was-15)
root(ROOT-0, preparing-16)
case(flight-21, for-17)
det(flight-21, the-18)
amod(flight-21, first-19)
amod(flight-21, manned-20)
nmod:for(preparing-16, flight-21)
case(shuttle-26, of-22)
det(shuttle-26, a-23)
amod(shuttle-26, Soviet-24)
compound(shuttle-26, space-25)
nmod:of(flight-21, shuttle-26)
punct(preparing-16, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#spaceman

fly :: A revenue passenger mile is one paying customer flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
amod(customer-8, paying-7)
nsubj(flown-9, customer-8)
acl:relcl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: For the first seven months of 1988 , the small regional carrier flew 3.94 billion revenue passenger miles , up 30 % from 3.03 billion a year earlier ./.
case(months-5, For-1)
det(months-5, the-2)
amod(months-5, first-3)
nummod(months-5, seven-4)
nmod:for(flew-13, months-5)
case(1988-7, of-6)
nmod:of(months-5, 1988-7)
punct(flew-13, ,-8)
det(carrier-12, the-9)
amod(carrier-12, small-10)
amod(carrier-12, regional-11)
nsubj(flew-13, carrier-12)
root(ROOT-0, flew-13)
compound(billion-15, 3.94-14)
nummod(miles-18, billion-15)
compound(miles-18, revenue-16)
compound(miles-18, passenger-17)
dobj(flew-13, miles-18)
punct(miles-18, ,-19)
advmod(miles-18, up-20)
nummod(%-22, 30-21)
nmod:npmod(up-20, %-22)
case(billion-25, from-23)
compound(billion-25, 3.03-24)
nmod:from(up-20, billion-25)
det(year-27, a-26)
nmod:npmod(earlier-28, year-27)
advmod(billion-25, earlier-28)
punct(flew-13, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#miles

fly :: For the year to date , the airline said it flew 9.51 billion revenue passenger miles , up 27.6 % from 7.45 billion miles a year earlier ./.
case(year-3, For-1)
det(year-3, the-2)
nmod:for(said-9, year-3)
case(date-5, to-4)
nmod:to(year-3, date-5)
punct(said-9, ,-6)
det(airline-8, the-7)
nsubj(said-9, airline-8)
root(ROOT-0, said-9)
nsubj(flew-11, it-10)
ccomp(said-9, flew-11)
compound(billion-13, 9.51-12)
nummod(miles-16, billion-13)
compound(miles-16, revenue-14)
compound(miles-16, passenger-15)
dobj(flew-11, miles-16)
punct(miles-16, ,-17)
advmod(miles-16, up-18)
nummod(%-20, 27.6-19)
nmod:npmod(up-18, %-20)
case(miles-24, from-21)
compound(billion-23, 7.45-22)
nummod(miles-24, billion-23)
nmod:from(up-18, miles-24)
det(year-26, a-25)
nmod:npmod(earlier-27, year-26)
advmod(miles-24, earlier-27)
punct(said-9, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#miles

fly :: Mexico verifies crop destruction by flying over sprayed sites ; it calls on-ground inspections too risky ./.
nsubj(verifies-2, Mexico-1)
root(ROOT-0, verifies-2)
compound(destruction-4, crop-3)
dobj(verifies-2, destruction-4)
mark(flying-6, by-5)
advcl(verifies-2, flying-6)
case(sites-9, over-7)
amod(sites-9, sprayed-8)
nmod:over(flying-6, sites-9)
punct(verifies-2, ;-10)
nsubj(calls-12, it-11)
parataxis(verifies-2, calls-12)
amod(inspections-14, on-ground-13)
nsubj(risky-16, inspections-14)
advmod(risky-16, too-15)
xcomp(calls-12, risky-16)
punct(verifies-2, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#sites

fly :: He is part of a growing air force of amateur aces around the country who rebuild and fly aging warplanes , indulging in weekend flights of fantasy like Mr. Deakins 's Battle of Stuart . -LRB- He won , he says , by keeping Mr. Stephenson , 48 , in his gun sights for 10 seconds ; the planes are unarmed ./.
nsubj(part-3, He-1)
cop(part-3, is-2)
root(ROOT-0, part-3)
case(force-8, of-4)
det(force-8, a-5)
amod(force-8, growing-6)
compound(force-8, air-7)
nmod:of(part-3, force-8)
case(amateur-10, of-9)
nmod:of(force-8, amateur-10)
acl(force-8, aces-11)
case(country-14, around-12)
det(country-14, the-13)
nmod:around(aces-11, country-14)
nsubj(rebuild-16, country-14)
nsubj(fly-18, country-14)
ref(country-14, who-15)
acl:relcl(country-14, rebuild-16)
cc(rebuild-16, and-17)
acl:relcl(country-14, fly-18)
conj:and(rebuild-16, fly-18)
amod(warplanes-20, aging-19)
dobj(rebuild-16, warplanes-20)
punct(aces-11, ,-21)
xcomp(aces-11, indulging-22)
case(flights-25, in-23)
compound(flights-25, weekend-24)
nmod:in(indulging-22, flights-25)
case(fantasy-27, of-26)
nmod:of(flights-25, fantasy-27)
case(Battle-32, like-28)
compound(Deakins-30, Mr.-29)
nmod:poss(Battle-32, Deakins-30)
case(Deakins-30, 's-31)
nmod:like(flights-25, Battle-32)
case(Stuart-34, of-33)
nmod:of(Battle-32, Stuart-34)
punct(part-3, .-35)
punct(won-3, -LRB--1)
nsubj(won-3, He-2)
root(ROOT-0, won-3)
punct(says-6, ,-4)
nsubj(says-6, he-5)
parataxis(won-3, says-6)
punct(says-6, ,-7)
mark(keeping-9, by-8)
advcl(won-3, keeping-9)
compound(Stephenson-11, Mr.-10)
dobj(keeping-9, Stephenson-11)
punct(Stephenson-11, ,-12)
amod(Stephenson-11, 48-13)
punct(Stephenson-11, ,-14)
case(sights-18, in-15)
nmod:poss(sights-18, his-16)
compound(sights-18, gun-17)
nmod:in(keeping-9, sights-18)
case(seconds-21, for-19)
nummod(seconds-21, 10-20)
nmod:for(keeping-9, seconds-21)
punct(won-3, ;-22)
det(planes-24, the-23)
nsubj(unarmed-26, planes-24)
cop(unarmed-26, are-25)
parataxis(won-3, unarmed-26)
punct(won-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#country

fly :: But the resolution probably rests more on politics than on flying skill and commercial expertise ./.
cc(rests-5, But-1)
det(resolution-3, the-2)
nsubj(rests-5, resolution-3)
advmod(rests-5, probably-4)
root(ROOT-0, rests-5)
dobj(rests-5, more-6)
case(politics-8, on-7)
nmod:on(more-6, politics-8)
case(skill-12, than-9)
case(skill-12, on-10)
amod(skill-12, flying-11)
nmod:on(more-6, skill-12)
cc(skill-12, and-13)
amod(expertise-15, commercial-14)
nmod:on(more-6, expertise-15)
conj:and(skill-12, expertise-15)
punct(rests-5, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#skill

fly :: Air Inter can fly to Ibiza , Spain , in the summer and Madrid in the winter twice a week under an Air France flight number ./.
compound(Inter-2, Air-1)
nsubj(fly-4, Inter-2)
aux(fly-4, can-3)
root(ROOT-0, fly-4)
case(Ibiza-6, to-5)
nmod:to(fly-4, Ibiza-6)
punct(Ibiza-6, ,-7)
appos(Ibiza-6, Spain-8)
punct(Ibiza-6, ,-9)
case(summer-12, in-10)
det(summer-12, the-11)
nmod:in(fly-4, summer-12)
cc(summer-12, and-13)
nmod:in(fly-4, Madrid-14)
conj:and(summer-12, Madrid-14)
case(winter-17, in-15)
det(winter-17, the-16)
nmod:in(summer-12, winter-17)
advmod(week-20, twice-18)
det(week-20, a-19)
nmod:tmod(fly-4, week-20)
case(number-26, under-21)
det(number-26, an-22)
compound(number-26, Air-23)
compound(number-26, France-24)
compound(number-26, flight-25)
nmod:under(fly-4, number-26)
punct(fly-4, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#inter

fly :: When the U.S. expanded its gulf fleet a year ago to protect Kuwaiti tankers flying the U.S. flag , it left little doubt that it was siding with Iraq and the other Arab nations against Iran ./.
advmod(expanded-4, When-1)
det(U.S.-3, the-2)
nsubj(expanded-4, U.S.-3)
advcl(left-21, expanded-4)
nmod:poss(fleet-7, its-5)
compound(fleet-7, gulf-6)
dobj(expanded-4, fleet-7)
det(year-9, a-8)
nmod:npmod(ago-10, year-9)
advmod(expanded-4, ago-10)
mark(protect-12, to-11)
advcl(expanded-4, protect-12)
amod(tankers-14, Kuwaiti-13)
dobj(protect-12, tankers-14)
acl(tankers-14, flying-15)
det(flag-18, the-16)
compound(flag-18, U.S.-17)
dobj(flying-15, flag-18)
punct(left-21, ,-19)
nsubj(left-21, it-20)
root(ROOT-0, left-21)
amod(doubt-23, little-22)
dobj(left-21, doubt-23)
mark(siding-27, that-24)
nsubj(siding-27, it-25)
cop(siding-27, was-26)
ccomp(doubt-23, siding-27)
case(Iraq-29, with-28)
nmod:with(siding-27, Iraq-29)
cc(Iraq-29, and-30)
det(nations-34, the-31)
amod(nations-34, other-32)
amod(nations-34, Arab-33)
nmod:with(siding-27, nations-34)
conj:and(Iraq-29, nations-34)
case(Iran-36, against-35)
nmod:against(nations-34, Iran-36)
punct(left-21, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#flag

fly :: The senator was so eager to appear with the governor at a campaign event July 1 that he awoke at 4:30 a.m. and flew his own twin-engine airplane to Dayton ./.
det(senator-2, The-1)
nsubj(eager-5, senator-2)
nsubj:xsubj(appear-7, senator-2)
cop(eager-5, was-3)
advmod(eager-5, so-4)
root(ROOT-0, eager-5)
mark(appear-7, to-6)
xcomp(eager-5, appear-7)
case(governor-10, with-8)
det(governor-10, the-9)
nmod:with(appear-7, governor-10)
case(event-14, at-11)
det(event-14, a-12)
compound(event-14, campaign-13)
nmod:at(appear-7, event-14)
nmod:tmod(event-14, July-15)
nummod(July-15, 1-16)
mark(awoke-19, that-17)
nsubj(awoke-19, he-18)
nsubj(flew-24, he-18)
ccomp(appear-7, awoke-19)
case(a.m.-22, at-20)
nummod(a.m.-22, 4:30-21)
nmod:at(awoke-19, a.m.-22)
cc(awoke-19, and-23)
ccomp(appear-7, flew-24)
conj:and(awoke-19, flew-24)
nmod:poss(airplane-28, his-25)
amod(airplane-28, own-26)
compound(airplane-28, twin-engine-27)
dobj(flew-24, airplane-28)
case(Dayton-30, to-29)
nmod:to(flew-24, Dayton-30)
punct(eager-5, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#airplane

fly :: The young aviator from Oceana , Calif . , was scheduled to fly to Greenland Sunday , then stop in Iceland before arriving in Paris on Wednesday ./.
det(aviator-3, The-1)
amod(aviator-3, young-2)
root(ROOT-0, aviator-3)
case(Oceana-5, from-4)
nmod:from(aviator-3, Oceana-5)
punct(Oceana-5, ,-6)
appos(Oceana-5, Calif-7)
punct(aviator-3, .-8)
punct(scheduled-3, ,-1)
auxpass(scheduled-3, was-2)
root(ROOT-0, scheduled-3)
mark(fly-5, to-4)
xcomp(scheduled-3, fly-5)
case(Greenland-7, to-6)
nmod:to(fly-5, Greenland-7)
nmod:tmod(fly-5, Sunday-8)
punct(scheduled-3, ,-9)
advmod(stop-11, then-10)
dep(scheduled-3, stop-11)
case(Iceland-13, in-12)
nmod:in(stop-11, Iceland-13)
mark(arriving-15, before-14)
advcl(stop-11, arriving-15)
case(Paris-17, in-16)
nmod:in(arriving-15, Paris-17)
case(Wednesday-19, on-18)
nmod:on(arriving-15, Wednesday-19)
punct(scheduled-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#greenland

fly :: When flights from Chicago to Islip , N.Y . , started falling behind schedule , the airline discovered that the Federal Aviation Administration had changed the flying route , making the trip 70 miles longer ./.
root(ROOT-0, When-1)
dep(When-1, flights-2)
case(Chicago-4, from-3)
nmod:from(flights-2, Chicago-4)
case(Islip-6, to-5)
nmod:to(flights-2, Islip-6)
punct(Islip-6, ,-7)
appos(Islip-6, N.Y-8)
punct(When-1, .-9)
punct(started-2, ,-1)
advcl(discovered-9, started-2)
xcomp(started-2, falling-3)
case(schedule-5, behind-4)
nmod:behind(falling-3, schedule-5)
punct(discovered-9, ,-6)
det(airline-8, the-7)
nsubj(discovered-9, airline-8)
root(ROOT-0, discovered-9)
mark(changed-16, that-10)
det(Administration-14, the-11)
compound(Administration-14, Federal-12)
compound(Administration-14, Aviation-13)
nsubj(changed-16, Administration-14)
aux(changed-16, had-15)
ccomp(discovered-9, changed-16)
det(route-19, the-17)
amod(route-19, flying-18)
dobj(changed-16, route-19)
punct(changed-16, ,-20)
advcl(changed-16, making-21)
det(trip-23, the-22)
dobj(making-21, trip-23)
nummod(miles-25, 70-24)
nmod:npmod(longer-26, miles-25)
advmod(making-21, longer-26)
punct(discovered-9, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#route

fly :: Although it never saw combat , the Fortress flew photo mapping missions in Europe ./.
mark(saw-4, Although-1)
nsubj(saw-4, it-2)
neg(saw-4, never-3)
advcl(flew-9, saw-4)
dobj(saw-4, combat-5)
punct(flew-9, ,-6)
det(Fortress-8, the-7)
nsubj(flew-9, Fortress-8)
root(ROOT-0, flew-9)
compound(missions-12, photo-10)
compound(missions-12, mapping-11)
dobj(flew-9, missions-12)
case(Europe-14, in-13)
nmod:in(flew-9, Europe-14)
punct(flew-9, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#missions

fly :: Alain Minc , Patrick Ponsolle and Maurice Lippens were flying from Paris to Brussels last Monday night when they uncorked a bottle of warm champagne and toasted the future of Societe Generale de Belgique S.A . , the giant Belgian holding company ./.
compound(Minc-2, Alain-1)
nsubj(flying-10, Minc-2)
punct(Minc-2, ,-3)
compound(Ponsolle-5, Patrick-4)
conj:and(Minc-2, Ponsolle-5)
nsubj(flying-10, Ponsolle-5)
cc(Minc-2, and-6)
compound(Lippens-8, Maurice-7)
conj:and(Minc-2, Lippens-8)
nsubj(flying-10, Lippens-8)
aux(flying-10, were-9)
root(ROOT-0, flying-10)
case(Paris-12, from-11)
nmod:from(flying-10, Paris-12)
case(Brussels-14, to-13)
nmod:to(flying-10, Brussels-14)
amod(night-17, last-15)
compound(night-17, Monday-16)
nmod:tmod(flying-10, night-17)
advmod(uncorked-20, when-18)
nsubj(uncorked-20, they-19)
nsubj(toasted-27, they-19)
advcl(flying-10, uncorked-20)
det(bottle-22, a-21)
dobj(uncorked-20, bottle-22)
case(champagne-25, of-23)
amod(champagne-25, warm-24)
nmod:of(bottle-22, champagne-25)
cc(uncorked-20, and-26)
advcl(flying-10, toasted-27)
conj:and(uncorked-20, toasted-27)
det(future-29, the-28)
dobj(toasted-27, future-29)
case(S.A-35, of-30)
compound(S.A-35, Societe-31)
compound(S.A-35, Generale-32)
compound(S.A-35, de-33)
compound(S.A-35, Belgique-34)
nmod:of(future-29, S.A-35)
punct(flying-10, .-36)
punct(company-6, ,-1)
det(company-6, the-2)
amod(company-6, giant-3)
amod(company-6, Belgian-4)
amod(company-6, holding-5)
root(ROOT-0, company-6)
punct(company-6, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#minc

fly :: But other officials , who asked not to be identified , said the helicopter was an MH-6 flying from one of two large barges moored in the northern Persian Gulf ./.
cc(said-12, But-1)
amod(officials-3, other-2)
nsubj(asked-6, officials-3)
nsubjpass:xsubj(identified-10, officials-3)
nsubj(said-12, officials-3)
punct(officials-3, ,-4)
ref(officials-3, who-5)
acl:relcl(officials-3, asked-6)
neg(identified-10, not-7)
mark(identified-10, to-8)
auxpass(identified-10, be-9)
xcomp(asked-6, identified-10)
punct(officials-3, ,-11)
root(ROOT-0, said-12)
det(helicopter-14, the-13)
nsubj(MH-6-17, helicopter-14)
cop(MH-6-17, was-15)
det(MH-6-17, an-16)
ccomp(said-12, MH-6-17)
acl(MH-6-17, flying-18)
case(one-20, from-19)
nmod:from(flying-18, one-20)
case(barges-24, of-21)
nummod(barges-24, two-22)
amod(barges-24, large-23)
nmod:of(one-20, barges-24)
acl(barges-24, moored-25)
case(Gulf-30, in-26)
det(Gulf-30, the-27)
amod(Gulf-30, northern-28)
compound(Gulf-30, Persian-29)
nmod:in(moored-25, Gulf-30)
punct(said-12, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#one

fly :: Foreign visitors marvel at the $ 35 steaks in the stores here , but that 's only because most of them fly here on round-trip tickets purchased back home at rational prices ./.
amod(visitors-2, Foreign-1)
nsubj(marvel-3, visitors-2)
root(ROOT-0, marvel-3)
case(steaks-8, at-4)
det(steaks-8, the-5)
amod(steaks-8, $-6)
compound($-6, 35-7)
nmod:at(marvel-3, steaks-8)
case(stores-11, in-9)
det(stores-11, the-10)
nmod:in(steaks-8, stores-11)
advmod(steaks-8, here-12)
punct(marvel-3, ,-13)
cc(marvel-3, but-14)
nsubj(fly-22, that-15)
cop(fly-22, 's-16)
advmod(fly-22, only-17)
mark(fly-22, because-18)
nsubj(fly-22, most-19)
case(them-21, of-20)
nmod:of(most-19, them-21)
conj:but(marvel-3, fly-22)
advmod(fly-22, here-23)
case(tickets-26, on-24)
amod(tickets-26, round-trip-25)
nmod:on(fly-22, tickets-26)
acl(tickets-26, purchased-27)
advmod(home-29, back-28)
advmod(purchased-27, home-29)
case(prices-32, at-30)
amod(prices-32, rational-31)
nmod:at(purchased-27, prices-32)
punct(marvel-3, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#that

fly :: A revenue passenger mile is one paying customer flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
amod(customer-8, paying-7)
nsubj(flown-9, customer-8)
acl:relcl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: For the first five months of the year , the NWA Inc. unit flew 14.9 billion revenue passenger miles , down 7.5 % from 16.1 billion miles a year earlier ./.
case(months-5, For-1)
det(months-5, the-2)
amod(months-5, first-3)
nummod(months-5, five-4)
nmod:for(flew-14, months-5)
case(year-8, of-6)
det(year-8, the-7)
nmod:of(months-5, year-8)
punct(flew-14, ,-9)
det(unit-13, the-10)
compound(unit-13, NWA-11)
compound(unit-13, Inc.-12)
nsubj(flew-14, unit-13)
root(ROOT-0, flew-14)
compound(billion-16, 14.9-15)
nummod(miles-19, billion-16)
compound(miles-19, revenue-17)
compound(miles-19, passenger-18)
dobj(flew-14, miles-19)
punct(miles-19, ,-20)
advmod(miles-19, down-21)
nummod(%-23, 7.5-22)
nmod:npmod(down-21, %-23)
case(miles-27, from-24)
compound(billion-26, 16.1-25)
nummod(miles-27, billion-26)
nmod:from(down-21, miles-27)
det(year-29, a-28)
nmod:npmod(earlier-30, year-29)
advmod(miles-27, earlier-30)
punct(flew-14, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#miles

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: The problem is that the surging hordes of passengers are flying into the same number of airports ./.
det(problem-2, The-1)
nsubj(is-3, problem-2)
root(ROOT-0, is-3)
mark(flying-11, that-4)
det(hordes-7, the-5)
amod(hordes-7, surging-6)
nsubj(flying-11, hordes-7)
case(passengers-9, of-8)
nmod:of(hordes-7, passengers-9)
aux(flying-11, are-10)
ccomp(is-3, flying-11)
case(number-15, into-12)
det(number-15, the-13)
amod(number-15, same-14)
nmod:into(flying-11, number-15)
case(airports-17, of-16)
nmod:of(number-15, airports-17)
punct(is-3, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#hordes

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: The U.S. also is considering whether to officially change its gulf policy of protecting only U.S.-flag ships , which consist mainly of 11 Kuwaiti tankers flying U.S. flags ./.
det(U.S.-2, The-1)
nsubj(considering-5, U.S.-2)
advmod(considering-5, also-3)
aux(considering-5, is-4)
root(ROOT-0, considering-5)
mark(change-9, whether-6)
mark(change-9, to-7)
advmod(change-9, officially-8)
ccomp(considering-5, change-9)
nmod:poss(policy-12, its-10)
compound(policy-12, gulf-11)
dobj(change-9, policy-12)
mark(protecting-14, of-13)
acl(policy-12, protecting-14)
advmod(ships-17, only-15)
amod(ships-17, U.S.-flag-16)
dobj(protecting-14, ships-17)
nsubj(consist-20, ships-17)
punct(ships-17, ,-18)
ref(ships-17, which-19)
acl:relcl(ships-17, consist-20)
advmod(consist-20, mainly-21)
case(tankers-25, of-22)
nummod(tankers-25, 11-23)
compound(tankers-25, Kuwaiti-24)
nmod:of(mainly-21, tankers-25)
amod(flags-28, flying-26)
compound(flags-28, U.S.-27)
dep(tankers-25, flags-28)
punct(considering-5, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#flags

fly :: The body of al-Wazir was flown to Damascus for burial today ./.
det(body-2, The-1)
nsubjpass(flown-6, body-2)
case(al-Wazir-4, of-3)
nmod:of(body-2, al-Wazir-4)
auxpass(flown-6, was-5)
root(ROOT-0, flown-6)
case(Damascus-8, to-7)
nmod:to(flown-6, Damascus-8)
case(burial-10, for-9)
nmod:for(flown-6, burial-10)
nmod:tmod(flown-6, today-11)
punct(flown-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#body

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: U.S. airlines are applying under the same rules allowing Pan Am to fly here ./.
compound(airlines-2, U.S.-1)
nsubj(applying-4, airlines-2)
aux(applying-4, are-3)
root(ROOT-0, applying-4)
case(rules-8, under-5)
det(rules-8, the-6)
amod(rules-8, same-7)
nmod:under(applying-4, rules-8)
acl(rules-8, allowing-9)
nsubj(Am-11, Pan-10)
nsubj:xsubj(fly-13, Pan-10)
ccomp(allowing-9, Am-11)
mark(fly-13, to-12)
xcomp(Am-11, fly-13)
advmod(fly-13, here-14)
punct(applying-4, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#pan

fly :: Perhaps hoping to keep the newcomers out , Pan Am and British Air applied to fly on each other 's German routes ./.
advmod(hoping-2, Perhaps-1)
advcl(fly-16, hoping-2)
mark(keep-4, to-3)
xcomp(hoping-2, keep-4)
det(newcomers-6, the-5)
dobj(keep-4, newcomers-6)
compound:prt(keep-4, out-7)
punct(fly-16, ,-8)
compound(Am-10, Pan-9)
nsubj(fly-16, Am-10)
cc(Am-10, and-11)
compound(applied-14, British-12)
compound(applied-14, Air-13)
conj:and(Am-10, applied-14)
nsubj(fly-16, applied-14)
mark(fly-16, to-15)
root(ROOT-0, fly-16)
case(routes-22, on-17)
det(other-19, each-18)
nmod:poss(routes-22, other-19)
case(other-19, 's-20)
amod(routes-22, German-21)
nmod:on(fly-16, routes-22)
punct(fly-16, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#am

fly :: Mr. Petee said one man was so afraid his boss was going to ask him to fly that he started his own business ./.
compound(Petee-2, Mr.-1)
nsubj(said-3, Petee-2)
root(ROOT-0, said-3)
nummod(man-5, one-4)
nsubj(afraid-8, man-5)
cop(afraid-8, was-6)
advmod(afraid-8, so-7)
ccomp(said-3, afraid-8)
nmod:poss(boss-10, his-9)
nsubj(going-12, boss-10)
nsubj:xsubj(ask-14, boss-10)
aux(going-12, was-11)
ccomp(afraid-8, going-12)
mark(ask-14, to-13)
xcomp(going-12, ask-14)
dobj(ask-14, him-15)
nsubj:xsubj(fly-17, him-15)
mark(fly-17, to-16)
xcomp(ask-14, fly-17)
mark(started-20, that-18)
nsubj(started-20, he-19)
ccomp(fly-17, started-20)
nmod:poss(business-23, his-21)
amod(business-23, own-22)
dobj(started-20, business-23)
punct(said-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#him

fly :: Although most of the major airlines have such affiliations , they generally are n't involved in the operations of the smaller airlines-even when the commuters are flying under the big airlines ' logos ./.
mark(have-7, Although-1)
nsubj(have-7, most-2)
case(airlines-6, of-3)
det(airlines-6, the-4)
amod(airlines-6, major-5)
nmod:of(most-2, airlines-6)
advcl(involved-15, have-7)
amod(affiliations-9, such-8)
dobj(have-7, affiliations-9)
punct(involved-15, ,-10)
nsubjpass(involved-15, they-11)
advmod(involved-15, generally-12)
auxpass(involved-15, are-13)
neg(involved-15, n't-14)
root(ROOT-0, involved-15)
case(operations-18, in-16)
det(operations-18, the-17)
nmod:in(involved-15, operations-18)
case(airlines-even-22, of-19)
det(airlines-even-22, the-20)
amod(airlines-even-22, smaller-21)
nmod:of(operations-18, airlines-even-22)
advmod(flying-27, when-23)
det(commuters-25, the-24)
nsubj(flying-27, commuters-25)
aux(flying-27, are-26)
advcl(involved-15, flying-27)
case(logos-33, under-28)
det(airlines-31, the-29)
compound(airlines-31, big-30)
nmod:poss(logos-33, airlines-31)
case(airlines-31, '-32)
nmod:under(flying-27, logos-33)
punct(involved-15, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#commuters

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: Delta Air Lines said it flew 3.94 billion revenue passenger miles in December , a 26.7 % increase from the 3.11 billion miles it flew in December 1986 ./.
compound(Lines-3, Delta-1)
compound(Lines-3, Air-2)
nsubj(said-4, Lines-3)
root(ROOT-0, said-4)
nsubj(flew-6, it-5)
ccomp(said-4, flew-6)
compound(billion-8, 3.94-7)
nummod(miles-11, billion-8)
compound(miles-11, revenue-9)
compound(miles-11, passenger-10)
dobj(flew-6, miles-11)
case(December-13, in-12)
nmod:in(flew-6, December-13)
punct(December-13, ,-14)
det(increase-18, a-15)
compound(%-17, 26.7-16)
amod(increase-18, %-17)
appos(December-13, increase-18)
case(miles-23, from-19)
det(miles-23, the-20)
compound(billion-22, 3.11-21)
nummod(miles-23, billion-22)
nmod:from(increase-18, miles-23)
nsubj(flew-25, it-24)
acl:relcl(miles-23, flew-25)
case(December-27, in-26)
nmod:in(flew-25, December-27)
nummod(December-27, 1986-28)
punct(said-4, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#miles

fly :: When we first encounter Nina , she is blaming her kindly old Dad for succumbing to fatherly jealousy and blocking her marriage to a handsome flying ace named Gordon , who is subsequently killed in World War I ./.
advmod(encounter-4, When-1)
nsubj(encounter-4, we-2)
advmod(encounter-4, first-3)
advcl(blaming-9, encounter-4)
dobj(encounter-4, Nina-5)
punct(blaming-9, ,-6)
nsubj(blaming-9, she-7)
aux(blaming-9, is-8)
root(ROOT-0, blaming-9)
nmod:poss(Dad-13, her-10)
advmod(old-12, kindly-11)
amod(Dad-13, old-12)
dobj(blaming-9, Dad-13)
mark(succumbing-15, for-14)
advcl(blaming-9, succumbing-15)
case(jealousy-18, to-16)
amod(jealousy-18, fatherly-17)
nmod:to(succumbing-15, jealousy-18)
cc(succumbing-15, and-19)
advcl(blaming-9, blocking-20)
conj:and(succumbing-15, blocking-20)
nmod:poss(marriage-22, her-21)
dobj(blocking-20, marriage-22)
case(ace-27, to-23)
det(ace-27, a-24)
amod(ace-27, handsome-25)
amod(ace-27, flying-26)
nmod:to(blocking-20, ace-27)
nsubjpass(killed-34, ace-27)
acl(ace-27, named-28)
xcomp(named-28, Gordon-29)
punct(ace-27, ,-30)
ref(ace-27, who-31)
auxpass(killed-34, is-32)
advmod(killed-34, subsequently-33)
acl:relcl(ace-27, killed-34)
case(I-38, in-35)
compound(I-38, World-36)
compound(I-38, War-37)
nmod:in(killed-34, I-38)
punct(blaming-9, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#ace

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: Like everyone else in this movie , he 's in the grip of his family , superstition and fear of death ; right after he asks Loretta to marry him she drops him at the airport so he can fly to Italy where his mother keeps lingering on her deathbed ./.
case(everyone-2, Like-1)
nmod:like(grip-12, everyone-2)
advmod(everyone-2, else-3)
case(movie-6, in-4)
det(movie-6, this-5)
nmod:in(everyone-2, movie-6)
punct(grip-12, ,-7)
nsubj(grip-12, he-8)
cop(grip-12, 's-9)
case(grip-12, in-10)
det(grip-12, the-11)
root(ROOT-0, grip-12)
case(family-15, of-13)
nmod:poss(family-15, his-14)
nmod:of(grip-12, family-15)
punct(family-15, ,-16)
nmod:of(grip-12, superstition-17)
conj:and(family-15, superstition-17)
cc(family-15, and-18)
nmod:of(grip-12, fear-19)
conj:and(family-15, fear-19)
case(death-21, of-20)
nmod:of(fear-19, death-21)
punct(grip-12, ;-22)
advmod(asks-26, right-23)
mark(asks-26, after-24)
nsubj(asks-26, he-25)
parataxis(grip-12, asks-26)
dobj(asks-26, Loretta-27)
nsubj:xsubj(marry-29, Loretta-27)
mark(marry-29, to-28)
xcomp(asks-26, marry-29)
dobj(marry-29, him-30)
nsubj(drops-32, she-31)
ccomp(marry-29, drops-32)
dobj(drops-32, him-33)
case(airport-36, at-34)
det(airport-36, the-35)
nmod:at(drops-32, airport-36)
mark(fly-40, so-37)
nsubj(fly-40, he-38)
aux(fly-40, can-39)
advcl(drops-32, fly-40)
case(Italy-42, to-41)
nmod:to(fly-40, Italy-42)
advmod(keeps-46, where-43)
nmod:poss(mother-45, his-44)
nsubj(keeps-46, mother-45)
acl:relcl(Italy-42, keeps-46)
xcomp(keeps-46, lingering-47)
case(deathbed-50, on-48)
nmod:poss(deathbed-50, her-49)
nmod:on(lingering-47, deathbed-50)
punct(grip-12, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#he

fly :: For the first three months of 1988 , the airline said it flew 2.95 billion revenue passenger miles , up 15.2 % from the 2.56 billion miles a year earlier ./.
case(months-5, For-1)
det(months-5, the-2)
amod(months-5, first-3)
nummod(months-5, three-4)
nmod:for(said-11, months-5)
case(1988-7, of-6)
nmod:of(months-5, 1988-7)
punct(said-11, ,-8)
det(airline-10, the-9)
nsubj(said-11, airline-10)
root(ROOT-0, said-11)
nsubj(flew-13, it-12)
ccomp(said-11, flew-13)
compound(billion-15, 2.95-14)
nummod(miles-18, billion-15)
compound(miles-18, revenue-16)
compound(miles-18, passenger-17)
dobj(flew-13, miles-18)
punct(miles-18, ,-19)
advmod(miles-18, up-20)
nummod(%-22, 15.2-21)
nmod:npmod(up-20, %-22)
case(miles-27, from-23)
det(miles-27, the-24)
compound(billion-26, 2.56-25)
nummod(miles-27, billion-26)
nmod:from(up-20, miles-27)
det(year-29, a-28)
nmod:npmod(earlier-30, year-29)
advmod(miles-27, earlier-30)
punct(said-11, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#miles

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: Air Midwest said it flew 12.7 million revenue passenger miles in February , a 5.3 % decrease from 13.4 million a year earlier ./.
compound(Midwest-2, Air-1)
nsubj(said-3, Midwest-2)
root(ROOT-0, said-3)
nsubj(flew-5, it-4)
ccomp(said-3, flew-5)
compound(million-7, 12.7-6)
nummod(miles-10, million-7)
compound(miles-10, revenue-8)
compound(miles-10, passenger-9)
dobj(flew-5, miles-10)
case(February-12, in-11)
nmod:in(flew-5, February-12)
punct(February-12, ,-13)
det(decrease-17, a-14)
compound(%-16, 5.3-15)
amod(decrease-17, %-16)
appos(February-12, decrease-17)
case(million-20, from-18)
compound(million-20, 13.4-19)
nmod:from(decrease-17, million-20)
det(year-22, a-21)
nmod:npmod(earlier-23, year-22)
advmod(million-20, earlier-23)
punct(said-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#miles

fly :: Mr. Paulson also flew over China ./.
compound(Paulson-2, Mr.-1)
nsubj(flew-4, Paulson-2)
advmod(flew-4, also-3)
root(ROOT-0, flew-4)
case(China-6, over-5)
nmod:over(flew-4, China-6)
punct(flew-4, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#paulson

fly :: It said the U.S. is prepared to rule out other routes that would fly over land in the U.S. or Canada `` except in the case of aircraft emergency . ''/''
nsubj(said-2, It-1)
root(ROOT-0, said-2)
det(U.S.-4, the-3)
nsubjpass(prepared-6, U.S.-4)
nsubj:xsubj(rule-8, U.S.-4)
auxpass(prepared-6, is-5)
ccomp(said-2, prepared-6)
mark(rule-8, to-7)
xcomp(prepared-6, rule-8)
compound:prt(rule-8, out-9)
amod(routes-11, other-10)
dobj(rule-8, routes-11)
nsubj(fly-14, routes-11)
ref(routes-11, that-12)
aux(fly-14, would-13)
acl:relcl(routes-11, fly-14)
case(land-16, over-15)
nmod:over(fly-14, land-16)
case(U.S.-19, in-17)
det(U.S.-19, the-18)
nmod:in(fly-14, U.S.-19)
cc(U.S.-19, or-20)
nmod:in(fly-14, Canada-21)
conj:or(U.S.-19, Canada-21)
punct(fly-14, ``-22)
case(case-26, except-23)
case(case-26, in-24)
det(case-26, the-25)
nmod:in(fly-14, case-26)
case(emergency-29, of-27)
compound(emergency-29, aircraft-28)
nmod:of(case-26, emergency-29)
punct(said-2, .-30)
punct(said-2, ''-31)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fly#routes

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: `` It takes time to move them through the training and to get them ready to fly . ''/''
root(ROOT-0, ``-1)
nsubj(takes-3, It-2)
root(``-1, takes-3)
dobj(takes-3, time-4)
mark(move-6, to-5)
advcl(takes-3, move-6)
dobj(move-6, them-7)
case(training-10, through-8)
det(training-10, the-9)
nmod:through(move-6, training-10)
cc(move-6, and-11)
mark(get-13, to-12)
advcl(takes-3, get-13)
conj:and(move-6, get-13)
nsubj(ready-15, them-14)
nsubj:xsubj(fly-17, them-14)
xcomp(get-13, ready-15)
mark(fly-17, to-16)
xcomp(ready-15, fly-17)
punct(takes-3, .-18)
punct(takes-3, ''-19)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fly#them

fly :: The other two aircraft will seat 150 people and fly 7 , 200 miles ./.
det(aircraft-4, The-1)
amod(aircraft-4, other-2)
nummod(aircraft-4, two-3)
nsubj(seat-6, aircraft-4)
nsubj(fly-10, aircraft-4)
aux(seat-6, will-5)
root(ROOT-0, seat-6)
nummod(people-8, 150-7)
dobj(seat-6, people-8)
cc(seat-6, and-9)
conj:and(seat-6, fly-10)
dobj(fly-10, 7-11)
punct(7-11, ,-12)
nummod(miles-14, 200-13)
appos(7-11, miles-14)
punct(seat-6, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#7

fly :: Cats can fly ./.
nsubj(fly-3, Cats-1)
aux(fly-3, can-2)
root(ROOT-0, fly-3)
punct(fly-3, .-4)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#cats

fly :: A revenue passenger mile is one paying passenger flown one mile ./.
det(mile-4, A-1)
compound(mile-4, revenue-2)
compound(mile-4, passenger-3)
nsubj(one-6, mile-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
acl(one-6, paying-7)
dobj(paying-7, passenger-8)
acl(one-6, flown-9)
nummod(mile-11, one-10)
dobj(flown-9, mile-11)
punct(one-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: USAir , a unit of USAir Group Inc . , said its December traffic rose 14.2 % to 1.11 billion revenue passenger miles from the year-earlier 972.5 million revenue passenger miles , or one paying passenger flown one mile ./.
root(ROOT-0, USAir-1)
punct(USAir-1, ,-2)
det(unit-4, a-3)
appos(USAir-1, unit-4)
case(Inc-8, of-5)
compound(Inc-8, USAir-6)
compound(Inc-8, Group-7)
nmod:of(unit-4, Inc-8)
punct(USAir-1, .-9)
punct(said-2, ,-1)
root(ROOT-0, said-2)
nmod:poss(traffic-5, its-3)
compound(traffic-5, December-4)
nsubj(rose-6, traffic-5)
ccomp(said-2, rose-6)
nummod(%-8, 14.2-7)
dobj(rose-6, %-8)
case(miles-14, to-9)
compound(billion-11, 1.11-10)
nummod(miles-14, billion-11)
compound(miles-14, revenue-12)
compound(miles-14, passenger-13)
nmod:to(rose-6, miles-14)
case(miles-22, from-15)
det(miles-22, the-16)
amod(miles-22, year-earlier-17)
compound(million-19, 972.5-18)
nummod(miles-22, million-19)
compound(miles-22, revenue-20)
compound(miles-22, passenger-21)
nmod:from(rose-6, miles-22)
punct(miles-22, ,-23)
cc(miles-22, or-24)
nsubj(flown-28, one-25)
acl(one-25, paying-26)
dobj(paying-26, passenger-27)
nmod:from(rose-6, flown-28)
conj:or(miles-22, flown-28)
nummod(mile-30, one-29)
dobj(flown-28, mile-30)
punct(said-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mile

fly :: Others fly them out as personal luggage ./.
nsubj(fly-2, Others-1)
root(ROOT-0, fly-2)
dobj(fly-2, them-3)
compound:prt(fly-2, out-4)
case(luggage-7, as-5)
amod(luggage-7, personal-6)
nmod:as(fly-2, luggage-7)
punct(fly-2, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#them

fly :: He flew off in one of his three 707s for long weekends in places like Australia with people like John and Bo Derek ./.
nsubj(flew-2, He-1)
root(ROOT-0, flew-2)
advmod(flew-2, off-3)
case(one-5, in-4)
nmod:in(flew-2, one-5)
case(707s-9, of-6)
nmod:poss(707s-9, his-7)
nummod(707s-9, three-8)
nmod:of(one-5, 707s-9)
case(weekends-12, for-10)
amod(weekends-12, long-11)
nmod:for(707s-9, weekends-12)
case(places-14, in-13)
nmod:in(weekends-12, places-14)
case(Australia-16, like-15)
nmod:like(places-14, Australia-16)
case(people-18, with-17)
nmod:with(places-14, people-18)
case(John-20, like-19)
nmod:like(people-18, John-20)
cc(John-20, and-21)
compound(Derek-23, Bo-22)
nmod:like(people-18, Derek-23)
conj:and(John-20, Derek-23)
punct(flew-2, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#he

fly :: Chairs fly , Geraldo is bloodied , the governor is yelling `` outta my face , Noriega-breath ! `` while the vice president screams `` Read my lips , liberal man ! `` -RRB-/-RRB-
nsubj(fly-2, Chairs-1)
root(ROOT-0, fly-2)
punct(fly-2, ,-3)
nsubjpass(bloodied-6, Geraldo-4)
auxpass(bloodied-6, is-5)
ccomp(fly-2, bloodied-6)
punct(fly-2, ,-7)
det(governor-9, the-8)
nsubj(yelling-11, governor-9)
aux(yelling-11, is-10)
parataxis(fly-2, yelling-11)
punct(yelling-11, ``-12)
compound(face-15, outta-13)
nmod:poss(face-15, my-14)
dobj(yelling-11, face-15)
punct(face-15, ,-16)
appos(face-15, Noriega-breath-17)
punct(fly-2, !-18)
root(ROOT-0, ``-1)
mark(screams-6, while-2)
det(president-5, the-3)
compound(president-5, vice-4)
nsubj(screams-6, president-5)
root(``-1, screams-6)
punct(Read-8, ``-7)
ccomp(screams-6, Read-8)
nmod:poss(lips-10, my-9)
dobj(Read-8, lips-10)
punct(Read-8, ,-11)
amod(man-13, liberal-12)
dobj(Read-8, man-13)
punct(screams-6, !-14)
root(ROOT-0, ``-1)
root(``-1, -RRB--2)
root(-RRB--2, /-3)
punct(/-3, -RRB--4)
Return str :: fly#chairs

fly :: It even regulates where kites can be flown and how candy should be displayed in markets -- and fines offenders ./.
nsubj(regulates-3, It-1)
advmod(regulates-3, even-2)
root(ROOT-0, regulates-3)
advmod(flown-8, where-4)
nsubjpass(flown-8, kites-5)
aux(flown-8, can-6)
auxpass(flown-8, be-7)
ccomp(regulates-3, flown-8)
cc(flown-8, and-9)
advmod(displayed-14, how-10)
nsubjpass(displayed-14, candy-11)
aux(displayed-14, should-12)
auxpass(displayed-14, be-13)
ccomp(regulates-3, displayed-14)
conj:and(flown-8, displayed-14)
case(markets-16, in-15)
nmod:in(displayed-14, markets-16)
punct(flown-8, ---17)
cc(flown-8, and-18)
compound(offenders-20, fines-19)
ccomp(regulates-3, offenders-20)
conj:and(flown-8, offenders-20)
punct(regulates-3, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#kites

fly :: They included fixtures required by the company and the salaries and expenses of four assemblers who flew in from Italy to set up the store ./.
nsubj(included-2, They-1)
root(ROOT-0, included-2)
dobj(included-2, fixtures-3)
acl(fixtures-3, required-4)
case(company-7, by-5)
det(company-7, the-6)
nmod:by(required-4, company-7)
cc(company-7, and-8)
det(salaries-10, the-9)
nmod:by(required-4, salaries-10)
conj:and(company-7, salaries-10)
cc(salaries-10, and-11)
conj:and(company-7, expenses-12)
conj:and(salaries-10, expenses-12)
case(assemblers-15, of-13)
nummod(assemblers-15, four-14)
nmod:of(salaries-10, assemblers-15)
nsubj(flew-17, assemblers-15)
ref(assemblers-15, who-16)
acl:relcl(assemblers-15, flew-17)
compound:prt(flew-17, in-18)
case(Italy-20, from-19)
nmod:from(flew-17, Italy-20)
mark(set-22, to-21)
advcl(flew-17, set-22)
compound:prt(set-22, up-23)
det(store-25, the-24)
dobj(set-22, store-25)
punct(included-2, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#assemblers

fly :: When a triumphant Michael Dukakis flew to Erie from the Democratic National Convention in July , they lined the exit from the airport and Perry Square downtown with signs -- not handmade but professionally printed -- saying `` Dukakis Wants Taxes For Abortion . ''/''
advmod(flew-6, When-1)
det(Dukakis-5, a-2)
amod(Dukakis-5, triumphant-3)
compound(Dukakis-5, Michael-4)
nsubj(flew-6, Dukakis-5)
advcl(lined-18, flew-6)
case(Erie-8, to-7)
nmod:to(flew-6, Erie-8)
case(Convention-13, from-9)
det(Convention-13, the-10)
amod(Convention-13, Democratic-11)
compound(Convention-13, National-12)
nmod:from(flew-6, Convention-13)
case(July-15, in-14)
nmod:in(flew-6, July-15)
punct(lined-18, ,-16)
nsubj(lined-18, they-17)
root(ROOT-0, lined-18)
det(exit-20, the-19)
dobj(lined-18, exit-20)
case(airport-23, from-21)
det(airport-23, the-22)
nmod:from(lined-18, airport-23)
cc(airport-23, and-24)
compound(downtown-27, Perry-25)
compound(downtown-27, Square-26)
nmod:from(lined-18, downtown-27)
conj:and(airport-23, downtown-27)
case(signs-29, with-28)
nmod:with(lined-18, signs-29)
punct(handmade-32, ---30)
neg(handmade-32, not-31)
dep(signs-29, handmade-32)
cc(handmade-32, but-33)
advmod(printed-35, professionally-34)
dep(signs-29, printed-35)
conj:but(handmade-32, printed-35)
punct(handmade-32, ---36)
acl(signs-29, saying-37)
punct(Wants-40, ``-38)
nsubj(Wants-40, Dukakis-39)
ccomp(saying-37, Wants-40)
dobj(Wants-40, Taxes-41)
case(Abortion-43, For-42)
nmod:for(Wants-40, Abortion-43)
punct(lined-18, .-44)
punct(lined-18, ''-45)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: fly#dukakis

fly :: Flying to Slovenia from the Yugoslav south is n't unlike flying to the Midwest from the Mideast ./.
csubj(flying-11, Flying-1)
case(Slovenia-3, to-2)
nmod:to(Flying-1, Slovenia-3)
case(south-7, from-4)
det(south-7, the-5)
compound(south-7, Yugoslav-6)
nmod:from(Flying-1, south-7)
cop(flying-11, is-8)
neg(flying-11, n't-9)
mark(flying-11, unlike-10)
root(ROOT-0, flying-11)
case(Midwest-14, to-12)
det(Midwest-14, the-13)
nmod:to(flying-11, Midwest-14)
case(Mideast-17, from-15)
det(Mideast-17, the-16)
nmod:from(Midwest-14, Mideast-17)
punct(flying-11, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#slovenia

fly :: Shortly after Mr. Bush 's solo appearance , GOP strategists hastily arranged for Mr. Quayle to fly here from Washington to address the VFW banquet last night ./.
advmod(appearance-7, Shortly-1)
case(appearance-7, after-2)
compound(Bush-4, Mr.-3)
nmod:poss(appearance-7, Bush-4)
case(Bush-4, 's-5)
compound(appearance-7, solo-6)
nmod:after(arranged-12, appearance-7)
punct(arranged-12, ,-8)
compound(strategists-10, GOP-9)
nsubj(arranged-12, strategists-10)
advmod(arranged-12, hastily-11)
root(ROOT-0, arranged-12)
mark(fly-17, for-13)
compound(Quayle-15, Mr.-14)
nsubj(fly-17, Quayle-15)
nsubj:xsubj(address-22, Quayle-15)
mark(fly-17, to-16)
advcl(arranged-12, fly-17)
advmod(fly-17, here-18)
case(Washington-20, from-19)
nmod:from(fly-17, Washington-20)
mark(address-22, to-21)
xcomp(fly-17, address-22)
det(banquet-25, the-23)
compound(banquet-25, VFW-24)
dobj(address-22, banquet-25)
amod(night-27, last-26)
nmod:tmod(address-22, night-27)
punct(arranged-12, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#quayle

fly :: As usual , Ms. Larsen strove to avoid the obvious by focusing on her emotional response rather than the natural phenomenon itself: `` I want to give the listener not the sound of a bird as much as the feeling of flying . ''/''
case(usual-2, As-1)
nmod:as(strove-6, usual-2)
punct(strove-6, ,-3)
compound(Larsen-5, Ms.-4)
nsubj(strove-6, Larsen-5)
nsubj:xsubj(avoid-8, Larsen-5)
root(ROOT-0, strove-6)
mark(avoid-8, to-7)
xcomp(strove-6, avoid-8)
det(obvious-10, the-9)
dobj(avoid-8, obvious-10)
mark(focusing-12, by-11)
advcl(avoid-8, focusing-12)
case(response-16, on-13)
nmod:poss(response-16, her-14)
amod(response-16, emotional-15)
nmod:on(focusing-12, response-16)
cc(response-16, rather-17)
mwe(rather-17, than-18)
det(phenomenon-21, the-19)
amod(phenomenon-21, natural-20)
nmod:on(focusing-12, phenomenon-21)
conj:negcc(response-16, phenomenon-21)
nmod:npmod(phenomenon-21, itself-22)
punct(strove-6, :-23)
punct(strove-6, ``-24)
nsubj(want-26, I-25)
nsubj:xsubj(give-28, I-25)
ccomp(strove-6, want-26)
mark(give-28, to-27)
xcomp(want-26, give-28)
det(listener-30, the-29)
dobj(give-28, listener-30)
neg(sound-33, not-31)
det(sound-33, the-32)
nmod(give-28, sound-33)
case(bird-36, of-34)
det(bird-36, a-35)
nmod:of(sound-33, bird-36)
advmod(much-38, as-37)
advmod(sound-33, much-38)
case(feeling-41, as-39)
det(feeling-41, the-40)
nmod:as(much-38, feeling-41)
mark(flying-43, of-42)
acl(feeling-41, flying-43)
punct(strove-6, .-44)
punct(strove-6, ''-45)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

fly :: The locust-control organization said five swarms were seen flying near Asmara , capital of Eritrea , between July 21 and 24 ./.
det(organization-3, The-1)
amod(organization-3, locust-control-2)
nsubj(said-4, organization-3)
root(ROOT-0, said-4)
nummod(swarms-6, five-5)
nsubjpass(seen-8, swarms-6)
auxpass(seen-8, were-7)
ccomp(said-4, seen-8)
xcomp(seen-8, flying-9)
case(Asmara-11, near-10)
nmod:near(flying-9, Asmara-11)
punct(Asmara-11, ,-12)
appos(Asmara-11, capital-13)
case(Eritrea-15, of-14)
nmod:of(capital-13, Eritrea-15)
punct(Asmara-11, ,-16)
case(July-18, between-17)
nmod:between(flying-9, July-18)
nummod(July-18, 21-19)
cc(July-18, and-20)
nmod:between(flying-9, 24-21)
conj:and(July-18, 24-21)
punct(said-4, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#asmara

fly :: Hawaiians welcome long weekends to fly to the mainland ; `` I 've done it myself , '' says Fidencio Mares , a vice president of Pacific Resources , Honolulu ./.
compound(weekends-4, Hawaiians-1)
amod(weekends-4, welcome-2)
amod(weekends-4, long-3)
nsubj(says-19, weekends-4)
mark(fly-6, to-5)
acl(weekends-4, fly-6)
case(mainland-9, to-7)
det(mainland-9, the-8)
nmod:to(fly-6, mainland-9)
punct(weekends-4, ;-10)
punct(weekends-4, ``-11)
nsubj(done-14, I-12)
aux(done-14, 've-13)
dep(weekends-4, done-14)
dobj(done-14, it-15)
nmod:npmod(done-14, myself-16)
punct(weekends-4, ,-17)
punct(weekends-4, ''-18)
root(ROOT-0, says-19)
compound(Mares-21, Fidencio-20)
nsubj(says-19, Mares-21)
punct(Mares-21, ,-22)
det(president-25, a-23)
compound(president-25, vice-24)
appos(Mares-21, president-25)
case(Resources-28, of-26)
compound(Resources-28, Pacific-27)
nmod:of(president-25, Resources-28)
punct(Resources-28, ,-29)
appos(Resources-28, Honolulu-30)
punct(says-19, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#mainland

fly :: And party chairman Paul Kirk never bothered to call him at all on Tuesday , Mr. Jackson 's aides say , though he could find the time to fly to Boston to extol Mr. Bentsen ./.
cc(bothered-7, And-1)
compound(Kirk-5, party-2)
compound(Kirk-5, chairman-3)
compound(Kirk-5, Paul-4)
nsubj(bothered-7, Kirk-5)
nsubj:xsubj(call-9, Kirk-5)
neg(bothered-7, never-6)
ccomp(say-20, bothered-7)
mark(call-9, to-8)
xcomp(bothered-7, call-9)
dobj(call-9, him-10)
case(all-12, at-11)
nmod:at(call-9, all-12)
case(Tuesday-14, on-13)
nmod:on(call-9, Tuesday-14)
punct(say-20, ,-15)
compound(Jackson-17, Mr.-16)
nmod:poss(aides-19, Jackson-17)
case(Jackson-17, 's-18)
nsubj(say-20, aides-19)
root(ROOT-0, say-20)
punct(say-20, ,-21)
mark(find-25, though-22)
nsubj(find-25, he-23)
aux(find-25, could-24)
advcl(say-20, find-25)
det(time-27, the-26)
dobj(find-25, time-27)
mark(fly-29, to-28)
acl(time-27, fly-29)
case(Boston-31, to-30)
nmod:to(fly-29, Boston-31)
mark(extol-33, to-32)
xcomp(fly-29, extol-33)
compound(Bentsen-35, Mr.-34)
dobj(extol-33, Bentsen-35)
punct(say-20, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#boston

fly :: Armand Hammer , chairman of Occidental , planned to fly to Scotland to check out the situation for himself ./.
compound(Hammer-2, Armand-1)
nsubj(planned-8, Hammer-2)
nsubj:xsubj(fly-10, Hammer-2)
punct(Hammer-2, ,-3)
appos(Hammer-2, chairman-4)
case(Occidental-6, of-5)
nmod:of(chairman-4, Occidental-6)
punct(Hammer-2, ,-7)
root(ROOT-0, planned-8)
mark(fly-10, to-9)
xcomp(planned-8, fly-10)
case(Scotland-12, to-11)
nmod:to(fly-10, Scotland-12)
mark(check-14, to-13)
xcomp(fly-10, check-14)
compound:prt(check-14, out-15)
det(situation-17, the-16)
dobj(check-14, situation-17)
case(himself-19, for-18)
nmod:for(situation-17, himself-19)
punct(planned-8, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#hammer

fly :: Poor Roger , however , gets zapped and bammed and splatted over and over again , ending up on the floor with little birds flying around his head ./.
amod(Roger-2, Poor-1)
nsubjpass(zapped-7, Roger-2)
nsubjpass(bammed-9, Roger-2)
nsubjpass(splatted-11, Roger-2)
punct(zapped-7, ,-3)
advmod(zapped-7, however-4)
punct(zapped-7, ,-5)
auxpass(zapped-7, gets-6)
root(ROOT-0, zapped-7)
cc(zapped-7, and-8)
conj:and(zapped-7, bammed-9)
cc(zapped-7, and-10)
conj:and(zapped-7, splatted-11)
conj:and(zapped-7, splatted-11')
conj:and(splatted-11, splatted-11')
case(again-15, over-12)
cc(over-12, and-13)
conj:and(over-12, over-14)
nmod:over(splatted-11, again-15)
nmod:over(splatted-11', again-15)
punct(zapped-7, ,-16)
advcl(zapped-7, ending-17)
compound:prt(ending-17, up-18)
case(floor-21, on-19)
det(floor-21, the-20)
nmod:on(ending-17, floor-21)
case(birds-24, with-22)
amod(birds-24, little-23)
nmod:with(ending-17, birds-24)
acl(birds-24, flying-25)
case(head-28, around-26)
nmod:poss(head-28, his-27)
nmod:around(flying-25, head-28)
punct(zapped-7, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#head

fly :: But I think it would be wise for all Americans to remember that the British were ruthless colonial masters wherever the Union Jack flew . -LRB- We fought the Revolutionary War over the issue. -RRB-/-RRB-
cc(think-3, But-1)
nsubj(think-3, I-2)
root(ROOT-0, think-3)
nsubj(wise-7, it-4)
aux(wise-7, would-5)
cop(wise-7, be-6)
ccomp(think-3, wise-7)
mark(remember-12, for-8)
det(Americans-10, all-9)
nsubj(remember-12, Americans-10)
mark(remember-12, to-11)
advcl(wise-7, remember-12)
mark(masters-19, that-13)
det(British-15, the-14)
nsubj(masters-19, British-15)
cop(masters-19, were-16)
amod(masters-19, ruthless-17)
compound(masters-19, colonial-18)
ccomp(remember-12, masters-19)
advmod(flew-24, wherever-20)
det(Jack-23, the-21)
compound(Jack-23, Union-22)
nsubj(flew-24, Jack-23)
acl:relcl(masters-19, flew-24)
punct(think-3, .-25)
punct(fought-3, -LRB--1)
nsubj(fought-3, We-2)
root(ROOT-0, fought-3)
det(War-6, the-4)
amod(War-6, Revolutionary-5)
dobj(fought-3, War-6)
case(issue-9, over-7)
det(issue-9, the-8)
nmod:over(fought-3, issue-9)
punct(fought-3, .-10)
punct(fought-3, -RRB--11)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: fly#jack

fly :: Next it flew them -- in its corporate jet and accompanied by the company 's chairman , Joseph Williams -- to Anaheim , Calif . , where they spoke to a big cardiologists ' meeting ./.
mark(flew-3, Next-1)
nsubj(flew-3, it-2)
root(ROOT-0, flew-3)
dobj(flew-3, them-4)
punct(jet-9, ---5)
case(jet-9, in-6)
nmod:poss(jet-9, its-7)
amod(jet-9, corporate-8)
nmod:in(flew-3, jet-9)
cc(jet-9, and-10)
nmod:in(flew-3, accompanied-11)
conj:and(jet-9, accompanied-11)
case(chairman-16, by-12)
det(company-14, the-13)
nmod:poss(chairman-16, company-14)
case(company-14, 's-15)
nmod:by(accompanied-11, chairman-16)
punct(chairman-16, ,-17)
compound(Williams-19, Joseph-18)
appos(chairman-16, Williams-19)
punct(chairman-16, ---20)
case(Anaheim-22, to-21)
nmod:to(accompanied-11, Anaheim-22)
punct(Anaheim-22, ,-23)
appos(Anaheim-22, Calif-24)
punct(flew-3, .-25)
root(ROOT-0, ,-1)
advmod(spoke-4, where-2)
nsubj(spoke-4, they-3)
root(,-1, spoke-4)
case(meeting-10, to-5)
det(cardiologists-8, a-6)
amod(cardiologists-8, big-7)
nmod:poss(meeting-10, cardiologists-8)
case(cardiologists-8, '-9)
nmod:to(spoke-4, meeting-10)
punct(spoke-4, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#them

fly :: He is now economic adviser to Said bin Ahmed Al-Shanfari , the oil minister of Oman -- a role for which he was handpicked by Mr. Deuss , who flew him to Oman to introduce him to Mr. Al-Shanfari ./.
nsubj(adviser-5, He-1)
cop(adviser-5, is-2)
advmod(adviser-5, now-3)
amod(adviser-5, economic-4)
root(ROOT-0, adviser-5)
mark(Said-7, to-6)
acl(adviser-5, Said-7)
compound(Al-Shanfari-10, bin-8)
compound(Al-Shanfari-10, Ahmed-9)
dobj(Said-7, Al-Shanfari-10)
punct(Al-Shanfari-10, ,-11)
det(minister-14, the-12)
compound(minister-14, oil-13)
appos(Al-Shanfari-10, minister-14)
case(Oman-16, of-15)
nmod:of(minister-14, Oman-16)
punct(Al-Shanfari-10, ---17)
det(role-19, a-18)
dep(Al-Shanfari-10, role-19)
nmod:for(handpicked-24, role-19)
case(which-21, for-20)
ref(role-19, which-21)
nsubjpass(handpicked-24, he-22)
auxpass(handpicked-24, was-23)
acl:relcl(role-19, handpicked-24)
case(Deuss-27, by-25)
compound(Deuss-27, Mr.-26)
nmod:agent(handpicked-24, Deuss-27)
nsubj(flew-30, Deuss-27)
punct(Deuss-27, ,-28)
ref(Deuss-27, who-29)
acl:relcl(Deuss-27, flew-30)
dobj(flew-30, him-31)
case(Oman-33, to-32)
nmod:to(flew-30, Oman-33)
mark(introduce-35, to-34)
advcl(flew-30, introduce-35)
dobj(introduce-35, him-36)
case(Al-Shanfari-39, to-37)
compound(Al-Shanfari-39, Mr.-38)
nmod:to(introduce-35, Al-Shanfari-39)
punct(adviser-5, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#him

fly :: The Navy , which began flying the A-6 in 1963 , has 340 in service and is buying more ./.
det(Navy-2, The-1)
nsubj(began-5, Navy-2)
nsubj(has-12, Navy-2)
nsubj(buying-18, Navy-2)
punct(Navy-2, ,-3)
ref(Navy-2, which-4)
acl:relcl(Navy-2, began-5)
xcomp(began-5, flying-6)
det(A-6-8, the-7)
dobj(flying-6, A-6-8)
case(1963-10, in-9)
nmod:in(flying-6, 1963-10)
punct(Navy-2, ,-11)
root(ROOT-0, has-12)
dobj(has-12, 340-13)
case(service-15, in-14)
nmod:in(340-13, service-15)
cc(has-12, and-16)
aux(buying-18, is-17)
conj:and(has-12, buying-18)
dobj(buying-18, more-19)
punct(has-12, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#a-6

fly :: Secretary of State Shultz recently flew to Geneva , for example , to `` resolve ambiguities '' over INF verification ./.
nsubj(resolve-15, Secretary-1)
case(State-3, of-2)
nmod:of(Secretary-1, State-3)
nsubj(flew-6, Shultz-4)
advmod(flew-6, recently-5)
acl:relcl(Secretary-1, flew-6)
case(Geneva-8, to-7)
nmod:to(flew-6, Geneva-8)
punct(resolve-15, ,-9)
case(example-11, for-10)
nmod:for(resolve-15, example-11)
punct(resolve-15, ,-12)
mark(resolve-15, to-13)
punct(resolve-15, ``-14)
root(ROOT-0, resolve-15)
dobj(resolve-15, ambiguities-16)
punct(ambiguities-16, ''-17)
case(verification-20, over-18)
compound(verification-20, INF-19)
nmod:over(ambiguities-16, verification-20)
punct(resolve-15, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#shultz

fly :: Seeking new tactics , Mr. Corella last summer flew to the Philippines to meet leaders of the popular uprising that ousted the Marcos regime in 1986 ./.
advcl(flew-9, Seeking-1)
amod(tactics-3, new-2)
dobj(Seeking-1, tactics-3)
punct(flew-9, ,-4)
compound(Corella-6, Mr.-5)
nsubj(flew-9, Corella-6)
nsubj:xsubj(meet-14, Corella-6)
amod(summer-8, last-7)
nmod:tmod(flew-9, summer-8)
root(ROOT-0, flew-9)
case(Philippines-12, to-10)
det(Philippines-12, the-11)
nmod:to(flew-9, Philippines-12)
mark(meet-14, to-13)
xcomp(flew-9, meet-14)
dobj(meet-14, leaders-15)
case(uprising-19, of-16)
det(uprising-19, the-17)
amod(uprising-19, popular-18)
nmod:of(leaders-15, uprising-19)
nsubj(ousted-21, uprising-19)
ref(uprising-19, that-20)
acl:relcl(uprising-19, ousted-21)
det(regime-24, the-22)
compound(regime-24, Marcos-23)
dobj(ousted-21, regime-24)
case(1986-26, in-25)
nmod:in(ousted-21, 1986-26)
punct(flew-9, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#corella

fly :: For example , investigators learned that the takeoff warning sounded when the crew landed in Saginaw , Mich . , before flying on to Detroit ./.
case(example-2, For-1)
nmod:for(learned-5, example-2)
punct(learned-5, ,-3)
nsubj(learned-5, investigators-4)
root(ROOT-0, learned-5)
mark(sounded-10, that-6)
det(warning-9, the-7)
compound(warning-9, takeoff-8)
nsubj(sounded-10, warning-9)
ccomp(learned-5, sounded-10)
advmod(landed-14, when-11)
det(crew-13, the-12)
nsubj(landed-14, crew-13)
advcl(sounded-10, landed-14)
case(Saginaw-16, in-15)
nmod:in(landed-14, Saginaw-16)
punct(Saginaw-16, ,-17)
appos(Saginaw-16, Mich-18)
punct(learned-5, .-19)
root(ROOT-0, ,-1)
mark(flying-3, before-2)
root(,-1, flying-3)
compound:prt(flying-3, on-4)
case(Detroit-6, to-5)
nmod:to(flying-3, Detroit-6)
punct(flying-3, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#detroit

fly :: He had heard that on a corner of Nellis Air Force Base nearby , a squadron of Stealth fighters was housed in hangars during the day , out of sight of Soviet satellites , and flown only at night ./.
nsubj(heard-3, He-1)
aux(heard-3, had-2)
root(ROOT-0, heard-3)
dobj(heard-3, that-4)
case(corner-7, on-5)
det(corner-7, a-6)
nmod:on(that-4, corner-7)
case(Base-12, of-8)
compound(Base-12, Nellis-9)
compound(Base-12, Air-10)
compound(Base-12, Force-11)
nmod:of(corner-7, Base-12)
advmod(housed-21, nearby-13)
punct(housed-21, ,-14)
det(squadron-16, a-15)
nsubjpass(housed-21, squadron-16)
case(fighters-19, of-17)
compound(fighters-19, Stealth-18)
nmod:of(squadron-16, fighters-19)
auxpass(housed-21, was-20)
acl(corner-7, housed-21)
case(hangars-23, in-22)
nmod:in(housed-21, hangars-23)
case(day-26, during-24)
det(day-26, the-25)
nmod:during(housed-21, day-26)
punct(corner-7, ,-27)
case(sight-30, out-28)
mwe(out-28, of-29)
root(,-27, sight-30)
case(satellites-33, of-31)
amod(satellites-33, Soviet-32)
nmod:of(sight-30, satellites-33)
punct(sight-30, ,-34)
cc(sight-30, and-35)
root(,-27, flown-36)
conj:and(sight-30, flown-36)
advmod(night-39, only-37)
case(night-39, at-38)
nmod:at(flown-36, night-39)
punct(sight-30, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#night

fly :: Those convoys currently protect only Kuwaiti tankers flying U.S. flags , but in Washington , Pentagon officials are discussing whether to extend protection to all neutral ships ./.
det(convoys-2, Those-1)
nsubj(protect-4, convoys-2)
advmod(protect-4, currently-3)
root(ROOT-0, protect-4)
advmod(tankers-7, only-5)
amod(tankers-7, Kuwaiti-6)
nummod(flags-10, tankers-7)
amod(flags-10, flying-8)
compound(flags-10, U.S.-9)
dobj(protect-4, flags-10)
punct(protect-4, ,-11)
cc(protect-4, but-12)
case(Washington-14, in-13)
nmod:in(discussing-19, Washington-14)
punct(discussing-19, ,-15)
compound(officials-17, Pentagon-16)
nsubj(discussing-19, officials-17)
aux(discussing-19, are-18)
conj:but(protect-4, discussing-19)
mark(extend-22, whether-20)
mark(extend-22, to-21)
ccomp(discussing-19, extend-22)
dobj(extend-22, protection-23)
case(ships-27, to-24)
det(ships-27, all-25)
amod(ships-27, neutral-26)
nmod:to(extend-22, ships-27)
punct(protect-4, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#flags

fly :: In Washington , where both the film and the feast opened last week to rave reviews , Chef Yannick Cam of Le Pavillon had to fly in fresh black truffles -- at $ 335 a pound -- from France ./.
case(Washington-2, In-1)
nmod:in(had-24, Washington-2)
punct(Washington-2, ,-3)
advmod(opened-11, where-4)
cc:preconj(film-7, both-5)
det(film-7, the-6)
nsubj(opened-11, film-7)
nsubj:xsubj(rave-15, film-7)
cc(film-7, and-8)
det(feast-10, the-9)
conj:and(film-7, feast-10)
nsubj(opened-11, feast-10)
nsubj:xsubj(rave-15, feast-10)
acl:relcl(Washington-2, opened-11)
amod(week-13, last-12)
nmod:tmod(opened-11, week-13)
mark(rave-15, to-14)
xcomp(opened-11, rave-15)
dobj(rave-15, reviews-16)
punct(had-24, ,-17)
compound(Cam-20, Chef-18)
compound(Cam-20, Yannick-19)
nsubj(had-24, Cam-20)
nsubj:xsubj(fly-26, Cam-20)
case(Pavillon-23, of-21)
compound(Pavillon-23, Le-22)
nmod:of(Cam-20, Pavillon-23)
root(ROOT-0, had-24)
mark(fly-26, to-25)
xcomp(had-24, fly-26)
case(truffles-30, in-27)
amod(truffles-30, fresh-28)
amod(truffles-30, black-29)
nmod:in(fly-26, truffles-30)
punct(fly-26, ---31)
case(335-34, at-32)
dep(335-34, $-33)
nmod:at(fly-26, 335-34)
det(pound-36, a-35)
nmod:npmod(335-34, pound-36)
punct(fly-26, ---37)
case(France-39, from-38)
nmod:from(fly-26, France-39)
punct(had-24, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: fly#cam

grab :: Meanwhile , the discounters and specialty stores that have grabbed sales from Sears in recent years are n't likely to stand still while it tries to catch up ./.
advmod(likely-19, Meanwhile-1)
punct(likely-19, ,-2)
det(discounters-4, the-3)
nsubj(grabbed-10, discounters-4)
nsubj(likely-19, discounters-4)
nsubj:xsubj(stand-21, discounters-4)
cc(discounters-4, and-5)
compound(stores-7, specialty-6)
conj:and(discounters-4, stores-7)
nsubj(grabbed-10, stores-7)
nsubj(likely-19, stores-7)
nsubj:xsubj(stand-21, stores-7)
ref(discounters-4, that-8)
aux(grabbed-10, have-9)
acl:relcl(discounters-4, grabbed-10)
dobj(grabbed-10, sales-11)
case(Sears-13, from-12)
nmod:from(grabbed-10, Sears-13)
case(years-16, in-14)
amod(years-16, recent-15)
nmod:in(grabbed-10, years-16)
cop(likely-19, are-17)
neg(likely-19, n't-18)
root(ROOT-0, likely-19)
mark(stand-21, to-20)
xcomp(likely-19, stand-21)
advmod(stand-21, still-22)
mark(tries-25, while-23)
nsubj(tries-25, it-24)
nsubj:xsubj(catch-27, it-24)
advcl(stand-21, tries-25)
mark(catch-27, to-26)
xcomp(tries-25, catch-27)
compound:prt(catch-27, up-28)
punct(likely-19, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#sales

grab :: So far , no one is grabbing the first Concorde out ./.
advmod(far-2, So-1)
advmod(grabbing-7, far-2)
punct(grabbing-7, ,-3)
neg(one-5, no-4)
nsubj(grabbing-7, one-5)
aux(grabbing-7, is-6)
root(ROOT-0, grabbing-7)
det(Concorde-10, the-8)
amod(Concorde-10, first-9)
dobj(grabbing-7, Concorde-10)
compound:prt(grabbing-7, out-11)
punct(grabbing-7, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#concorde

grab :: `` Competitors are kept out , and carters ' costs are kept down , '' says Mr. Kossler , who testified publicly in 1983 about one incident: A New York businessman got into the garbage-hauling business and quickly tried to grab customers from other carters by underbidding them ./.
punct(says-16, ``-1)
nsubjpass(kept-4, Competitors-2)
auxpass(kept-4, are-3)
ccomp(says-16, kept-4)
compound:prt(kept-4, out-5)
punct(kept-4, ,-6)
cc(kept-4, and-7)
nmod:poss(costs-10, carters-8)
case(carters-8, '-9)
nsubjpass(kept-12, costs-10)
auxpass(kept-12, are-11)
conj:and(kept-4, kept-12)
ccomp(says-16, kept-12)
compound:prt(kept-12, down-13)
punct(says-16, ,-14)
punct(says-16, ''-15)
root(ROOT-0, says-16)
compound(Kossler-18, Mr.-17)
nsubj(says-16, Kossler-18)
nsubj(testified-21, Kossler-18)
punct(Kossler-18, ,-19)
ref(Kossler-18, who-20)
acl:relcl(Kossler-18, testified-21)
advmod(testified-21, publicly-22)
case(1983-24, in-23)
nmod:in(testified-21, 1983-24)
case(incident-27, about-25)
nummod(incident-27, one-26)
nmod:about(testified-21, incident-27)
punct(says-16, :-28)
det(businessman-32, A-29)
compound(businessman-32, New-30)
compound(businessman-32, York-31)
nsubj(got-33, businessman-32)
nsubj(tried-40, businessman-32)
nsubj:xsubj(grab-42, businessman-32)
parataxis(says-16, got-33)
case(business-37, into-34)
det(business-37, the-35)
compound(business-37, garbage-hauling-36)
nmod:into(got-33, business-37)
cc(got-33, and-38)
advmod(tried-40, quickly-39)
parataxis(says-16, tried-40)
conj:and(got-33, tried-40)
mark(grab-42, to-41)
xcomp(tried-40, grab-42)
dobj(grab-42, customers-43)
case(carters-46, from-44)
amod(carters-46, other-45)
nmod:from(grab-42, carters-46)
mark(underbidding-48, by-47)
advcl(grab-42, underbidding-48)
dobj(underbidding-48, them-49)
punct(says-16, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#customers

grab :: National Broadcasting Co. 's `` Main Event '' won the ratings race for the 8 p.m.-to-9 p.m. time period Friday -- and grabbed the highest NBC ratings for that time slot so far this season ./.
compound(Co.-3, National-1)
compound(Co.-3, Broadcasting-2)
nmod:poss(Event-7, Co.-3)
case(Co.-3, 's-4)
punct(Event-7, ``-5)
amod(Event-7, Main-6)
nsubj(won-9, Event-7)
nsubj(grabbed-23, Event-7)
punct(Event-7, ''-8)
root(ROOT-0, won-9)
det(race-12, the-10)
compound(race-12, ratings-11)
dobj(won-9, race-12)
case(period-19, for-13)
det(period-19, the-14)
nummod(period-19, 8-15)
compound(period-19, p.m.-to-9-16)
compound(period-19, p.m.-17)
compound(period-19, time-18)
nmod:for(race-12, period-19)
nmod:tmod(period-19, Friday-20)
punct(won-9, ---21)
cc(won-9, and-22)
conj:and(won-9, grabbed-23)
det(ratings-27, the-24)
amod(ratings-27, highest-25)
compound(ratings-27, NBC-26)
dobj(grabbed-23, ratings-27)
case(time-30, for-28)
det(time-30, that-29)
nmod:for(ratings-27, time-30)
compound(season-35, slot-31)
advmod(far-33, so-32)
advmod(season-35, far-33)
det(season-35, this-34)
dep(time-30, season-35)
punct(won-9, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#ratings

grab :: And they did n't just grab the clothes , they were trained to grab the flesh . ''/''
cc(grab-6, And-1)
nsubj(grab-6, they-2)
aux(grab-6, did-3)
neg(grab-6, n't-4)
advmod(grab-6, just-5)
root(ROOT-0, grab-6)
det(clothes-8, the-7)
dobj(grab-6, clothes-8)
punct(grab-6, ,-9)
nsubjpass(trained-12, they-10)
nsubj:xsubj(grab-14, they-10)
auxpass(trained-12, were-11)
parataxis(grab-6, trained-12)
mark(grab-14, to-13)
xcomp(trained-12, grab-14)
det(flesh-16, the-15)
dobj(grab-14, flesh-16)
punct(grab-6, .-17)
punct(grab-6, ''-18)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: grab#clothes

grab :: When she hears that prisoners sometimes carve their names into logs that float downriver , she grabs her child and runs with her to the river ./.
advmod(hears-3, When-1)
nsubj(hears-3, she-2)
advcl(grabs-17, hears-3)
mark(carve-7, that-4)
nsubj(carve-7, prisoners-5)
advmod(carve-7, sometimes-6)
ccomp(hears-3, carve-7)
nmod:poss(names-9, their-8)
dobj(carve-7, names-9)
case(logs-11, into-10)
nmod:into(carve-7, logs-11)
nsubj(float-13, logs-11)
ref(logs-11, that-12)
acl:relcl(logs-11, float-13)
advmod(float-13, downriver-14)
punct(grabs-17, ,-15)
nsubj(grabs-17, she-16)
nsubj(runs-21, she-16)
root(ROOT-0, grabs-17)
nmod:poss(child-19, her-18)
dobj(grabs-17, child-19)
cc(grabs-17, and-20)
conj:and(grabs-17, runs-21)
case(her-23, with-22)
nmod:with(runs-21, her-23)
case(river-26, to-24)
det(river-26, the-25)
nmod:to(runs-21, river-26)
punct(grabs-17, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#child

grab :: And he still knows how to grab an audience: Yesterday , he made people sit up with his announcement of a $ 225 million offer for Resorts International Inc . , although it was rejected within hours ./.
cc(knows-4, And-1)
nsubj(knows-4, he-2)
advmod(knows-4, still-3)
root(ROOT-0, knows-4)
advmod(grab-7, how-5)
mark(grab-7, to-6)
ccomp(knows-4, grab-7)
det(audience-9, an-8)
dobj(grab-7, audience-9)
punct(knows-4, :-10)
nmod:tmod(made-14, Yesterday-11)
punct(made-14, ,-12)
nsubj(made-14, he-13)
parataxis(knows-4, made-14)
nsubj(sit-16, people-15)
ccomp(made-14, sit-16)
compound:prt(sit-16, up-17)
case(announcement-20, with-18)
nmod:poss(announcement-20, his-19)
nmod:with(sit-16, announcement-20)
case(offer-26, of-21)
det(offer-26, a-22)
amod(offer-26, $-23)
compound(million-25, 225-24)
nummod($-23, million-25)
nmod:of(announcement-20, offer-26)
case(Inc-30, for-27)
compound(Inc-30, Resorts-28)
compound(Inc-30, International-29)
nmod:for(offer-26, Inc-30)
punct(knows-4, .-31)
root(ROOT-0, ,-1)
mark(rejected-5, although-2)
nsubjpass(rejected-5, it-3)
auxpass(rejected-5, was-4)
root(,-1, rejected-5)
case(hours-7, within-6)
nmod:within(rejected-5, hours-7)
punct(rejected-5, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#audience

grab :: At one point , the shark disappears , then roars up from the deep to snatch a big chunk of horsemeat on the surface , the way it might grab an unsuspecting sea lion ./.
case(point-3, At-1)
nummod(point-3, one-2)
nmod:at(disappears-7, point-3)
punct(disappears-7, ,-4)
det(shark-6, the-5)
nsubj(disappears-7, shark-6)
root(ROOT-0, disappears-7)
punct(disappears-7, ,-8)
advmod(roars-10, then-9)
ccomp(disappears-7, roars-10)
compound:prt(roars-10, up-11)
case(deep-14, from-12)
det(deep-14, the-13)
nmod:from(roars-10, deep-14)
mark(snatch-16, to-15)
xcomp(roars-10, snatch-16)
det(chunk-19, a-17)
amod(chunk-19, big-18)
dobj(snatch-16, chunk-19)
case(horsemeat-21, of-20)
nmod:of(chunk-19, horsemeat-21)
case(surface-24, on-22)
det(surface-24, the-23)
nmod:on(snatch-16, surface-24)
punct(roars-10, ,-25)
det(way-27, the-26)
nmod:npmod(roars-10, way-27)
nsubj(grab-30, it-28)
aux(grab-30, might-29)
acl:relcl(way-27, grab-30)
det(lion-34, an-31)
amod(lion-34, unsuspecting-32)
compound(lion-34, sea-33)
dobj(grab-30, lion-34)
punct(disappears-7, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#lion

grab :: He adds , `` We 're trying very hard to avoid the Halley 's comet syndrome -- where you grab everything in sight and then you vanish . ''/''
nsubj(adds-2, He-1)
root(ROOT-0, adds-2)
punct(adds-2, ,-3)
punct(adds-2, ``-4)
nsubj(trying-7, We-5)
nsubj:xsubj(avoid-11, We-5)
aux(trying-7, 're-6)
ccomp(adds-2, trying-7)
advmod(hard-9, very-8)
advmod(trying-7, hard-9)
mark(avoid-11, to-10)
xcomp(trying-7, avoid-11)
det(Halley-13, the-12)
nmod:poss(syndrome-16, Halley-13)
case(Halley-13, 's-14)
compound(syndrome-16, comet-15)
dobj(avoid-11, syndrome-16)
punct(syndrome-16, ---17)
advmod(grab-20, where-18)
nsubj(grab-20, you-19)
acl:relcl(syndrome-16, grab-20)
dobj(grab-20, everything-21)
case(sight-23, in-22)
nmod:in(everything-21, sight-23)
cc(grab-20, and-24)
advmod(vanish-27, then-25)
nsubj(vanish-27, you-26)
acl:relcl(syndrome-16, vanish-27)
conj:and(grab-20, vanish-27)
punct(adds-2, .-28)
punct(adds-2, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: grab#everything

grab :: And expense-account fliers , who learned long ago to construct elaborate flight schemes to earn extra mileage , now are battling to pick up dinner tabs to grab mileage linked to charge-card purchases ./.
cc(battling-21, And-1)
compound(fliers-3, expense-account-2)
nsubj(learned-6, fliers-3)
nsubj:xsubj(construct-10, fliers-3)
nsubj(battling-21, fliers-3)
nsubj:xsubj(pick-23, fliers-3)
punct(fliers-3, ,-4)
ref(fliers-3, who-5)
acl:relcl(fliers-3, learned-6)
advmod(ago-8, long-7)
advmod(learned-6, ago-8)
mark(construct-10, to-9)
xcomp(learned-6, construct-10)
amod(schemes-13, elaborate-11)
compound(schemes-13, flight-12)
dobj(construct-10, schemes-13)
mark(earn-15, to-14)
advcl(construct-10, earn-15)
amod(mileage-17, extra-16)
dobj(earn-15, mileage-17)
punct(fliers-3, ,-18)
advmod(battling-21, now-19)
aux(battling-21, are-20)
root(ROOT-0, battling-21)
mark(pick-23, to-22)
xcomp(battling-21, pick-23)
compound:prt(pick-23, up-24)
compound(tabs-26, dinner-25)
dobj(pick-23, tabs-26)
mark(grab-28, to-27)
advcl(pick-23, grab-28)
dobj(grab-28, mileage-29)
acl(mileage-29, linked-30)
case(purchases-33, to-31)
amod(purchases-33, charge-card-32)
nmod:to(linked-30, purchases-33)
punct(battling-21, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#mileage

grab :: His one spectacular crime came in the wee hours of Aug. 8 , 1963 , his 34th birthday , when he and his pals grabbed 120 sacks of well-worn bank notes being sent to London for pulping ./.
nmod:poss(crime-4, His-1)
nummod(crime-4, one-2)
amod(crime-4, spectacular-3)
nsubj(came-5, crime-4)
root(ROOT-0, came-5)
case(hours-9, in-6)
det(hours-9, the-7)
compound(hours-9, wee-8)
nmod:in(came-5, hours-9)
case(Aug.-11, of-10)
nmod:of(hours-9, Aug.-11)
nummod(Aug.-11, 8-12)
punct(Aug.-11, ,-13)
nummod(Aug.-11, 1963-14)
punct(Aug.-11, ,-15)
nmod:poss(birthday-18, his-16)
amod(birthday-18, 34th-17)
appos(Aug.-11, birthday-18)
punct(Aug.-11, ,-19)
advmod(grabbed-25, when-20)
nsubj(grabbed-25, he-21)
cc(he-21, and-22)
nmod:poss(pals-24, his-23)
conj:and(he-21, pals-24)
nsubj(grabbed-25, pals-24)
advcl(came-5, grabbed-25)
nummod(sacks-27, 120-26)
dobj(grabbed-25, sacks-27)
case(notes-31, of-28)
amod(notes-31, well-worn-29)
compound(notes-31, bank-30)
nmod:of(sacks-27, notes-31)
auxpass(sent-33, being-32)
acl(notes-31, sent-33)
case(London-35, to-34)
nmod:to(sent-33, London-35)
case(pulping-37, for-36)
nmod:for(sent-33, pulping-37)
punct(came-5, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#sacks

grab :: `` Ten years ago , it was enough to latch onto something 100 % proven , '' says Shoji Kumagai , general manager of technical development at giant Sumitomo Corp . `` Today we have to grab it at the idea stage . ''/''
punct(says-18, ``-1)
nummod(years-3, Ten-2)
nmod:npmod(ago-4, years-3)
advmod(enough-8, ago-4)
punct(enough-8, ,-5)
nsubj(enough-8, it-6)
nsubj:xsubj(latch-10, it-6)
cop(enough-8, was-7)
ccomp(says-18, enough-8)
mark(latch-10, to-9)
xcomp(enough-8, latch-10)
case(something-12, onto-11)
nmod:onto(latch-10, something-12)
nummod(%-14, 100-13)
dep(something-12, %-14)
acl(%-14, proven-15)
punct(says-18, ,-16)
punct(says-18, ''-17)
root(ROOT-0, says-18)
compound(Kumagai-20, Shoji-19)
nsubj(says-18, Kumagai-20)
punct(Kumagai-20, ,-21)
amod(manager-23, general-22)
appos(Kumagai-20, manager-23)
case(development-26, of-24)
amod(development-26, technical-25)
nmod:of(manager-23, development-26)
case(Corp-30, at-27)
amod(Corp-30, giant-28)
compound(Corp-30, Sumitomo-29)
nmod:at(manager-23, Corp-30)
punct(says-18, .-31)
punct(have-4, ``-1)
nmod:tmod(have-4, Today-2)
nsubj(have-4, we-3)
nsubj:xsubj(grab-6, we-3)
root(ROOT-0, have-4)
mark(grab-6, to-5)
xcomp(have-4, grab-6)
dobj(grab-6, it-7)
case(stage-11, at-8)
det(stage-11, the-9)
compound(stage-11, idea-10)
nmod:at(grab-6, stage-11)
punct(have-4, .-12)
punct(have-4, ''-13)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: grab#it

grab :: Steelworkers will press for a share of the higher profits ; lower-cost minimills and emerging Third World producers will grab markets of integrated U.S. steelmakers , and alternative materials -- aluminum , ceramics and high-tech metal composites -- will wrest away business ./.
nsubj(press-3, Steelworkers-1)
aux(press-3, will-2)
root(ROOT-0, press-3)
case(share-6, for-4)
det(share-6, a-5)
nmod:for(press-3, share-6)
case(profits-10, of-7)
det(profits-10, the-8)
amod(profits-10, higher-9)
nmod:of(share-6, profits-10)
punct(press-3, ;-11)
amod(minimills-13, lower-cost-12)
nsubj(grab-20, minimills-13)
cc(minimills-13, and-14)
amod(producers-18, emerging-15)
amod(producers-18, Third-16)
compound(producers-18, World-17)
conj:and(minimills-13, producers-18)
nsubj(grab-20, producers-18)
aux(grab-20, will-19)
parataxis(press-3, grab-20)
dobj(grab-20, markets-21)
case(steelmakers-25, of-22)
compound(steelmakers-25, integrated-23)
compound(steelmakers-25, U.S.-24)
nmod:of(markets-21, steelmakers-25)
punct(grab-20, ,-26)
cc(grab-20, and-27)
amod(materials-29, alternative-28)
nsubj(wrest-40, materials-29)
punct(materials-29, ---30)
dep(materials-29, aluminum-31)
punct(aluminum-31, ,-32)
dep(materials-29, ceramics-33)
conj:and(aluminum-31, ceramics-33)
cc(aluminum-31, and-34)
amod(composites-37, high-tech-35)
compound(composites-37, metal-36)
dep(materials-29, composites-37)
conj:and(aluminum-31, composites-37)
punct(materials-29, ---38)
aux(wrest-40, will-39)
parataxis(press-3, wrest-40)
conj:and(grab-20, wrest-40)
compound:prt(wrest-40, away-41)
dobj(wrest-40, business-42)
punct(press-3, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#markets

grab :: `` A strong opening in platinum coupled with a weak dollar just grabbed gold by the horns and took it on up , '' he said ./.
punct(said-26, ``-1)
det(opening-4, A-2)
amod(opening-4, strong-3)
nsubj(grabbed-13, opening-4)
nsubj(took-19, opening-4)
case(platinum-6, in-5)
nmod:in(opening-4, platinum-6)
acl(opening-4, coupled-7)
case(dollar-11, with-8)
det(dollar-11, a-9)
amod(dollar-11, weak-10)
nmod:with(coupled-7, dollar-11)
advmod(grabbed-13, just-12)
ccomp(said-26, grabbed-13)
dobj(grabbed-13, gold-14)
case(horns-17, by-15)
det(horns-17, the-16)
nmod:by(grabbed-13, horns-17)
cc(grabbed-13, and-18)
conj:and(grabbed-13, took-19)
ccomp(said-26, took-19)
dobj(took-19, it-20)
compound:prt(took-19, on-21)
advmod(took-19, up-22)
punct(said-26, ,-23)
punct(said-26, ''-24)
nsubj(said-26, he-25)
root(ROOT-0, said-26)
punct(said-26, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#gold

grab :: With gold demand slack and more governments than ever issuing gold bullion coins , he says , `` They 're grabbing for scraps . ''/''
case(slack-4, With-1)
amod(slack-4, gold-2)
compound(slack-4, demand-3)
nmod:with(grabbing-21, slack-4)
cc(slack-4, and-5)
amod(governments-7, more-6)
conj:and(slack-4, governments-7)
nmod:with(grabbing-21, governments-7)
mark(issuing-10, than-8)
advmod(issuing-10, ever-9)
acl(slack-4, issuing-10)
compound(coins-13, gold-11)
compound(coins-13, bullion-12)
dobj(issuing-10, coins-13)
punct(says-16, ,-14)
nsubj(says-16, he-15)
parataxis(grabbing-21, says-16)
punct(says-16, ,-17)
punct(grabbing-21, ``-18)
nsubj(grabbing-21, They-19)
aux(grabbing-21, 're-20)
root(ROOT-0, grabbing-21)
case(scraps-23, for-22)
nmod:for(grabbing-21, scraps-23)
punct(grabbing-21, .-24)
punct(grabbing-21, ''-25)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: grab#they

grab :: They fear Philip Morris could grab a huge portion of the retail shelf and stifle innovation by muscling out smaller and regional concerns where new products are often born ./.
nsubj(fear-2, They-1)
root(ROOT-0, fear-2)
compound(Morris-4, Philip-3)
nsubj(grab-6, Morris-4)
nsubj(stifle-15, Morris-4)
aux(grab-6, could-5)
ccomp(fear-2, grab-6)
det(portion-9, a-7)
amod(portion-9, huge-8)
dobj(grab-6, portion-9)
case(shelf-13, of-10)
det(shelf-13, the-11)
amod(shelf-13, retail-12)
nmod:of(portion-9, shelf-13)
cc(grab-6, and-14)
ccomp(fear-2, stifle-15)
conj:and(grab-6, stifle-15)
dobj(stifle-15, innovation-16)
mark(muscling-18, by-17)
advcl(grab-6, muscling-18)
compound:prt(muscling-18, out-19)
amod(concerns-23, smaller-20)
cc(smaller-20, and-21)
conj:and(smaller-20, regional-22)
amod(concerns-23, regional-22)
dobj(muscling-18, concerns-23)
advmod(born-29, where-24)
amod(products-26, new-25)
nsubjpass(born-29, products-26)
auxpass(born-29, are-27)
advmod(born-29, often-28)
acl:relcl(concerns-23, born-29)
punct(fear-2, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#shelf

grab :: While manned launches , such as that of the space shuttle last week , still grab occasional headlines , industry observers are focusing more and more on the moves of trade negotiators ./.
mark(grab-16, While-1)
amod(launches-3, manned-2)
nsubj(grab-16, launches-3)
punct(launches-3, ,-4)
case(that-7, such-5)
mwe(such-5, as-6)
nmod:such_as(launches-3, that-7)
case(shuttle-11, of-8)
det(shuttle-11, the-9)
compound(shuttle-11, space-10)
nmod:of(that-7, shuttle-11)
amod(week-13, last-12)
nmod:tmod(that-7, week-13)
punct(launches-3, ,-14)
advmod(grab-16, still-15)
advcl(focusing-23, grab-16)
amod(headlines-18, occasional-17)
dobj(grab-16, headlines-18)
punct(focusing-23, ,-19)
compound(observers-21, industry-20)
nsubj(focusing-23, observers-21)
aux(focusing-23, are-22)
root(ROOT-0, focusing-23)
dobj(focusing-23, more-24)
cc(more-24, and-25)
dobj(focusing-23, more-26)
conj:and(more-24, more-26)
case(moves-29, on-27)
det(moves-29, the-28)
nmod:on(focusing-23, moves-29)
case(negotiators-32, of-30)
compound(negotiators-32, trade-31)
nmod:of(moves-29, negotiators-32)
punct(focusing-23, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#headlines

grab :: The new routes do n't have the normal stop-and-go chemical signals , so the rhizobia and their host go all out , grabbing and using twice as much nitrogen from the air as normal ./.
det(routes-3, The-1)
amod(routes-3, new-2)
nsubj(have-6, routes-3)
aux(have-6, do-4)
neg(have-6, n't-5)
root(ROOT-0, have-6)
det(signals-11, the-7)
amod(signals-11, normal-8)
amod(signals-11, stop-and-go-9)
compound(signals-11, chemical-10)
dobj(have-6, signals-11)
punct(have-6, ,-12)
dep(have-6, so-13)
det(rhizobia-15, the-14)
nsubj(go-19, rhizobia-15)
cc(rhizobia-15, and-16)
nmod:poss(host-18, their-17)
conj:and(rhizobia-15, host-18)
nsubj(go-19, host-18)
parataxis(have-6, go-19)
dep(out-21, all-20)
advmod(go-19, out-21)
punct(go-19, ,-22)
xcomp(go-19, grabbing-23)
cc(grabbing-23, and-24)
xcomp(go-19, using-25)
conj:and(grabbing-23, using-25)
advmod(grabbing-23, twice-26)
advmod(nitrogen-29, as-27)
amod(nitrogen-29, much-28)
nmod(grabbing-23, nitrogen-29)
case(air-32, from-30)
det(air-32, the-31)
nmod:from(nitrogen-29, air-32)
case(normal-34, as-33)
acl(nitrogen-29, normal-34)
punct(have-6, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#nitrogen

grab :: Since introducing its first cooler in late 1985 , Seagram has grabbed a 36 % market share and with eight flavors on the market has kept increasing its revenue at the expense of others ./.
mark(introducing-2, Since-1)
advcl(grabbed-12, introducing-2)
nmod:poss(cooler-5, its-3)
amod(cooler-5, first-4)
dobj(introducing-2, cooler-5)
case(1985-8, in-6)
amod(1985-8, late-7)
nmod:in(introducing-2, 1985-8)
punct(grabbed-12, ,-9)
nsubj(grabbed-12, Seagram-10)
aux(grabbed-12, has-11)
csubj(kept-26, grabbed-12)
det(share-17, a-13)
compound(%-15, 36-14)
amod(share-17, %-15)
compound(share-17, market-16)
dobj(grabbed-12, share-17)
cc(share-17, and-18)
case(flavors-21, with-19)
nummod(flavors-21, eight-20)
dobj(grabbed-12, flavors-21)
conj:and(share-17, flavors-21)
case(market-24, on-22)
det(market-24, the-23)
nmod:on(flavors-21, market-24)
aux(kept-26, has-25)
root(ROOT-0, kept-26)
xcomp(kept-26, increasing-27)
nmod:poss(revenue-29, its-28)
dobj(increasing-27, revenue-29)
case(expense-32, at-30)
det(expense-32, the-31)
nmod:at(increasing-27, expense-32)
case(others-34, of-33)
nmod:of(expense-32, others-34)
punct(kept-26, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#share

grab :: `` European electronics companies would invent a new product , and then six of them would each make it and kill each other , while the Japanese grabbed the market , '' says Mr. Salzmann , President Mitterrand 's adviser ./.
punct(says-33, ``-1)
amod(companies-4, European-2)
compound(companies-4, electronics-3)
nsubj(invent-6, companies-4)
aux(invent-6, would-5)
ccomp(says-33, invent-6)
det(product-9, a-7)
amod(product-9, new-8)
dobj(invent-6, product-9)
punct(invent-6, ,-10)
cc(invent-6, and-11)
advmod(six-13, then-12)
nsubj(make-18, six-13)
case(them-15, of-14)
nmod:of(six-13, them-15)
aux(make-18, would-16)
nsubj(make-18, each-17)
nsubj(kill-21, each-17)
conj:and(invent-6, make-18)
ccomp(says-33, make-18)
dobj(make-18, it-19)
cc(make-18, and-20)
conj:and(invent-6, kill-21)
conj:and(make-18, kill-21)
det(other-23, each-22)
dobj(kill-21, other-23)
punct(invent-6, ,-24)
mark(grabbed-28, while-25)
det(Japanese-27, the-26)
nsubj(grabbed-28, Japanese-27)
advcl(invent-6, grabbed-28)
det(market-30, the-29)
dobj(grabbed-28, market-30)
punct(says-33, ,-31)
punct(says-33, ''-32)
root(ROOT-0, says-33)
compound(Salzmann-35, Mr.-34)
nsubj(says-33, Salzmann-35)
punct(Salzmann-35, ,-36)
compound(Mitterrand-38, President-37)
nmod:poss(adviser-40, Mitterrand-38)
case(Mitterrand-38, 's-39)
appos(Salzmann-35, adviser-40)
punct(says-33, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#market

grab :: As Elle grabbed market share , other fashion magazines quickly revamped , redesigned and repositioned themselves ./.
mark(grabbed-3, As-1)
nsubj(grabbed-3, Elle-2)
advcl(revamped-11, grabbed-3)
compound(share-5, market-4)
dobj(grabbed-3, share-5)
punct(revamped-11, ,-6)
amod(magazines-9, other-7)
compound(magazines-9, fashion-8)
nsubj(revamped-11, magazines-9)
nsubj(redesigned-13, magazines-9)
nsubj(repositioned-15, magazines-9)
advmod(revamped-11, quickly-10)
root(ROOT-0, revamped-11)
punct(revamped-11, ,-12)
conj:and(revamped-11, redesigned-13)
cc(revamped-11, and-14)
conj:and(revamped-11, repositioned-15)
dobj(repositioned-15, themselves-16)
punct(revamped-11, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#share

grab :: Just as Reuters and Telerate want to grab a piece of Quotron 's territory by offering U.S. equities quotes , Quotron is eyeing their turf and mulling ways to offer pricing information on fixed-income instruments and foreign currencies ./.
advmod(want-6, Just-1)
mark(want-6, as-2)
nsubj(want-6, Reuters-3)
nsubj:xsubj(grab-8, Reuters-3)
cc(Reuters-3, and-4)
conj:and(Reuters-3, Telerate-5)
nsubj(want-6, Telerate-5)
nsubj:xsubj(grab-8, Telerate-5)
advcl(eyeing-23, want-6)
mark(grab-8, to-7)
xcomp(want-6, grab-8)
det(piece-10, a-9)
dobj(grab-8, piece-10)
case(territory-14, of-11)
nmod:poss(territory-14, Quotron-12)
case(Quotron-12, 's-13)
nmod:of(piece-10, territory-14)
mark(offering-16, by-15)
advcl(grab-8, offering-16)
compound(quotes-19, U.S.-17)
compound(quotes-19, equities-18)
dobj(offering-16, quotes-19)
punct(eyeing-23, ,-20)
nsubj(eyeing-23, Quotron-21)
nsubj(mulling-27, Quotron-21)
aux(eyeing-23, is-22)
root(ROOT-0, eyeing-23)
nmod:poss(turf-25, their-24)
dobj(eyeing-23, turf-25)
cc(eyeing-23, and-26)
conj:and(eyeing-23, mulling-27)
dobj(mulling-27, ways-28)
mark(offer-30, to-29)
acl(ways-28, offer-30)
compound(information-32, pricing-31)
dobj(offer-30, information-32)
case(instruments-35, on-33)
compound(instruments-35, fixed-income-34)
nmod:on(information-32, instruments-35)
cc(instruments-35, and-36)
amod(currencies-38, foreign-37)
nmod:on(information-32, currencies-38)
conj:and(instruments-35, currencies-38)
punct(eyeing-23, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#territory

grab :: As a longtime trade-association executive in the petroleum industry , I have seen scores of upper-level managers grab the brass ring of early retirement ./.
case(executive-5, As-1)
det(executive-5, a-2)
amod(executive-5, longtime-3)
compound(executive-5, trade-association-4)
nmod:as(seen-13, executive-5)
case(industry-9, in-6)
det(industry-9, the-7)
compound(industry-9, petroleum-8)
nmod:in(executive-5, industry-9)
punct(seen-13, ,-10)
nsubj(seen-13, I-11)
aux(seen-13, have-12)
root(ROOT-0, seen-13)
nsubj(grab-18, scores-14)
case(managers-17, of-15)
amod(managers-17, upper-level-16)
nmod:of(scores-14, managers-17)
ccomp(seen-13, grab-18)
det(ring-21, the-19)
compound(ring-21, brass-20)
dobj(grab-18, ring-21)
case(retirement-24, of-22)
amod(retirement-24, early-23)
nmod:of(ring-21, retirement-24)
punct(seen-13, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#retirement

grab :: Now , do all of them absorb it and grab it ?/.
advmod(do-3, Now-1)
punct(do-3, ,-2)
root(ROOT-0, do-3)
nsubj(absorb-7, all-4)
nsubj(grab-10, all-4)
case(them-6, of-5)
nmod:of(all-4, them-6)
dobj(do-3, absorb-7)
dobj(absorb-7, it-8)
cc(absorb-7, and-9)
dobj(do-3, grab-10)
conj:and(absorb-7, grab-10)
dobj(grab-10, it-11)
punct(do-3, ?-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#it

grab :: Difficult as it was , young Miss Mills managed to grab some of the spotlight from her Papa Bear mentor ./.
root(ROOT-0, Difficult-1)
mark(managed-9, as-2)
nsubjpass(managed-9, it-3)
nsubj:xsubj(grab-11, it-3)
auxpass(managed-9, was-4)
punct(managed-9, ,-5)
amod(Mills-8, young-6)
compound(Mills-8, Miss-7)
nsubjpass(managed-9, Mills-8)
nsubj:xsubj(grab-11, Mills-8)
advcl(Difficult-1, managed-9)
mark(grab-11, to-10)
xcomp(managed-9, grab-11)
dobj(grab-11, some-12)
case(spotlight-15, of-13)
det(spotlight-15, the-14)
nmod:of(some-12, spotlight-15)
case(mentor-20, from-16)
nmod:poss(mentor-20, her-17)
compound(mentor-20, Papa-18)
compound(mentor-20, Bear-19)
nmod:from(grab-11, mentor-20)
punct(Difficult-1, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#spotlight

grab :: A Nomura investment would reflect the growing desire by major Japanese financial institutions to grab a bigger piece of the mergers and acquisitions activity taking place between Japan and the U.S ./.
det(investment-3, A-1)
compound(investment-3, Nomura-2)
nsubj(reflect-5, investment-3)
aux(reflect-5, would-4)
root(ROOT-0, reflect-5)
det(desire-8, the-6)
amod(desire-8, growing-7)
dobj(reflect-5, desire-8)
case(institutions-13, by-9)
amod(institutions-13, major-10)
amod(institutions-13, Japanese-11)
amod(institutions-13, financial-12)
nmod:by(desire-8, institutions-13)
mark(grab-15, to-14)
acl(desire-8, grab-15)
det(piece-18, a-16)
amod(piece-18, bigger-17)
dobj(grab-15, piece-18)
case(mergers-21, of-19)
det(mergers-21, the-20)
nmod:of(piece-18, mergers-21)
cc(mergers-21, and-22)
compound(activity-24, acquisitions-23)
nmod:of(piece-18, activity-24)
conj:and(mergers-21, activity-24)
acl(mergers-21, taking-25)
dobj(taking-25, place-26)
case(Japan-28, between-27)
nmod:between(taking-25, Japan-28)
cc(Japan-28, and-29)
det(U.S-31, the-30)
nmod:between(taking-25, U.S-31)
conj:and(Japan-28, U.S-31)
punct(reflect-5, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#mergers

grab :: Like soap operas , the spots try to grab the viewer with heavy doses of drama and emotion ./.
case(operas-3, Like-1)
compound(operas-3, soap-2)
nmod:like(try-7, operas-3)
punct(try-7, ,-4)
det(spots-6, the-5)
nsubj(try-7, spots-6)
nsubj:xsubj(grab-9, spots-6)
root(ROOT-0, try-7)
mark(grab-9, to-8)
xcomp(try-7, grab-9)
det(viewer-11, the-10)
dobj(grab-9, viewer-11)
case(doses-14, with-12)
amod(doses-14, heavy-13)
nmod:with(grab-9, doses-14)
case(drama-16, of-15)
nmod:of(doses-14, drama-16)
cc(drama-16, and-17)
nmod:of(doses-14, emotion-18)
conj:and(drama-16, emotion-18)
punct(try-7, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#viewer

grab :: The suspension likely will accelerate inter-union warfare , as the electricians step up their recruitment drive at new sites , while other unions try to grab electricians ' members in factories where they represent the minority , Mr. Metcalfe says ./.
det(suspension-2, The-1)
nsubj(accelerate-5, suspension-2)
advmod(accelerate-5, likely-3)
aux(accelerate-5, will-4)
ccomp(says-40, accelerate-5)
amod(warfare-7, inter-union-6)
dobj(accelerate-5, warfare-7)
punct(accelerate-5, ,-8)
mark(step-12, as-9)
det(electricians-11, the-10)
nsubj(step-12, electricians-11)
advcl(accelerate-5, step-12)
compound:prt(step-12, up-13)
nmod:poss(drive-16, their-14)
compound(drive-16, recruitment-15)
dobj(step-12, drive-16)
case(sites-19, at-17)
amod(sites-19, new-18)
nmod:at(drive-16, sites-19)
punct(accelerate-5, ,-20)
mark(try-24, while-21)
amod(unions-23, other-22)
nsubj(try-24, unions-23)
nsubj:xsubj(grab-26, unions-23)
advcl(accelerate-5, try-24)
mark(grab-26, to-25)
xcomp(try-24, grab-26)
nmod:poss(members-29, electricians-27)
case(electricians-27, '-28)
dobj(grab-26, members-29)
case(factories-31, in-30)
nmod:in(grab-26, factories-31)
advmod(represent-34, where-32)
nsubj(represent-34, they-33)
acl:relcl(factories-31, represent-34)
det(minority-36, the-35)
dobj(represent-34, minority-36)
punct(says-40, ,-37)
compound(Metcalfe-39, Mr.-38)
nsubj(says-40, Metcalfe-39)
root(ROOT-0, says-40)
punct(says-40, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#members

grab :: But it mistakenly grabs protein -LRB- a -RRB- instead of plasminogen , pulling it , with its bag of fat and cholesterol , into the artery wall ./.
cc(grabs-4, But-1)
nsubj(grabs-4, it-2)
advmod(grabs-4, mistakenly-3)
root(ROOT-0, grabs-4)
compound(a-7, protein-5)
punct(a-7, -LRB--6)
dobj(grabs-4, a-7)
punct(a-7, -RRB--8)
cc(a-7, instead-9)
mwe(instead-9, of-10)
dobj(grabs-4, plasminogen-11)
conj:negcc(a-7, plasminogen-11)
punct(grabs-4, ,-12)
advcl(grabs-4, pulling-13)
dobj(pulling-13, it-14)
punct(pulling-13, ,-15)
case(bag-18, with-16)
nmod:poss(bag-18, its-17)
nmod:with(pulling-13, bag-18)
case(fat-20, of-19)
nmod:of(bag-18, fat-20)
cc(fat-20, and-21)
nmod:of(bag-18, cholesterol-22)
conj:and(fat-20, cholesterol-22)
punct(pulling-13, ,-23)
case(wall-27, into-24)
det(wall-27, the-25)
compound(wall-27, artery-26)
nmod:into(pulling-13, wall-27)
punct(grabs-4, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#a

grab :: Midland Bank PLC , hoping to grab a bigger share of Britain 's lucrative and highly competitive retail market , has begun giving products brand names and marketing them like chocolate bars ./.
compound(PLC-3, Midland-1)
compound(PLC-3, Bank-2)
nsubj(begun-22, PLC-3)
punct(begun-22, ,-4)
advcl(begun-22, hoping-5)
mark(grab-7, to-6)
xcomp(hoping-5, grab-7)
det(share-10, a-8)
amod(share-10, bigger-9)
dobj(grab-7, share-10)
case(market-19, of-11)
nmod:poss(market-19, Britain-12)
case(Britain-12, 's-13)
amod(market-19, lucrative-14)
cc(lucrative-14, and-15)
advmod(competitive-17, highly-16)
conj:and(lucrative-14, competitive-17)
amod(market-19, competitive-17)
amod(market-19, retail-18)
nmod:of(share-10, market-19)
punct(begun-22, ,-20)
aux(begun-22, has-21)
root(ROOT-0, begun-22)
ccomp(begun-22, giving-23)
compound(names-26, products-24)
compound(names-26, brand-25)
dobj(giving-23, names-26)
cc(giving-23, and-27)
ccomp(begun-22, marketing-28)
conj:and(giving-23, marketing-28)
dobj(marketing-28, them-29)
case(bars-32, like-30)
compound(bars-32, chocolate-31)
nmod:like(marketing-28, bars-32)
punct(begun-22, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#market

grab :: When his friend Mr. Peterson , who had introduced Mr. Stockman to Salomon Chairman John Gutfreund , offered him a place at Blackstone , Mr. Stockman grabbed it ./.
advmod(offered-18, When-1)
nmod:poss(friend-3, his-2)
nsubj(offered-18, friend-3)
compound(Peterson-5, Mr.-4)
nsubj(introduced-9, Peterson-5)
nsubj(offered-18, Peterson-5)
punct(Peterson-5, ,-6)
ref(Peterson-5, who-7)
aux(introduced-9, had-8)
acl:relcl(Peterson-5, introduced-9)
compound(Stockman-11, Mr.-10)
dobj(introduced-9, Stockman-11)
case(Gutfreund-16, to-12)
compound(Gutfreund-16, Salomon-13)
compound(Gutfreund-16, Chairman-14)
compound(Gutfreund-16, John-15)
nmod:to(introduced-9, Gutfreund-16)
punct(Peterson-5, ,-17)
advcl(grabbed-27, offered-18)
iobj(offered-18, him-19)
det(place-21, a-20)
dobj(offered-18, place-21)
case(Blackstone-23, at-22)
nmod:at(place-21, Blackstone-23)
punct(grabbed-27, ,-24)
compound(Stockman-26, Mr.-25)
nsubj(grabbed-27, Stockman-26)
root(ROOT-0, grabbed-27)
dobj(grabbed-27, it-28)
punct(grabbed-27, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#it

grab :: Neither company has a big presence in the other 's businesses , and their alliance is aimed at grabbing a larger share of the converging computer and telecommunications markets ./.
det(company-2, Neither-1)
nsubj(has-3, company-2)
root(ROOT-0, has-3)
det(presence-6, a-4)
amod(presence-6, big-5)
dobj(has-3, presence-6)
case(businesses-11, in-7)
det(other-9, the-8)
nmod:poss(businesses-11, other-9)
case(other-9, 's-10)
nmod:in(has-3, businesses-11)
punct(has-3, ,-12)
cc(has-3, and-13)
nmod:poss(alliance-15, their-14)
nsubjpass(aimed-17, alliance-15)
auxpass(aimed-17, is-16)
conj:and(has-3, aimed-17)
mark(grabbing-19, at-18)
advcl(aimed-17, grabbing-19)
det(share-22, a-20)
amod(share-22, larger-21)
dobj(grabbing-19, share-22)
case(computer-26, of-23)
det(computer-26, the-24)
amod(computer-26, converging-25)
nmod:of(share-22, computer-26)
cc(computer-26, and-27)
compound(markets-29, telecommunications-28)
nmod:of(share-22, markets-29)
conj:and(computer-26, markets-29)
punct(has-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#computer

grab :: The New York Times is already rehabilitating Michael Dukakis as a `` centrist , '' but if that 's true why are Democrats now grabbing every reporter in town to whisper , `` Sam Nunn for vice president '' ?/.
det(Times-4, The-1)
compound(Times-4, New-2)
compound(Times-4, York-3)
nsubj(rehabilitating-7, Times-4)
aux(rehabilitating-7, is-5)
advmod(rehabilitating-7, already-6)
root(ROOT-0, rehabilitating-7)
compound(Dukakis-9, Michael-8)
dobj(rehabilitating-7, Dukakis-9)
case(centrist-13, as-10)
det(centrist-13, a-11)
punct(centrist-13, ``-12)
nmod:as(rehabilitating-7, centrist-13)
punct(rehabilitating-7, ,-14)
punct(rehabilitating-7, ''-15)
cc(rehabilitating-7, but-16)
mark(true-20, if-17)
nsubj(true-20, that-18)
cop(true-20, 's-19)
conj:but(rehabilitating-7, true-20)
advmod(grabbing-25, why-21)
aux(grabbing-25, are-22)
nsubj(grabbing-25, Democrats-23)
advmod(grabbing-25, now-24)
advcl(true-20, grabbing-25)
det(reporter-27, every-26)
dobj(grabbing-25, reporter-27)
case(town-29, in-28)
nmod:in(reporter-27, town-29)
case(whisper-31, to-30)
nmod:to(town-29, whisper-31)
punct(true-20, ,-32)
root(,-32, ``-33)
compound(Nunn-35, Sam-34)
root(``-33, Nunn-35)
case(president-38, for-36)
compound(president-38, vice-37)
nmod:for(Nunn-35, president-38)
punct(Nunn-35, ''-39)
punct(Nunn-35, ?-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#reporter

grab :: It grabbed 21.7 % of U.S. car sales in the first nine months of this year , up from just 16.6 % in all 1981 ./.
nsubj(grabbed-2, It-1)
root(ROOT-0, grabbed-2)
nummod(%-4, 21.7-3)
dobj(grabbed-2, %-4)
case(sales-8, of-5)
compound(sales-8, U.S.-6)
compound(sales-8, car-7)
nmod:of(%-4, sales-8)
case(months-13, in-9)
det(months-13, the-10)
amod(months-13, first-11)
nummod(months-13, nine-12)
nmod:in(grabbed-2, months-13)
case(year-16, of-14)
det(year-16, this-15)
nmod:of(months-13, year-16)
punct(grabbed-2, ,-17)
advmod(grabbed-2, up-18)
case(%-22, from-19)
advmod(16.6-21, just-20)
nummod(%-22, 16.6-21)
nmod:from(up-18, %-22)
case(1981-25, in-23)
det(1981-25, all-24)
nmod:in(%-22, 1981-25)
punct(grabbed-2, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#sales

grab :: Japan has long fended off accusations that Japanese companies use U.S. and European technologies without permission to grab a market lead , most recently in semiconductors ./.
nsubj(fended-4, Japan-1)
aux(fended-4, has-2)
advmod(fended-4, long-3)
root(ROOT-0, fended-4)
compound:prt(fended-4, off-5)
dobj(fended-4, accusations-6)
mark(use-10, that-7)
amod(companies-9, Japanese-8)
nsubj(use-10, companies-9)
ccomp(accusations-6, use-10)
compound(technologies-14, U.S.-11)
cc(U.S.-11, and-12)
conj:and(U.S.-11, European-13)
compound(technologies-14, European-13)
dobj(use-10, technologies-14)
case(permission-16, without-15)
nmod:without(use-10, permission-16)
mark(grab-18, to-17)
acl(permission-16, grab-18)
det(lead-21, a-19)
compound(lead-21, market-20)
dobj(grab-18, lead-21)
punct(use-10, ,-22)
advmod(recently-24, most-23)
advmod(semiconductors-26, recently-24)
case(semiconductors-26, in-25)
nmod:in(use-10, semiconductors-26)
punct(fended-4, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#lead

grab :: Riney grabbed headlines late last year when it resigned as the advertising agency for Modesto , Calif.-based E . & J. Gallo Winery , after a brush with the Gallos ./.
nsubj(grabbed-2, Riney-1)
root(ROOT-0, grabbed-2)
dobj(grabbed-2, headlines-3)
advmod(year-6, late-4)
amod(year-6, last-5)
nmod:tmod(grabbed-2, year-6)
advmod(resigned-9, when-7)
nsubj(resigned-9, it-8)
acl:relcl(year-6, resigned-9)
case(agency-13, as-10)
det(agency-13, the-11)
compound(agency-13, advertising-12)
nmod:as(resigned-9, agency-13)
case(E-18, for-14)
amod(Calif.-based-17, Modesto-15)
punct(Calif.-based-17, ,-16)
amod(E-18, Calif.-based-17)
nmod:for(agency-13, E-18)
punct(grabbed-2, .-19)
cc(Winery-4, &-1)
compound(Winery-4, J.-2)
compound(Winery-4, Gallo-3)
root(ROOT-0, Winery-4)
punct(Winery-4, ,-5)
case(brush-8, after-6)
det(brush-8, a-7)
nmod:after(Winery-4, brush-8)
case(Gallos-11, with-9)
det(Gallos-11, the-10)
nmod:with(brush-8, Gallos-11)
punct(Winery-4, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#headlines

grab :: Japanese , West German , Taiwanese and other foreign machine tool builders grabbed business away from U.S. machine builders , both in the U.S. and abroad ./.
nsubj(grabbed-13, Japanese-1)
punct(Japanese-1, ,-2)
amod(German-4, West-3)
conj:and(Japanese-1, German-4)
nsubj(grabbed-13, German-4)
punct(Japanese-1, ,-5)
conj:and(Japanese-1, Taiwanese-6)
nsubj(grabbed-13, Taiwanese-6)
cc(Japanese-1, and-7)
amod(builders-12, other-8)
amod(builders-12, foreign-9)
compound(builders-12, machine-10)
compound(builders-12, tool-11)
conj:and(Japanese-1, builders-12)
nsubj(grabbed-13, builders-12)
root(ROOT-0, grabbed-13)
dobj(grabbed-13, business-14)
case(builders-19, away-15)
mwe(away-15, from-16)
compound(builders-19, U.S.-17)
compound(builders-19, machine-18)
nmod:away_from(grabbed-13, builders-19)
punct(grabbed-13, ,-20)
cc:preconj(U.S.-24, both-21)
case(U.S.-24, in-22)
det(U.S.-24, the-23)
nmod:in(grabbed-13, U.S.-24)
cc(U.S.-24, and-25)
nmod:in(grabbed-13, abroad-26)
conj:and(U.S.-24, abroad-26)
punct(grabbed-13, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#business

grab :: Yamaha is grabbing for prestige more than sales -- Steinway makes 6 , 000 pianos a year , compared with Yamaha 's nearly 200 , 000 ./.
nsubj(grabbing-3, Yamaha-1)
aux(grabbing-3, is-2)
root(ROOT-0, grabbing-3)
case(prestige-5, for-4)
nmod:for(grabbing-3, prestige-5)
advmod(grabbing-3, more-6)
case(sales-8, than-7)
nmod:than(more-6, sales-8)
punct(grabbing-3, ---9)
nsubj(makes-11, Steinway-10)
parataxis(grabbing-3, makes-11)
dobj(makes-11, 6-12)
punct(6-12, ,-13)
nummod(pianos-15, 000-14)
appos(6-12, pianos-15)
det(year-17, a-16)
nmod:npmod(pianos-15, year-17)
punct(6-12, ,-18)
xcomp(makes-11, compared-19)
nmod(compared-19, with-20)
dobj(with-20, Yamaha-21)
case(Yamaha-21, 's-22)
advmod(200-24, nearly-23)
dep(Yamaha-21, 200-24)
punct(200-24, ,-25)
appos(200-24, 000-26)
punct(grabbing-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#yamaha

grab :: By grabbing captive outlets in consuming countries , OPEC members win guaranteed customers ./.
mark(grabbing-2, By-1)
advcl(win-11, grabbing-2)
amod(outlets-4, captive-3)
dobj(grabbing-2, outlets-4)
case(countries-7, in-5)
amod(countries-7, consuming-6)
nmod:in(outlets-4, countries-7)
punct(win-11, ,-8)
compound(members-10, OPEC-9)
nsubj(win-11, members-10)
root(ROOT-0, win-11)
amod(customers-13, guaranteed-12)
dobj(win-11, customers-13)
punct(win-11, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#outlets

grab :: Shortly after 6 p.m . , the shark grabs a final tuna-head snack off a line and glides off into the gloom ./.
root(ROOT-0, Shortly-1)
case(6-3, after-2)
nmod:after(Shortly-1, 6-3)
advmod(6-3, p.m-4)
punct(Shortly-1, .-5)
punct(grabs-4, ,-1)
det(shark-3, the-2)
nsubj(grabs-4, shark-3)
nsubj(glides-13, shark-3)
root(ROOT-0, grabs-4)
det(snack-8, a-5)
amod(snack-8, final-6)
compound(snack-8, tuna-head-7)
dobj(grabs-4, snack-8)
case(line-11, off-9)
det(line-11, a-10)
nmod:off(grabs-4, line-11)
cc(grabs-4, and-12)
conj:and(grabs-4, glides-13)
compound:prt(glides-13, off-14)
case(gloom-17, into-15)
det(gloom-17, the-16)
nmod:into(glides-13, gloom-17)
punct(grabs-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#snack

grab :: He says it was the Koreans who grabbed the knife , wielded the fabric softener like a club , and , what 's more , beat up Ms. Clark 's 67-year-old mother , Ivy King , who was standing nearby , for no good reason except that she is black ./.
nsubj(says-2, He-1)
root(ROOT-0, says-2)
nsubj(Koreans-6, it-3)
nsubj(wielded-12, it-3)
nsubj(beat-26, it-3)
cop(Koreans-6, was-4)
det(Koreans-6, the-5)
ccomp(says-2, Koreans-6)
nsubj(grabbed-8, Koreans-6)
ref(Koreans-6, who-7)
acl:relcl(Koreans-6, grabbed-8)
det(knife-10, the-9)
dobj(grabbed-8, knife-10)
punct(Koreans-6, ,-11)
ccomp(says-2, wielded-12)
conj:and(Koreans-6, wielded-12)
nsubj(grabbed-8, wielded-12)
det(softener-15, the-13)
compound(softener-15, fabric-14)
dobj(wielded-12, softener-15)
case(club-18, like-16)
det(club-18, a-17)
nmod:like(wielded-12, club-18)
punct(Koreans-6, ,-19)
cc(Koreans-6, and-20)
punct(Koreans-6, ,-21)
nsubj(more-24, what-22)
cop(more-24, 's-23)
advcl(beat-26, more-24)
punct(beat-26, ,-25)
ccomp(says-2, beat-26)
conj:and(Koreans-6, beat-26)
nsubj(grabbed-8, beat-26)
compound:prt(beat-26, up-27)
compound(Clark-29, Ms.-28)
nmod:poss(mother-32, Clark-29)
case(Clark-29, 's-30)
amod(mother-32, 67-year-old-31)
dobj(beat-26, mother-32)
nsubj(standing-39, mother-32)
punct(mother-32, ,-33)
compound(King-35, Ivy-34)
appos(mother-32, King-35)
punct(mother-32, ,-36)
ref(mother-32, who-37)
aux(standing-39, was-38)
acl:relcl(mother-32, standing-39)
advmod(standing-39, nearby-40)
punct(mother-32, ,-41)
case(reason-45, for-42)
neg(reason-45, no-43)
amod(reason-45, good-44)
nmod:for(beat-26, reason-45)
mark(black-50, except-46)
mark(black-50, that-47)
nsubj(black-50, she-48)
cop(black-50, is-49)
acl(reason-45, black-50)
punct(says-2, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#knife

grab :: Most-Remarkable Explanation -- `` Some players did n't recognize that different behavior is required on a commercial flight than on a charter , '' said Jim Ferguson , publicity director for the Cincinnati Reds , after team members grabbed stewardesses and threw food on an April 13 Continental Airlines flight to Houston from San Francisco ./.
amod(Explanation-2, Most-Remarkable-1)
nsubj(said-25, Explanation-2)
punct(recognize-9, ---3)
punct(recognize-9, ``-4)
det(players-6, Some-5)
nsubj(recognize-9, players-6)
aux(recognize-9, did-7)
neg(recognize-9, n't-8)
dep(Explanation-2, recognize-9)
mark(required-14, that-10)
amod(behavior-12, different-11)
nsubjpass(required-14, behavior-12)
auxpass(required-14, is-13)
ccomp(recognize-9, required-14)
case(flight-18, on-15)
det(flight-18, a-16)
amod(flight-18, commercial-17)
nmod:on(required-14, flight-18)
case(charter-22, than-19)
case(charter-22, on-20)
det(charter-22, a-21)
nmod:on(required-14, charter-22)
punct(recognize-9, ,-23)
punct(recognize-9, ''-24)
root(ROOT-0, said-25)
compound(Ferguson-27, Jim-26)
dobj(said-25, Ferguson-27)
punct(Ferguson-27, ,-28)
compound(director-30, publicity-29)
appos(Ferguson-27, director-30)
case(Reds-34, for-31)
det(Reds-34, the-32)
compound(Reds-34, Cincinnati-33)
nmod:for(director-30, Reds-34)
punct(Ferguson-27, ,-35)
mark(grabbed-39, after-36)
compound(members-38, team-37)
nsubj(grabbed-39, members-38)
nsubj(threw-42, members-38)
dep(Ferguson-27, grabbed-39)
dobj(grabbed-39, stewardesses-40)
cc(grabbed-39, and-41)
dep(Ferguson-27, threw-42)
conj:and(grabbed-39, threw-42)
dobj(threw-42, food-43)
case(flight-50, on-44)
det(flight-50, an-45)
compound(flight-50, April-46)
nummod(flight-50, 13-47)
compound(flight-50, Continental-48)
compound(flight-50, Airlines-49)
nmod:on(threw-42, flight-50)
case(Houston-52, to-51)
nmod:to(flight-50, Houston-52)
case(Francisco-55, from-53)
compound(Francisco-55, San-54)
nmod:from(flight-50, Francisco-55)
punct(said-25, .-56)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#stewardesses

grab :: The leg of a corpse was sticking out of the side , and frantically I grabbed it ; it wrenched off , and casting it down I pulled in a couple of rifles and yelled to the troops in the gunpit to throw me more ./.
det(leg-2, The-1)
nsubj(sticking-7, leg-2)
case(corpse-5, of-3)
det(corpse-5, a-4)
nmod:of(leg-2, corpse-5)
aux(sticking-7, was-6)
root(ROOT-0, sticking-7)
case(side-11, out-8)
mwe(out-8, of-9)
det(side-11, the-10)
nmod:out_of(sticking-7, side-11)
punct(sticking-7, ,-12)
cc(sticking-7, and-13)
advmod(grabbed-16, frantically-14)
nsubj(grabbed-16, I-15)
conj:and(sticking-7, grabbed-16)
dobj(grabbed-16, it-17)
punct(sticking-7, ;-18)
nsubj(wrenched-20, it-19)
nsubj(casting-24, it-19)
parataxis(sticking-7, wrenched-20)
compound:prt(wrenched-20, off-21)
punct(wrenched-20, ,-22)
cc(wrenched-20, and-23)
parataxis(sticking-7, casting-24)
conj:and(wrenched-20, casting-24)
dobj(casting-24, it-25)
mark(pulled-28, down-26)
nsubj(pulled-28, I-27)
nsubj(yelled-35, I-27)
nsubj:xsubj(throw-43, I-27)
advcl(casting-24, pulled-28)
case(couple-31, in-29)
det(couple-31, a-30)
nmod:in(pulled-28, couple-31)
case(rifles-33, of-32)
nmod:of(couple-31, rifles-33)
cc(pulled-28, and-34)
advcl(casting-24, yelled-35)
conj:and(pulled-28, yelled-35)
case(troops-38, to-36)
det(troops-38, the-37)
nmod:to(yelled-35, troops-38)
case(gunpit-41, in-39)
det(gunpit-41, the-40)
nmod:in(yelled-35, gunpit-41)
mark(throw-43, to-42)
xcomp(yelled-35, throw-43)
dobj(throw-43, me-44)
advmod(throw-43, more-45)
punct(sticking-7, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#it

grab :: All of a sudden you 're grabbed . ''/''
root(ROOT-0, All-1)
case(sudden-4, of-2)
det(sudden-4, a-3)
nmod:of(All-1, sudden-4)
nsubjpass(grabbed-7, you-5)
auxpass(grabbed-7, 're-6)
acl:relcl(sudden-4, grabbed-7)
punct(All-1, .-8)
punct(All-1, ''-9)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: grab#you

grab :: Airborne , he grabs a roll of money from his back pocket and punches it toward the camera ./.
nsubj(grabs-4, Airborne-1)
punct(grabs-4, ,-2)
nsubj(grabs-4, he-3)
root(ROOT-0, grabs-4)
det(roll-6, a-5)
dobj(grabs-4, roll-6)
case(money-8, of-7)
nmod:of(roll-6, money-8)
case(pocket-12, from-9)
nmod:poss(pocket-12, his-10)
amod(pocket-12, back-11)
nmod:from(grabs-4, pocket-12)
cc(pocket-12, and-13)
nmod:from(grabs-4, punches-14)
conj:and(pocket-12, punches-14)
dep(pocket-12, it-15)
case(camera-18, toward-16)
det(camera-18, the-17)
nmod:toward(it-15, camera-18)
punct(grabs-4, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#money

grab :: One also-ran , Naruemol Sillapee , grabbed the tiara from newly crowned Saengravi Wan wilai 's coiffure , and clapped it on the curls of first runner-up Duangduan Chithaisong , while other contestants applauded ./.
nummod(also-ran-2, One-1)
nsubj(grabbed-7, also-ran-2)
nsubj(clapped-20, also-ran-2)
punct(also-ran-2, ,-3)
compound(Sillapee-5, Naruemol-4)
appos(also-ran-2, Sillapee-5)
punct(also-ran-2, ,-6)
root(ROOT-0, grabbed-7)
det(tiara-9, the-8)
dobj(grabbed-7, tiara-9)
case(coiffure-17, from-10)
advmod(crowned-12, newly-11)
amod(coiffure-17, crowned-12)
compound(wilai-15, Saengravi-13)
compound(wilai-15, Wan-14)
nmod:poss(coiffure-17, wilai-15)
case(wilai-15, 's-16)
nmod:from(grabbed-7, coiffure-17)
punct(grabbed-7, ,-18)
cc(grabbed-7, and-19)
conj:and(grabbed-7, clapped-20)
dobj(clapped-20, it-21)
case(curls-24, on-22)
det(curls-24, the-23)
nmod:on(clapped-20, curls-24)
case(Chithaisong-29, of-25)
amod(Chithaisong-29, first-26)
amod(Chithaisong-29, runner-up-27)
compound(Chithaisong-29, Duangduan-28)
nmod:of(curls-24, Chithaisong-29)
punct(clapped-20, ,-30)
mark(applauded-34, while-31)
amod(contestants-33, other-32)
nsubj(applauded-34, contestants-33)
advcl(clapped-20, applauded-34)
punct(grabbed-7, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#tiara

grab :: Suggest someone else grab a mitt and squat awhile ./.
root(ROOT-0, Suggest-1)
nsubj(grab-4, someone-2)
advmod(someone-2, else-3)
ccomp(Suggest-1, grab-4)
det(mitt-6, a-5)
dobj(grab-4, mitt-6)
cc(mitt-6, and-7)
dobj(grab-4, squat-8)
conj:and(mitt-6, squat-8)
advmod(grab-4, awhile-9)
punct(Suggest-1, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#mitt

grab :: Mr. Pavarotti sounded like a young man as he grabbed the hand of his old pal from Modena , Mirella Freni , and they both seemed to soar through the sets like the Chagall creatures , levitated by the force of Carlos Kleiber 's baton ./.
compound(Pavarotti-2, Mr.-1)
nsubj(sounded-3, Pavarotti-2)
root(ROOT-0, sounded-3)
case(man-7, like-4)
det(man-7, a-5)
amod(man-7, young-6)
nmod:like(sounded-3, man-7)
mark(grabbed-10, as-8)
nsubj(grabbed-10, he-9)
nsubj(levitated-37, he-9)
advcl(sounded-3, grabbed-10)
det(hand-12, the-11)
dobj(grabbed-10, hand-12)
case(pal-16, of-13)
nmod:poss(pal-16, his-14)
amod(pal-16, old-15)
nmod:of(hand-12, pal-16)
case(Modena-18, from-17)
nmod:from(grabbed-10, Modena-18)
punct(Modena-18, ,-19)
compound(Freni-21, Mirella-20)
appos(Modena-18, Freni-21)
punct(Modena-18, ,-22)
cc(grabbed-10, and-23)
nsubj(seemed-26, they-24)
nsubj:xsubj(soar-28, they-24)
dep(seemed-26, both-25)
advcl(sounded-3, seemed-26)
conj:and(grabbed-10, seemed-26)
mark(soar-28, to-27)
xcomp(seemed-26, soar-28)
case(sets-31, through-29)
det(sets-31, the-30)
nmod:through(soar-28, sets-31)
case(creatures-35, like-32)
det(creatures-35, the-33)
compound(creatures-35, Chagall-34)
nmod:like(sets-31, creatures-35)
punct(grabbed-10, ,-36)
advcl(sounded-3, levitated-37)
conj:and(grabbed-10, levitated-37)
case(force-40, by-38)
det(force-40, the-39)
nmod:by(levitated-37, force-40)
case(baton-45, of-41)
compound(Kleiber-43, Carlos-42)
nmod:poss(baton-45, Kleiber-43)
case(Kleiber-43, 's-44)
nmod:of(force-40, baton-45)
punct(sounded-3, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grab#pal

grasp :: The new Clore-backed directors viewed their counterparts as stodgy pillars of the San Francisco establishment who failed to grasp KaiserTech 's financial quandary ./.
det(directors-4, The-1)
amod(directors-4, new-2)
amod(directors-4, Clore-backed-3)
nsubj(viewed-5, directors-4)
root(ROOT-0, viewed-5)
nmod:poss(counterparts-7, their-6)
dobj(viewed-5, counterparts-7)
case(pillars-10, as-8)
amod(pillars-10, stodgy-9)
nmod:as(viewed-5, pillars-10)
case(establishment-15, of-11)
det(establishment-15, the-12)
compound(establishment-15, San-13)
compound(establishment-15, Francisco-14)
nmod:of(pillars-10, establishment-15)
nsubj(failed-17, establishment-15)
nsubj:xsubj(grasp-19, establishment-15)
ref(establishment-15, who-16)
acl:relcl(establishment-15, failed-17)
mark(grasp-19, to-18)
xcomp(failed-17, grasp-19)
nmod:poss(quandary-23, KaiserTech-20)
case(KaiserTech-20, 's-21)
amod(quandary-23, financial-22)
dobj(grasp-19, quandary-23)
punct(viewed-5, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#quandary

grasp :: They `` may have a hard time grasping '' that their offspring was n't `` somehow responsible . ''/''
nsubj(have-4, They-1)
punct(have-4, ``-2)
aux(have-4, may-3)
root(ROOT-0, have-4)
det(time-7, a-5)
amod(time-7, hard-6)
dobj(have-4, time-7)
acl(time-7, grasping-8)
punct(grasping-8, ''-9)
mark(responsible-17, that-10)
nmod:poss(offspring-12, their-11)
nsubj(responsible-17, offspring-12)
cop(responsible-17, was-13)
neg(responsible-17, n't-14)
punct(responsible-17, ``-15)
advmod(responsible-17, somehow-16)
ccomp(grasping-8, responsible-17)
punct(have-4, .-18)
punct(have-4, ''-19)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

grasp :: As has been the pattern in other standardized tests recently , younger students showed big strides in grasping basic information ./.
mark(pattern-5, As-1)
aux(pattern-5, has-2)
cop(pattern-5, been-3)
det(pattern-5, the-4)
advcl(showed-14, pattern-5)
case(tests-9, in-6)
amod(tests-9, other-7)
amod(tests-9, standardized-8)
nmod:in(pattern-5, tests-9)
advmod(pattern-5, recently-10)
punct(showed-14, ,-11)
amod(students-13, younger-12)
nsubj(showed-14, students-13)
root(ROOT-0, showed-14)
amod(strides-16, big-15)
dobj(showed-14, strides-16)
mark(grasping-18, in-17)
advcl(showed-14, grasping-18)
amod(information-20, basic-19)
dobj(grasping-18, information-20)
punct(showed-14, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#information

grasp :: Mr. Moyers tut-tuts about `` dirty '' political ads but never seems to grasp that his 1964 ads opened the era , not of `` negative '' media campaigns based on honest discussions of the issues , but of vicious , distortive propaganda ./.
compound(Moyers-2, Mr.-1)
nsubj(tut-tuts-3, Moyers-2)
nsubj(seems-12, Moyers-2)
nsubj:xsubj(grasp-14, Moyers-2)
root(ROOT-0, tut-tuts-3)
case(ads-9, about-4)
punct(ads-9, ``-5)
amod(ads-9, dirty-6)
punct(ads-9, ''-7)
amod(ads-9, political-8)
nmod:about(tut-tuts-3, ads-9)
cc(tut-tuts-3, but-10)
neg(seems-12, never-11)
conj:but(tut-tuts-3, seems-12)
mark(grasp-14, to-13)
xcomp(seems-12, grasp-14)
mark(opened-19, that-15)
nmod:poss(ads-18, his-16)
nummod(ads-18, 1964-17)
nsubj(opened-19, ads-18)
ccomp(grasp-14, opened-19)
det(era-21, the-20)
dobj(opened-19, era-21)
dobj(opened-19, era-21')
conj:but(era-21, era-21')
punct(era-21, ,-22)
neg(campaigns-29, not-23)
case(campaigns-29, of-24)
punct(campaigns-29, ``-25)
amod(campaigns-29, negative-26)
punct(campaigns-29, ''-27)
compound(campaigns-29, media-28)
nmod:of(era-21, campaigns-29)
case(discussions-33, based-30)
mwe(based-30, on-31)
amod(discussions-33, honest-32)
nmod:based_on(campaigns-29, discussions-33)
case(issues-36, of-34)
det(issues-36, the-35)
nmod:of(discussions-33, issues-36)
punct(campaigns-29, ,-37)
cc(era-21, but-38)
case(propaganda-43, of-39)
amod(propaganda-43, vicious-40)
punct(propaganda-43, ,-41)
amod(propaganda-43, distortive-42)
nmod:of(era-21', propaganda-43)
punct(tut-tuts-3, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#moyers

grasp :: He fails to properly grasp the nature of the frontier culture , and only superficially understands the dilemma of the native people ./.
nsubj(fails-2, He-1)
nsubj:xsubj(grasp-5, He-1)
nsubj(understands-16, He-1)
root(ROOT-0, fails-2)
mark(grasp-5, to-3)
advmod(grasp-5, properly-4)
xcomp(fails-2, grasp-5)
det(nature-7, the-6)
dobj(grasp-5, nature-7)
case(culture-11, of-8)
det(culture-11, the-9)
compound(culture-11, frontier-10)
nmod:of(nature-7, culture-11)
punct(fails-2, ,-12)
cc(fails-2, and-13)
advmod(superficially-15, only-14)
advmod(understands-16, superficially-15)
conj:and(fails-2, understands-16)
det(dilemma-18, the-17)
dobj(understands-16, dilemma-18)
case(people-22, of-19)
det(people-22, the-20)
amod(people-22, native-21)
nmod:of(dilemma-18, people-22)
punct(fails-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#culture

grasp :: I hope not too many of your readers will lack the vision to grasp the message and benefit conferred ./.
nsubj(hope-2, I-1)
root(ROOT-0, hope-2)
neg(many-5, not-3)
advmod(many-5, too-4)
nsubj(lack-10, many-5)
case(readers-8, of-6)
nmod:poss(readers-8, your-7)
nmod:of(many-5, readers-8)
aux(lack-10, will-9)
ccomp(hope-2, lack-10)
det(vision-12, the-11)
dobj(lack-10, vision-12)
mark(grasp-14, to-13)
acl(vision-12, grasp-14)
det(message-16, the-15)
dobj(grasp-14, message-16)
cc(lack-10, and-17)
nsubj(conferred-19, benefit-18)
ccomp(hope-2, conferred-19)
conj:and(lack-10, conferred-19)
punct(hope-2, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#message

grasp :: But he grasped the potential of putting the two together ./.
cc(grasped-3, But-1)
nsubj(grasped-3, he-2)
root(ROOT-0, grasped-3)
det(potential-5, the-4)
dobj(grasped-3, potential-5)
mark(putting-7, of-6)
acl(potential-5, putting-7)
det(two-9, the-8)
dobj(putting-7, two-9)
advmod(putting-7, together-10)
punct(grasped-3, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#potential

grasp :: One is that FDR was too unyielding toward the Japanese , and might have reached an understanding with them if he had grasped the nature of Japanese society and politics more adequately ./.
nsubj(is-2, One-1)
root(ROOT-0, is-2)
mark(unyielding-7, that-3)
nsubj(unyielding-7, FDR-4)
nsubj(reached-15, FDR-4)
cop(unyielding-7, was-5)
advmod(unyielding-7, too-6)
ccomp(is-2, unyielding-7)
case(Japanese-10, toward-8)
det(Japanese-10, the-9)
nmod:toward(unyielding-7, Japanese-10)
punct(unyielding-7, ,-11)
cc(unyielding-7, and-12)
aux(reached-15, might-13)
aux(reached-15, have-14)
ccomp(is-2, reached-15)
conj:and(unyielding-7, reached-15)
det(understanding-17, an-16)
dobj(reached-15, understanding-17)
case(them-19, with-18)
nmod:with(understanding-17, them-19)
mark(grasped-23, if-20)
nsubj(grasped-23, he-21)
aux(grasped-23, had-22)
advcl(reached-15, grasped-23)
det(nature-25, the-24)
dobj(grasped-23, nature-25)
case(society-28, of-26)
amod(society-28, Japanese-27)
nmod:of(nature-25, society-28)
cc(society-28, and-29)
nmod:of(nature-25, politics-30)
conj:and(society-28, politics-30)
advmod(adequately-32, more-31)
advmod(grasped-23, adequately-32)
punct(is-2, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#society

grasp :: I punch my fist in the air , `` Rocky '' -style , to indicate that I 've grasped the concept ./.
nsubj(punch-2, I-1)
root(ROOT-0, punch-2)
nmod:poss(fist-4, my-3)
dobj(punch-2, fist-4)
case(air-7, in-5)
det(air-7, the-6)
nmod:in(punch-2, air-7)
punct(punch-2, ,-8)
punct(punch-2, ``-9)
dobj(punch-2, Rocky-10)
punct(punch-2, ''-11)
punct(punch-2, --12)
dobj(punch-2, style-13)
punct(style-13, ,-14)
mark(indicate-16, to-15)
acl(style-13, indicate-16)
mark(grasped-20, that-17)
nsubj(grasped-20, I-18)
aux(grasped-20, 've-19)
ccomp(indicate-16, grasped-20)
det(concept-22, the-21)
dobj(grasped-20, concept-22)
punct(punch-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#concept

grasp :: There are truths of which we shall remain unaware forever because we do n't have the intelligence to grasp them ./.
expl(are-2, There-1)
root(ROOT-0, are-2)
nsubj(are-2, truths-3)
nmod:of(remain-8, truths-3)
case(which-5, of-4)
ref(truths-3, which-5)
nsubj(remain-8, we-6)
aux(remain-8, shall-7)
acl:relcl(truths-3, remain-8)
xcomp(remain-8, unaware-9)
advmod(remain-8, forever-10)
mark(have-15, because-11)
nsubj(have-15, we-12)
aux(have-15, do-13)
neg(have-15, n't-14)
advcl(remain-8, have-15)
det(intelligence-17, the-16)
dobj(have-15, intelligence-17)
mark(grasp-19, to-18)
acl(intelligence-17, grasp-19)
dobj(grasp-19, them-20)
punct(are-2, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#them

grasp :: Donell -RRB- is guilty , and he is obviously grasping at straws in terms of what defense he can use . ''/''
nsubj(guilty-4, Donell-1)
punct(guilty-4, -RRB--2)
cop(guilty-4, is-3)
root(ROOT-0, guilty-4)
punct(guilty-4, ,-5)
cc(guilty-4, and-6)
nsubj(grasping-10, he-7)
aux(grasping-10, is-8)
advmod(grasping-10, obviously-9)
conj:and(guilty-4, grasping-10)
case(straws-12, at-11)
nmod:at(grasping-10, straws-12)
case(terms-14, in-13)
nmod:in(grasping-10, terms-14)
case(defense-17, of-15)
det(defense-17, what-16)
nmod:of(terms-14, defense-17)
nsubj(use-20, he-18)
aux(use-20, can-19)
acl:relcl(defense-17, use-20)
punct(guilty-4, .-21)
punct(guilty-4, ''-22)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: grasp#he

grasp :: Authors are starting to grasp this simple fact ./.
nsubj(starting-3, Authors-1)
nsubj:xsubj(grasp-5, Authors-1)
aux(starting-3, are-2)
root(ROOT-0, starting-3)
mark(grasp-5, to-4)
xcomp(starting-3, grasp-5)
det(fact-8, this-6)
amod(fact-8, simple-7)
dobj(grasp-5, fact-8)
punct(starting-3, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#fact

grasp :: Although the editorial mentioned the deficiencies of the traditional , peer-review method of funding university research , it nevertheless failed to grasp the underlying realities that now have impelled Congress to fund university projects directly ./.
mark(mentioned-4, Although-1)
det(editorial-3, the-2)
nsubj(mentioned-4, editorial-3)
advcl(failed-20, mentioned-4)
det(deficiencies-6, the-5)
dobj(mentioned-4, deficiencies-6)
case(method-12, of-7)
det(method-12, the-8)
amod(method-12, traditional-9)
punct(method-12, ,-10)
amod(method-12, peer-review-11)
nmod:of(deficiencies-6, method-12)
mark(funding-14, of-13)
acl(method-12, funding-14)
compound(research-16, university-15)
dobj(funding-14, research-16)
punct(failed-20, ,-17)
nsubj(failed-20, it-18)
nsubj:xsubj(grasp-22, it-18)
advmod(failed-20, nevertheless-19)
root(ROOT-0, failed-20)
mark(grasp-22, to-21)
xcomp(failed-20, grasp-22)
det(realities-25, the-23)
amod(realities-25, underlying-24)
dobj(grasp-22, realities-25)
nsubj(impelled-29, realities-25)
ref(realities-25, that-26)
advmod(impelled-29, now-27)
aux(impelled-29, have-28)
acl:relcl(realities-25, impelled-29)
dobj(impelled-29, Congress-30)
case(projects-34, to-31)
compound(projects-34, fund-32)
compound(projects-34, university-33)
nmod:to(impelled-29, projects-34)
advmod(impelled-29, directly-35)
punct(failed-20, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#realities

grasp :: Gleeful opposition leaders have been quick to grasp the irony of the protests: Monimbo was the site of one of the first major uprisings against Anastasio Somoza , the hated dictator , a decade ago ./.
amod(leaders-3, Gleeful-1)
compound(leaders-3, opposition-2)
nsubj(quick-6, leaders-3)
nsubj:xsubj(grasp-8, leaders-3)
aux(quick-6, have-4)
cop(quick-6, been-5)
root(ROOT-0, quick-6)
mark(grasp-8, to-7)
xcomp(quick-6, grasp-8)
det(irony-10, the-9)
dobj(grasp-8, irony-10)
case(protests-13, of-11)
det(protests-13, the-12)
nmod:of(irony-10, protests-13)
punct(quick-6, :-14)
nsubj(site-18, Monimbo-15)
cop(site-18, was-16)
det(site-18, the-17)
parataxis(quick-6, site-18)
case(one-20, of-19)
nmod:of(site-18, one-20)
case(uprisings-25, of-21)
det(uprisings-25, the-22)
amod(uprisings-25, first-23)
amod(uprisings-25, major-24)
nmod:of(one-20, uprisings-25)
case(Somoza-28, against-26)
compound(Somoza-28, Anastasio-27)
nmod:against(uprisings-25, Somoza-28)
punct(Somoza-28, ,-29)
det(dictator-32, the-30)
amod(dictator-32, hated-31)
appos(Somoza-28, dictator-32)
punct(Somoza-28, ,-33)
det(decade-35, a-34)
nmod:npmod(ago-36, decade-35)
advmod(one-20, ago-36)
punct(quick-6, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#protests

grasp :: Given a choice between two such frail reeds , Western Europe , led by West Germany , is likely to grasp at the chimera of Soviet good will rather than risk relying on increasingly remote and dubious American protection ./.
case(choice-3, Given-1)
det(choice-3, a-2)
nmod:given(likely-19, choice-3)
case(reeds-8, between-4)
nummod(reeds-8, two-5)
amod(reeds-8, such-6)
amod(reeds-8, frail-7)
nmod:between(choice-3, reeds-8)
punct(reeds-8, ,-9)
compound(Europe-11, Western-10)
appos(reeds-8, Europe-11)
punct(reeds-8, ,-12)
acl(choice-3, led-13)
case(Germany-16, by-14)
compound(Germany-16, West-15)
nmod:by(led-13, Germany-16)
punct(likely-19, ,-17)
cop(likely-19, is-18)
root(ROOT-0, likely-19)
mark(grasp-21, to-20)
xcomp(likely-19, grasp-21)
case(chimera-24, at-22)
det(chimera-24, the-23)
nmod:at(grasp-21, chimera-24)
case(will-28, of-25)
amod(will-28, Soviet-26)
amod(will-28, good-27)
nmod:of(chimera-24, will-28)
cc(grasp-21, rather-29)
mwe(rather-29, than-30)
xcomp(likely-19, risk-31)
conj:negcc(grasp-21, risk-31)
xcomp(risk-31, relying-32)
case(protection-39, on-33)
advmod(remote-35, increasingly-34)
amod(protection-39, remote-35)
cc(remote-35, and-36)
conj:and(remote-35, dubious-37)
amod(protection-39, dubious-37)
amod(protection-39, American-38)
nmod:on(relying-32, protection-39)
punct(likely-19, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#chimera

grasp :: For Americans to fail to grasp the significance of these developments is to invite greater and more unpleasant surprises than we 've had so far ./.
mark(fail-4, For-1)
nsubj(fail-4, Americans-2)
nsubj:xsubj(grasp-6, Americans-2)
mark(fail-4, to-3)
root(ROOT-0, fail-4)
mark(grasp-6, to-5)
xcomp(fail-4, grasp-6)
det(significance-8, the-7)
dobj(grasp-6, significance-8)
case(developments-11, of-9)
det(developments-11, these-10)
nmod:of(significance-8, developments-11)
dep(fail-4, is-12)
mark(invite-14, to-13)
xcomp(is-12, invite-14)
amod(surprises-19, greater-15)
cc(greater-15, and-16)
advmod(unpleasant-18, more-17)
conj:and(greater-15, unpleasant-18)
amod(surprises-19, unpleasant-18)
dobj(invite-14, surprises-19)
mark(had-23, than-20)
nsubj(had-23, we-21)
aux(had-23, 've-22)
advcl(invite-14, had-23)
advmod(far-25, so-24)
advmod(had-23, far-25)
punct(fail-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#developments

grasp :: But if the Fed and other central banks and treasuries can this time grasp the principle , the dollar 's summer rally could be an important rendezvous for the world 's monetary system ./.
cc(rendezvous-27, But-1)
mark(grasp-14, if-2)
det(Fed-4, the-3)
nsubj(grasp-14, Fed-4)
cc(Fed-4, and-5)
amod(banks-8, other-6)
amod(banks-8, central-7)
conj:and(Fed-4, banks-8)
nsubj(grasp-14, banks-8)
cc(Fed-4, and-9)
conj:and(Fed-4, treasuries-10)
nsubj(grasp-14, treasuries-10)
aux(grasp-14, can-11)
det(time-13, this-12)
nsubj(grasp-14, time-13)
advcl(rendezvous-27, grasp-14)
det(principle-16, the-15)
dobj(grasp-14, principle-16)
punct(rendezvous-27, ,-17)
det(dollar-19, the-18)
nmod:poss(rally-22, dollar-19)
case(dollar-19, 's-20)
compound(rally-22, summer-21)
nsubj(rendezvous-27, rally-22)
aux(rendezvous-27, could-23)
cop(rendezvous-27, be-24)
det(rendezvous-27, an-25)
amod(rendezvous-27, important-26)
root(ROOT-0, rendezvous-27)
case(system-33, for-28)
det(world-30, the-29)
nmod:poss(system-33, world-30)
case(world-30, 's-31)
amod(system-33, monetary-32)
nmod:for(rendezvous-27, system-33)
punct(rendezvous-27, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#principle

grasp :: As a Journal editorial writer in the 1970s , he was among the first to grasp the essentials of supply side economics ./.
case(writer-5, As-1)
det(writer-5, a-2)
compound(writer-5, Journal-3)
compound(writer-5, editorial-4)
nmod:as(first-14, writer-5)
case(1970s-8, in-6)
det(1970s-8, the-7)
nmod:in(writer-5, 1970s-8)
punct(first-14, ,-9)
nsubj(first-14, he-10)
nsubj:xsubj(grasp-16, he-10)
cop(first-14, was-11)
case(first-14, among-12)
det(first-14, the-13)
root(ROOT-0, first-14)
mark(grasp-16, to-15)
xcomp(first-14, grasp-16)
det(essentials-18, the-17)
dobj(grasp-16, essentials-18)
case(economics-22, of-19)
compound(economics-22, supply-20)
compound(economics-22, side-21)
nmod:of(essentials-18, economics-22)
punct(first-14, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#economics

grasp :: She was really grasping at everyone '' who could make her feel better about his safety , Ms. Crispen said ./.
nsubj(grasping-4, She-1)
aux(grasping-4, was-2)
advmod(grasping-4, really-3)
ccomp(said-20, grasping-4)
case(everyone-6, at-5)
nmod:at(grasping-4, everyone-6)
nsubj(make-10, everyone-6)
punct(everyone-6, ''-7)
ref(everyone-6, who-8)
aux(make-10, could-9)
acl:relcl(everyone-6, make-10)
nmod:poss(feel-12, her-11)
dobj(make-10, feel-12)
advmod(feel-12, better-13)
case(safety-16, about-14)
nmod:poss(safety-16, his-15)
nmod:about(better-13, safety-16)
punct(said-20, ,-17)
compound(Crispen-19, Ms.-18)
nsubj(said-20, Crispen-19)
root(ROOT-0, said-20)
punct(said-20, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#she

grasp :: Some executives never seem to grasp this precept ./.
det(executives-2, Some-1)
nsubj(seem-4, executives-2)
nsubj:xsubj(grasp-6, executives-2)
neg(seem-4, never-3)
root(ROOT-0, seem-4)
mark(grasp-6, to-5)
xcomp(seem-4, grasp-6)
det(precept-8, this-7)
dobj(grasp-6, precept-8)
punct(seem-4, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#precept

grasp :: It had wound itself around the erect herb many times , to the latter 's disadvantage , and now its upper tendrils were grasping the air , as if seeking an atmospheric foothold ./.
nsubj(wound-3, It-1)
aux(wound-3, had-2)
root(ROOT-0, wound-3)
dobj(wound-3, itself-4)
case(herb-8, around-5)
det(herb-8, the-6)
amod(herb-8, erect-7)
nmod:around(wound-3, herb-8)
amod(times-10, many-9)
nmod:tmod(wound-3, times-10)
punct(wound-3, ,-11)
case(disadvantage-16, to-12)
det(latter-14, the-13)
nmod:poss(disadvantage-16, latter-14)
case(latter-14, 's-15)
nmod:to(wound-3, disadvantage-16)
punct(wound-3, ,-17)
cc(wound-3, and-18)
advmod(grasping-24, now-19)
nmod:poss(tendrils-22, its-20)
amod(tendrils-22, upper-21)
nsubj(grasping-24, tendrils-22)
aux(grasping-24, were-23)
conj:and(wound-3, grasping-24)
det(air-26, the-25)
dobj(grasping-24, air-26)
punct(grasping-24, ,-27)
mark(seeking-30, as-28)
mwe(as-28, if-29)
advcl(grasping-24, seeking-30)
det(foothold-33, an-31)
amod(foothold-33, atmospheric-32)
dobj(seeking-30, foothold-33)
punct(wound-3, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#air

grasp :: As the struggle enters its final weekend , any one of the top contenders could grasp his way to the top of the greasy pole ./.
mark(enters-4, As-1)
det(struggle-3, the-2)
nsubj(enters-4, struggle-3)
advcl(grasp-16, enters-4)
nmod:poss(weekend-7, its-5)
amod(weekend-7, final-6)
dobj(enters-4, weekend-7)
punct(grasp-16, ,-8)
det(one-10, any-9)
nsubj(grasp-16, one-10)
case(contenders-14, of-11)
det(contenders-14, the-12)
amod(contenders-14, top-13)
nmod:of(one-10, contenders-14)
aux(grasp-16, could-15)
root(ROOT-0, grasp-16)
nmod:poss(way-18, his-17)
dobj(grasp-16, way-18)
case(top-21, to-19)
det(top-21, the-20)
nmod:to(grasp-16, top-21)
case(pole-25, of-22)
det(pole-25, the-23)
amod(pole-25, greasy-24)
nmod:of(top-21, pole-25)
punct(grasp-16, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#way

grasp :: Ravin Caldwell , an obscure rookie special-teams player from Arkansas , finally grasped it , probably saving his team 's bacon ./.
compound(Caldwell-2, Ravin-1)
nsubj(grasped-13, Caldwell-2)
punct(Caldwell-2, ,-3)
det(player-8, an-4)
amod(player-8, obscure-5)
compound(player-8, rookie-6)
compound(player-8, special-teams-7)
appos(Caldwell-2, player-8)
case(Arkansas-10, from-9)
nmod:from(player-8, Arkansas-10)
punct(Caldwell-2, ,-11)
advmod(grasped-13, finally-12)
root(ROOT-0, grasped-13)
dobj(grasped-13, it-14)
punct(grasped-13, ,-15)
advmod(saving-17, probably-16)
advcl(grasped-13, saving-17)
nmod:poss(team-19, his-18)
nmod:poss(bacon-21, team-19)
case(team-19, 's-20)
dobj(saving-17, bacon-21)
punct(grasped-13, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: grasp#it

kick :: Republicans expect Mr. Bush to emulate the Reagan themes of patriotism and military strength -- or , as 41-year-old Charles Murdock puts it , to keep `` kicking the dog and waving the flag . ''/''
nsubj(expect-2, Republicans-1)
root(ROOT-0, expect-2)
compound(Bush-4, Mr.-3)
dobj(expect-2, Bush-4)
nsubj:xsubj(emulate-6, Bush-4)
mark(emulate-6, to-5)
xcomp(expect-2, emulate-6)
det(themes-9, the-7)
compound(themes-9, Reagan-8)
dobj(emulate-6, themes-9)
case(patriotism-11, of-10)
nmod:of(themes-9, patriotism-11)
cc(patriotism-11, and-12)
amod(strength-14, military-13)
nmod:of(themes-9, strength-14)
conj:and(patriotism-11, strength-14)
punct(themes-9, ---15)
cc(themes-9, or-16)
punct(themes-9, ,-17)
mark(puts-22, as-18)
amod(Murdock-21, 41-year-old-19)
compound(Murdock-21, Charles-20)
nsubj(puts-22, Murdock-21)
dobj(emulate-6, puts-22)
conj:or(themes-9, puts-22)
dobj(puts-22, it-23)
punct(puts-22, ,-24)
mark(keep-26, to-25)
advcl(puts-22, keep-26)
punct(keep-26, ``-27)
ccomp(keep-26, kicking-28)
det(dog-30, the-29)
dobj(kicking-28, dog-30)
cc(kicking-28, and-31)
ccomp(keep-26, waving-32)
conj:and(kicking-28, waving-32)
det(flag-34, the-33)
dobj(waving-32, flag-34)
punct(expect-2, .-35)
punct(expect-2, ''-36)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kick#dog

kick :: C-Span 's call-in shows had a separate number for international calls , and the signal was being kicked back to Europe via satellite ./.
nmod:poss(shows-4, C-Span-1)
case(C-Span-1, 's-2)
compound(shows-4, call-in-3)
nsubj(had-5, shows-4)
root(ROOT-0, had-5)
det(number-8, a-6)
amod(number-8, separate-7)
dobj(had-5, number-8)
case(calls-11, for-9)
amod(calls-11, international-10)
nmod:for(number-8, calls-11)
punct(had-5, ,-12)
cc(had-5, and-13)
det(signal-15, the-14)
nsubjpass(kicked-18, signal-15)
aux(kicked-18, was-16)
auxpass(kicked-18, being-17)
conj:and(had-5, kicked-18)
advmod(kicked-18, back-19)
case(Europe-21, to-20)
nmod:to(back-19, Europe-21)
case(satellite-23, via-22)
nmod:via(kicked-18, satellite-23)
punct(had-5, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#signal

kick :: `` I thought I did a good job and got her home , '' Dr. Gardner says , `` and they turn around and kick me in the teeth . ''/''
punct(says-17, ``-1)
nsubj(thought-3, I-2)
nsubj(got-10, I-2)
ccomp(says-17, thought-3)
nsubj(did-5, I-4)
ccomp(thought-3, did-5)
det(job-8, a-6)
amod(job-8, good-7)
dobj(did-5, job-8)
cc(thought-3, and-9)
conj:and(thought-3, got-10)
ccomp(says-17, got-10)
nmod:poss(home-12, her-11)
dobj(got-10, home-12)
punct(says-17, ,-13)
punct(says-17, ''-14)
compound(Gardner-16, Dr.-15)
nsubj(says-17, Gardner-16)
root(ROOT-0, says-17)
punct(says-17, ,-18)
punct(says-17, ``-19)
cc(says-17, and-20)
nsubj(turn-22, they-21)
nsubj(kick-25, they-21)
conj:and(says-17, turn-22)
advmod(turn-22, around-23)
cc(turn-22, and-24)
conj:and(says-17, kick-25)
conj:and(turn-22, kick-25)
dobj(kick-25, me-26)
case(teeth-29, in-27)
det(teeth-29, the-28)
nmod:in(kick-25, teeth-29)
punct(says-17, .-30)
punct(says-17, ''-31)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kick#me

kick :: It 's no longer mandatory that Indiana patronage employees kick back 2 % of their salaries to their political party ./.
nsubj(mandatory-5, It-1)
cop(mandatory-5, 's-2)
neg(longer-4, no-3)
advmod(mandatory-5, longer-4)
root(ROOT-0, mandatory-5)
mark(kick-10, that-6)
compound(employees-9, Indiana-7)
compound(employees-9, patronage-8)
nsubj(kick-10, employees-9)
ccomp(mandatory-5, kick-10)
advmod(kick-10, back-11)
nummod(%-13, 2-12)
nmod:npmod(back-11, %-13)
case(salaries-16, of-14)
nmod:poss(salaries-16, their-15)
nmod:of(%-13, salaries-16)
case(party-20, to-17)
nmod:poss(party-20, their-18)
amod(party-20, political-19)
nmod:to(kick-10, party-20)
punct(mandatory-5, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#employees

kick :: `` I do n't want to see you around the neighborhood , or I 'm going to kick your ass , '' Jesus Feliciano , a Guardian Angel accompanying a Thread group , shouts at a short , wiry and bearded crack smoker sitting on a dingy stoop ./.
punct(shouts-34, ``-1)
nsubj(want-5, I-2)
nsubj:xsubj(see-7, I-2)
aux(want-5, do-3)
neg(want-5, n't-4)
ccomp(shouts-34, want-5)
mark(see-7, to-6)
xcomp(want-5, see-7)
dobj(see-7, you-8)
case(neighborhood-11, around-9)
det(neighborhood-11, the-10)
nmod:around(see-7, neighborhood-11)
punct(want-5, ,-12)
cc(want-5, or-13)
nsubj(going-16, I-14)
nsubj:xsubj(kick-18, I-14)
aux(going-16, 'm-15)
conj:or(want-5, going-16)
ccomp(shouts-34, going-16)
mark(kick-18, to-17)
xcomp(going-16, kick-18)
nmod:poss(ass-20, your-19)
dobj(kick-18, ass-20)
punct(shouts-34, ,-21)
punct(shouts-34, ''-22)
compound(Feliciano-24, Jesus-23)
nsubj(shouts-34, Feliciano-24)
punct(Feliciano-24, ,-25)
det(Angel-28, a-26)
compound(Angel-28, Guardian-27)
appos(Feliciano-24, Angel-28)
acl(Angel-28, accompanying-29)
det(group-32, a-30)
compound(group-32, Thread-31)
dobj(accompanying-29, group-32)
punct(Feliciano-24, ,-33)
root(ROOT-0, shouts-34)
case(smoker-43, at-35)
det(smoker-43, a-36)
amod(smoker-43, short-37)
punct(short-37, ,-38)
conj:and(short-37, wiry-39)
amod(smoker-43, wiry-39)
cc(short-37, and-40)
conj:and(short-37, bearded-41)
amod(smoker-43, bearded-41)
compound(smoker-43, crack-42)
nmod:at(shouts-34, smoker-43)
acl(smoker-43, sitting-44)
case(stoop-48, on-45)
det(stoop-48, a-46)
amod(stoop-48, dingy-47)
nmod:on(sitting-44, stoop-48)
punct(shouts-34, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#ass

kick :: Three years ago the airline kicked Mr. Landau and his 1.5 million miles out of the program for allegedly breaking the rules ./.
nummod(years-2, Three-1)
nmod:npmod(ago-3, years-2)
advmod(kicked-6, ago-3)
det(airline-5, the-4)
nsubj(kicked-6, airline-5)
root(ROOT-0, kicked-6)
compound(Landau-8, Mr.-7)
dobj(kicked-6, Landau-8)
cc(Landau-8, and-9)
nmod:poss(miles-13, his-10)
compound(million-12, 1.5-11)
nummod(miles-13, million-12)
dobj(kicked-6, miles-13)
conj:and(Landau-8, miles-13)
case(program-17, out-14)
mwe(out-14, of-15)
det(program-17, the-16)
nmod:out_of(miles-13, program-17)
mark(breaking-20, for-18)
advmod(breaking-20, allegedly-19)
advcl(kicked-6, breaking-20)
det(rules-22, the-21)
dobj(breaking-20, rules-22)
punct(kicked-6, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#landau

kick :: `` He 's making fun of them and kicking their butts . ''/''
root(ROOT-0, ``-1)
nsubj(making-4, He-2)
nsubj(kicking-9, He-2)
aux(making-4, 's-3)
root(``-1, making-4)
dobj(making-4, fun-5)
case(them-7, of-6)
nmod:of(fun-5, them-7)
cc(making-4, and-8)
root(``-1, kicking-9)
conj:and(making-4, kicking-9)
nmod:poss(butts-11, their-10)
dobj(kicking-9, butts-11)
punct(making-4, .-12)
punct(making-4, ''-13)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kick#butts

kick :: Scattered arbitrage trading between stocks and stock-index futures kicked in early in the day , further depressing stock and futures prices , traders said ./.
amod(trading-3, Scattered-1)
compound(trading-3, arbitrage-2)
nsubj(kicked-9, trading-3)
case(stocks-5, between-4)
nmod:between(trading-3, stocks-5)
cc(stocks-5, and-6)
compound(futures-8, stock-index-7)
nmod:between(trading-3, futures-8)
conj:and(stocks-5, futures-8)
ccomp(said-24, kicked-9)
case(early-11, in-10)
advcl(kicked-9, early-11)
case(day-14, in-12)
det(day-14, the-13)
nmod:in(kicked-9, day-14)
punct(kicked-9, ,-15)
advmod(depressing-17, further-16)
advcl(kicked-9, depressing-17)
compound(prices-21, stock-18)
cc(stock-18, and-19)
conj:and(stock-18, futures-20)
compound(prices-21, futures-20)
dobj(depressing-17, prices-21)
punct(said-24, ,-22)
nsubj(said-24, traders-23)
root(ROOT-0, said-24)
punct(said-24, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#trading

kick :: The irony is that in 1968 Mr. Ford had ousted Mr. Miller as president of Ford -- kicking him upstairs , as vice chairman -- to make room for Semon E . `` Bunkie '' Knudsen , whom he hired away from General Motors Corp ./.
det(irony-2, The-1)
nsubj(is-3, irony-2)
root(ROOT-0, is-3)
mark(ousted-10, that-4)
case(1968-6, in-5)
nmod:in(ousted-10, 1968-6)
compound(Ford-8, Mr.-7)
nsubj(ousted-10, Ford-8)
aux(ousted-10, had-9)
ccomp(is-3, ousted-10)
compound(Miller-12, Mr.-11)
dobj(ousted-10, Miller-12)
case(president-14, as-13)
nmod:as(ousted-10, president-14)
case(Ford-16, of-15)
nmod:of(president-14, Ford-16)
punct(ousted-10, ---17)
dep(ousted-10, kicking-18)
dobj(kicking-18, him-19)
advmod(kicking-18, upstairs-20)
punct(kicking-18, ,-21)
case(chairman-24, as-22)
compound(chairman-24, vice-23)
nmod:as(kicking-18, chairman-24)
punct(kicking-18, ---25)
mark(make-27, to-26)
advcl(kicking-18, make-27)
dobj(make-27, room-28)
case(E-31, for-29)
compound(E-31, Semon-30)
nmod:for(room-28, E-31)
punct(is-3, .-32)
punct(Knudsen-4, ``-1)
compound(Knudsen-4, Bunkie-2)
punct(Knudsen-4, ''-3)
root(ROOT-0, Knudsen-4)
dobj(hired-8, Knudsen-4)
punct(Knudsen-4, ,-5)
ref(Knudsen-4, whom-6)
nsubj(hired-8, he-7)
acl:relcl(Knudsen-4, hired-8)
case(Corp-13, away-9)
mwe(away-9, from-10)
compound(Corp-13, General-11)
compound(Corp-13, Motors-12)
nmod:away_from(hired-8, Corp-13)
punct(Knudsen-4, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#him

kick :: With their boss routinely delving into the nuts and bolts of prospective projects -LRB- he likes to `` kick the tires , '' says a colleague -RRB- , Mr. Schwartz 's team of 20 people spends roughly two-thirds of their time analyzing alternative proposals ./.
mark(delving-5, With-1)
nmod:poss(boss-3, their-2)
nsubj(delving-5, boss-3)
advmod(delving-5, routinely-4)
csubj(says-24, delving-5)
case(nuts-8, into-6)
det(nuts-8, the-7)
nmod:into(delving-5, nuts-8)
cc(nuts-8, and-9)
nmod:into(delving-5, bolts-10)
conj:and(nuts-8, bolts-10)
case(projects-13, of-11)
amod(projects-13, prospective-12)
nmod:of(nuts-8, projects-13)
punct(likes-16, -LRB--14)
nsubj(likes-16, he-15)
nsubj:xsubj(kick-19, he-15)
dep(says-24, likes-16)
mark(kick-19, to-17)
punct(kick-19, ``-18)
xcomp(likes-16, kick-19)
det(tires-21, the-20)
dobj(kick-19, tires-21)
punct(likes-16, ,-22)
punct(likes-16, ''-23)
root(ROOT-0, says-24)
det(colleague-26, a-25)
nsubj(says-24, colleague-26)
punct(colleague-26, -RRB--27)
punct(colleague-26, ,-28)
compound(Schwartz-30, Mr.-29)
nmod:poss(team-32, Schwartz-30)
case(Schwartz-30, 's-31)
nsubj(spends-36, team-32)
case(people-35, of-33)
nummod(people-35, 20-34)
nmod:of(team-32, people-35)
acl:relcl(colleague-26, spends-36)
advmod(two-thirds-38, roughly-37)
dobj(spends-36, two-thirds-38)
case(time-41, of-39)
nmod:poss(time-41, their-40)
nmod:of(two-thirds-38, time-41)
xcomp(spends-36, analyzing-42)
amod(proposals-44, alternative-43)
dobj(analyzing-42, proposals-44)
punct(says-24, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#tires

kick :: These interludes show Asta kicking her heels while bicycling in the country , splish-splashing merrily in a pond ; they have the emotional depth of a Tampax commercial , which they resemble ./.
det(interludes-2, These-1)
nsubj(show-3, interludes-2)
root(ROOT-0, show-3)
nsubj(kicking-5, Asta-4)
ccomp(show-3, kicking-5)
nmod:poss(heels-7, her-6)
dobj(kicking-5, heels-7)
advmod(kicking-5, while-8)
dep(while-8, bicycling-9)
case(country-12, in-10)
det(country-12, the-11)
nmod:in(bicycling-9, country-12)
punct(bicycling-9, ,-13)
amod(bicycling-9, splish-splashing-14)
advmod(splish-splashing-14, merrily-15)
case(pond-18, in-16)
det(pond-18, a-17)
nmod:in(splish-splashing-14, pond-18)
punct(bicycling-9, ;-19)
nsubj(have-21, they-20)
parataxis(bicycling-9, have-21)
det(depth-24, the-22)
amod(depth-24, emotional-23)
dobj(have-21, depth-24)
case(commercial-28, of-25)
det(commercial-28, a-26)
compound(commercial-28, Tampax-27)
nmod:of(depth-24, commercial-28)
dobj(resemble-32, commercial-28)
punct(commercial-28, ,-29)
ref(commercial-28, which-30)
nsubj(resemble-32, they-31)
acl:relcl(commercial-28, resemble-32)
punct(show-3, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#heels

kick :: `` The McLaughlin Group '' will kick things off with a pre-convention tussle Friday night ; CNN will add round-the-clock reporting to its gavel-to-gavel coverage ; the networks will try new gimmicks , such as NBC 's plan to conduct dialogues between delegates and voters elsewhere in the country ; public TV will feature nightly wrapups by the regulars from `` Washington Week in Review . ''/''
punct(kick-7, ``-1)
det(Group-4, The-2)
compound(Group-4, McLaughlin-3)
nsubj(kick-7, Group-4)
punct(kick-7, ''-5)
aux(kick-7, will-6)
root(ROOT-0, kick-7)
dobj(kick-7, things-8)
compound:prt(kick-7, off-9)
case(tussle-13, with-10)
det(tussle-13, a-11)
amod(tussle-13, pre-convention-12)
nmod:with(kick-7, tussle-13)
compound(night-15, Friday-14)
nmod:tmod(kick-7, night-15)
punct(kick-7, ;-16)
nsubj(add-19, CNN-17)
aux(add-19, will-18)
parataxis(kick-7, add-19)
amod(reporting-21, round-the-clock-20)
dobj(add-19, reporting-21)
case(coverage-25, to-22)
nmod:poss(coverage-25, its-23)
amod(coverage-25, gavel-to-gavel-24)
nmod:to(add-19, coverage-25)
punct(kick-7, ;-26)
det(networks-28, the-27)
nsubj(try-30, networks-28)
aux(try-30, will-29)
parataxis(kick-7, try-30)
amod(gimmicks-32, new-31)
dobj(try-30, gimmicks-32)
punct(gimmicks-32, ,-33)
case(plan-38, such-34)
mwe(such-34, as-35)
nmod:poss(plan-38, NBC-36)
case(NBC-36, 's-37)
nmod:such_as(gimmicks-32, plan-38)
mark(conduct-40, to-39)
acl(plan-38, conduct-40)
dobj(conduct-40, dialogues-41)
case(delegates-43, between-42)
nmod:between(conduct-40, delegates-43)
cc(delegates-43, and-44)
nmod:between(conduct-40, voters-45)
conj:and(delegates-43, voters-45)
advmod(conduct-40, elsewhere-46)
case(country-49, in-47)
det(country-49, the-48)
nmod:in(elsewhere-46, country-49)
punct(kick-7, ;-50)
amod(TV-52, public-51)
nsubj(feature-54, TV-52)
aux(feature-54, will-53)
parataxis(kick-7, feature-54)
amod(wrapups-56, nightly-55)
dobj(feature-54, wrapups-56)
case(regulars-59, by-57)
det(regulars-59, the-58)
nmod:by(feature-54, regulars-59)
case(Week-63, from-60)
punct(Week-63, ``-61)
compound(Week-63, Washington-62)
nmod:from(regulars-59, Week-63)
case(Review-65, in-64)
nmod:in(Week-63, Review-65)
punct(kick-7, .-66)
punct(kick-7, ''-67)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kick#things

kick :: Even giants are being kicked in the shins , however ./.
advmod(giants-2, Even-1)
nsubjpass(kicked-5, giants-2)
aux(kicked-5, are-3)
auxpass(kicked-5, being-4)
root(ROOT-0, kicked-5)
case(shins-8, in-6)
det(shins-8, the-7)
nmod:in(kicked-5, shins-8)
punct(kicked-5, ,-9)
advmod(kicked-5, however-10)
punct(kicked-5, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#giants

kick :: She puts it this way: `` Let 's kick their fanny from here to yonder ! ``/``
nsubj(puts-2, She-1)
root(ROOT-0, puts-2)
dobj(puts-2, it-3)
det(way-5, this-4)
dep(puts-2, way-5)
punct(way-5, :-6)
punct(Let-8, ``-7)
dep(way-5, Let-8)
nsubj(kick-10, 's-9)
ccomp(Let-8, kick-10)
nmod:poss(fanny-12, their-11)
dobj(kick-10, fanny-12)
case(here-14, from-13)
nmod:from(kick-10, here-14)
mark(yonder-16, to-15)
advcl(kick-10, yonder-16)
punct(puts-2, !-17)
root(ROOT-0, ``-1)
root(``-1, /-2)
punct(/-2, ``-3)
Return str :: kick#fanny

kick :: The U.S. would say it officially `` recognizes '' the presidency of the fellow Noriega kicked out of office , who is now hiding somewhere in Panama ./.
det(U.S.-2, The-1)
nsubj(say-4, U.S.-2)
aux(say-4, would-3)
root(ROOT-0, say-4)
nsubj(recognizes-8, it-5)
advmod(recognizes-8, officially-6)
punct(recognizes-8, ``-7)
ccomp(say-4, recognizes-8)
punct(recognizes-8, ''-9)
det(presidency-11, the-10)
nsubj(kicked-16, presidency-11)
case(Noriega-15, of-12)
det(Noriega-15, the-13)
compound(Noriega-15, fellow-14)
nmod:of(presidency-11, Noriega-15)
ccomp(recognizes-8, kicked-16)
case(office-19, out-17)
mwe(out-17, of-18)
nmod:out_of(kicked-16, office-19)
punct(kicked-16, ,-20)
nsubj(hiding-24, who-21)
aux(hiding-24, is-22)
advmod(hiding-24, now-23)
dep(kicked-16, hiding-24)
advmod(hiding-24, somewhere-25)
case(Panama-27, in-26)
nmod:in(hiding-24, Panama-27)
punct(say-4, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#presidency

kick :: Even then , however , Australia 's new 49 % tax rate kicked in at an even lower income level than the old 60 % top rate did -- only 30 % above average yearly earnings ./.
advmod(then-2, Even-1)
advmod(kicked-13, then-2)
punct(kicked-13, ,-3)
advmod(kicked-13, however-4)
punct(kicked-13, ,-5)
nmod:poss(rate-12, Australia-6)
case(Australia-6, 's-7)
amod(rate-12, new-8)
compound(%-10, 49-9)
amod(rate-12, %-10)
compound(rate-12, tax-11)
nsubj(kicked-13, rate-12)
root(ROOT-0, kicked-13)
compound:prt(kicked-13, in-14)
case(level-20, at-15)
det(level-20, an-16)
advmod(lower-18, even-17)
amod(level-20, lower-18)
compound(level-20, income-19)
nmod:at(kicked-13, level-20)
mark(did-28, than-21)
det(rate-27, the-22)
amod(rate-27, old-23)
compound(%-25, 60-24)
amod(rate-27, %-25)
amod(rate-27, top-26)
nsubj(did-28, rate-27)
advcl(kicked-13, did-28)
punct(did-28, ---29)
advmod(30-31, only-30)
nummod(%-32, 30-31)
root(---29, %-32)
case(earnings-36, above-33)
amod(earnings-36, average-34)
amod(earnings-36, yearly-35)
nmod:above(%-32, earnings-36)
punct(%-32, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#rate

kick :: Hollywood studios claim that cable operators have become a monopoly , that they pay too little in royalties , and that they can kick broadcasters off cable systems and freeze out Hollywood producers ./.
compound(studios-2, Hollywood-1)
nsubj(claim-3, studios-2)
root(ROOT-0, claim-3)
mark(become-8, that-4)
compound(operators-6, cable-5)
nsubj(become-8, operators-6)
aux(become-8, have-7)
ccomp(claim-3, become-8)
det(monopoly-10, a-9)
xcomp(become-8, monopoly-10)
punct(claim-3, ,-11)
mark(pay-14, that-12)
nsubj(pay-14, they-13)
ccomp(claim-3, pay-14)
advmod(little-16, too-15)
dobj(pay-14, little-16)
case(royalties-18, in-17)
nmod:in(pay-14, royalties-18)
punct(pay-14, ,-19)
cc(pay-14, and-20)
mark(kick-24, that-21)
nsubj(kick-24, they-22)
nsubj(freeze-30, they-22)
aux(kick-24, can-23)
ccomp(claim-3, kick-24)
conj:and(pay-14, kick-24)
dobj(kick-24, broadcasters-25)
case(systems-28, off-26)
compound(systems-28, cable-27)
nmod:off(kick-24, systems-28)
cc(kick-24, and-29)
conj:and(pay-14, freeze-30)
conj:and(kick-24, freeze-30)
compound:prt(freeze-30, out-31)
compound(producers-33, Hollywood-32)
dobj(freeze-30, producers-33)
punct(claim-3, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#broadcasters

kick :: `` I 've been kicked everywhere , '' he says ./.
punct(says-10, ``-1)
nsubjpass(kicked-5, I-2)
aux(kicked-5, 've-3)
auxpass(kicked-5, been-4)
ccomp(says-10, kicked-5)
advmod(kicked-5, everywhere-6)
punct(says-10, ,-7)
punct(says-10, ''-8)
nsubj(says-10, he-9)
root(ROOT-0, says-10)
punct(says-10, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#i

kick :: Since kicking off coordinated intervention with other central banks at the start of the year , the Fed has won greater respect from commercial bank traders it deals with ./.
mark(kicking-2, Since-1)
advcl(won-20, kicking-2)
compound:prt(kicking-2, off-3)
amod(intervention-5, coordinated-4)
dobj(kicking-2, intervention-5)
case(banks-9, with-6)
amod(banks-9, other-7)
amod(banks-9, central-8)
nmod:with(intervention-5, banks-9)
case(start-12, at-10)
det(start-12, the-11)
nmod:at(kicking-2, start-12)
case(year-15, of-13)
det(year-15, the-14)
nmod:of(start-12, year-15)
punct(won-20, ,-16)
det(Fed-18, the-17)
nsubj(won-20, Fed-18)
aux(won-20, has-19)
root(ROOT-0, won-20)
amod(respect-22, greater-21)
dobj(won-20, respect-22)
case(traders-26, from-23)
amod(traders-26, commercial-24)
compound(traders-26, bank-25)
nmod:from(respect-22, traders-26)
nsubj(deals-28, it-27)
acl:relcl(respect-22, deals-28)
nmod(deals-28, with-29)
punct(won-20, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#intervention

kick :: A former major , he was kicked out of the army in 1979 for advocating the overthrow of the government ./.
det(major-3, A-1)
amod(major-3, former-2)
ccomp(kicked-7, major-3)
punct(kicked-7, ,-4)
nsubjpass(kicked-7, he-5)
auxpass(kicked-7, was-6)
root(ROOT-0, kicked-7)
case(army-11, out-8)
mwe(out-8, of-9)
det(army-11, the-10)
nmod:out_of(kicked-7, army-11)
case(1979-13, in-12)
nmod:in(kicked-7, 1979-13)
mark(advocating-15, for-14)
advcl(kicked-7, advocating-15)
det(overthrow-17, the-16)
dobj(advocating-15, overthrow-17)
case(government-20, of-18)
det(government-20, the-19)
nmod:of(overthrow-17, government-20)
punct(kicked-7, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#he

kick :: When he kicks the pipe holding water back from Milagro , the water floods his dying bean field ./.
advmod(kicks-3, When-1)
nsubj(kicks-3, he-2)
root(ROOT-0, kicks-3)
dobj(kicks-3, the-4)
dep(the-4, pipe-5)
acl(pipe-5, holding-6)
dobj(holding-6, water-7)
advmod(holding-6, back-8)
case(Milagro-10, from-9)
nmod:from(back-8, Milagro-10)
punct(Milagro-10, ,-11)
det(floods-14, the-12)
compound(floods-14, water-13)
appos(Milagro-10, floods-14)
nmod:poss(field-18, his-15)
amod(field-18, dying-16)
compound(field-18, bean-17)
dep(floods-14, field-18)
punct(kicks-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#the

kick :: Meanwhile , the prospect of new generations of products related to personal computers kicked off rallies in the previously sluggish shares of OTC disk-drive makers ./.
advmod(kicked-14, Meanwhile-1)
punct(kicked-14, ,-2)
det(prospect-4, the-3)
nsubj(kicked-14, prospect-4)
case(generations-7, of-5)
amod(generations-7, new-6)
nmod:of(prospect-4, generations-7)
case(products-9, of-8)
nmod:of(generations-7, products-9)
acl(products-9, related-10)
case(computers-13, to-11)
amod(computers-13, personal-12)
nmod:to(related-10, computers-13)
root(ROOT-0, kicked-14)
compound:prt(kicked-14, off-15)
dobj(kicked-14, rallies-16)
case(shares-21, in-17)
det(shares-21, the-18)
advmod(sluggish-20, previously-19)
amod(shares-21, sluggish-20)
nmod:in(kicked-14, shares-21)
case(makers-25, of-22)
compound(makers-25, OTC-23)
compound(makers-25, disk-drive-24)
nmod:of(shares-21, makers-25)
punct(kicked-14, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#rallies

kick :: We 'll be kicked out the Front-Runners ' Club . ''/''
nsubjpass(kicked-4, We-1)
aux(kicked-4, 'll-2)
auxpass(kicked-4, be-3)
root(ROOT-0, kicked-4)
compound:prt(kicked-4, out-5)
det(Front-Runners-7, the-6)
nmod:poss(Club-9, Front-Runners-7)
case(Front-Runners-7, '-8)
dobj(kicked-4, Club-9)
punct(kicked-4, .-10)
punct(kicked-4, ''-11)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kick#club

kick :: Mr. Reagan 's speech was designed to kick off a triumphant final year in office , but a new poll suggests that his standing in public opinion has n't recovered from the dive it took after the disclosure of the Iran-Contra affair ./.
compound(Reagan-2, Mr.-1)
nmod:poss(speech-4, Reagan-2)
case(Reagan-2, 's-3)
nsubjpass(designed-6, speech-4)
nsubj:xsubj(kick-8, speech-4)
auxpass(designed-6, was-5)
root(ROOT-0, designed-6)
mark(kick-8, to-7)
xcomp(designed-6, kick-8)
compound:prt(kick-8, off-9)
det(year-13, a-10)
amod(year-13, triumphant-11)
amod(year-13, final-12)
dobj(kick-8, year-13)
case(office-15, in-14)
nmod:in(year-13, office-15)
punct(designed-6, ,-16)
cc(designed-6, but-17)
det(poll-20, a-18)
amod(poll-20, new-19)
nsubj(suggests-21, poll-20)
conj:but(designed-6, suggests-21)
mark(recovered-30, that-22)
nmod:poss(standing-24, his-23)
nsubj(recovered-30, standing-24)
case(opinion-27, in-25)
amod(opinion-27, public-26)
nmod:in(standing-24, opinion-27)
aux(recovered-30, has-28)
neg(recovered-30, n't-29)
ccomp(suggests-21, recovered-30)
case(dive-33, from-31)
det(dive-33, the-32)
nmod:from(recovered-30, dive-33)
nsubj(took-35, it-34)
acl:relcl(dive-33, took-35)
case(disclosure-38, after-36)
det(disclosure-38, the-37)
nmod:after(took-35, disclosure-38)
case(affair-42, of-39)
det(affair-42, the-40)
compound(affair-42, Iran-Contra-41)
nmod:of(disclosure-38, affair-42)
punct(designed-6, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#year

kick :: The more today 's candidates compare themselves to the little gamecock who scattered S.O.B.s like shrapnel and threatened to kick a journalist in his most tender parts , the more controlled most of them have become ./.
det(today-3, The-1)
amod(today-3, more-2)
nmod:poss(candidates-5, today-3)
case(today-3, 's-4)
nsubj(compare-6, candidates-5)
ccomp(become-36, compare-6)
dobj(compare-6, themselves-7)
case(gamecock-11, to-8)
det(gamecock-11, the-9)
amod(gamecock-11, little-10)
nmod:to(compare-6, gamecock-11)
nsubj(scattered-13, gamecock-11)
nsubj(threatened-18, gamecock-11)
nsubj:xsubj(kick-20, gamecock-11)
ref(gamecock-11, who-12)
acl:relcl(gamecock-11, scattered-13)
dobj(scattered-13, S.O.B.s-14)
case(shrapnel-16, like-15)
nmod:like(S.O.B.s-14, shrapnel-16)
cc(scattered-13, and-17)
acl:relcl(gamecock-11, threatened-18)
conj:and(scattered-13, threatened-18)
mark(kick-20, to-19)
xcomp(threatened-18, kick-20)
det(journalist-22, a-21)
dobj(kick-20, journalist-22)
case(parts-27, in-23)
nmod:poss(parts-27, his-24)
advmod(parts-27, most-25)
amod(parts-27, tender-26)
nmod:in(kick-20, parts-27)
punct(become-36, ,-28)
det(most-32, the-29)
advmod(controlled-31, more-30)
amod(most-32, controlled-31)
nsubj(become-36, most-32)
case(them-34, of-33)
nmod:of(most-32, them-34)
aux(become-36, have-35)
root(ROOT-0, become-36)
punct(become-36, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#journalist

kick :: Mr. Lorenzo said Texas Air today will kick off an advertising campaign aimed at convincing the American public that Eastern is safe and has been the victim of union leaders `` who have their own agenda . ''/''
compound(Lorenzo-2, Mr.-1)
nsubj(said-3, Lorenzo-2)
root(ROOT-0, said-3)
compound(Air-5, Texas-4)
nsubj(kick-8, Air-5)
nmod:tmod(kick-8, today-6)
aux(kick-8, will-7)
ccomp(said-3, kick-8)
compound:prt(kick-8, off-9)
det(campaign-12, an-10)
compound(campaign-12, advertising-11)
dobj(kick-8, campaign-12)
acl(campaign-12, aimed-13)
mark(convincing-15, at-14)
advcl(aimed-13, convincing-15)
det(public-18, the-16)
amod(public-18, American-17)
dobj(convincing-15, public-18)
mark(safe-22, that-19)
nsubj(safe-22, Eastern-20)
cop(safe-22, is-21)
ccomp(public-18, safe-22)
cc(safe-22, and-23)
aux(victim-27, has-24)
cop(victim-27, been-25)
det(victim-27, the-26)
ccomp(public-18, victim-27)
conj:and(safe-22, victim-27)
case(leaders-30, of-28)
compound(leaders-30, union-29)
nmod:of(victim-27, leaders-30)
nsubj(have-33, leaders-30)
punct(leaders-30, ``-31)
ref(leaders-30, who-32)
acl:relcl(leaders-30, have-33)
nmod:poss(agenda-36, their-34)
amod(agenda-36, own-35)
dobj(have-33, agenda-36)
punct(said-3, .-37)
punct(said-3, ''-38)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kick#campaign

kick :: The machinery maker , which in December announced it had heavy losses and would be laying off 6 , 000 employees to kick off a restructuring program , said it had a 285 million-mark parent company loss in 1987 ./.
det(maker-3, The-1)
compound(maker-3, machinery-2)
nsubj(announced-8, maker-3)
nsubj(said-29, maker-3)
punct(maker-3, ,-4)
ref(maker-3, which-5)
case(December-7, in-6)
nmod:in(announced-8, December-7)
acl:relcl(maker-3, announced-8)
nsubj(had-10, it-9)
nsubj(laying-16, it-9)
ccomp(announced-8, had-10)
amod(losses-12, heavy-11)
dobj(had-10, losses-12)
cc(had-10, and-13)
aux(laying-16, would-14)
aux(laying-16, be-15)
ccomp(announced-8, laying-16)
conj:and(had-10, laying-16)
dep(6-18, off-17)
nmod(laying-16, 6-18)
punct(6-18, ,-19)
nummod(employees-21, 000-20)
appos(6-18, employees-21)
mark(kick-23, to-22)
acl(employees-21, kick-23)
compound:prt(kick-23, off-24)
det(program-27, a-25)
compound(program-27, restructuring-26)
dobj(kick-23, program-27)
punct(maker-3, ,-28)
root(ROOT-0, said-29)
nsubj(had-31, it-30)
ccomp(said-29, had-31)
det(loss-37, a-32)
nummod(loss-37, 285-33)
amod(loss-37, million-mark-34)
compound(loss-37, parent-35)
compound(loss-37, company-36)
dobj(had-31, loss-37)
case(1987-39, in-38)
nmod:in(had-31, 1987-39)
punct(said-29, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#program

kick :: Among the tantrums he admits: heaving a faulty phone across the control room , kicking in a TV screen to force NBC to buy a new one , and assaulting construction workers who were too noisy during taping ./.
case(tantrums-3, Among-1)
det(tantrums-3, the-2)
nmod:among(heaving-7, tantrums-3)
nsubj(admits-5, he-4)
acl:relcl(tantrums-3, admits-5)
punct(heaving-7, :-6)
root(ROOT-0, heaving-7)
det(phone-10, a-8)
amod(phone-10, faulty-9)
dobj(heaving-7, phone-10)
case(room-14, across-11)
det(room-14, the-12)
compound(room-14, control-13)
nmod:across(phone-10, room-14)
punct(heaving-7, ,-15)
conj:and(heaving-7, kicking-16)
case(screen-20, in-17)
det(screen-20, a-18)
compound(screen-20, TV-19)
nmod:in(kicking-16, screen-20)
mark(force-22, to-21)
xcomp(kicking-16, force-22)
dobj(force-22, NBC-23)
nsubj:xsubj(buy-25, NBC-23)
mark(buy-25, to-24)
xcomp(force-22, buy-25)
det(one-28, a-26)
amod(one-28, new-27)
dobj(buy-25, one-28)
punct(heaving-7, ,-29)
cc(heaving-7, and-30)
conj:and(heaving-7, assaulting-31)
compound(workers-33, construction-32)
dobj(assaulting-31, workers-33)
nsubj(noisy-37, workers-33)
ref(workers-33, who-34)
cop(noisy-37, were-35)
advmod(noisy-37, too-36)
acl:relcl(workers-33, noisy-37)
mark(taping-39, during-38)
advcl(noisy-37, taping-39)
punct(heaving-7, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#screen

kick :: `` Next time , '' she says , she will kick him and his wife out ./.
punct(kick-11, ``-1)
amod(time-3, Next-2)
nmod:tmod(kick-11, time-3)
punct(says-7, ,-4)
punct(says-7, ''-5)
nsubj(says-7, she-6)
parataxis(kick-11, says-7)
punct(says-7, ,-8)
nsubj(kick-11, she-9)
aux(kick-11, will-10)
root(ROOT-0, kick-11)
dobj(kick-11, him-12)
cc(him-12, and-13)
nmod:poss(wife-15, his-14)
dobj(kick-11, wife-15)
conj:and(him-12, wife-15)
compound:prt(kick-11, out-16)
punct(kick-11, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#him

kick :: CMS Energy in Jackson , Mich . , kicked things off Tuesday , announcing that its Consumers Power subsidiary will get a $ 60 million boost to 1988 earnings , courtesy of the changed rules ./.
compound(Energy-2, CMS-1)
root(ROOT-0, Energy-2)
case(Jackson-4, in-3)
nmod:in(Energy-2, Jackson-4)
punct(Jackson-4, ,-5)
appos(Jackson-4, Mich-6)
punct(Energy-2, .-7)
punct(kicked-2, ,-1)
root(ROOT-0, kicked-2)
dobj(kicked-2, things-3)
case(Tuesday-5, off-4)
nmod:off(kicked-2, Tuesday-5)
punct(kicked-2, ,-6)
advcl(kicked-2, announcing-7)
mark(get-14, that-8)
nmod:poss(subsidiary-12, its-9)
compound(subsidiary-12, Consumers-10)
compound(subsidiary-12, Power-11)
nsubj(get-14, subsidiary-12)
aux(get-14, will-13)
ccomp(announcing-7, get-14)
det(boost-19, a-15)
amod(boost-19, $-16)
compound(million-18, 60-17)
nummod($-16, million-18)
dobj(get-14, boost-19)
case(earnings-22, to-20)
nummod(earnings-22, 1988-21)
nmod:to(get-14, earnings-22)
punct(get-14, ,-23)
dobj(get-14, courtesy-24)
case(rules-28, of-25)
det(rules-28, the-26)
amod(rules-28, changed-27)
nmod:of(courtesy-24, rules-28)
punct(kicked-2, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#things

kick :: `` You could n't give the shares away if you tried , '' adds Vahid Fathi , an analyst with Prescott , Ball & Turben Inc. Mr. Munk himself recalls , `` I had many people kick me out . ''/''
punct(adds-14, ``-1)
nsubj(give-5, You-2)
aux(give-5, could-3)
neg(give-5, n't-4)
ccomp(adds-14, give-5)
det(shares-7, the-6)
dobj(give-5, shares-7)
advmod(give-5, away-8)
mark(tried-11, if-9)
nsubj(tried-11, you-10)
advcl(give-5, tried-11)
punct(adds-14, ,-12)
punct(adds-14, ''-13)
root(ROOT-0, adds-14)
compound(Fathi-16, Vahid-15)
nsubj(adds-14, Fathi-16)
punct(Fathi-16, ,-17)
det(analyst-19, an-18)
appos(Fathi-16, analyst-19)
case(Prescott-21, with-20)
nmod:with(analyst-19, Prescott-21)
punct(Prescott-21, ,-22)
nmod:with(analyst-19, Ball-23)
conj:&(Prescott-21, Ball-23)
cc(Prescott-21, &-24)
compound(Inc.-26, Turben-25)
nmod:with(analyst-19, Inc.-26)
conj:&(Prescott-21, Inc.-26)
punct(adds-14, .-27)
compound(Munk-2, Mr.-1)
nsubj(recalls-4, Munk-2)
nmod:npmod(Munk-2, himself-3)
root(ROOT-0, recalls-4)
punct(recalls-4, ,-5)
punct(recalls-4, ``-6)
nsubj(had-8, I-7)
ccomp(recalls-4, had-8)
amod(people-10, many-9)
nsubj(kick-11, people-10)
ccomp(had-8, kick-11)
dobj(kick-11, me-12)
compound:prt(kick-11, out-13)
punct(recalls-4, .-14)
punct(recalls-4, ''-15)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kick#me

kick :: The News runs a gossip column called the Gang of Nine -- it 's written by nine unidentified students -- that recently has covered such topics as who 's dating whom , who got `` drunk enough to get kicked out of one of Boston 's most miserable bars '' and who did what in class -LRB- `` Jeff , always make sure your shirttails are tucked in when standing in front of class '' -RRB- ./.
det(News-2, The-1)
nsubj(runs-3, News-2)
root(ROOT-0, runs-3)
det(column-6, a-4)
compound(column-6, gossip-5)
dobj(runs-3, column-6)
acl(column-6, called-7)
det(Gang-9, the-8)
xcomp(called-7, Gang-9)
case(Nine-11, of-10)
nmod:of(Gang-9, Nine-11)
punct(runs-3, ---12)
nsubjpass(written-15, it-13)
auxpass(written-15, 's-14)
parataxis(runs-3, written-15)
case(students-19, by-16)
nummod(students-19, nine-17)
amod(students-19, unidentified-18)
nmod:agent(written-15, students-19)
punct(written-15, ---20)
nsubj(covered-24, that-21)
advmod(covered-24, recently-22)
aux(covered-24, has-23)
ccomp(written-15, covered-24)
amod(topics-26, such-25)
dobj(covered-24, topics-26)
mark(dating-30, as-27)
nsubj(dating-30, who-28)
aux(dating-30, 's-29)
acl(topics-26, dating-30)
dobj(dating-30, whom-31)
nsubj(got-34, whom-31)
punct(whom-31, ,-32)
ref(whom-31, who-33)
acl:relcl(whom-31, got-34)
punct(got-34, ``-35)
advmod(enough-37, drunk-36)
xcomp(got-34, enough-37)
mark(kicked-40, to-38)
auxpass(kicked-40, get-39)
dep(enough-37, kicked-40)
case(one-43, out-41)
mwe(out-41, of-42)
nmod:out_of(kicked-40, one-43)
case(bars-49, of-44)
nmod:poss(bars-49, Boston-45)
case(Boston-45, 's-46)
amod(bars-49, most-47)
amod(bars-49, miserable-48)
nmod:of(one-43, bars-49)
punct(kicked-40, ''-50)
cc(kicked-40, and-51)
nsubj(did-53, who-52)
dep(enough-37, did-53)
conj:and(kicked-40, did-53)
dobj(did-53, what-54)
case(class-56, in-55)
nmod:in(what-54, class-56)
punct(make-62, -LRB--57)
punct(make-62, ``-58)
nsubj(make-62, Jeff-59)
punct(make-62, ,-60)
advmod(make-62, always-61)
dep(class-56, make-62)
xcomp(make-62, sure-63)
nmod:poss(shirttails-65, your-64)
nsubjpass(tucked-67, shirttails-65)
auxpass(tucked-67, are-66)
ccomp(sure-63, tucked-67)
mark(standing-70, in-68)
advmod(standing-70, when-69)
advcl(tucked-67, standing-70)
case(class-74, in-71)
mwe(in-71, front-72)
mwe(in-71, of-73)
nmod:in_front_of(standing-70, class-74)
punct(make-62, ''-75)
punct(make-62, -RRB--76)
punct(runs-3, .-77)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#get

kick :: Mining industry analysts consider it unlikely Impala would be kicked off the land before the lease expires in the year 2003 ./.
compound(analysts-3, Mining-1)
compound(analysts-3, industry-2)
nsubj(consider-4, analysts-3)
root(ROOT-0, consider-4)
nsubjpass(kicked-10, it-5)
amod(Impala-7, unlikely-6)
nsubjpass(kicked-10, Impala-7)
aux(kicked-10, would-8)
auxpass(kicked-10, be-9)
ccomp(consider-4, kicked-10)
compound:prt(kicked-10, off-11)
det(land-13, the-12)
dobj(kicked-10, land-13)
mark(expires-17, before-14)
det(lease-16, the-15)
nsubj(expires-17, lease-16)
advcl(kicked-10, expires-17)
case(year-20, in-18)
det(year-20, the-19)
nmod:in(expires-17, year-20)
nummod(year-20, 2003-21)
punct(consider-4, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#land

kick :: This comes after news of Daimler-Benz 's plans to restructure top management into a holding company , which kicked off a rally in auto stocks Tuesday ./.
nsubj(comes-2, This-1)
root(ROOT-0, comes-2)
case(news-4, after-3)
nmod:after(comes-2, news-4)
case(plans-8, of-5)
nmod:poss(plans-8, Daimler-Benz-6)
case(Daimler-Benz-6, 's-7)
nmod:of(news-4, plans-8)
mark(restructure-10, to-9)
acl(plans-8, restructure-10)
amod(management-12, top-11)
dobj(restructure-10, management-12)
case(company-16, into-13)
det(company-16, a-14)
amod(company-16, holding-15)
nmod:into(restructure-10, company-16)
nsubj(kicked-19, company-16)
punct(company-16, ,-17)
ref(company-16, which-18)
acl:relcl(company-16, kicked-19)
compound:prt(kicked-19, off-20)
det(rally-22, a-21)
dobj(kicked-19, rally-22)
case(stocks-25, in-23)
compound(stocks-25, auto-24)
nmod:in(rally-22, stocks-25)
nmod:tmod(kicked-19, Tuesday-26)
punct(comes-2, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#rally

kick :: `` I do n't want to give the impression that we are kicking Anheuser off the cliff , '' Miller 's Mr. Goldstein says ./.
punct(says-24, ``-1)
nsubj(want-5, I-2)
nsubj:xsubj(give-7, I-2)
aux(want-5, do-3)
neg(want-5, n't-4)
ccomp(says-24, want-5)
mark(give-7, to-6)
xcomp(want-5, give-7)
det(impression-9, the-8)
dobj(give-7, impression-9)
mark(kicking-13, that-10)
nsubj(kicking-13, we-11)
aux(kicking-13, are-12)
ccomp(impression-9, kicking-13)
dobj(kicking-13, Anheuser-14)
case(cliff-17, off-15)
det(cliff-17, the-16)
nmod:off(kicking-13, cliff-17)
punct(says-24, ,-18)
punct(says-24, ''-19)
nmod:poss(Goldstein-23, Miller-20)
case(Miller-20, 's-21)
compound(Goldstein-23, Mr.-22)
nsubj(says-24, Goldstein-23)
root(ROOT-0, says-24)
punct(says-24, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#anheuser

kick :: Remington has the cooperation of the state , which lowered its tax on parimutuel wagering and has vowed to limit competing tracks for now , and the deep pockets of the DeBartolos , who kicked in $ 1 million to supplement purses during the inaugural 70-day meet ./.
nsubj(has-2, Remington-1)
root(ROOT-0, has-2)
det(cooperation-4, the-3)
dobj(has-2, cooperation-4)
case(state-7, of-5)
det(state-7, the-6)
nmod:of(cooperation-4, state-7)
nsubj(lowered-10, state-7)
nsubj(vowed-18, state-7)
nsubj:xsubj(limit-20, state-7)
punct(state-7, ,-8)
ref(state-7, which-9)
acl:relcl(state-7, lowered-10)
nmod:poss(tax-12, its-11)
dobj(lowered-10, tax-12)
case(wagering-15, on-13)
compound(wagering-15, parimutuel-14)
nmod:on(tax-12, wagering-15)
cc(lowered-10, and-16)
aux(vowed-18, has-17)
acl:relcl(state-7, vowed-18)
conj:and(lowered-10, vowed-18)
mark(limit-20, to-19)
xcomp(vowed-18, limit-20)
amod(tracks-22, competing-21)
dobj(limit-20, tracks-22)
case(now-24, for-23)
nmod:for(limit-20, now-24)
punct(has-2, ,-25)
cc(has-2, and-26)
det(pockets-29, the-27)
amod(pockets-29, deep-28)
conj:and(has-2, pockets-29)
case(DeBartolos-32, of-30)
det(DeBartolos-32, the-31)
nmod:of(pockets-29, DeBartolos-32)
nsubj(kicked-35, DeBartolos-32)
nsubj:xsubj(supplement-41, DeBartolos-32)
punct(DeBartolos-32, ,-33)
ref(DeBartolos-32, who-34)
acl:relcl(DeBartolos-32, kicked-35)
case($-37, in-36)
nmod:in(kicked-35, $-37)
compound(million-39, 1-38)
nummod($-37, million-39)
mark(supplement-41, to-40)
xcomp(kicked-35, supplement-41)
dobj(supplement-41, purses-42)
case(meet-47, during-43)
det(meet-47, the-44)
amod(meet-47, inaugural-45)
amod(meet-47, 70-day-46)
nmod:during(supplement-41, meet-47)
punct(has-2, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#debartolos

kick :: He then kicks the pedestals out from under them ./.
nsubj(kicks-3, He-1)
advmod(kicks-3, then-2)
root(ROOT-0, kicks-3)
det(pedestals-5, the-4)
dobj(kicks-3, pedestals-5)
case(them-9, out-6)
case(them-9, from-7)
case(them-9, under-8)
nmod:under(kicks-3, them-9)
punct(kicks-3, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#pedestals

kick :: Their ambassador , Oleg Sokolov , speaks fluent English , goes to prayer breakfasts with President Corazon Aquino , and gives smooth interviews to the Philippine press in which he urges the country to kick out the Americans and get friendlier with Moscow ./.
nmod:poss(ambassador-2, Their-1)
nsubj(speaks-7, ambassador-2)
nsubj(goes-11, ambassador-2)
nsubj(gives-21, ambassador-2)
punct(ambassador-2, ,-3)
compound(Sokolov-5, Oleg-4)
appos(ambassador-2, Sokolov-5)
punct(ambassador-2, ,-6)
root(ROOT-0, speaks-7)
amod(English-9, fluent-8)
dobj(speaks-7, English-9)
punct(speaks-7, ,-10)
conj:and(speaks-7, goes-11)
case(breakfasts-14, to-12)
compound(breakfasts-14, prayer-13)
nmod:to(goes-11, breakfasts-14)
case(Aquino-18, with-15)
compound(Aquino-18, President-16)
compound(Aquino-18, Corazon-17)
nmod:with(breakfasts-14, Aquino-18)
punct(speaks-7, ,-19)
cc(speaks-7, and-20)
conj:and(speaks-7, gives-21)
amod(interviews-23, smooth-22)
dobj(gives-21, interviews-23)
case(press-27, to-24)
det(press-27, the-25)
compound(press-27, Philippine-26)
nmod:to(gives-21, press-27)
case(which-29, in-28)
nmod:in(urges-31, which-29)
nsubj(urges-31, he-30)
dep(gives-21, urges-31)
det(country-33, the-32)
dobj(urges-31, country-33)
nsubj:xsubj(kick-35, country-33)
mark(kick-35, to-34)
xcomp(urges-31, kick-35)
compound:prt(kick-35, out-36)
det(Americans-38, the-37)
dobj(kick-35, Americans-38)
cc(kick-35, and-39)
xcomp(urges-31, get-40)
conj:and(kick-35, get-40)
xcomp(get-40, friendlier-41)
case(Moscow-43, with-42)
nmod:with(get-40, Moscow-43)
punct(speaks-7, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#americans

kick :: `` Flip '' was born 16 months ago at a lunch at Le Toque , an entertainment-industry hangout where Mr. Schreger and Mort Marcus , HRI 's telecommunications president , kicked around ideas ./.
punct(Flip-2, ``-1)
root(ROOT-0, Flip-2)
punct(Flip-2, ''-3)
auxpass(born-5, was-4)
dep(Flip-2, born-5)
nummod(months-7, 16-6)
nmod:npmod(ago-8, months-7)
advmod(born-5, ago-8)
case(lunch-11, at-9)
det(lunch-11, a-10)
nmod:at(born-5, lunch-11)
case(Toque-14, at-12)
compound(Toque-14, Le-13)
nmod:at(lunch-11, Toque-14)
punct(Toque-14, ,-15)
det(hangout-18, an-16)
compound(hangout-18, entertainment-industry-17)
appos(Toque-14, hangout-18)
advmod(kicked-31, where-19)
compound(Schreger-21, Mr.-20)
nsubj(kicked-31, Schreger-21)
cc(Schreger-21, and-22)
compound(Marcus-24, Mort-23)
conj:and(Schreger-21, Marcus-24)
nsubj(kicked-31, Marcus-24)
punct(Marcus-24, ,-25)
nmod:poss(president-29, HRI-26)
case(HRI-26, 's-27)
compound(president-29, telecommunications-28)
appos(Marcus-24, president-29)
punct(Marcus-24, ,-30)
acl:relcl(hangout-18, kicked-31)
compound:prt(kicked-31, around-32)
dobj(kicked-31, ideas-33)
punct(Flip-2, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#ideas

kick :: Ms. Ferraro 's foibles were easily eclipsed by TV 's attention to Mr. Bush 's blunders that year , from his braggadocio that he `` kicked a little ass '' to his fumbling attempts to define `` shame . ''/''
compound(Ferraro-2, Ms.-1)
nmod:poss(foibles-4, Ferraro-2)
case(Ferraro-2, 's-3)
nsubjpass(eclipsed-7, foibles-4)
auxpass(eclipsed-7, were-5)
advmod(eclipsed-7, easily-6)
root(ROOT-0, eclipsed-7)
case(attention-11, by-8)
nmod:poss(attention-11, TV-9)
case(TV-9, 's-10)
nmod:agent(eclipsed-7, attention-11)
case(blunders-16, to-12)
compound(Bush-14, Mr.-13)
nmod:poss(blunders-16, Bush-14)
case(Bush-14, 's-15)
nmod:to(attention-11, blunders-16)
det(year-18, that-17)
nmod:tmod(blunders-16, year-18)
punct(eclipsed-7, ,-19)
case(braggadocio-22, from-20)
nmod:poss(braggadocio-22, his-21)
nmod:from(eclipsed-7, braggadocio-22)
mark(kicked-26, that-23)
nsubj(kicked-26, he-24)
punct(kicked-26, ``-25)
ccomp(braggadocio-22, kicked-26)
det(ass-29, a-27)
amod(ass-29, little-28)
dobj(kicked-26, ass-29)
punct(ass-29, ''-30)
case(attempts-34, to-31)
nmod:poss(attempts-34, his-32)
amod(attempts-34, fumbling-33)
nmod:to(kicked-26, attempts-34)
mark(define-36, to-35)
acl(attempts-34, define-36)
punct(define-36, ``-37)
dobj(define-36, shame-38)
punct(eclipsed-7, .-39)
punct(eclipsed-7, ''-40)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kick#ass

kick :: The beef market also has kicked up despite increased slaughterings of cattle that were expected to hold prices down ./.
det(market-3, The-1)
compound(market-3, beef-2)
nsubj(kicked-6, market-3)
advmod(kicked-6, also-4)
aux(kicked-6, has-5)
root(ROOT-0, kicked-6)
compound:prt(kicked-6, up-7)
case(slaughterings-10, despite-8)
amod(slaughterings-10, increased-9)
nmod:despite(kicked-6, slaughterings-10)
case(cattle-12, of-11)
nmod:of(slaughterings-10, cattle-12)
nsubjpass(expected-15, cattle-12)
nsubj:xsubj(hold-17, cattle-12)
ref(cattle-12, that-13)
auxpass(expected-15, were-14)
acl:relcl(cattle-12, expected-15)
mark(hold-17, to-16)
xcomp(expected-15, hold-17)
dobj(hold-17, prices-18)
compound:prt(hold-17, down-19)
punct(kicked-6, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#market

kick :: Soon it grew to include all sorts of folks: fashion fiends with shaved heads and leather jackets , artsy egghead New Wave types with angular guitars -LRB- Blondie , Television , Talking Heads -RRB- -- and especially bored teens with big boots who liked to get tanked up on cheap beer and kick the stuffings out of people who did n't agree with their neo-Nazi views ./.
advmod(grew-3, Soon-1)
nsubj(grew-3, it-2)
nsubj:xsubj(include-5, it-2)
root(ROOT-0, grew-3)
mark(include-5, to-4)
xcomp(grew-3, include-5)
det(sorts-7, all-6)
dobj(include-5, sorts-7)
case(folks-9, of-8)
nmod:of(sorts-7, folks-9)
punct(sorts-7, :-10)
compound(fiends-12, fashion-11)
dep(sorts-7, fiends-12)
case(heads-15, with-13)
amod(heads-15, shaved-14)
nmod:with(fiends-12, heads-15)
cc(heads-15, and-16)
compound(jackets-18, leather-17)
nmod:with(fiends-12, jackets-18)
conj:and(heads-15, jackets-18)
punct(fiends-12, ,-19)
amod(types-24, artsy-20)
compound(types-24, egghead-21)
compound(types-24, New-22)
compound(types-24, Wave-23)
dep(sorts-7, types-24)
conj:and(fiends-12, types-24)
case(guitars-27, with-25)
amod(guitars-27, angular-26)
nmod:with(types-24, guitars-27)
punct(Blondie-29, -LRB--28)
dep(guitars-27, Blondie-29)
punct(Blondie-29, ,-30)
appos(Blondie-29, Television-31)
punct(Blondie-29, ,-32)
amod(Heads-34, Talking-33)
appos(Blondie-29, Heads-34)
punct(Blondie-29, -RRB--35)
punct(fiends-12, ---36)
cc(fiends-12, and-37)
advmod(bored-39, especially-38)
amod(teens-40, bored-39)
dep(sorts-7, teens-40)
conj:and(fiends-12, teens-40)
case(boots-43, with-41)
amod(boots-43, big-42)
nmod:with(teens-40, boots-43)
nsubj(liked-45, boots-43)
nsubjpass:xsubj(tanked-48, boots-43)
nsubj(kick-54, boots-43)
ref(boots-43, who-44)
acl:relcl(boots-43, liked-45)
mark(tanked-48, to-46)
auxpass(tanked-48, get-47)
xcomp(liked-45, tanked-48)
compound:prt(tanked-48, up-49)
case(beer-52, on-50)
amod(beer-52, cheap-51)
nmod:on(tanked-48, beer-52)
cc(liked-45, and-53)
acl:relcl(boots-43, kick-54)
conj:and(liked-45, kick-54)
det(stuffings-56, the-55)
dobj(kick-54, stuffings-56)
case(people-59, out-57)
mwe(out-57, of-58)
nmod:out_of(kick-54, people-59)
nsubj(agree-63, people-59)
ref(people-59, who-60)
aux(agree-63, did-61)
neg(agree-63, n't-62)
acl:relcl(people-59, agree-63)
case(views-67, with-64)
nmod:poss(views-67, their-65)
amod(views-67, neo-Nazi-66)
nmod:with(agree-63, views-67)
punct(grew-3, .-68)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#stuffings

kick :: The son-in-law kicks in his earnings from a factory job -- and raises a pig on the rooftop ./.
det(son-in-law-2, The-1)
nsubj(kicks-3, son-in-law-2)
nsubj(raises-13, son-in-law-2)
root(ROOT-0, kicks-3)
case(earnings-6, in-4)
nmod:poss(earnings-6, his-5)
nmod:in(kicks-3, earnings-6)
case(job-10, from-7)
det(job-10, a-8)
compound(job-10, factory-9)
nmod:from(earnings-6, job-10)
punct(kicks-3, ---11)
cc(kicks-3, and-12)
conj:and(kicks-3, raises-13)
det(pig-15, a-14)
dobj(raises-13, pig-15)
case(rooftop-18, on-16)
det(rooftop-18, the-17)
nmod:on(raises-13, rooftop-18)
punct(kicks-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#son-in-law

kick :: None of this seems to have damped the spirits of the hall 's backers , who plan to kick off a new fund-raising drive this fall ./.
nsubj(seems-4, None-1)
nsubj:xsubj(damped-7, None-1)
case(this-3, of-2)
nmod:of(None-1, this-3)
root(ROOT-0, seems-4)
mark(damped-7, to-5)
aux(damped-7, have-6)
xcomp(seems-4, damped-7)
det(spirits-9, the-8)
dobj(damped-7, spirits-9)
case(backers-14, of-10)
det(hall-12, the-11)
nmod:poss(backers-14, hall-12)
case(hall-12, 's-13)
nmod:of(spirits-9, backers-14)
nsubj(plan-17, backers-14)
nsubj:xsubj(kick-19, backers-14)
punct(backers-14, ,-15)
ref(backers-14, who-16)
acl:relcl(backers-14, plan-17)
mark(kick-19, to-18)
xcomp(plan-17, kick-19)
compound:prt(kick-19, off-20)
det(drive-24, a-21)
amod(drive-24, new-22)
compound(drive-24, fund-raising-23)
dobj(kick-19, drive-24)
det(fall-26, this-25)
nmod:tmod(kick-19, fall-26)
punct(seems-4, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#drive

kick :: For a man who takes pride in his powers of observation and his mastery of detail , a puzzle remains: How did he fail to recognize that his wife was addicted to diet pills , a habit she finally kicked after 25 years ?/.
case(man-3, For-1)
det(man-3, a-2)
nsubj(takes-5, man-3)
nmod:for(remains-20, man-3)
ref(man-3, who-4)
acl:relcl(man-3, takes-5)
dobj(takes-5, pride-6)
case(powers-9, in-7)
nmod:poss(powers-9, his-8)
nmod:in(takes-5, powers-9)
case(observation-11, of-10)
nmod:of(powers-9, observation-11)
cc(observation-11, and-12)
nmod:poss(mastery-14, his-13)
nmod:of(powers-9, mastery-14)
conj:and(observation-11, mastery-14)
case(detail-16, of-15)
nmod:of(mastery-14, detail-16)
punct(remains-20, ,-17)
det(puzzle-19, a-18)
nsubj(remains-20, puzzle-19)
root(ROOT-0, remains-20)
punct(remains-20, :-21)
advmod(fail-25, How-22)
aux(fail-25, did-23)
nsubj(fail-25, he-24)
nsubj:xsubj(recognize-27, he-24)
parataxis(remains-20, fail-25)
mark(recognize-27, to-26)
xcomp(fail-25, recognize-27)
mark(addicted-32, that-28)
nmod:poss(wife-30, his-29)
nsubjpass(addicted-32, wife-30)
auxpass(addicted-32, was-31)
ccomp(recognize-27, addicted-32)
case(pills-35, to-33)
compound(pills-35, diet-34)
nmod:to(addicted-32, pills-35)
punct(pills-35, ,-36)
det(habit-38, a-37)
appos(pills-35, habit-38)
nsubj(kicked-41, she-39)
advmod(kicked-41, finally-40)
acl:relcl(habit-38, kicked-41)
case(years-44, after-42)
nummod(years-44, 25-43)
nmod:after(kicked-41, years-44)
punct(fail-25, ?-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#she

kick :: `` It 's certainly not the kind of a supply shock that would kick us into a recession , '' says WEFA economist John Hagens ./.
punct(says-21, ``-1)
nsubj(kind-7, It-2)
cop(kind-7, 's-3)
advmod(kind-7, certainly-4)
neg(kind-7, not-5)
det(kind-7, the-6)
nsubj(kick-14, kind-7)
ccomp(says-21, kind-7)
case(shock-11, of-8)
det(shock-11, a-9)
compound(shock-11, supply-10)
nmod:of(kind-7, shock-11)
ref(kind-7, that-12)
aux(kick-14, would-13)
acl:relcl(kind-7, kick-14)
dobj(kick-14, us-15)
case(recession-18, into-16)
det(recession-18, a-17)
nmod:into(kick-14, recession-18)
punct(says-21, ,-19)
punct(says-21, ''-20)
root(ROOT-0, says-21)
compound(Hagens-25, WEFA-22)
compound(Hagens-25, economist-23)
compound(Hagens-25, John-24)
nsubj(says-21, Hagens-25)
punct(says-21, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#us

kick :: `` P.O.V . '' kicks off tonight with `` American Tongues '' by Louis Alvarez and Andrew Kolker , and `` Acting Our Age '' by Michal Aviad ./.
punct(P.O.V-2, ``-1)
root(ROOT-0, P.O.V-2)
punct(P.O.V-2, .-3)
punct(P.O.V-2, ''-4)
root(ROOT-0, kicks-1)
compound:prt(kicks-1, off-2)
nmod:tmod(kicks-1, tonight-3)
case(Tongues-7, with-4)
punct(Tongues-7, ``-5)
amod(Tongues-7, American-6)
nmod:with(kicks-1, Tongues-7)
punct(Tongues-7, ''-8)
case(Alvarez-11, by-9)
compound(Alvarez-11, Louis-10)
nmod:by(Tongues-7, Alvarez-11)
cc(Alvarez-11, and-12)
compound(Kolker-14, Andrew-13)
nmod:by(Tongues-7, Kolker-14)
conj:and(Alvarez-11, Kolker-14)
punct(kicks-1, ,-15)
cc(kicks-1, and-16)
punct(kicks-1, ``-17)
conj:and(kicks-1, Acting-18)
nmod:poss(Age-20, Our-19)
dobj(Acting-18, Age-20)
punct(Acting-18, ''-21)
case(Aviad-24, by-22)
compound(Aviad-24, Michal-23)
nmod:by(Acting-18, Aviad-24)
punct(kicks-1, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#tonight

kick :: While Mr. Gorbachev preached togetherness yesterday , Romania was kicking Hungary 's ambassador out of the country ./.
mark(preached-4, While-1)
compound(Gorbachev-3, Mr.-2)
nsubj(preached-4, Gorbachev-3)
advcl(kicking-10, preached-4)
dobj(preached-4, togetherness-5)
nmod:tmod(preached-4, yesterday-6)
punct(kicking-10, ,-7)
nsubj(kicking-10, Romania-8)
aux(kicking-10, was-9)
root(ROOT-0, kicking-10)
nmod:poss(ambassador-13, Hungary-11)
case(Hungary-11, 's-12)
dobj(kicking-10, ambassador-13)
case(country-17, out-14)
mwe(out-14, of-15)
det(country-17, the-16)
nmod:out_of(kicking-10, country-17)
punct(kicking-10, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#ambassador

kick :: His boss saw it as insubordination and kicked Mr. Arnold out ./.
nmod:poss(boss-2, His-1)
nsubj(saw-3, boss-2)
nsubj(kicked-8, boss-2)
root(ROOT-0, saw-3)
dobj(saw-3, it-4)
case(insubordination-6, as-5)
nmod:as(saw-3, insubordination-6)
cc(saw-3, and-7)
conj:and(saw-3, kicked-8)
compound(Arnold-10, Mr.-9)
dobj(kicked-8, Arnold-10)
advmod(kicked-8, out-11)
punct(saw-3, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#arnold

kick :: The opening salvo came on Memorial Day , when the Guard kicked off a celebration of its 75th year at Camp Grayling ./.
det(salvo-3, The-1)
compound(salvo-3, opening-2)
nsubj(came-4, salvo-3)
root(ROOT-0, came-4)
case(Day-7, on-5)
compound(Day-7, Memorial-6)
nmod:on(came-4, Day-7)
punct(Day-7, ,-8)
advmod(kicked-12, when-9)
det(Guard-11, the-10)
nsubj(kicked-12, Guard-11)
acl:relcl(Day-7, kicked-12)
compound:prt(kicked-12, off-13)
det(celebration-15, a-14)
dobj(kicked-12, celebration-15)
case(year-19, of-16)
nmod:poss(year-19, its-17)
amod(year-19, 75th-18)
nmod:of(celebration-15, year-19)
case(Grayling-22, at-20)
compound(Grayling-22, Camp-21)
nmod:at(celebration-15, Grayling-22)
punct(came-4, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#year

kick :: Says William Beadle , president of the Better Business Bureau of Utah: `` When greed kicks in , common sense many times just flies right out the window . ''/''
root(ROOT-0, Says-1)
compound(Beadle-3, William-2)
nsubj(Says-1, Beadle-3)
punct(Beadle-3, ,-4)
appos(Beadle-3, president-5)
case(Bureau-10, of-6)
det(Bureau-10, the-7)
compound(Bureau-10, Better-8)
compound(Bureau-10, Business-9)
nmod:of(president-5, Bureau-10)
case(Utah-12, of-11)
nmod:of(Bureau-10, Utah-12)
punct(Says-1, :-13)
punct(Says-1, ``-14)
advmod(kicks-17, When-15)
nsubj(kicks-17, greed-16)
advcl(sense-21, kicks-17)
compound:prt(kicks-17, in-18)
punct(sense-21, ,-19)
amod(sense-21, common-20)
ccomp(Says-1, sense-21)
amod(times-23, many-22)
nsubj(flies-25, times-23)
advmod(flies-25, just-24)
ccomp(sense-21, flies-25)
advmod(window-29, right-26)
case(window-29, out-27)
det(window-29, the-28)
nmod:out(flies-25, window-29)
punct(Says-1, .-30)
punct(Says-1, ''-31)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kick#greed

kick :: So we 're scoping the situation , kicking back , and all of a sudden this guy gets this insane barrel , then does a full-on airplane floater , then a full-on wraparound cutback , then a full-on snap reentry ./.
dep(scoping-4, So-1)
nsubj(scoping-4, we-2)
nsubj(kicking-8, we-2)
aux(scoping-4, 're-3)
root(ROOT-0, scoping-4)
det(situation-6, the-5)
dobj(scoping-4, situation-6)
punct(scoping-4, ,-7)
conj:and(scoping-4, kicking-8)
advmod(kicking-8, back-9)
punct(scoping-4, ,-10)
cc(scoping-4, and-11)
det:predet(guy-17, all-12)
case(sudden-15, of-13)
det(sudden-15, a-14)
nmod:of(all-12, sudden-15)
det(guy-17, this-16)
nsubj(gets-18, guy-17)
conj:and(scoping-4, gets-18)
det(barrel-21, this-19)
amod(barrel-21, insane-20)
dobj(gets-18, barrel-21)
punct(scoping-4, ,-22)
advmod(does-24, then-23)
dep(scoping-4, does-24)
det(floater-28, a-25)
amod(floater-28, full-on-26)
compound(floater-28, airplane-27)
nsubj(does-24, floater-28)
punct(floater-28, ,-29)
advmod(cutback-34, then-30)
det(cutback-34, a-31)
amod(cutback-34, full-on-32)
compound(cutback-34, wraparound-33)
appos(floater-28, cutback-34)
punct(floater-28, ,-35)
advmod(reentry-40, then-36)
det(reentry-40, a-37)
amod(reentry-40, full-on-38)
compound(reentry-40, snap-39)
appos(floater-28, reentry-40)
punct(scoping-4, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#we

kick :: The article cited by many traders for kicking off Monday 's rally appeared in the Sunday Times of London and was written by Goldman Sachs 's London-based chief international economist , David Morrison , an influential exchange-rate forecaster ./.
det(article-2, The-1)
nsubj(appeared-13, article-2)
nsubjpass(written-22, article-2)
acl(article-2, cited-3)
case(traders-6, by-4)
amod(traders-6, many-5)
nmod:by(cited-3, traders-6)
mark(kicking-8, for-7)
advcl(cited-3, kicking-8)
compound:prt(kicking-8, off-9)
nmod:poss(rally-12, Monday-10)
case(Monday-10, 's-11)
dobj(kicking-8, rally-12)
root(ROOT-0, appeared-13)
case(Times-17, in-14)
det(Times-17, the-15)
compound(Times-17, Sunday-16)
nmod:in(appeared-13, Times-17)
case(London-19, of-18)
nmod:of(Times-17, London-19)
cc(appeared-13, and-20)
auxpass(written-22, was-21)
conj:and(appeared-13, written-22)
case(economist-30, by-23)
compound(Sachs-25, Goldman-24)
nmod:poss(economist-30, Sachs-25)
case(Sachs-25, 's-26)
amod(economist-30, London-based-27)
amod(economist-30, chief-28)
amod(economist-30, international-29)
nmod:agent(written-22, economist-30)
punct(economist-30, ,-31)
compound(Morrison-33, David-32)
appos(economist-30, Morrison-33)
punct(economist-30, ,-34)
det(forecaster-38, an-35)
amod(forecaster-38, influential-36)
compound(forecaster-38, exchange-rate-37)
appos(economist-30, forecaster-38)
punct(appeared-13, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#rally

kick :: `` But it would be unusual for the appeals court to kick him out , since all the judges have to live with each other . ''/''
punct(unusual-6, ``-1)
cc(unusual-6, But-2)
nsubj(unusual-6, it-3)
aux(unusual-6, would-4)
cop(unusual-6, be-5)
root(ROOT-0, unusual-6)
mark(kick-12, for-7)
det(court-10, the-8)
compound(court-10, appeals-9)
nsubj(kick-12, court-10)
mark(kick-12, to-11)
advcl(unusual-6, kick-12)
dobj(kick-12, him-13)
compound:prt(kick-12, out-14)
punct(kick-12, ,-15)
mark(have-20, since-16)
det:predet(judges-19, all-17)
det(judges-19, the-18)
nsubj(have-20, judges-19)
nsubj:xsubj(live-22, judges-19)
advcl(kick-12, have-20)
mark(live-22, to-21)
xcomp(have-20, live-22)
case(other-25, with-23)
det(other-25, each-24)
nmod:with(live-22, other-25)
punct(unusual-6, .-26)
punct(unusual-6, ''-27)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kick#him

kick :: Then he drop-kicked the ball through some goal posts about 50 yards distant ./.
advmod(drop-kicked-3, Then-1)
nsubj(drop-kicked-3, he-2)
root(ROOT-0, drop-kicked-3)
det(ball-5, the-4)
dobj(drop-kicked-3, ball-5)
case(posts-9, through-6)
det(posts-9, some-7)
compound(posts-9, goal-8)
nmod:through(drop-kicked-3, posts-9)
advmod(50-11, about-10)
nummod(yards-12, 50-11)
nmod:npmod(distant-13, yards-12)
amod(posts-9, distant-13)
punct(drop-kicked-3, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

kick :: Sure enough , someone drop-kicked an extra point in last year 's `` preview '' season , and this year Dave Jacobs of the New England Steamrollers got a field goal and three PATs ./.
advmod(enough-2, Sure-1)
advmod(drop-kicked-5, enough-2)
punct(drop-kicked-5, ,-3)
nsubj(drop-kicked-5, someone-4)
root(ROOT-0, drop-kicked-5)
det(point-8, an-6)
amod(point-8, extra-7)
dobj(drop-kicked-5, point-8)
case(season-16, in-9)
amod(year-11, last-10)
nmod:poss(season-16, year-11)
case(year-11, 's-12)
punct(season-16, ``-13)
compound(season-16, preview-14)
punct(season-16, ''-15)
nmod:in(drop-kicked-5, season-16)
punct(drop-kicked-5, ,-17)
cc(drop-kicked-5, and-18)
det(year-20, this-19)
nmod:tmod(got-28, year-20)
compound(Jacobs-22, Dave-21)
nsubj(got-28, Jacobs-22)
case(Steamrollers-27, of-23)
det(Steamrollers-27, the-24)
compound(Steamrollers-27, New-25)
compound(Steamrollers-27, England-26)
nmod:of(Jacobs-22, Steamrollers-27)
conj:and(drop-kicked-5, got-28)
det(goal-31, a-29)
compound(goal-31, field-30)
dobj(got-28, goal-31)
cc(goal-31, and-32)
nummod(PATs-34, three-33)
dobj(got-28, PATs-34)
conj:and(goal-31, PATs-34)
punct(drop-kicked-5, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

kick :: Most of those dictums remain: Cut teams to eight men from 11 ; use a 50-yard-by-85-foot field ; retain hockey sideboards because they make for interesting collisions ; hoist nets behind the end zones to add spice to kickoff and field goal returns -LRB- a ball kicked off a net is in play -RRB- ./.
nsubj(remain-5, Most-1)
case(dictums-4, of-2)
det(dictums-4, those-3)
nmod:of(Most-1, dictums-4)
root(ROOT-0, remain-5)
punct(remain-5, :-6)
parataxis(remain-5, Cut-7)
dobj(Cut-7, teams-8)
case(men-11, to-9)
nummod(men-11, eight-10)
nmod:to(Cut-7, men-11)
case(11-13, from-12)
nmod:from(Cut-7, 11-13)
punct(Cut-7, ;-14)
conj(Cut-7, use-15)
det(field-18, a-16)
amod(field-18, 50-yard-by-85-foot-17)
dobj(use-15, field-18)
punct(Cut-7, ;-19)
conj(Cut-7, retain-20)
compound(sideboards-22, hockey-21)
dobj(retain-20, sideboards-22)
mark(make-25, because-23)
nsubj(make-25, they-24)
advcl(retain-20, make-25)
case(collisions-28, for-26)
amod(collisions-28, interesting-27)
nmod:for(make-25, collisions-28)
punct(Cut-7, ;-29)
parataxis(Cut-7, hoist-30)
dobj(hoist-30, nets-31)
case(zones-35, behind-32)
det(zones-35, the-33)
compound(zones-35, end-34)
nmod:behind(hoist-30, zones-35)
mark(add-37, to-36)
advcl(hoist-30, add-37)
dobj(add-37, spice-38)
case(returns-44, to-39)
compound(returns-44, kickoff-40)
cc(kickoff-40, and-41)
conj:and(kickoff-40, field-42)
compound(returns-44, field-42)
compound(returns-44, goal-43)
nmod:to(play-54, returns-44)
punct(kicked-48, -LRB--45)
det(ball-47, a-46)
nsubj(kicked-48, ball-47)
csubj(play-54, kicked-48)
compound:prt(kicked-48, off-49)
det(net-51, a-50)
dobj(kicked-48, net-51)
cop(play-54, is-52)
case(play-54, in-53)
nmod:in(add-37, play-54)
punct(hoist-30, -RRB--55)
punct(remain-5, .-56)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#net

kick :: It is an opera in which a fat Viking wearing glasses sings `` das Gold , das Gold '' from Beethoven 's `` Fidelio '' while a nun lies on her back suggestively kicking her legs ./.
nsubj(opera-4, It-1)
cop(opera-4, is-2)
det(opera-4, an-3)
root(ROOT-0, opera-4)
nmod:in(sings-12, opera-4)
case(which-6, in-5)
ref(opera-4, which-6)
det(Viking-9, a-7)
amod(Viking-9, fat-8)
amod(glasses-11, Viking-9)
amod(glasses-11, wearing-10)
nsubj(sings-12, glasses-11)
acl:relcl(opera-4, sings-12)
punct(sings-12, ``-13)
compound(Gold-15, das-14)
dobj(sings-12, Gold-15)
punct(Gold-15, ,-16)
compound(Gold-18, das-17)
appos(Gold-15, Gold-18)
punct(sings-12, ''-19)
case(Fidelio-24, from-20)
nmod:poss(Fidelio-24, Beethoven-21)
case(Beethoven-21, 's-22)
punct(Fidelio-24, ``-23)
nmod:from(sings-12, Fidelio-24)
punct(sings-12, ''-25)
mark(lies-29, while-26)
det(nun-28, a-27)
nsubj(lies-29, nun-28)
advcl(sings-12, lies-29)
case(back-32, on-30)
nmod:poss(back-32, her-31)
nmod:on(lies-29, back-32)
advmod(kicking-34, suggestively-33)
xcomp(lies-29, kicking-34)
nmod:poss(legs-36, her-35)
dobj(kicking-34, legs-36)
punct(opera-4, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#legs

kick :: Most-Remarkable Injury -- Angels outfielder Chili Davis dislocated a toe when he kicked a chair after popping out in a June 26 home game against Milwaukee ./.
amod(Injury-2, Most-Remarkable-1)
root(ROOT-0, Injury-2)
punct(Injury-2, ---3)
compound(Davis-7, Angels-4)
amod(Davis-7, outfielder-5)
compound(Davis-7, Chili-6)
nsubj(dislocated-8, Davis-7)
parataxis(Injury-2, dislocated-8)
det(toe-10, a-9)
dobj(dislocated-8, toe-10)
advmod(kicked-13, when-11)
nsubj(kicked-13, he-12)
advcl(dislocated-8, kicked-13)
det(chair-15, a-14)
dobj(kicked-13, chair-15)
mark(popping-17, after-16)
advcl(kicked-13, popping-17)
compound:prt(popping-17, out-18)
case(game-24, in-19)
det(game-24, a-20)
compound(game-24, June-21)
nummod(game-24, 26-22)
compound(game-24, home-23)
nmod:in(popping-17, game-24)
case(Milwaukee-26, against-25)
nmod:against(game-24, Milwaukee-26)
punct(Injury-2, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#chair

kick :: I 'm sure that no one else in this room has had the painful experience of watching the videotapes we obtained of William Buckley 's ordeal -- a year of beatings and worse , each one taking its toll , death finally when his lungs filled with fluid from being kicked in the kidneys ./.
nsubj(sure-3, I-1)
cop(sure-3, 'm-2)
root(ROOT-0, sure-3)
mark(had-12, that-4)
neg(one-6, no-5)
nsubj(had-12, one-6)
advmod(one-6, else-7)
case(room-10, in-8)
det(room-10, this-9)
nmod:in(one-6, room-10)
aux(had-12, has-11)
ccomp(sure-3, had-12)
det(experience-15, the-13)
amod(experience-15, painful-14)
dobj(had-12, experience-15)
mark(watching-17, of-16)
acl(experience-15, watching-17)
det(videotapes-19, the-18)
dobj(watching-17, videotapes-19)
nsubj(obtained-21, we-20)
acl:relcl(videotapes-19, obtained-21)
case(ordeal-26, of-22)
compound(Buckley-24, William-23)
nmod:poss(ordeal-26, Buckley-24)
case(Buckley-24, 's-25)
nmod:of(obtained-21, ordeal-26)
punct(sure-3, ---27)
det(year-29, a-28)
dep(sure-3, year-29)
case(beatings-31, of-30)
nmod:of(year-29, beatings-31)
cc(beatings-31, and-32)
nmod:of(year-29, worse-33)
conj:and(beatings-31, worse-33)
punct(year-29, ,-34)
det(one-36, each-35)
nsubj(taking-37, one-36)
acl:relcl(year-29, taking-37)
nmod:poss(toll-39, its-38)
dobj(taking-37, toll-39)
punct(year-29, ,-40)
appos(year-29, death-41)
advmod(filled-46, finally-42)
advmod(filled-46, when-43)
nmod:poss(lungs-45, his-44)
nsubj(filled-46, lungs-45)
acl(death-41, filled-46)
case(fluid-48, with-47)
nmod:with(filled-46, fluid-48)
mark(kicked-51, from-49)
auxpass(kicked-51, being-50)
advcl(filled-46, kicked-51)
case(kidneys-54, in-52)
det(kidneys-54, the-53)
nmod:in(kicked-51, kidneys-54)
punct(sure-3, .-55)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#being

kick :: Mr. Ketelsen said yesterday that said their interest is greater than the company expected , but that `` we may have people kicking tires . ''/''
compound(Ketelsen-2, Mr.-1)
nsubj(said-3, Ketelsen-2)
root(ROOT-0, said-3)
nmod:tmod(said-3, yesterday-4)
nsubj(said-6, that-5)
ccomp(said-3, said-6)
nmod:poss(interest-8, their-7)
nsubj(greater-10, interest-8)
cop(greater-10, is-9)
ccomp(said-6, greater-10)
mark(expected-14, than-11)
det(company-13, the-12)
nsubj(expected-14, company-13)
ccomp(greater-10, expected-14)
punct(greater-10, ,-15)
cc(greater-10, but-16)
mark(have-21, that-17)
punct(have-21, ``-18)
nsubj(have-21, we-19)
aux(have-21, may-20)
ccomp(said-6, have-21)
conj:but(greater-10, have-21)
dobj(have-21, people-22)
acl(people-22, kicking-23)
dobj(kicking-23, tires-24)
punct(said-3, .-25)
punct(said-3, ''-26)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kick#tires

kick :: He crawled out the bowsprit , kicked in a stern gallery window and led his sailors to capture the ship , then use it as a bridge to board and capture the Spanish flagship lying alongside ./.
nsubj(crawled-2, He-1)
nsubj(kicked-7, He-1)
nsubj(led-14, He-1)
nsubj(use-23, He-1)
nsubj(capture-31, He-1)
root(ROOT-0, crawled-2)
compound:prt(crawled-2, out-3)
det(bowsprit-5, the-4)
dobj(crawled-2, bowsprit-5)
punct(crawled-2, ,-6)
conj:and(crawled-2, kicked-7)
case(window-12, in-8)
det(window-12, a-9)
amod(window-12, stern-10)
compound(window-12, gallery-11)
nmod:in(kicked-7, window-12)
cc(crawled-2, and-13)
conj:and(crawled-2, led-14)
nmod:poss(sailors-16, his-15)
dobj(led-14, sailors-16)
mark(capture-18, to-17)
advcl(led-14, capture-18)
det(ship-20, the-19)
dobj(capture-18, ship-20)
punct(crawled-2, ,-21)
advmod(use-23, then-22)
conj:and(crawled-2, use-23)
dobj(use-23, it-24)
case(bridge-27, as-25)
det(bridge-27, a-26)
nmod:as(use-23, bridge-27)
case(board-29, to-28)
nmod:to(bridge-27, board-29)
cc(crawled-2, and-30)
conj:and(crawled-2, capture-31)
det(flagship-34, the-32)
amod(flagship-34, Spanish-33)
dobj(capture-31, flagship-34)
acl(flagship-34, lying-35)
advmod(lying-35, alongside-36)
punct(crawled-2, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#he

kick :: Meetings degenerated into shouting matches ; after one , a copywriter kicked a hole in a wall ./.
nsubj(degenerated-2, Meetings-1)
root(ROOT-0, degenerated-2)
mark(shouting-4, into-3)
advcl(degenerated-2, shouting-4)
dobj(shouting-4, matches-5)
punct(degenerated-2, ;-6)
case(one-8, after-7)
nmod:after(kicked-12, one-8)
punct(kicked-12, ,-9)
det(copywriter-11, a-10)
nsubj(kicked-12, copywriter-11)
parataxis(degenerated-2, kicked-12)
det(hole-14, a-13)
dobj(kicked-12, hole-14)
case(wall-17, in-15)
det(wall-17, a-16)
nmod:in(kicked-12, wall-17)
punct(degenerated-2, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#hole

kick :: The horses ' handler , a young woman , leapt onto Mr. Ricci 's horse and kicked away in a cloud of dust ./.
det(horses-2, The-1)
nmod:poss(handler-4, horses-2)
case(horses-2, '-3)
nsubj(leapt-10, handler-4)
nsubj(kicked-17, handler-4)
punct(handler-4, ,-5)
det(woman-8, a-6)
amod(woman-8, young-7)
appos(handler-4, woman-8)
punct(handler-4, ,-9)
root(ROOT-0, leapt-10)
case(horse-15, onto-11)
compound(Ricci-13, Mr.-12)
nmod:poss(horse-15, Ricci-13)
case(Ricci-13, 's-14)
nmod:onto(leapt-10, horse-15)
cc(leapt-10, and-16)
conj:and(leapt-10, kicked-17)
advmod(kicked-17, away-18)
case(cloud-21, in-19)
det(cloud-21, a-20)
nmod:in(kicked-17, cloud-21)
case(dust-23, of-22)
nmod:of(cloud-21, dust-23)
punct(leapt-10, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#handler

kick :: The A 's won Monday 's opener , 3-2 , on a Henderson home run in the 14th inning , but were upstaged by Team Turmoil 's manager , Billy Martin , who was ejected after pulling his old stunt of kicking dirt on an umpire during a dispute ./.
det(A-2, The-1)
root(ROOT-0, A-2)
case(A-2, 's-3)
acl(A-2, won-4)
nmod:poss(opener-7, Monday-5)
case(Monday-5, 's-6)
dobj(won-4, opener-7)
punct(opener-7, ,-8)
appos(opener-7, 3-2-9)
punct(opener-7, ,-10)
case(run-15, on-11)
det(run-15, a-12)
compound(run-15, Henderson-13)
compound(run-15, home-14)
nmod:on(A-2, run-15)
case(inning-19, in-16)
det(inning-19, the-17)
amod(inning-19, 14th-18)
nmod:in(run-15, inning-19)
punct(A-2, ,-20)
cc(A-2, but-21)
auxpass(upstaged-23, were-22)
conj:but(A-2, upstaged-23)
case(manager-28, by-24)
compound(Turmoil-26, Team-25)
nmod:poss(manager-28, Turmoil-26)
case(Turmoil-26, 's-27)
nmod:agent(upstaged-23, manager-28)
nsubjpass(ejected-35, manager-28)
punct(manager-28, ,-29)
compound(Martin-31, Billy-30)
appos(manager-28, Martin-31)
punct(manager-28, ,-32)
ref(manager-28, who-33)
auxpass(ejected-35, was-34)
acl:relcl(manager-28, ejected-35)
mark(pulling-37, after-36)
advcl(ejected-35, pulling-37)
nmod:poss(stunt-40, his-38)
amod(stunt-40, old-39)
dobj(pulling-37, stunt-40)
mark(kicking-42, of-41)
acl(stunt-40, kicking-42)
dobj(kicking-42, dirt-43)
case(umpire-46, on-44)
det(umpire-46, an-45)
nmod:on(kicking-42, umpire-46)
case(dispute-49, during-47)
det(dispute-49, a-48)
nmod:during(kicking-42, dispute-49)
punct(A-2, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#dirt

kick :: His legislative tactics include ripping microphones off the speaker 's desk to prevent his calling a vote , jumping on desks to kick away piles of paper recording offensive legislation and rolling on the floor in shoving matches with KMT opponents ./.
nmod:poss(tactics-3, His-1)
amod(tactics-3, legislative-2)
nsubj(include-4, tactics-3)
root(ROOT-0, include-4)
xcomp(include-4, ripping-5)
dobj(ripping-5, microphones-6)
case(desk-11, off-7)
det(speaker-9, the-8)
nmod:poss(desk-11, speaker-9)
case(speaker-9, 's-10)
nmod:off(ripping-5, desk-11)
mark(prevent-13, to-12)
acl(desk-11, prevent-13)
dobj(prevent-13, his-14)
acl(his-14, calling-15)
det(vote-17, a-16)
dobj(calling-15, vote-17)
punct(calling-15, ,-18)
advcl(calling-15, jumping-19)
case(desks-21, on-20)
nmod:on(jumping-19, desks-21)
mark(kick-23, to-22)
xcomp(jumping-19, kick-23)
compound:prt(kick-23, away-24)
dobj(kick-23, piles-25)
case(legislation-30, of-26)
compound(legislation-30, paper-27)
compound(legislation-30, recording-28)
amod(legislation-30, offensive-29)
nmod:of(piles-25, legislation-30)
cc(kick-23, and-31)
xcomp(jumping-19, rolling-32)
conj:and(kick-23, rolling-32)
case(floor-35, on-33)
det(floor-35, the-34)
nmod:on(rolling-32, floor-35)
mark(shoving-37, in-36)
advcl(rolling-32, shoving-37)
dobj(shoving-37, matches-38)
case(opponents-41, with-39)
compound(opponents-41, KMT-40)
nmod:with(shoving-37, opponents-41)
punct(include-4, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kick#piles

kill :: He adds that he `` would n't be at all surprised '' if Congress made changes that could `` really kill or seriously impair this whole area . ''/''
nsubj(adds-2, He-1)
root(ROOT-0, adds-2)
mark(surprised-11, that-3)
nsubj(surprised-11, he-4)
punct(surprised-11, ``-5)
aux(surprised-11, would-6)
neg(surprised-11, n't-7)
cop(surprised-11, be-8)
case(surprised-11, at-9)
det(surprised-11, all-10)
ccomp(adds-2, surprised-11)
punct(surprised-11, ''-12)
mark(made-15, if-13)
nsubj(made-15, Congress-14)
advcl(surprised-11, made-15)
dobj(made-15, changes-16)
nsubj(kill-21, changes-16)
nsubj(impair-24, changes-16)
ref(changes-16, that-17)
aux(kill-21, could-18)
punct(kill-21, ``-19)
advmod(kill-21, really-20)
acl:relcl(changes-16, kill-21)
cc(kill-21, or-22)
advmod(impair-24, seriously-23)
acl:relcl(changes-16, impair-24)
conj:or(kill-21, impair-24)
det(area-27, this-25)
amod(area-27, whole-26)
dobj(kill-21, area-27)
punct(adds-2, .-28)
punct(adds-2, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kill#area

kill :: Mr. Reagan , in his first term , tried to kill the agency ./.
compound(Reagan-2, Mr.-1)
nsubj(tried-9, Reagan-2)
nsubj:xsubj(kill-11, Reagan-2)
punct(tried-9, ,-3)
case(term-7, in-4)
nmod:poss(term-7, his-5)
amod(term-7, first-6)
nmod:in(tried-9, term-7)
punct(tried-9, ,-8)
root(ROOT-0, tried-9)
mark(kill-11, to-10)
xcomp(tried-9, kill-11)
det(agency-13, the-12)
dobj(kill-11, agency-13)
punct(tried-9, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#agency

kill :: Wind shear has contributed to at least five major airline accidents in the past 15 years in which more than 500 people have been killed ./.
compound(shear-2, Wind-1)
nsubj(contributed-4, shear-2)
aux(contributed-4, has-3)
root(ROOT-0, contributed-4)
case(accidents-11, to-5)
case(least-7, at-6)
nmod:npmod(five-8, least-7)
nummod(accidents-11, five-8)
amod(accidents-11, major-9)
compound(accidents-11, airline-10)
nmod:to(contributed-4, accidents-11)
case(years-16, in-12)
det(years-16, the-13)
amod(years-16, past-14)
nummod(years-16, 15-15)
nmod:in(contributed-4, years-16)
nmod:in(killed-25, years-16)
case(which-18, in-17)
ref(years-16, which-18)
advmod(500-21, more-19)
mwe(more-19, than-20)
nummod(people-22, 500-21)
nsubjpass(killed-25, people-22)
aux(killed-25, have-23)
auxpass(killed-25, been-24)
acl:relcl(years-16, killed-25)
punct(contributed-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: The storm killed about 100 people on land , and left more than 100 , 000 homeless ./.
det(storm-2, The-1)
nsubj(killed-3, storm-2)
nsubj(left-11, storm-2)
root(ROOT-0, killed-3)
advmod(100-5, about-4)
nummod(people-6, 100-5)
dobj(killed-3, people-6)
case(land-8, on-7)
nmod:on(killed-3, land-8)
punct(killed-3, ,-9)
cc(killed-3, and-10)
conj:and(killed-3, left-11)
advmod(100-14, more-12)
mwe(more-12, than-13)
dobj(left-11, 100-14)
punct(100-14, ,-15)
nummod(homeless-17, 000-16)
appos(100-14, homeless-17)
punct(killed-3, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: Two air crashes in India killed at least 164 people , authorities said ./.
nummod(crashes-3, Two-1)
compound(crashes-3, air-2)
nsubj(killed-6, crashes-3)
case(India-5, in-4)
nmod:in(crashes-3, India-5)
ccomp(said-13, killed-6)
case(least-8, at-7)
nmod:npmod(164-9, least-8)
nummod(people-10, 164-9)
dobj(killed-6, people-10)
punct(said-13, ,-11)
nsubj(said-13, authorities-12)
root(ROOT-0, said-13)
punct(said-13, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: Friends say a 1975 auto crash that killed his wife and two children pushed Mr. Kiley deeper into his work and seared new priorities into his management approach ./.
nsubj(say-2, Friends-1)
root(ROOT-0, say-2)
det(crash-6, a-3)
nummod(crash-6, 1975-4)
compound(crash-6, auto-5)
nsubj(killed-8, crash-6)
nsubj(pushed-14, crash-6)
nsubj(seared-22, crash-6)
ref(crash-6, that-7)
acl:relcl(crash-6, killed-8)
nmod:poss(wife-10, his-9)
dobj(killed-8, wife-10)
cc(wife-10, and-11)
nummod(children-13, two-12)
dobj(killed-8, children-13)
conj:and(wife-10, children-13)
ccomp(say-2, pushed-14)
compound(Kiley-16, Mr.-15)
dobj(pushed-14, Kiley-16)
advmod(pushed-14, deeper-17)
case(work-20, into-18)
nmod:poss(work-20, his-19)
nmod:into(pushed-14, work-20)
cc(pushed-14, and-21)
ccomp(say-2, seared-22)
conj:and(pushed-14, seared-22)
amod(priorities-24, new-23)
dobj(seared-22, priorities-24)
case(approach-28, into-25)
nmod:poss(approach-28, his-26)
compound(approach-28, management-27)
nmod:into(seared-22, approach-28)
punct(say-2, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#wife

kill :: News accounts told of thousands of Iranian soldiers at the Iraqi front suffering severe burns and damaged lungs from mustard gas , a poison that killed or maimed over a million people in World War I ./.
compound(accounts-2, News-1)
nsubj(told-3, accounts-2)
root(ROOT-0, told-3)
case(thousands-5, of-4)
nmod:of(told-3, thousands-5)
case(soldiers-8, of-6)
amod(soldiers-8, Iranian-7)
nmod:of(thousands-5, soldiers-8)
case(front-12, at-9)
det(front-12, the-10)
amod(front-12, Iraqi-11)
nmod:at(told-3, front-12)
acl(front-12, suffering-13)
amod(burns-15, severe-14)
dobj(suffering-13, burns-15)
cc(burns-15, and-16)
amod(lungs-18, damaged-17)
dobj(suffering-13, lungs-18)
conj:and(burns-15, lungs-18)
case(gas-21, from-19)
compound(gas-21, mustard-20)
nmod:from(suffering-13, gas-21)
punct(told-3, ,-22)
det(poison-24, a-23)
dobj(told-3, poison-24)
nsubj(killed-26, poison-24)
nsubj(maimed-28, poison-24)
ref(poison-24, that-25)
acl:relcl(poison-24, killed-26)
cc(killed-26, or-27)
acl:relcl(poison-24, maimed-28)
conj:or(killed-26, maimed-28)
advmod(million-31, over-29)
advmod(million-31, a-30)
nummod(people-32, million-31)
dobj(killed-26, people-32)
case(I-36, in-33)
compound(I-36, World-34)
compound(I-36, War-35)
nmod:in(killed-26, I-36)
punct(told-3, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: Last month , Thiokol said it settled the last suit with the estates of the seven crew members killed in the Challenger ./.
amod(month-2, Last-1)
nmod:tmod(said-5, month-2)
punct(said-5, ,-3)
nsubj(said-5, Thiokol-4)
root(ROOT-0, said-5)
nsubj(settled-7, it-6)
ccomp(said-5, settled-7)
det(suit-10, the-8)
amod(suit-10, last-9)
dobj(settled-7, suit-10)
case(estates-13, with-11)
det(estates-13, the-12)
nmod:with(settled-7, estates-13)
case(members-18, of-14)
det(members-18, the-15)
nummod(members-18, seven-16)
compound(members-18, crew-17)
nmod:of(estates-13, members-18)
acl(members-18, killed-19)
case(Challenger-22, in-20)
det(Challenger-22, the-21)
nmod:in(killed-19, Challenger-22)
punct(said-5, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#challenger

kill :: A JETLINER CRASHED at Dallas-Fort Worth Airport , killing 13 people ./.
det(JETLINER-2, A-1)
nsubj(CRASHED-3, JETLINER-2)
root(ROOT-0, CRASHED-3)
case(Airport-7, at-4)
compound(Airport-7, Dallas-Fort-5)
compound(Airport-7, Worth-6)
nmod:at(CRASHED-3, Airport-7)
punct(CRASHED-3, ,-8)
advcl(CRASHED-3, killing-9)
nummod(people-11, 13-10)
dobj(killing-9, people-11)
punct(CRASHED-3, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: His pal Shorty -LRB- John Mahoney -RRB- is an apparently gentle man , driven to killing blacks in cold blood in the middle of the night by the death of his son in Vietnam and by the loss of his farm ./.
nmod:poss(Shorty-3, His-1)
compound(Shorty-3, pal-2)
nsubj(man-12, Shorty-3)
punct(Mahoney-6, -LRB--4)
compound(Mahoney-6, John-5)
appos(Shorty-3, Mahoney-6)
punct(Mahoney-6, -RRB--7)
cop(man-12, is-8)
det(man-12, an-9)
advmod(gentle-11, apparently-10)
amod(man-12, gentle-11)
root(ROOT-0, man-12)
punct(man-12, ,-13)
acl(man-12, driven-14)
mark(killing-16, to-15)
advcl(driven-14, killing-16)
advcl(driven-14, killing-16')
conj:and(killing-16, killing-16')
dobj(killing-16, blacks-17)
case(blood-20, in-18)
amod(blood-20, cold-19)
nmod:in(killing-16, blood-20)
case(middle-23, in-21)
det(middle-23, the-22)
nmod:in(killing-16, middle-23)
case(night-26, of-24)
det(night-26, the-25)
nmod:of(middle-23, night-26)
case(death-29, by-27)
det(death-29, the-28)
nmod:by(killing-16, death-29)
case(son-32, of-30)
nmod:poss(son-32, his-31)
nmod:of(death-29, son-32)
case(Vietnam-34, in-33)
nmod:in(son-32, Vietnam-34)
cc(killing-16, and-35)
case(loss-38, by-36)
det(loss-38, the-37)
nmod:by(killing-16', loss-38)
case(farm-41, of-39)
nmod:poss(farm-41, his-40)
nmod:of(loss-38, farm-41)
punct(man-12, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#blacks

kill :: The guerrillas claim they killed 35 Angolans and 15 Cubans ./.
det(guerrillas-2, The-1)
nsubj(claim-3, guerrillas-2)
root(ROOT-0, claim-3)
nsubj(killed-5, they-4)
ccomp(claim-3, killed-5)
nummod(Angolans-7, 35-6)
dobj(killed-5, Angolans-7)
cc(Angolans-7, and-8)
nummod(Cubans-10, 15-9)
dobj(killed-5, Cubans-10)
conj:and(Angolans-7, Cubans-10)
punct(claim-3, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#angolans

kill :: The parts , which included a tail assembly for the F-104 and a key component of the A-7 's stability system , were critical items , and Navy fliers could have been killed if the parts were used , the prosecutor said ./.
det(parts-2, The-1)
nsubj(included-5, parts-2)
nsubj(items-25, parts-2)
punct(parts-2, ,-3)
ref(parts-2, which-4)
acl:relcl(parts-2, included-5)
det(assembly-8, a-6)
compound(assembly-8, tail-7)
dobj(included-5, assembly-8)
case(F-104-11, for-9)
det(F-104-11, the-10)
nmod:for(assembly-8, F-104-11)
cc(assembly-8, and-12)
det(component-15, a-13)
amod(component-15, key-14)
dobj(included-5, component-15)
conj:and(assembly-8, component-15)
case(system-21, of-16)
det(A-7-18, the-17)
nmod:poss(system-21, A-7-18)
case(A-7-18, 's-19)
compound(system-21, stability-20)
nmod:of(component-15, system-21)
punct(parts-2, ,-22)
cop(items-25, were-23)
amod(items-25, critical-24)
ccomp(said-42, items-25)
punct(items-25, ,-26)
cc(items-25, and-27)
compound(fliers-29, Navy-28)
nsubjpass(killed-33, fliers-29)
aux(killed-33, could-30)
aux(killed-33, have-31)
auxpass(killed-33, been-32)
conj:and(items-25, killed-33)
ccomp(said-42, killed-33)
mark(used-38, if-34)
det(parts-36, the-35)
nsubjpass(used-38, parts-36)
auxpass(used-38, were-37)
advcl(killed-33, used-38)
punct(said-42, ,-39)
det(prosecutor-41, the-40)
nsubj(said-42, prosecutor-41)
root(ROOT-0, said-42)
punct(said-42, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#fliers

kill :: Mr. Brooks tape-recorded one of the men present at the meeting saying that he believes Indians ritualistically kill and mutilate one another ./.
compound(Brooks-2, Mr.-1)
root(ROOT-0, Brooks-2)
mark(believes-15, Brooks-2)
amod(one-4, tape-recorded-3)
nsubj(saying-12, one-4)
case(men-7, of-5)
det(men-7, the-6)
nmod:of(one-4, men-7)
amod(men-7, present-8)
case(meeting-11, at-9)
det(meeting-11, the-10)
nmod:at(present-8, meeting-11)
acl:relcl(Brooks-2, saying-12)
ref(Brooks-2, that-13)
nsubj(believes-15, he-14)
ccomp(saying-12, believes-15)
nsubj(kill-18, Indians-16)
nsubj(mutilate-20, Indians-16)
advmod(kill-18, ritualistically-17)
ccomp(believes-15, kill-18)
cc(kill-18, and-19)
ccomp(believes-15, mutilate-20)
conj:and(kill-18, mutilate-20)
nummod(another-22, one-21)
dobj(kill-18, another-22)
punct(Brooks-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#another

kill :: The spokesman said , however , that the plane was transmitting an identifying signal usually associated with civilian aircraft when a U.S. cruiser fired two missiles and killed all 290 aboard ./.
det(spokesman-2, The-1)
nsubj(said-3, spokesman-2)
root(ROOT-0, said-3)
punct(said-3, ,-4)
advmod(said-3, however-5)
punct(said-3, ,-6)
mark(transmitting-11, that-7)
det(plane-9, the-8)
nsubj(transmitting-11, plane-9)
aux(transmitting-11, was-10)
ccomp(said-3, transmitting-11)
det(signal-14, an-12)
amod(signal-14, identifying-13)
dobj(transmitting-11, signal-14)
advmod(associated-16, usually-15)
acl(signal-14, associated-16)
case(aircraft-19, with-17)
amod(aircraft-19, civilian-18)
nmod:with(associated-16, aircraft-19)
advmod(fired-24, when-20)
det(cruiser-23, a-21)
compound(cruiser-23, U.S.-22)
nsubj(fired-24, cruiser-23)
nsubj(killed-28, cruiser-23)
advcl(associated-16, fired-24)
nummod(missiles-26, two-25)
dobj(fired-24, missiles-26)
cc(fired-24, and-27)
advcl(associated-16, killed-28)
conj:and(fired-24, killed-28)
advmod(290-30, all-29)
dobj(killed-28, 290-30)
advmod(290-30, aboard-31)
punct(said-3, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#290

kill :: `` Where I live , in Silkstone in Yorkshire , we just had a memorial service as we put up a monument for some kids who were killed underground about 100 years ago -- about 80 kids , three , four , and five years of age , '' she said ./.
root(ROOT-0, ``-1)
advmod(live-4, Where-2)
nsubj(live-4, I-3)
advcl(had-13, live-4)
punct(had-13, ,-5)
case(Silkstone-7, in-6)
nmod:in(had-13, Silkstone-7)
case(Yorkshire-9, in-8)
nmod:in(Silkstone-7, Yorkshire-9)
punct(had-13, ,-10)
nsubj(had-13, we-11)
advmod(had-13, just-12)
root(``-1, had-13)
det(service-16, a-14)
compound(service-16, memorial-15)
dobj(had-13, service-16)
mark(put-19, as-17)
nsubj(put-19, we-18)
advcl(had-13, put-19)
compound:prt(put-19, up-20)
det(monument-22, a-21)
dobj(put-19, monument-22)
case(kids-25, for-23)
det(kids-25, some-24)
nmod:for(put-19, kids-25)
nsubjpass(killed-28, kids-25)
ref(kids-25, who-26)
auxpass(killed-28, were-27)
acl:relcl(kids-25, killed-28)
xcomp(killed-28, underground-29)
advmod(100-31, about-30)
nummod(years-32, 100-31)
nmod:npmod(ago-33, years-32)
advmod(killed-28, ago-33)
punct(kids-25, ---34)
advmod(80-36, about-35)
nummod(kids-37, 80-36)
dep(said-51, kids-37)
punct(kids-37, ,-38)
appos(kids-37, three-39)
punct(three-39, ,-40)
appos(kids-37, four-41)
conj:and(three-39, four-41)
punct(three-39, ,-42)
cc(three-39, and-43)
nummod(years-45, five-44)
appos(kids-37, years-45)
conj:and(three-39, years-45)
case(age-47, of-46)
nmod:of(years-45, age-47)
punct(kids-37, ,-48)
punct(kids-37, ''-49)
nsubj(said-51, she-50)
dep(kids-25, said-51)
punct(had-13, .-52)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#kids

kill :: The lawmaker suggested that Thiokol might be trying to kill the advanced-rocket program to ensure that the current rocket is used even longer ./.
det(lawmaker-2, The-1)
nsubj(suggested-3, lawmaker-2)
root(ROOT-0, suggested-3)
mark(trying-8, that-4)
nsubj(trying-8, Thiokol-5)
nsubj:xsubj(kill-10, Thiokol-5)
aux(trying-8, might-6)
aux(trying-8, be-7)
ccomp(suggested-3, trying-8)
mark(kill-10, to-9)
xcomp(trying-8, kill-10)
det(program-13, the-11)
amod(program-13, advanced-rocket-12)
dobj(kill-10, program-13)
mark(ensure-15, to-14)
advcl(kill-10, ensure-15)
mark(used-21, that-16)
det(rocket-19, the-17)
amod(rocket-19, current-18)
nsubjpass(used-21, rocket-19)
auxpass(used-21, is-20)
ccomp(ensure-15, used-21)
advmod(longer-23, even-22)
advmod(used-21, longer-23)
punct(suggested-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#program

kill :: Lebanese police said at least 17 people were killed and as many as 50 wounded in the house-to-house battles ./.
amod(police-2, Lebanese-1)
nsubj(said-3, police-2)
root(ROOT-0, said-3)
case(least-5, at-4)
nmod:npmod(17-6, least-5)
nummod(people-7, 17-6)
nsubjpass(killed-9, people-7)
nsubjpass(wounded-15, people-7)
auxpass(killed-9, were-8)
ccomp(said-3, killed-9)
cc(killed-9, and-10)
advmod(50-14, as-11)
advmod(50-14, many-12)
advmod(50-14, as-13)
nummod(wounded-15, 50-14)
ccomp(said-3, wounded-15)
conj:and(killed-9, wounded-15)
case(battles-19, in-16)
det(battles-19, the-17)
amod(battles-19, house-to-house-18)
nmod:in(killed-9, battles-19)
punct(said-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: The pilot was killed , the navigator seriously injured ./.
det(pilot-2, The-1)
nsubjpass(killed-4, pilot-2)
auxpass(killed-4, was-3)
root(ROOT-0, killed-4)
punct(killed-4, ,-5)
det(navigator-7, the-6)
nsubj(injured-9, navigator-7)
advmod(injured-9, seriously-8)
xcomp(killed-4, injured-9)
punct(killed-4, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#pilot

kill :: Separately , a Soviet news agency said as many as 15 , 000 Soviet troops were killed in the 8 1 2-year war ./.
advmod(said-7, Separately-1)
punct(said-7, ,-2)
det(agency-6, a-3)
amod(agency-6, Soviet-4)
compound(agency-6, news-5)
nsubj(said-7, agency-6)
root(ROOT-0, said-7)
advmod(15-11, as-8)
advmod(15-11, many-9)
advmod(15-11, as-10)
nmod(said-7, 15-11)
punct(15-11, ,-12)
nummod(troops-15, 000-13)
amod(troops-15, Soviet-14)
nsubjpass(killed-17, troops-15)
auxpass(killed-17, were-16)
acl:relcl(15-11, killed-17)
case(war-23, in-18)
det(war-23, the-19)
nummod(war-23, 8-20)
nummod(war-23, 1-21)
amod(war-23, 2-year-22)
nmod:in(killed-17, war-23)
punct(said-7, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#troops

kill :: The latest truce in the week-old battle , which has killed 188 and injured 534 , was arranged by Syrian President Assad and Iranian President Khamenei ./.
det(truce-3, The-1)
amod(truce-3, latest-2)
nsubjpass(arranged-18, truce-3)
case(battle-7, in-4)
det(battle-7, the-5)
amod(battle-7, week-old-6)
nmod:in(truce-3, battle-7)
nsubj(killed-11, battle-7)
nsubj(injured-14, battle-7)
punct(battle-7, ,-8)
ref(battle-7, which-9)
aux(killed-11, has-10)
acl:relcl(battle-7, killed-11)
dobj(killed-11, 188-12)
cc(killed-11, and-13)
acl:relcl(battle-7, injured-14)
conj:and(killed-11, injured-14)
dobj(injured-14, 534-15)
punct(battle-7, ,-16)
auxpass(arranged-18, was-17)
root(ROOT-0, arranged-18)
case(Assad-22, by-19)
amod(Assad-22, Syrian-20)
compound(Assad-22, President-21)
nmod:agent(arranged-18, Assad-22)
cc(Assad-22, and-23)
compound(Khamenei-26, Iranian-24)
compound(Khamenei-26, President-25)
nmod:agent(arranged-18, Khamenei-26)
conj:and(Assad-22, Khamenei-26)
punct(arranged-18, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#188

kill :: Pravda said an Azerbaijan metalworker went on trial for murder for his part in February ethnic riots that killed at least 32 in the Soviet republic ./.
nsubj(said-2, Pravda-1)
root(ROOT-0, said-2)
det(metalworker-5, an-3)
compound(metalworker-5, Azerbaijan-4)
nsubj(went-6, metalworker-5)
ccomp(said-2, went-6)
case(trial-8, on-7)
nmod:on(went-6, trial-8)
case(murder-10, for-9)
nmod:for(went-6, murder-10)
case(part-13, for-11)
nmod:poss(part-13, his-12)
nmod:for(went-6, part-13)
nsubj(killed-19, part-13)
case(riots-17, in-14)
compound(riots-17, February-15)
amod(riots-17, ethnic-16)
nmod:in(part-13, riots-17)
ref(part-13, that-18)
acl:relcl(part-13, killed-19)
case(least-21, at-20)
nmod:npmod(32-22, least-21)
dobj(killed-19, 32-22)
case(republic-26, in-23)
det(republic-26, the-24)
compound(republic-26, Soviet-25)
nmod:in(32-22, republic-26)
punct(said-2, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#32

kill :: According to Indian government estimates , more than 2 , 800 people were killed by the escaping gas and thousands were injured ./.
case(estimates-5, According-1)
mwe(According-1, to-2)
amod(estimates-5, Indian-3)
compound(estimates-5, government-4)
nmod:according_to(killed-14, estimates-5)
punct(killed-14, ,-6)
advmod(2-9, more-7)
mwe(more-7, than-8)
dep(killed-14, 2-9)
punct(killed-14, ,-10)
nummod(people-12, 800-11)
nsubjpass(killed-14, people-12)
auxpass(killed-14, were-13)
csubjpass(injured-22, killed-14)
case(gas-18, by-15)
det(gas-18, the-16)
amod(gas-18, escaping-17)
nmod:agent(killed-14, gas-18)
cc(gas-18, and-19)
nmod:agent(killed-14, thousands-20)
conj:and(gas-18, thousands-20)
auxpass(injured-22, were-21)
root(ROOT-0, injured-22)
punct(injured-22, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: -- The high court , 6-2 , temporarily reversed U.S. attempts to strip an alleged Nazi collaborator of U.S. citizenship and ordered new hearings for a retired New Jersey dental technician who is accused of helping to kill Jews in Lithuania during World War II ./.
punct(reversed-9, ---1)
det(court-4, The-2)
amod(court-4, high-3)
nsubj(reversed-9, court-4)
nsubj(ordered-22, court-4)
punct(court-4, ,-5)
appos(court-4, 6-2-6)
punct(court-4, ,-7)
advmod(reversed-9, temporarily-8)
root(ROOT-0, reversed-9)
compound(attempts-11, U.S.-10)
dobj(reversed-9, attempts-11)
mark(strip-13, to-12)
acl(attempts-11, strip-13)
det(collaborator-17, an-14)
amod(collaborator-17, alleged-15)
amod(collaborator-17, Nazi-16)
dobj(strip-13, collaborator-17)
case(citizenship-20, of-18)
compound(citizenship-20, U.S.-19)
nmod:of(collaborator-17, citizenship-20)
cc(reversed-9, and-21)
conj:and(reversed-9, ordered-22)
amod(hearings-24, new-23)
dobj(ordered-22, hearings-24)
case(technician-31, for-25)
det(technician-31, a-26)
amod(technician-31, retired-27)
compound(technician-31, New-28)
compound(technician-31, Jersey-29)
amod(technician-31, dental-30)
nmod:for(hearings-24, technician-31)
nsubjpass(accused-34, technician-31)
ref(technician-31, who-32)
auxpass(accused-34, is-33)
acl:relcl(technician-31, accused-34)
mark(helping-36, of-35)
advcl(accused-34, helping-36)
mark(kill-38, to-37)
xcomp(helping-36, kill-38)
dobj(kill-38, Jews-39)
case(Lithuania-41, in-40)
nmod:in(kill-38, Lithuania-41)
case(II-45, during-42)
compound(II-45, World-43)
compound(II-45, War-44)
nmod:during(kill-38, II-45)
punct(reversed-9, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#jews

kill :: As Bismarck wrote more than a century ago: `` I , who prepare to go to war , kill thousands , the Christians in the name of God kill millions . ''/''
mark(wrote-3, As-1)
nsubj(wrote-3, Bismarck-2)
root(ROOT-0, wrote-3)
advmod(ago-8, more-4)
case(century-7, than-5)
det(century-7, a-6)
nmod:than(more-4, century-7)
advmod(wrote-3, ago-8)
punct(wrote-3, :-9)
punct(I-11, ``-10)
nsubj(prepare-14, I-11)
nsubj:xsubj(go-16, I-11)
nsubj(kill-20, I-11)
punct(I-11, ,-12)
ref(I-11, who-13)
acl:relcl(I-11, prepare-14)
mark(go-16, to-15)
xcomp(prepare-14, go-16)
case(war-18, to-17)
nmod:to(go-16, war-18)
punct(I-11, ,-19)
ccomp(wrote-3, kill-20)
dobj(kill-20, thousands-21)
punct(thousands-21, ,-22)
det(Christians-24, the-23)
nsubj(kill-30, Christians-24)
case(name-27, in-25)
det(name-27, the-26)
nmod:in(Christians-24, name-27)
case(God-29, of-28)
nmod:of(name-27, God-29)
acl:relcl(thousands-21, kill-30)
dobj(kill-30, millions-31)
punct(wrote-3, .-32)
punct(wrote-3, ''-33)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kill#thousands

kill :: In Beirut , the pro-Iranian group Jihad threatened to kill its American and French captives if any attempt was made to storm the jetliner ./.
case(Beirut-2, In-1)
root(ROOT-0, Beirut-2)
punct(Beirut-2, ,-3)
det(group-6, the-4)
amod(group-6, pro-Iranian-5)
root(,-3, group-6)
nsubj(threatened-8, Jihad-7)
nsubj:xsubj(kill-10, Jihad-7)
acl:relcl(group-6, threatened-8)
mark(kill-10, to-9)
xcomp(threatened-8, kill-10)
nmod:poss(captives-15, its-11)
amod(captives-15, American-12)
cc(American-12, and-13)
conj:and(American-12, French-14)
amod(captives-15, French-14)
dobj(kill-10, captives-15)
mark(made-20, if-16)
det(attempt-18, any-17)
nsubjpass(made-20, attempt-18)
nsubj:xsubj(storm-22, attempt-18)
auxpass(made-20, was-19)
advcl(kill-10, made-20)
mark(storm-22, to-21)
xcomp(made-20, storm-22)
det(jetliner-24, the-23)
dobj(storm-22, jetliner-24)
punct(group-6, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#captives

kill :: Now the suspense is killing ./.
advmod(killing-5, Now-1)
det(suspense-3, the-2)
nsubj(killing-5, suspense-3)
aux(killing-5, is-4)
root(ROOT-0, killing-5)
punct(killing-5, .-6)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#suspense

kill :: Senator Kennedy , and the handful of legislators who knew about the secret provision , intended to kill two unfriendly newspapers ./.
compound(Kennedy-2, Senator-1)
root(ROOT-0, Kennedy-2)
punct(Kennedy-2, ,-3)
cc(Kennedy-2, and-4)
det(handful-6, the-5)
conj:and(Kennedy-2, handful-6)
case(legislators-8, of-7)
nmod:of(handful-6, legislators-8)
nsubj(knew-10, legislators-8)
ref(legislators-8, who-9)
acl:relcl(legislators-8, knew-10)
case(provision-14, about-11)
det(provision-14, the-12)
amod(provision-14, secret-13)
nmod:about(knew-10, provision-14)
punct(Kennedy-2, ,-15)
acl(Kennedy-2, intended-16)
mark(kill-18, to-17)
xcomp(intended-16, kill-18)
nummod(newspapers-21, two-19)
amod(newspapers-21, unfriendly-20)
dobj(kill-18, newspapers-21)
punct(Kennedy-2, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#newspapers

kill :: Julian Pierce , a Lumbee Indian running for Superior Court judge in Robeson County , was killed Saturday ./.
compound(Pierce-2, Julian-1)
nsubjpass(killed-17, Pierce-2)
punct(Pierce-2, ,-3)
det(running-7, a-4)
amod(running-7, Lumbee-5)
amod(running-7, Indian-6)
appos(Pierce-2, running-7)
case(judge-11, for-8)
amod(judge-11, Superior-9)
compound(judge-11, Court-10)
nmod:for(running-7, judge-11)
case(County-14, in-12)
compound(County-14, Robeson-13)
nmod:in(running-7, County-14)
punct(Pierce-2, ,-15)
auxpass(killed-17, was-16)
root(ROOT-0, killed-17)
nmod:tmod(killed-17, Saturday-18)
punct(killed-17, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#pierce

kill :: `` Does somebody have to get hurt -- or killed ? ''/''
punct(have-4, ``-1)
aux(have-4, Does-2)
nsubj(have-4, somebody-3)
nsubj:xsubj(get-6, somebody-3)
root(ROOT-0, have-4)
mark(get-6, to-5)
xcomp(have-4, get-6)
xcomp(get-6, hurt-7)
punct(killed-10, ---8)
cc(killed-10, or-9)
dep(hurt-7, killed-10)
punct(have-4, ?-11)
punct(have-4, ''-12)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

kill :: But let 's be specific and kill off only those programs that are n't working ./.
cc(specific-5, But-1)
aux(specific-5, let-2)
auxpass(specific-5, 's-3)
cop(specific-5, be-4)
root(ROOT-0, specific-5)
cc(specific-5, and-6)
conj:and(specific-5, kill-7)
compound:prt(kill-7, off-8)
advmod(programs-11, only-9)
det(programs-11, those-10)
dobj(kill-7, programs-11)
nsubj(working-15, programs-11)
ref(programs-11, that-12)
aux(working-15, are-13)
neg(working-15, n't-14)
acl:relcl(programs-11, working-15)
punct(specific-5, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#programs

kill :: Centralization , on the other hand , kills motivation and crushes the human spirit ./.
nsubj(kills-8, Centralization-1)
nsubj(crushes-11, Centralization-1)
punct(kills-8, ,-2)
case(hand-6, on-3)
det(hand-6, the-4)
amod(hand-6, other-5)
nmod:on(kills-8, hand-6)
punct(kills-8, ,-7)
root(ROOT-0, kills-8)
dobj(kills-8, motivation-9)
cc(kills-8, and-10)
conj:and(kills-8, crushes-11)
det(spirit-14, the-12)
amod(spirit-14, human-13)
dobj(crushes-11, spirit-14)
punct(kills-8, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#motivation

kill :: The federal government and Morton Thiokol Inc. bought annuities totaling $ 7.7 million to settle legal claims by the survivors of four of the astronauts killed in the Challenger disaster , documents showed ./.
det(government-3, The-1)
amod(government-3, federal-2)
nsubj(bought-8, government-3)
cc(government-3, and-4)
compound(Inc.-7, Morton-5)
compound(Inc.-7, Thiokol-6)
conj:and(government-3, Inc.-7)
nsubj(bought-8, Inc.-7)
ccomp(showed-33, bought-8)
dobj(bought-8, annuities-9)
acl(annuities-9, totaling-10)
dobj(totaling-10, $-11)
compound(million-13, 7.7-12)
nummod($-11, million-13)
mark(settle-15, to-14)
advcl(bought-8, settle-15)
amod(claims-17, legal-16)
dobj(settle-15, claims-17)
case(survivors-20, by-18)
det(survivors-20, the-19)
nmod:by(claims-17, survivors-20)
case(four-22, of-21)
nmod:of(survivors-20, four-22)
case(astronauts-25, of-23)
det(astronauts-25, the-24)
nmod:of(four-22, astronauts-25)
acl(astronauts-25, killed-26)
case(disaster-30, in-27)
det(disaster-30, the-28)
compound(disaster-30, Challenger-29)
nmod:in(killed-26, disaster-30)
punct(showed-33, ,-31)
nsubj(showed-33, documents-32)
root(ROOT-0, showed-33)
punct(showed-33, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#disaster

kill :: Iran retaliated by firing two missiles that struck Baghdad , killing or injuring an unspecified number of people ./.
nsubj(retaliated-2, Iran-1)
root(ROOT-0, retaliated-2)
case(missiles-6, by-3)
compound(missiles-6, firing-4)
nummod(missiles-6, two-5)
nmod:by(retaliated-2, missiles-6)
nsubj(struck-8, missiles-6)
ref(missiles-6, that-7)
acl:relcl(missiles-6, struck-8)
dobj(struck-8, Baghdad-9)
punct(retaliated-2, ,-10)
advcl(retaliated-2, killing-11)
cc(killing-11, or-12)
advcl(retaliated-2, injuring-13)
conj:or(killing-11, injuring-13)
det(number-16, an-14)
amod(number-16, unspecified-15)
dobj(killing-11, number-16)
case(people-18, of-17)
nmod:of(number-16, people-18)
punct(retaliated-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: But although negotiations have stalled , an agreement that would kill Shoreham while keeping Lilco whole is still likely , these persons said ./.
cc(likely-19, But-1)
mark(stalled-5, although-2)
nsubj(stalled-5, negotiations-3)
aux(stalled-5, have-4)
advcl(likely-19, stalled-5)
punct(likely-19, ,-6)
det(agreement-8, an-7)
nsubj(kill-11, agreement-8)
nsubj(likely-19, agreement-8)
ref(agreement-8, that-9)
aux(kill-11, would-10)
acl:relcl(agreement-8, kill-11)
dobj(kill-11, Shoreham-12)
mark(keeping-14, while-13)
advcl(kill-11, keeping-14)
compound(whole-16, Lilco-15)
dobj(keeping-14, whole-16)
cop(likely-19, is-17)
advmod(likely-19, still-18)
ccomp(said-23, likely-19)
punct(said-23, ,-20)
det(persons-22, these-21)
nsubj(said-23, persons-22)
root(ROOT-0, said-23)
punct(said-23, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#shoreham

kill :: Indian troops in Sri Lanka killed 20 Tamil civilians after four soldiers died in an ambush by Tamil rebels , officials in Colombo said ./.
amod(troops-2, Indian-1)
nsubj(killed-6, troops-2)
case(Lanka-5, in-3)
compound(Lanka-5, Sri-4)
nmod:in(troops-2, Lanka-5)
ccomp(said-24, killed-6)
nummod(civilians-9, 20-7)
compound(civilians-9, Tamil-8)
dobj(killed-6, civilians-9)
mark(died-13, after-10)
nummod(soldiers-12, four-11)
nsubj(died-13, soldiers-12)
advcl(killed-6, died-13)
case(ambush-16, in-14)
det(ambush-16, an-15)
nmod:in(died-13, ambush-16)
case(rebels-19, by-17)
compound(rebels-19, Tamil-18)
nmod:by(died-13, rebels-19)
punct(said-24, ,-20)
nsubj(said-24, officials-21)
case(Colombo-23, in-22)
nmod:in(officials-21, Colombo-23)
root(ROOT-0, said-24)
punct(said-24, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#civilians

kill :: When eaten , the worms release bacteria that kill the insects ./.
advmod(eaten-2, When-1)
advcl(release-6, eaten-2)
punct(release-6, ,-3)
det(worms-5, the-4)
nsubj(release-6, worms-5)
root(ROOT-0, release-6)
dobj(release-6, bacteria-7)
nsubj(kill-9, bacteria-7)
ref(bacteria-7, that-8)
acl:relcl(bacteria-7, kill-9)
det(insects-11, the-10)
dobj(kill-9, insects-11)
punct(release-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#insects

kill :: `` The market had a bad spill on Friday , and normally when that happens they absolutely kill it on Monday , '' said Bernard Savaiko , senior precious metals analyst for PaineWebber Inc . , New York ./.
punct(said-24, ``-1)
det(market-3, The-2)
nsubj(had-4, market-3)
ccomp(said-24, had-4)
det(spill-7, a-5)
amod(spill-7, bad-6)
dobj(had-4, spill-7)
case(Friday-9, on-8)
nmod:on(had-4, Friday-9)
punct(had-4, ,-10)
cc(had-4, and-11)
advmod(when-13, normally-12)
advmod(happens-15, when-13)
nsubj(happens-15, that-14)
conj:and(had-4, happens-15)
ccomp(said-24, happens-15)
nsubj(kill-18, they-16)
advmod(kill-18, absolutely-17)
ccomp(happens-15, kill-18)
dobj(kill-18, it-19)
case(Monday-21, on-20)
nmod:on(kill-18, Monday-21)
punct(said-24, ,-22)
punct(said-24, ''-23)
root(ROOT-0, said-24)
compound(Savaiko-26, Bernard-25)
nsubj(said-24, Savaiko-26)
punct(Savaiko-26, ,-27)
amod(analyst-31, senior-28)
amod(analyst-31, precious-29)
compound(analyst-31, metals-30)
appos(Savaiko-26, analyst-31)
case(Inc-34, for-32)
compound(Inc-34, PaineWebber-33)
nmod:for(analyst-31, Inc-34)
punct(said-24, .-35)
punct(York-3, ,-1)
compound(York-3, New-2)
root(ROOT-0, York-3)
punct(York-3, .-4)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#it

kill :: Sixteen people were killed in the crash ./.
nummod(people-2, Sixteen-1)
nsubjpass(killed-4, people-2)
auxpass(killed-4, were-3)
root(ROOT-0, killed-4)
case(crash-7, in-5)
det(crash-7, the-6)
nmod:in(killed-4, crash-7)
punct(killed-4, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: The Salk vaccine is composed of killed polio virus ./.
det(vaccine-3, The-1)
compound(vaccine-3, Salk-2)
nsubjpass(composed-5, vaccine-3)
auxpass(composed-5, is-4)
root(ROOT-0, composed-5)
case(virus-9, of-6)
amod(virus-9, killed-7)
compound(virus-9, polio-8)
nmod:of(composed-5, virus-9)
punct(composed-5, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#virus

kill :: Making the Paris-Dakar rally less perilous , Mr. Sabine says , might kill it ./.
csubj(kill-13, Making-1)
det(rally-4, the-2)
amod(rally-4, Paris-Dakar-3)
dobj(Making-1, rally-4)
advmod(perilous-6, less-5)
advmod(Making-1, perilous-6)
punct(says-10, ,-7)
compound(Sabine-9, Mr.-8)
nsubj(says-10, Sabine-9)
parataxis(kill-13, says-10)
punct(says-10, ,-11)
aux(kill-13, might-12)
root(ROOT-0, kill-13)
dobj(kill-13, it-14)
punct(kill-13, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#it

kill :: He quashed the legislation despite the fact that first-degree murder involves killing with premeditation or with particular cruelty , such as torture ./.
nsubj(quashed-2, He-1)
root(ROOT-0, quashed-2)
det(legislation-4, the-3)
dobj(quashed-2, legislation-4)
case(fact-7, despite-5)
det(fact-7, the-6)
nmod:despite(quashed-2, fact-7)
mark(involves-11, that-8)
amod(murder-10, first-degree-9)
nsubj(involves-11, murder-10)
ccomp(fact-7, involves-11)
xcomp(involves-11, killing-12)
xcomp(involves-11, killing-12')
conj:or(killing-12, killing-12')
case(premeditation-14, with-13)
nmod:with(killing-12, premeditation-14)
cc(killing-12, or-15)
case(cruelty-18, with-16)
amod(cruelty-18, particular-17)
nmod:with(killing-12', cruelty-18)
punct(cruelty-18, ,-19)
case(torture-22, such-20)
mwe(such-20, as-21)
nmod:such_as(cruelty-18, torture-22)
punct(quashed-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#premeditation

kill :: Israel deported eight Palestinians to Lebanon and ordered the expulsion of 12 others , including six from the West Bank village where an Israeli teen-ager and two Palestinian youths were killed last week ./.
nsubj(deported-2, Israel-1)
nsubj(ordered-8, Israel-1)
root(ROOT-0, deported-2)
nummod(Palestinians-4, eight-3)
dobj(deported-2, Palestinians-4)
case(Lebanon-6, to-5)
nmod:to(deported-2, Lebanon-6)
cc(deported-2, and-7)
conj:and(deported-2, ordered-8)
det(expulsion-10, the-9)
dobj(ordered-8, expulsion-10)
case(others-13, of-11)
nummod(others-13, 12-12)
nmod:of(expulsion-10, others-13)
punct(others-13, ,-14)
case(six-16, including-15)
nmod:including(others-13, six-16)
case(village-21, from-17)
det(village-21, the-18)
compound(village-21, West-19)
compound(village-21, Bank-20)
nmod:from(six-16, village-21)
advmod(killed-31, where-22)
det(teen-ager-25, an-23)
amod(teen-ager-25, Israeli-24)
nsubjpass(killed-31, teen-ager-25)
cc(teen-ager-25, and-26)
nummod(youths-29, two-27)
amod(youths-29, Palestinian-28)
conj:and(teen-ager-25, youths-29)
nsubjpass(killed-31, youths-29)
auxpass(killed-31, were-30)
acl:relcl(village-21, killed-31)
amod(week-33, last-32)
nmod:tmod(killed-31, week-33)
punct(deported-2, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#teen-ager

kill :: Meanwhile , a Palestinian was reported killed and the PLO called for a `` day of firebombs '' April 21 ./.
advmod(reported-6, Meanwhile-1)
punct(reported-6, ,-2)
det(Palestinian-4, a-3)
nsubjpass(reported-6, Palestinian-4)
auxpass(reported-6, was-5)
root(ROOT-0, reported-6)
dep(reported-6, killed-7)
cc(killed-7, and-8)
det(PLO-10, the-9)
nsubj(called-11, PLO-10)
dep(reported-6, called-11)
conj:and(killed-7, called-11)
case(day-15, for-12)
det(day-15, a-13)
punct(day-15, ``-14)
nmod:for(called-11, day-15)
case(firebombs-17, of-16)
nmod:of(day-15, firebombs-17)
punct(day-15, ''-18)
dep(day-15, April-19)
nummod(April-19, 21-20)
punct(reported-6, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

kill :: The Japanese carrier was shaken in 1985 by a crash of a JAL Boeing 747 that killed 520 people , the worst single-aircraft accident in aviation history , and safety is a central issue in JAL 's current negotiations with several unions ./.
det(carrier-3, The-1)
amod(carrier-3, Japanese-2)
nsubjpass(shaken-5, carrier-3)
auxpass(shaken-5, was-4)
csubj(issue-34, shaken-5)
case(1985-7, in-6)
nmod:in(shaken-5, 1985-7)
case(crash-10, by-8)
det(crash-10, a-9)
nmod:agent(shaken-5, crash-10)
case(Boeing-14, of-11)
det(Boeing-14, a-12)
compound(Boeing-14, JAL-13)
nmod:of(crash-10, Boeing-14)
nsubj(killed-17, Boeing-14)
nummod(Boeing-14, 747-15)
ref(Boeing-14, that-16)
acl:relcl(Boeing-14, killed-17)
nummod(people-19, 520-18)
dobj(killed-17, people-19)
punct(crash-10, ,-20)
det(accident-24, the-21)
amod(accident-24, worst-22)
amod(accident-24, single-aircraft-23)
nmod:agent(shaken-5, accident-24)
conj:and(crash-10, accident-24)
case(history-27, in-25)
compound(history-27, aviation-26)
nmod:in(accident-24, history-27)
punct(crash-10, ,-28)
cc(crash-10, and-29)
nmod:agent(shaken-5, safety-30)
conj:and(crash-10, safety-30)
cop(issue-34, is-31)
det(issue-34, a-32)
amod(issue-34, central-33)
root(ROOT-0, issue-34)
case(negotiations-39, in-35)
nmod:poss(negotiations-39, JAL-36)
case(JAL-36, 's-37)
amod(negotiations-39, current-38)
nmod:in(issue-34, negotiations-39)
case(unions-42, with-40)
amod(unions-42, several-41)
nmod:with(negotiations-39, unions-42)
punct(issue-34, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: The message was programmed to be seen only once -- on March 2 -- `` then it killed itself , '' she said ./.
det(message-2, The-1)
nsubjpass(programmed-4, message-2)
nsubjpass:xsubj(seen-7, message-2)
auxpass(programmed-4, was-3)
root(ROOT-0, programmed-4)
mark(seen-7, to-5)
auxpass(seen-7, be-6)
xcomp(programmed-4, seen-7)
advmod(once-9, only-8)
advmod(said-23, once-9)
punct(said-23, ---10)
case(March-12, on-11)
nmod:on(said-23, March-12)
nummod(March-12, 2-13)
punct(killed-18, ---14)
punct(killed-18, ``-15)
advmod(killed-18, then-16)
nsubj(killed-18, it-17)
dep(said-23, killed-18)
dobj(killed-18, itself-19)
punct(killed-18, ,-20)
punct(killed-18, ''-21)
nsubj(said-23, she-22)
ccomp(seen-7, said-23)
punct(programmed-4, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#itself

kill :: But the Colombians seized the emissary and threatened to kill him if the colonel did n't turn over the drugs ./.
cc(seized-4, But-1)
det(Colombians-3, the-2)
nsubj(seized-4, Colombians-3)
nsubj(threatened-8, Colombians-3)
nsubj:xsubj(kill-10, Colombians-3)
root(ROOT-0, seized-4)
det(emissary-6, the-5)
dobj(seized-4, emissary-6)
cc(seized-4, and-7)
conj:and(seized-4, threatened-8)
mark(kill-10, to-9)
xcomp(threatened-8, kill-10)
dobj(kill-10, him-11)
mark(turn-17, if-12)
det(colonel-14, the-13)
nsubj(turn-17, colonel-14)
aux(turn-17, did-15)
neg(turn-17, n't-16)
advcl(kill-10, turn-17)
compound:prt(turn-17, over-18)
det(drugs-20, the-19)
dobj(turn-17, drugs-20)
punct(seized-4, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#him

kill :: According to Mr. Gage , Mr. Mulheren later told police , several of whom are friends of his , that he would kill Messrs ./.
case(Gage-4, According-1)
mwe(According-1, to-2)
compound(Gage-4, Mr.-3)
nmod:according_to(told-9, Gage-4)
punct(told-9, ,-5)
compound(Mulheren-7, Mr.-6)
nsubj(told-9, Mulheren-7)
advmod(told-9, later-8)
root(ROOT-0, told-9)
dobj(told-9, police-10)
nmod:of(several-12, police-10)
punct(police-10, ,-11)
nsubj(friends-16, several-12)
case(whom-14, of-13)
ref(police-10, whom-14)
cop(friends-16, are-15)
acl:relcl(police-10, friends-16)
case(his-18, of-17)
nmod:of(friends-16, his-18)
punct(police-10, ,-19)
mark(kill-23, that-20)
nsubj(kill-23, he-21)
aux(kill-23, would-22)
ccomp(told-9, kill-23)
dobj(kill-23, Messrs-24)
punct(told-9, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#messrs

kill :: In November , North Korean agents blew up a Korean airliner en route to Seoul , killing all 115 people aboard ./.
case(November-2, In-1)
nmod:in(blew-7, November-2)
punct(blew-7, ,-3)
amod(agents-6, North-4)
amod(agents-6, Korean-5)
nsubj(blew-7, agents-6)
root(ROOT-0, blew-7)
compound:prt(blew-7, up-8)
det(airliner-11, a-9)
amod(airliner-11, Korean-10)
dobj(blew-7, airliner-11)
case(route-13, en-12)
nmod:en(airliner-11, route-13)
case(Seoul-15, to-14)
nmod:to(route-13, Seoul-15)
punct(blew-7, ,-16)
advcl(blew-7, killing-17)
advmod(115-19, all-18)
nummod(people-20, 115-19)
dobj(killing-17, people-20)
advmod(killing-17, aboard-21)
punct(blew-7, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: A young woman , dying of cancer , is killed by a doctor ./.
det(woman-3, A-1)
amod(woman-3, young-2)
nsubjpass(killed-10, woman-3)
punct(woman-3, ,-4)
acl(woman-3, dying-5)
case(cancer-7, of-6)
nmod:of(dying-5, cancer-7)
punct(woman-3, ,-8)
auxpass(killed-10, is-9)
root(ROOT-0, killed-10)
case(doctor-13, by-11)
det(doctor-13, a-12)
nmod:agent(killed-10, doctor-13)
punct(killed-10, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#woman

kill :: About 170 people were killed in Petropolis two weeks ago ./.
advmod(170-2, About-1)
nummod(people-3, 170-2)
nsubjpass(killed-5, people-3)
auxpass(killed-5, were-4)
root(ROOT-0, killed-5)
case(Petropolis-7, in-6)
nmod:in(killed-5, Petropolis-7)
nummod(weeks-9, two-8)
nmod:npmod(ago-10, weeks-9)
advmod(killed-5, ago-10)
punct(killed-5, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: Administration officials said data collected by the U.S . , Japan , and Bahrain has confirmed South Korean charges that two North Korean agents planted a bomb that killed 115 people aboard a KAL jet last November ./.
compound(officials-2, Administration-1)
nsubj(said-3, officials-2)
root(ROOT-0, said-3)
dobj(said-3, data-4)
acl(data-4, collected-5)
case(U.S-8, by-6)
det(U.S-8, the-7)
nmod:by(collected-5, U.S-8)
punct(said-3, .-9)
punct(confirmed-7, ,-1)
conj:and(confirmed-7, Japan-2)
punct(confirmed-7, ,-3)
cc(confirmed-7, and-4)
nsubj(confirmed-7, Bahrain-5)
aux(confirmed-7, has-6)
root(ROOT-0, confirmed-7)
amod(Korean-9, South-8)
amod(charges-10, Korean-9)
dobj(confirmed-7, charges-10)
mark(planted-16, that-11)
nummod(agents-15, two-12)
amod(Korean-14, North-13)
amod(agents-15, Korean-14)
nsubj(planted-16, agents-15)
ccomp(charges-10, planted-16)
det(bomb-18, a-17)
dobj(planted-16, bomb-18)
nsubj(killed-20, bomb-18)
ref(bomb-18, that-19)
acl:relcl(bomb-18, killed-20)
nummod(people-22, 115-21)
dobj(killed-20, people-22)
case(jet-26, aboard-23)
det(jet-26, a-24)
compound(jet-26, KAL-25)
nmod:aboard(killed-20, jet-26)
amod(November-28, last-27)
nmod:tmod(jet-26, November-28)
punct(confirmed-7, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: More than 80 people were detained in the protests , in which an estimated 14 people were killed ./.
advmod(80-3, More-1)
mwe(More-1, than-2)
nummod(people-4, 80-3)
nsubjpass(detained-6, people-4)
auxpass(detained-6, were-5)
root(ROOT-0, detained-6)
case(protests-9, in-7)
det(protests-9, the-8)
nmod:in(detained-6, protests-9)
nmod:in(killed-18, protests-9)
punct(protests-9, ,-10)
case(which-12, in-11)
ref(protests-9, which-12)
det(people-16, an-13)
amod(people-16, estimated-14)
nummod(people-16, 14-15)
nsubjpass(killed-18, people-16)
auxpass(killed-18, were-17)
acl:relcl(protests-9, killed-18)
punct(detained-6, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: The U.S. added North Korea to its list of terrorist states and announced other sanctions over the November bombing of a Korean Air Lines jet that killed 115 ./.
det(U.S.-2, The-1)
nsubj(added-3, U.S.-2)
nsubj(announced-13, U.S.-2)
root(ROOT-0, added-3)
compound(Korea-5, North-4)
dobj(added-3, Korea-5)
case(list-8, to-6)
nmod:poss(list-8, its-7)
nmod:to(added-3, list-8)
case(states-11, of-9)
amod(states-11, terrorist-10)
nmod:of(list-8, states-11)
cc(added-3, and-12)
conj:and(added-3, announced-13)
amod(sanctions-15, other-14)
dobj(announced-13, sanctions-15)
case(bombing-19, over-16)
det(bombing-19, the-17)
compound(bombing-19, November-18)
nmod:over(sanctions-15, bombing-19)
case(jet-25, of-20)
det(jet-25, a-21)
amod(jet-25, Korean-22)
compound(jet-25, Air-23)
compound(jet-25, Lines-24)
nmod:of(bombing-19, jet-25)
nsubj(killed-27, jet-25)
ref(jet-25, that-26)
acl:relcl(jet-25, killed-27)
dobj(killed-27, 115-28)
punct(added-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#115

kill :: Let Jim Wright , Chris Dodd , Tony Coelho , David Bonior , Mike Lowry and David Obey explain in the papers every day why their determination to kill the Contra request represents the proudest foreign-policy achievement of the Democratic Party in 1988 ./.
root(ROOT-0, Let-1)
compound(Wright-3, Jim-2)
nsubj(explain-19, Wright-3)
punct(Wright-3, ,-4)
compound(Dodd-6, Chris-5)
conj:and(Wright-3, Dodd-6)
nsubj(explain-19, Dodd-6)
punct(Wright-3, ,-7)
compound(Coelho-9, Tony-8)
conj:and(Wright-3, Coelho-9)
nsubj(explain-19, Coelho-9)
punct(Wright-3, ,-10)
compound(Bonior-12, David-11)
conj:and(Wright-3, Bonior-12)
nsubj(explain-19, Bonior-12)
punct(Wright-3, ,-13)
compound(Lowry-15, Mike-14)
conj:and(Wright-3, Lowry-15)
nsubj(explain-19, Lowry-15)
cc(Wright-3, and-16)
compound(Obey-18, David-17)
conj:and(Wright-3, Obey-18)
nsubj(explain-19, Obey-18)
ccomp(Let-1, explain-19)
case(papers-22, in-20)
det(papers-22, the-21)
nmod:in(explain-19, papers-22)
det(day-24, every-23)
nmod:tmod(explain-19, day-24)
advmod(represents-33, why-25)
nmod:poss(determination-27, their-26)
nsubj(represents-33, determination-27)
mark(kill-29, to-28)
acl(determination-27, kill-29)
det(request-32, the-30)
compound(request-32, Contra-31)
dobj(kill-29, request-32)
advcl(explain-19, represents-33)
det(achievement-37, the-34)
amod(achievement-37, proudest-35)
compound(achievement-37, foreign-policy-36)
dobj(represents-33, achievement-37)
case(Party-41, of-38)
det(Party-41, the-39)
amod(Party-41, Democratic-40)
nmod:of(achievement-37, Party-41)
case(1988-43, in-42)
nmod:in(represents-33, 1988-43)
punct(Let-1, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#request

kill :: West German police are seeking a West Berlin woman working for Palestinian terrorists in connection with a 1986 discotheque bombing that killed two U.S. soldiers ./.
amod(German-2, West-1)
amod(police-3, German-2)
nsubj(seeking-5, police-3)
aux(seeking-5, are-4)
root(ROOT-0, seeking-5)
det(woman-9, a-6)
compound(woman-9, West-7)
compound(woman-9, Berlin-8)
dobj(seeking-5, woman-9)
acl(woman-9, working-10)
case(terrorists-13, for-11)
amod(terrorists-13, Palestinian-12)
nmod:for(working-10, terrorists-13)
case(connection-15, in-14)
nmod:in(working-10, connection-15)
case(bombing-20, with-16)
det(bombing-20, a-17)
nummod(bombing-20, 1986-18)
compound(bombing-20, discotheque-19)
nmod:with(connection-15, bombing-20)
nsubj(killed-22, bombing-20)
ref(bombing-20, that-21)
acl:relcl(bombing-20, killed-22)
nummod(soldiers-25, two-23)
compound(soldiers-25, U.S.-24)
dobj(killed-22, soldiers-25)
punct(seeking-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#soldiers

kill :: And each , according to lawsuits filed in connection with the accidents , was injured or killed because those belts did not provide the safety that auto makers should have been giving to rear-seat passengers ./.
cc(injured-15, And-1)
nsubjpass(injured-15, each-2)
nsubjpass(killed-17, each-2)
punct(injured-15, ,-3)
case(lawsuits-6, according-4)
mwe(according-4, to-5)
nmod:according_to(injured-15, lawsuits-6)
acl(lawsuits-6, filed-7)
case(connection-9, in-8)
nmod:in(filed-7, connection-9)
case(accidents-12, with-10)
det(accidents-12, the-11)
nmod:with(connection-9, accidents-12)
punct(injured-15, ,-13)
auxpass(injured-15, was-14)
root(ROOT-0, injured-15)
cc(injured-15, or-16)
conj:and(injured-15, killed-17)
mark(provide-23, because-18)
det(belts-20, those-19)
nsubj(provide-23, belts-20)
aux(provide-23, did-21)
neg(provide-23, not-22)
advcl(injured-15, provide-23)
det(safety-25, the-24)
dobj(provide-23, safety-25)
mark(giving-32, that-26)
compound(makers-28, auto-27)
nsubj(giving-32, makers-28)
aux(giving-32, should-29)
aux(giving-32, have-30)
aux(giving-32, been-31)
ccomp(safety-25, giving-32)
case(passengers-35, to-33)
compound(passengers-35, rear-seat-34)
nmod:to(giving-32, passengers-35)
punct(injured-15, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#each

kill :: Separately , a Kurdish group claimed responsibility for the downing of a West German airliner in Turkey Saturday in which 16 were killed ./.
advmod(claimed-6, Separately-1)
punct(claimed-6, ,-2)
det(group-5, a-3)
amod(group-5, Kurdish-4)
nsubj(claimed-6, group-5)
root(ROOT-0, claimed-6)
dobj(claimed-6, responsibility-7)
nmod:in(killed-23, responsibility-7)
case(downing-10, for-8)
det(downing-10, the-9)
nmod:for(responsibility-7, downing-10)
case(airliner-15, of-11)
det(airliner-15, a-12)
amod(German-14, West-13)
amod(airliner-15, German-14)
nmod:of(downing-10, airliner-15)
case(Turkey-17, in-16)
nmod:in(airliner-15, Turkey-17)
nmod:tmod(responsibility-7, Saturday-18)
case(which-20, in-19)
ref(responsibility-7, which-20)
nsubjpass(killed-23, 16-21)
auxpass(killed-23, were-22)
acl:relcl(responsibility-7, killed-23)
punct(claimed-6, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#16

kill :: The deal was finally killed by MCA management , Mr. Olson says ./.
det(deal-2, The-1)
nsubjpass(killed-5, deal-2)
auxpass(killed-5, was-3)
advmod(killed-5, finally-4)
root(ROOT-0, killed-5)
case(management-8, by-6)
compound(management-8, MCA-7)
nmod:agent(killed-5, management-8)
punct(management-8, ,-9)
compound(Olson-11, Mr.-10)
nsubj(says-12, Olson-11)
acl:relcl(management-8, says-12)
punct(killed-5, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#deal

kill :: EMPLOYEE LEASING was supposed to be killed , or at least maimed , by the Tax Reform Act of 1986 ./.
compound(LEASING-2, EMPLOYEE-1)
nsubjpass(supposed-4, LEASING-2)
nsubjpass:xsubj(killed-7, LEASING-2)
auxpass(supposed-4, was-3)
root(ROOT-0, supposed-4)
mark(killed-7, to-5)
auxpass(killed-7, be-6)
xcomp(supposed-4, killed-7)
punct(killed-7, ,-8)
cc(killed-7, or-9)
advmod(maimed-12, at-10)
mwe(at-10, least-11)
xcomp(supposed-4, maimed-12)
conj:or(killed-7, maimed-12)
punct(killed-7, ,-13)
case(Act-18, by-14)
det(Act-18, the-15)
compound(Act-18, Tax-16)
compound(Act-18, Reform-17)
nmod:agent(killed-7, Act-18)
case(1986-20, of-19)
nmod:of(Act-18, 1986-20)
punct(supposed-4, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#be

kill :: The writers ' strike forced CBS Inc. yesterday to delay the debut of its critical fall season until the end of October , killing the third-place network 's plan for a head start on its rivals ./.
det(writers-2, The-1)
nmod:poss(strike-4, writers-2)
case(writers-2, '-3)
nsubj(forced-5, strike-4)
root(ROOT-0, forced-5)
compound(Inc.-7, CBS-6)
dobj(forced-5, Inc.-7)
nsubj:xsubj(delay-10, Inc.-7)
nmod:tmod(forced-5, yesterday-8)
mark(delay-10, to-9)
xcomp(forced-5, delay-10)
det(debut-12, the-11)
dobj(delay-10, debut-12)
case(season-17, of-13)
nmod:poss(season-17, its-14)
amod(season-17, critical-15)
compound(season-17, fall-16)
nmod:of(debut-12, season-17)
case(end-20, until-18)
det(end-20, the-19)
nmod:until(delay-10, end-20)
case(October-22, of-21)
nmod:of(end-20, October-22)
punct(delay-10, ,-23)
xcomp(delay-10, killing-24)
det(network-27, the-25)
amod(network-27, third-place-26)
nmod:poss(plan-29, network-27)
case(network-27, 's-28)
dobj(killing-24, plan-29)
case(start-33, for-30)
det(start-33, a-31)
compound(start-33, head-32)
nmod:for(plan-29, start-33)
case(rivals-36, on-34)
nmod:poss(rivals-36, its-35)
nmod:on(start-33, rivals-36)
punct(forced-5, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#plan

kill :: The Soviets also rate as prime suspects in the plane crash that killed President Zia ul-Haq in August ; Pakistanis have concluded the cause was unspecified sabotage ./.
det(Soviets-2, The-1)
nsubj(rate-4, Soviets-2)
advmod(rate-4, also-3)
root(ROOT-0, rate-4)
case(suspects-7, as-5)
amod(suspects-7, prime-6)
nmod:as(rate-4, suspects-7)
nsubj(killed-13, suspects-7)
case(crash-11, in-8)
det(crash-11, the-9)
compound(crash-11, plane-10)
nmod:in(suspects-7, crash-11)
ref(suspects-7, that-12)
acl:relcl(suspects-7, killed-13)
compound(ul-Haq-16, President-14)
compound(ul-Haq-16, Zia-15)
dobj(killed-13, ul-Haq-16)
case(August-18, in-17)
nmod:in(killed-13, August-18)
punct(rate-4, ;-19)
nsubj(concluded-22, Pakistanis-20)
aux(concluded-22, have-21)
parataxis(rate-4, concluded-22)
det(cause-24, the-23)
nsubj(sabotage-27, cause-24)
cop(sabotage-27, was-25)
amod(sabotage-27, unspecified-26)
ccomp(concluded-22, sabotage-27)
punct(rate-4, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#ul-haq

kill :: An Israeli patrol killed a three-year-old Palestinian boy in the Gaza Strip as Arabs staged a general strike in the occupied territories to mark the start of the 12th month of an uprising against Israel ./.
det(patrol-3, An-1)
amod(patrol-3, Israeli-2)
nsubj(killed-4, patrol-3)
root(ROOT-0, killed-4)
det(boy-8, a-5)
amod(boy-8, three-year-old-6)
amod(boy-8, Palestinian-7)
dobj(killed-4, boy-8)
case(Strip-12, in-9)
det(Strip-12, the-10)
compound(Strip-12, Gaza-11)
nmod:in(killed-4, Strip-12)
mark(staged-15, as-13)
nsubj(staged-15, Arabs-14)
advcl(killed-4, staged-15)
det(strike-18, a-16)
amod(strike-18, general-17)
dobj(staged-15, strike-18)
case(territories-22, in-19)
det(territories-22, the-20)
amod(territories-22, occupied-21)
nmod:in(strike-18, territories-22)
mark(mark-24, to-23)
acl(strike-18, mark-24)
det(start-26, the-25)
dobj(mark-24, start-26)
case(month-30, of-27)
det(month-30, the-28)
amod(month-30, 12th-29)
nmod:of(start-26, month-30)
case(uprising-33, of-31)
det(uprising-33, an-32)
nmod:of(month-30, uprising-33)
case(Israel-35, against-34)
nmod:against(uprising-33, Israel-35)
punct(killed-4, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#boy

kill :: In the West Bank , troops fired on Arab youths , killing at least one ./.
case(Bank-4, In-1)
det(Bank-4, the-2)
compound(Bank-4, West-3)
nmod:in(fired-7, Bank-4)
punct(fired-7, ,-5)
nsubj(fired-7, troops-6)
root(ROOT-0, fired-7)
case(youths-10, on-8)
compound(youths-10, Arab-9)
nmod:on(fired-7, youths-10)
punct(fired-7, ,-11)
advcl(fired-7, killing-12)
case(least-14, at-13)
nmod:npmod(one-15, least-14)
dobj(killing-12, one-15)
punct(fired-7, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#one

kill :: Water is receding there , but in Bombay yesterday , torrential rains killed at least 14 people , and roads and rail links in the city were cut off ./.
nsubj(receding-3, Water-1)
aux(receding-3, is-2)
root(ROOT-0, receding-3)
advmod(receding-3, there-4)
punct(receding-3, ,-5)
cc(receding-3, but-6)
case(Bombay-8, in-7)
nmod:in(killed-13, Bombay-8)
nmod:tmod(killed-13, yesterday-9)
punct(killed-13, ,-10)
amod(rains-12, torrential-11)
nsubj(killed-13, rains-12)
conj:but(receding-3, killed-13)
case(least-15, at-14)
nmod:npmod(14-16, least-15)
nummod(people-17, 14-16)
dobj(killed-13, people-17)
punct(killed-13, ,-18)
cc(killed-13, and-19)
compound(links-23, roads-20)
cc(roads-20, and-21)
conj:and(roads-20, rail-22)
compound(links-23, rail-22)
nsubjpass(cut-28, links-23)
case(city-26, in-24)
det(city-26, the-25)
nmod:in(links-23, city-26)
auxpass(cut-28, were-27)
conj:but(receding-3, cut-28)
conj:and(killed-13, cut-28)
compound:prt(cut-28, off-29)
punct(receding-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: After such warfare killed or maimed millions in World War I , public horror brought an international agreement in 1925 to ban it forever ./.
mark(killed-4, After-1)
amod(warfare-3, such-2)
nsubj(killed-4, warfare-3)
nsubj(maimed-6, warfare-3)
root(ROOT-0, killed-4)
cc(killed-4, or-5)
conj:or(killed-4, maimed-6)
dobj(killed-4, millions-7)
case(I-11, in-8)
compound(I-11, World-9)
compound(I-11, War-10)
nmod:in(millions-7, I-11)
punct(I-11, ,-12)
amod(horror-14, public-13)
nsubj(brought-15, horror-14)
acl:relcl(I-11, brought-15)
det(agreement-18, an-16)
amod(agreement-18, international-17)
dobj(brought-15, agreement-18)
case(1925-20, in-19)
nmod:in(brought-15, 1925-20)
mark(ban-22, to-21)
advcl(brought-15, ban-22)
dobj(ban-22, it-23)
advmod(ban-22, forever-24)
punct(killed-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#millions

kill :: In fact , nursery accidents killed an average of 81 children a year between 1980 and 1986 ./.
case(fact-2, In-1)
nmod:in(killed-6, fact-2)
punct(killed-6, ,-3)
compound(accidents-5, nursery-4)
nsubj(killed-6, accidents-5)
root(ROOT-0, killed-6)
det(average-8, an-7)
dobj(killed-6, average-8)
case(children-11, of-9)
nummod(children-11, 81-10)
nmod:of(average-8, children-11)
det(year-13, a-12)
nmod:npmod(children-11, year-13)
case(1980-15, between-14)
nmod:between(killed-6, 1980-15)
cc(1980-15, and-16)
nmod:between(killed-6, 1986-17)
conj:and(1980-15, 1986-17)
punct(killed-6, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#children

kill :: In 1983 , North Korean agents are believed to have set off a bomb in Rangoon , Burma , that killed four South Korean cabinet ministers and 13 other Koreans in what may have been an attempt on the life of then-President Chun Doo Hwan ./.
case(1983-2, In-1)
nmod:in(believed-8, 1983-2)
punct(believed-8, ,-3)
amod(Korean-5, North-4)
amod(agents-6, Korean-5)
nsubjpass(believed-8, agents-6)
nsubj:xsubj(set-11, agents-6)
auxpass(believed-8, are-7)
root(ROOT-0, believed-8)
mark(set-11, to-9)
aux(set-11, have-10)
xcomp(believed-8, set-11)
compound:prt(set-11, off-12)
det(bomb-14, a-13)
dobj(set-11, bomb-14)
nsubj(killed-21, bomb-14)
case(Rangoon-16, in-15)
nmod:in(bomb-14, Rangoon-16)
punct(Rangoon-16, ,-17)
appos(Rangoon-16, Burma-18)
punct(Rangoon-16, ,-19)
ref(bomb-14, that-20)
acl:relcl(bomb-14, killed-21)
nummod(ministers-26, four-22)
amod(Korean-24, South-23)
amod(ministers-26, Korean-24)
compound(ministers-26, cabinet-25)
dobj(killed-21, ministers-26)
cc(ministers-26, and-27)
nummod(Koreans-30, 13-28)
amod(Koreans-30, other-29)
dobj(killed-21, Koreans-30)
conj:and(ministers-26, Koreans-30)
mark(attempt-37, in-31)
nsubj(attempt-37, what-32)
aux(attempt-37, may-33)
aux(attempt-37, have-34)
cop(attempt-37, been-35)
det(attempt-37, an-36)
advcl(killed-21, attempt-37)
case(life-40, on-38)
det(life-40, the-39)
nmod:on(attempt-37, life-40)
case(Hwan-45, of-41)
amod(Hwan-45, then-President-42)
compound(Hwan-45, Chun-43)
compound(Hwan-45, Doo-44)
nmod:of(life-40, Hwan-45)
punct(believed-8, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#ministers

kill :: The failure of a rocket joint touched off the January 1986 explosion that killed the seven Challenger astronauts ./.
det(failure-2, The-1)
nsubj(touched-7, failure-2)
case(joint-6, of-3)
det(joint-6, a-4)
compound(joint-6, rocket-5)
nmod:of(failure-2, joint-6)
root(ROOT-0, touched-7)
compound:prt(touched-7, off-8)
det(explosion-12, the-9)
compound(explosion-12, January-10)
nummod(explosion-12, 1986-11)
dobj(touched-7, explosion-12)
nsubj(killed-14, explosion-12)
ref(explosion-12, that-13)
acl:relcl(explosion-12, killed-14)
det(astronauts-18, the-15)
nummod(astronauts-18, seven-16)
compound(astronauts-18, Challenger-17)
dobj(killed-14, astronauts-18)
punct(touched-7, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#astronauts

kill :: Israeli television said a Palestinian girl was killed during a West Bank protest and Gaza Strip hospital officials said 105 Palestinians were treated for beatings during a general strike there ./.
amod(television-2, Israeli-1)
nsubj(said-3, television-2)
root(ROOT-0, said-3)
det(girl-6, a-4)
amod(girl-6, Palestinian-5)
nsubjpass(killed-8, girl-6)
auxpass(killed-8, was-7)
ccomp(said-3, killed-8)
case(protest-13, during-9)
det(protest-13, a-10)
compound(protest-13, West-11)
compound(protest-13, Bank-12)
nmod:during(killed-8, protest-13)
cc(protest-13, and-14)
compound(officials-18, Gaza-15)
compound(officials-18, Strip-16)
compound(officials-18, hospital-17)
nmod:during(killed-8, officials-18)
conj:and(protest-13, officials-18)
dep(killed-8, said-19)
nummod(Palestinians-21, 105-20)
nsubjpass(treated-23, Palestinians-21)
auxpass(treated-23, were-22)
ccomp(said-19, treated-23)
case(beatings-25, for-24)
nmod:for(treated-23, beatings-25)
case(strike-29, during-26)
det(strike-29, a-27)
amod(strike-29, general-28)
nmod:during(treated-23, strike-29)
advmod(strike-29, there-30)
punct(said-3, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#girl

kill :: Gov. Roemer 's first effort to kill 125 panels outright died in the legislature earlier this year ./.
compound(Roemer-2, Gov.-1)
nmod:poss(effort-5, Roemer-2)
case(Roemer-2, 's-3)
amod(effort-5, first-4)
root(ROOT-0, effort-5)
mark(kill-7, to-6)
acl(effort-5, kill-7)
nummod(panels-9, 125-8)
dobj(kill-7, panels-9)
advmod(died-11, outright-10)
dep(kill-7, died-11)
case(legislature-14, in-12)
det(legislature-14, the-13)
nmod:in(died-11, legislature-14)
advmod(year-17, earlier-15)
det(year-17, this-16)
nmod:tmod(died-11, year-17)
punct(effort-5, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#panels

kill :: People with AIDS , however , should understand that the forces arrayed to kill any proposal to suspend Kefauver are formidable ./.
nsubj(understand-8, People-1)
case(AIDS-3, with-2)
nmod:with(People-1, AIDS-3)
punct(understand-8, ,-4)
advmod(understand-8, however-5)
punct(understand-8, ,-6)
aux(understand-8, should-7)
root(ROOT-0, understand-8)
mark(formidable-21, that-9)
det(forces-11, the-10)
nsubj(formidable-21, forces-11)
acl(forces-11, arrayed-12)
mark(kill-14, to-13)
xcomp(arrayed-12, kill-14)
det(proposal-16, any-15)
dobj(kill-14, proposal-16)
mark(suspend-18, to-17)
acl(proposal-16, suspend-18)
dobj(suspend-18, Kefauver-19)
cop(formidable-21, are-20)
ccomp(understand-8, formidable-21)
punct(understand-8, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#proposal

kill :: Five years ago , a North Korean bomb killed 17 high-ranking South Korean government officials who were on a state visit to Rangoon , Burma ./.
nummod(years-2, Five-1)
nmod:npmod(ago-3, years-2)
advmod(killed-9, ago-3)
punct(killed-9, ,-4)
det(bomb-8, a-5)
amod(Korean-7, North-6)
amod(bomb-8, Korean-7)
nsubj(killed-9, bomb-8)
root(ROOT-0, killed-9)
nummod(officials-15, 17-10)
amod(officials-15, high-ranking-11)
amod(Korean-13, South-12)
amod(officials-15, Korean-13)
compound(officials-15, government-14)
dobj(killed-9, officials-15)
nsubj(visit-21, officials-15)
ref(officials-15, who-16)
cop(visit-21, were-17)
case(visit-21, on-18)
det(visit-21, a-19)
compound(visit-21, state-20)
acl:relcl(officials-15, visit-21)
case(Rangoon-23, to-22)
nmod:to(visit-21, Rangoon-23)
punct(Rangoon-23, ,-24)
appos(Rangoon-23, Burma-25)
punct(killed-9, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#officials

kill :: A car bomb exploded in a Palestinian refugee camp near Sidon , Lebanon , killing two sons of Mohammed Mrad , a leader of the dissident Democratic Front for the Liberation of Palestine ./.
det(bomb-3, A-1)
compound(bomb-3, car-2)
nsubj(exploded-4, bomb-3)
root(ROOT-0, exploded-4)
case(camp-9, in-5)
det(camp-9, a-6)
amod(camp-9, Palestinian-7)
compound(camp-9, refugee-8)
nmod:in(exploded-4, camp-9)
case(Sidon-11, near-10)
nmod:near(camp-9, Sidon-11)
punct(Sidon-11, ,-12)
appos(Sidon-11, Lebanon-13)
punct(Sidon-11, ,-14)
xcomp(exploded-4, killing-15)
nummod(sons-17, two-16)
dobj(killing-15, sons-17)
case(Mrad-20, of-18)
compound(Mrad-20, Mohammed-19)
nmod:of(sons-17, Mrad-20)
punct(Mrad-20, ,-21)
det(leader-23, a-22)
appos(Mrad-20, leader-23)
case(Front-28, of-24)
det(Front-28, the-25)
amod(Front-28, dissident-26)
amod(Front-28, Democratic-27)
nmod:of(leader-23, Front-28)
case(Liberation-31, for-29)
det(Liberation-31, the-30)
nmod:for(Front-28, Liberation-31)
case(Palestine-33, of-32)
nmod:of(Liberation-31, Palestine-33)
punct(exploded-4, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#mrad

kill :: A car bomb exploded in a suburb of Athens , killing the U.S. military attache in Greece ./.
det(bomb-3, A-1)
compound(bomb-3, car-2)
nsubj(exploded-4, bomb-3)
root(ROOT-0, exploded-4)
case(suburb-7, in-5)
det(suburb-7, a-6)
nmod:in(exploded-4, suburb-7)
case(Athens-9, of-8)
nmod:of(suburb-7, Athens-9)
punct(exploded-4, ,-10)
xcomp(exploded-4, killing-11)
det(attache-15, the-12)
compound(attache-15, U.S.-13)
amod(attache-15, military-14)
dobj(killing-11, attache-15)
case(Greece-17, in-16)
nmod:in(killing-11, Greece-17)
punct(exploded-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#attache

kill :: Bicycles kill far more children than handguns ./.
nsubj(kill-2, Bicycles-1)
root(ROOT-0, kill-2)
advmod(more-4, far-3)
amod(children-5, more-4)
dobj(kill-2, children-5)
case(handguns-7, than-6)
nmod:than(children-5, handguns-7)
punct(kill-2, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#children

kill :: According to this scenario and much insider speculation , the plot to kill Mr. Ozal may have originated with a middle-level official whose career was threatened ./.
case(scenario-4, According-1)
mwe(According-1, to-2)
det(scenario-4, this-3)
nmod:according_to(originated-18, scenario-4)
cc(scenario-4, and-5)
amod(speculation-8, much-6)
compound(speculation-8, insider-7)
conj:and(scenario-4, speculation-8)
nmod:according_to(originated-18, speculation-8)
punct(originated-18, ,-9)
det(plot-11, the-10)
nsubj(originated-18, plot-11)
mark(kill-13, to-12)
acl(plot-11, kill-13)
compound(Ozal-15, Mr.-14)
dobj(kill-13, Ozal-15)
aux(originated-18, may-16)
aux(originated-18, have-17)
root(ROOT-0, originated-18)
case(official-22, with-19)
det(official-22, a-20)
amod(official-22, middle-level-21)
nmod:with(originated-18, official-22)
nmod:poss(career-24, official-22)
ref(official-22, whose-23)
nsubjpass(threatened-26, career-24)
auxpass(threatened-26, was-25)
acl:relcl(official-22, threatened-26)
punct(originated-18, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#ozal

kill :: Last Tuesday , a federal jury in Akron , Ohio said it could n't identify a defect that could have caused an Audi 5000 to suddenly accelerate in an accident that killed a six-year-old boy ./.
amod(Tuesday-2, Last-1)
nmod:tmod(said-11, Tuesday-2)
punct(said-11, ,-3)
det(jury-6, a-4)
amod(jury-6, federal-5)
ccomp(said-11, jury-6)
case(Akron-8, in-7)
nmod:in(jury-6, Akron-8)
punct(said-11, ,-9)
nsubj(said-11, Ohio-10)
root(ROOT-0, said-11)
nsubj(identify-15, it-12)
aux(identify-15, could-13)
neg(identify-15, n't-14)
ccomp(said-11, identify-15)
det(defect-17, a-16)
dobj(identify-15, defect-17)
nsubj(caused-21, defect-17)
ref(defect-17, that-18)
aux(caused-21, could-19)
aux(caused-21, have-20)
acl:relcl(defect-17, caused-21)
det(5000-24, an-22)
compound(5000-24, Audi-23)
dobj(caused-21, 5000-24)
nsubj:xsubj(accelerate-27, 5000-24)
mark(accelerate-27, to-25)
advmod(accelerate-27, suddenly-26)
xcomp(caused-21, accelerate-27)
case(accident-30, in-28)
det(accident-30, an-29)
nmod:in(accelerate-27, accident-30)
nsubj(killed-32, accident-30)
ref(accident-30, that-31)
acl:relcl(accident-30, killed-32)
det(boy-35, a-33)
amod(boy-35, six-year-old-34)
dobj(killed-32, boy-35)
punct(said-11, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#boy

kill :: A bomb exploded in India 's northern Haryana state , killing at least 15 people and wounding about 25 others ./.
det(bomb-2, A-1)
nsubj(exploded-3, bomb-2)
root(ROOT-0, exploded-3)
case(state-9, in-4)
nmod:poss(state-9, India-5)
case(India-5, 's-6)
amod(state-9, northern-7)
compound(state-9, Haryana-8)
nmod:in(exploded-3, state-9)
punct(exploded-3, ,-10)
ccomp(exploded-3, killing-11)
case(least-13, at-12)
nmod:npmod(15-14, least-13)
nummod(people-15, 15-14)
dobj(killing-11, people-15)
cc(killing-11, and-16)
ccomp(exploded-3, wounding-17)
conj:and(killing-11, wounding-17)
advmod(25-19, about-18)
nummod(others-20, 25-19)
dobj(wounding-17, others-20)
punct(exploded-3, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: At least 35 people have been killed as the siege enters its second week ./.
case(least-2, At-1)
nmod:npmod(35-3, least-2)
nummod(people-4, 35-3)
nsubjpass(killed-7, people-4)
aux(killed-7, have-5)
auxpass(killed-7, been-6)
root(ROOT-0, killed-7)
mark(enters-11, as-8)
det(siege-10, the-9)
nsubj(enters-11, siege-10)
advcl(killed-7, enters-11)
nmod:poss(week-14, its-12)
amod(week-14, second-13)
nmod:tmod(enters-11, week-14)
punct(killed-7, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: What about the recent story that did show a corpse ? -LRB- `` Portrait of Evil , '' was about a man who killed his parents. -RRB-/-RRB-
root(ROOT-0, What-1)
case(story-5, about-2)
det(story-5, the-3)
amod(story-5, recent-4)
nmod:about(What-1, story-5)
nsubj(show-8, story-5)
ref(story-5, that-6)
aux(show-8, did-7)
acl:relcl(story-5, show-8)
det(corpse-10, a-9)
dobj(show-8, corpse-10)
punct(What-1, ?-11)
punct(Portrait-3, -LRB--1)
punct(Portrait-3, ``-2)
nsubj(man-11, Portrait-3)
case(Evil-5, of-4)
nmod:of(Portrait-3, Evil-5)
punct(Portrait-3, ,-6)
punct(Portrait-3, ''-7)
cop(man-11, was-8)
case(man-11, about-9)
det(man-11, a-10)
root(ROOT-0, man-11)
nsubj(killed-13, man-11)
ref(man-11, who-12)
acl:relcl(man-11, killed-13)
nmod:poss(parents-15, his-14)
dobj(killed-13, parents-15)
punct(man-11, .-16)
punct(man-11, -RRB--17)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: kill#parents

kill :: More than 211 people have been killed and 586 wounded since the current fighting began between the Amal and Hezbollah ./.
advmod(211-3, More-1)
mwe(More-1, than-2)
nummod(people-4, 211-3)
nsubjpass(killed-7, people-4)
aux(killed-7, have-5)
auxpass(killed-7, been-6)
root(ROOT-0, killed-7)
cc(killed-7, and-8)
conj:and(killed-7, 586-9)
acl(586-9, wounded-10)
mark(began-15, since-11)
det(fighting-14, the-12)
amod(fighting-14, current-13)
nsubj(began-15, fighting-14)
advcl(wounded-10, began-15)
case(Amal-18, between-16)
det(Amal-18, the-17)
nmod:between(began-15, Amal-18)
cc(Amal-18, and-19)
nmod:between(began-15, Hezbollah-20)
conj:and(Amal-18, Hezbollah-20)
punct(killed-7, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: Asked why he does n't trust the Sandinistas , he snaps , `` I do n't even have confidence in my own commandos , because any day they might kill me . ''/''
advcl(snaps-11, Asked-1)
advmod(trust-6, why-2)
nsubj(trust-6, he-3)
aux(trust-6, does-4)
neg(trust-6, n't-5)
advcl(Asked-1, trust-6)
det(Sandinistas-8, the-7)
dobj(trust-6, Sandinistas-8)
punct(snaps-11, ,-9)
nsubj(snaps-11, he-10)
root(ROOT-0, snaps-11)
punct(snaps-11, ,-12)
punct(snaps-11, ``-13)
nsubj(have-18, I-14)
aux(have-18, do-15)
neg(have-18, n't-16)
advmod(have-18, even-17)
ccomp(snaps-11, have-18)
dobj(have-18, confidence-19)
case(commandos-23, in-20)
nmod:poss(commandos-23, my-21)
amod(commandos-23, own-22)
nmod:in(confidence-19, commandos-23)
punct(have-18, ,-24)
mark(kill-30, because-25)
det(day-27, any-26)
nmod:tmod(kill-30, day-27)
nsubj(kill-30, they-28)
aux(kill-30, might-29)
advcl(have-18, kill-30)
dobj(kill-30, me-31)
punct(snaps-11, .-32)
punct(snaps-11, ''-33)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kill#me

kill :: But the Nazis did n't occupy Hungary , and kill half a million Jews , until 1944 ./.
cc(occupy-6, But-1)
det(Nazis-3, the-2)
nsubj(occupy-6, Nazis-3)
nsubj(kill-10, Nazis-3)
aux(occupy-6, did-4)
neg(occupy-6, n't-5)
root(ROOT-0, occupy-6)
dobj(occupy-6, Hungary-7)
punct(occupy-6, ,-8)
cc(occupy-6, and-9)
conj:and(occupy-6, kill-10)
advmod(million-13, half-11)
advmod(million-13, a-12)
nummod(Jews-14, million-13)
dobj(kill-10, Jews-14)
punct(kill-10, ,-15)
case(1944-17, until-16)
nmod:until(kill-10, 1944-17)
punct(occupy-6, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#jews

kill :: The shelling killed two people in his kibbutz ./.
det(shelling-2, The-1)
nsubj(killed-3, shelling-2)
root(ROOT-0, killed-3)
nummod(people-5, two-4)
dobj(killed-3, people-5)
case(kibbutz-8, in-6)
nmod:poss(kibbutz-8, his-7)
nmod:in(killed-3, kibbutz-8)
punct(killed-3, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: Many of the 96 victims of Puerto Rico 's Dupont Plaza hotel fire on Dec. 31 , 1986 , were killed in a casino near the lobby ./.
nsubjpass(killed-21, Many-1)
case(victims-5, of-2)
det(victims-5, the-3)
nummod(victims-5, 96-4)
nmod:of(Many-1, victims-5)
case(fire-13, of-6)
compound(Rico-8, Puerto-7)
nmod:poss(fire-13, Rico-8)
case(Rico-8, 's-9)
compound(fire-13, Dupont-10)
compound(fire-13, Plaza-11)
compound(fire-13, hotel-12)
nmod:of(victims-5, fire-13)
case(Dec.-15, on-14)
nmod:on(Many-1, Dec.-15)
nummod(Dec.-15, 31-16)
punct(Dec.-15, ,-17)
nummod(Dec.-15, 1986-18)
punct(killed-21, ,-19)
auxpass(killed-21, were-20)
root(ROOT-0, killed-21)
case(casino-24, in-22)
det(casino-24, a-23)
nmod:in(killed-21, casino-24)
case(lobby-27, near-25)
det(lobby-27, the-26)
nmod:near(casino-24, lobby-27)
punct(killed-21, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#many

kill :: But in talking with the FBI agent , the man not only denied he 'd killed anyone , he said that he had n't escaped from prison , that the warden had simply told him to leave one day after more than 20 years behind bars ./.
cc(denied-13, But-1)
mark(talking-3, in-2)
advcl(denied-13, talking-3)
case(agent-7, with-4)
det(agent-7, the-5)
compound(agent-7, FBI-6)
nmod:with(talking-3, agent-7)
punct(denied-13, ,-8)
det(man-10, the-9)
nsubj(denied-13, man-10)
neg(only-12, not-11)
cc:preconj(denied-13, only-12)
ccomp(said-20, denied-13)
nsubj(killed-16, he-14)
aux(killed-16, 'd-15)
ccomp(denied-13, killed-16)
dobj(killed-16, anyone-17)
punct(said-20, ,-18)
nsubj(said-20, he-19)
root(ROOT-0, said-20)
mark(escaped-25, that-21)
nsubj(escaped-25, he-22)
aux(escaped-25, had-23)
neg(escaped-25, n't-24)
ccomp(said-20, escaped-25)
case(prison-27, from-26)
nmod:from(escaped-25, prison-27)
punct(escaped-25, ,-28)
mark(told-34, that-29)
det(warden-31, the-30)
nsubj(told-34, warden-31)
aux(told-34, had-32)
advmod(told-34, simply-33)
ccomp(escaped-25, told-34)
dobj(told-34, him-35)
nsubj:xsubj(leave-37, him-35)
mark(leave-37, to-36)
xcomp(told-34, leave-37)
nummod(day-39, one-38)
dobj(leave-37, day-39)
case(years-44, after-40)
advmod(20-43, more-41)
mwe(more-41, than-42)
nummod(years-44, 20-43)
nmod:after(day-39, years-44)
case(bars-46, behind-45)
nmod:behind(leave-37, bars-46)
punct(said-20, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#anyone

kill :: Soviet officials acknowledged that several people were killed and others injured in recent ethnic unrest in Sumgait , in the republic of Azerbaijan ./.
amod(officials-2, Soviet-1)
nsubj(acknowledged-3, officials-2)
root(ROOT-0, acknowledged-3)
mark(killed-8, that-4)
amod(people-6, several-5)
nsubjpass(killed-8, people-6)
auxpass(killed-8, were-7)
ccomp(acknowledged-3, killed-8)
cc(killed-8, and-9)
ccomp(acknowledged-3, others-10)
conj:and(killed-8, others-10)
acl(others-10, injured-11)
case(unrest-15, in-12)
amod(unrest-15, recent-13)
amod(unrest-15, ethnic-14)
nmod:in(injured-11, unrest-15)
case(Sumgait-17, in-16)
nmod:in(unrest-15, Sumgait-17)
punct(killed-8, ,-18)
case(republic-21, in-19)
det(republic-21, the-20)
nmod:in(killed-8, republic-21)
case(Azerbaijan-23, of-22)
nmod:of(republic-21, Azerbaijan-23)
punct(acknowledged-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: Two Arabs aboard the vessel were killed , and three others were captured after the boat was intercepted by an Israeli patrol vessel off the southern Lebanese port city of Tyre ./.
nummod(Arabs-2, Two-1)
nsubjpass(killed-7, Arabs-2)
case(vessel-5, aboard-3)
det(vessel-5, the-4)
nmod:aboard(Arabs-2, vessel-5)
auxpass(killed-7, were-6)
root(ROOT-0, killed-7)
punct(killed-7, ,-8)
cc(killed-7, and-9)
nummod(others-11, three-10)
nsubjpass(captured-13, others-11)
auxpass(captured-13, were-12)
conj:and(killed-7, captured-13)
mark(intercepted-18, after-14)
det(boat-16, the-15)
nsubjpass(intercepted-18, boat-16)
auxpass(intercepted-18, was-17)
advcl(captured-13, intercepted-18)
case(vessel-23, by-19)
det(vessel-23, an-20)
amod(vessel-23, Israeli-21)
compound(vessel-23, patrol-22)
nmod:agent(intercepted-18, vessel-23)
case(city-29, off-24)
det(city-29, the-25)
amod(city-29, southern-26)
amod(city-29, Lebanese-27)
amod(city-29, port-28)
nmod:off(vessel-23, city-29)
case(Tyre-31, of-30)
nmod:of(city-29, Tyre-31)
punct(killed-7, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#arabs

kill :: Israelis have killed dozens of Palestinians , beaten hundreds and imprisoned thousands ./.
nsubj(killed-3, Israelis-1)
aux(killed-3, have-2)
root(ROOT-0, killed-3)
dobj(killed-3, dozens-4)
case(Palestinians-6, of-5)
nmod:of(dozens-4, Palestinians-6)
punct(killed-3, ,-7)
amod(hundreds-9, beaten-8)
dobj(killed-3, hundreds-9)
cc(hundreds-9, and-10)
amod(thousands-12, imprisoned-11)
dobj(killed-3, thousands-12)
conj:and(hundreds-9, thousands-12)
punct(killed-3, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#palestinians

kill :: The observers in Seoul are convinced North Korea was responsible for the Nov. 29 bombing of a Korean Air Lines flight near Burma , which killed 115 ./.
det(observers-2, The-1)
nsubj(Korea-8, observers-2)
case(Seoul-4, in-3)
nmod:in(observers-2, Seoul-4)
cop(Korea-8, are-5)
amod(Korea-8, convinced-6)
compound(Korea-8, North-7)
root(ROOT-0, Korea-8)
cop(responsible-10, was-9)
amod(Korea-8, responsible-10)
case(bombing-15, for-11)
det(bombing-15, the-12)
compound(bombing-15, Nov.-13)
nummod(bombing-15, 29-14)
nmod:for(responsible-10, bombing-15)
case(flight-21, of-16)
det(flight-21, a-17)
amod(flight-21, Korean-18)
compound(flight-21, Air-19)
compound(flight-21, Lines-20)
nmod:of(bombing-15, flight-21)
nsubj(killed-26, flight-21)
case(Burma-23, near-22)
nmod:near(flight-21, Burma-23)
punct(flight-21, ,-24)
ref(flight-21, which-25)
acl:relcl(flight-21, killed-26)
dobj(killed-26, 115-27)
punct(Korea-8, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#115

kill :: New graffiti appear in Bogota declaring: `` Be patriotic -- kill a communist '' or `` Communism and Commission on Human Rights -- they 're the same thing . ''/''
amod(graffiti-2, New-1)
nsubj(appear-3, graffiti-2)
root(ROOT-0, appear-3)
case(Bogota-5, in-4)
nmod:in(appear-3, Bogota-5)
xcomp(appear-3, declaring-6)
punct(declaring-6, :-7)
punct(declaring-6, ``-8)
cop(patriotic-10, Be-9)
ccomp(declaring-6, patriotic-10)
punct(kill-12, ---11)
dep(patriotic-10, kill-12)
det(communist-14, a-13)
dobj(kill-12, communist-14)
punct(communist-14, ''-15)
cc(communist-14, or-16)
punct(communist-14, ``-17)
dobj(kill-12, Communism-18)
conj:or(communist-14, Communism-18)
cc(Communism-18, and-19)
conj:or(communist-14, Commission-20)
conj:and(Communism-18, Commission-20)
case(Rights-23, on-21)
amod(Rights-23, Human-22)
nmod:on(Communism-18, Rights-23)
punct(kill-12, ---24)
nsubj(thing-29, they-25)
cop(thing-29, 're-26)
det(thing-29, the-27)
amod(thing-29, same-28)
ccomp(patriotic-10, thing-29)
punct(appear-3, .-30)
punct(appear-3, ''-31)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kill#communist

kill :: The military said three soldiers also were killed when about 300 rebels attempted to overrun a 30-man government outpost ./.
det(military-2, The-1)
nsubj(said-3, military-2)
root(ROOT-0, said-3)
nummod(soldiers-5, three-4)
nsubjpass(killed-8, soldiers-5)
advmod(killed-8, also-6)
auxpass(killed-8, were-7)
ccomp(said-3, killed-8)
advmod(attempted-13, when-9)
advmod(300-11, about-10)
nummod(rebels-12, 300-11)
nsubj(attempted-13, rebels-12)
nsubj:xsubj(overrun-15, rebels-12)
advcl(killed-8, attempted-13)
mark(overrun-15, to-14)
xcomp(attempted-13, overrun-15)
det(outpost-19, a-16)
amod(outpost-19, 30-man-17)
compound(outpost-19, government-18)
dobj(overrun-15, outpost-19)
punct(said-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#soldiers

kill :: But the Nazis did n't occupy Hungary , and kill half a million Jews , until 1944 ./.
cc(occupy-6, But-1)
det(Nazis-3, the-2)
nsubj(occupy-6, Nazis-3)
nsubj(kill-10, Nazis-3)
aux(occupy-6, did-4)
neg(occupy-6, n't-5)
root(ROOT-0, occupy-6)
dobj(occupy-6, Hungary-7)
punct(occupy-6, ,-8)
cc(occupy-6, and-9)
conj:and(occupy-6, kill-10)
advmod(million-13, half-11)
advmod(million-13, a-12)
nummod(Jews-14, million-13)
dobj(kill-10, Jews-14)
punct(kill-10, ,-15)
case(1944-17, until-16)
nmod:until(kill-10, 1944-17)
punct(occupy-6, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#jews

kill :: It concluded that some 9 % of the population , or 1.5 million people , probably has been killed ./.
nsubj(concluded-2, It-1)
root(ROOT-0, concluded-2)
mark(killed-19, that-3)
advmod(9-5, some-4)
nummod(%-6, 9-5)
nsubjpass(killed-19, %-6)
case(population-9, of-7)
det(population-9, the-8)
nmod:of(%-6, population-9)
punct(%-6, ,-10)
cc(%-6, or-11)
compound(million-13, 1.5-12)
nummod(people-14, million-13)
conj:or(%-6, people-14)
nsubjpass(killed-19, people-14)
punct(%-6, ,-15)
advmod(killed-19, probably-16)
aux(killed-19, has-17)
auxpass(killed-19, been-18)
ccomp(concluded-2, killed-19)
punct(concluded-2, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#%

kill :: Enseco Inc. said an explosion early yesterday at a unit 's plant in Berkeley Heights , N.J . , killed three people and seriously injured a fourth ./.
compound(Inc.-2, Enseco-1)
nsubj(said-3, Inc.-2)
root(ROOT-0, said-3)
det(explosion-5, an-4)
dobj(said-3, explosion-5)
amod(yesterday-7, early-6)
nmod:tmod(explosion-5, yesterday-7)
case(plant-12, at-8)
det(unit-10, a-9)
nmod:poss(plant-12, unit-10)
case(unit-10, 's-11)
nmod:at(explosion-5, plant-12)
case(Heights-15, in-13)
compound(Heights-15, Berkeley-14)
nmod:in(plant-12, Heights-15)
punct(Heights-15, ,-16)
appos(Heights-15, N.J-17)
punct(said-3, .-18)
punct(killed-2, ,-1)
root(ROOT-0, killed-2)
nummod(people-4, three-3)
dobj(killed-2, people-4)
cc(killed-2, and-5)
advmod(injured-7, seriously-6)
conj:and(killed-2, injured-7)
det(fourth-9, a-8)
dobj(injured-7, fourth-9)
punct(killed-2, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: Police said managing partner John A. Mulheren Jr . , whom they arrested Feb. 18 carrying a loaded rifle outside his home in Rumson , N.J . , intended to kill arbitrager Ivan F. Boesky , who has implicated Mr. Mulheren in Wall Street 's insider trading scandal ./.
nsubj(said-2, Police-1)
root(ROOT-0, said-2)
compound(Jr-8, managing-3)
compound(Jr-8, partner-4)
compound(Jr-8, John-5)
compound(Jr-8, A.-6)
compound(Jr-8, Mulheren-7)
dobj(said-2, Jr-8)
punct(said-2, .-9)
root(ROOT-0, ,-1)
dobj(arrested-4, whom-2)
nsubj(arrested-4, they-3)
root(,-1, arrested-4)
nmod:tmod(arrested-4, Feb.-5)
nummod(Feb.-5, 18-6)
xcomp(arrested-4, carrying-7)
det(rifle-10, a-8)
amod(rifle-10, loaded-9)
dobj(carrying-7, rifle-10)
case(home-13, outside-11)
nmod:poss(home-13, his-12)
nmod:outside(carrying-7, home-13)
case(Rumson-15, in-14)
nmod:in(home-13, Rumson-15)
punct(Rumson-15, ,-16)
appos(Rumson-15, N.J-17)
punct(arrested-4, .-18)
root(ROOT-0, ,-1)
root(,-1, intended-2)
mark(kill-4, to-3)
xcomp(intended-2, kill-4)
compound(Boesky-8, arbitrager-5)
compound(Boesky-8, Ivan-6)
compound(Boesky-8, F.-7)
dobj(kill-4, Boesky-8)
nsubj(implicated-12, Boesky-8)
punct(Boesky-8, ,-9)
ref(Boesky-8, who-10)
aux(implicated-12, has-11)
acl:relcl(Boesky-8, implicated-12)
compound(Mulheren-14, Mr.-13)
dobj(implicated-12, Mulheren-14)
case(scandal-21, in-15)
compound(Street-17, Wall-16)
nmod:poss(scandal-21, Street-17)
case(Street-17, 's-18)
compound(scandal-21, insider-19)
compound(scandal-21, trading-20)
nmod:in(implicated-12, scandal-21)
punct(intended-2, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#boesky

kill :: A court in London sentenced an American member of the outlawed Irish Republican Army to life imprisonment for killing a British police officer 13 years ago ./.
det(court-2, A-1)
nsubj(sentenced-5, court-2)
case(London-4, in-3)
nmod:in(court-2, London-4)
root(ROOT-0, sentenced-5)
det(member-8, an-6)
amod(member-8, American-7)
dobj(sentenced-5, member-8)
case(Army-14, of-9)
det(Army-14, the-10)
amod(Army-14, outlawed-11)
amod(Army-14, Irish-12)
amod(Army-14, Republican-13)
nmod:of(member-8, Army-14)
case(imprisonment-17, to-15)
compound(imprisonment-17, life-16)
nmod:to(sentenced-5, imprisonment-17)
mark(killing-19, for-18)
advcl(sentenced-5, killing-19)
det(officer-23, a-20)
amod(officer-23, British-21)
compound(officer-23, police-22)
dobj(killing-19, officer-23)
nummod(years-25, 13-24)
nmod:npmod(ago-26, years-25)
advmod(killing-19, ago-26)
punct(sentenced-5, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#officer

kill :: The U.N. said the fatalities brought to 48 the number of Palestinians killed since the wave of anti-Israeli unrest began in the occupied areas Dec. 8 ./.
det(U.N.-2, The-1)
nsubj(said-3, U.N.-2)
root(ROOT-0, said-3)
det(fatalities-5, the-4)
nsubj(brought-6, fatalities-5)
ccomp(said-3, brought-6)
case(number-10, to-7)
nummod(number-10, 48-8)
det(number-10, the-9)
nmod:to(brought-6, number-10)
case(Palestinians-12, of-11)
nmod:of(number-10, Palestinians-12)
xcomp(brought-6, killed-13)
mark(began-20, since-14)
det(wave-16, the-15)
nsubj(began-20, wave-16)
case(unrest-19, of-17)
amod(unrest-19, anti-Israeli-18)
nmod:of(wave-16, unrest-19)
advcl(killed-13, began-20)
case(areas-24, in-21)
det(areas-24, the-22)
amod(areas-24, occupied-23)
nmod:in(began-20, areas-24)
nmod:tmod(began-20, Dec.-25)
nummod(Dec.-25, 8-26)
punct(said-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

kill :: And , Germans would be killed sooner by Russian tanks and artillery ./.
cc(killed-6, And-1)
punct(killed-6, ,-2)
nsubjpass(killed-6, Germans-3)
aux(killed-6, would-4)
auxpass(killed-6, be-5)
root(ROOT-0, killed-6)
advmod(killed-6, sooner-7)
case(tanks-10, by-8)
amod(tanks-10, Russian-9)
nmod:agent(killed-6, tanks-10)
cc(tanks-10, and-11)
nmod:agent(killed-6, artillery-12)
conj:and(tanks-10, artillery-12)
punct(killed-6, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#germans

kill :: He killed 47 in one month ./.
nsubj(killed-2, He-1)
root(ROOT-0, killed-2)
dobj(killed-2, 47-3)
case(month-6, in-4)
nummod(month-6, one-5)
nmod:in(killed-2, month-6)
punct(killed-2, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#47

kill :: Fidel Ramos , armed forces chief of staff , blamed the Communists for the deaths of 50 % of the candidates killed in pre-election violence , though personal rivalries and the settling of old scores appeared in many instances to be stronger motives ./.
compound(Ramos-2, Fidel-1)
nsubj(blamed-10, Ramos-2)
punct(Ramos-2, ,-3)
amod(chief-6, armed-4)
compound(chief-6, forces-5)
appos(Ramos-2, chief-6)
case(staff-8, of-7)
nmod:of(chief-6, staff-8)
punct(Ramos-2, ,-9)
root(ROOT-0, blamed-10)
det(Communists-12, the-11)
dobj(blamed-10, Communists-12)
case(deaths-15, for-13)
det(deaths-15, the-14)
nmod:for(blamed-10, deaths-15)
case(%-18, of-16)
nummod(%-18, 50-17)
nmod:of(deaths-15, %-18)
case(candidates-21, of-19)
det(candidates-21, the-20)
nmod:of(%-18, candidates-21)
acl(candidates-21, killed-22)
case(violence-25, in-23)
amod(violence-25, pre-election-24)
nmod:in(killed-22, violence-25)
punct(blamed-10, ,-26)
mark(appeared-36, though-27)
amod(rivalries-29, personal-28)
nsubj(appeared-36, rivalries-29)
nsubj:xsubj(motives-43, rivalries-29)
cc(rivalries-29, and-30)
det(settling-32, the-31)
conj:and(rivalries-29, settling-32)
nsubj(appeared-36, settling-32)
nsubj:xsubj(motives-43, settling-32)
case(scores-35, of-33)
amod(scores-35, old-34)
nmod:of(settling-32, scores-35)
advcl(blamed-10, appeared-36)
case(instances-39, in-37)
amod(instances-39, many-38)
nmod:in(appeared-36, instances-39)
mark(motives-43, to-40)
cop(motives-43, be-41)
amod(motives-43, stronger-42)
xcomp(appeared-36, motives-43)
punct(blamed-10, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#violence

kill :: They appear in the internecine killing between different mafia groups , and the killing of judges , journalists , police and government leaders opposed to the drug traffic ./.
nsubj(appear-2, They-1)
root(ROOT-0, appear-2)
case(killing-6, in-3)
det(killing-6, the-4)
compound(killing-6, internecine-5)
nmod:in(appear-2, killing-6)
case(groups-10, between-7)
amod(groups-10, different-8)
compound(groups-10, mafia-9)
nmod:between(killing-6, groups-10)
punct(appear-2, ,-11)
cc(appear-2, and-12)
det(killing-14, the-13)
nsubj(opposed-24, killing-14)
case(judges-16, of-15)
nmod:of(killing-14, judges-16)
punct(judges-16, ,-17)
nmod:of(killing-14, journalists-18)
conj:and(judges-16, journalists-18)
punct(judges-16, ,-19)
nmod:of(killing-14, police-20)
conj:and(judges-16, police-20)
cc(judges-16, and-21)
compound(leaders-23, government-22)
nmod:of(killing-14, leaders-23)
conj:and(judges-16, leaders-23)
conj:and(appear-2, opposed-24)
case(traffic-28, to-25)
det(traffic-28, the-26)
compound(traffic-28, drug-27)
nmod:to(opposed-24, traffic-28)
punct(appear-2, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#groups

kill :: A $ 41 million settlement has been reached on all claims stemming from the 1987 collapse of the apartment complex L'Ambiance Plaza in which 28 people were killed ./.
det(settlement-5, A-1)
amod(settlement-5, $-2)
compound(million-4, 41-3)
nummod($-2, million-4)
nsubjpass(reached-8, settlement-5)
aux(reached-8, has-6)
auxpass(reached-8, been-7)
root(ROOT-0, reached-8)
case(claims-11, on-9)
det(claims-11, all-10)
nmod:on(reached-8, claims-11)
acl(claims-11, stemming-12)
case(collapse-16, from-13)
det(collapse-16, the-14)
nummod(collapse-16, 1987-15)
nmod:from(stemming-12, collapse-16)
nmod:in(killed-28, collapse-16)
case(Plaza-22, of-17)
det(Plaza-22, the-18)
compound(Plaza-22, apartment-19)
compound(Plaza-22, complex-20)
compound(Plaza-22, L'Ambiance-21)
nmod:of(collapse-16, Plaza-22)
case(which-24, in-23)
ref(collapse-16, which-24)
nummod(people-26, 28-25)
nsubjpass(killed-28, people-26)
auxpass(killed-28, were-27)
acl:relcl(collapse-16, killed-28)
punct(reached-8, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: Army and medical rescue teams reached stricken Chinese villages in a remote area near Burma , where an earthquake Sunday killed more than 900 people ./.
compound(teams-5, Army-1)
cc(Army-1, and-2)
conj:and(Army-1, medical-3)
compound(teams-5, medical-3)
compound(teams-5, rescue-4)
nsubj(reached-6, teams-5)
root(ROOT-0, reached-6)
amod(villages-9, stricken-7)
amod(villages-9, Chinese-8)
dobj(reached-6, villages-9)
case(area-13, in-10)
det(area-13, a-11)
amod(area-13, remote-12)
nmod:in(reached-6, area-13)
case(Burma-15, near-14)
nmod:near(area-13, Burma-15)
punct(Burma-15, ,-16)
advmod(killed-21, where-17)
det(earthquake-19, an-18)
nsubj(killed-21, earthquake-19)
nmod:tmod(earthquake-19, Sunday-20)
acl:relcl(Burma-15, killed-21)
advmod(900-24, more-22)
mwe(more-22, than-23)
nummod(people-25, 900-24)
dobj(killed-21, people-25)
punct(reached-6, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: In a Batman comic book hitting newsstands next week , DC Comics Inc. is killing off one of its oldest characters , the younger half of the Dynamic Duo ./.
case(book-5, In-1)
det(book-5, a-2)
compound(book-5, Batman-3)
amod(book-5, comic-4)
nmod:in(killing-15, book-5)
acl(book-5, hitting-6)
dobj(hitting-6, newsstands-7)
amod(week-9, next-8)
nmod:tmod(hitting-6, week-9)
punct(killing-15, ,-10)
compound(Inc.-13, DC-11)
compound(Inc.-13, Comics-12)
nsubj(killing-15, Inc.-13)
aux(killing-15, is-14)
root(ROOT-0, killing-15)
compound:prt(killing-15, off-16)
dobj(killing-15, one-17)
case(characters-21, of-18)
nmod:poss(characters-21, its-19)
amod(characters-21, oldest-20)
nmod:of(one-17, characters-21)
punct(one-17, ,-22)
det(half-25, the-23)
amod(half-25, younger-24)
appos(one-17, half-25)
case(Duo-29, of-26)
det(Duo-29, the-27)
amod(Duo-29, Dynamic-28)
nmod:of(half-25, Duo-29)
punct(killing-15, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#characters

kill :: Rather , emphasis should be placed on sophisticated incapacitating agents that do not kill or maim but simply render people unconscious or unable to act ./.
advmod(placed-6, Rather-1)
punct(placed-6, ,-2)
nsubjpass(placed-6, emphasis-3)
aux(placed-6, should-4)
auxpass(placed-6, be-5)
root(ROOT-0, placed-6)
case(agents-10, on-7)
amod(agents-10, sophisticated-8)
amod(agents-10, incapacitating-9)
nmod:on(placed-6, agents-10)
nsubj(kill-14, agents-10)
nsubj(maim-16, agents-10)
ref(agents-10, that-11)
aux(kill-14, do-12)
neg(kill-14, not-13)
acl:relcl(agents-10, kill-14)
cc(kill-14, or-15)
acl:relcl(agents-10, maim-16)
conj:or(kill-14, maim-16)
cc(render-19, but-17)
advmod(render-19, simply-18)
dep(kill-14, render-19)
nsubj(unconscious-21, people-20)
nsubj(unable-23, people-20)
xcomp(render-19, unconscious-21)
cc(unconscious-21, or-22)
xcomp(render-19, unable-23)
conj:or(unconscious-21, unable-23)
mark(act-25, to-24)
ccomp(unconscious-21, act-25)
punct(placed-6, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#agents

kill :: There has yet to be a confirmed report of a large animal killed by the flames , although a few deaths are almost inevitable , park officials say ./.
expl(has-2, There-1)
ccomp(say-28, has-2)
advmod(has-2, yet-3)
mark(report-8, to-4)
cop(report-8, be-5)
det(report-8, a-6)
amod(report-8, confirmed-7)
xcomp(has-2, report-8)
case(animal-12, of-9)
det(animal-12, a-10)
amod(animal-12, large-11)
nmod:of(report-8, animal-12)
acl(animal-12, killed-13)
case(flames-16, by-14)
det(flames-16, the-15)
nmod:by(killed-13, flames-16)
punct(has-2, ,-17)
mark(inevitable-24, although-18)
det(deaths-21, a-19)
amod(deaths-21, few-20)
nsubj(inevitable-24, deaths-21)
cop(inevitable-24, are-22)
advmod(inevitable-24, almost-23)
advcl(has-2, inevitable-24)
punct(say-28, ,-25)
compound(officials-27, park-26)
nsubj(say-28, officials-27)
root(ROOT-0, say-28)
punct(say-28, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#flames

kill :: Mr. Weiss suggests that the new approach , once developed , could be used in combination with CD4: The CD4 would handle the free-floating viruses , while the new drug would kill infected cells ./.
compound(Weiss-2, Mr.-1)
nsubj(suggests-3, Weiss-2)
root(ROOT-0, suggests-3)
mark(used-14, that-4)
det(approach-7, the-5)
amod(approach-7, new-6)
nsubjpass(used-14, approach-7)
punct(used-14, ,-8)
advmod(developed-10, once-9)
dep(used-14, developed-10)
punct(used-14, ,-11)
aux(used-14, could-12)
auxpass(used-14, be-13)
ccomp(suggests-3, used-14)
case(combination-16, in-15)
nmod:in(used-14, combination-16)
case(CD4-18, with-17)
nmod:with(combination-16, CD4-18)
punct(suggests-3, :-19)
det(CD4-21, The-20)
nsubj(handle-23, CD4-21)
aux(handle-23, would-22)
parataxis(suggests-3, handle-23)
det(viruses-26, the-24)
amod(viruses-26, free-floating-25)
dobj(handle-23, viruses-26)
punct(handle-23, ,-27)
mark(kill-33, while-28)
det(drug-31, the-29)
amod(drug-31, new-30)
nsubj(kill-33, drug-31)
aux(kill-33, would-32)
advcl(handle-23, kill-33)
amod(cells-35, infected-34)
dobj(kill-33, cells-35)
punct(suggests-3, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#cells

kill :: Federal researchers are exploring a possible new biological weapon against cells infected with the virus that causes AIDS. Scientists at the National Institutes of Health are studying a chemical that seeks and kills AIDS-infected blood cells without harming healthy ones ./.
amod(researchers-2, Federal-1)
nsubj(exploring-4, researchers-2)
aux(exploring-4, are-3)
root(ROOT-0, exploring-4)
det(weapon-9, a-5)
amod(weapon-9, possible-6)
amod(weapon-9, new-7)
amod(weapon-9, biological-8)
dobj(exploring-4, weapon-9)
case(cells-11, against-10)
nmod:against(weapon-9, cells-11)
acl(cells-11, infected-12)
case(virus-15, with-13)
det(virus-15, the-14)
nmod:with(infected-12, virus-15)
nsubj(causes-17, virus-15)
ref(virus-15, that-16)
acl:relcl(virus-15, causes-17)
dobj(causes-17, AIDS-18)
punct(exploring-4, .-19)
nsubj(studying-9, Scientists-1)
case(Institutes-5, at-2)
det(Institutes-5, the-3)
compound(Institutes-5, National-4)
nmod:at(Scientists-1, Institutes-5)
case(Health-7, of-6)
nmod:of(Institutes-5, Health-7)
aux(studying-9, are-8)
root(ROOT-0, studying-9)
det(chemical-11, a-10)
dobj(studying-9, chemical-11)
nsubj(seeks-13, chemical-11)
nsubj(kills-15, chemical-11)
ref(chemical-11, that-12)
acl:relcl(chemical-11, seeks-13)
cc(seeks-13, and-14)
acl:relcl(chemical-11, kills-15)
conj:and(seeks-13, kills-15)
amod(cells-18, AIDS-infected-16)
compound(cells-18, blood-17)
dobj(kills-15, cells-18)
mark(harming-20, without-19)
advcl(seeks-13, harming-20)
amod(ones-22, healthy-21)
dobj(harming-20, ones-22)
punct(studying-9, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#cells

kill :: It kills the parasite residing in red blood cells and has few side effects , SmithKline said ./.
nsubj(kills-2, It-1)
nsubj(has-11, It-1)
ccomp(said-17, kills-2)
det(parasite-4, the-3)
dobj(kills-2, parasite-4)
acl(parasite-4, residing-5)
case(cells-9, in-6)
amod(cells-9, red-7)
compound(cells-9, blood-8)
nmod:in(residing-5, cells-9)
cc(kills-2, and-10)
conj:and(kills-2, has-11)
ccomp(said-17, has-11)
amod(effects-14, few-12)
amod(effects-14, side-13)
dobj(has-11, effects-14)
punct(said-17, ,-15)
nsubj(said-17, SmithKline-16)
root(ROOT-0, said-17)
punct(said-17, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#parasite

kill :: Thirty-seven U.S. crewmen were killed in that unexpected attack ./.
nummod(crewmen-3, Thirty-seven-1)
compound(crewmen-3, U.S.-2)
nsubjpass(killed-5, crewmen-3)
auxpass(killed-5, were-4)
root(ROOT-0, killed-5)
case(attack-9, in-6)
det(attack-9, that-7)
amod(attack-9, unexpected-8)
nmod:in(killed-5, attack-9)
punct(killed-5, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#crewmen

kill :: `` Fat and cowardly generals had a good chance of being kicked out ; company commanders who were n't any good have either been kicked out or killed in battle ./.
root(ROOT-0, ``-1)
amod(generals-5, Fat-2)
cc(Fat-2, and-3)
conj:and(Fat-2, cowardly-4)
amod(generals-5, cowardly-4)
nsubj(had-6, generals-5)
root(``-1, had-6)
det(chance-9, a-7)
amod(chance-9, good-8)
dobj(had-6, chance-9)
mark(kicked-12, of-10)
auxpass(kicked-12, being-11)
acl(chance-9, kicked-12)
compound:prt(kicked-12, out-13)
punct(had-6, ;-14)
compound(commanders-16, company-15)
nsubj(good-21, commanders-16)
nsubjpass(kicked-25, commanders-16)
nsubjpass(killed-28, commanders-16)
ref(commanders-16, who-17)
cop(good-21, were-18)
neg(good-21, n't-19)
det(good-21, any-20)
acl:relcl(commanders-16, good-21)
aux(kicked-25, have-22)
advmod(kicked-25, either-23)
auxpass(kicked-25, been-24)
parataxis(had-6, kicked-25)
compound:prt(kicked-25, out-26)
cc(kicked-25, or-27)
parataxis(had-6, killed-28)
conj:or(kicked-25, killed-28)
case(battle-30, in-29)
nmod:in(killed-28, battle-30)
punct(had-6, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#commanders

kill :: Foresters estimate that millions have been killed in Michigan and Wisconsin alone ./.
nsubj(estimate-2, Foresters-1)
root(ROOT-0, estimate-2)
mark(killed-7, that-3)
nsubjpass(killed-7, millions-4)
aux(killed-7, have-5)
auxpass(killed-7, been-6)
ccomp(estimate-2, killed-7)
case(Michigan-9, in-8)
nmod:in(killed-7, Michigan-9)
cc(Michigan-9, and-10)
nmod:in(killed-7, Wisconsin-11)
conj:and(Michigan-9, Wisconsin-11)
advmod(Michigan-9, alone-12)
punct(estimate-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#millions

kill :: `` The only thing that would make me feel better about -LRB- the NIH experiment -RRB- would be to put in a second marker gene as a fail-safe , to allow you to kill all the cells of that lineage at will if something went wrong , '' one researcher says ./.
punct(says-51, ``-1)
det(thing-4, The-2)
amod(thing-4, only-3)
nsubj(make-7, thing-4)
ccomp(says-51, thing-4)
ref(thing-4, that-5)
aux(make-7, would-6)
acl:relcl(thing-4, make-7)
nsubj(feel-9, me-8)
xcomp(make-7, feel-9)
advmod(feel-9, better-10)
advmod(be-18, about-11)
punct(experiment-15, -LRB--12)
det(experiment-15, the-13)
compound(experiment-15, NIH-14)
appos(about-11, experiment-15)
punct(experiment-15, -RRB--16)
aux(be-18, would-17)
ccomp(feel-9, be-18)
mark(put-20, to-19)
xcomp(be-18, put-20)
compound:prt(put-20, in-21)
det(gene-25, a-22)
amod(gene-25, second-23)
compound(gene-25, marker-24)
dobj(put-20, gene-25)
case(fail-safe-28, as-26)
det(fail-safe-28, a-27)
nmod:as(put-20, fail-safe-28)
punct(put-20, ,-29)
mark(allow-31, to-30)
advcl(put-20, allow-31)
dobj(allow-31, you-32)
nsubj:xsubj(kill-34, you-32)
mark(kill-34, to-33)
xcomp(allow-31, kill-34)
det:predet(cells-37, all-35)
det(cells-37, the-36)
dobj(kill-34, cells-37)
case(lineage-40, of-38)
det(lineage-40, that-39)
nmod:of(cells-37, lineage-40)
case(will-42, at-41)
nmod:at(kill-34, will-42)
mark(went-45, if-43)
nsubj(went-45, something-44)
advcl(kill-34, went-45)
xcomp(went-45, wrong-46)
punct(says-51, ,-47)
punct(says-51, ''-48)
nummod(researcher-50, one-49)
nsubj(says-51, researcher-50)
root(ROOT-0, says-51)
punct(says-51, .-52)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#lineage

kill :: Shortly , the USS Stark failed to defend itself from an Iraqi attack and 37 Americans were killed ./.
advmod(failed-6, Shortly-1)
punct(failed-6, ,-2)
det(Stark-5, the-3)
compound(Stark-5, USS-4)
nsubj(failed-6, Stark-5)
nsubj:xsubj(defend-8, Stark-5)
csubjpass(killed-18, failed-6)
mark(defend-8, to-7)
xcomp(failed-6, defend-8)
dobj(defend-8, itself-9)
case(attack-13, from-10)
det(attack-13, an-11)
amod(attack-13, Iraqi-12)
nmod:from(defend-8, attack-13)
cc(attack-13, and-14)
nummod(Americans-16, 37-15)
nmod:from(defend-8, Americans-16)
conj:and(attack-13, Americans-16)
auxpass(killed-18, were-17)
root(ROOT-0, killed-18)
punct(killed-18, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#were

kill :: He notes that Iraq defused American anger last year by offering to pay damages after an Iraqi jet fighter mistakenly fired at the frigate USS Stark , killing 37 seamen ./.
nsubj(notes-2, He-1)
root(ROOT-0, notes-2)
mark(defused-5, that-3)
nsubj(defused-5, Iraq-4)
ccomp(notes-2, defused-5)
amod(anger-7, American-6)
dobj(defused-5, anger-7)
amod(year-9, last-8)
nmod:tmod(defused-5, year-9)
mark(offering-11, by-10)
advcl(defused-5, offering-11)
mark(pay-13, to-12)
xcomp(offering-11, pay-13)
dobj(pay-13, damages-14)
case(fighter-19, after-15)
det(fighter-19, an-16)
amod(fighter-19, Iraqi-17)
compound(fighter-19, jet-18)
nmod:after(pay-13, fighter-19)
advmod(fired-21, mistakenly-20)
acl(fighter-19, fired-21)
case(Stark-26, at-22)
det(Stark-26, the-23)
compound(Stark-26, frigate-24)
compound(Stark-26, USS-25)
nmod:at(fired-21, Stark-26)
punct(pay-13, ,-27)
advcl(pay-13, killing-28)
nummod(seamen-30, 37-29)
dobj(killing-28, seamen-30)
punct(notes-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#seamen

kill :: Officials in West Germany prepared for today 's start of a trial of a Shiite Moslem for the 1985 hijacking of a TWA jet in which a U.S. sailor was killed ./.
nsubj(prepared-5, Officials-1)
case(Germany-4, in-2)
compound(Germany-4, West-3)
nmod:in(Officials-1, Germany-4)
root(ROOT-0, prepared-5)
case(start-9, for-6)
nmod:poss(start-9, today-7)
case(today-7, 's-8)
nmod:for(prepared-5, start-9)
case(trial-12, of-10)
det(trial-12, a-11)
nmod:of(start-9, trial-12)
case(Moslem-16, of-13)
det(Moslem-16, a-14)
amod(Moslem-16, Shiite-15)
nmod:of(trial-12, Moslem-16)
case(hijacking-20, for-17)
det(hijacking-20, the-18)
nummod(hijacking-20, 1985-19)
nmod:for(trial-12, hijacking-20)
case(jet-24, of-21)
det(jet-24, a-22)
compound(jet-24, TWA-23)
nmod:of(hijacking-20, jet-24)
nmod:in(killed-31, jet-24)
case(which-26, in-25)
ref(jet-24, which-26)
det(sailor-29, a-27)
compound(sailor-29, U.S.-28)
nsubjpass(killed-31, sailor-29)
auxpass(killed-31, was-30)
acl:relcl(jet-24, killed-31)
punct(prepared-5, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#sailor

kill :: AN AIRBUS A-320 CRASHED at an air show in France , killing at least three ./.
det(A-320-3, AN-1)
compound(A-320-3, AIRBUS-2)
nsubj(CRASHED-4, A-320-3)
root(ROOT-0, CRASHED-4)
case(show-8, at-5)
det(show-8, an-6)
compound(show-8, air-7)
nmod:at(CRASHED-4, show-8)
case(France-10, in-9)
nmod:in(show-8, France-10)
punct(CRASHED-4, ,-11)
xcomp(CRASHED-4, killing-12)
case(least-14, at-13)
nmod:npmod(three-15, least-14)
dobj(killing-12, three-15)
punct(CRASHED-4, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#three

kill :: Blaming faulty lift-slab methods , OSHA has proposed $ 5 million in fines for contractors involved in the L'Ambiance Plaza apartment complex in Bridgeport , Conn . , which collapsed last year , killing 28 people ./.
advcl(proposed-8, Blaming-1)
amod(methods-4, faulty-2)
compound(methods-4, lift-slab-3)
dobj(Blaming-1, methods-4)
punct(proposed-8, ,-5)
nsubj(proposed-8, OSHA-6)
aux(proposed-8, has-7)
root(ROOT-0, proposed-8)
dobj(proposed-8, $-9)
compound(million-11, 5-10)
nummod($-9, million-11)
case(fines-13, in-12)
nmod:in($-9, fines-13)
case(contractors-15, for-14)
nmod:for(fines-13, contractors-15)
acl(contractors-15, involved-16)
case(complex-22, in-17)
det(complex-22, the-18)
compound(complex-22, L'Ambiance-19)
compound(complex-22, Plaza-20)
compound(complex-22, apartment-21)
nmod:in(involved-16, complex-22)
case(Bridgeport-24, in-23)
nmod:in(complex-22, Bridgeport-24)
punct(Bridgeport-24, ,-25)
appos(Bridgeport-24, Conn-26)
punct(proposed-8, .-27)
punct(collapsed-3, ,-1)
nsubj(collapsed-3, which-2)
root(ROOT-0, collapsed-3)
amod(year-5, last-4)
nmod:tmod(collapsed-3, year-5)
punct(collapsed-3, ,-6)
advcl(collapsed-3, killing-7)
nummod(people-9, 28-8)
dobj(killing-7, people-9)
punct(collapsed-3, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: `` But we found that at the end of three weeks , they want to kill you . ''/''
punct(found-4, ``-1)
cc(found-4, But-2)
nsubj(found-4, we-3)
root(ROOT-0, found-4)
mark(want-14, that-5)
case(end-8, at-6)
det(end-8, the-7)
nmod:at(want-14, end-8)
case(weeks-11, of-9)
nummod(weeks-11, three-10)
nmod:of(end-8, weeks-11)
punct(want-14, ,-12)
nsubj(want-14, they-13)
nsubj:xsubj(kill-16, they-13)
ccomp(found-4, want-14)
mark(kill-16, to-15)
xcomp(want-14, kill-16)
dobj(kill-16, you-17)
punct(found-4, .-18)
punct(found-4, ''-19)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kill#you

kill :: A 19-year-old 737 owned by the airline was grounded after the top of its fuselage was torn off during an April 29 flight , killing a flight attendant ./.
det(737-3, A-1)
amod(737-3, 19-year-old-2)
nsubjpass(grounded-9, 737-3)
acl(737-3, owned-4)
case(airline-7, by-5)
det(airline-7, the-6)
nmod:by(owned-4, airline-7)
auxpass(grounded-9, was-8)
csubjpass(torn-17, grounded-9)
case(top-12, after-10)
det(top-12, the-11)
nmod:after(grounded-9, top-12)
case(fuselage-15, of-13)
nmod:poss(fuselage-15, its-14)
nmod:of(top-12, fuselage-15)
auxpass(torn-17, was-16)
root(ROOT-0, torn-17)
advmod(torn-17, off-18)
case(flight-23, during-19)
det(flight-23, an-20)
compound(flight-23, April-21)
nummod(flight-23, 29-22)
nmod:during(torn-17, flight-23)
punct(torn-17, ,-24)
xcomp(torn-17, killing-25)
det(attendant-28, a-26)
compound(attendant-28, flight-27)
dobj(killing-25, attendant-28)
punct(torn-17, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#attendant

kill :: The mishap killed a flight attendant ./.
det(mishap-2, The-1)
nsubj(killed-3, mishap-2)
root(ROOT-0, killed-3)
det(attendant-6, a-4)
compound(attendant-6, flight-5)
dobj(killed-3, attendant-6)
punct(killed-3, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#attendant

kill :: With her giant henchman , the evil Gen. Kael -LRB- possibly named after the film critic of the New Yorker magazine , Pauline Kael -RRB- , she 's out to kill the baby who 's destined to end her rule ./.
case(henchman-4, With-1)
nmod:poss(henchman-4, her-2)
amod(henchman-4, giant-3)
nmod:with(out-29, henchman-4)
punct(out-29, ,-5)
det(Kael-9, the-6)
amod(Kael-9, evil-7)
compound(Kael-9, Gen.-8)
dep(out-29, Kael-9)
punct(named-12, -LRB--10)
advmod(named-12, possibly-11)
dep(Kael-9, named-12)
case(critic-16, after-13)
det(critic-16, the-14)
compound(critic-16, film-15)
nmod:after(named-12, critic-16)
case(magazine-21, of-17)
det(magazine-21, the-18)
compound(magazine-21, New-19)
compound(magazine-21, Yorker-20)
nmod:of(critic-16, magazine-21)
punct(named-12, ,-22)
compound(Kael-24, Pauline-23)
dep(named-12, Kael-24)
punct(named-12, -RRB--25)
punct(out-29, ,-26)
nsubj(out-29, she-27)
nsubj:xsubj(kill-31, she-27)
cop(out-29, 's-28)
root(ROOT-0, out-29)
mark(kill-31, to-30)
xcomp(out-29, kill-31)
det(baby-33, the-32)
dobj(kill-31, baby-33)
nsubjpass(destined-36, baby-33)
nsubj:xsubj(end-38, baby-33)
ref(baby-33, who-34)
auxpass(destined-36, 's-35)
acl:relcl(baby-33, destined-36)
mark(end-38, to-37)
xcomp(destined-36, end-38)
nmod:poss(rule-40, her-39)
dobj(end-38, rule-40)
punct(out-29, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#baby

kill :: One person was killed -- an engineer on one of the trains ./.
nummod(person-2, One-1)
nsubjpass(killed-4, person-2)
auxpass(killed-4, was-3)
root(ROOT-0, killed-4)
punct(engineer-7, ---5)
det(engineer-7, an-6)
nmod(killed-4, engineer-7)
case(one-9, on-8)
nmod:on(engineer-7, one-9)
case(trains-12, of-10)
det(trains-12, the-11)
nmod:of(one-9, trains-12)
punct(killed-4, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#person

kill :: The fire killed a building engineer trapped in an elevator and injured 40 custodial workers and firefighters ./.
det(fire-2, The-1)
nsubj(killed-3, fire-2)
root(ROOT-0, killed-3)
det(engineer-6, a-4)
compound(engineer-6, building-5)
dobj(killed-3, engineer-6)
acl(engineer-6, trapped-7)
case(elevator-10, in-8)
det(elevator-10, an-9)
nmod:in(trapped-7, elevator-10)
cc(elevator-10, and-11)
amod(workers-15, injured-12)
nummod(workers-15, 40-13)
amod(workers-15, custodial-14)
nmod:in(trapped-7, workers-15)
conj:and(elevator-10, workers-15)
cc(elevator-10, and-16)
nmod:in(trapped-7, firefighters-17)
conj:and(elevator-10, firefighters-17)
punct(killed-3, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#engineer

kill :: `` It does n't take a lot of sophistication to kill a lot of people in the middle of New York City , '' said one official ./.
punct(said-25, ``-1)
nsubj(take-5, It-2)
aux(take-5, does-3)
neg(take-5, n't-4)
ccomp(said-25, take-5)
det(lot-7, a-6)
dobj(take-5, lot-7)
case(sophistication-9, of-8)
nmod:of(lot-7, sophistication-9)
mark(kill-11, to-10)
advcl(take-5, kill-11)
det(lot-13, a-12)
dobj(kill-11, lot-13)
case(people-15, of-14)
nmod:of(lot-13, people-15)
case(middle-18, in-16)
det(middle-18, the-17)
nmod:in(kill-11, middle-18)
case(City-22, of-19)
compound(City-22, New-20)
compound(City-22, York-21)
nmod:of(middle-18, City-22)
punct(said-25, ,-23)
punct(said-25, ''-24)
root(ROOT-0, said-25)
nummod(official-27, one-26)
nsubj(said-25, official-27)
punct(said-25, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#sophistication

kill :: It was then that a 747 crash killed 520 people , the worst single-aircraft accident in aviation history ./.
nsubj(killed-8, It-1)
cop(killed-8, was-2)
advmod(killed-8, then-3)
mark(killed-8, that-4)
det(crash-7, a-5)
nummod(crash-7, 747-6)
nsubj(killed-8, crash-7)
root(ROOT-0, killed-8)
nummod(people-10, 520-9)
dobj(killed-8, people-10)
punct(people-10, ,-11)
det(accident-15, the-12)
amod(accident-15, worst-13)
amod(accident-15, single-aircraft-14)
appos(people-10, accident-15)
case(history-18, in-16)
compound(history-18, aviation-17)
nmod:in(accident-15, history-18)
punct(killed-8, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#people

kill :: Consolidated Rail Corp. said it agreed to pay $ 58 million to settle all claims outstanding on behalf of 16 people killed in a 1987 train collision ./.
compound(Corp.-3, Consolidated-1)
compound(Corp.-3, Rail-2)
nsubj(said-4, Corp.-3)
root(ROOT-0, said-4)
nsubj(agreed-6, it-5)
nsubj:xsubj(pay-8, it-5)
ccomp(said-4, agreed-6)
mark(pay-8, to-7)
xcomp(agreed-6, pay-8)
dobj(pay-8, $-9)
compound(million-11, 58-10)
nummod($-9, million-11)
mark(settle-13, to-12)
advcl(pay-8, settle-13)
det(claims-15, all-14)
dobj(settle-13, claims-15)
amod(claims-15, outstanding-16)
case(people-21, on-17)
mwe(on-17, behalf-18)
mwe(on-17, of-19)
nummod(people-21, 16-20)
nmod:on_behalf_of(claims-15, people-21)
acl(people-21, killed-22)
case(collision-27, in-23)
det(collision-27, a-24)
nummod(collision-27, 1987-25)
compound(collision-27, train-26)
nmod:in(killed-22, collision-27)
punct(said-4, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: kill#collision

kill :: `` If {Shorty} puts down his arms , the campesinos themselves will kill him . ''/''
punct(kill-15, ``-1)
mark(puts-6, If-2)
punct(Shorty-4, -LCB--3)
dep(puts-6, Shorty-4)
punct(Shorty-4, -RCB--5)
advcl(kill-15, puts-6)
compound:prt(puts-6, down-7)
nmod:poss(arms-9, his-8)
dobj(puts-6, arms-9)
punct(kill-15, ,-10)
det(campesinos-12, the-11)
nsubj(kill-15, campesinos-12)
nmod:npmod(campesinos-12, themselves-13)
aux(kill-15, will-14)
root(ROOT-0, kill-15)
dobj(kill-15, him-16)
punct(kill-15, .-17)
punct(kill-15, ''-18)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: kill#him

knock :: In 1985 , we took a write-off to finance all this restructuring that knocked a third of our equity away ./.
case(1985-2, In-1)
nmod:in(took-5, 1985-2)
punct(took-5, ,-3)
nsubj(took-5, we-4)
root(ROOT-0, took-5)
det(write-off-7, a-6)
dobj(took-5, write-off-7)
mark(finance-9, to-8)
advcl(took-5, finance-9)
det:predet(restructuring-12, all-10)
det(restructuring-12, this-11)
dobj(finance-9, restructuring-12)
nsubj(knocked-14, restructuring-12)
ref(restructuring-12, that-13)
acl:relcl(restructuring-12, knocked-14)
det(third-16, a-15)
dobj(knocked-14, third-16)
case(equity-19, of-17)
nmod:poss(equity-19, our-18)
nmod:of(third-16, equity-19)
advmod(knocked-14, away-20)
punct(took-5, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#equity

knock :: A coalition of civic leaders , civil libertarians and Hispanic groups had gone to federal court in an unsuccessful attempt to knock the amendment off the ballot ./.
det(coalition-2, A-1)
nsubj(gone-13, coalition-2)
case(leaders-5, of-3)
amod(leaders-5, civic-4)
nmod:of(coalition-2, leaders-5)
punct(coalition-2, ,-6)
amod(libertarians-8, civil-7)
appos(coalition-2, libertarians-8)
cc(libertarians-8, and-9)
amod(groups-11, Hispanic-10)
appos(coalition-2, groups-11)
conj:and(libertarians-8, groups-11)
aux(gone-13, had-12)
root(ROOT-0, gone-13)
case(court-16, to-14)
amod(court-16, federal-15)
nmod:to(gone-13, court-16)
case(attempt-20, in-17)
det(attempt-20, an-18)
amod(attempt-20, unsuccessful-19)
nmod:in(gone-13, attempt-20)
mark(knock-22, to-21)
acl(attempt-20, knock-22)
det(amendment-24, the-23)
dobj(knock-22, amendment-24)
case(ballot-27, off-25)
det(ballot-27, the-26)
nmod:off(knock-22, ballot-27)
punct(gone-13, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#amendment

knock :: The issue is particularly hot in Florida , where a coalition of civic leaders , civil libertarians and Hispanic groups went to federal court recently in an unsuccessful attempt to knock the proposed amendment off the ballot ./.
det(issue-2, The-1)
nsubj(hot-5, issue-2)
cop(hot-5, is-3)
advmod(hot-5, particularly-4)
root(ROOT-0, hot-5)
case(Florida-7, in-6)
nmod:in(hot-5, Florida-7)
punct(Florida-7, ,-8)
advmod(went-21, where-9)
det(coalition-11, a-10)
nsubj(went-21, coalition-11)
case(leaders-14, of-12)
amod(leaders-14, civic-13)
nmod:of(coalition-11, leaders-14)
punct(coalition-11, ,-15)
amod(libertarians-17, civil-16)
conj:and(coalition-11, libertarians-17)
nsubj(went-21, libertarians-17)
cc(coalition-11, and-18)
amod(groups-20, Hispanic-19)
conj:and(coalition-11, groups-20)
nsubj(went-21, groups-20)
acl:relcl(Florida-7, went-21)
case(court-24, to-22)
amod(court-24, federal-23)
nmod:to(went-21, court-24)
advmod(went-21, recently-25)
case(attempt-29, in-26)
det(attempt-29, an-27)
amod(attempt-29, unsuccessful-28)
nmod:in(went-21, attempt-29)
mark(knock-31, to-30)
acl(attempt-29, knock-31)
det(amendment-34, the-32)
amod(amendment-34, proposed-33)
dobj(knock-31, amendment-34)
case(ballot-37, off-35)
det(ballot-37, the-36)
nmod:off(amendment-34, ballot-37)
punct(hot-5, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#amendment

knock :: Grand Metropolitan PLC , seeking to knock down another legal impediment to its proposed acquisition of Pillsbury Co . , said it would dispose of Pillsbury 's barge and towboat business if it gained control of the Minneapolis food and restaurant concern ./.
compound(PLC-3, Grand-1)
compound(PLC-3, Metropolitan-2)
root(ROOT-0, PLC-3)
punct(PLC-3, ,-4)
root(,-4, seeking-5)
mark(knock-7, to-6)
xcomp(seeking-5, knock-7)
compound:prt(knock-7, down-8)
det(impediment-11, another-9)
amod(impediment-11, legal-10)
dobj(knock-7, impediment-11)
case(acquisition-15, to-12)
nmod:poss(acquisition-15, its-13)
amod(acquisition-15, proposed-14)
nmod:to(impediment-11, acquisition-15)
case(Co-18, of-16)
compound(Co-18, Pillsbury-17)
nmod:of(acquisition-15, Co-18)
punct(seeking-5, .-19)
punct(said-2, ,-1)
root(ROOT-0, said-2)
nsubj(dispose-5, it-3)
aux(dispose-5, would-4)
ccomp(said-2, dispose-5)
case(barge-9, of-6)
nmod:poss(barge-9, Pillsbury-7)
case(Pillsbury-7, 's-8)
nmod:of(dispose-5, barge-9)
cc(barge-9, and-10)
compound(business-12, towboat-11)
nmod:of(dispose-5, business-12)
conj:and(barge-9, business-12)
mark(gained-15, if-13)
nsubj(gained-15, it-14)
advcl(dispose-5, gained-15)
dobj(gained-15, control-16)
case(food-20, of-17)
det(food-20, the-18)
compound(food-20, Minneapolis-19)
nmod:of(control-16, food-20)
cc(food-20, and-21)
compound(concern-23, restaurant-22)
nmod:of(control-16, concern-23)
conj:and(food-20, concern-23)
punct(said-2, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#impediment

knock :: Any bad news knocks stocks down , '' he said ./.
det(news-3, Any-1)
amod(news-3, bad-2)
nsubj(knocks-4, news-3)
ccomp(said-10, knocks-4)
dobj(knocks-4, stocks-5)
advmod(knocks-4, down-6)
punct(said-10, ,-7)
punct(said-10, ''-8)
nsubj(said-10, he-9)
root(ROOT-0, said-10)
punct(said-10, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#stocks

knock :: `` No one 's knocking down the door anymore , '' said Paul Lovegren , senior account executive at Wassendorf & Son Co . , Cedar Falls , Iowa ./.
punct(said-12, ``-1)
neg(one-3, No-2)
ccomp(said-12, one-3)
case(one-3, 's-4)
dep(one-3, knocking-5)
compound:prt(knocking-5, down-6)
det(door-8, the-7)
dobj(knocking-5, door-8)
advmod(knocking-5, anymore-9)
punct(said-12, ,-10)
punct(said-12, ''-11)
root(ROOT-0, said-12)
compound(Lovegren-14, Paul-13)
nsubj(said-12, Lovegren-14)
punct(Lovegren-14, ,-15)
amod(executive-18, senior-16)
compound(executive-18, account-17)
appos(Lovegren-14, executive-18)
case(Wassendorf-20, at-19)
nmod:at(executive-18, Wassendorf-20)
cc(Wassendorf-20, &-21)
compound(Co-23, Son-22)
nmod:at(executive-18, Co-23)
conj:&(Wassendorf-20, Co-23)
punct(said-12, .-24)
root(ROOT-0, ,-1)
compound(Falls-3, Cedar-2)
root(,-1, Falls-3)
punct(Falls-3, ,-4)
appos(Falls-3, Iowa-5)
punct(Falls-3, .-6)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#door

knock :: Mr. Hauke `` is looking for a much more costly repair that is nonstandard and would knock the price beyond the the { $ 500} limit for a buy-back . ''/''
compound(Hauke-2, Mr.-1)
nsubj(looking-5, Hauke-2)
punct(looking-5, ``-3)
aux(looking-5, is-4)
root(ROOT-0, looking-5)
case(repair-11, for-6)
det(repair-11, a-7)
advmod(more-9, much-8)
advmod(costly-10, more-9)
amod(repair-11, costly-10)
nmod:for(looking-5, repair-11)
nsubj(nonstandard-14, repair-11)
nsubj(knock-17, repair-11)
ref(repair-11, that-12)
cop(nonstandard-14, is-13)
acl:relcl(repair-11, nonstandard-14)
cc(nonstandard-14, and-15)
aux(knock-17, would-16)
acl:relcl(repair-11, knock-17)
conj:and(nonstandard-14, knock-17)
det(price-19, the-18)
dobj(knock-17, price-19)
case(limit-27, beyond-20)
det(limit-27, the-21)
det(limit-27, the-22)
punct(500-25, -LCB--23)
dep(500-25, $-24)
dep(limit-27, 500-25)
punct(500-25, -RCB--26)
nmod:beyond(knock-17, limit-27)
case(buy-back-30, for-28)
det(buy-back-30, a-29)
nmod:for(limit-27, buy-back-30)
punct(looking-5, .-31)
punct(looking-5, ''-32)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: knock#price

knock :: That was altogether appropriate , because some minutes before Tyson had knocked Spinks 's block off , figuratively speaking ./.
nsubj(appropriate-4, That-1)
cop(appropriate-4, was-2)
advmod(appropriate-4, altogether-3)
root(ROOT-0, appropriate-4)
punct(appropriate-4, ,-5)
dep(appropriate-4, because-6)
det(minutes-8, some-7)
dep(because-6, minutes-8)
mark(knocked-12, before-9)
nsubj(knocked-12, Tyson-10)
aux(knocked-12, had-11)
acl(minutes-8, knocked-12)
nmod:poss(block-15, Spinks-13)
case(Spinks-13, 's-14)
dobj(knocked-12, block-15)
compound:prt(knocked-12, off-16)
punct(knocked-12, ,-17)
advmod(speaking-19, figuratively-18)
advcl(knocked-12, speaking-19)
punct(appropriate-4, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#block

knock :: `` It does n't take a hard shot to knock someone out if you hit him in the right spot , '' he noted ./.
punct(noted-24, ``-1)
nsubj(take-5, It-2)
aux(take-5, does-3)
neg(take-5, n't-4)
ccomp(noted-24, take-5)
det(shot-8, a-6)
amod(shot-8, hard-7)
dobj(take-5, shot-8)
mark(knock-10, to-9)
advcl(take-5, knock-10)
dobj(knock-10, someone-11)
compound:prt(knock-10, out-12)
mark(hit-15, if-13)
nsubj(hit-15, you-14)
advcl(take-5, hit-15)
dobj(hit-15, him-16)
case(spot-20, in-17)
det(spot-20, the-18)
amod(spot-20, right-19)
nmod:in(hit-15, spot-20)
punct(noted-24, ,-21)
punct(noted-24, ''-22)
nsubj(noted-24, he-23)
root(ROOT-0, noted-24)
punct(noted-24, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#someone

knock :: The project , which is capable of supplying 8 % of South Africa 's electricity needs , was knocked out of commission several years ago by sabotage from anti-government rebels in Mozambique supported by South Africa ./.
det(project-2, The-1)
nsubj(capable-6, project-2)
nsubjpass(knocked-19, project-2)
punct(project-2, ,-3)
ref(project-2, which-4)
cop(capable-6, is-5)
acl:relcl(project-2, capable-6)
mark(supplying-8, of-7)
advcl(capable-6, supplying-8)
nummod(%-10, 8-9)
dobj(supplying-8, %-10)
case(needs-16, of-11)
compound(Africa-13, South-12)
nmod:poss(needs-16, Africa-13)
case(Africa-13, 's-14)
compound(needs-16, electricity-15)
nmod:of(%-10, needs-16)
punct(project-2, ,-17)
auxpass(knocked-19, was-18)
root(ROOT-0, knocked-19)
case(commission-22, out-20)
mwe(out-20, of-21)
nmod:out_of(knocked-19, commission-22)
amod(years-24, several-23)
nmod:npmod(ago-25, years-24)
advmod(knocked-19, ago-25)
case(sabotage-27, by-26)
nmod:agent(knocked-19, sabotage-27)
case(rebels-30, from-28)
amod(rebels-30, anti-government-29)
nmod:from(sabotage-27, rebels-30)
case(Mozambique-32, in-31)
nmod:in(rebels-30, Mozambique-32)
acl(Mozambique-32, supported-33)
case(Africa-36, by-34)
compound(Africa-36, South-35)
nmod:by(supported-33, Africa-36)
punct(knocked-19, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#project

knock :: A similar regulation in New York was knocked out in court and another court fight is under way in Massachusetts ./.
det(regulation-3, A-1)
amod(regulation-3, similar-2)
nsubjpass(knocked-8, regulation-3)
case(York-6, in-4)
compound(York-6, New-5)
nmod:in(regulation-3, York-6)
auxpass(knocked-8, was-7)
root(ROOT-0, knocked-8)
compound:prt(knocked-8, out-9)
case(court-11, in-10)
nmod:in(knocked-8, court-11)
cc(knocked-8, and-12)
det(fight-15, another-13)
compound(fight-15, court-14)
nsubj(way-18, fight-15)
cop(way-18, is-16)
case(way-18, under-17)
conj:and(knocked-8, way-18)
case(Massachusetts-20, in-19)
nmod:in(way-18, Massachusetts-20)
punct(knocked-8, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#regulation

knock :: And most of the jobs will go to candidates sought out by search firms , not those knocking on headhunter doors ./.
cc(go-7, And-1)
nsubj(go-7, most-2)
case(jobs-5, of-3)
det(jobs-5, the-4)
nmod:of(most-2, jobs-5)
aux(go-7, will-6)
root(ROOT-0, go-7)
case(candidates-9, to-8)
nmod:to(go-7, candidates-9)
acl(candidates-9, sought-10)
compound:prt(sought-10, out-11)
case(firms-14, by-12)
compound(firms-14, search-13)
nmod:by(sought-10, firms-14)
punct(candidates-9, ,-15)
neg(those-17, not-16)
appos(candidates-9, those-17)
acl(those-17, knocking-18)
case(doors-21, on-19)
compound(doors-21, headhunter-20)
nmod:on(knocking-18, doors-21)
punct(go-7, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#doors

knock :: Sure , everybody knows how the trade deficit , the dollar and index arbitrage helped knock the Dow Jones Industrial Average down 101.46 points Thursday ./.
advmod(knows-4, Sure-1)
punct(knows-4, ,-2)
nsubj(knows-4, everybody-3)
root(ROOT-0, knows-4)
advmod(helped-15, how-5)
det(deficit-8, the-6)
compound(deficit-8, trade-7)
nsubj(helped-15, deficit-8)
punct(deficit-8, ,-9)
det(dollar-11, the-10)
conj:and(deficit-8, dollar-11)
nsubj(helped-15, dollar-11)
cc(deficit-8, and-12)
compound(arbitrage-14, index-13)
conj:and(deficit-8, arbitrage-14)
nsubj(helped-15, arbitrage-14)
ccomp(knows-4, helped-15)
xcomp(helped-15, knock-16)
det(Average-21, the-17)
compound(Average-21, Dow-18)
compound(Average-21, Jones-19)
compound(Average-21, Industrial-20)
dobj(knock-16, Average-21)
case(points-24, down-22)
nummod(points-24, 101.46-23)
nmod:down(knock-16, points-24)
nmod:tmod(points-24, Thursday-25)
punct(knows-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#average

knock :: One of 107 items that President Reagan wants Congress to knock out of the fiscal 1988 budget , this program illustrates one reason the government finds it so tough to cut spending ./.
nsubj(illustrates-21, One-1)
case(items-4, of-2)
nummod(items-4, 107-3)
nmod:of(One-1, items-4)
dobj(wants-8, items-4)
nsubj:xsubj(knock-11, items-4)
ref(items-4, that-5)
compound(Reagan-7, President-6)
nsubj(wants-8, Reagan-7)
acl:relcl(items-4, wants-8)
dobj(wants-8, Congress-9)
nsubj:xsubj(knock-11, Congress-9)
mark(knock-11, to-10)
xcomp(wants-8, knock-11)
case(budget-17, out-12)
mwe(out-12, of-13)
det(budget-17, the-14)
amod(budget-17, fiscal-15)
nummod(budget-17, 1988-16)
nmod:out_of(knock-11, budget-17)
punct(illustrates-21, ,-18)
det(program-20, this-19)
nsubj(illustrates-21, program-20)
root(ROOT-0, illustrates-21)
nummod(reason-23, one-22)
dobj(illustrates-21, reason-23)
det(government-25, the-24)
nsubj(finds-26, government-25)
acl:relcl(reason-23, finds-26)
dobj(finds-26, it-27)
advmod(tough-29, so-28)
xcomp(finds-26, tough-29)
mark(cut-31, to-30)
xcomp(tough-29, cut-31)
dobj(cut-31, spending-32)
punct(illustrates-21, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#items

knock :: Consequently , Mr. Elliott says , `` A lot of peripheral players have been knocked out of the market . ''/''
advmod(knocked-15, Consequently-1)
punct(says-5, ,-2)
compound(Elliott-4, Mr.-3)
nsubj(says-5, Elliott-4)
parataxis(knocked-15, says-5)
punct(says-5, ,-6)
punct(knocked-15, ``-7)
det(lot-9, A-8)
nsubjpass(knocked-15, lot-9)
case(players-12, of-10)
amod(players-12, peripheral-11)
nmod:of(lot-9, players-12)
aux(knocked-15, have-13)
auxpass(knocked-15, been-14)
root(ROOT-0, knocked-15)
case(market-19, out-16)
mwe(out-16, of-17)
det(market-19, the-18)
nmod:out_of(knocked-15, market-19)
punct(knocked-15, .-20)
punct(knocked-15, ''-21)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: knock#lot

knock :: You could have knocked me over , '' said Joseph Ronning of Brown Brothers Harriman & Co ./.
nsubj(knocked-4, You-1)
aux(knocked-4, could-2)
aux(knocked-4, have-3)
ccomp(said-9, knocked-4)
dobj(knocked-4, me-5)
compound:prt(knocked-4, over-6)
punct(said-9, ,-7)
punct(said-9, ''-8)
root(ROOT-0, said-9)
compound(Ronning-11, Joseph-10)
nsubj(said-9, Ronning-11)
case(Harriman-15, of-12)
compound(Harriman-15, Brown-13)
compound(Harriman-15, Brothers-14)
nmod:of(Ronning-11, Harriman-15)
cc(Harriman-15, &-16)
nmod:of(Ronning-11, Co-17)
conj:&(Harriman-15, Co-17)
punct(said-9, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#me

knock :: Incumbent Spyros Kyprianou was knocked out in voting last week ./.
amod(Kyprianou-3, Incumbent-1)
compound(Kyprianou-3, Spyros-2)
nsubjpass(knocked-5, Kyprianou-3)
auxpass(knocked-5, was-4)
root(ROOT-0, knocked-5)
compound:prt(knocked-5, out-6)
case(voting-8, in-7)
nmod:in(knocked-5, voting-8)
amod(week-10, last-9)
nmod:tmod(knocked-5, week-10)
punct(knocked-5, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#kyprianou

knock :: Seagram must decide by Feb. 9 whether to come up with a higher offer that would knock Grand Met out of the bidding war and frustrate its expansion strategy ./.
nsubj(decide-3, Seagram-1)
aux(decide-3, must-2)
root(ROOT-0, decide-3)
case(Feb.-5, by-4)
nmod:by(decide-3, Feb.-5)
nummod(Feb.-5, 9-6)
mark(come-9, whether-7)
mark(come-9, to-8)
ccomp(decide-3, come-9)
compound:prt(come-9, up-10)
case(offer-14, with-11)
det(offer-14, a-12)
amod(offer-14, higher-13)
nmod:with(come-9, offer-14)
nsubj(knock-17, offer-14)
ref(offer-14, that-15)
aux(knock-17, would-16)
acl:relcl(offer-14, knock-17)
nsubj(Met-19, Grand-18)
nsubj(frustrate-26, Grand-18)
ccomp(knock-17, Met-19)
case(war-24, out-20)
mwe(out-20, of-21)
det(war-24, the-22)
compound(war-24, bidding-23)
nmod:out_of(Met-19, war-24)
cc(Met-19, and-25)
ccomp(knock-17, frustrate-26)
conj:and(Met-19, frustrate-26)
nmod:poss(strategy-29, its-27)
compound(strategy-29, expansion-28)
dobj(frustrate-26, strategy-29)
punct(decide-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#offer

knock :: We union members were there backing John Kennedy with our money , door knocking and votes in 1960 ./.
dep(backing-6, We-1)
compound(members-3, union-2)
nsubj(backing-6, members-3)
aux(backing-6, were-4)
expl(backing-6, there-5)
root(ROOT-0, backing-6)
compound(Kennedy-8, John-7)
dobj(backing-6, Kennedy-8)
case(money-11, with-9)
nmod:poss(money-11, our-10)
nmod:with(backing-6, money-11)
punct(backing-6, ,-12)
dobj(backing-6, door-13)
acl(door-13, knocking-14)
cc(knocking-14, and-15)
acl(door-13, votes-16)
conj:and(knocking-14, votes-16)
case(1960-18, in-17)
nmod:in(knocking-14, 1960-18)
punct(backing-6, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#1960

knock :: And he is likely to deliver a new and more impassioned plea for the line-item veto , which would allow the president to knock individual items out of a spending bill without vetoing the entire bill ./.
cc(likely-4, And-1)
nsubj(likely-4, he-2)
nsubj:xsubj(deliver-6, he-2)
cop(likely-4, is-3)
root(ROOT-0, likely-4)
mark(deliver-6, to-5)
xcomp(likely-4, deliver-6)
det(plea-12, a-7)
amod(plea-12, new-8)
cc(new-8, and-9)
advmod(impassioned-11, more-10)
conj:and(new-8, impassioned-11)
amod(plea-12, impassioned-11)
dobj(deliver-6, plea-12)
case(veto-16, for-13)
det(veto-16, the-14)
amod(veto-16, line-item-15)
nmod:for(plea-12, veto-16)
nsubj(allow-20, veto-16)
punct(veto-16, ,-17)
ref(veto-16, which-18)
aux(allow-20, would-19)
acl:relcl(veto-16, allow-20)
det(president-22, the-21)
dobj(allow-20, president-22)
nsubj:xsubj(knock-24, president-22)
mark(knock-24, to-23)
xcomp(allow-20, knock-24)
amod(items-26, individual-25)
dobj(knock-24, items-26)
case(bill-31, out-27)
mwe(out-27, of-28)
det(bill-31, a-29)
compound(bill-31, spending-30)
nmod:out_of(knock-24, bill-31)
mark(vetoing-33, without-32)
advcl(knock-24, vetoing-33)
det(bill-36, the-34)
amod(bill-36, entire-35)
dobj(vetoing-33, bill-36)
punct(likely-4, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#items

knock :: Grand Metropolitan PLC 's sharply higher offer for Martell & Cie. represents an attempt to knock Seagram Co. out of the bidding war for the French cognac maker ./.
compound(PLC-3, Grand-1)
compound(PLC-3, Metropolitan-2)
nmod:poss(offer-7, PLC-3)
case(PLC-3, 's-4)
advmod(higher-6, sharply-5)
amod(offer-7, higher-6)
nsubj(represents-12, offer-7)
case(Martell-9, for-8)
nmod:for(offer-7, Martell-9)
cc(Martell-9, &-10)
nmod:for(offer-7, Cie.-11)
conj:&(Martell-9, Cie.-11)
root(ROOT-0, represents-12)
det(attempt-14, an-13)
dobj(represents-12, attempt-14)
mark(knock-16, to-15)
acl(attempt-14, knock-16)
compound(Co.-18, Seagram-17)
dobj(knock-16, Co.-18)
case(war-23, out-19)
mwe(out-19, of-20)
det(war-23, the-21)
compound(war-23, bidding-22)
nmod:out_of(knock-16, war-23)
case(maker-28, for-24)
det(maker-28, the-25)
amod(maker-28, French-26)
compound(maker-28, cognac-27)
nmod:for(war-23, maker-28)
punct(represents-12, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#co.

knock :: `` Jesse 's been knocked out of the box so many times before , '' says City Councilman George Burrell , a Jackson supporter ./.
punct(says-16, ``-1)
nsubjpass(knocked-5, Jesse-2)
case(Jesse-2, 's-3)
auxpass(knocked-5, been-4)
ccomp(says-16, knocked-5)
case(box-9, out-6)
mwe(out-6, of-7)
det(box-9, the-8)
nmod:out_of(knocked-5, box-9)
advmod(times-12, so-10)
amod(times-12, many-11)
nmod:tmod(knocked-5, times-12)
advmod(times-12, before-13)
punct(says-16, ,-14)
punct(says-16, ''-15)
root(ROOT-0, says-16)
compound(Burrell-20, City-17)
compound(Burrell-20, Councilman-18)
compound(Burrell-20, George-19)
nsubj(says-16, Burrell-20)
punct(Burrell-20, ,-21)
det(supporter-24, a-22)
compound(supporter-24, Jackson-23)
appos(Burrell-20, supporter-24)
punct(says-16, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#jesse

knock :: Some people can go out to the ball park once a year , knock back a few brews and compare frequent-flier mileage with their buddies while the Great Game goes on before their unseeing eyes ./.
det(people-2, Some-1)
nsubj(go-4, people-2)
nsubj(knock-14, people-2)
nsubj(compare-20, people-2)
aux(go-4, can-3)
root(ROOT-0, go-4)
advmod(go-4, out-5)
case(park-9, to-6)
det(park-9, the-7)
compound(park-9, ball-8)
nmod:to(go-4, park-9)
advmod(year-12, once-10)
det(year-12, a-11)
nmod:tmod(go-4, year-12)
punct(go-4, ,-13)
conj:and(go-4, knock-14)
compound:prt(knock-14, back-15)
det(brews-18, a-16)
amod(brews-18, few-17)
dobj(knock-14, brews-18)
cc(go-4, and-19)
conj:and(go-4, compare-20)
amod(mileage-22, frequent-flier-21)
dobj(compare-20, mileage-22)
case(buddies-25, with-23)
nmod:poss(buddies-25, their-24)
nmod:with(compare-20, buddies-25)
mark(goes-30, while-26)
det(Game-29, the-27)
amod(Game-29, Great-28)
nsubj(goes-30, Game-29)
advcl(go-4, goes-30)
case(eyes-35, on-31)
case(eyes-35, before-32)
nmod:poss(eyes-35, their-33)
amod(eyes-35, unseeing-34)
nmod:on(goes-30, eyes-35)
punct(go-4, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#brews

knock :: After a power failure knocked out the elevators , he climbed up and down all those flights at mealtimes ./.
mark(knocked-5, After-1)
det(failure-4, a-2)
compound(failure-4, power-3)
nsubj(knocked-5, failure-4)
advcl(climbed-11, knocked-5)
compound:prt(knocked-5, out-6)
det(elevators-8, the-7)
dobj(knocked-5, elevators-8)
punct(climbed-11, ,-9)
nsubj(climbed-11, he-10)
nsubj(climbed-11', he-10)
root(ROOT-0, climbed-11)
conj:and(climbed-11, climbed-11')
case(flights-17, up-12)
cc(up-12, and-13)
conj:and(up-12, down-14)
det:predet(flights-17, all-15)
det(flights-17, those-16)
nmod:down(climbed-11', flights-17)
nmod:up(climbed-11, flights-17)
case(mealtimes-19, at-18)
nmod:at(flights-17, mealtimes-19)
punct(climbed-11, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#elevators

knock :: Grand Metropolitan PLC 's sharply higher offer for Martell & Cie. represents an attempt to knock Seagram Co. out of the bidding war for the French cognac maker ./.
compound(PLC-3, Grand-1)
compound(PLC-3, Metropolitan-2)
nmod:poss(offer-7, PLC-3)
case(PLC-3, 's-4)
advmod(higher-6, sharply-5)
amod(offer-7, higher-6)
nsubj(represents-12, offer-7)
case(Martell-9, for-8)
nmod:for(offer-7, Martell-9)
cc(Martell-9, &-10)
nmod:for(offer-7, Cie.-11)
conj:&(Martell-9, Cie.-11)
root(ROOT-0, represents-12)
det(attempt-14, an-13)
dobj(represents-12, attempt-14)
mark(knock-16, to-15)
acl(attempt-14, knock-16)
compound(Co.-18, Seagram-17)
dobj(knock-16, Co.-18)
case(war-23, out-19)
mwe(out-19, of-20)
det(war-23, the-21)
compound(war-23, bidding-22)
nmod:out_of(knock-16, war-23)
case(maker-28, for-24)
det(maker-28, the-25)
amod(maker-28, French-26)
compound(maker-28, cognac-27)
nmod:for(war-23, maker-28)
punct(represents-12, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#co.

knock :: For the record , this was the second straight season in which the Redskins came to Chicago to knock the home team out of the playoffs ./.
case(record-3, For-1)
det(record-3, the-2)
nmod:for(season-10, record-3)
punct(season-10, ,-4)
nsubj(season-10, this-5)
cop(season-10, was-6)
det(season-10, the-7)
amod(season-10, second-8)
amod(season-10, straight-9)
root(ROOT-0, season-10)
nmod:in(came-15, season-10)
case(which-12, in-11)
ref(season-10, which-12)
det(Redskins-14, the-13)
nsubj(came-15, Redskins-14)
nsubj:xsubj(knock-19, Redskins-14)
acl:relcl(season-10, came-15)
case(Chicago-17, to-16)
nmod:to(came-15, Chicago-17)
mark(knock-19, to-18)
xcomp(came-15, knock-19)
det(team-22, the-20)
compound(team-22, home-21)
dobj(knock-19, team-22)
case(playoffs-26, out-23)
mwe(out-23, of-24)
det(playoffs-26, the-25)
nmod:out_of(knock-19, playoffs-26)
punct(season-10, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#team

knock :: Coca-Cola Co . , which stalked out of India 11 years ago , is knocking on the door again ./.
compound(Co-2, Coca-Cola-1)
root(ROOT-0, Co-2)
punct(Co-2, .-3)
punct(stalked-3, ,-1)
nsubj(stalked-3, which-2)
root(ROOT-0, stalked-3)
case(India-6, out-4)
mwe(out-4, of-5)
nmod:out_of(stalked-3, India-6)
nummod(years-8, 11-7)
nmod:npmod(ago-9, years-8)
advmod(stalked-3, ago-9)
punct(stalked-3, ,-10)
aux(knocking-12, is-11)
advcl(stalked-3, knocking-12)
case(door-15, on-13)
det(door-15, the-14)
nmod:on(knocking-12, door-15)
advmod(knocking-12, again-16)
punct(stalked-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#door

knock :: Thus he notes that when Edward Baring became Baron Revelstoke in 1883 he knocked together two Mayfair mansions to make one urban palace in which he `` entertained in a style as lavish as the furnishing ./.
advmod(notes-3, Thus-1)
nsubj(notes-3, he-2)
root(ROOT-0, notes-3)
mark(knocked-14, that-4)
advmod(became-8, when-5)
compound(Baring-7, Edward-6)
nsubj(became-8, Baring-7)
advcl(knocked-14, became-8)
compound(Revelstoke-10, Baron-9)
xcomp(became-8, Revelstoke-10)
case(1883-12, in-11)
nmod:in(became-8, 1883-12)
nsubj(knocked-14, he-13)
ccomp(notes-3, knocked-14)
advmod(knocked-14, together-15)
nummod(mansions-18, two-16)
compound(mansions-18, Mayfair-17)
dobj(knocked-14, mansions-18)
mark(make-20, to-19)
advcl(knocked-14, make-20)
nummod(palace-23, one-21)
amod(palace-23, urban-22)
dobj(make-20, palace-23)
nmod:in(entertained-28, palace-23)
case(which-25, in-24)
ref(palace-23, which-25)
nsubj(entertained-28, he-26)
punct(entertained-28, ``-27)
acl:relcl(palace-23, entertained-28)
case(style-31, in-29)
det(style-31, a-30)
nmod:in(entertained-28, style-31)
advmod(lavish-33, as-32)
advmod(entertained-28, lavish-33)
case(furnishing-36, as-34)
det(furnishing-36, the-35)
nmod:as(lavish-33, furnishing-36)
punct(notes-3, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#mansions

knock :: It knocked out electricity and communication services ./.
nsubj(knocked-2, It-1)
root(ROOT-0, knocked-2)
compound:prt(knocked-2, out-3)
compound(services-7, electricity-4)
cc(electricity-4, and-5)
conj:and(electricity-4, communication-6)
compound(services-7, communication-6)
dobj(knocked-2, services-7)
punct(knocked-2, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#services

knock :: It recently sued a small local factory that was knocking off its knock-off with a game called Entrepreneurs ./.
nsubj(sued-3, It-1)
advmod(sued-3, recently-2)
root(ROOT-0, sued-3)
det(factory-7, a-4)
amod(factory-7, small-5)
amod(factory-7, local-6)
dobj(sued-3, factory-7)
nsubj(knocking-10, factory-7)
ref(factory-7, that-8)
aux(knocking-10, was-9)
acl:relcl(factory-7, knocking-10)
compound:prt(knocking-10, off-11)
nmod:poss(knock-off-13, its-12)
dobj(knocking-10, knock-off-13)
case(game-16, with-14)
det(game-16, a-15)
nmod:with(knocking-10, game-16)
acl(game-16, called-17)
xcomp(called-17, Entrepreneurs-18)
punct(sued-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#knock-off

knock :: To cloak their activities , they knock out lights in elevators and stairwells ./.
mark(cloak-2, To-1)
advcl(knock-7, cloak-2)
nmod:poss(activities-4, their-3)
dobj(cloak-2, activities-4)
punct(knock-7, ,-5)
nsubj(knock-7, they-6)
root(ROOT-0, knock-7)
compound:prt(knock-7, out-8)
dobj(knock-7, lights-9)
case(elevators-11, in-10)
nmod:in(lights-9, elevators-11)
cc(elevators-11, and-12)
nmod:in(lights-9, stairwells-13)
conj:and(elevators-11, stairwells-13)
punct(knock-7, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#lights

knock :: Despite much talk of Star Wars , the U.S. ca n't knock down even an obsolete ballistic missile in mid-flight ./.
case(talk-3, Despite-1)
amod(talk-3, much-2)
nmod:despite(knock-12, talk-3)
case(Wars-6, of-4)
compound(Wars-6, Star-5)
nmod:of(talk-3, Wars-6)
punct(knock-12, ,-7)
det(U.S.-9, the-8)
nsubj(knock-12, U.S.-9)
aux(knock-12, ca-10)
neg(knock-12, n't-11)
root(ROOT-0, knock-12)
compound:prt(knock-12, down-13)
advmod(missile-18, even-14)
det(missile-18, an-15)
amod(missile-18, obsolete-16)
amod(missile-18, ballistic-17)
dobj(knock-12, missile-18)
case(mid-flight-20, in-19)
nmod:in(missile-18, mid-flight-20)
punct(knock-12, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#missile

knock :: Resources stock prices were knocked broadly lower in early trading following a steep decline of the New York gold price Friday ./.
compound(prices-3, Resources-1)
compound(prices-3, stock-2)
nsubjpass(knocked-5, prices-3)
auxpass(knocked-5, were-4)
root(ROOT-0, knocked-5)
advmod(lower-7, broadly-6)
advmod(knocked-5, lower-7)
case(trading-10, in-8)
amod(trading-10, early-9)
nmod:in(knocked-5, trading-10)
case(decline-14, following-11)
det(decline-14, a-12)
amod(decline-14, steep-13)
nmod:following(knocked-5, decline-14)
case(price-20, of-15)
det(price-20, the-16)
compound(price-20, New-17)
compound(price-20, York-18)
amod(price-20, gold-19)
nmod:of(decline-14, price-20)
nmod:tmod(decline-14, Friday-21)
punct(knocked-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#prices

knock :: It knocked out communications on the resort island of Cozumel and leveled slum areas in Cancun on the mainland ./.
nsubj(knocked-2, It-1)
nsubj(leveled-12, It-1)
root(ROOT-0, knocked-2)
compound:prt(knocked-2, out-3)
dobj(knocked-2, communications-4)
case(island-8, on-5)
det(island-8, the-6)
compound(island-8, resort-7)
nmod:on(communications-4, island-8)
case(Cozumel-10, of-9)
nmod:of(island-8, Cozumel-10)
cc(knocked-2, and-11)
conj:and(knocked-2, leveled-12)
compound(areas-14, slum-13)
dobj(leveled-12, areas-14)
case(Cancun-16, in-15)
nmod:in(leveled-12, Cancun-16)
case(mainland-19, on-17)
det(mainland-19, the-18)
nmod:on(leveled-12, mainland-19)
punct(knocked-2, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#communications

knock :: `` But we have n't knocked them off our list . ''/''
punct(knocked-6, ``-1)
cc(knocked-6, But-2)
nsubj(knocked-6, we-3)
aux(knocked-6, have-4)
neg(knocked-6, n't-5)
root(ROOT-0, knocked-6)
dobj(knocked-6, them-7)
compound:prt(knocked-6, off-8)
nmod:poss(list-10, our-9)
dobj(knocked-6, list-10)
punct(knocked-6, .-11)
punct(knocked-6, ''-12)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: knock#them

knock :: The one time the cannon was fired , the chain snapped and one cannonball `` killed a cow in a distant field , while the other knocked down the chimney from a log cabin . ''/''
det(time-3, The-1)
nummod(time-3, one-2)
nsubj(snapped-11, time-3)
det(cannon-5, the-4)
nsubjpass(fired-7, cannon-5)
auxpass(fired-7, was-6)
acl:relcl(time-3, fired-7)
punct(snapped-11, ,-8)
det(chain-10, the-9)
nsubj(snapped-11, chain-10)
root(ROOT-0, snapped-11)
cc(snapped-11, and-12)
nummod(cannonball-14, one-13)
nsubj(killed-16, cannonball-14)
punct(killed-16, ``-15)
conj:and(snapped-11, killed-16)
det(cow-18, a-17)
dobj(killed-16, cow-18)
case(field-22, in-19)
det(field-22, a-20)
amod(field-22, distant-21)
nmod:in(killed-16, field-22)
punct(snapped-11, ,-23)
mark(knocked-27, while-24)
det(other-26, the-25)
nsubj(knocked-27, other-26)
advcl(snapped-11, knocked-27)
compound:prt(knocked-27, down-28)
det(chimney-30, the-29)
dobj(knocked-27, chimney-30)
case(cabin-34, from-31)
det(cabin-34, a-32)
compound(cabin-34, log-33)
nmod:from(knocked-27, cabin-34)
punct(snapped-11, .-35)
punct(snapped-11, ''-36)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: knock#chimney

knock :: The 18-year-old Las Vegan , the new darling of the net set , took Stadium Court at the U.S. Open tennis tournament here Wednesday morning against Philip Johnson , an unseeded and heretofore unheeded scuffler from Georgia , and , truth to tell , did n't knock him dead ./.
det(Vegan-4, The-1)
amod(Vegan-4, 18-year-old-2)
compound(Vegan-4, Las-3)
nsubj(took-14, Vegan-4)
punct(Vegan-4, ,-5)
det(darling-8, the-6)
amod(darling-8, new-7)
appos(Vegan-4, darling-8)
case(set-12, of-9)
det(set-12, the-10)
amod(set-12, net-11)
nmod:of(darling-8, set-12)
punct(Vegan-4, ,-13)
root(ROOT-0, took-14)
compound(Court-16, Stadium-15)
dobj(took-14, Court-16)
case(tournament-22, at-17)
det(tournament-22, the-18)
compound(tournament-22, U.S.-19)
amod(tournament-22, Open-20)
compound(tournament-22, tennis-21)
nmod:at(took-14, tournament-22)
advmod(took-14, here-23)
compound(morning-25, Wednesday-24)
nmod:tmod(took-14, morning-25)
case(Johnson-28, against-26)
compound(Johnson-28, Philip-27)
nmod:against(took-14, Johnson-28)
punct(Johnson-28, ,-29)
det(scuffler-35, an-30)
amod(scuffler-35, unseeded-31)
cc(unseeded-31, and-32)
advmod(unheeded-34, heretofore-33)
conj:and(unseeded-31, unheeded-34)
amod(scuffler-35, unheeded-34)
appos(Johnson-28, scuffler-35)
case(Georgia-37, from-36)
nmod:from(scuffler-35, Georgia-37)
punct(took-14, ,-38)
cc(took-14, and-39)
punct(took-14, ,-40)
dobj(took-14, truth-41)
mark(tell-43, to-42)
acl(truth-41, tell-43)
punct(took-14, ,-44)
aux(knock-47, did-45)
neg(knock-47, n't-46)
parataxis(took-14, knock-47)
dobj(knock-47, him-48)
xcomp(knock-47, dead-49)
punct(took-14, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#him

knock :: `` It seemed to me an enormously powerful tool if you could knock out a gene responsible for a virus or cancer . ''/''
root(ROOT-0, ``-1)
nsubj(seemed-3, It-2)
root(``-1, seemed-3)
case(me-5, to-4)
nmod:to(seemed-3, me-5)
det(tool-9, an-6)
advmod(powerful-8, enormously-7)
amod(tool-9, powerful-8)
xcomp(seemed-3, tool-9)
mark(knock-13, if-10)
nsubj(knock-13, you-11)
aux(knock-13, could-12)
advcl(tool-9, knock-13)
compound:prt(knock-13, out-14)
det(gene-16, a-15)
dobj(knock-13, gene-16)
amod(gene-16, responsible-17)
case(virus-20, for-18)
det(virus-20, a-19)
nmod:for(responsible-17, virus-20)
cc(virus-20, or-21)
nmod:for(responsible-17, cancer-22)
conj:or(virus-20, cancer-22)
punct(seemed-3, .-23)
punct(seemed-3, ''-24)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: knock#gene

knock :: The concerted intervention succeeded in knocking the dollar down to about 1.8870 marks , but strong demand lifted it off its lows almost immediately ./.
det(intervention-3, The-1)
amod(intervention-3, concerted-2)
nsubj(succeeded-4, intervention-3)
root(ROOT-0, succeeded-4)
mark(knocking-6, in-5)
advcl(succeeded-4, knocking-6)
det(dollar-8, the-7)
dobj(knocking-6, dollar-8)
advmod(knocking-6, down-9)
case(marks-13, to-10)
advmod(1.8870-12, about-11)
nummod(marks-13, 1.8870-12)
nmod:to(down-9, marks-13)
punct(succeeded-4, ,-14)
cc(succeeded-4, but-15)
amod(demand-17, strong-16)
nsubj(lifted-18, demand-17)
conj:but(succeeded-4, lifted-18)
dobj(lifted-18, it-19)
compound:prt(lifted-18, off-20)
nmod:poss(lows-22, its-21)
dobj(lifted-18, lows-22)
advmod(immediately-24, almost-23)
advmod(lifted-18, immediately-24)
punct(succeeded-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#dollar

knock :: `` You think we can knock these things out like hamburgers ?/.
root(ROOT-0, ``-1)
nsubj(think-3, You-2)
root(``-1, think-3)
nsubj(knock-6, we-4)
aux(knock-6, can-5)
ccomp(think-3, knock-6)
det(things-8, these-7)
dobj(knock-6, things-8)
compound:prt(knock-6, out-9)
case(hamburgers-11, like-10)
nmod:like(knock-6, hamburgers-11)
punct(think-3, ?-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#things

knock :: Soon she is not only bringing her wheelchair-bound master snacks , she 's knocking off people he dislikes -- and only too slowly ./.
advmod(bringing-6, Soon-1)
nsubj(bringing-6, she-2)
aux(bringing-6, is-3)
neg(bringing-6, not-4)
advmod(bringing-6, only-5)
advcl(knocking-14, bringing-6)
nmod:poss(snacks-10, her-7)
amod(snacks-10, wheelchair-bound-8)
compound(snacks-10, master-9)
dobj(bringing-6, snacks-10)
punct(knocking-14, ,-11)
nsubj(knocking-14, she-12)
aux(knocking-14, 's-13)
root(ROOT-0, knocking-14)
compound:prt(knocking-14, off-15)
dobj(knocking-14, people-16)
nsubj(dislikes-18, he-17)
acl:relcl(people-16, dislikes-18)
punct(people-16, ---19)
cc(people-16, and-20)
advmod(slowly-23, only-21)
advmod(slowly-23, too-22)
dobj(knocking-14, slowly-23)
conj:and(people-16, slowly-23)
punct(knocking-14, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#people

knock :: And Mr. McGegan , who does n't mince words when he dislikes something or someone -LRB- he called the countertenor in his recent Long Beach production `` awful '' -RRB- , said he was knocked out by Mr. Davies 's strangely articulated yet strikingly clear conducting of Beethoven 's `` Eroica '' Symphony ./.
cc(said-32, And-1)
compound(McGegan-3, Mr.-2)
nsubj(mince-8, McGegan-3)
nsubj(said-32, McGegan-3)
punct(McGegan-3, ,-4)
ref(McGegan-3, who-5)
aux(mince-8, does-6)
neg(mince-8, n't-7)
acl:relcl(McGegan-3, mince-8)
dobj(mince-8, words-9)
advmod(dislikes-12, when-10)
nsubj(dislikes-12, he-11)
advcl(mince-8, dislikes-12)
dobj(dislikes-12, something-13)
cc(something-13, or-14)
dobj(dislikes-12, someone-15)
conj:or(something-13, someone-15)
punct(called-18, -LRB--16)
nsubj(called-18, he-17)
dep(McGegan-3, called-18)
det(countertenor-20, the-19)
dobj(called-18, countertenor-20)
case(production-26, in-21)
nmod:poss(production-26, his-22)
amod(production-26, recent-23)
amod(production-26, Long-24)
compound(production-26, Beach-25)
nmod:in(called-18, production-26)
punct(awful-28, ``-27)
amod(production-26, awful-28)
punct(awful-28, ''-29)
punct(called-18, -RRB--30)
punct(McGegan-3, ,-31)
root(ROOT-0, said-32)
nsubjpass(knocked-35, he-33)
auxpass(knocked-35, was-34)
ccomp(said-32, knocked-35)
compound:prt(knocked-35, out-36)
case(conducting-46, by-37)
compound(Davies-39, Mr.-38)
nmod:poss(conducting-46, Davies-39)
case(Davies-39, 's-40)
advmod(articulated-42, strangely-41)
amod(conducting-46, articulated-42)
advmod(clear-45, yet-43)
advmod(clear-45, strikingly-44)
amod(conducting-46, clear-45)
nmod:agent(knocked-35, conducting-46)
case(Symphony-53, of-47)
nmod:poss(Symphony-53, Beethoven-48)
case(Beethoven-48, 's-49)
punct(Symphony-53, ``-50)
compound(Symphony-53, Eroica-51)
punct(Symphony-53, ''-52)
nmod:of(conducting-46, Symphony-53)
punct(said-32, .-54)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#he

knock :: GOP strategists acknowledge that there are few incumbents they would rather knock off this election year ./.
compound(strategists-2, GOP-1)
nsubj(acknowledge-3, strategists-2)
root(ROOT-0, acknowledge-3)
mark(are-6, that-4)
expl(are-6, there-5)
ccomp(acknowledge-3, are-6)
amod(incumbents-8, few-7)
nsubj(are-6, incumbents-8)
nsubj(knock-12, they-9)
aux(knock-12, would-10)
advmod(knock-12, rather-11)
acl:relcl(incumbents-8, knock-12)
compound:prt(knock-12, off-13)
det(year-16, this-14)
compound(year-16, election-15)
nmod:tmod(knock-12, year-16)
punct(acknowledge-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#they

knock :: An earthquake that shook Los Angeles in October knocked out computer equipment at California Federal Savings and Loan Association ./.
det(earthquake-2, An-1)
nsubj(shook-4, earthquake-2)
nsubj(knocked-9, earthquake-2)
ref(earthquake-2, that-3)
acl:relcl(earthquake-2, shook-4)
compound(Angeles-6, Los-5)
dobj(shook-4, Angeles-6)
case(October-8, in-7)
nmod:in(shook-4, October-8)
root(ROOT-0, knocked-9)
compound:prt(knocked-9, out-10)
compound(equipment-12, computer-11)
dobj(knocked-9, equipment-12)
case(Savings-16, at-13)
compound(Savings-16, California-14)
compound(Savings-16, Federal-15)
nmod:at(knocked-9, Savings-16)
cc(Savings-16, and-17)
compound(Association-19, Loan-18)
nmod:at(knocked-9, Association-19)
conj:and(Savings-16, Association-19)
punct(knocked-9, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#equipment

knock :: The low point was around 1978-1982 , when the bases could have been knocked out quite easily ./.
det(point-3, The-1)
amod(point-3, low-2)
nsubj(1978-1982-6, point-3)
cop(1978-1982-6, was-4)
case(1978-1982-6, around-5)
root(ROOT-0, 1978-1982-6)
punct(1978-1982-6, ,-7)
advmod(knocked-14, when-8)
det(bases-10, the-9)
nsubjpass(knocked-14, bases-10)
aux(knocked-14, could-11)
aux(knocked-14, have-12)
auxpass(knocked-14, been-13)
acl:relcl(1978-1982-6, knocked-14)
compound:prt(knocked-14, out-15)
advmod(easily-17, quite-16)
advmod(knocked-14, easily-17)
punct(1978-1982-6, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#bases

knock :: `` It will be very difficult for the Japanese to come in on an assault basis and knock them out of the box . ''/''
root(ROOT-0, ``-1)
nsubj(difficult-6, It-2)
aux(difficult-6, will-3)
cop(difficult-6, be-4)
advmod(difficult-6, very-5)
root(``-1, difficult-6)
mark(come-11, for-7)
det(Japanese-9, the-8)
nsubj(come-11, Japanese-9)
nsubj(knock-18, Japanese-9)
mark(come-11, to-10)
advcl(difficult-6, come-11)
compound:prt(come-11, in-12)
case(basis-16, on-13)
det(basis-16, an-14)
compound(basis-16, assault-15)
nmod:on(come-11, basis-16)
cc(come-11, and-17)
advcl(difficult-6, knock-18)
conj:and(come-11, knock-18)
dobj(knock-18, them-19)
case(box-23, out-20)
mwe(out-20, of-21)
det(box-23, the-22)
nmod:out_of(knock-18, box-23)
punct(difficult-6, .-24)
punct(difficult-6, ''-25)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: knock#them

knock :: DEAN WITTER: `` I 'm not looking to knock the cover off the ball , '' says Manny Korman , Dean Witter Reynolds Inc. 's research director , `` because I 'm unwilling to accept the risk that would entail . ''/''
compound(WITTER-2, DEAN-1)
nsubj(says-18, WITTER-2)
punct(WITTER-2, :-3)
punct(WITTER-2, ``-4)
nsubj(looking-8, I-5)
nsubj:xsubj(knock-10, I-5)
aux(looking-8, 'm-6)
neg(looking-8, not-7)
dep(WITTER-2, looking-8)
mark(knock-10, to-9)
xcomp(looking-8, knock-10)
det(cover-12, the-11)
dobj(knock-10, cover-12)
case(ball-15, off-13)
det(ball-15, the-14)
nmod:off(knock-10, ball-15)
punct(WITTER-2, ,-16)
punct(WITTER-2, ''-17)
root(ROOT-0, says-18)
compound(Korman-20, Manny-19)
nsubj(says-18, Korman-20)
punct(Korman-20, ,-21)
compound(Inc.-25, Dean-22)
compound(Inc.-25, Witter-23)
compound(Inc.-25, Reynolds-24)
nmod:poss(director-28, Inc.-25)
case(Inc.-25, 's-26)
compound(director-28, research-27)
appos(Korman-20, director-28)
punct(Korman-20, ,-29)
punct(Korman-20, ``-30)
mark(unwilling-34, because-31)
nsubj(unwilling-34, I-32)
nsubj:xsubj(accept-36, I-32)
cop(unwilling-34, 'm-33)
root(``-30, unwilling-34)
mark(accept-36, to-35)
xcomp(unwilling-34, accept-36)
det(risk-38, the-37)
dobj(accept-36, risk-38)
nsubj(entail-41, risk-38)
ref(risk-38, that-39)
aux(entail-41, would-40)
acl:relcl(risk-38, entail-41)
punct(unwilling-34, .-42)
punct(unwilling-34, ''-43)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: knock#cover

knock :: `` I do n't think anyone liked the Nissan campaign , but they went out of their way not to knock it , '' says Eli Bloom , the New York GM dealer who sits on the selection committee . -LRB- Mr ./.
punct(says-25, ``-1)
nsubj(think-5, I-2)
aux(think-5, do-3)
neg(think-5, n't-4)
ccomp(says-25, think-5)
nsubj(liked-7, anyone-6)
ccomp(think-5, liked-7)
det(campaign-10, the-8)
compound(campaign-10, Nissan-9)
dobj(liked-7, campaign-10)
punct(think-5, ,-11)
cc(think-5, but-12)
nsubj(went-14, they-13)
nsubj:xsubj(knock-21, they-13)
conj:but(think-5, went-14)
ccomp(says-25, went-14)
case(way-18, out-15)
mwe(out-15, of-16)
nmod:poss(way-18, their-17)
nmod:out_of(went-14, way-18)
neg(knock-21, not-19)
mark(knock-21, to-20)
xcomp(went-14, knock-21)
dobj(knock-21, it-22)
punct(says-25, ,-23)
punct(says-25, ''-24)
root(ROOT-0, says-25)
compound(Bloom-27, Eli-26)
nsubj(says-25, Bloom-27)
punct(Bloom-27, ,-28)
det(dealer-33, the-29)
compound(dealer-33, New-30)
compound(dealer-33, York-31)
compound(dealer-33, GM-32)
appos(Bloom-27, dealer-33)
nsubj(sits-35, dealer-33)
ref(dealer-33, who-34)
acl:relcl(dealer-33, sits-35)
case(committee-39, on-36)
det(committee-39, the-37)
compound(committee-39, selection-38)
nmod:on(sits-35, committee-39)
punct(says-25, .-40)
punct(Mr-2, -LRB--1)
root(ROOT-0, Mr-2)
punct(Mr-2, .-3)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#it

knock :: As compressed water rushes through its gills , a fish is knocked unconscious ./.
mark(rushes-4, As-1)
amod(water-3, compressed-2)
nsubj(rushes-4, water-3)
advcl(knocked-12, rushes-4)
case(gills-7, through-5)
nmod:poss(gills-7, its-6)
nmod:through(rushes-4, gills-7)
punct(knocked-12, ,-8)
det(fish-10, a-9)
nsubjpass(knocked-12, fish-10)
auxpass(knocked-12, is-11)
root(ROOT-0, knocked-12)
xcomp(knocked-12, unconscious-13)
punct(knocked-12, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#fish

knock :: But , if lucky , a shooter with one blast can knock out the female and a half-dozen males tagging along ./.
cc(knock-12, But-1)
punct(knock-12, ,-2)
mark(lucky-4, if-3)
advcl(knock-12, lucky-4)
punct(knock-12, ,-5)
det(shooter-7, a-6)
nsubj(knock-12, shooter-7)
case(blast-10, with-8)
nummod(blast-10, one-9)
nmod:with(shooter-7, blast-10)
aux(knock-12, can-11)
root(ROOT-0, knock-12)
compound:prt(knock-12, out-13)
det(female-15, the-14)
nsubj(tagging-20, female-15)
cc(female-15, and-16)
det(males-19, a-17)
amod(males-19, half-dozen-18)
conj:and(female-15, males-19)
nsubj(tagging-20, males-19)
dep(knock-12, tagging-20)
advmod(tagging-20, along-21)
punct(knock-12, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#shooter

knock :: It razed the Sirri and Sasson platforms in the southern gulf , knocking out the command and control radar facilities of the Iranian military that come to bear on the Hormuz Strait choke point ./.
nsubj(razed-2, It-1)
root(ROOT-0, razed-2)
det(platforms-7, the-3)
compound(platforms-7, Sirri-4)
cc(Sirri-4, and-5)
conj:and(Sirri-4, Sasson-6)
compound(platforms-7, Sasson-6)
dobj(razed-2, platforms-7)
case(gulf-11, in-8)
det(gulf-11, the-9)
amod(gulf-11, southern-10)
nmod:in(razed-2, gulf-11)
punct(razed-2, ,-12)
advcl(razed-2, knocking-13)
compound:prt(knocking-13, out-14)
det(command-16, the-15)
dobj(knocking-13, command-16)
cc(command-16, and-17)
compound(facilities-20, control-18)
compound(facilities-20, radar-19)
dobj(knocking-13, facilities-20)
conj:and(command-16, facilities-20)
case(military-24, of-21)
det(military-24, the-22)
amod(military-24, Iranian-23)
nmod:of(command-16, military-24)
nsubj(come-26, military-24)
nsubj:xsubj(bear-28, military-24)
ref(military-24, that-25)
acl:relcl(military-24, come-26)
mark(bear-28, to-27)
xcomp(come-26, bear-28)
case(point-34, on-29)
det(point-34, the-30)
compound(point-34, Hormuz-31)
compound(point-34, Strait-32)
compound(point-34, choke-33)
nmod:on(bear-28, point-34)
punct(razed-2, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#military

knock :: I knocked at the bedroom door , and Father said the security company had just called to say there were certain `` irregularities '' that prevented them from keeping a watch over our store ./.
nsubj(knocked-2, I-1)
root(ROOT-0, knocked-2)
case(door-6, at-3)
det(door-6, the-4)
compound(door-6, bedroom-5)
nmod:at(knocked-2, door-6)
punct(knocked-2, ,-7)
cc(knocked-2, and-8)
nsubj(said-10, Father-9)
conj:and(knocked-2, said-10)
det(company-13, the-11)
compound(company-13, security-12)
nsubjpass(called-16, company-13)
nsubj:xsubj(say-18, company-13)
aux(called-16, had-14)
advmod(called-16, just-15)
ccomp(said-10, called-16)
mark(say-18, to-17)
xcomp(called-16, say-18)
expl(were-20, there-19)
ccomp(say-18, were-20)
amod(irregularities-23, certain-21)
punct(irregularities-23, ``-22)
nsubj(were-20, irregularities-23)
nsubj(prevented-26, irregularities-23)
punct(irregularities-23, ''-24)
ref(irregularities-23, that-25)
acl:relcl(irregularities-23, prevented-26)
dobj(prevented-26, them-27)
mark(keeping-29, from-28)
advcl(prevented-26, keeping-29)
det(watch-31, a-30)
dobj(keeping-29, watch-31)
case(store-34, over-32)
nmod:poss(store-34, our-33)
nmod:over(watch-31, store-34)
punct(knocked-2, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#i

knock :: At the time , his feeling was that `` even with the tax changes knocking out a lot of IRA money . .. the industry is expected to thrive and become more competitive over the next few years . ''/''
case(time-3, At-1)
det(time-3, the-2)
nmod:at(was-7, time-3)
punct(was-7, ,-4)
nmod:poss(feeling-6, his-5)
nsubj(was-7, feeling-6)
root(ROOT-0, was-7)
dep(was-7, that-8)
root(that-8, ``-9)
advmod(knocking-15, even-10)
mark(knocking-15, with-11)
det(changes-14, the-12)
compound(changes-14, tax-13)
nsubj(knocking-15, changes-14)
root(``-9, knocking-15)
compound:prt(knocking-15, out-16)
det(lot-18, a-17)
dobj(knocking-15, lot-18)
case(money-21, of-19)
compound(money-21, IRA-20)
nmod:of(lot-18, money-21)
punct(knocking-15, .-22)
punct(knocking-15, .-23)
punct(knocking-15, .-24)
det(industry-2, the-1)
nsubjpass(expected-4, industry-2)
nsubj:xsubj(thrive-6, industry-2)
auxpass(expected-4, is-3)
root(ROOT-0, expected-4)
mark(thrive-6, to-5)
xcomp(expected-4, thrive-6)
cc(thrive-6, and-7)
xcomp(expected-4, become-8)
conj:and(thrive-6, become-8)
advmod(competitive-10, more-9)
xcomp(become-8, competitive-10)
case(years-15, over-11)
det(years-15, the-12)
amod(years-15, next-13)
amod(years-15, few-14)
nmod:over(thrive-6, years-15)
punct(expected-4, .-16)
punct(expected-4, ''-17)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: knock#money

knock :: News of Mr. Bilzerian 's filing , under the Hart-Scott-Rodino Antitrust Act , knocked FlightSafety 's stock up $ 2.25 a share yesterday to close at $ 26.75 in New York Stock Exchange composite trading ./.
nsubj(knocked-14, News-1)
case(filing-6, of-2)
compound(Bilzerian-4, Mr.-3)
nmod:poss(filing-6, Bilzerian-4)
case(Bilzerian-4, 's-5)
nmod:of(News-1, filing-6)
punct(knocked-14, ,-7)
case(Act-12, under-8)
det(Act-12, the-9)
compound(Act-12, Hart-Scott-Rodino-10)
compound(Act-12, Antitrust-11)
nmod:under(knocked-14, Act-12)
punct(knocked-14, ,-13)
root(ROOT-0, knocked-14)
nmod:poss(stock-17, FlightSafety-15)
case(FlightSafety-15, 's-16)
dobj(knocked-14, stock-17)
nsubj:xsubj(close-25, stock-17)
advmod(knocked-14, up-18)
dep(2.25-20, $-19)
nmod:npmod(up-18, 2.25-20)
det(share-22, a-21)
nmod:npmod(2.25-20, share-22)
nmod:tmod(knocked-14, yesterday-23)
mark(close-25, to-24)
xcomp(knocked-14, close-25)
case(26.75-28, at-26)
dep(26.75-28, $-27)
nmod:at(close-25, 26.75-28)
case(trading-35, in-29)
compound(trading-35, New-30)
compound(trading-35, York-31)
compound(trading-35, Stock-32)
compound(trading-35, Exchange-33)
amod(trading-35, composite-34)
nmod:in(close-25, trading-35)
punct(knocked-14, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#stock

knock :: In northern Botswana , where the poor quality of their ivory protects elephants from poachers , the elephant population is out of control and has eaten and knocked down many square miles of scrubby forest ./.
case(Botswana-3, In-1)
amod(Botswana-3, northern-2)
nmod:in(control-23, Botswana-3)
punct(Botswana-3, ,-4)
advmod(protects-12, where-5)
det(quality-8, the-6)
amod(quality-8, poor-7)
nsubj(protects-12, quality-8)
case(ivory-11, of-9)
nmod:poss(ivory-11, their-10)
nmod:of(quality-8, ivory-11)
acl:relcl(Botswana-3, protects-12)
dobj(protects-12, elephants-13)
case(poachers-15, from-14)
nmod:from(protects-12, poachers-15)
punct(control-23, ,-16)
det(population-19, the-17)
compound(population-19, elephant-18)
nsubj(control-23, population-19)
nsubj(eaten-26, population-19)
cop(control-23, is-20)
case(control-23, out-21)
mwe(out-21, of-22)
root(ROOT-0, control-23)
cc(control-23, and-24)
aux(eaten-26, has-25)
conj:and(control-23, eaten-26)
cc(eaten-26, and-27)
conj:and(control-23, knocked-28)
conj:and(eaten-26, knocked-28)
case(miles-32, down-29)
amod(miles-32, many-30)
amod(miles-32, square-31)
nmod:down(knocked-28, miles-32)
case(forest-35, of-33)
compound(forest-35, scrubby-34)
nmod:of(miles-32, forest-35)
punct(control-23, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#miles

knock :: Another trader almost had his glasses knocked off in the jostling ./.
det(trader-2, Another-1)
nsubj(had-4, trader-2)
advmod(had-4, almost-3)
root(ROOT-0, had-4)
nmod:poss(glasses-6, his-5)
nsubj(knocked-7, glasses-6)
ccomp(had-4, knocked-7)
compound:prt(knocked-7, off-8)
case(jostling-11, in-9)
det(jostling-11, the-10)
nmod:in(knocked-7, jostling-11)
punct(had-4, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#glasses

knock :: The way to topple Gen. Noriega economically was to knock him completely off balance with a sanctions blitz that would have made the Panamanian economy scream -LRB- as the Nixon administration tried to do to Salvador Allende 's Chile -RRB- ./.
det(way-2, The-1)
nsubj(was-8, way-2)
nsubj:xsubj(knock-10, way-2)
mark(topple-4, to-3)
acl(way-2, topple-4)
compound(Noriega-6, Gen.-5)
dobj(topple-4, Noriega-6)
advmod(was-8, economically-7)
root(ROOT-0, was-8)
mark(knock-10, to-9)
xcomp(was-8, knock-10)
dobj(knock-10, him-11)
advmod(knock-10, completely-12)
case(balance-14, off-13)
nmod:off(knock-10, balance-14)
case(blitz-18, with-15)
det(blitz-18, a-16)
compound(blitz-18, sanctions-17)
nmod:with(balance-14, blitz-18)
nsubj(made-22, blitz-18)
ref(blitz-18, that-19)
aux(made-22, would-20)
aux(made-22, have-21)
acl:relcl(blitz-18, made-22)
det(economy-25, the-23)
amod(economy-25, Panamanian-24)
nsubj(scream-26, economy-25)
xcomp(made-22, scream-26)
punct(tried-32, -LRB--27)
mark(tried-32, as-28)
det(administration-31, the-29)
compound(administration-31, Nixon-30)
nsubj(tried-32, administration-31)
nsubj:xsubj(do-34, administration-31)
dep(scream-26, tried-32)
mark(do-34, to-33)
xcomp(tried-32, do-34)
case(Chile-39, to-35)
compound(Allende-37, Salvador-36)
nmod:poss(Chile-39, Allende-37)
case(Allende-37, 's-38)
nmod:to(do-34, Chile-39)
punct(tried-32, -RRB--40)
punct(was-8, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#him

knock :: -- Last September , 22-year-old Kimberly Isaac of Baton Rouge , La . , was badly scraped over a large part of her body when a 1977 LTD she had just parked in a grocery-store lot backed up , knocking her over and dragging her in circles ./.
root(ROOT-0, ---1)
amod(September-3, Last-2)
root(---1, September-3)
punct(September-3, ,-4)
amod(Isaac-7, 22-year-old-5)
compound(Isaac-7, Kimberly-6)
root(,-4, Isaac-7)
case(Rouge-10, of-8)
compound(Rouge-10, Baton-9)
nmod:of(Isaac-7, Rouge-10)
punct(Rouge-10, ,-11)
appos(Rouge-10, La-12)
punct(Isaac-7, .-13)
punct(scraped-4, ,-1)
auxpass(scraped-4, was-2)
advmod(scraped-4, badly-3)
root(ROOT-0, scraped-4)
case(part-8, over-5)
det(part-8, a-6)
amod(part-8, large-7)
nmod:over(scraped-4, part-8)
case(body-11, of-9)
nmod:poss(body-11, her-10)
nmod:of(part-8, body-11)
advmod(knocking-27, when-12)
det(LTD-15, a-13)
nummod(LTD-15, 1977-14)
nsubj(knocking-27, LTD-15)
nsubj(dragging-31, LTD-15)
nsubj(parked-19, she-16)
aux(parked-19, had-17)
advmod(parked-19, just-18)
acl:relcl(LTD-15, parked-19)
case(lot-23, in-20)
det(lot-23, a-21)
amod(lot-23, grocery-store-22)
nmod:in(parked-19, lot-23)
acl(lot-23, backed-24)
compound:prt(backed-24, up-25)
punct(LTD-15, ,-26)
advcl(scraped-4, knocking-27)
dobj(knocking-27, her-28)
compound:prt(knocking-27, over-29)
cc(knocking-27, and-30)
advcl(scraped-4, dragging-31)
conj:and(knocking-27, dragging-31)
dobj(dragging-31, her-32)
case(circles-34, in-33)
nmod:in(dragging-31, circles-34)
punct(scraped-4, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#her

knock :: Cale Yarborough 's car spun out of control on the first turn , '' knocking out nine other vehicles ./.
compound(Yarborough-2, Cale-1)
nmod:poss(car-4, Yarborough-2)
case(Yarborough-2, 's-3)
nsubj(spun-5, car-4)
root(ROOT-0, spun-5)
case(control-8, out-6)
mwe(out-6, of-7)
nmod:out_of(spun-5, control-8)
case(turn-12, on-9)
det(turn-12, the-10)
amod(turn-12, first-11)
nmod:on(spun-5, turn-12)
punct(spun-5, ,-13)
punct(spun-5, ''-14)
xcomp(spun-5, knocking-15)
compound:prt(knocking-15, out-16)
nummod(vehicles-19, nine-17)
amod(vehicles-19, other-18)
dobj(knocking-15, vehicles-19)
punct(spun-5, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#vehicles

knock :: Where Chekhov has Lopakhin knocking over a small table , Mr. Dennehy goes crashing into a big , folding screen that 's standing in for a wall ./.
advmod(has-3, Where-1)
nsubj(has-3, Chekhov-2)
advcl(goes-13, has-3)
nsubj(knocking-5, Lopakhin-4)
ccomp(has-3, knocking-5)
case(table-9, over-6)
det(table-9, a-7)
amod(table-9, small-8)
nmod:over(knocking-5, table-9)
punct(goes-13, ,-10)
compound(Dennehy-12, Mr.-11)
nsubj(goes-13, Dennehy-12)
root(ROOT-0, goes-13)
xcomp(goes-13, crashing-14)
case(screen-20, into-15)
det(screen-20, a-16)
amod(screen-20, big-17)
punct(screen-20, ,-18)
amod(screen-20, folding-19)
nmod:into(crashing-14, screen-20)
nsubj(standing-23, screen-20)
ref(screen-20, that-21)
cop(standing-23, 's-22)
acl:relcl(screen-20, standing-23)
case(wall-27, in-24)
case(wall-27, for-25)
det(wall-27, a-26)
nmod:for(standing-23, wall-27)
punct(goes-13, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#lopakhin

knock :: Earl , a cat with the stuffing knocked out of it -LRB- ostensibly by a car -RRB- , comes with a death certificate ./.
nsubj(comes-19, Earl-1)
punct(Earl-1, ,-2)
det(cat-4, a-3)
appos(Earl-1, cat-4)
case(stuffing-7, with-5)
det(stuffing-7, the-6)
nmod:with(cat-4, stuffing-7)
acl(stuffing-7, knocked-8)
case(it-11, out-9)
mwe(out-9, of-10)
nmod:out_of(knocked-8, it-11)
punct(ostensibly-13, -LRB--12)
dep(knocked-8, ostensibly-13)
case(car-16, by-14)
det(car-16, a-15)
nmod:by(ostensibly-13, car-16)
punct(ostensibly-13, -RRB--17)
punct(Earl-1, ,-18)
root(ROOT-0, comes-19)
case(certificate-23, with-20)
det(certificate-23, a-21)
compound(certificate-23, death-22)
nmod:with(comes-19, certificate-23)
punct(comes-19, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#it

knock :: -- Last September , 22-year-old Kimberly Isaac of Baton Rouge , La . , was badly scraped over a large part of her body when a 1977 LTD she had just parked in a grocery-store lot backed up , knocking her over and dragging her in circles ./.
root(ROOT-0, ---1)
amod(September-3, Last-2)
root(---1, September-3)
punct(September-3, ,-4)
amod(Isaac-7, 22-year-old-5)
compound(Isaac-7, Kimberly-6)
root(,-4, Isaac-7)
case(Rouge-10, of-8)
compound(Rouge-10, Baton-9)
nmod:of(Isaac-7, Rouge-10)
punct(Rouge-10, ,-11)
appos(Rouge-10, La-12)
punct(Isaac-7, .-13)
punct(scraped-4, ,-1)
auxpass(scraped-4, was-2)
advmod(scraped-4, badly-3)
root(ROOT-0, scraped-4)
case(part-8, over-5)
det(part-8, a-6)
amod(part-8, large-7)
nmod:over(scraped-4, part-8)
case(body-11, of-9)
nmod:poss(body-11, her-10)
nmod:of(part-8, body-11)
advmod(knocking-27, when-12)
det(LTD-15, a-13)
nummod(LTD-15, 1977-14)
nsubj(knocking-27, LTD-15)
nsubj(dragging-31, LTD-15)
nsubj(parked-19, she-16)
aux(parked-19, had-17)
advmod(parked-19, just-18)
acl:relcl(LTD-15, parked-19)
case(lot-23, in-20)
det(lot-23, a-21)
amod(lot-23, grocery-store-22)
nmod:in(parked-19, lot-23)
acl(lot-23, backed-24)
compound:prt(backed-24, up-25)
punct(LTD-15, ,-26)
advcl(scraped-4, knocking-27)
dobj(knocking-27, her-28)
compound:prt(knocking-27, over-29)
cc(knocking-27, and-30)
advcl(scraped-4, dragging-31)
conj:and(knocking-27, dragging-31)
dobj(dragging-31, her-32)
case(circles-34, in-33)
nmod:in(dragging-31, circles-34)
punct(scraped-4, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#her

knock :: At Lloyds , for example , additions to loan-loss provisions knocked the key equity-to-assets ratio down to 4.4 % at midyear from 5.8 % at the start of 1987 ./.
case(Lloyds-2, At-1)
nmod:at(knocked-11, Lloyds-2)
punct(knocked-11, ,-3)
case(example-5, for-4)
nmod:for(knocked-11, example-5)
punct(knocked-11, ,-6)
nsubj(knocked-11, additions-7)
case(provisions-10, to-8)
amod(provisions-10, loan-loss-9)
nmod:to(additions-7, provisions-10)
root(ROOT-0, knocked-11)
det(ratio-15, the-12)
amod(ratio-15, key-13)
compound(ratio-15, equity-to-assets-14)
dobj(knocked-11, ratio-15)
case(%-19, down-16)
case(%-19, to-17)
nummod(%-19, 4.4-18)
nmod:to(knocked-11, %-19)
case(midyear-21, at-20)
nmod:at(knocked-11, midyear-21)
case(%-24, from-22)
nummod(%-24, 5.8-23)
nmod:from(knocked-11, %-24)
case(start-27, at-25)
det(start-27, the-26)
nmod:at(%-24, start-27)
case(1987-29, of-28)
nmod:of(start-27, 1987-29)
punct(knocked-11, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#ratio

knock :: I confess I fear word will get out that `` the man in the green house is a soft touch '' -- and that I will soon have several `` Clints '' knocking on my door ./.
nsubj(confess-2, I-1)
root(ROOT-0, confess-2)
nsubj(fear-4, I-3)
ccomp(confess-2, fear-4)
nsubj(get-7, word-5)
aux(get-7, will-6)
ccomp(fear-4, get-7)
compound:prt(get-7, out-8)
mark(touch-20, that-9)
punct(touch-20, ``-10)
det(man-12, the-11)
nsubj(touch-20, man-12)
case(house-16, in-13)
det(house-16, the-14)
compound(house-16, green-15)
nmod:in(man-12, house-16)
cop(touch-20, is-17)
det(touch-20, a-18)
amod(touch-20, soft-19)
ccomp(get-7, touch-20)
punct(touch-20, ''-21)
punct(touch-20, ---22)
cc(touch-20, and-23)
mark(have-28, that-24)
nsubj(have-28, I-25)
aux(have-28, will-26)
advmod(have-28, soon-27)
ccomp(get-7, have-28)
conj:and(touch-20, have-28)
amod(Clints-31, several-29)
punct(Clints-31, ``-30)
dobj(have-28, Clints-31)
punct(Clints-31, ''-32)
acl(Clints-31, knocking-33)
case(door-36, on-34)
nmod:poss(door-36, my-35)
nmod:on(knocking-33, door-36)
punct(confess-2, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#door

knock :: According to the presidential task force 's report , some of the stock market 's worst drops on Oct. 19 came after program trading was effectively knocked out of commission by a huge order backlog ./.
case(report-8, According-1)
mwe(According-1, to-2)
det(force-6, the-3)
amod(force-6, presidential-4)
compound(force-6, task-5)
nmod:poss(report-8, force-6)
case(force-6, 's-7)
nmod:according_to(came-21, report-8)
punct(came-21, ,-9)
nsubj(came-21, some-10)
case(drops-17, of-11)
det(market-14, the-12)
compound(market-14, stock-13)
nmod:poss(drops-17, market-14)
case(market-14, 's-15)
amod(drops-17, worst-16)
nmod:of(some-10, drops-17)
case(Oct.-19, on-18)
nmod:on(drops-17, Oct.-19)
nummod(Oct.-19, 19-20)
root(ROOT-0, came-21)
mark(knocked-27, after-22)
compound(trading-24, program-23)
nsubjpass(knocked-27, trading-24)
auxpass(knocked-27, was-25)
advmod(knocked-27, effectively-26)
advcl(came-21, knocked-27)
case(commission-30, out-28)
mwe(out-28, of-29)
nmod:out_of(knocked-27, commission-30)
case(backlog-35, by-31)
det(backlog-35, a-32)
amod(backlog-35, huge-33)
compound(backlog-35, order-34)
nmod:agent(knocked-27, backlog-35)
punct(came-21, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#trading

knock :: The curator who answered our loud knocking was so happy to have two Americans visit she opened up the entire museum for us ./.
det(curator-2, The-1)
nsubj(answered-4, curator-2)
nsubj(happy-10, curator-2)
nsubj:xsubj(have-12, curator-2)
ref(curator-2, who-3)
acl:relcl(curator-2, answered-4)
nmod:poss(knocking-7, our-5)
amod(knocking-7, loud-6)
dobj(answered-4, knocking-7)
cop(happy-10, was-8)
advmod(happy-10, so-9)
root(ROOT-0, happy-10)
mark(have-12, to-11)
xcomp(happy-10, have-12)
nummod(Americans-14, two-13)
nsubj(visit-15, Americans-14)
ccomp(have-12, visit-15)
nsubj(opened-17, she-16)
ccomp(visit-15, opened-17)
compound:prt(opened-17, up-18)
det(museum-21, the-19)
amod(museum-21, entire-20)
dobj(opened-17, museum-21)
case(us-23, for-22)
nmod:for(museum-21, us-23)
punct(happy-10, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#our

knock :: The hug knocked off Spinks 's hat , a broad-brimmed , white number ./.
det(hug-2, The-1)
nsubj(knocked-3, hug-2)
root(ROOT-0, knocked-3)
compound:prt(knocked-3, off-4)
nmod:poss(hat-7, Spinks-5)
case(Spinks-5, 's-6)
dobj(knocked-3, hat-7)
punct(hat-7, ,-8)
det(number-13, a-9)
amod(number-13, broad-brimmed-10)
punct(number-13, ,-11)
amod(number-13, white-12)
appos(hat-7, number-13)
punct(knocked-3, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#hat

knock :: Rhinos wearing tutus daintily knock workmen aside ./.
nsubj(knock-5, Rhinos-1)
acl(Rhinos-1, wearing-2)
dobj(wearing-2, tutus-3)
advmod(knock-5, daintily-4)
root(ROOT-0, knock-5)
dobj(knock-5, workmen-6)
advmod(knock-5, aside-7)
punct(knock-5, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#workmen

knock :: `` It knocked me off my chair , '' says Mr. Bodner , a partner in Howrey & Simon , a Washington firm ./.
punct(says-10, ``-1)
nsubj(knocked-3, It-2)
ccomp(says-10, knocked-3)
dobj(knocked-3, me-4)
compound:prt(knocked-3, off-5)
nmod:poss(chair-7, my-6)
dobj(knocked-3, chair-7)
punct(says-10, ,-8)
punct(says-10, ''-9)
root(ROOT-0, says-10)
compound(Bodner-12, Mr.-11)
nsubj(says-10, Bodner-12)
punct(Bodner-12, ,-13)
det(partner-15, a-14)
appos(Bodner-12, partner-15)
case(Howrey-17, in-16)
nmod:in(partner-15, Howrey-17)
cc(Howrey-17, &-18)
nmod:in(partner-15, Simon-19)
conj:&(Howrey-17, Simon-19)
punct(Howrey-17, ,-20)
det(firm-23, a-21)
compound(firm-23, Washington-22)
appos(Howrey-17, firm-23)
punct(says-10, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#me

knock :: Once , he said , the page turner at a professional concert knocked over the whole score , causing a crescendo where none was intended ./.
root(ROOT-0, Once-1)
punct(said-4, ,-2)
nsubj(said-4, he-3)
dep(Once-1, said-4)
punct(said-4, ,-5)
det(turner-8, the-6)
compound(turner-8, page-7)
dep(said-4, turner-8)
case(concert-12, at-9)
det(concert-12, a-10)
amod(concert-12, professional-11)
nmod:at(turner-8, concert-12)
acl(concert-12, knocked-13)
case(score-17, over-14)
det(score-17, the-15)
amod(score-17, whole-16)
nmod:over(knocked-13, score-17)
punct(turner-8, ,-18)
acl(turner-8, causing-19)
det(crescendo-21, a-20)
dobj(causing-19, crescendo-21)
advmod(intended-25, where-22)
nsubjpass(intended-25, none-23)
auxpass(intended-25, was-24)
acl:relcl(crescendo-21, intended-25)
punct(Once-1, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: knock#score

lend :: It is to correct for such gaps in market operations -LRB- or `` externalities , '' as economists call them -RRB- that governments have a responsibility to step in and lend a helping hand ./.
nsubj(is-2, It-1)
nsubj:xsubj(correct-4, It-1)
root(ROOT-0, is-2)
mark(correct-4, to-3)
xcomp(is-2, correct-4)
case(gaps-7, for-5)
amod(gaps-7, such-6)
nmod:for(correct-4, gaps-7)
mark(have-24, gaps-7)
case(operations-10, in-8)
compound(operations-10, market-9)
nmod:in(gaps-7, operations-10)
punct(externalities-14, -LRB--11)
cc(externalities-14, or-12)
punct(externalities-14, ``-13)
dep(operations-10, externalities-14)
punct(externalities-14, ,-15)
punct(externalities-14, ''-16)
mark(call-19, as-17)
nsubj(call-19, economists-18)
advcl(externalities-14, call-19)
dobj(call-19, them-20)
punct(externalities-14, -RRB--21)
ref(gaps-7, that-22)
nsubj(have-24, governments-23)
acl:relcl(gaps-7, have-24)
det(responsibility-26, a-25)
dobj(have-24, responsibility-26)
mark(step-28, to-27)
acl(responsibility-26, step-28)
advmod(step-28, in-29)
cc(step-28, and-30)
acl(responsibility-26, lend-31)
conj:and(step-28, lend-31)
det(hand-34, a-32)
amod(hand-34, helping-33)
dobj(lend-31, hand-34)
punct(is-2, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#hand

lend :: Capital is no problem ; banks and insurance companies are eager to lend money to potential buyers ./.
nsubj(problem-4, Capital-1)
cop(problem-4, is-2)
neg(problem-4, no-3)
root(ROOT-0, problem-4)
punct(problem-4, ;-5)
nsubj(eager-11, banks-6)
nsubj:xsubj(lend-13, banks-6)
cc(banks-6, and-7)
compound(companies-9, insurance-8)
conj:and(banks-6, companies-9)
nsubj(eager-11, companies-9)
nsubj:xsubj(lend-13, companies-9)
cop(eager-11, are-10)
parataxis(problem-4, eager-11)
mark(lend-13, to-12)
xcomp(eager-11, lend-13)
dobj(lend-13, money-14)
case(buyers-17, to-15)
amod(buyers-17, potential-16)
nmod:to(lend-13, buyers-17)
punct(problem-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: The agreement also helps avoid bickering between Texaco and its independent-minded unit , which pledged to lend its vital aid in the sale ./.
det(agreement-2, The-1)
nsubj(helps-4, agreement-2)
advmod(helps-4, also-3)
root(ROOT-0, helps-4)
ccomp(helps-4, avoid-5)
xcomp(avoid-5, bickering-6)
case(Texaco-8, between-7)
nmod:between(bickering-6, Texaco-8)
cc(Texaco-8, and-9)
nmod:poss(unit-12, its-10)
amod(unit-12, independent-minded-11)
nmod:between(bickering-6, unit-12)
conj:and(Texaco-8, unit-12)
nsubj(pledged-15, unit-12)
nsubj:xsubj(lend-17, unit-12)
punct(unit-12, ,-13)
ref(unit-12, which-14)
acl:relcl(unit-12, pledged-15)
mark(lend-17, to-16)
xcomp(pledged-15, lend-17)
nmod:poss(aid-20, its-18)
amod(aid-20, vital-19)
dobj(lend-17, aid-20)
case(sale-23, in-21)
det(sale-23, the-22)
nmod:in(aid-20, sale-23)
punct(helps-4, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#aid

lend :: London share prices settled just below their best levels as a stronger start on Wall Street lent a helping hand ./.
compound(prices-3, London-1)
compound(prices-3, share-2)
nsubj(settled-4, prices-3)
root(ROOT-0, settled-4)
advmod(levels-9, just-5)
case(levels-9, below-6)
nmod:poss(levels-9, their-7)
amod(levels-9, best-8)
nmod:below(settled-4, levels-9)
case(start-13, as-10)
det(start-13, a-11)
amod(start-13, stronger-12)
nmod:as(settled-4, start-13)
case(Street-16, on-14)
compound(Street-16, Wall-15)
nmod:on(start-13, Street-16)
acl(start-13, lent-17)
det(hand-20, a-18)
amod(hand-20, helping-19)
dobj(lent-17, hand-20)
punct(settled-4, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#hand

lend :: Still , market participants say the firmer U.S. interest rates will lend support to the dollar if tomorrow 's report shows that the trade gap widened in June ./.
advmod(say-5, Still-1)
punct(say-5, ,-2)
compound(participants-4, market-3)
nsubj(say-5, participants-4)
root(ROOT-0, say-5)
det(rates-10, the-6)
amod(rates-10, firmer-7)
compound(rates-10, U.S.-8)
compound(rates-10, interest-9)
nsubj(lend-12, rates-10)
aux(lend-12, will-11)
ccomp(say-5, lend-12)
dobj(lend-12, support-13)
case(dollar-16, to-14)
det(dollar-16, the-15)
nmod:to(lend-12, dollar-16)
mark(shows-21, if-17)
nmod:poss(report-20, tomorrow-18)
case(tomorrow-18, 's-19)
nsubj(shows-21, report-20)
advcl(lend-12, shows-21)
mark(widened-26, that-22)
det(gap-25, the-23)
compound(gap-25, trade-24)
nsubj(widened-26, gap-25)
ccomp(shows-21, widened-26)
case(June-28, in-27)
nmod:in(widened-26, June-28)
punct(say-5, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#support

lend :: At the mawkish end of the scale , where nothing is funny and everything is terribly high-minded , we find several of the public personalities who were kind enough to lend their services to `` Tanner '88 . ''/''
case(end-4, At-1)
det(end-4, the-2)
amod(end-4, mawkish-3)
nmod:at(find-20, end-4)
case(scale-7, of-5)
det(scale-7, the-6)
nmod:of(end-4, scale-7)
punct(find-20, ,-8)
advmod(funny-12, where-9)
nsubj(funny-12, nothing-10)
cop(funny-12, is-11)
advcl(find-20, funny-12)
cc(funny-12, and-13)
nsubj(high-minded-17, everything-14)
cop(high-minded-17, is-15)
advmod(high-minded-17, terribly-16)
conj:and(funny-12, high-minded-17)
advcl(find-20, high-minded-17)
punct(find-20, ,-18)
nsubj(find-20, we-19)
root(ROOT-0, find-20)
dobj(find-20, several-21)
case(personalities-25, of-22)
det(personalities-25, the-23)
amod(personalities-25, public-24)
nmod:of(several-21, personalities-25)
nsubj(enough-29, personalities-25)
nsubj:xsubj(lend-31, personalities-25)
ref(personalities-25, who-26)
cop(enough-29, were-27)
advmod(enough-29, kind-28)
acl:relcl(personalities-25, enough-29)
mark(lend-31, to-30)
xcomp(enough-29, lend-31)
nmod:poss(services-33, their-32)
dobj(lend-31, services-33)
case(Tanner-36, to-34)
punct(Tanner-36, ``-35)
nmod:to(lend-31, Tanner-36)
nummod(Tanner-36, '88-37)
punct(find-20, .-38)
punct(find-20, ''-39)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: lend#services

lend :: Also , designers have worn their cachet thin by lending their names to such diverse products as sheets , luggage and cigarettes ./.
advmod(worn-5, Also-1)
punct(worn-5, ,-2)
nsubj(worn-5, designers-3)
aux(worn-5, have-4)
root(ROOT-0, worn-5)
nmod:poss(cachet-7, their-6)
nsubj(thin-8, cachet-7)
xcomp(worn-5, thin-8)
mark(lending-10, by-9)
advcl(worn-5, lending-10)
nmod:poss(names-12, their-11)
dobj(lending-10, names-12)
case(products-16, to-13)
amod(products-16, such-14)
amod(products-16, diverse-15)
nmod:to(lending-10, products-16)
case(sheets-18, as-17)
nmod:as(products-16, sheets-18)
punct(sheets-18, ,-19)
nmod:as(products-16, luggage-20)
conj:and(sheets-18, luggage-20)
cc(sheets-18, and-21)
nmod:as(products-16, cigarettes-22)
conj:and(sheets-18, cigarettes-22)
punct(worn-5, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#names

lend :: Absent that , it may be time to think seriously about repealing a law that tries to legislate something that simply does n't lend itself to the tortured language of legislation ./.
root(ROOT-0, Absent-1)
mark(time-7, that-2)
punct(time-7, ,-3)
nsubj(time-7, it-4)
aux(time-7, may-5)
cop(time-7, be-6)
dep(Absent-1, time-7)
mark(think-9, to-8)
acl(time-7, think-9)
advmod(think-9, seriously-10)
mark(repealing-12, about-11)
advcl(think-9, repealing-12)
det(law-14, a-13)
dobj(repealing-12, law-14)
nsubj(tries-16, law-14)
nsubj:xsubj(legislate-18, law-14)
ref(law-14, that-15)
acl:relcl(law-14, tries-16)
mark(legislate-18, to-17)
xcomp(tries-16, legislate-18)
dobj(legislate-18, something-19)
nsubj(lend-24, something-19)
ref(something-19, that-20)
advmod(lend-24, simply-21)
aux(lend-24, does-22)
neg(lend-24, n't-23)
acl:relcl(something-19, lend-24)
dobj(lend-24, itself-25)
case(language-29, to-26)
det(language-29, the-27)
amod(language-29, tortured-28)
nmod:to(lend-24, language-29)
case(legislation-31, of-30)
nmod:of(language-29, legislation-31)
punct(Absent-1, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#itself

lend :: This ought to lend greater U.S. support for fighting more overseas wars ./.
nsubj(ought-2, This-1)
nsubj:xsubj(lend-4, This-1)
root(ROOT-0, ought-2)
mark(lend-4, to-3)
xcomp(ought-2, lend-4)
amod(support-7, greater-5)
compound(support-7, U.S.-6)
dobj(lend-4, support-7)
mark(fighting-9, for-8)
advcl(lend-4, fighting-9)
amod(wars-12, more-10)
amod(wars-12, overseas-11)
dobj(fighting-9, wars-12)
punct(ought-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#support

lend :: But to win , he donated $ 18 , 000 of his personal savings and lent his campaign $ 107 , 000 more ./.
cc(donated-6, But-1)
mark(win-3, to-2)
advcl(donated-6, win-3)
punct(donated-6, ,-4)
nsubj(donated-6, he-5)
root(ROOT-0, donated-6)
dep(18-8, $-7)
dobj(donated-6, 18-8)
punct(18-8, ,-9)
dobj(donated-6, 000-10)
conj:and(18-8, 000-10)
case(savings-14, of-11)
nmod:poss(savings-14, his-12)
amod(savings-14, personal-13)
nmod:of(000-10, savings-14)
cc(18-8, and-15)
dobj(donated-6, lent-16)
conj:and(18-8, lent-16)
nmod:poss(campaign-18, his-17)
dobj(lent-16, campaign-18)
dep(107-20, $-19)
nmod:npmod(lent-16, 107-20)
punct(lent-16, ,-21)
nummod(more-23, 000-22)
dobj(lent-16, more-23)
punct(donated-6, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#campaign

lend :: Nonetheless , international bankers are ready to lend ./.
advmod(ready-6, Nonetheless-1)
punct(ready-6, ,-2)
amod(bankers-4, international-3)
nsubj(ready-6, bankers-4)
nsubj:xsubj(lend-8, bankers-4)
cop(ready-6, are-5)
root(ROOT-0, ready-6)
mark(lend-8, to-7)
xcomp(ready-6, lend-8)
punct(ready-6, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#bankers

lend :: Because $ 15 billion or more of long-term loans must be raised by whichever bidder wins the giant food company , they say , banks in lending syndicates for that deal may have trouble finding buyers in the secondary market for portions of their loans ./.
mark(raised-12, Because-1)
nsubjpass(raised-12, $-2)
compound(billion-4, 15-3)
nummod($-2, billion-4)
cc($-2, or-5)
conj:or($-2, more-6)
nsubjpass(raised-12, more-6)
case(loans-9, of-7)
amod(loans-9, long-term-8)
nmod:of($-2, loans-9)
aux(raised-12, must-10)
auxpass(raised-12, be-11)
csubj(wins-16, raised-12)
case(bidder-15, by-13)
det(bidder-15, whichever-14)
nmod:agent(raised-12, bidder-15)
root(ROOT-0, wins-16)
det(company-20, the-17)
amod(company-20, giant-18)
compound(company-20, food-19)
dobj(wins-16, company-20)
punct(say-23, ,-21)
nsubj(say-23, they-22)
parataxis(wins-16, say-23)
punct(say-23, ,-24)
nsubj(have-33, banks-25)
case(syndicates-28, in-26)
amod(syndicates-28, lending-27)
nmod:in(banks-25, syndicates-28)
case(deal-31, for-29)
det(deal-31, that-30)
nmod:for(banks-25, deal-31)
aux(have-33, may-32)
ccomp(wins-16, have-33)
dobj(have-33, trouble-34)
acl(trouble-34, finding-35)
dobj(finding-35, buyers-36)
case(market-40, in-37)
det(market-40, the-38)
amod(market-40, secondary-39)
nmod:in(finding-35, market-40)
case(portions-42, for-41)
nmod:for(market-40, portions-42)
case(loans-45, of-43)
nmod:poss(loans-45, their-44)
nmod:of(portions-42, loans-45)
punct(wins-16, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#syndicates

lend :: Without the initial charge to keep them on track and in snubbing adoption , there seemed to be little value in my spending time or lending our organization 's name to the exercise ./.
case(charge-4, Without-1)
det(charge-4, the-2)
amod(charge-4, initial-3)
nmod:without(seemed-16, charge-4)
mark(keep-6, to-5)
acl(charge-4, keep-6)
dobj(keep-6, them-7)
case(track-9, on-8)
nmod:on(keep-6, track-9)
cc(charge-4, and-10)
mark(snubbing-12, in-11)
conj:and(charge-4, snubbing-12)
nmod:without(seemed-16, snubbing-12)
dobj(snubbing-12, adoption-13)
punct(seemed-16, ,-14)
expl(seemed-16, there-15)
root(ROOT-0, seemed-16)
mark(value-20, to-17)
cop(value-20, be-18)
amod(value-20, little-19)
xcomp(seemed-16, value-20)
case(time-24, in-21)
nmod:poss(time-24, my-22)
compound(time-24, spending-23)
nmod:in(value-20, time-24)
cc(value-20, or-25)
xcomp(seemed-16, lending-26)
conj:or(value-20, lending-26)
nmod:poss(organization-28, our-27)
nmod:poss(name-30, organization-28)
case(organization-28, 's-29)
dobj(lending-26, name-30)
case(exercise-33, to-31)
det(exercise-33, the-32)
nmod:to(lending-26, exercise-33)
punct(seemed-16, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#name

lend :: Its administration expenses come to only 0.5 % of its assets -- an enviably low figure -- and its rock-solid finances , coupled with the good repayment record on its lending , have earned it an AAA rating on the world 's capital markets where it raises nearly 90 % of the capital that it lends ./.
nmod:poss(expenses-3, Its-1)
compound(expenses-3, administration-2)
nsubj(come-4, expenses-3)
root(ROOT-0, come-4)
case(%-8, to-5)
advmod(0.5-7, only-6)
nummod(%-8, 0.5-7)
nmod:to(come-4, %-8)
case(assets-11, of-9)
nmod:poss(assets-11, its-10)
nmod:of(%-8, assets-11)
punct(%-8, ---12)
det(figure-16, an-13)
advmod(low-15, enviably-14)
amod(figure-16, low-15)
dep(%-8, figure-16)
punct(%-8, ---17)
cc(%-8, and-18)
nmod:poss(finances-21, its-19)
amod(finances-21, rock-solid-20)
nsubj(earned-34, finances-21)
punct(finances-21, ,-22)
acl(finances-21, coupled-23)
case(record-28, with-24)
det(record-28, the-25)
amod(record-28, good-26)
compound(record-28, repayment-27)
nmod:with(coupled-23, record-28)
case(lending-31, on-29)
nmod:poss(lending-31, its-30)
nmod:on(record-28, lending-31)
punct(finances-21, ,-32)
aux(earned-34, have-33)
nmod:to(come-4, earned-34)
conj:and(%-8, earned-34)
iobj(earned-34, it-35)
det(rating-38, an-36)
amod(rating-38, AAA-37)
dobj(earned-34, rating-38)
case(markets-44, on-39)
det(world-41, the-40)
nmod:poss(markets-44, world-41)
case(world-41, 's-42)
compound(markets-44, capital-43)
nmod:on(rating-38, markets-44)
mark(lends-56, markets-44)
advmod(raises-47, where-45)
nsubj(raises-47, it-46)
acl:relcl(markets-44, raises-47)
advmod(90-49, nearly-48)
nummod(%-50, 90-49)
dobj(raises-47, %-50)
case(capital-53, of-51)
det(capital-53, the-52)
nmod:of(%-50, capital-53)
ref(markets-44, that-54)
nsubj(lends-56, it-55)
ccomp(raises-47, lends-56)
punct(come-4, .-57)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#it

lend :: On the U.S. side of the equation , Mr. Hodge said the improved October U.S. jobs data , the election and an expected improvement in the U.S. September trade deficit over the August report will all lend only temporary support to the dollar on its downward trend ./.
case(side-4, On-1)
det(side-4, the-2)
compound(side-4, U.S.-3)
nmod:on(said-11, side-4)
case(equation-7, of-5)
det(equation-7, the-6)
nmod:of(side-4, equation-7)
punct(said-11, ,-8)
compound(Hodge-10, Mr.-9)
nsubj(said-11, Hodge-10)
root(ROOT-0, said-11)
det(data-17, the-12)
amod(data-17, improved-13)
compound(data-17, October-14)
compound(data-17, U.S.-15)
compound(data-17, jobs-16)
nsubj(lend-37, data-17)
punct(data-17, ,-18)
det(election-20, the-19)
appos(data-17, election-20)
cc(election-20, and-21)
det(improvement-24, an-22)
amod(improvement-24, expected-23)
appos(data-17, improvement-24)
conj:and(election-20, improvement-24)
case(deficit-30, in-25)
det(deficit-30, the-26)
compound(deficit-30, U.S.-27)
compound(deficit-30, September-28)
compound(deficit-30, trade-29)
nmod:in(improvement-24, deficit-30)
case(report-34, over-31)
det(report-34, the-32)
compound(report-34, August-33)
nmod:over(improvement-24, report-34)
aux(lend-37, will-35)
advmod(lend-37, all-36)
ccomp(said-11, lend-37)
advmod(support-40, only-38)
amod(support-40, temporary-39)
dobj(lend-37, support-40)
case(dollar-43, to-41)
det(dollar-43, the-42)
nmod:to(lend-37, dollar-43)
case(trend-47, on-44)
nmod:poss(trend-47, its-45)
amod(trend-47, downward-46)
nmod:on(lend-37, trend-47)
punct(said-11, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#support

lend :: Since the international debt crisis erupted in 1982 , banks have been increasingly reluctant to lend to Latin American countries ./.
mark(erupted-6, Since-1)
det(crisis-5, the-2)
amod(crisis-5, international-3)
compound(crisis-5, debt-4)
nsubj(erupted-6, crisis-5)
advcl(reluctant-14, erupted-6)
case(1982-8, in-7)
nmod:in(erupted-6, 1982-8)
punct(reluctant-14, ,-9)
nsubj(reluctant-14, banks-10)
nsubj:xsubj(lend-16, banks-10)
aux(reluctant-14, have-11)
cop(reluctant-14, been-12)
advmod(reluctant-14, increasingly-13)
root(ROOT-0, reluctant-14)
mark(lend-16, to-15)
xcomp(reluctant-14, lend-16)
case(countries-20, to-17)
amod(American-19, Latin-18)
amod(countries-20, American-19)
nmod:to(lend-16, countries-20)
punct(reluctant-14, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#banks

lend :: Instead of being directed at the Mafia , they are being used to lend meaning to fuzzy laws and test novel legal theories in cases against Bob Wallach , securities officials from firms such as Princeton Newport and presumably Drexel Burnham , and now the Marcos family ./.
mark(directed-4, Instead-1)
mwe(Instead-1, of-2)
auxpass(directed-4, being-3)
advcl(used-12, directed-4)
case(Mafia-7, at-5)
det(Mafia-7, the-6)
nmod:at(directed-4, Mafia-7)
punct(used-12, ,-8)
nsubjpass(used-12, they-9)
nsubj:xsubj(lend-14, they-9)
aux(used-12, are-10)
auxpass(used-12, being-11)
root(ROOT-0, used-12)
mark(lend-14, to-13)
xcomp(used-12, lend-14)
xcomp(lend-14, meaning-15)
case(laws-18, to-16)
amod(laws-18, fuzzy-17)
nmod:to(meaning-15, laws-18)
cc(laws-18, and-19)
compound(theories-23, test-20)
amod(theories-23, novel-21)
amod(theories-23, legal-22)
nmod:to(meaning-15, theories-23)
conj:and(laws-18, theories-23)
case(cases-25, in-24)
nmod:in(laws-18, cases-25)
case(Wallach-28, against-26)
compound(Wallach-28, Bob-27)
nmod:against(cases-25, Wallach-28)
punct(used-12, ,-29)
compound(officials-31, securities-30)
root(,-29, officials-31)
case(firms-33, from-32)
nmod:from(officials-31, firms-33)
case(Newport-37, such-34)
mwe(such-34, as-35)
compound(Newport-37, Princeton-36)
nmod:such_as(firms-33, Newport-37)
cc(Newport-37, and-38)
advmod(Burnham-41, presumably-39)
compound(Burnham-41, Drexel-40)
nmod:such_as(firms-33, Burnham-41)
conj:and(Newport-37, Burnham-41)
punct(officials-31, ,-42)
cc(officials-31, and-43)
advmod(family-47, now-44)
det(family-47, the-45)
compound(family-47, Marcos-46)
root(,-29, family-47)
conj:and(officials-31, family-47)
punct(officials-31, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#they

lend :: But few , if any , have guidelines against lending to offshore entities that are South African-controlled or that have a significant South African minority interest ./.
cc(have-7, But-1)
nsubj(have-7, few-2)
punct(any-5, ,-3)
mark(any-5, if-4)
dep(have-7, any-5)
punct(any-5, ,-6)
root(ROOT-0, have-7)
dobj(have-7, guidelines-8)
mark(lending-10, against-9)
acl(guidelines-8, lending-10)
case(entities-13, to-11)
amod(entities-13, offshore-12)
nmod:to(lending-10, entities-13)
nsubj(African-controlled-17, entities-13)
ref(entities-13, that-14)
cop(African-controlled-17, are-15)
amod(African-controlled-17, South-16)
acl:relcl(entities-13, African-controlled-17)
cc(African-controlled-17, or-18)
nsubj(have-20, that-19)
acl:relcl(entities-13, have-20)
conj:or(African-controlled-17, have-20)
det(interest-26, a-21)
amod(interest-26, significant-22)
amod(African-24, South-23)
amod(interest-26, African-24)
compound(interest-26, minority-25)
dobj(have-20, interest-26)
punct(have-7, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#entities

lend :: And only 20 % reported that their customers lent them engineers to supplement their own technical expertise ./.
cc(reported-5, And-1)
advmod(20-3, only-2)
nummod(%-4, 20-3)
nsubj(reported-5, %-4)
root(ROOT-0, reported-5)
mark(lent-9, that-6)
nmod:poss(customers-8, their-7)
nsubj(lent-9, customers-8)
ccomp(reported-5, lent-9)
iobj(lent-9, them-10)
dobj(lent-9, engineers-11)
mark(supplement-13, to-12)
acl(engineers-11, supplement-13)
nmod:poss(expertise-17, their-14)
amod(expertise-17, own-15)
amod(expertise-17, technical-16)
dobj(supplement-13, expertise-17)
punct(reported-5, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#engineers

lend :: Changes in Florida Federal 's rate on its Liquidity Plus money market account are linked to a seven-day average for the federal funds rate , which is the rate on reserves that banks lend one another overnight ./.
nsubjpass(linked-15, Changes-1)
case(rate-6, in-2)
compound(Federal-4, Florida-3)
nmod:poss(rate-6, Federal-4)
case(Federal-4, 's-5)
nmod:in(Changes-1, rate-6)
case(Liquidity-9, on-7)
nmod:poss(Liquidity-9, its-8)
nmod:on(rate-6, Liquidity-9)
cc(Liquidity-9, Plus-10)
compound(account-13, money-11)
compound(account-13, market-12)
nmod:on(rate-6, account-13)
conj:plus(Liquidity-9, account-13)
auxpass(linked-15, are-14)
root(ROOT-0, linked-15)
case(average-19, to-16)
det(average-19, a-17)
amod(average-19, seven-day-18)
nmod:to(linked-15, average-19)
case(rate-24, for-20)
det(rate-24, the-21)
amod(rate-24, federal-22)
compound(rate-24, funds-23)
nmod:for(average-19, rate-24)
nsubj(rate-29, rate-24)
punct(rate-24, ,-25)
ref(rate-24, which-26)
cop(rate-29, is-27)
det(rate-29, the-28)
acl:relcl(rate-24, rate-29)
case(reserves-31, on-30)
nmod:on(rate-29, reserves-31)
dobj(lend-34, reserves-31)
ref(reserves-31, that-32)
nsubj(lend-34, banks-33)
acl:relcl(reserves-31, lend-34)
nummod(overnight-37, one-35)
det(overnight-37, another-36)
dobj(lend-34, overnight-37)
punct(linked-15, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#reserves

lend :: The reason is that , individually , banks have considered this sort of lending risky because the margins are too slim ./.
det(reason-2, The-1)
nsubj(is-3, reason-2)
root(ROOT-0, is-3)
nsubjpass(considered-10, that-4)
punct(considered-10, ,-5)
advmod(considered-10, individually-6)
punct(considered-10, ,-7)
nsubj(considered-10, banks-8)
aux(considered-10, have-9)
ccomp(is-3, considered-10)
det(sort-12, this-11)
dobj(considered-10, sort-12)
mark(lending-14, of-13)
acl(sort-12, lending-14)
xcomp(lending-14, risky-15)
mark(slim-21, because-16)
det(margins-18, the-17)
nsubj(slim-21, margins-18)
cop(slim-21, are-19)
advmod(slim-21, too-20)
advcl(considered-10, slim-21)
punct(is-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

lend :: The rate on funds , or reserves that banks lend each other overnight , has been hovering between about 8 % and 8 1 4 % recently ./.
det(rate-2, The-1)
nsubj(hovering-17, rate-2)
case(funds-4, on-3)
nmod:on(rate-2, funds-4)
punct(funds-4, ,-5)
cc(funds-4, or-6)
nmod:on(rate-2, reserves-7)
conj:or(funds-4, reserves-7)
mark(lend-10, that-8)
nsubj(lend-10, banks-9)
ccomp(reserves-7, lend-10)
det(overnight-13, each-11)
amod(overnight-13, other-12)
dobj(lend-10, overnight-13)
punct(rate-2, ,-14)
aux(hovering-17, has-15)
aux(hovering-17, been-16)
root(ROOT-0, hovering-17)
case(%-21, between-18)
advmod(8-20, about-19)
nummod(%-21, 8-20)
nmod:between(hovering-17, %-21)
cc(%-21, and-22)
compound(4-25, 8-23)
compound(4-25, 1-24)
nummod(%-26, 4-25)
nmod:between(hovering-17, %-26)
conj:and(%-21, %-26)
advmod(hovering-17, recently-27)
punct(hovering-17, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#overnight

lend :: Some bankers said at the time that Bolivia 's buy-back was a unique exercise for one of the poorest Latin American countries , where few banks would wish to lend again ./.
det(bankers-2, Some-1)
nsubj(said-3, bankers-2)
root(ROOT-0, said-3)
case(time-6, at-4)
det(time-6, the-5)
nmod:at(said-3, time-6)
mark(exercise-14, that-7)
nmod:poss(buy-back-10, Bolivia-8)
case(Bolivia-8, 's-9)
nsubj(exercise-14, buy-back-10)
cop(exercise-14, was-11)
det(exercise-14, a-12)
amod(exercise-14, unique-13)
ccomp(said-3, exercise-14)
case(one-16, for-15)
nmod:for(exercise-14, one-16)
case(countries-22, of-17)
det(countries-22, the-18)
amod(countries-22, poorest-19)
amod(American-21, Latin-20)
amod(countries-22, American-21)
nmod:of(one-16, countries-22)
punct(countries-22, ,-23)
advmod(wish-28, where-24)
amod(banks-26, few-25)
nsubj(wish-28, banks-26)
nsubj:xsubj(lend-30, banks-26)
aux(wish-28, would-27)
acl:relcl(countries-22, wish-28)
mark(lend-30, to-29)
xcomp(wish-28, lend-30)
advmod(lend-30, again-31)
punct(said-3, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#banks

lend :: Mr. Hopfield , known mainly for his work on neural networks , believes that electronically controllable polymers may lend themselves to the complicated wiring of neural networks ./.
compound(Hopfield-2, Mr.-1)
nsubj(believes-13, Hopfield-2)
punct(Hopfield-2, ,-3)
acl(Hopfield-2, known-4)
advmod(work-8, mainly-5)
case(work-8, for-6)
nmod:poss(work-8, his-7)
nmod:for(known-4, work-8)
case(networks-11, on-9)
amod(networks-11, neural-10)
nmod:on(work-8, networks-11)
punct(Hopfield-2, ,-12)
root(ROOT-0, believes-13)
mark(lend-19, that-14)
advmod(controllable-16, electronically-15)
amod(polymers-17, controllable-16)
nsubj(lend-19, polymers-17)
aux(lend-19, may-18)
ccomp(believes-13, lend-19)
dobj(lend-19, themselves-20)
case(wiring-24, to-21)
det(wiring-24, the-22)
amod(wiring-24, complicated-23)
nmod:to(lend-19, wiring-24)
case(networks-27, of-25)
amod(networks-27, neural-26)
nmod:of(wiring-24, networks-27)
punct(believes-13, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#themselves

lend :: The thrift will be able to lend 10 % of its assets , or about $ 1.5 billion , to the merchant bank , officials said ./.
det(thrift-2, The-1)
nsubj(able-5, thrift-2)
nsubj:xsubj(lend-7, thrift-2)
aux(able-5, will-3)
cop(able-5, be-4)
ccomp(said-26, able-5)
mark(lend-7, to-6)
xcomp(able-5, lend-7)
nummod(%-9, 10-8)
dobj(lend-7, %-9)
case(assets-12, of-10)
nmod:poss(assets-12, its-11)
nmod:of(%-9, assets-12)
punct(%-9, ,-13)
cc(%-9, or-14)
advmod($-16, about-15)
dobj(lend-7, $-16)
conj:or(%-9, $-16)
compound(billion-18, 1.5-17)
nummod($-16, billion-18)
punct(%-9, ,-19)
case(bank-23, to-20)
det(bank-23, the-21)
compound(bank-23, merchant-22)
nmod:to(lend-7, bank-23)
punct(said-26, ,-24)
nsubj(said-26, officials-25)
root(ROOT-0, said-26)
punct(said-26, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#assets

lend :: He says he lent $ 13 , 000 to Victor Cohen , a friend of Mr. Galvin 's and an Air Force assistant secretary whose phone was tapped by federal investigators ./.
nsubj(says-2, He-1)
root(ROOT-0, says-2)
nsubj(lent-4, he-3)
ccomp(says-2, lent-4)
dep(13-6, $-5)
dobj(lent-4, 13-6)
punct(13-6, ,-7)
appos(13-6, 000-8)
case(Cohen-11, to-9)
compound(Cohen-11, Victor-10)
nmod:to(000-8, Cohen-11)
punct(Cohen-11, ,-12)
det(friend-14, a-13)
appos(Cohen-11, friend-14)
case(Galvin-17, of-15)
compound(Galvin-17, Mr.-16)
nmod:of(friend-14, Galvin-17)
case(Galvin-17, 's-18)
cc(friend-14, and-19)
det(secretary-24, an-20)
compound(secretary-24, Air-21)
compound(secretary-24, Force-22)
compound(secretary-24, assistant-23)
appos(Cohen-11, secretary-24)
conj:and(friend-14, secretary-24)
nmod:poss(phone-26, secretary-24)
ref(secretary-24, whose-25)
nsubjpass(tapped-28, phone-26)
auxpass(tapped-28, was-27)
acl:relcl(secretary-24, tapped-28)
case(investigators-31, by-29)
amod(investigators-31, federal-30)
nmod:agent(tapped-28, investigators-31)
punct(says-2, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#13

lend :: The rate on Federal funds , or reserves banks lend one another overnight , could climb above 8 % by tomorrow from just under 7 3 4 % , he said ./.
det(rate-2, The-1)
nsubj(lend-10, rate-2)
case(funds-5, on-3)
amod(funds-5, Federal-4)
nmod:on(rate-2, funds-5)
punct(rate-2, ,-6)
cc(rate-2, or-7)
compound(banks-9, reserves-8)
conj:or(rate-2, banks-9)
nsubj(lend-10, banks-9)
ccomp(said-31, lend-10)
nummod(overnight-13, one-11)
det(overnight-13, another-12)
dobj(lend-10, overnight-13)
punct(lend-10, ,-14)
aux(climb-16, could-15)
dep(lend-10, climb-16)
case(%-19, above-17)
nummod(%-19, 8-18)
nmod:above(climb-16, %-19)
case(tomorrow-21, by-20)
nmod:by(climb-16, tomorrow-21)
case(%-28, from-22)
advmod(4-27, just-23)
advmod(4-27, under-24)
compound(4-27, 7-25)
compound(4-27, 3-26)
nummod(%-28, 4-27)
nmod:from(climb-16, %-28)
punct(said-31, ,-29)
nsubj(said-31, he-30)
root(ROOT-0, said-31)
punct(said-31, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#overnight

lend :: The rest would go to more than 30 international banks that lent the National Bank money before it was seized and closed by Brunei in November 1986 ./.
det(rest-2, The-1)
nsubj(go-4, rest-2)
aux(go-4, would-3)
root(ROOT-0, go-4)
case(banks-10, to-5)
advmod(30-8, more-6)
mwe(more-6, than-7)
nummod(banks-10, 30-8)
amod(banks-10, international-9)
nmod:to(go-4, banks-10)
nsubj(lent-12, banks-10)
ref(banks-10, that-11)
acl:relcl(banks-10, lent-12)
det(money-16, the-13)
compound(money-16, National-14)
compound(money-16, Bank-15)
dobj(lent-12, money-16)
mark(seized-20, before-17)
nsubjpass(seized-20, it-18)
nsubjpass(closed-22, it-18)
auxpass(seized-20, was-19)
advcl(lent-12, seized-20)
cc(seized-20, and-21)
advcl(lent-12, closed-22)
conj:and(seized-20, closed-22)
case(Brunei-24, by-23)
nmod:agent(seized-20, Brunei-24)
case(November-26, in-25)
nmod:in(seized-20, November-26)
nummod(November-26, 1986-27)
punct(go-4, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: Although underwriters typically attempt to have new securities products introduced by borrowers other than themselves -- in order to lend additional credibility to the offering -- Merrill said it wanted to do the borrowing itself ./.
mark(attempt-4, Although-1)
nsubj(attempt-4, underwriters-2)
nsubj:xsubj(have-6, underwriters-2)
advmod(attempt-4, typically-3)
root(ROOT-0, attempt-4)
mark(have-6, to-5)
xcomp(attempt-4, have-6)
amod(products-9, new-7)
compound(products-9, securities-8)
dobj(have-6, products-9)
acl(products-9, introduced-10)
case(borrowers-12, by-11)
nmod:by(introduced-10, borrowers-12)
amod(borrowers-12, other-13)
case(themselves-15, than-14)
nmod:than(other-13, themselves-15)
punct(have-6, ---16)
mark(lend-20, in-17)
mwe(in-17, order-18)
mark(lend-20, to-19)
advcl(have-6, lend-20)
amod(credibility-22, additional-21)
dobj(lend-20, credibility-22)
case(offering-25, to-23)
det(offering-25, the-24)
nmod:to(lend-20, offering-25)
punct(said-28, ---26)
nsubj(said-28, Merrill-27)
parataxis(attempt-4, said-28)
nsubj(wanted-30, it-29)
nsubj:xsubj(do-32, it-29)
ccomp(said-28, wanted-30)
mark(do-32, to-31)
xcomp(wanted-30, do-32)
det(borrowing-34, the-33)
dobj(do-32, borrowing-34)
nmod:npmod(borrowing-34, itself-35)
punct(attempt-4, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#credibility

lend :: The West German Bundesbank 's decision to boost its rate on securities repurchase agreements by 0.25 percentage point to a fixed 4.25 % rate came as no surprise , traders said , and lent little or no support to the mark against the dollar ./.
det(Bundesbank-4, The-1)
amod(German-3, West-2)
amod(Bundesbank-4, German-3)
nmod:poss(decision-6, Bundesbank-4)
case(Bundesbank-4, 's-5)
nsubj(repurchase-13, decision-6)
nsubj(lent-34, decision-6)
mark(boost-8, to-7)
acl(decision-6, boost-8)
nmod:poss(rate-10, its-9)
dobj(boost-8, rate-10)
case(securities-12, on-11)
nmod:on(rate-10, securities-12)
root(ROOT-0, repurchase-13)
dobj(repurchase-13, agreements-14)
case(point-18, by-15)
nummod(point-18, 0.25-16)
compound(point-18, percentage-17)
nmod:by(repurchase-13, point-18)
case(rate-24, to-19)
det(rate-24, a-20)
amod(rate-24, fixed-21)
compound(%-23, 4.25-22)
amod(rate-24, %-23)
nmod:to(repurchase-13, rate-24)
dep(repurchase-13, came-25)
case(surprise-28, as-26)
neg(surprise-28, no-27)
nmod:as(came-25, surprise-28)
punct(said-31, ,-29)
nsubj(said-31, traders-30)
dep(repurchase-13, said-31)
punct(said-31, ,-32)
cc(repurchase-13, and-33)
conj:and(repurchase-13, lent-34)
amod(support-38, little-35)
cc(little-35, or-36)
conj:or(little-35, no-37)
amod(support-38, no-37)
dobj(lent-34, support-38)
case(mark-41, to-39)
det(mark-41, the-40)
nmod:to(lent-34, mark-41)
case(dollar-44, against-42)
det(dollar-44, the-43)
nmod:against(lent-34, dollar-44)
punct(repurchase-13, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#support

lend :: James D. Harper Jr . , a big Chicago investor and former real estate lending chief at Continental Illinois Corp . , said he lent hundreds of millions of dollars to Mr. Zell over the years , it was always repaid , and that Mr. Zell nearly always made out well ./.
compound(Jr-4, James-1)
compound(Jr-4, D.-2)
compound(Jr-4, Harper-3)
root(ROOT-0, Jr-4)
punct(Jr-4, .-5)
root(ROOT-0, ,-1)
det(investor-5, a-2)
amod(investor-5, big-3)
compound(investor-5, Chicago-4)
root(,-1, investor-5)
cc(investor-5, and-6)
amod(chief-11, former-7)
amod(chief-11, real-8)
compound(chief-11, estate-9)
compound(chief-11, lending-10)
root(,-1, chief-11)
conj:and(investor-5, chief-11)
case(Corp-15, at-12)
compound(Corp-15, Continental-13)
compound(Corp-15, Illinois-14)
nmod:at(chief-11, Corp-15)
punct(investor-5, .-16)
punct(said-2, ,-1)
root(ROOT-0, said-2)
nsubj(lent-4, he-3)
ccomp(said-2, lent-4)
dobj(lent-4, hundreds-5)
case(millions-7, of-6)
nmod:of(hundreds-5, millions-7)
case(dollars-9, of-8)
nmod:of(millions-7, dollars-9)
case(Zell-12, to-10)
compound(Zell-12, Mr.-11)
nmod:to(lent-4, Zell-12)
case(years-15, over-13)
det(years-15, the-14)
nmod:over(lent-4, years-15)
punct(lent-4, ,-16)
nsubjpass(repaid-20, it-17)
auxpass(repaid-20, was-18)
advmod(repaid-20, always-19)
parataxis(lent-4, repaid-20)
punct(repaid-20, ,-21)
cc(repaid-20, and-22)
mark(made-28, that-23)
compound(Zell-25, Mr.-24)
nsubj(made-28, Zell-25)
advmod(always-27, nearly-26)
advmod(made-28, always-27)
parataxis(lent-4, made-28)
conj:and(repaid-20, made-28)
compound:prt(made-28, out-29)
advmod(made-28, well-30)
punct(said-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#millions

lend :: Mellon 's mortgage unit , which lent primarily in depressed Southwestern states , is responsible for a large amount of Mellon 's nonperforming domestic assets ./.
nmod:poss(unit-4, Mellon-1)
case(Mellon-1, 's-2)
compound(unit-4, mortgage-3)
nsubj(lent-7, unit-4)
nsubj(responsible-15, unit-4)
punct(unit-4, ,-5)
ref(unit-4, which-6)
acl:relcl(unit-4, lent-7)
advmod(lent-7, primarily-8)
case(states-12, in-9)
amod(states-12, depressed-10)
amod(states-12, Southwestern-11)
nmod:in(lent-7, states-12)
punct(unit-4, ,-13)
cop(responsible-15, is-14)
root(ROOT-0, responsible-15)
case(amount-19, for-16)
det(amount-19, a-17)
amod(amount-19, large-18)
nmod:for(responsible-15, amount-19)
case(assets-25, of-20)
nmod:poss(assets-25, Mellon-21)
case(Mellon-21, 's-22)
compound(assets-25, nonperforming-23)
amod(assets-25, domestic-24)
nmod:of(amount-19, assets-25)
punct(responsible-15, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#unit

lend :: No bank would lend him money ./.
neg(bank-2, No-1)
nsubj(lend-4, bank-2)
aux(lend-4, would-3)
root(ROOT-0, lend-4)
iobj(lend-4, him-5)
dobj(lend-4, money-6)
punct(lend-4, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: Having expanded to handle the 1986 and 1987 mortgage crush , lenders flush with deposits have money to lend but not enough borrowers ./.
aux(expanded-2, Having-1)
advcl(flush-13, expanded-2)
mark(handle-4, to-3)
xcomp(expanded-2, handle-4)
det(crush-10, the-5)
compound(crush-10, 1986-6)
cc(1986-6, and-7)
conj:and(1986-6, 1987-8)
compound(crush-10, 1987-8)
compound(crush-10, mortgage-9)
dobj(handle-4, crush-10)
punct(flush-13, ,-11)
nsubj(flush-13, lenders-12)
root(ROOT-0, flush-13)
case(deposits-15, with-14)
nmod:with(flush-13, deposits-15)
dep(flush-13, have-16)
dobj(have-16, money-17)
mark(lend-19, to-18)
acl(money-17, lend-19)
cc(not-21, but-20)
cc(lend-19, not-21)
amod(borrowers-23, enough-22)
acl(money-17, borrowers-23)
conj:negcc(lend-19, borrowers-23)
punct(flush-13, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

lend :: AMR Corp. 's American Airlines agreed to lend Braniff Inc . , Dallas , as much as $ 21 million , and also purchase certain Braniff assets for as much as $ 23 million , according to documents filed with the Securities and Exchange Commission ./.
compound(Corp.-2, AMR-1)
nmod:poss(Airlines-5, Corp.-2)
case(Corp.-2, 's-3)
compound(Airlines-5, American-4)
nsubj(agreed-6, Airlines-5)
nsubj:xsubj(lend-8, Airlines-5)
root(ROOT-0, agreed-6)
mark(lend-8, to-7)
xcomp(agreed-6, lend-8)
compound(Inc-10, Braniff-9)
dobj(lend-8, Inc-10)
punct(agreed-6, .-11)
punct($-7, ,-1)
dep($-7, Dallas-2)
punct($-7, ,-3)
advmod($-7, as-4)
advmod($-7, much-5)
advmod($-7, as-6)
root(ROOT-0, $-7)
compound(million-9, 21-8)
nummod($-7, million-9)
punct($-7, ,-10)
cc($-7, and-11)
advmod(purchase-13, also-12)
conj:and($-7, purchase-13)
amod(assets-16, certain-14)
compound(assets-16, Braniff-15)
dobj(purchase-13, assets-16)
case($-21, for-17)
advmod($-21, as-18)
advmod($-21, much-19)
advmod($-21, as-20)
nmod:for(purchase-13, $-21)
compound(million-23, 23-22)
nummod($-21, million-23)
punct($-7, ,-24)
case(documents-27, according-25)
mwe(according-25, to-26)
nmod:according_to($-7, documents-27)
acl(documents-27, filed-28)
case(Commission-34, with-29)
det(Commission-34, the-30)
compound(Commission-34, Securities-31)
cc(Securities-31, and-32)
conj:and(Securities-31, Exchange-33)
compound(Commission-34, Exchange-33)
nmod:with(filed-28, Commission-34)
punct($-7, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#inc

lend :: ERG Resources Inc. said Australia 's Giant Resources Ltd. agreed to lend the company 43 million Canadian dollars -LRB- US $ 35.5 million -RRB- and provide security for a C $ 60 million gold loan planned by ERG ./.
compound(Inc.-3, ERG-1)
compound(Inc.-3, Resources-2)
nsubj(said-4, Inc.-3)
root(ROOT-0, said-4)
nmod:poss(Ltd.-9, Australia-5)
case(Australia-5, 's-6)
compound(Ltd.-9, Giant-7)
compound(Ltd.-9, Resources-8)
nsubj(agreed-10, Ltd.-9)
nsubj:xsubj(lend-12, Ltd.-9)
ccomp(said-4, agreed-10)
mark(lend-12, to-11)
xcomp(agreed-10, lend-12)
det(company-14, the-13)
iobj(lend-12, company-14)
compound(million-16, 43-15)
nummod(dollars-18, million-16)
amod(dollars-18, Canadian-17)
dobj(lend-12, dollars-18)
punct(US-20, -LRB--19)
dep(dollars-18, US-20)
dep(US-20, $-21)
compound(million-23, 35.5-22)
nummod($-21, million-23)
punct(US-20, -RRB--24)
cc(lend-12, and-25)
xcomp(agreed-10, provide-26)
conj:and(lend-12, provide-26)
dobj(provide-26, security-27)
case(C-30, for-28)
det(C-30, a-29)
nmod:for(provide-26, C-30)
amod(loan-35, $-31)
compound(million-33, 60-32)
nummod($-31, million-33)
compound(loan-35, gold-34)
dep(C-30, loan-35)
acl(loan-35, planned-36)
case(ERG-38, by-37)
nmod:by(planned-36, ERG-38)
punct(said-4, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#dollars

lend :: The U.S. Export-Import Bank could assist the Polish transaction , but it 's legally forbidden to lend funds to Romania ./.
det(Bank-4, The-1)
compound(Bank-4, U.S.-2)
compound(Bank-4, Export-Import-3)
nsubj(assist-6, Bank-4)
aux(assist-6, could-5)
root(ROOT-0, assist-6)
det(transaction-9, the-7)
amod(transaction-9, Polish-8)
dobj(assist-6, transaction-9)
punct(assist-6, ,-10)
cc(assist-6, but-11)
nsubjpass(forbidden-15, it-12)
nsubj:xsubj(lend-17, it-12)
auxpass(forbidden-15, 's-13)
advmod(forbidden-15, legally-14)
conj:but(assist-6, forbidden-15)
mark(lend-17, to-16)
xcomp(forbidden-15, lend-17)
dobj(lend-17, funds-18)
case(Romania-20, to-19)
nmod:to(lend-17, Romania-20)
punct(assist-6, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#funds

lend :: `` We lend to the rich to improve their quality of life . ''/''
root(ROOT-0, ``-1)
nsubj(lend-3, We-2)
nsubj:xsubj(improve-8, We-2)
root(``-1, lend-3)
case(rich-6, to-4)
det(rich-6, the-5)
nmod:to(lend-3, rich-6)
mark(improve-8, to-7)
xcomp(lend-3, improve-8)
nmod:poss(quality-10, their-9)
dobj(improve-8, quality-10)
case(life-12, of-11)
nmod:of(quality-10, life-12)
punct(lend-3, .-13)
punct(lend-3, ''-14)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: lend#we

lend :: He adds , `` It seems to me it will be desirable , in the present environment , to see what can be done '' to reduce debt , rather than just lend new money ./.
nsubj(adds-2, He-1)
root(ROOT-0, adds-2)
punct(adds-2, ,-3)
punct(adds-2, ``-4)
nsubj(seems-6, It-5)
ccomp(adds-2, seems-6)
case(me-8, to-7)
nmod:to(seems-6, me-8)
nsubj(desirable-12, it-9)
nsubj:xsubj(see-20, it-9)
aux(desirable-12, will-10)
cop(desirable-12, be-11)
ccomp(seems-6, desirable-12)
punct(desirable-12, ,-13)
case(environment-17, in-14)
det(environment-17, the-15)
amod(environment-17, present-16)
nmod:in(desirable-12, environment-17)
punct(desirable-12, ,-18)
mark(see-20, to-19)
xcomp(desirable-12, see-20)
nsubjpass(done-24, what-21)
nsubj:xsubj(reduce-27, what-21)
aux(done-24, can-22)
auxpass(done-24, be-23)
ccomp(see-20, done-24)
punct(done-24, ''-25)
mark(reduce-27, to-26)
xcomp(done-24, reduce-27)
dobj(reduce-27, debt-28)
punct(see-20, ,-29)
mark(lend-33, rather-30)
mwe(rather-30, than-31)
advmod(lend-33, just-32)
advcl(see-20, lend-33)
amod(money-35, new-34)
dobj(lend-33, money-35)
punct(adds-2, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: About 165 , 000 pieces had been lent to government offices and embassies around the world , and many never came back , he said ./.
advmod(165-2, About-1)
nmod(lent-8, 165-2)
punct(lent-8, ,-3)
nummod(pieces-5, 000-4)
nsubjpass(lent-8, pieces-5)
aux(lent-8, had-6)
auxpass(lent-8, been-7)
ccomp(said-25, lent-8)
case(offices-11, to-9)
compound(offices-11, government-10)
nmod:to(lent-8, offices-11)
cc(offices-11, and-12)
nmod:to(lent-8, embassies-13)
conj:and(offices-11, embassies-13)
case(world-16, around-14)
det(world-16, the-15)
nmod:around(lent-8, world-16)
punct(lent-8, ,-17)
cc(lent-8, and-18)
nsubj(came-21, many-19)
neg(came-21, never-20)
conj:and(lent-8, came-21)
ccomp(said-25, came-21)
advmod(came-21, back-22)
punct(said-25, ,-23)
nsubj(said-25, he-24)
root(ROOT-0, said-25)
punct(said-25, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#pieces

lend :: But bankers that lend to farmers suddenly are worrying anew about their borrower 's financial health ./.
cc(worrying-9, But-1)
nsubj(lend-4, bankers-2)
nsubj(worrying-9, bankers-2)
ref(bankers-2, that-3)
acl:relcl(bankers-2, lend-4)
case(farmers-6, to-5)
nmod:to(lend-4, farmers-6)
advmod(lend-4, suddenly-7)
aux(worrying-9, are-8)
root(ROOT-0, worrying-9)
advmod(worrying-9, anew-10)
case(health-16, about-11)
nmod:poss(borrower-13, their-12)
nmod:poss(health-16, borrower-13)
case(borrower-13, 's-14)
amod(health-16, financial-15)
nmod:about(worrying-9, health-16)
punct(worrying-9, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#bankers

lend :: Earlier in the month , the rate on reserves that banks lend each other overnight was averaging around 7 3 8 % ./.
advmod(averaging-17, Earlier-1)
case(month-4, in-2)
det(month-4, the-3)
nmod:in(Earlier-1, month-4)
punct(averaging-17, ,-5)
det(rate-7, the-6)
nsubj(averaging-17, rate-7)
case(reserves-9, on-8)
nmod:on(rate-7, reserves-9)
mark(lend-12, that-10)
nsubj(lend-12, banks-11)
ccomp(reserves-9, lend-12)
det(overnight-15, each-13)
amod(overnight-15, other-14)
dobj(lend-12, overnight-15)
aux(averaging-17, was-16)
root(ROOT-0, averaging-17)
case(%-22, around-18)
compound(3-20, 7-19)
nummod(%-22, 3-20)
nummod(%-22, 8-21)
nmod:around(averaging-17, %-22)
punct(averaging-17, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#overnight

lend :: But the report , published in today 's edition of Science , lends credence to a body of opinion that HIV-2 in some cases may not ravage T-4 cells -- immune sentries of the bloodstream -- as much as it harms cells of the brain or bowel , said Dr. Levy in an interview ./.
cc(lends-13, But-1)
det(report-3, the-2)
nsubj(lends-13, report-3)
punct(report-3, ,-4)
acl(report-3, published-5)
case(edition-9, in-6)
nmod:poss(edition-9, today-7)
case(today-7, 's-8)
nmod:in(published-5, edition-9)
case(Science-11, of-10)
nmod:of(edition-9, Science-11)
punct(report-3, ,-12)
root(ROOT-0, lends-13)
dobj(lends-13, credence-14)
case(body-17, to-15)
det(body-17, a-16)
nmod:to(lends-13, body-17)
mark(ravage-27, body-17)
case(opinion-19, of-18)
nmod:of(body-17, opinion-19)
ref(body-17, that-20)
nsubj(ravage-27, HIV-2-21)
case(cases-24, in-22)
det(cases-24, some-23)
nmod:in(HIV-2-21, cases-24)
aux(ravage-27, may-25)
neg(ravage-27, not-26)
acl:relcl(body-17, ravage-27)
compound(cells-29, T-4-28)
dobj(ravage-27, cells-29)
punct(ravage-27, ---30)
amod(sentries-32, immune-31)
dep(ravage-27, sentries-32)
case(bloodstream-35, of-33)
det(bloodstream-35, the-34)
nmod:of(sentries-32, bloodstream-35)
punct(ravage-27, ---36)
advmod(much-38, as-37)
advmod(ravage-27, much-38)
mark(harms-41, as-39)
nsubj(harms-41, it-40)
advcl(much-38, harms-41)
dobj(harms-41, cells-42)
case(brain-45, of-43)
det(brain-45, the-44)
nmod:of(cells-42, brain-45)
cc(brain-45, or-46)
nmod:of(cells-42, bowel-47)
conj:or(brain-45, bowel-47)
punct(ravage-27, ,-48)
dep(ravage-27, said-49)
compound(Levy-51, Dr.-50)
nsubj(said-49, Levy-51)
case(interview-54, in-52)
det(interview-54, an-53)
nmod:in(Levy-51, interview-54)
punct(lends-13, .-55)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#credence

lend :: Mr. DeBartolo lent Campeau $ 480 million to help finance its Federated takeover , and much of Campeau 's U.S. real estate assets are pledged as security for the loan ./.
compound(DeBartolo-2, Mr.-1)
nsubj(lent-3, DeBartolo-2)
root(ROOT-0, lent-3)
iobj(lent-3, Campeau-4)
dobj(lent-3, $-5)
compound(million-7, 480-6)
nummod($-5, million-7)
mark(help-9, to-8)
advcl(lent-3, help-9)
ccomp(help-9, finance-10)
nmod:poss(takeover-13, its-11)
compound(takeover-13, Federated-12)
dobj(finance-10, takeover-13)
punct(lent-3, ,-14)
cc(lent-3, and-15)
nsubjpass(pledged-25, much-16)
case(assets-23, of-17)
nmod:poss(assets-23, Campeau-18)
case(Campeau-18, 's-19)
compound(assets-23, U.S.-20)
amod(assets-23, real-21)
compound(assets-23, estate-22)
nmod:of(much-16, assets-23)
auxpass(pledged-25, are-24)
conj:and(lent-3, pledged-25)
case(security-27, as-26)
nmod:as(pledged-25, security-27)
case(loan-30, for-28)
det(loan-30, the-29)
nmod:for(security-27, loan-30)
punct(lent-3, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#$

lend :: The rate on funds , or reserves that banks lend each other overnight , averaged about 7 1 2 % , up from 7.42 % Friday ./.
det(rate-2, The-1)
nsubj(averaged-15, rate-2)
case(funds-4, on-3)
nmod:on(rate-2, funds-4)
punct(funds-4, ,-5)
cc(funds-4, or-6)
nmod:on(rate-2, reserves-7)
conj:or(funds-4, reserves-7)
mark(lend-10, that-8)
nsubj(lend-10, banks-9)
ccomp(reserves-7, lend-10)
det(overnight-13, each-11)
amod(overnight-13, other-12)
dobj(lend-10, overnight-13)
punct(rate-2, ,-14)
root(ROOT-0, averaged-15)
advmod(2-19, about-16)
compound(2-19, 7-17)
compound(2-19, 1-18)
nummod(%-20, 2-19)
dobj(averaged-15, %-20)
punct(%-20, ,-21)
advmod(%-20, up-22)
case(%-25, from-23)
nummod(%-25, 7.42-24)
nmod:from(up-22, %-25)
nmod:tmod(%-25, Friday-26)
punct(averaged-15, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#overnight

lend :: An introduction by Edward Shils , the well-known sociologist of ideas -LRB- who has never been a radical -RRB- lends historical perspective to the collection ./.
det(introduction-2, An-1)
nsubj(lends-20, introduction-2)
case(Shils-5, by-3)
compound(Shils-5, Edward-4)
nmod:by(introduction-2, Shils-5)
punct(Shils-5, ,-6)
det(sociologist-9, the-7)
amod(sociologist-9, well-known-8)
appos(Shils-5, sociologist-9)
case(ideas-11, of-10)
nmod:of(sociologist-9, ideas-11)
punct(radical-18, -LRB--12)
nsubj(radical-18, who-13)
aux(radical-18, has-14)
neg(radical-18, never-15)
cop(radical-18, been-16)
det(radical-18, a-17)
dep(Shils-5, radical-18)
punct(radical-18, -RRB--19)
root(ROOT-0, lends-20)
amod(perspective-22, historical-21)
dobj(lends-20, perspective-22)
case(collection-25, to-23)
det(collection-25, the-24)
nmod:to(lends-20, collection-25)
punct(lends-20, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#perspective

lend :: A recently proposed $ 350 million loan , which would have cleared up most of these overdue payments , had to be scaled back to $ 330 million and is in danger of foundering , partly because banks have been slow to respond to the call to lend ./.
det(loan-7, A-1)
advmod(proposed-3, recently-2)
amod(loan-7, proposed-3)
amod(loan-7, $-4)
compound(million-6, 350-5)
nummod($-4, million-6)
nsubj(cleared-12, loan-7)
nsubj(had-20, loan-7)
nsubjpass:xsubj(scaled-23, loan-7)
punct(loan-7, ,-8)
ref(loan-7, which-9)
aux(cleared-12, would-10)
aux(cleared-12, have-11)
acl:relcl(loan-7, cleared-12)
compound:prt(cleared-12, up-13)
dobj(cleared-12, most-14)
case(payments-18, of-15)
det(payments-18, these-16)
amod(payments-18, overdue-17)
nmod:of(most-14, payments-18)
punct(loan-7, ,-19)
root(ROOT-0, had-20)
mark(scaled-23, to-21)
auxpass(scaled-23, be-22)
xcomp(had-20, scaled-23)
compound:prt(scaled-23, back-24)
case($-26, to-25)
nmod:to(scaled-23, $-26)
compound(million-28, 330-27)
nummod($-26, million-28)
cc(had-20, and-29)
cop(danger-32, is-30)
case(danger-32, in-31)
conj:and(had-20, danger-32)
case(foundering-34, of-33)
nmod:of(danger-32, foundering-34)
punct(danger-32, ,-35)
advmod(slow-41, partly-36)
mark(slow-41, because-37)
nsubj(slow-41, banks-38)
nsubj:xsubj(respond-43, banks-38)
aux(slow-41, have-39)
cop(slow-41, been-40)
advcl(danger-32, slow-41)
mark(respond-43, to-42)
xcomp(slow-41, respond-43)
case(call-46, to-44)
det(call-46, the-45)
nmod:to(respond-43, call-46)
mark(lend-48, to-47)
acl(call-46, lend-48)
punct(had-20, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

lend :: Mr. Camdessus said it was clearly in banks ' own interest to lend more and `` strengthen the value of -LRB- their -RRB- existing loan claims . ''/''
compound(Camdessus-2, Mr.-1)
nsubj(said-3, Camdessus-2)
root(ROOT-0, said-3)
nsubj(interest-11, it-4)
cop(interest-11, was-5)
advmod(interest-11, clearly-6)
case(interest-11, in-7)
nmod:poss(interest-11, banks-8)
case(banks-8, '-9)
amod(interest-11, own-10)
ccomp(said-3, interest-11)
mark(lend-13, to-12)
acl(interest-11, lend-13)
dobj(lend-13, more-14)
cc(lend-13, and-15)
punct(lend-13, ``-16)
acl(interest-11, strengthen-17)
conj:and(lend-13, strengthen-17)
det(value-19, the-18)
dobj(strengthen-17, value-19)
case(claims-26, of-20)
punct(their-22, -LRB--21)
nmod:poss(claims-26, their-22)
punct(their-22, -RRB--23)
amod(claims-26, existing-24)
compound(claims-26, loan-25)
nmod:of(value-19, claims-26)
punct(said-3, .-27)
punct(said-3, ''-28)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: lend#more

lend :: Third , the finding of the same basic pattern again and again , by a variety of researchers controlling for a host of other variables , lends credence to the view that the disparities reflect a real and robust phenomenon ./.
nsubj(lends-27, Third-1)
punct(Third-1, ,-2)
det(finding-4, the-3)
appos(Third-1, finding-4)
case(pattern-9, of-5)
det(pattern-9, the-6)
amod(pattern-9, same-7)
amod(pattern-9, basic-8)
nmod:of(finding-4, pattern-9)
advmod(finding-4, again-10)
cc(again-10, and-11)
advmod(finding-4, again-12)
conj:and(again-10, again-12)
punct(Third-1, ,-13)
case(variety-16, by-14)
det(variety-16, a-15)
nmod:by(Third-1, variety-16)
case(researchers-18, of-17)
nmod:of(variety-16, researchers-18)
acl(researchers-18, controlling-19)
case(host-22, for-20)
det(host-22, a-21)
nmod:for(controlling-19, host-22)
case(variables-25, of-23)
amod(variables-25, other-24)
nmod:of(host-22, variables-25)
punct(Third-1, ,-26)
root(ROOT-0, lends-27)
dobj(lends-27, credence-28)
case(view-31, to-29)
det(view-31, the-30)
nmod:to(lends-27, view-31)
mark(reflect-35, that-32)
det(disparities-34, the-33)
nsubj(reflect-35, disparities-34)
ccomp(view-31, reflect-35)
det(phenomenon-40, a-36)
amod(phenomenon-40, real-37)
cc(real-37, and-38)
conj:and(real-37, robust-39)
amod(phenomenon-40, robust-39)
dobj(reflect-35, phenomenon-40)
punct(lends-27, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#credence

lend :: Tokyo is using its overvalued yen to press for big state projects -- which lend themselves to large business contracts ./.
nsubj(using-3, Tokyo-1)
aux(using-3, is-2)
root(ROOT-0, using-3)
nmod:poss(yen-6, its-4)
amod(yen-6, overvalued-5)
dobj(using-3, yen-6)
mark(press-8, to-7)
advcl(using-3, press-8)
case(projects-12, for-9)
amod(projects-12, big-10)
compound(projects-12, state-11)
nmod:for(press-8, projects-12)
nsubj(lend-15, projects-12)
punct(projects-12, ---13)
ref(projects-12, which-14)
acl:relcl(projects-12, lend-15)
dobj(lend-15, themselves-16)
case(contracts-20, to-17)
amod(contracts-20, large-18)
compound(contracts-20, business-19)
nmod:to(lend-15, contracts-20)
punct(using-3, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#themselves

lend :: So the same Congress that runs a budget deficit so that foreigners have to lend us money wants to make it more difficult for foreigners to lend us money ./.
dep(wants-18, So-1)
det(Congress-4, the-2)
amod(Congress-4, same-3)
nsubj(runs-6, Congress-4)
nsubj(wants-18, Congress-4)
nsubj:xsubj(make-20, Congress-4)
ref(Congress-4, that-5)
acl:relcl(Congress-4, runs-6)
det(deficit-9, a-7)
compound(deficit-9, budget-8)
dobj(runs-6, deficit-9)
mark(have-13, so-10)
mwe(so-10, that-11)
nsubj(have-13, foreigners-12)
nsubj:xsubj(lend-15, foreigners-12)
advcl(runs-6, have-13)
mark(lend-15, to-14)
xcomp(have-13, lend-15)
iobj(lend-15, us-16)
dobj(lend-15, money-17)
root(ROOT-0, wants-18)
mark(make-20, to-19)
xcomp(wants-18, make-20)
nsubj(lend-27, it-21)
advmod(difficult-23, more-22)
dep(lend-27, difficult-23)
mark(lend-27, for-24)
nsubj(lend-27, foreigners-25)
mark(lend-27, to-26)
xcomp(make-20, lend-27)
iobj(lend-27, us-28)
dobj(lend-27, money-29)
punct(wants-18, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: Since late January , the Fed has pushed the rate on federal funds , or reserves banks lend one another overnight , down a quarter of a percentage point to 6 1 2 % and then back up to about 6 3 4 % ./.
case(January-3, Since-1)
amod(January-3, late-2)
nmod:since(pushed-8, January-3)
punct(pushed-8, ,-4)
det(Fed-6, the-5)
nsubj(pushed-8, Fed-6)
aux(pushed-8, has-7)
root(ROOT-0, pushed-8)
det(rate-10, the-9)
nsubj(lend-18, rate-10)
case(funds-13, on-11)
amod(funds-13, federal-12)
nmod:on(rate-10, funds-13)
punct(rate-10, ,-14)
cc(rate-10, or-15)
compound(banks-17, reserves-16)
conj:or(rate-10, banks-17)
nsubj(lend-18, banks-17)
ccomp(pushed-8, lend-18)
dobj(lend-18, one-19)
det(overnight-21, another-20)
dep(one-19, overnight-21)
punct(overnight-21, ,-22)
case(quarter-25, down-23)
det(quarter-25, a-24)
dep(one-19, quarter-25)
conj:and(overnight-21, quarter-25)
case(point-29, of-26)
det(point-29, a-27)
compound(point-29, percentage-28)
nmod:of(quarter-25, point-29)
case(%-34, to-30)
compound(2-33, 6-31)
compound(2-33, 1-32)
nummod(%-34, 2-33)
nmod:to(quarter-25, %-34)
cc(overnight-21, and-35)
advmod(back-37, then-36)
dep(one-19, back-37)
conj:and(overnight-21, back-37)
case(%-44, up-38)
case(%-44, to-39)
advmod(3-42, about-40)
compound(3-42, 6-41)
nummod(%-44, 3-42)
nummod(%-44, 4-43)
nmod:to(back-37, %-44)
punct(pushed-8, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#one

lend :: The Farm Credit System Assistance Board said the government will provide more than $ 20.5 million to pay off stockholders in six lending units now being liquidated ./.
det(Board-6, The-1)
compound(Board-6, Farm-2)
compound(Board-6, Credit-3)
compound(Board-6, System-4)
compound(Board-6, Assistance-5)
nsubj(said-7, Board-6)
root(ROOT-0, said-7)
det(government-9, the-8)
nsubj(provide-11, government-9)
aux(provide-11, will-10)
ccomp(said-7, provide-11)
advmod($-14, more-12)
mwe(more-12, than-13)
dobj(provide-11, $-14)
compound(million-16, 20.5-15)
nummod($-14, million-16)
mark(pay-18, to-17)
advcl(provide-11, pay-18)
compound:prt(pay-18, off-19)
dobj(pay-18, stockholders-20)
case(units-24, in-21)
nummod(units-24, six-22)
compound(units-24, lending-23)
nmod:in(pay-18, units-24)
advmod(liquidated-27, now-25)
auxpass(liquidated-27, being-26)
acl(units-24, liquidated-27)
punct(said-7, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

lend :: The IDA also will lend $ 17.6 million to the Yemen Arab Republic for agricultural projects ./.
det(IDA-2, The-1)
nsubj(lend-5, IDA-2)
advmod(lend-5, also-3)
aux(lend-5, will-4)
root(ROOT-0, lend-5)
dobj(lend-5, $-6)
compound(million-8, 17.6-7)
nummod($-6, million-8)
case(Republic-13, to-9)
det(Republic-13, the-10)
compound(Republic-13, Yemen-11)
compound(Republic-13, Arab-12)
nmod:to(lend-5, Republic-13)
case(projects-16, for-14)
amod(projects-16, agricultural-15)
nmod:for(lend-5, projects-16)
punct(lend-5, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#$

lend :: The Federal Home Loan Bank Board , as expected , adopted a resolution intended to reassure Wall Street firms that have lent about $ 12.6 billion to the thrift unit of troubled Financial Corp. of America ./.
det(Board-6, The-1)
compound(Board-6, Federal-2)
compound(Board-6, Home-3)
compound(Board-6, Loan-4)
compound(Board-6, Bank-5)
nsubj(adopted-11, Board-6)
punct(adopted-11, ,-7)
mark(expected-9, as-8)
dep(adopted-11, expected-9)
punct(adopted-11, ,-10)
root(ROOT-0, adopted-11)
det(resolution-13, a-12)
dobj(adopted-11, resolution-13)
acl(resolution-13, intended-14)
mark(reassure-16, to-15)
xcomp(intended-14, reassure-16)
compound(firms-19, Wall-17)
compound(firms-19, Street-18)
dobj(reassure-16, firms-19)
nsubj(lent-22, firms-19)
ref(firms-19, that-20)
aux(lent-22, have-21)
acl:relcl(firms-19, lent-22)
advmod($-24, about-23)
dobj(lent-22, $-24)
compound(billion-26, 12.6-25)
nummod($-24, billion-26)
case(unit-30, to-27)
det(unit-30, the-28)
compound(unit-30, thrift-29)
nmod:to(lent-22, unit-30)
case(Corp.-34, of-31)
amod(Corp.-34, troubled-32)
compound(Corp.-34, Financial-33)
nmod:of(unit-30, Corp.-34)
case(America-36, of-35)
nmod:of(Corp.-34, America-36)
punct(adopted-11, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#$

lend :: Oh , for the day when we all drive Yugos to our stagnant jobs , secure in the knowledge that no one will lend us money ./.
discourse(secure-16, Oh-1)
punct(secure-16, ,-2)
case(day-5, for-3)
det(day-5, the-4)
nmod:for(secure-16, day-5)
advmod(drive-9, when-6)
nsubj(drive-9, we-7)
det(we-7, all-8)
acl:relcl(day-5, drive-9)
dobj(drive-9, Yugos-10)
case(jobs-14, to-11)
nmod:poss(jobs-14, our-12)
amod(jobs-14, stagnant-13)
nmod:to(drive-9, jobs-14)
punct(secure-16, ,-15)
root(ROOT-0, secure-16)
case(knowledge-19, in-17)
det(knowledge-19, the-18)
nmod:in(secure-16, knowledge-19)
mark(lend-24, that-20)
neg(one-22, no-21)
nsubj(lend-24, one-22)
aux(lend-24, will-23)
ccomp(knowledge-19, lend-24)
compound(money-26, us-25)
dobj(lend-24, money-26)
punct(secure-16, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: Hiring British bankers is helping Japanese financial institutions develop lending business with medium-sized corporate borrowers ./.
csubj(helping-5, Hiring-1)
amod(bankers-3, British-2)
dobj(Hiring-1, bankers-3)
aux(helping-5, is-4)
root(ROOT-0, helping-5)
amod(institutions-8, Japanese-6)
amod(institutions-8, financial-7)
nsubj(develop-9, institutions-8)
ccomp(helping-5, develop-9)
compound(business-11, lending-10)
dobj(develop-9, business-11)
case(borrowers-15, with-12)
amod(borrowers-15, medium-sized-13)
amod(borrowers-15, corporate-14)
nmod:with(develop-9, borrowers-15)
punct(helping-5, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

lend :: The constitutions of our states commonly forbid lending the credit of the state to private firms , although in recent years tax-abatement and industrial-development incentives have been common exceptions to the general rule ./.
det(constitutions-2, The-1)
nsubj(forbid-7, constitutions-2)
case(states-5, of-3)
nmod:poss(states-5, our-4)
nmod:of(constitutions-2, states-5)
advmod(forbid-7, commonly-6)
root(ROOT-0, forbid-7)
xcomp(forbid-7, lending-8)
det(credit-10, the-9)
dobj(lending-8, credit-10)
case(state-13, of-11)
det(state-13, the-12)
nmod:of(credit-10, state-13)
case(firms-16, to-14)
amod(firms-16, private-15)
nmod:to(lending-8, firms-16)
punct(forbid-7, ,-17)
mark(exceptions-29, although-18)
case(years-21, in-19)
amod(years-21, recent-20)
nmod:in(exceptions-29, years-21)
compound(incentives-25, tax-abatement-22)
cc(tax-abatement-22, and-23)
conj:and(tax-abatement-22, industrial-development-24)
compound(incentives-25, industrial-development-24)
nsubj(exceptions-29, incentives-25)
aux(exceptions-29, have-26)
cop(exceptions-29, been-27)
amod(exceptions-29, common-28)
advcl(forbid-7, exceptions-29)
case(rule-33, to-30)
det(rule-33, the-31)
amod(rule-33, general-32)
nmod:to(exceptions-29, rule-33)
punct(forbid-7, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#state

lend :: Mexico wants to be able to borrow from international banks again , and retiring its bank debt at about 70 cents on the dollar may discourage many banks from lending it more money , bankers said ./.
nsubj(wants-2, Mexico-1)
nsubj:xsubj(able-5, Mexico-1)
ccomp(said-36, wants-2)
mark(able-5, to-3)
cop(able-5, be-4)
xcomp(wants-2, able-5)
mark(borrow-7, to-6)
xcomp(able-5, borrow-7)
case(banks-10, from-8)
amod(banks-10, international-9)
nmod:from(borrow-7, banks-10)
advmod(borrow-7, again-11)
punct(wants-2, ,-12)
cc(wants-2, and-13)
csubj(discourage-26, retiring-14)
nmod:poss(debt-17, its-15)
compound(debt-17, bank-16)
dobj(retiring-14, debt-17)
case(cents-21, at-18)
advmod(70-20, about-19)
nummod(cents-21, 70-20)
nmod:at(retiring-14, cents-21)
case(dollar-24, on-22)
det(dollar-24, the-23)
nmod:on(cents-21, dollar-24)
aux(discourage-26, may-25)
conj:and(wants-2, discourage-26)
ccomp(said-36, discourage-26)
amod(banks-28, many-27)
dobj(discourage-26, banks-28)
mark(lending-30, from-29)
advcl(discourage-26, lending-30)
iobj(lending-30, it-31)
amod(money-33, more-32)
dobj(lending-30, money-33)
punct(said-36, ,-34)
nsubj(said-36, bankers-35)
root(ROOT-0, said-36)
punct(said-36, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: Other gems include stories about why Colgate-Palmolive 's Soaky bubble bath proved a marketplace dud -LRB- the suds went flat when kids urinated in the bathwater -RRB- , and how Norton Simon made a bundle by outwitting its bankers -LRB- anticipating higher interest rates , the company sold $ 250 million in debentures at 9.5 % in 1979 , and a year later lent the money at 17 % and 18 % to the same institutions , such as the Bank of America , that had bought the bonds -RRB- ./.
amod(gems-2, Other-1)
nsubj(include-3, gems-2)
root(ROOT-0, include-3)
dobj(include-3, stories-4)
mark(proved-12, about-5)
advmod(proved-12, why-6)
nmod:poss(bath-11, Colgate-Palmolive-7)
case(Colgate-Palmolive-7, 's-8)
compound(bath-11, Soaky-9)
compound(bath-11, bubble-10)
nsubj(proved-12, bath-11)
acl(stories-4, proved-12)
det(dud-15, a-13)
compound(dud-15, marketplace-14)
dobj(proved-12, dud-15)
punct(went-19, -LRB--16)
det(suds-18, the-17)
nsubj(went-19, suds-18)
dep(dud-15, went-19)
xcomp(went-19, flat-20)
advmod(urinated-23, when-21)
nsubj(urinated-23, kids-22)
advcl(went-19, urinated-23)
case(bathwater-26, in-24)
det(bathwater-26, the-25)
nmod:in(urinated-23, bathwater-26)
punct(went-19, -RRB--27)
punct(include-3, ,-28)
cc(include-3, and-29)
advmod(made-33, how-30)
compound(Simon-32, Norton-31)
nsubj(made-33, Simon-32)
conj:and(include-3, made-33)
det(bundle-35, a-34)
dobj(made-33, bundle-35)
mark(outwitting-37, by-36)
advcl(made-33, outwitting-37)
nmod:poss(bankers-39, its-38)
dobj(outwitting-37, bankers-39)
punct(anticipating-41, -LRB--40)
dep(outwitting-37, anticipating-41)
amod(rates-44, higher-42)
compound(rates-44, interest-43)
dobj(anticipating-41, rates-44)
punct(anticipating-41, ,-45)
det(company-47, the-46)
nsubj(sold-48, company-47)
dep(outwitting-37, sold-48)
conj:and(anticipating-41, sold-48)
dobj(sold-48, $-49)
compound(million-51, 250-50)
nummod($-49, million-51)
case(debentures-53, in-52)
nmod:in($-49, debentures-53)
case(%-56, at-54)
nummod(%-56, 9.5-55)
nmod:at(sold-48, %-56)
case(1979-58, in-57)
nmod:in(sold-48, 1979-58)
punct(anticipating-41, ,-59)
cc(anticipating-41, and-60)
det(year-62, a-61)
nmod:npmod(later-63, year-62)
advmod(lent-64, later-63)
dep(outwitting-37, lent-64)
conj:and(anticipating-41, lent-64)
det(money-66, the-65)
dobj(lent-64, money-66)
case(%-69, at-67)
nummod(%-69, 17-68)
nmod:at(lent-64, %-69)
cc(anticipating-41, and-70)
nummod(%-72, 18-71)
dep(outwitting-37, %-72)
conj:and(anticipating-41, %-72)
case(institutions-76, to-73)
det(institutions-76, the-74)
amod(institutions-76, same-75)
nmod:to(%-72, institutions-76)
punct(anticipating-41, ,-77)
case(Bank-81, such-78)
mwe(such-78, as-79)
det(Bank-81, the-80)
nmod:such_as(anticipating-41, Bank-81)
nsubj(bought-87, Bank-81)
case(America-83, of-82)
nmod:of(Bank-81, America-83)
punct(Bank-81, ,-84)
ref(Bank-81, that-85)
aux(bought-87, had-86)
acl:relcl(Bank-81, bought-87)
det(bonds-89, the-88)
dobj(bought-87, bonds-89)
punct(anticipating-41, -RRB--90)
punct(include-3, .-91)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: Mr. Genscher and his Free Democratic Party have lent support to such efforts by pursuing a detentist line ./.
compound(Genscher-2, Mr.-1)
nsubj(lent-9, Genscher-2)
cc(Genscher-2, and-3)
nmod:poss(Party-7, his-4)
amod(Party-7, Free-5)
amod(Party-7, Democratic-6)
conj:and(Genscher-2, Party-7)
nsubj(lent-9, Party-7)
aux(lent-9, have-8)
root(ROOT-0, lent-9)
dobj(lent-9, support-10)
case(efforts-13, to-11)
amod(efforts-13, such-12)
nmod:to(lent-9, efforts-13)
mark(pursuing-15, by-14)
advcl(lent-9, pursuing-15)
det(line-18, a-16)
amod(line-18, detentist-17)
dobj(pursuing-15, line-18)
punct(lent-9, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#support

lend :: Federal law prohibits banks from lending to federal campaigns except `` on a basis which assures repayment , '' wording which at least some FEC commissioners interpret as requiring a firm pledge of existing collateral ./.
amod(law-2, Federal-1)
nsubj(prohibits-3, law-2)
root(ROOT-0, prohibits-3)
dobj(prohibits-3, banks-4)
mark(lending-6, from-5)
advcl(prohibits-3, lending-6)
case(campaigns-9, to-7)
amod(campaigns-9, federal-8)
nmod:to(lending-6, campaigns-9)
case(wording-20, except-10)
punct(wording-20, ``-11)
case(basis-14, on-12)
det(basis-14, a-13)
nsubj(assures-16, basis-14)
nmod:on(wording-20, basis-14)
ref(basis-14, which-15)
acl:relcl(basis-14, assures-16)
dobj(assures-16, repayment-17)
punct(wording-20, ,-18)
punct(wording-20, ''-19)
nmod:except(lending-6, wording-20)
dobj(interpret-27, wording-20)
ref(wording-20, which-21)
case(least-23, at-22)
advmod(commissioners-26, least-23)
det(commissioners-26, some-24)
compound(commissioners-26, FEC-25)
nsubj(interpret-27, commissioners-26)
acl:relcl(wording-20, interpret-27)
mark(requiring-29, as-28)
advcl(interpret-27, requiring-29)
det(pledge-32, a-30)
amod(pledge-32, firm-31)
dobj(requiring-29, pledge-32)
case(collateral-35, of-33)
amod(collateral-35, existing-34)
nmod:of(pledge-32, collateral-35)
punct(prohibits-3, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#campaigns

lend :: The company had a $ 14.24 billion working capital surplus at year end , but $ 13.98 billion of that came from money lent by GMAC to the parent , which took over financing of wholesale sales to dealers ./.
det(company-2, The-1)
nsubj(had-3, company-2)
root(ROOT-0, had-3)
det(surplus-10, a-4)
amod(surplus-10, $-5)
compound(billion-7, 14.24-6)
nummod($-5, billion-7)
compound(surplus-10, working-8)
compound(surplus-10, capital-9)
dobj(had-3, surplus-10)
case(end-13, at-11)
compound(end-13, year-12)
nmod:at(had-3, end-13)
punct(had-3, ,-14)
cc(had-3, but-15)
nsubj(came-21, $-16)
compound(billion-18, 13.98-17)
nummod($-16, billion-18)
case(that-20, of-19)
nmod:of($-16, that-20)
conj:but(had-3, came-21)
case(money-23, from-22)
nmod:from(came-21, money-23)
acl(money-23, lent-24)
case(GMAC-26, by-25)
nmod:by(lent-24, GMAC-26)
case(parent-29, to-27)
det(parent-29, the-28)
nmod:to(lent-24, parent-29)
nsubj(took-32, parent-29)
punct(parent-29, ,-30)
ref(parent-29, which-31)
acl:relcl(parent-29, took-32)
compound:prt(took-32, over-33)
dobj(took-32, financing-34)
case(sales-37, of-35)
amod(sales-37, wholesale-36)
nmod:of(financing-34, sales-37)
case(dealers-39, to-38)
nmod:to(financing-34, dealers-39)
punct(had-3, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#gmac

lend :: Although foreign exchange traders had been awaiting Mr. Greenspan 's testimony in the hope it would lend the currency market some long-sought direction , most said his statements had a neutral impact ./.
mark(awaiting-7, Although-1)
amod(traders-4, foreign-2)
compound(traders-4, exchange-3)
nsubj(awaiting-7, traders-4)
aux(awaiting-7, had-5)
aux(awaiting-7, been-6)
advcl(said-26, awaiting-7)
compound(Greenspan-9, Mr.-8)
nmod:poss(testimony-11, Greenspan-9)
case(Greenspan-9, 's-10)
dobj(awaiting-7, testimony-11)
case(hope-14, in-12)
det(hope-14, the-13)
nmod:in(testimony-11, hope-14)
nsubj(lend-17, it-15)
aux(lend-17, would-16)
ccomp(hope-14, lend-17)
det(market-20, the-18)
compound(market-20, currency-19)
iobj(lend-17, market-20)
det(direction-23, some-21)
amod(direction-23, long-sought-22)
dobj(lend-17, direction-23)
punct(said-26, ,-24)
nsubj(said-26, most-25)
root(ROOT-0, said-26)
nmod:poss(statements-28, his-27)
nsubj(had-29, statements-28)
ccomp(said-26, had-29)
det(impact-32, a-30)
amod(impact-32, neutral-31)
dobj(had-29, impact-32)
punct(said-26, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#direction

lend :: But earlier , the real estate concern said its financial adviser , First Boston Corp . , had agreed to lend as much as $ 900 million in short-term subordinated debt , in addition to $ 200 million of `` bridge loans . ''/''
cc(said-8, But-1)
advmod(said-8, earlier-2)
punct(said-8, ,-3)
det(concern-7, the-4)
amod(concern-7, real-5)
compound(concern-7, estate-6)
nsubj(said-8, concern-7)
root(ROOT-0, said-8)
nmod:poss(adviser-11, its-9)
amod(adviser-11, financial-10)
nsubj(said-8, adviser-11)
punct(adviser-11, ,-12)
compound(Corp-15, First-13)
compound(Corp-15, Boston-14)
appos(adviser-11, Corp-15)
punct(said-8, .-16)
punct(agreed-3, ,-1)
aux(agreed-3, had-2)
root(ROOT-0, agreed-3)
mark(lend-5, to-4)
xcomp(agreed-3, lend-5)
advmod($-9, as-6)
advmod($-9, much-7)
advmod($-9, as-8)
dobj(lend-5, $-9)
compound(million-11, 900-10)
nummod($-9, million-11)
case(debt-15, in-12)
amod(debt-15, short-term-13)
amod(debt-15, subordinated-14)
nmod:in($-9, debt-15)
punct(lend-5, ,-16)
case($-20, in-17)
mwe(in-17, addition-18)
mwe(in-17, to-19)
nmod:in_addition_to(lend-5, $-20)
compound(million-22, 200-21)
nummod($-20, million-22)
case(loans-26, of-23)
punct(loans-26, ``-24)
amod(loans-26, bridge-25)
nmod:of($-20, loans-26)
punct(agreed-3, .-27)
punct(agreed-3, ''-28)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: lend#loans

lend :: The funds rate , which is the rate on reserves that banks lend each other overnight , strongly influences many other rates , including those that dealers must pay to finance their bond holdings ./.
det(rate-3, The-1)
compound(rate-3, funds-2)
nsubj(rate-8, rate-3)
nsubj(influences-19, rate-3)
punct(rate-3, ,-4)
ref(rate-3, which-5)
cop(rate-8, is-6)
det(rate-8, the-7)
acl:relcl(rate-3, rate-8)
case(reserves-10, on-9)
nmod:on(rate-8, reserves-10)
mark(lend-13, that-11)
nsubj(lend-13, banks-12)
ccomp(reserves-10, lend-13)
det(overnight-16, each-14)
amod(overnight-16, other-15)
dobj(lend-13, overnight-16)
punct(rate-3, ,-17)
advmod(influences-19, strongly-18)
root(ROOT-0, influences-19)
amod(rates-22, many-20)
amod(rates-22, other-21)
dobj(influences-19, rates-22)
punct(rates-22, ,-23)
case(those-25, including-24)
nmod:including(rates-22, those-25)
mark(pay-29, that-26)
nsubj(pay-29, dealers-27)
nsubj:xsubj(finance-31, dealers-27)
aux(pay-29, must-28)
ccomp(those-25, pay-29)
mark(finance-31, to-30)
xcomp(pay-29, finance-31)
nmod:poss(holdings-34, their-32)
compound(holdings-34, bond-33)
dobj(finance-31, holdings-34)
punct(influences-19, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#overnight

lend :: The revised terms stem from ITT 's review of Portland , Ore.-based American Network 's operations , including actual and expected losses , plus ITT 's plan to lend the company short-term financing ./.
det(terms-3, The-1)
amod(terms-3, revised-2)
nsubj(stem-4, terms-3)
root(ROOT-0, stem-4)
case(review-8, from-5)
nmod:poss(review-8, ITT-6)
case(ITT-6, 's-7)
nmod:from(stem-4, review-8)
case(Portland-10, of-9)
nmod:of(review-8, Portland-10)
punct(Portland-10, ,-11)
amod(Network-14, Ore.-based-12)
amod(Network-14, American-13)
nmod:poss(operations-16, Network-14)
case(Network-14, 's-15)
appos(Portland-10, operations-16)
punct(Portland-10, ,-17)
case(losses-22, including-18)
amod(losses-22, actual-19)
cc(actual-19, and-20)
conj:and(actual-19, expected-21)
amod(losses-22, expected-21)
nmod:including(Portland-10, losses-22)
punct(losses-22, ,-23)
cc(losses-22, plus-24)
nmod:poss(plan-27, ITT-25)
case(ITT-25, 's-26)
nmod:including(Portland-10, plan-27)
conj:plus(losses-22, plan-27)
mark(lend-29, to-28)
acl(plan-27, lend-29)
det(company-31, the-30)
iobj(lend-29, company-31)
amod(financing-33, short-term-32)
dobj(lend-29, financing-33)
punct(stem-4, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#financing

lend :: Edward J. DeBartolo , a Youngstown , Ohio , shopping store operator , has agreed to lend Campeau 's U.S. holding company $ 400 million for the Federated bid ./.
compound(DeBartolo-3, Edward-1)
compound(DeBartolo-3, J.-2)
nsubj(agreed-15, DeBartolo-3)
nsubj:xsubj(lend-17, DeBartolo-3)
punct(DeBartolo-3, ,-4)
det(operator-12, a-5)
dep(operator-12, Youngstown-6)
punct(Youngstown-6, ,-7)
dep(Youngstown-6, Ohio-8)
punct(Youngstown-6, ,-9)
compound(operator-12, shopping-10)
compound(operator-12, store-11)
appos(DeBartolo-3, operator-12)
punct(DeBartolo-3, ,-13)
aux(agreed-15, has-14)
root(ROOT-0, agreed-15)
mark(lend-17, to-16)
xcomp(agreed-15, lend-17)
nmod:poss(company-22, Campeau-18)
case(Campeau-18, 's-19)
compound(company-22, U.S.-20)
amod(company-22, holding-21)
iobj(lend-17, company-22)
dobj(lend-17, $-23)
compound(million-25, 400-24)
nummod($-23, million-25)
case(bid-29, for-26)
det(bid-29, the-27)
compound(bid-29, Federated-28)
nmod:for(lend-17, bid-29)
punct(agreed-15, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#$

lend :: The rate on funds , or reserves that banks lend each other overnight , averaged 5.80 % , according to an estimate by Fulton Prebon -LRB- U.S.A. -RRB-/-RRB-
det(rate-2, The-1)
nsubj(averaged-15, rate-2)
case(funds-4, on-3)
nmod:on(rate-2, funds-4)
punct(funds-4, ,-5)
cc(funds-4, or-6)
nmod:on(rate-2, reserves-7)
conj:or(funds-4, reserves-7)
mark(lend-10, that-8)
nsubj(lend-10, banks-9)
ccomp(reserves-7, lend-10)
det(overnight-13, each-11)
amod(overnight-13, other-12)
dobj(lend-10, overnight-13)
punct(rate-2, ,-14)
root(ROOT-0, averaged-15)
nummod(%-17, 5.80-16)
dobj(averaged-15, %-17)
punct(averaged-15, ,-18)
case(estimate-22, according-19)
mwe(according-19, to-20)
det(estimate-22, an-21)
nmod:according_to(averaged-15, estimate-22)
dep(estimate-22, by-23)
root(by-23, Fulton-24)
dep(Fulton-24, Prebon-25)
punct(U.S.A.-27, -LRB--26)
appos(Prebon-25, U.S.A.-27)
punct(U.S.A.-27, -RRB--28)
punct(Prebon-25, /-29)
punct(Fulton-24, -RRB--30)
Return str :: lend#overnight

lend :: They will change their attitude -- and will lend money to Brazil -- they have too much at stake not to , '' says Rimmer de Vries , chief international economist at Morgan Guaranty Trust Co ./.
nsubj(change-3, They-1)
nsubj(lend-9, They-1)
aux(change-3, will-2)
ccomp(says-24, change-3)
nmod:poss(attitude-5, their-4)
dobj(change-3, attitude-5)
punct(change-3, ---6)
cc(change-3, and-7)
aux(lend-9, will-8)
conj:and(change-3, lend-9)
ccomp(says-24, lend-9)
dobj(lend-9, money-10)
case(Brazil-12, to-11)
nmod:to(lend-9, Brazil-12)
punct(change-3, ---13)
nsubj(have-15, they-14)
parataxis(change-3, have-15)
advmod(much-17, too-16)
advmod(stake-19, much-17)
case(stake-19, at-18)
nmod:at(have-15, stake-19)
neg(stake-19, not-20)
dep(not-20, to-21)
punct(says-24, ,-22)
punct(says-24, ''-23)
root(ROOT-0, says-24)
compound(Vries-27, Rimmer-25)
compound(Vries-27, de-26)
nsubj(says-24, Vries-27)
punct(Vries-27, ,-28)
amod(economist-31, chief-29)
amod(economist-31, international-30)
appos(Vries-27, economist-31)
case(Co-36, at-32)
compound(Co-36, Morgan-33)
compound(Co-36, Guaranty-34)
compound(Co-36, Trust-35)
nmod:at(economist-31, Co-36)
punct(says-24, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: Manufacturers Hanover Ltd . , the London-based investment-banking unit of Manufacturers Hanover Corp . , is organizing banks to lend $ 160 million to Super Octanos C.A . , a 51 % Venezuelan state-owned joint venture ./.
compound(Ltd-3, Manufacturers-1)
compound(Ltd-3, Hanover-2)
root(ROOT-0, Ltd-3)
punct(Ltd-3, .-4)
root(ROOT-0, ,-1)
det(unit-5, the-2)
amod(unit-5, London-based-3)
compound(unit-5, investment-banking-4)
root(,-1, unit-5)
case(Corp-9, of-6)
compound(Corp-9, Manufacturers-7)
compound(Corp-9, Hanover-8)
nmod:of(unit-5, Corp-9)
punct(unit-5, .-10)
punct(organizing-3, ,-1)
aux(organizing-3, is-2)
root(ROOT-0, organizing-3)
dobj(organizing-3, banks-4)
nsubj:xsubj(lend-6, banks-4)
mark(lend-6, to-5)
xcomp(organizing-3, lend-6)
dobj(lend-6, $-7)
compound(million-9, 160-8)
nummod($-7, million-9)
case(C.A-13, to-10)
compound(C.A-13, Super-11)
compound(C.A-13, Octanos-12)
nmod:to(lend-6, C.A-13)
punct(organizing-3, .-14)
punct(venture-8, ,-1)
det(venture-8, a-2)
compound(%-4, 51-3)
amod(venture-8, %-4)
amod(venture-8, Venezuelan-5)
amod(venture-8, state-owned-6)
amod(venture-8, joint-7)
root(ROOT-0, venture-8)
punct(venture-8, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#$

lend :: The federal funds rate , which is the rate on reserves banks lend each other overnight , averaged 6.79 % Friday , according to Fulton Prebon -LRB- U.S.A. -RRB-/-RRB-
det(rate-4, The-1)
amod(rate-4, federal-2)
compound(rate-4, funds-3)
nsubj(rate-9, rate-4)
nsubj(lend-13, rate-4)
punct(rate-4, ,-5)
ref(rate-4, which-6)
cop(rate-9, is-7)
det(rate-9, the-8)
acl:relcl(rate-4, rate-9)
case(banks-12, on-10)
compound(banks-12, reserves-11)
nmod:on(rate-9, banks-12)
root(ROOT-0, lend-13)
det(overnight-16, each-14)
amod(overnight-16, other-15)
dobj(lend-13, overnight-16)
punct(lend-13, ,-17)
conj(lend-13, averaged-18)
nummod(%-20, 6.79-19)
dobj(averaged-18, %-20)
nmod:tmod(averaged-18, Friday-21)
punct(lend-13, ,-22)
advcl(lend-13, according-23)
mwe(according-23, to-24)
dep(according-23, Fulton-25)
dep(Fulton-25, Prebon-26)
punct(U.S.A.-28, -LRB--27)
appos(Prebon-26, U.S.A.-28)
punct(U.S.A.-28, -RRB--29)
punct(Prebon-26, /-30)
punct(Fulton-25, -RRB--31)
Return str :: lend#overnight

lend :: Colombia signed a $ 1 billion loan with 112 of its bank creditors , showing that banks still are willing to lend to the more-creditworthy Latin American countries ./.
nsubj(signed-2, Colombia-1)
root(ROOT-0, signed-2)
det(loan-7, a-3)
amod(loan-7, $-4)
compound(billion-6, 1-5)
nummod($-4, billion-6)
dobj(signed-2, loan-7)
case(112-9, with-8)
nmod:with(signed-2, 112-9)
case(creditors-13, of-10)
nmod:poss(creditors-13, its-11)
compound(creditors-13, bank-12)
nmod:of(112-9, creditors-13)
punct(signed-2, ,-14)
xcomp(signed-2, showing-15)
mark(willing-20, that-16)
nsubj(willing-20, banks-17)
nsubj:xsubj(lend-22, banks-17)
advmod(willing-20, still-18)
cop(willing-20, are-19)
ccomp(showing-15, willing-20)
mark(lend-22, to-21)
xcomp(willing-20, lend-22)
case(countries-28, to-23)
det(countries-28, the-24)
amod(countries-28, more-creditworthy-25)
amod(American-27, Latin-26)
amod(countries-28, American-27)
nmod:to(lend-22, countries-28)
punct(signed-2, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#banks

lend :: In any case , Mr. Luce pointed out , banks could be more reluctant to lend Texaco money in light of this huge new claim ./.
case(case-3, In-1)
det(case-3, any-2)
nmod:in(pointed-7, case-3)
punct(pointed-7, ,-4)
compound(Luce-6, Mr.-5)
nsubj(pointed-7, Luce-6)
root(ROOT-0, pointed-7)
compound:prt(pointed-7, out-8)
punct(pointed-7, ,-9)
nsubj(reluctant-14, banks-10)
nsubj:xsubj(lend-16, banks-10)
aux(reluctant-14, could-11)
cop(reluctant-14, be-12)
advmod(reluctant-14, more-13)
parataxis(pointed-7, reluctant-14)
mark(lend-16, to-15)
xcomp(reluctant-14, lend-16)
compound(money-18, Texaco-17)
dobj(lend-16, money-18)
case(light-20, in-19)
nmod:in(lend-16, light-20)
case(claim-25, of-21)
det(claim-25, this-22)
amod(claim-25, huge-23)
amod(claim-25, new-24)
nmod:of(light-20, claim-25)
punct(pointed-7, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: Among short-term interest rates , the rate on federal funds , or reserves banks lend each other overnight , averaged 6.81 % , according to Fulton Prebon -LRB- U.S.A -RRB- ./.
case(rates-4, Among-1)
amod(rates-4, short-term-2)
compound(rates-4, interest-3)
nmod:among(lend-15, rates-4)
punct(lend-15, ,-5)
det(rate-7, the-6)
nsubj(lend-15, rate-7)
case(funds-10, on-8)
amod(funds-10, federal-9)
nmod:on(rate-7, funds-10)
punct(rate-7, ,-11)
cc(rate-7, or-12)
compound(banks-14, reserves-13)
conj:or(rate-7, banks-14)
nsubj(lend-15, banks-14)
root(ROOT-0, lend-15)
det(overnight-18, each-16)
amod(overnight-18, other-17)
dobj(lend-15, overnight-18)
punct(lend-15, ,-19)
conj(lend-15, averaged-20)
nummod(%-22, 6.81-21)
dobj(averaged-20, %-22)
punct(lend-15, ,-23)
advcl(lend-15, according-24)
mwe(according-24, to-25)
dep(according-24, Fulton-26)
dep(Fulton-26, Prebon-27)
punct(U.S.A-29, -LRB--28)
appos(Prebon-27, U.S.A-29)
punct(U.S.A-29, -RRB--30)
punct(lend-15, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#overnight

lend :: Banks probably will raise their prime , or base , lending rates this spring or early this summer , according to Mellon Bank 's Mr. Robertson ./.
nsubj(raise-4, Banks-1)
advmod(raise-4, probably-2)
aux(raise-4, will-3)
root(ROOT-0, raise-4)
nmod:poss(rates-12, their-5)
amod(rates-12, prime-6)
punct(prime-6, ,-7)
cc(prime-6, or-8)
conj:or(prime-6, base-9)
amod(rates-12, base-9)
punct(prime-6, ,-10)
compound(rates-12, lending-11)
dobj(raise-4, rates-12)
det(spring-14, this-13)
nmod:tmod(raise-4, spring-14)
cc(spring-14, or-15)
advmod(summer-18, early-16)
det(summer-18, this-17)
nmod:tmod(raise-4, summer-18)
conj:or(spring-14, summer-18)
punct(raise-4, ,-19)
case(Robertson-26, according-20)
mwe(according-20, to-21)
compound(Bank-23, Mellon-22)
nmod:poss(Robertson-26, Bank-23)
case(Bank-23, 's-24)
compound(Robertson-26, Mr.-25)
nmod:according_to(raise-4, Robertson-26)
punct(raise-4, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

lend :: This does n't mean some situations wo n't lend themselves to symbols ./.
nsubj(mean-4, This-1)
aux(mean-4, does-2)
neg(mean-4, n't-3)
root(ROOT-0, mean-4)
det(situations-6, some-5)
nsubj(lend-9, situations-6)
aux(lend-9, wo-7)
neg(lend-9, n't-8)
ccomp(mean-4, lend-9)
dobj(lend-9, themselves-10)
case(symbols-12, to-11)
nmod:to(lend-9, symbols-12)
punct(mean-4, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#themselves

lend :: Donald Ogilvie , executive vice president of the American Bankers Association , hailed the Senate vote and said that it would lend `` momentum '' to advocates of similar legislation in the House ./.
compound(Ogilvie-2, Donald-1)
nsubj(hailed-13, Ogilvie-2)
nsubj(said-18, Ogilvie-2)
punct(Ogilvie-2, ,-3)
amod(president-6, executive-4)
compound(president-6, vice-5)
appos(Ogilvie-2, president-6)
case(Association-11, of-7)
det(Association-11, the-8)
compound(Association-11, American-9)
compound(Association-11, Bankers-10)
nmod:of(president-6, Association-11)
punct(Ogilvie-2, ,-12)
root(ROOT-0, hailed-13)
det(vote-16, the-14)
compound(vote-16, Senate-15)
dobj(hailed-13, vote-16)
cc(hailed-13, and-17)
conj:and(hailed-13, said-18)
mark(lend-22, that-19)
nsubj(lend-22, it-20)
aux(lend-22, would-21)
ccomp(said-18, lend-22)
punct(lend-22, ``-23)
dobj(lend-22, momentum-24)
punct(lend-22, ''-25)
case(advocates-27, to-26)
nmod:to(lend-22, advocates-27)
case(legislation-30, of-28)
amod(legislation-30, similar-29)
nmod:of(advocates-27, legislation-30)
case(House-33, in-31)
det(House-33, the-32)
nmod:in(legislation-30, House-33)
punct(hailed-13, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#momentum

lend :: One branch of Superior Training Services , an Indianapolis-based career-school chain , showed $ 24 million in defaults , or 44 % of the money lent to its students , in a state governments ' study ./.
nummod(branch-2, One-1)
nsubj(showed-13, branch-2)
case(Services-6, of-3)
amod(Services-6, Superior-4)
compound(Services-6, Training-5)
nmod:of(branch-2, Services-6)
punct(branch-2, ,-7)
det(chain-11, an-8)
amod(chain-11, Indianapolis-based-9)
compound(chain-11, career-school-10)
appos(branch-2, chain-11)
punct(branch-2, ,-12)
root(ROOT-0, showed-13)
nsubj(lent-26, $-14)
compound(million-16, 24-15)
nummod($-14, million-16)
case(defaults-18, in-17)
nmod:in($-14, defaults-18)
punct($-14, ,-19)
cc($-14, or-20)
nummod(%-22, 44-21)
conj:or($-14, %-22)
nsubj(lent-26, %-22)
case(money-25, of-23)
det(money-25, the-24)
nmod:of(%-22, money-25)
ccomp(showed-13, lent-26)
case(students-29, to-27)
nmod:poss(students-29, its-28)
nmod:to(lent-26, students-29)
punct(lent-26, ,-30)
case(study-36, in-31)
det(governments-34, a-32)
compound(governments-34, state-33)
nmod:poss(study-36, governments-34)
case(governments-34, '-35)
nmod:in(lent-26, study-36)
punct(showed-13, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#$

lend :: The Federal Home Loan Bank Board , as expected , adopted a resolution intended to reassure Wall Street firms that have lent about $ 12.6 billion to the thrift unit of troubled Financial Corp. of America ./.
det(Board-6, The-1)
compound(Board-6, Federal-2)
compound(Board-6, Home-3)
compound(Board-6, Loan-4)
compound(Board-6, Bank-5)
nsubj(adopted-11, Board-6)
punct(adopted-11, ,-7)
mark(expected-9, as-8)
dep(adopted-11, expected-9)
punct(adopted-11, ,-10)
root(ROOT-0, adopted-11)
det(resolution-13, a-12)
dobj(adopted-11, resolution-13)
acl(resolution-13, intended-14)
mark(reassure-16, to-15)
xcomp(intended-14, reassure-16)
compound(firms-19, Wall-17)
compound(firms-19, Street-18)
dobj(reassure-16, firms-19)
nsubj(lent-22, firms-19)
ref(firms-19, that-20)
aux(lent-22, have-21)
acl:relcl(firms-19, lent-22)
advmod($-24, about-23)
dobj(lent-22, $-24)
compound(billion-26, 12.6-25)
nummod($-24, billion-26)
case(unit-30, to-27)
det(unit-30, the-28)
compound(unit-30, thrift-29)
nmod:to(lent-22, unit-30)
case(Corp.-34, of-31)
amod(Corp.-34, troubled-32)
compound(Corp.-34, Financial-33)
nmod:of(unit-30, Corp.-34)
case(America-36, of-35)
nmod:of(Corp.-34, America-36)
punct(adopted-11, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#$

lend :: Mexico wants to be able to borrow from international banks again , and retiring its bank debt at about 70 cents on the dollar may discourage many banks from lending it more money , bankers said ./.
nsubj(wants-2, Mexico-1)
nsubj:xsubj(able-5, Mexico-1)
ccomp(said-36, wants-2)
mark(able-5, to-3)
cop(able-5, be-4)
xcomp(wants-2, able-5)
mark(borrow-7, to-6)
xcomp(able-5, borrow-7)
case(banks-10, from-8)
amod(banks-10, international-9)
nmod:from(borrow-7, banks-10)
advmod(borrow-7, again-11)
punct(wants-2, ,-12)
cc(wants-2, and-13)
csubj(discourage-26, retiring-14)
nmod:poss(debt-17, its-15)
compound(debt-17, bank-16)
dobj(retiring-14, debt-17)
case(cents-21, at-18)
advmod(70-20, about-19)
nummod(cents-21, 70-20)
nmod:at(retiring-14, cents-21)
case(dollar-24, on-22)
det(dollar-24, the-23)
nmod:on(cents-21, dollar-24)
aux(discourage-26, may-25)
conj:and(wants-2, discourage-26)
ccomp(said-36, discourage-26)
amod(banks-28, many-27)
dobj(discourage-26, banks-28)
mark(lending-30, from-29)
advcl(discourage-26, lending-30)
iobj(lending-30, it-31)
amod(money-33, more-32)
dobj(lending-30, money-33)
punct(said-36, ,-34)
nsubj(said-36, bankers-35)
root(ROOT-0, said-36)
punct(said-36, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: The Department of Labor has stirred up a storm of controversy with proposed regulations that would govern how qualified pension plans , including 401 -LRB- k -RRB- savings arrangements , could lend money to participating employees ./.
det(Department-2, The-1)
nsubj(stirred-6, Department-2)
case(Labor-4, of-3)
nmod:of(Department-2, Labor-4)
aux(stirred-6, has-5)
root(ROOT-0, stirred-6)
compound:prt(stirred-6, up-7)
det(storm-9, a-8)
dobj(stirred-6, storm-9)
case(controversy-11, of-10)
nmod:of(storm-9, controversy-11)
case(regulations-14, with-12)
amod(regulations-14, proposed-13)
nmod:with(stirred-6, regulations-14)
nsubj(govern-17, regulations-14)
ref(regulations-14, that-15)
aux(govern-17, would-16)
acl:relcl(regulations-14, govern-17)
advmod(qualified-19, how-18)
dep(lend-32, qualified-19)
compound(plans-21, pension-20)
nsubj(lend-32, plans-21)
punct(plans-21, ,-22)
case(arrangements-29, including-23)
nummod(arrangements-29, 401-24)
punct(arrangements-29, -LRB--25)
compound(arrangements-29, k-26)
punct(arrangements-29, -RRB--27)
compound(arrangements-29, savings-28)
nmod:including(plans-21, arrangements-29)
punct(plans-21, ,-30)
aux(lend-32, could-31)
ccomp(govern-17, lend-32)
dobj(lend-32, money-33)
case(employees-36, to-34)
amod(employees-36, participating-35)
nmod:to(lend-32, employees-36)
punct(stirred-6, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: Federal regulators are expected to issue a statement as early as this week intended to reassure nervous Wall Street firms who have lent more than $ 10 billion to the thrift unit of deeply troubled Financial Corp. of America , Wall Street executives said ./.
amod(regulators-2, Federal-1)
nsubjpass(expected-4, regulators-2)
nsubj:xsubj(issue-6, regulators-2)
auxpass(expected-4, are-3)
ccomp(said-44, expected-4)
mark(issue-6, to-5)
xcomp(expected-4, issue-6)
det(statement-8, a-7)
dobj(issue-6, statement-8)
advmod(early-10, as-9)
advmod(issue-6, early-10)
mark(intended-14, as-11)
det(week-13, this-12)
nmod:tmod(intended-14, week-13)
advcl(early-10, intended-14)
mark(reassure-16, to-15)
xcomp(intended-14, reassure-16)
amod(firms-20, nervous-17)
compound(firms-20, Wall-18)
compound(firms-20, Street-19)
dobj(reassure-16, firms-20)
nsubj(lent-23, firms-20)
ref(firms-20, who-21)
aux(lent-23, have-22)
acl:relcl(firms-20, lent-23)
advmod($-26, more-24)
mwe(more-24, than-25)
dobj(lent-23, $-26)
compound(billion-28, 10-27)
nummod($-26, billion-28)
case(unit-32, to-29)
det(unit-32, the-30)
compound(unit-32, thrift-31)
nmod:to(lent-23, unit-32)
case(Corp.-37, of-33)
advmod(troubled-35, deeply-34)
amod(Corp.-37, troubled-35)
compound(Corp.-37, Financial-36)
nmod:of(unit-32, Corp.-37)
case(America-39, of-38)
nmod:of(Corp.-37, America-39)
punct(said-44, ,-40)
compound(executives-43, Wall-41)
compound(executives-43, Street-42)
nsubj(said-44, executives-43)
root(ROOT-0, said-44)
punct(said-44, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#$

lend :: Regulators are expected to issue soon a statement to reassure firms that have lent to the thrift unit of troubled Financial Corp. of America ./.
nsubjpass(expected-3, Regulators-1)
nsubj:xsubj(issue-5, Regulators-1)
auxpass(expected-3, are-2)
root(ROOT-0, expected-3)
mark(issue-5, to-4)
xcomp(expected-3, issue-5)
advmod(statement-8, soon-6)
det(statement-8, a-7)
dobj(issue-5, statement-8)
mark(reassure-10, to-9)
acl(statement-8, reassure-10)
dobj(reassure-10, firms-11)
nsubj(lent-14, firms-11)
ref(firms-11, that-12)
aux(lent-14, have-13)
acl:relcl(firms-11, lent-14)
case(unit-18, to-15)
det(unit-18, the-16)
compound(unit-18, thrift-17)
nmod:to(lent-14, unit-18)
case(Corp.-22, of-19)
amod(Corp.-22, troubled-20)
compound(Corp.-22, Financial-21)
nmod:of(unit-18, Corp.-22)
case(America-24, of-23)
nmod:of(Corp.-22, America-24)
punct(expected-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#firms

lend :: So if he wants to return the federal money , his only option seems to be to find a friendly banker who will lend him the $ 6 million without collateral , on the strength of his predicted future receipts and his prodigious reputation for raising money when he was in the television religion business ./.
advmod(seems-14, So-1)
mark(wants-4, if-2)
nsubj(wants-4, he-3)
nsubj:xsubj(return-6, he-3)
advcl(seems-14, wants-4)
mark(return-6, to-5)
xcomp(wants-4, return-6)
det(money-9, the-7)
amod(money-9, federal-8)
dobj(return-6, money-9)
punct(seems-14, ,-10)
nmod:poss(option-13, his-11)
amod(option-13, only-12)
nsubj(seems-14, option-13)
nsubj:xsubj(be-16, option-13)
root(ROOT-0, seems-14)
mark(be-16, to-15)
xcomp(seems-14, be-16)
mark(find-18, to-17)
xcomp(be-16, find-18)
det(banker-21, a-19)
amod(banker-21, friendly-20)
dobj(find-18, banker-21)
nsubj(lend-24, banker-21)
ref(banker-21, who-22)
aux(lend-24, will-23)
acl:relcl(banker-21, lend-24)
iobj(lend-24, him-25)
det($-27, the-26)
dobj(lend-24, $-27)
compound(million-29, 6-28)
nummod($-27, million-29)
case(collateral-31, without-30)
nmod:without(lend-24, collateral-31)
punct(lend-24, ,-32)
case(strength-35, on-33)
det(strength-35, the-34)
nmod:on(lend-24, strength-35)
case(receipts-40, of-36)
nmod:poss(receipts-40, his-37)
amod(receipts-40, predicted-38)
compound(receipts-40, future-39)
nmod:of(strength-35, receipts-40)
cc(receipts-40, and-41)
nmod:poss(reputation-44, his-42)
amod(reputation-44, prodigious-43)
nmod:of(strength-35, reputation-44)
conj:and(receipts-40, reputation-44)
mark(raising-46, for-45)
acl(strength-35, raising-46)
dobj(raising-46, money-47)
advmod(business-55, when-48)
nsubj(business-55, he-49)
cop(business-55, was-50)
case(business-55, in-51)
det(business-55, the-52)
compound(business-55, television-53)
compound(business-55, religion-54)
advcl(raising-46, business-55)
punct(seems-14, .-56)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#$

lend :: Under the new agreements , LivingWell will lend T.H.E. about $ 1.2 million on a secured basis , cancel prior T.H.E. indebtedness to a LivingWell unit , and return about two million T.H.E. common shares ./.
case(agreements-4, Under-1)
det(agreements-4, the-2)
amod(agreements-4, new-3)
nmod:under(lend-8, agreements-4)
punct(lend-8, ,-5)
nsubj(lend-8, LivingWell-6)
nsubj(cancel-19, LivingWell-6)
aux(lend-8, will-7)
root(ROOT-0, lend-8)
dobj(lend-8, T.H.E.-9)
advmod($-11, about-10)
dobj(lend-8, $-11)
compound(million-13, 1.2-12)
nummod($-11, million-13)
case(basis-17, on-14)
det(basis-17, a-15)
amod(basis-17, secured-16)
nmod:on(lend-8, basis-17)
punct(lend-8, ,-18)
conj:and(lend-8, cancel-19)
advmod(indebtedness-22, prior-20)
amod(indebtedness-22, T.H.E.-21)
dobj(cancel-19, indebtedness-22)
case(unit-26, to-23)
det(unit-26, a-24)
compound(unit-26, LivingWell-25)
nmod:to(cancel-19, unit-26)
punct(lend-8, ,-27)
cc(lend-8, and-28)
conj:and(lend-8, return-29)
advmod(million-32, about-30)
compound(million-32, two-31)
nummod(shares-35, million-32)
compound(shares-35, T.H.E.-33)
amod(shares-35, common-34)
dep(return-29, shares-35)
punct(lend-8, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#t.h.e.

lend :: For example , he predicts that banks will lower their prime , or base , lending rate , which now is 8 1 2 % , to 8 % by midyear and 7 1 2 % by the end of the year ./.
case(example-2, For-1)
nmod:for(predicts-5, example-2)
punct(predicts-5, ,-3)
nsubj(predicts-5, he-4)
root(ROOT-0, predicts-5)
mark(lower-9, that-6)
nsubj(lower-9, banks-7)
aux(lower-9, will-8)
ccomp(predicts-5, lower-9)
nmod:poss(rate-17, their-10)
amod(rate-17, prime-11)
punct(prime-11, ,-12)
cc(prime-11, or-13)
conj:or(prime-11, base-14)
amod(rate-17, base-14)
punct(prime-11, ,-15)
amod(rate-17, lending-16)
dobj(lower-9, rate-17)
nsubj(%-25, rate-17)
punct(rate-17, ,-18)
ref(rate-17, which-19)
advmod(%-25, now-20)
cop(%-25, is-21)
compound(2-24, 8-22)
compound(2-24, 1-23)
nummod(%-25, 2-24)
acl:relcl(rate-17, %-25)
punct(rate-17, ,-26)
case(%-29, to-27)
nummod(%-29, 8-28)
nmod:to(lower-9, %-29)
case(midyear-31, by-30)
nmod:by(lower-9, midyear-31)
cc(midyear-31, and-32)
compound(2-35, 7-33)
compound(2-35, 1-34)
nummod(%-36, 2-35)
nmod:by(lower-9, %-36)
conj:and(midyear-31, %-36)
case(end-39, by-37)
det(end-39, the-38)
nmod:by(lower-9, end-39)
case(year-42, of-40)
det(year-42, the-41)
nmod:of(end-39, year-42)
punct(predicts-5, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#rate

lend :: The proposal , a pet project of the Office of Management and Budget , would n't have any direct effect on the amount of money the government lends or on the budget deficit ./.
det(proposal-2, The-1)
nsubj(have-17, proposal-2)
punct(proposal-2, ,-3)
det(project-6, a-4)
compound(project-6, pet-5)
appos(proposal-2, project-6)
case(Office-9, of-7)
det(Office-9, the-8)
nmod:of(project-6, Office-9)
case(Management-11, of-10)
nmod:of(Office-9, Management-11)
cc(Management-11, and-12)
nmod:of(Office-9, Budget-13)
conj:and(Management-11, Budget-13)
punct(proposal-2, ,-14)
aux(have-17, would-15)
neg(have-17, n't-16)
root(ROOT-0, have-17)
det(effect-20, any-18)
amod(effect-20, direct-19)
dobj(have-17, effect-20)
case(amount-23, on-21)
det(amount-23, the-22)
nmod:on(effect-20, amount-23)
case(money-25, of-24)
nmod:of(amount-23, money-25)
det(government-27, the-26)
nsubj(lends-28, government-27)
acl:relcl(amount-23, lends-28)
cc(lends-28, or-29)
case(deficit-33, on-30)
det(deficit-33, the-31)
compound(deficit-33, budget-32)
acl:relcl(amount-23, deficit-33)
conj:or(lends-28, deficit-33)
punct(have-17, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#government

lend :: That got the IDB 's attention , but we now wonder about the administration 's strategy for winning a greater say in where and to whom the IDB lends money ./.
nsubj(got-2, That-1)
root(ROOT-0, got-2)
det(IDB-4, the-3)
nmod:poss(attention-6, IDB-4)
case(IDB-4, 's-5)
dobj(got-2, attention-6)
punct(got-2, ,-7)
cc(got-2, but-8)
nsubj(wonder-11, we-9)
advmod(wonder-11, now-10)
conj:but(got-2, wonder-11)
case(strategy-16, about-12)
det(administration-14, the-13)
nmod:poss(strategy-16, administration-14)
case(administration-14, 's-15)
nmod:about(wonder-11, strategy-16)
mark(winning-18, for-17)
acl(strategy-16, winning-18)
det(say-21, a-19)
amod(say-21, greater-20)
dobj(winning-18, say-21)
dep(say-21, in-22)
dep(in-22, where-23)
cc(where-23, and-24)
case(whom-26, to-25)
nmod:to(lends-29, whom-26)
det(IDB-28, the-27)
nsubj(lends-29, IDB-28)
dep(in-22, lends-29)
conj:and(where-23, lends-29)
dobj(lends-29, money-30)
punct(got-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: The IDB has lent more than $ 35 billion since its inception 27 years ago , much of it to create the type of parastatal companies Treasury Secretary James Baker has been trying to persuade Latin governments to dismantle ./.
det(IDB-2, The-1)
nsubj(lent-4, IDB-2)
aux(lent-4, has-3)
root(ROOT-0, lent-4)
advmod($-7, more-5)
mwe(more-5, than-6)
dobj(lent-4, $-7)
compound(billion-9, 35-8)
nummod($-7, billion-9)
case(inception-12, since-10)
nmod:poss(inception-12, its-11)
nmod:since(lent-4, inception-12)
nummod(years-14, 27-13)
nmod:npmod(ago-15, years-14)
advmod(inception-12, ago-15)
punct(lent-4, ,-16)
dobj(lent-4, much-17)
case(it-19, of-18)
nmod:of(much-17, it-19)
mark(create-21, to-20)
acl(much-17, create-21)
det(type-23, the-22)
dobj(create-21, type-23)
case(companies-26, of-24)
amod(companies-26, parastatal-25)
nmod:of(type-23, companies-26)
compound(Baker-30, Treasury-27)
compound(Baker-30, Secretary-28)
compound(Baker-30, James-29)
nsubj(trying-33, Baker-30)
nsubj:xsubj(persuade-35, Baker-30)
aux(trying-33, has-31)
aux(trying-33, been-32)
acl:relcl(companies-26, trying-33)
mark(persuade-35, to-34)
xcomp(trying-33, persuade-35)
amod(governments-37, Latin-36)
dobj(persuade-35, governments-37)
nsubj:xsubj(dismantle-39, governments-37)
mark(dismantle-39, to-38)
xcomp(persuade-35, dismantle-39)
punct(lent-4, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#$

lend :: Nikko 's Mr. Axilrod predicts the central bank will try to hold the interest rate on federal funds -- the closely watched rate on reserves that banks lend each other overnight -- at about 6 1 2 % , down from the 6 3 4 % rate in recent weeks ./.
nmod:poss(Axilrod-4, Nikko-1)
case(Nikko-1, 's-2)
compound(Axilrod-4, Mr.-3)
nsubj(predicts-5, Axilrod-4)
root(ROOT-0, predicts-5)
det(bank-8, the-6)
amod(bank-8, central-7)
nsubj(try-10, bank-8)
aux(try-10, will-9)
ccomp(predicts-5, try-10)
mark(hold-12, to-11)
xcomp(try-10, hold-12)
det(rate-15, the-13)
compound(rate-15, interest-14)
dobj(hold-12, rate-15)
case(funds-18, on-16)
amod(funds-18, federal-17)
nmod:on(rate-15, funds-18)
punct(try-10, ---19)
det(rate-23, the-20)
advmod(watched-22, closely-21)
amod(rate-23, watched-22)
dobj(try-10, rate-23)
nsubj:xsubj(hold-12, rate-23)
case(reserves-25, on-24)
nmod:on(rate-23, reserves-25)
mark(lend-28, that-26)
nsubj(lend-28, banks-27)
ccomp(reserves-25, lend-28)
det(other-30, each-29)
nsubj(overnight-31, other-30)
ccomp(lend-28, overnight-31)
punct(overnight-31, ---32)
case(%-38, at-33)
advmod(2-37, about-34)
compound(2-37, 6-35)
compound(2-37, 1-36)
nummod(%-38, 2-37)
nmod:at(overnight-31, %-38)
punct(%-38, ,-39)
advmod(%-38, down-40)
case(rate-47, from-41)
det(rate-47, the-42)
compound(4-45, 6-43)
compound(4-45, 3-44)
dep(%-46, 4-45)
dep(rate-47, %-46)
nmod:from(down-40, rate-47)
case(weeks-50, in-48)
amod(weeks-50, recent-49)
nmod:in(rate-47, weeks-50)
punct(predicts-5, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#banks

lend :: Rates on short-term Treasury bills wound up little changed , but the rate on federal funds , or reserves that banks lend each other overnight , fell ./.
nsubj(wound-6, Rates-1)
case(bills-5, on-2)
amod(bills-5, short-term-3)
compound(bills-5, Treasury-4)
nmod:on(Rates-1, bills-5)
root(ROOT-0, wound-6)
compound:prt(wound-6, up-7)
advmod(changed-9, little-8)
advmod(wound-6, changed-9)
punct(wound-6, ,-10)
cc(wound-6, but-11)
det(rate-13, the-12)
nsubj(fell-27, rate-13)
case(funds-16, on-14)
amod(funds-16, federal-15)
nmod:on(rate-13, funds-16)
punct(rate-13, ,-17)
cc(rate-13, or-18)
conj:or(rate-13, reserves-19)
nsubj(fell-27, reserves-19)
mark(lend-22, that-20)
nsubj(lend-22, banks-21)
ccomp(reserves-19, lend-22)
det(other-24, each-23)
dobj(lend-22, other-24)
advmod(lend-22, overnight-25)
punct(rate-13, ,-26)
conj:but(wound-6, fell-27)
punct(wound-6, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#other

lend :: They will change their attitude -- and will lend money to Brazil -- they have too much at stake not to , '' says Rimmer de Vries , chief international economist at Morgan Guaranty Trust Co ./.
nsubj(change-3, They-1)
nsubj(lend-9, They-1)
aux(change-3, will-2)
ccomp(says-24, change-3)
nmod:poss(attitude-5, their-4)
dobj(change-3, attitude-5)
punct(change-3, ---6)
cc(change-3, and-7)
aux(lend-9, will-8)
conj:and(change-3, lend-9)
ccomp(says-24, lend-9)
dobj(lend-9, money-10)
case(Brazil-12, to-11)
nmod:to(lend-9, Brazil-12)
punct(change-3, ---13)
nsubj(have-15, they-14)
parataxis(change-3, have-15)
advmod(much-17, too-16)
advmod(stake-19, much-17)
case(stake-19, at-18)
nmod:at(have-15, stake-19)
neg(stake-19, not-20)
dep(not-20, to-21)
punct(says-24, ,-22)
punct(says-24, ''-23)
root(ROOT-0, says-24)
compound(Vries-27, Rimmer-25)
compound(Vries-27, de-26)
nsubj(says-24, Vries-27)
punct(Vries-27, ,-28)
amod(economist-31, chief-29)
amod(economist-31, international-30)
appos(Vries-27, economist-31)
case(Co-36, at-32)
compound(Co-36, Morgan-33)
compound(Co-36, Guaranty-34)
compound(Co-36, Trust-35)
nmod:at(economist-31, Co-36)
punct(says-24, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: By January 1993 , societies would be able to lend 25 % of their assets for such nontraditional purposes as commercial property development and unsecured personal loans ./.
case(January-2, By-1)
nmod:by(able-8, January-2)
nummod(January-2, 1993-3)
punct(able-8, ,-4)
nsubj(able-8, societies-5)
nsubj:xsubj(lend-10, societies-5)
aux(able-8, would-6)
cop(able-8, be-7)
root(ROOT-0, able-8)
mark(lend-10, to-9)
xcomp(able-8, lend-10)
nummod(%-12, 25-11)
dobj(lend-10, %-12)
case(assets-15, of-13)
nmod:poss(assets-15, their-14)
nmod:of(%-12, assets-15)
case(purposes-19, for-16)
amod(purposes-19, such-17)
amod(purposes-19, nontraditional-18)
nmod:for(lend-10, purposes-19)
case(development-23, as-20)
amod(development-23, commercial-21)
compound(development-23, property-22)
nmod:as(purposes-19, development-23)
cc(development-23, and-24)
amod(loans-27, unsecured-25)
amod(loans-27, personal-26)
nmod:as(purposes-19, loans-27)
conj:and(development-23, loans-27)
punct(able-8, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#assets

lend :: He said banks soon may lower their prime , or base , lending rates , now 8 3 4 % ./.
nsubj(said-2, He-1)
root(ROOT-0, said-2)
nsubj(lower-6, banks-3)
advmod(lower-6, soon-4)
aux(lower-6, may-5)
ccomp(said-2, lower-6)
nmod:poss(rates-14, their-7)
amod(rates-14, prime-8)
punct(prime-8, ,-9)
cc(prime-8, or-10)
conj:or(prime-8, base-11)
amod(rates-14, base-11)
punct(prime-8, ,-12)
compound(rates-14, lending-13)
dobj(lower-6, rates-14)
punct(lower-6, ,-15)
advmod(%-20, now-16)
compound(4-19, 8-17)
compound(4-19, 3-18)
nummod(%-20, 4-19)
nmod:npmod(lower-6, %-20)
punct(said-2, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

lend :: Banks have lent small amounts of gold for decades to borrowers such as jewelers , who use gold in their business ./.
nsubj(lent-3, Banks-1)
aux(lent-3, have-2)
root(ROOT-0, lent-3)
amod(amounts-5, small-4)
dobj(lent-3, amounts-5)
case(gold-7, of-6)
nmod:of(amounts-5, gold-7)
case(decades-9, for-8)
nmod:for(lent-3, decades-9)
case(borrowers-11, to-10)
nmod:to(decades-9, borrowers-11)
case(jewelers-14, such-12)
mwe(such-12, as-13)
nmod:such_as(borrowers-11, jewelers-14)
nsubj(use-17, jewelers-14)
punct(jewelers-14, ,-15)
ref(jewelers-14, who-16)
acl:relcl(jewelers-14, use-17)
dobj(use-17, gold-18)
case(business-21, in-19)
nmod:poss(business-21, their-20)
nmod:in(use-17, business-21)
punct(lent-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#amounts

lend :: Standard Chartered sought the investigation last February following press speculation that the bank illegally lent money to buyers of its shares to ward off Lloyds 's # 1.27 billion -LRB- $ 2.25 billion -RRB- bid ./.
amod(Chartered-2, Standard-1)
nsubj(sought-3, Chartered-2)
root(ROOT-0, sought-3)
det(investigation-5, the-4)
dobj(sought-3, investigation-5)
amod(February-7, last-6)
nmod:tmod(sought-3, February-7)
case(speculation-10, following-8)
compound(speculation-10, press-9)
nmod:following(sought-3, speculation-10)
mark(lent-15, that-11)
det(bank-13, the-12)
nsubj(lent-15, bank-13)
advmod(lent-15, illegally-14)
ccomp(speculation-10, lent-15)
dobj(lent-15, money-16)
case(buyers-18, to-17)
nmod:to(lent-15, buyers-18)
case(shares-21, of-19)
nmod:poss(shares-21, its-20)
nmod:of(buyers-18, shares-21)
mark(ward-23, to-22)
advcl(lent-15, ward-23)
compound:prt(ward-23, off-24)
nmod:poss(bid-35, Lloyds-25)
case(Lloyds-25, 's-26)
compound(billion-29, #-27)
compound(billion-29, 1.27-28)
amod(bid-35, billion-29)
punct($-31, -LRB--30)
dep(billion-29, $-31)
compound(billion-33, 2.25-32)
nummod($-31, billion-33)
punct($-31, -RRB--34)
dobj(ward-23, bid-35)
punct(sought-3, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: Mr. Muth is president of Real Estate Advisors Inc . , a Los Angeles investment management firm that agreed to lend Wespac as much as $ 1.5 million under the agreement ./.
compound(Muth-2, Mr.-1)
nsubj(president-4, Muth-2)
cop(president-4, is-3)
root(ROOT-0, president-4)
case(Inc-9, of-5)
amod(Inc-9, Real-6)
compound(Inc-9, Estate-7)
compound(Inc-9, Advisors-8)
nmod:of(president-4, Inc-9)
punct(president-4, .-10)
root(ROOT-0, ,-1)
det(firm-7, a-2)
compound(firm-7, Los-3)
compound(firm-7, Angeles-4)
compound(firm-7, investment-5)
compound(firm-7, management-6)
root(,-1, firm-7)
nsubj(agreed-9, firm-7)
nsubj:xsubj(lend-11, firm-7)
ref(firm-7, that-8)
acl:relcl(firm-7, agreed-9)
mark(lend-11, to-10)
xcomp(agreed-9, lend-11)
dobj(lend-11, Wespac-12)
advmod($-16, as-13)
advmod($-16, much-14)
advmod($-16, as-15)
dobj(lend-11, $-16)
compound(million-18, 1.5-17)
nummod($-16, million-18)
case(agreement-21, under-19)
det(agreement-21, the-20)
nmod:under($-16, agreement-21)
punct(firm-7, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#wespac

lend :: The final portion of that loan totals $ 1.2 billion , bankers said , adding that they are legally bound to lend the money ./.
det(portion-3, The-1)
amod(portion-3, final-2)
nsubj(totals-7, portion-3)
case(loan-6, of-4)
det(loan-6, that-5)
nmod:of(portion-3, loan-6)
ccomp(said-13, totals-7)
dobj(totals-7, $-8)
compound(billion-10, 1.2-9)
nummod($-8, billion-10)
punct(said-13, ,-11)
nsubj(said-13, bankers-12)
root(ROOT-0, said-13)
punct(said-13, ,-14)
xcomp(said-13, adding-15)
mark(bound-20, that-16)
nsubjpass(bound-20, they-17)
nsubj:xsubj(lend-22, they-17)
auxpass(bound-20, are-18)
advmod(bound-20, legally-19)
ccomp(adding-15, bound-20)
mark(lend-22, to-21)
xcomp(bound-20, lend-22)
det(money-24, the-23)
dobj(lend-22, money-24)
punct(said-13, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: Alan Greenspan , chairman of the Federal Reserve Board , warned bankers about lending too much for leveraged buy-outs and other takeovers ./.
compound(Greenspan-2, Alan-1)
nsubj(warned-11, Greenspan-2)
punct(Greenspan-2, ,-3)
appos(Greenspan-2, chairman-4)
case(Board-9, of-5)
det(Board-9, the-6)
compound(Board-9, Federal-7)
compound(Board-9, Reserve-8)
nmod:of(chairman-4, Board-9)
punct(Greenspan-2, ,-10)
root(ROOT-0, warned-11)
dobj(warned-11, bankers-12)
mark(lending-14, about-13)
advcl(warned-11, lending-14)
advmod(much-16, too-15)
advmod(lending-14, much-16)
case(buy-outs-19, for-17)
amod(buy-outs-19, leveraged-18)
nmod:for(lending-14, buy-outs-19)
cc(buy-outs-19, and-20)
amod(takeovers-22, other-21)
nmod:for(lending-14, takeovers-22)
conj:and(buy-outs-19, takeovers-22)
punct(warned-11, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#buy-outs

lend :: Mr. Cohen , who is taking an active interest in the RJR deal because of the estimated $ 4 billion that Shearson would lend RJR , pleaded with Mr. Kravis not to become involved , according to these people ./.
compound(Cohen-2, Mr.-1)
root(ROOT-0, Cohen-2)
nsubj(taking-6, Cohen-2)
punct(Cohen-2, ,-3)
ref(Cohen-2, who-4)
aux(taking-6, is-5)
acl:relcl(Cohen-2, taking-6)
det(interest-9, an-7)
amod(interest-9, active-8)
dobj(taking-6, interest-9)
case(deal-13, in-10)
det(deal-13, the-11)
compound(deal-13, RJR-12)
nmod:in(interest-9, deal-13)
case($-18, because-14)
mwe(because-14, of-15)
det($-18, the-16)
amod($-18, estimated-17)
nmod:because_of(taking-6, $-18)
compound(billion-20, 4-19)
nummod($-18, billion-20)
mark(lend-24, that-21)
nsubj(lend-24, Shearson-22)
aux(lend-24, would-23)
dep($-18, lend-24)
dobj(lend-24, RJR-25)
punct(lend-24, ,-26)
dep(lend-24, pleaded-27)
case(Kravis-30, with-28)
compound(Kravis-30, Mr.-29)
nmod:with(pleaded-27, Kravis-30)
neg(become-33, not-31)
mark(become-33, to-32)
xcomp(pleaded-27, become-33)
xcomp(become-33, involved-34)
punct(Cohen-2, ,-35)
case(people-39, according-36)
mwe(according-36, to-37)
det(people-39, these-38)
nmod:according_to(Cohen-2, people-39)
punct(Cohen-2, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#rjr

lend :: Early last year , the Navy lent two of the planes to the Coast Guard , and two to Customs ./.
advmod(year-3, Early-1)
amod(year-3, last-2)
nmod:tmod(lent-7, year-3)
punct(lent-7, ,-4)
det(Navy-6, the-5)
nsubj(lent-7, Navy-6)
root(ROOT-0, lent-7)
dobj(lent-7, two-8)
case(planes-11, of-9)
det(planes-11, the-10)
nmod:of(two-8, planes-11)
case(Guard-15, to-12)
det(Guard-15, the-13)
compound(Guard-15, Coast-14)
nmod:to(lent-7, Guard-15)
punct(lent-7, ,-16)
cc(lent-7, and-17)
conj:and(lent-7, two-18)
case(Customs-20, to-19)
nmod:to(two-18, Customs-20)
punct(lent-7, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#planes

lend :: Since then , the World Bank alone has lent more than $ 83 billion to already overburdened Third World debtors ./.
case(then-2, Since-1)
nmod:since(lent-9, then-2)
punct(lent-9, ,-3)
det(Bank-6, the-4)
compound(Bank-6, World-5)
nsubj(lent-9, Bank-6)
advmod(Bank-6, alone-7)
aux(lent-9, has-8)
root(ROOT-0, lent-9)
advmod($-12, more-10)
mwe(more-10, than-11)
dobj(lent-9, $-12)
compound(billion-14, 83-13)
nummod($-12, billion-14)
case(debtors-20, to-15)
advmod(overburdened-17, already-16)
amod(debtors-20, overburdened-17)
amod(debtors-20, Third-18)
compound(debtors-20, World-19)
nmod:to(lent-9, debtors-20)
punct(lent-9, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#$

lend :: The real estate division , which reports to Mr. Brown , has also lost seasoned leadership at a time when it has been aggressively lending to developers ./.
det(division-4, The-1)
amod(division-4, real-2)
compound(division-4, estate-3)
nsubj(reports-7, division-4)
nsubj(lost-14, division-4)
punct(division-4, ,-5)
ref(division-4, which-6)
acl:relcl(division-4, reports-7)
case(Brown-10, to-8)
compound(Brown-10, Mr.-9)
nmod:to(reports-7, Brown-10)
punct(division-4, ,-11)
aux(lost-14, has-12)
advmod(lost-14, also-13)
root(ROOT-0, lost-14)
amod(leadership-16, seasoned-15)
dobj(lost-14, leadership-16)
case(time-19, at-17)
det(time-19, a-18)
nmod:at(lost-14, time-19)
advmod(lending-25, when-20)
nsubj(lending-25, it-21)
aux(lending-25, has-22)
aux(lending-25, been-23)
advmod(lending-25, aggressively-24)
acl:relcl(time-19, lending-25)
case(developers-27, to-26)
nmod:to(lending-25, developers-27)
punct(lost-14, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#it

lend :: NCNB has been losing market share in its most important market , Florida , and it has ever slimmer profit margins from lending to some of its important big-businesses customers ./.
nsubj(losing-4, NCNB-1)
aux(losing-4, has-2)
aux(losing-4, been-3)
root(ROOT-0, losing-4)
compound(share-6, market-5)
dobj(losing-4, share-6)
case(market-11, in-7)
nmod:poss(market-11, its-8)
advmod(important-10, most-9)
amod(market-11, important-10)
nmod:in(losing-4, market-11)
punct(market-11, ,-12)
appos(market-11, Florida-13)
punct(losing-4, ,-14)
cc(losing-4, and-15)
nsubj(has-17, it-16)
conj:and(losing-4, has-17)
advmod(slimmer-19, ever-18)
amod(margins-21, slimmer-19)
compound(margins-21, profit-20)
dobj(has-17, margins-21)
mark(lending-23, from-22)
acl(margins-21, lending-23)
case(some-25, to-24)
nmod:to(lending-23, some-25)
case(customers-30, of-26)
nmod:poss(customers-30, its-27)
amod(customers-30, important-28)
compound(customers-30, big-businesses-29)
nmod:of(some-25, customers-30)
punct(losing-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#some

lend :: It was financed in part by lending from foreign banks flush with petrodollars ./.
nsubjpass(financed-3, It-1)
auxpass(financed-3, was-2)
root(ROOT-0, financed-3)
case(part-5, in-4)
nmod:in(financed-3, part-5)
mark(lending-7, by-6)
advcl(financed-3, lending-7)
case(banks-10, from-8)
amod(banks-10, foreign-9)
nmod:from(lending-7, banks-10)
amod(banks-10, flush-11)
case(petrodollars-13, with-12)
nmod:with(flush-11, petrodollars-13)
punct(financed-3, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#banks

lend :: The FBI immediately lent Mr. Pelleu $ 3 , 800 , and arranged to tape several phone conversations he had with Mr. Sanders about the ring ./.
det(FBI-2, The-1)
nsubj(lent-4, FBI-2)
nsubj(arranged-13, FBI-2)
nsubj:xsubj(tape-15, FBI-2)
advmod(lent-4, immediately-3)
root(ROOT-0, lent-4)
compound(Pelleu-6, Mr.-5)
iobj(lent-4, Pelleu-6)
dep(3-8, $-7)
dobj(lent-4, 3-8)
punct(3-8, ,-9)
conj(3-8, 800-10)
punct(3-8, ,-11)
cc(lent-4, and-12)
conj:and(lent-4, arranged-13)
mark(tape-15, to-14)
xcomp(arranged-13, tape-15)
amod(conversations-18, several-16)
compound(conversations-18, phone-17)
dobj(tape-15, conversations-18)
nsubj(had-20, he-19)
acl:relcl(conversations-18, had-20)
case(Sanders-23, with-21)
compound(Sanders-23, Mr.-22)
nmod:with(had-20, Sanders-23)
case(ring-26, about-24)
det(ring-26, the-25)
nmod:about(tape-15, ring-26)
punct(lent-4, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#3

lend :: The campaign was able to buy television time in the week before the election only because Mr. Ward personally lent it $ 20 , 000 ./.
det(campaign-2, The-1)
nsubj(able-4, campaign-2)
nsubj:xsubj(buy-6, campaign-2)
cop(able-4, was-3)
root(ROOT-0, able-4)
mark(buy-6, to-5)
xcomp(able-4, buy-6)
compound(time-8, television-7)
dobj(buy-6, time-8)
case(week-11, in-9)
det(week-11, the-10)
nmod:in(buy-6, week-11)
case(election-14, before-12)
det(election-14, the-13)
nmod:before(buy-6, election-14)
advmod(lent-20, only-15)
mark(lent-20, because-16)
compound(Ward-18, Mr.-17)
nsubj(lent-20, Ward-18)
advmod(lent-20, personally-19)
advcl(buy-6, lent-20)
iobj(lent-20, it-21)
dep(20-23, $-22)
dobj(lent-20, 20-23)
punct(20-23, ,-24)
amod(20-23, 000-25)
punct(able-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#20

lend :: We lend him a stately and beautiful home and permit him to live on its topmost floor , attended by servants ./.
nsubj(lend-2, We-1)
nsubj(permit-10, We-1)
root(ROOT-0, lend-2)
iobj(lend-2, him-3)
det(home-8, a-4)
amod(home-8, stately-5)
cc(stately-5, and-6)
conj:and(stately-5, beautiful-7)
amod(home-8, beautiful-7)
dobj(lend-2, home-8)
cc(lend-2, and-9)
conj:and(lend-2, permit-10)
dobj(permit-10, him-11)
nsubj:xsubj(live-13, him-11)
mark(live-13, to-12)
xcomp(permit-10, live-13)
case(floor-17, on-14)
nmod:poss(floor-17, its-15)
amod(floor-17, topmost-16)
nmod:on(live-13, floor-17)
punct(lend-2, ,-18)
dep(lend-2, attended-19)
case(servants-21, by-20)
nmod:by(attended-19, servants-21)
punct(lend-2, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#home

lend :: This is one developing nation where U.S. banks have n't been left holding the bag , as under U.S. regulations they are n't allowed to lend to North Korea ./.
nsubj(nation-5, This-1)
cop(nation-5, is-2)
nummod(nation-5, one-3)
amod(nation-5, developing-4)
root(ROOT-0, nation-5)
advmod(left-12, where-6)
compound(banks-8, U.S.-7)
nsubjpass(left-12, banks-8)
aux(left-12, have-9)
neg(left-12, n't-10)
auxpass(left-12, been-11)
acl:relcl(nation-5, left-12)
xcomp(left-12, holding-13)
det(bag-15, the-14)
dobj(holding-13, bag-15)
punct(nation-5, ,-16)
case(regulations-20, as-17)
case(regulations-20, under-18)
compound(regulations-20, U.S.-19)
nmod:under(nation-5, regulations-20)
nsubjpass(allowed-24, they-21)
nsubj:xsubj(lend-26, they-21)
auxpass(allowed-24, are-22)
neg(allowed-24, n't-23)
acl:relcl(regulations-20, allowed-24)
mark(lend-26, to-25)
xcomp(allowed-24, lend-26)
case(Korea-29, to-27)
compound(Korea-29, North-28)
nmod:to(lend-26, Korea-29)
punct(nation-5, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#they

lend :: Mr. Parkin says that in 1982 , he lent $ 13 , 000 to Mr. Cohen , the Air Force official responsible for tactical air systems and a close friend of Mr. Galvin ./.
compound(Parkin-2, Mr.-1)
nsubj(says-3, Parkin-2)
root(ROOT-0, says-3)
mark(lent-9, that-4)
case(1982-6, in-5)
nmod:in(lent-9, 1982-6)
punct(lent-9, ,-7)
nsubj(lent-9, he-8)
ccomp(says-3, lent-9)
dep(13-11, $-10)
dobj(lent-9, 13-11)
punct(13-11, ,-12)
amod(13-11, 000-13)
case(Cohen-16, to-14)
compound(Cohen-16, Mr.-15)
nmod:to(000-13, Cohen-16)
punct(13-11, ,-17)
det(official-21, the-18)
compound(official-21, Air-19)
compound(official-21, Force-20)
appos(13-11, official-21)
amod(official-21, responsible-22)
case(systems-26, for-23)
amod(systems-26, tactical-24)
compound(systems-26, air-25)
nmod:for(responsible-22, systems-26)
cc(systems-26, and-27)
det(friend-30, a-28)
amod(friend-30, close-29)
nmod:for(responsible-22, friend-30)
conj:and(systems-26, friend-30)
case(Galvin-33, of-31)
compound(Galvin-33, Mr.-32)
nmod:of(friend-30, Galvin-33)
punct(says-3, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#13

lend :: This year , it gave General Motors permission to lend -- through local dealerships -- fleets of cars for party VIPs to use during each convention ./.
det(year-2, This-1)
nmod:tmod(gave-5, year-2)
punct(gave-5, ,-3)
nsubj(gave-5, it-4)
root(ROOT-0, gave-5)
compound(permission-8, General-6)
compound(permission-8, Motors-7)
dobj(gave-5, permission-8)
mark(lend-10, to-9)
advcl(gave-5, lend-10)
punct(lend-10, ---11)
case(dealerships-14, through-12)
amod(dealerships-14, local-13)
nmod:through(lend-10, dealerships-14)
punct(lend-10, ---15)
dobj(lend-10, fleets-16)
case(cars-18, of-17)
nmod:of(fleets-16, cars-18)
case(VIPs-21, for-19)
compound(VIPs-21, party-20)
nmod:for(fleets-16, VIPs-21)
mark(use-23, to-22)
acl(fleets-16, use-23)
case(convention-26, during-24)
det(convention-26, each-25)
nmod:during(use-23, convention-26)
punct(gave-5, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#fleets

lend :: A major part of the sale proceeds will be used to repay about US $ 225 million in National Bank debt owed to the Brunei government and more than 40 international creditors , mainly banks that lent to National Bank before it was seized and closed by Brunei in November 1986 ./.
det(part-3, A-1)
amod(part-3, major-2)
nsubjpass(used-10, part-3)
nsubj:xsubj(repay-12, part-3)
case(proceeds-7, of-4)
det(proceeds-7, the-5)
compound(proceeds-7, sale-6)
nmod:of(part-3, proceeds-7)
aux(used-10, will-8)
auxpass(used-10, be-9)
root(ROOT-0, used-10)
mark(repay-12, to-11)
xcomp(used-10, repay-12)
advmod($-15, about-13)
dep($-15, US-14)
dobj(repay-12, $-15)
compound(million-17, 225-16)
nummod($-15, million-17)
case(debt-21, in-18)
compound(debt-21, National-19)
compound(debt-21, Bank-20)
nmod:in($-15, debt-21)
acl(debt-21, owed-22)
case(government-26, to-23)
det(government-26, the-24)
compound(government-26, Brunei-25)
nmod:to(owed-22, government-26)
cc($-15, and-27)
advmod(40-30, more-28)
mwe(more-28, than-29)
nummod(creditors-32, 40-30)
amod(creditors-32, international-31)
dobj(repay-12, creditors-32)
conj:and($-15, creditors-32)
punct(creditors-32, ,-33)
advmod(banks-35, mainly-34)
appos(creditors-32, banks-35)
nsubj(lent-37, banks-35)
ref(banks-35, that-36)
acl:relcl(banks-35, lent-37)
case(Bank-40, to-38)
compound(Bank-40, National-39)
nmod:to(lent-37, Bank-40)
mark(seized-44, before-41)
nsubjpass(seized-44, it-42)
nsubjpass(closed-46, it-42)
auxpass(seized-44, was-43)
advcl(lent-37, seized-44)
cc(seized-44, and-45)
advcl(lent-37, closed-46)
conj:and(seized-44, closed-46)
case(Brunei-48, by-47)
nmod:agent(seized-44, Brunei-48)
case(November-50, in-49)
nmod:in(seized-44, November-50)
nummod(November-50, 1986-51)
punct(used-10, .-52)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#banks

lend :: A further $ 150 million in bank loans , the last slice of a $ 1.95 billion bank loan agreed on last year and linked to those IMF loans , also probably wo n't be lent now , compounding Argentina 's payments difficulties ./.
det($-3, A-1)
amod($-3, further-2)
nsubjpass(lent-36, $-3)
compound(million-5, 150-4)
nummod($-3, million-5)
case(loans-8, in-6)
compound(loans-8, bank-7)
nmod:in($-3, loans-8)
punct($-3, ,-9)
det(slice-12, the-10)
amod(slice-12, last-11)
nsubj(agreed-20, slice-12)
nsubj(linked-25, slice-12)
case(loan-19, of-13)
det(loan-19, a-14)
amod(loan-19, $-15)
compound(billion-17, 1.95-16)
nummod($-15, billion-17)
compound(loan-19, bank-18)
nmod:of(slice-12, loan-19)
acl:relcl($-3, agreed-20)
case(year-23, on-21)
amod(year-23, last-22)
nmod:on(agreed-20, year-23)
cc(agreed-20, and-24)
acl:relcl($-3, linked-25)
conj:and(agreed-20, linked-25)
case(loans-29, to-26)
det(loans-29, those-27)
compound(loans-29, IMF-28)
nmod:to(linked-25, loans-29)
punct($-3, ,-30)
advmod(lent-36, also-31)
advmod(lent-36, probably-32)
aux(lent-36, wo-33)
neg(lent-36, n't-34)
auxpass(lent-36, be-35)
root(ROOT-0, lent-36)
advmod(lent-36, now-37)
punct(lent-36, ,-38)
advcl(lent-36, compounding-39)
nmod:poss(difficulties-43, Argentina-40)
case(Argentina-40, 's-41)
compound(difficulties-43, payments-42)
dobj(compounding-39, difficulties-43)
punct(lent-36, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#$

lend :: The Canadian government agency said the funds will be lent to the Bank of China , which will make them available to the China National Technical Import & Export Corp . , which is purchasing the plants ./.
det(agency-4, The-1)
amod(agency-4, Canadian-2)
compound(agency-4, government-3)
nsubj(said-5, agency-4)
root(ROOT-0, said-5)
det(funds-7, the-6)
nsubjpass(lent-10, funds-7)
aux(lent-10, will-8)
auxpass(lent-10, be-9)
ccomp(said-5, lent-10)
case(Bank-13, to-11)
det(Bank-13, the-12)
nmod:to(lent-10, Bank-13)
nsubj(make-19, Bank-13)
case(China-15, of-14)
nmod:of(Bank-13, China-15)
punct(Bank-13, ,-16)
ref(Bank-13, which-17)
aux(make-19, will-18)
acl:relcl(Bank-13, make-19)
nsubj(available-21, them-20)
xcomp(make-19, available-21)
case(Import-27, to-22)
det(Import-27, the-23)
compound(Import-27, China-24)
compound(Import-27, National-25)
compound(Import-27, Technical-26)
nmod:to(available-21, Import-27)
cc(Import-27, &-28)
compound(Corp-30, Export-29)
nmod:to(available-21, Corp-30)
conj:&(Import-27, Corp-30)
punct(said-5, .-31)
punct(purchasing-4, ,-1)
nsubj(purchasing-4, which-2)
aux(purchasing-4, is-3)
root(ROOT-0, purchasing-4)
det(plants-6, the-5)
dobj(purchasing-4, plants-6)
punct(purchasing-4, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#funds

lend :: The Atlanta-based company lent Ironton Iron $ 500 , 000 and has an option to buy it ./.
det(company-3, The-1)
amod(company-3, Atlanta-based-2)
nsubj(lent-4, company-3)
nsubj(has-12, company-3)
root(ROOT-0, lent-4)
compound(Iron-6, Ironton-5)
iobj(lent-4, Iron-6)
dep(500-8, $-7)
dobj(lent-4, 500-8)
punct(500-8, ,-9)
nummod(500-8, 000-10)
cc(lent-4, and-11)
conj:and(lent-4, has-12)
det(option-14, an-13)
dobj(has-12, option-14)
mark(buy-16, to-15)
acl(option-14, buy-16)
dobj(buy-16, it-17)
punct(lent-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#500

lend :: Yet in Arkansas , lending to small local businesses is the bank 's primary mission ./.
root(ROOT-0, Yet-1)
case(Arkansas-3, in-2)
nmod:in(Yet-1, Arkansas-3)
punct(Arkansas-3, ,-4)
root(,-4, lending-5)
case(businesses-9, to-6)
amod(businesses-9, small-7)
amod(businesses-9, local-8)
nmod:to(lending-5, businesses-9)
aux(lending-5, is-10)
det(bank-12, the-11)
nmod:poss(mission-15, bank-12)
case(bank-12, 's-13)
amod(mission-15, primary-14)
nsubj(lending-5, mission-15)
punct(lending-5, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#mission

lend :: Deutsche Bank is establishing a consortium to lend another $ 2.1 billion to the Soviets and doing what it can to prepare the way for a large Soviet issue of deutsche mark bonds ./.
compound(Bank-2, Deutsche-1)
nsubj(establishing-4, Bank-2)
aux(establishing-4, is-3)
root(ROOT-0, establishing-4)
det(consortium-6, a-5)
dobj(establishing-4, consortium-6)
mark(lend-8, to-7)
acl(consortium-6, lend-8)
dobj(lend-8, another-9)
dep(another-9, $-10)
compound(billion-12, 2.1-11)
nummod($-10, billion-12)
case(Soviets-15, to-13)
det(Soviets-15, the-14)
nmod:to($-10, Soviets-15)
cc($-10, and-16)
dep(another-9, doing-17)
conj:and($-10, doing-17)
dobj(prepare-22, what-18)
nsubj(prepare-22, it-19)
aux(prepare-22, can-20)
mark(prepare-22, to-21)
ccomp(doing-17, prepare-22)
det(way-24, the-23)
dobj(prepare-22, way-24)
case(issue-29, for-25)
det(issue-29, a-26)
amod(issue-29, large-27)
amod(issue-29, Soviet-28)
nmod:for(way-24, issue-29)
case(bonds-33, of-30)
compound(bonds-33, deutsche-31)
compound(bonds-33, mark-32)
nmod:of(issue-29, bonds-33)
punct(establishing-4, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#another

lend :: About US $ 75 million of the debt is owed to the Brunei government , with the remainder due more than 30 international banks that lent the then Khoo-owned National Bank money before it was seized and closed by Brunei in November 1986 ./.
case(US-2, About-1)
nmod:about(owed-10, US-2)
nsubjpass(owed-10, $-3)
compound(million-5, 75-4)
nummod($-3, million-5)
case(debt-8, of-6)
det(debt-8, the-7)
nmod:of($-3, debt-8)
auxpass(owed-10, is-9)
root(ROOT-0, owed-10)
case(government-14, to-11)
det(government-14, the-12)
compound(government-14, Brunei-13)
nmod:to(owed-10, government-14)
punct(owed-10, ,-15)
case(remainder-18, with-16)
det(remainder-18, the-17)
nmod:with(owed-10, remainder-18)
case(banks-24, due-19)
advmod(30-22, more-20)
mwe(more-20, than-21)
nummod(banks-24, 30-22)
amod(banks-24, international-23)
nmod:due(remainder-18, banks-24)
nsubj(lent-26, banks-24)
ref(banks-24, that-25)
acl:relcl(banks-24, lent-26)
det(money-32, the-27)
advmod(Khoo-owned-29, then-28)
amod(money-32, Khoo-owned-29)
compound(money-32, National-30)
compound(money-32, Bank-31)
dobj(lent-26, money-32)
mark(seized-36, before-33)
nsubjpass(seized-36, it-34)
nsubjpass(closed-38, it-34)
auxpass(seized-36, was-35)
advcl(lent-26, seized-36)
cc(seized-36, and-37)
advcl(lent-26, closed-38)
conj:and(seized-36, closed-38)
case(Brunei-40, by-39)
nmod:agent(seized-36, Brunei-40)
case(November-42, in-41)
nmod:in(seized-36, November-42)
nummod(November-42, 1986-43)
punct(owed-10, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#money

lend :: Particularly interesting are the pictures from Soviet museums , which have not previously lent to Gauguin retrospectives , nor have these conservative and understaffed institutions slathered varnish all over Gauguin 's colors , unlike many first-world owners ./.
advmod(interesting-2, Particularly-1)
dep(are-3, interesting-2)
root(ROOT-0, are-3)
det(pictures-5, the-4)
nsubj(are-3, pictures-5)
case(museums-8, from-6)
amod(museums-8, Soviet-7)
nmod:from(pictures-5, museums-8)
nsubj(lent-14, museums-8)
punct(museums-8, ,-9)
ref(museums-8, which-10)
aux(lent-14, have-11)
neg(lent-14, not-12)
advmod(lent-14, previously-13)
acl:relcl(museums-8, lent-14)
case(retrospectives-17, to-15)
compound(retrospectives-17, Gauguin-16)
nmod:to(lent-14, retrospectives-17)
punct(are-3, ,-18)
cc(are-3, nor-19)
aux(slathered-26, have-20)
det(institutions-25, these-21)
amod(institutions-25, conservative-22)
cc(conservative-22, and-23)
conj:and(conservative-22, understaffed-24)
amod(institutions-25, understaffed-24)
nsubj(slathered-26, institutions-25)
conj:nor(are-3, slathered-26)
dobj(slathered-26, varnish-27)
advmod(colors-32, all-28)
case(colors-32, over-29)
nmod:poss(colors-32, Gauguin-30)
case(Gauguin-30, 's-31)
nmod:over(varnish-27, colors-32)
punct(are-3, ,-33)
case(owners-37, unlike-34)
amod(owners-37, many-35)
amod(owners-37, first-world-36)
nmod:unlike(are-3, owners-37)
punct(are-3, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#museums

lend :: Connecticut 's state pension plan has lent $ 475 million since 1981 for in-state mortgages ./.
nmod:poss(plan-5, Connecticut-1)
case(Connecticut-1, 's-2)
compound(plan-5, state-3)
compound(plan-5, pension-4)
nsubj(lent-7, plan-5)
aux(lent-7, has-6)
root(ROOT-0, lent-7)
dobj(lent-7, $-8)
compound(million-10, 475-9)
nummod($-8, million-10)
case(1981-12, since-11)
nmod:since(lent-7, 1981-12)
case(mortgages-15, for-13)
amod(mortgages-15, in-state-14)
nmod:for(lent-7, mortgages-15)
punct(lent-7, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#$

lend :: More recently , Pablo Casals 's widow lent him her husband 's precious Goffriller cello for two years and the teen-ager played chamber music at Carnegie Hall with Isaac Stern , Yo-Yo Ma and other luminaries ./.
advmod(recently-2, More-1)
advmod(lent-8, recently-2)
punct(lent-8, ,-3)
compound(Casals-5, Pablo-4)
nmod:poss(widow-7, Casals-5)
case(Casals-5, 's-6)
nsubj(lent-8, widow-7)
root(ROOT-0, lent-8)
iobj(lent-8, him-9)
nmod:poss(husband-11, her-10)
nmod:poss(cello-15, husband-11)
case(husband-11, 's-12)
amod(cello-15, precious-13)
compound(cello-15, Goffriller-14)
dobj(lent-8, cello-15)
case(years-18, for-16)
nummod(years-18, two-17)
nmod:for(cello-15, years-18)
cc(cello-15, and-19)
det(teen-ager-21, the-20)
nsubj(played-22, teen-ager-21)
dobj(lent-8, played-22)
conj:and(cello-15, played-22)
compound(music-24, chamber-23)
dobj(played-22, music-24)
case(Hall-27, at-25)
compound(Hall-27, Carnegie-26)
nmod:at(played-22, Hall-27)
case(Stern-30, with-28)
compound(Stern-30, Isaac-29)
nmod:with(played-22, Stern-30)
punct(Stern-30, ,-31)
compound(Ma-33, Yo-Yo-32)
nmod:with(played-22, Ma-33)
conj:and(Stern-30, Ma-33)
cc(Stern-30, and-34)
amod(luminaries-36, other-35)
nmod:with(played-22, luminaries-36)
conj:and(Stern-30, luminaries-36)
punct(lent-8, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: lend#cello

melt :: `` The hot weather just about melted him away , '' Mr. Corbett says with a sigh ./.
root(ROOT-0, ``-1)
det(weather-4, The-2)
amod(weather-4, hot-3)
nsubj(says-14, weather-4)
advmod(melted-7, just-5)
advmod(melted-7, about-6)
dep(weather-4, melted-7)
dobj(melted-7, him-8)
advmod(melted-7, away-9)
punct(says-14, ,-10)
punct(says-14, ''-11)
compound(Corbett-13, Mr.-12)
nsubj(says-14, Corbett-13)
root(``-1, says-14)
case(sigh-17, with-15)
det(sigh-17, a-16)
nmod:with(says-14, sigh-17)
punct(says-14, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#him

melt :: But the judge 's opinion said that the agitator for the vacuum cleaner `` was melting '' and `` making a loud noise , the foot pedal handle release was breaking and the vacuums were not equipped with a steel-encased motor as had been advertised to the trade , but rather with a less desirable and less reliable '' motor ./.
cc(said-6, But-1)
det(judge-3, the-2)
nmod:poss(opinion-5, judge-3)
case(judge-3, 's-4)
nsubj(said-6, opinion-5)
root(ROOT-0, said-6)
mark(melting-16, that-7)
det(agitator-9, the-8)
nsubj(melting-16, agitator-9)
case(cleaner-13, for-10)
det(cleaner-13, the-11)
compound(cleaner-13, vacuum-12)
nmod:for(agitator-9, cleaner-13)
punct(melting-16, ``-14)
cop(melting-16, was-15)
ccomp(said-6, melting-16)
punct(melting-16, ''-17)
cc(melting-16, and-18)
punct(melting-16, ``-19)
advcl(handle-28, making-20)
det(noise-23, a-21)
amod(noise-23, loud-22)
dobj(making-20, noise-23)
punct(handle-28, ,-24)
det(pedal-27, the-25)
compound(pedal-27, foot-26)
nsubj(handle-28, pedal-27)
ccomp(said-6, handle-28)
conj:and(melting-16, handle-28)
dobj(handle-28, release-29)
aux(breaking-31, was-30)
dep(handle-28, breaking-31)
cc(breaking-31, and-32)
det(vacuums-34, the-33)
nsubjpass(equipped-37, vacuums-34)
auxpass(equipped-37, were-35)
neg(equipped-37, not-36)
dep(handle-28, equipped-37)
conj:and(breaking-31, equipped-37)
case(motor-41, with-38)
det(motor-41, a-39)
amod(motor-41, steel-encased-40)
nmod:with(equipped-37, motor-41)
mark(advertised-45, as-42)
aux(advertised-45, had-43)
auxpass(advertised-45, been-44)
advcl(equipped-37, advertised-45)
case(trade-48, to-46)
det(trade-48, the-47)
nmod:to(advertised-45, trade-48)
punct(breaking-31, ,-49)
cc(breaking-31, but-50)
advmod(motor-60, rather-51)
case(motor-60, with-52)
det(motor-60, a-53)
advmod(desirable-55, less-54)
amod(motor-60, desirable-55)
cc(desirable-55, and-56)
advmod(reliable-58, less-57)
conj:and(desirable-55, reliable-58)
amod(motor-60, reliable-58)
punct(desirable-55, ''-59)
dep(handle-28, motor-60)
conj:negcc(breaking-31, motor-60)
punct(said-6, .-61)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#agitator

melt :: This may tell us more about the pollsters ' wizardry than it does about the candidates , but obviously the Democrats have n't melted away ./.
nsubj(tell-3, This-1)
aux(tell-3, may-2)
root(ROOT-0, tell-3)
dobj(tell-3, us-4)
xcomp(tell-3, more-5)
case(wizardry-10, about-6)
det(pollsters-8, the-7)
nmod:poss(wizardry-10, pollsters-8)
case(pollsters-8, '-9)
nmod:about(more-5, wizardry-10)
mark(candidates-16, than-11)
nsubj(candidates-16, it-12)
aux(candidates-16, does-13)
case(candidates-16, about-14)
det(candidates-16, the-15)
advcl(more-5, candidates-16)
punct(tell-3, ,-17)
cc(tell-3, but-18)
advmod(melted-24, obviously-19)
det(Democrats-21, the-20)
nsubj(melted-24, Democrats-21)
aux(melted-24, have-22)
neg(melted-24, n't-23)
conj:but(tell-3, melted-24)
advmod(melted-24, away-25)
punct(tell-3, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#democrats

melt :: In Mr. Kupfer 's `` Ring , '' a nuclear war has melted most of the world and made shopping difficult ./.
case(Ring-6, In-1)
compound(Kupfer-3, Mr.-2)
nmod:poss(Ring-6, Kupfer-3)
case(Kupfer-3, 's-4)
punct(Ring-6, ``-5)
nmod:in(melted-13, Ring-6)
punct(melted-13, ,-7)
punct(melted-13, ''-8)
det(war-11, a-9)
amod(war-11, nuclear-10)
nsubj(melted-13, war-11)
nsubj(made-19, war-11)
aux(melted-13, has-12)
root(ROOT-0, melted-13)
dobj(melted-13, most-14)
case(world-17, of-15)
det(world-17, the-16)
nmod:of(most-14, world-17)
cc(melted-13, and-18)
conj:and(melted-13, made-19)
nsubj(difficult-21, shopping-20)
xcomp(made-19, difficult-21)
punct(melted-13, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#world

melt :: The SEC suit alleges that the stock , which was unregistered , climbed to as high as $ 17 a share as a result of the claims , which were bolstered when Mr. Brown bought 209 ounces of gold , which was melted into four pieces and displayed to shareholders at an August 1987 meeting ./.
det(suit-3, The-1)
compound(suit-3, SEC-2)
nsubj(alleges-4, suit-3)
root(ROOT-0, alleges-4)
mark(climbed-13, that-5)
det(stock-7, the-6)
nsubj(unregistered-11, stock-7)
nsubj(climbed-13, stock-7)
punct(stock-7, ,-8)
ref(stock-7, which-9)
cop(unregistered-11, was-10)
acl:relcl(stock-7, unregistered-11)
punct(stock-7, ,-12)
ccomp(alleges-4, climbed-13)
case(high-16, to-14)
advmod(high-16, as-15)
nmod:to(climbed-13, high-16)
case(17-19, as-17)
dep(17-19, $-18)
nmod:as(high-16, 17-19)
det(share-21, a-20)
nmod:npmod(17-19, share-21)
case(result-24, as-22)
det(result-24, a-23)
nmod:as(high-16, result-24)
case(claims-27, of-25)
det(claims-27, the-26)
nmod:of(result-24, claims-27)
nsubjpass(bolstered-31, claims-27)
punct(claims-27, ,-28)
ref(claims-27, which-29)
auxpass(bolstered-31, were-30)
acl:relcl(claims-27, bolstered-31)
advmod(bought-35, when-32)
compound(Brown-34, Mr.-33)
nsubj(bought-35, Brown-34)
advcl(bolstered-31, bought-35)
nummod(ounces-37, 209-36)
dobj(bought-35, ounces-37)
nsubjpass(melted-43, ounces-37)
nsubjpass(displayed-48, ounces-37)
case(gold-39, of-38)
nmod:of(ounces-37, gold-39)
punct(ounces-37, ,-40)
ref(ounces-37, which-41)
auxpass(melted-43, was-42)
acl:relcl(ounces-37, melted-43)
case(pieces-46, into-44)
nummod(pieces-46, four-45)
nmod:into(melted-43, pieces-46)
cc(melted-43, and-47)
acl:relcl(ounces-37, displayed-48)
conj:and(melted-43, displayed-48)
case(shareholders-50, to-49)
nmod:to(displayed-48, shareholders-50)
case(meeting-55, at-51)
det(meeting-55, an-52)
compound(meeting-55, August-53)
nummod(meeting-55, 1987-54)
nmod:at(displayed-48, meeting-55)
punct(alleges-4, .-56)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#ounces

melt :: She seems to melt a little ; she fits in better with Yefim 's family ./.
nsubj(seems-2, She-1)
nsubj:xsubj(melt-4, She-1)
root(ROOT-0, seems-2)
mark(melt-4, to-3)
xcomp(seems-2, melt-4)
det(little-6, a-5)
dobj(melt-4, little-6)
punct(seems-2, ;-7)
nsubj(fits-9, she-8)
parataxis(seems-2, fits-9)
case(better-11, in-10)
nmod:in(fits-9, better-11)
case(family-15, with-12)
nmod:poss(family-15, Yefim-13)
case(Yefim-13, 's-14)
nmod:with(better-11, family-15)
punct(seems-2, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#little

melt :: `` The risk is , business will melt away . ''/''
root(ROOT-0, ``-1)
det(risk-3, The-2)
nsubj(is-4, risk-3)
root(``-1, is-4)
punct(is-4, ,-5)
nsubj(melt-8, business-6)
aux(melt-8, will-7)
ccomp(is-4, melt-8)
advmod(melt-8, away-9)
punct(is-4, .-10)
punct(is-4, ''-11)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: melt#business

melt :: The problem it would confront is those last decades -LRB- 2030-2050 -RRB- of the scenario , when the surplus melts away to zero ./.
det(problem-2, The-1)
nsubj(those-7, problem-2)
nsubj(confront-5, it-3)
aux(confront-5, would-4)
acl:relcl(problem-2, confront-5)
cop(those-7, is-6)
root(ROOT-0, those-7)
amod(decades-9, last-8)
nmod:tmod(those-7, decades-9)
punct(2030-2050-11, -LRB--10)
appos(decades-9, 2030-2050-11)
punct(2030-2050-11, -RRB--12)
case(scenario-15, of-13)
det(scenario-15, the-14)
nmod:of(decades-9, scenario-15)
punct(decades-9, ,-16)
advmod(melts-20, when-17)
det(surplus-19, the-18)
nsubj(melts-20, surplus-19)
acl:relcl(decades-9, melts-20)
advmod(melts-20, away-21)
case(zero-23, to-22)
nmod:to(away-21, zero-23)
punct(those-7, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#surplus

melt :: Engineers at General Binding , in Northbrook , Ill . , devised a method that melts the adhesive by sending a low-voltage current into the cover itself , resulting in a smaller and less expensive unit ./.
nsubj(Ill-9, Engineers-1)
case(Binding-4, at-2)
amod(Binding-4, General-3)
nmod:at(Engineers-1, Binding-4)
punct(Ill-9, ,-5)
case(Northbrook-7, in-6)
nmod:in(Ill-9, Northbrook-7)
punct(Ill-9, ,-8)
root(ROOT-0, Ill-9)
punct(Ill-9, .-10)
punct(devised-2, ,-1)
root(ROOT-0, devised-2)
det(method-4, a-3)
dobj(devised-2, method-4)
nsubj(melts-6, method-4)
ref(method-4, that-5)
acl:relcl(method-4, melts-6)
det(adhesive-8, the-7)
dobj(melts-6, adhesive-8)
mark(sending-10, by-9)
advcl(melts-6, sending-10)
det(current-13, a-11)
amod(current-13, low-voltage-12)
dobj(sending-10, current-13)
case(cover-16, into-14)
det(cover-16, the-15)
nmod:into(sending-10, cover-16)
nmod:npmod(cover-16, itself-17)
punct(sending-10, ,-18)
advcl(sending-10, resulting-19)
case(unit-26, in-20)
det(unit-26, a-21)
amod(unit-26, smaller-22)
cc(smaller-22, and-23)
advmod(expensive-25, less-24)
conj:and(smaller-22, expensive-25)
amod(unit-26, expensive-25)
nmod:in(resulting-19, unit-26)
punct(devised-2, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#adhesive

melt :: One is in Lebanon 's Bekaa Valley , that melting pot of radical Palestinians , Iranians , Libyan and Syrian intelligence officers and Shiite terrorists ./.
nsubj(Valley-7, One-1)
cop(Valley-7, is-2)
case(Valley-7, in-3)
nmod:poss(Valley-7, Lebanon-4)
case(Lebanon-4, 's-5)
compound(Valley-7, Bekaa-6)
root(ROOT-0, Valley-7)
punct(Valley-7, ,-8)
appos(Valley-7, that-9)
compound(pot-11, melting-10)
dep(that-9, pot-11)
case(Palestinians-14, of-12)
amod(Palestinians-14, radical-13)
nmod:of(pot-11, Palestinians-14)
punct(Palestinians-14, ,-15)
nmod:of(pot-11, Iranians-16)
conj:and(Palestinians-14, Iranians-16)
punct(Palestinians-14, ,-17)
nmod:of(pot-11, Libyan-18)
conj:and(Palestinians-14, Libyan-18)
cc(Palestinians-14, and-19)
amod(officers-22, Syrian-20)
compound(officers-22, intelligence-21)
nmod:of(pot-11, officers-22)
conj:and(Palestinians-14, officers-22)
cc(officers-22, and-23)
amod(terrorists-25, Shiite-24)
conj:and(Palestinians-14, terrorists-25)
conj:and(officers-22, terrorists-25)
punct(Valley-7, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

melt :: And now that the winter snows are melting along the Indo-Chinese border in the Himalayas , tension between the two Asian rivals is again rising ./.
cc(rising-25, And-1)
advmod(melting-8, now-2)
mark(melting-8, that-3)
det(snows-6, the-4)
compound(snows-6, winter-5)
nsubj(melting-8, snows-6)
aux(melting-8, are-7)
advcl(rising-25, melting-8)
case(border-12, along-9)
det(border-12, the-10)
amod(border-12, Indo-Chinese-11)
nmod:along(melting-8, border-12)
case(Himalayas-15, in-13)
det(Himalayas-15, the-14)
nmod:in(border-12, Himalayas-15)
punct(rising-25, ,-16)
nsubj(rising-25, tension-17)
case(rivals-22, between-18)
det(rivals-22, the-19)
nummod(rivals-22, two-20)
amod(rivals-22, Asian-21)
nmod:between(tension-17, rivals-22)
aux(rising-25, is-23)
advmod(rising-25, again-24)
root(ROOT-0, rising-25)
punct(rising-25, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#snows

melt :: More troubling to voters in Sacramento , perhaps , is that Babcock & Wilcox also designed the Three Mile Island unit that almost melted down in 1979 ./.
advmod(troubling-2, More-1)
nsubj(is-10, troubling-2)
case(voters-4, to-3)
nmod:to(troubling-2, voters-4)
case(Sacramento-6, in-5)
nmod:in(voters-4, Sacramento-6)
punct(Sacramento-6, ,-7)
advmod(Sacramento-6, perhaps-8)
punct(Sacramento-6, ,-9)
root(ROOT-0, is-10)
mark(designed-16, that-11)
nsubj(designed-16, Babcock-12)
cc(Babcock-12, &-13)
conj:&(Babcock-12, Wilcox-14)
nsubj(designed-16, Wilcox-14)
advmod(designed-16, also-15)
ccomp(is-10, designed-16)
det(unit-21, the-17)
nummod(unit-21, Three-18)
compound(unit-21, Mile-19)
compound(unit-21, Island-20)
dobj(designed-16, unit-21)
nsubj(melted-24, unit-21)
ref(unit-21, that-22)
advmod(melted-24, almost-23)
acl:relcl(unit-21, melted-24)
compound:prt(melted-24, down-25)
case(1979-27, in-26)
nmod:in(melted-24, 1979-27)
punct(is-10, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#unit

melt :: Atlantic currently has melting and casting operations at both sites ./.
nsubj(has-3, Atlantic-1)
advmod(has-3, currently-2)
root(ROOT-0, has-3)
compound(operations-7, melting-4)
cc(melting-4, and-5)
conj:and(melting-4, casting-6)
compound(operations-7, casting-6)
dobj(has-3, operations-7)
case(sites-10, at-8)
det(sites-10, both-9)
nmod:at(operations-7, sites-10)
punct(has-3, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

melt :: Mr. Martineau also says the tractors reflect another Russian approach to manufacturing: `` You could melt down one Belarus and make three American tractors with the amount of metal the Russians have put in it , '' he says ./.
compound(Martineau-2, Mr.-1)
nsubj(says-4, Martineau-2)
advmod(says-4, also-3)
root(ROOT-0, says-4)
det(tractors-6, the-5)
nsubj(reflect-7, tractors-6)
ccomp(says-4, reflect-7)
det(approach-10, another-8)
amod(approach-10, Russian-9)
dobj(reflect-7, approach-10)
case(manufacturing-12, to-11)
nmod:to(approach-10, manufacturing-12)
punct(says-4, :-13)
punct(says-4, ``-14)
nsubj(melt-17, You-15)
nsubj(make-22, You-15)
aux(melt-17, could-16)
ccomp(says-40, melt-17)
compound:prt(melt-17, down-18)
nummod(Belarus-20, one-19)
dobj(melt-17, Belarus-20)
cc(melt-17, and-21)
conj:and(melt-17, make-22)
ccomp(says-40, make-22)
nummod(tractors-25, three-23)
amod(tractors-25, American-24)
dobj(make-22, tractors-25)
case(amount-28, with-26)
det(amount-28, the-27)
nmod:with(tractors-25, amount-28)
case(metal-30, of-29)
nmod:of(amount-28, metal-30)
det(Russians-32, the-31)
nsubj(put-34, Russians-32)
aux(put-34, have-33)
acl:relcl(tractors-25, put-34)
case(it-36, in-35)
nmod:in(put-34, it-36)
punct(says-40, ,-37)
punct(says-40, ''-38)
nsubj(says-40, he-39)
ccomp(says-4, says-40)
punct(says-4, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#belarus

melt :: On one occasion , intelligence sources say , a rebel band took its Stingers to the Soviet air base at Qandahar , set up shop not far from the end of the runway , blasted a few Soviet planes as they tried to take off laden with fuel and ammunition , then melted into the hills ./.
case(occasion-3, On-1)
nummod(occasion-3, one-2)
nmod:on(took-12, occasion-3)
punct(say-7, ,-4)
compound(sources-6, intelligence-5)
nsubj(say-7, sources-6)
parataxis(took-12, say-7)
punct(say-7, ,-8)
det(band-11, a-9)
compound(band-11, rebel-10)
nsubj(took-12, band-11)
root(ROOT-0, took-12)
nmod:poss(Stingers-14, its-13)
dobj(took-12, Stingers-14)
case(base-19, to-15)
det(base-19, the-16)
compound(base-19, Soviet-17)
compound(base-19, air-18)
nmod:to(took-12, base-19)
case(Qandahar-21, at-20)
nmod:at(took-12, Qandahar-21)
punct(took-12, ,-22)
dep(took-12, set-23)
compound:prt(set-23, up-24)
dobj(set-23, shop-25)
dep(end-30, not-26)
case(end-30, far-27)
mwe(far-27, from-28)
det(end-30, the-29)
nmod:far_from(set-23, end-30)
case(runway-33, of-31)
det(runway-33, the-32)
nmod:of(end-30, runway-33)
punct(set-23, ,-34)
dep(set-23, blasted-35)
det(planes-39, a-36)
amod(planes-39, few-37)
amod(planes-39, Soviet-38)
dobj(blasted-35, planes-39)
mark(tried-42, as-40)
nsubj(tried-42, they-41)
nsubj:xsubj(take-44, they-41)
advcl(blasted-35, tried-42)
mark(take-44, to-43)
xcomp(tried-42, take-44)
compound:prt(take-44, off-45)
dobj(take-44, laden-46)
case(fuel-48, with-47)
nmod:with(laden-46, fuel-48)
cc(fuel-48, and-49)
nmod:with(laden-46, ammunition-50)
conj:and(fuel-48, ammunition-50)
punct(took-12, ,-51)
advmod(melted-53, then-52)
dep(took-12, melted-53)
case(hills-56, into-54)
det(hills-56, the-55)
nmod:into(melted-53, hills-56)
punct(took-12, .-57)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#hills

melt :: But the Supreme Court melted down my statue when it decided Hazelwood . ''/''
cc(melted-5, But-1)
det(Court-4, the-2)
compound(Court-4, Supreme-3)
nsubj(melted-5, Court-4)
root(ROOT-0, melted-5)
compound:prt(melted-5, down-6)
nmod:poss(statue-8, my-7)
dobj(melted-5, statue-8)
advmod(decided-11, when-9)
nsubj(decided-11, it-10)
advcl(melted-5, decided-11)
dobj(decided-11, Hazelwood-12)
punct(melted-5, .-13)
punct(melted-5, ''-14)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: melt#statue

melt :: It held open houses for prospective investors at the mine , where large amounts of rock were dug and ground up , filtered and washed , then melted in a furnace and `` poured into what were represented to be precious-metal blocks , shaped like pyramids , '' according to the criminal indictment filed against Mr. Barbara and four others in state court in Las Cruces , N.M ./.
nsubj(held-2, It-1)
root(ROOT-0, held-2)
amod(houses-4, open-3)
dobj(held-2, houses-4)
case(investors-7, for-5)
amod(investors-7, prospective-6)
nmod:for(houses-4, investors-7)
case(mine-10, at-8)
det(mine-10, the-9)
nmod:at(held-2, mine-10)
punct(mine-10, ,-11)
advmod(dug-18, where-12)
amod(amounts-14, large-13)
nsubjpass(dug-18, amounts-14)
case(rock-16, of-15)
nmod:of(amounts-14, rock-16)
auxpass(dug-18, were-17)
acl:relcl(mine-10, dug-18)
cc(dug-18, and-19)
acl:relcl(mine-10, ground-20)
conj:and(dug-18, ground-20)
compound:prt(ground-20, up-21)
punct(ground-20, ,-22)
conj:and(dug-18, filtered-23)
conj:and(ground-20, filtered-23)
cc(ground-20, and-24)
conj:and(dug-18, washed-25)
conj:and(ground-20, washed-25)
punct(mine-10, ,-26)
advmod(melted-28, then-27)
dep(mine-10, melted-28)
case(furnace-31, in-29)
det(furnace-31, a-30)
nmod:in(melted-28, furnace-31)
cc(melted-28, and-32)
punct(melted-28, ``-33)
dep(mine-10, poured-34)
conj:and(melted-28, poured-34)
mark(represented-38, into-35)
nsubjpass(represented-38, what-36)
nsubj:xsubj(blocks-42, what-36)
auxpass(represented-38, were-37)
advcl(poured-34, represented-38)
mark(blocks-42, to-39)
cop(blocks-42, be-40)
amod(blocks-42, precious-metal-41)
xcomp(represented-38, blocks-42)
punct(blocks-42, ,-43)
acl(blocks-42, shaped-44)
case(pyramids-46, like-45)
nmod:like(shaped-44, pyramids-46)
punct(held-2, ,-47)
punct(held-2, ''-48)
case(indictment-53, according-49)
mwe(according-49, to-50)
det(indictment-53, the-51)
amod(indictment-53, criminal-52)
nmod:according_to(held-2, indictment-53)
acl(indictment-53, filed-54)
case(Barbara-57, against-55)
compound(Barbara-57, Mr.-56)
nmod:against(filed-54, Barbara-57)
cc(Barbara-57, and-58)
nummod(others-60, four-59)
nmod:against(filed-54, others-60)
conj:and(Barbara-57, others-60)
case(court-63, in-61)
compound(court-63, state-62)
nmod:in(filed-54, court-63)
case(Cruces-66, in-64)
compound(Cruces-66, Las-65)
nmod:in(court-63, Cruces-66)
punct(Cruces-66, ,-67)
appos(Cruces-66, N.M-68)
punct(held-2, .-69)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#furnace

melt :: Unself-consciously , the littlest cast member with the big voice steps into the audience in one number to open her wide cat-eyes and throat to melt the heart of one lucky patron each night ./.
root(ROOT-0, Unself-consciously-1)
punct(Unself-consciously-1, ,-2)
det(member-6, the-3)
amod(member-6, littlest-4)
compound(member-6, cast-5)
root(,-2, member-6)
case(steps-11, with-7)
det(steps-11, the-8)
amod(steps-11, big-9)
compound(steps-11, voice-10)
nmod:with(member-6, steps-11)
case(audience-14, into-12)
det(audience-14, the-13)
nmod:into(steps-11, audience-14)
case(number-17, in-15)
nummod(number-17, one-16)
nmod:in(member-6, number-17)
mark(open-19, to-18)
acl(member-6, open-19)
nmod:poss(cat-eyes-22, her-20)
amod(cat-eyes-22, wide-21)
dobj(open-19, cat-eyes-22)
cc(cat-eyes-22, and-23)
dobj(open-19, throat-24)
conj:and(cat-eyes-22, throat-24)
mark(melt-26, to-25)
advcl(open-19, melt-26)
det(heart-28, the-27)
dobj(melt-26, heart-28)
case(patron-32, of-29)
nummod(patron-32, one-30)
amod(patron-32, lucky-31)
nmod:of(heart-28, patron-32)
det(night-34, each-33)
nmod:tmod(melt-26, night-34)
punct(member-6, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#patron

melt :: But mindful of Daedalus 's brash son , Icarus , who flew too close to the sun , melted his wings and fell fatally to the sea , they carefully avoid hubris ./.
cc(melted-19, But-1)
nsubj(melted-19, mindful-2)
nsubj(fell-23, mindful-2)
case(son-7, of-3)
nmod:poss(son-7, Daedalus-4)
case(Daedalus-4, 's-5)
amod(son-7, brash-6)
nmod:of(mindful-2, son-7)
nsubj(flew-12, son-7)
punct(son-7, ,-8)
appos(son-7, Icarus-9)
punct(son-7, ,-10)
ref(son-7, who-11)
acl:relcl(son-7, flew-12)
advmod(sun-17, too-13)
case(sun-17, close-14)
mwe(close-14, to-15)
det(sun-17, the-16)
nmod:close_to(flew-12, sun-17)
punct(son-7, ,-18)
ccomp(avoid-31, melted-19)
nmod:poss(wings-21, his-20)
dobj(melted-19, wings-21)
cc(melted-19, and-22)
conj:and(melted-19, fell-23)
ccomp(avoid-31, fell-23)
advmod(fell-23, fatally-24)
case(sea-27, to-25)
det(sea-27, the-26)
nmod:to(fell-23, sea-27)
punct(avoid-31, ,-28)
nsubj(avoid-31, they-29)
advmod(avoid-31, carefully-30)
root(ROOT-0, avoid-31)
dobj(avoid-31, hubris-32)
punct(avoid-31, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#wings

melt :: Chaparral is a mini-mill only in the sense that it melts scrap in electric furnaces , a type of operation that has made steady headway in the U.S. as the huge facilities that employ coke and iron ore and the traditional blast furnaces have declined ./.
nsubj(mini-mill-4, Chaparral-1)
cop(mini-mill-4, is-2)
det(mini-mill-4, a-3)
root(ROOT-0, mini-mill-4)
advmod(sense-8, only-5)
case(sense-8, in-6)
det(sense-8, the-7)
nmod:in(mini-mill-4, sense-8)
mark(melts-11, that-9)
nsubj(melts-11, it-10)
ccomp(sense-8, melts-11)
dobj(melts-11, scrap-12)
case(furnaces-15, in-13)
amod(furnaces-15, electric-14)
nmod:in(declined-45, furnaces-15)
punct(furnaces-15, ,-16)
det(type-18, a-17)
nsubj(made-23, type-18)
nsubj(declined-45, type-18)
case(operation-20, of-19)
nmod:of(type-18, operation-20)
ref(type-18, that-21)
aux(made-23, has-22)
acl:relcl(type-18, made-23)
amod(headway-25, steady-24)
dobj(made-23, headway-25)
case(U.S.-28, in-26)
det(U.S.-28, the-27)
nmod:in(made-23, U.S.-28)
case(facilities-32, as-29)
det(facilities-32, the-30)
amod(facilities-32, huge-31)
nmod:as(made-23, facilities-32)
nsubj(employ-34, facilities-32)
ref(facilities-32, that-33)
acl:relcl(facilities-32, employ-34)
compound(ore-38, coke-35)
cc(coke-35, and-36)
conj:and(coke-35, iron-37)
compound(ore-38, iron-37)
dobj(employ-34, ore-38)
cc(ore-38, and-39)
det(furnaces-43, the-40)
amod(furnaces-43, traditional-41)
compound(furnaces-43, blast-42)
dobj(employ-34, furnaces-43)
conj:and(ore-38, furnaces-43)
aux(declined-45, have-44)
advcl(melts-11, declined-45)
punct(mini-mill-4, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#scrap

melt :: Mr. Deaver , who does n't seem to mind what he reveals about himself , writes: `` I just melted . ''/''
compound(Deaver-2, Mr.-1)
nsubj(seem-7, Deaver-2)
nsubj:xsubj(mind-9, Deaver-2)
nsubj(writes-16, Deaver-2)
punct(Deaver-2, ,-3)
ref(Deaver-2, who-4)
aux(seem-7, does-5)
neg(seem-7, n't-6)
acl:relcl(Deaver-2, seem-7)
mark(mind-9, to-8)
xcomp(seem-7, mind-9)
dobj(reveals-12, what-10)
nsubj(reveals-12, he-11)
ccomp(mind-9, reveals-12)
case(himself-14, about-13)
nmod:about(reveals-12, himself-14)
punct(Deaver-2, ,-15)
root(ROOT-0, writes-16)
punct(writes-16, :-17)
punct(writes-16, ``-18)
nsubj(melted-21, I-19)
advmod(melted-21, just-20)
ccomp(writes-16, melted-21)
punct(writes-16, .-22)
punct(writes-16, ''-23)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: melt#i

melt :: He talks of a `` debt cone '' that will melt down once consumers and businesses realize it does n't pay to borrow at high real interest rates to buy assets whose values are n't rising as fast as they were ./.
nsubj(talks-2, He-1)
root(ROOT-0, talks-2)
case(cone-7, of-3)
det(cone-7, a-4)
punct(cone-7, ``-5)
compound(cone-7, debt-6)
nmod:of(talks-2, cone-7)
nsubj(melt-11, cone-7)
punct(cone-7, ''-8)
ref(cone-7, that-9)
aux(melt-11, will-10)
acl:relcl(cone-7, melt-11)
advmod(melt-11, down-12)
advmod(realize-17, once-13)
nsubj(realize-17, consumers-14)
cc(consumers-14, and-15)
conj:and(consumers-14, businesses-16)
nsubj(realize-17, businesses-16)
ccomp(melt-11, realize-17)
nsubj(pay-21, it-18)
nsubj:xsubj(borrow-23, it-18)
aux(pay-21, does-19)
neg(pay-21, n't-20)
ccomp(realize-17, pay-21)
mark(borrow-23, to-22)
xcomp(pay-21, borrow-23)
case(rates-28, at-24)
amod(rates-28, high-25)
amod(rates-28, real-26)
compound(rates-28, interest-27)
nmod:at(borrow-23, rates-28)
mark(buy-30, to-29)
xcomp(borrow-23, buy-30)
dobj(buy-30, assets-31)
nmod:poss(values-33, assets-31)
ref(assets-31, whose-32)
nsubj(rising-36, values-33)
aux(rising-36, are-34)
neg(rising-36, n't-35)
acl:relcl(assets-31, rising-36)
advmod(fast-38, as-37)
advmod(rising-36, fast-38)
mark(were-41, as-39)
nsubj(were-41, they-40)
advcl(fast-38, were-41)
punct(talks-2, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#cone

melt :: But the Supreme Court melted down my statue when it decided Hazelwood . ''/''
cc(melted-5, But-1)
det(Court-4, the-2)
compound(Court-4, Supreme-3)
nsubj(melted-5, Court-4)
root(ROOT-0, melted-5)
compound:prt(melted-5, down-6)
nmod:poss(statue-8, my-7)
dobj(melted-5, statue-8)
advmod(decided-11, when-9)
nsubj(decided-11, it-10)
advcl(melted-5, decided-11)
dobj(decided-11, Hazelwood-12)
punct(melted-5, .-13)
punct(melted-5, ''-14)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: melt#statue

melt :: The villagers -LRB- using dynamite purchased with His Highness 's money -RRB- channeled melting mountain snow -- the only water available in this high desert -- to previously arid land ./.
det(villagers-2, The-1)
nsubj(channeled-13, villagers-2)
punct(using-4, -LRB--3)
dep(villagers-2, using-4)
dobj(using-4, dynamite-5)
acl(dynamite-5, purchased-6)
case(money-11, with-7)
nmod:poss(Highness-9, His-8)
nmod:poss(money-11, Highness-9)
case(Highness-9, 's-10)
nmod:with(purchased-6, money-11)
punct(using-4, -RRB--12)
root(ROOT-0, channeled-13)
amod(snow-16, melting-14)
compound(snow-16, mountain-15)
dobj(channeled-13, snow-16)
punct(snow-16, ---17)
det(water-20, the-18)
amod(water-20, only-19)
dep(snow-16, water-20)
amod(water-20, available-21)
case(desert-25, in-22)
det(desert-25, this-23)
amod(desert-25, high-24)
nmod:in(available-21, desert-25)
punct(snow-16, ---26)
case(land-30, to-27)
advmod(arid-29, previously-28)
amod(land-30, arid-29)
nmod:to(channeled-13, land-30)
punct(channeled-13, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#snow

melt :: The international Food Court , serving up a melting pot of fast food , approximates a municipal park ./.
det(Court-4, The-1)
amod(Court-4, international-2)
compound(Court-4, Food-3)
nsubj(approximates-15, Court-4)
punct(approximates-15, ,-5)
advcl(approximates-15, serving-6)
compound:prt(serving-6, up-7)
det(pot-10, a-8)
compound(pot-10, melting-9)
dobj(serving-6, pot-10)
case(food-13, of-11)
amod(food-13, fast-12)
nmod:of(pot-10, food-13)
punct(approximates-15, ,-14)
root(ROOT-0, approximates-15)
det(park-18, a-16)
amod(park-18, municipal-17)
dobj(approximates-15, park-18)
punct(approximates-15, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

melt :: There were kimono-clad waitresses , a couple of hundred men in blue suits , name cards , whiskey , little sushi bars and noodle stands along the walls , chefs with puff hats , piles of shrimp and meat , and an ice sculpture , slowly melting , as a centerpiece ./.
expl(were-2, There-1)
root(ROOT-0, were-2)
amod(waitresses-4, kimono-clad-3)
nsubj(stands-25, waitresses-4)
punct(waitresses-4, ,-5)
det(couple-7, a-6)
appos(waitresses-4, couple-7)
case(men-10, of-8)
nummod(men-10, hundred-9)
nmod:of(couple-7, men-10)
case(suits-13, in-11)
amod(suits-13, blue-12)
nmod:in(couple-7, suits-13)
punct(waitresses-4, ,-14)
compound(cards-16, name-15)
conj:and(waitresses-4, cards-16)
nsubj(stands-25, cards-16)
punct(waitresses-4, ,-17)
conj:and(waitresses-4, whiskey-18)
nsubj(stands-25, whiskey-18)
punct(waitresses-4, ,-19)
amod(bars-22, little-20)
compound(bars-22, sushi-21)
conj:and(waitresses-4, bars-22)
nsubj(stands-25, bars-22)
cc(waitresses-4, and-23)
conj:and(waitresses-4, noodle-24)
nsubj(stands-25, noodle-24)
ccomp(were-2, stands-25)
case(walls-28, along-26)
det(walls-28, the-27)
nmod:along(stands-25, walls-28)
punct(stands-25, ,-29)
xcomp(stands-25, chefs-30)
case(hats-33, with-31)
compound(hats-33, puff-32)
nmod:with(chefs-30, hats-33)
punct(hats-33, ,-34)
nmod:with(chefs-30, piles-35)
conj:and(hats-33, piles-35)
case(shrimp-37, of-36)
nmod:of(piles-35, shrimp-37)
cc(shrimp-37, and-38)
nmod:of(piles-35, meat-39)
conj:and(shrimp-37, meat-39)
punct(hats-33, ,-40)
cc(hats-33, and-41)
det(sculpture-44, an-42)
compound(sculpture-44, ice-43)
nmod:with(chefs-30, sculpture-44)
conj:and(hats-33, sculpture-44)
punct(chefs-30, ,-45)
advmod(melting-47, slowly-46)
appos(chefs-30, melting-47)
punct(chefs-30, ,-48)
case(centerpiece-51, as-49)
det(centerpiece-51, a-50)
nmod:as(chefs-30, centerpiece-51)
punct(were-2, .-52)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

melt :: Pounds have melted off , she says , during the months of one-night stands ./.
nsubj(melted-3, Pounds-1)
aux(melted-3, have-2)
root(ROOT-0, melted-3)
compound:prt(melted-3, off-4)
punct(says-7, ,-5)
nsubj(says-7, she-6)
parataxis(melted-3, says-7)
punct(says-7, ,-8)
case(months-11, during-9)
det(months-11, the-10)
nmod:during(melted-3, months-11)
case(stands-14, of-12)
amod(stands-14, one-night-13)
nmod:of(months-11, stands-14)
punct(melted-3, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#pounds

melt :: The plant in Osuka , about 150 miles southwest of Tokyo , will finish glass melted in Corning , N.Y . , but melt facilities may be added later , the company said ./.
det(plant-2, The-1)
nsubj(finish-14, plant-2)
case(Osuka-4, in-3)
nmod:in(plant-2, Osuka-4)
punct(Osuka-4, ,-5)
advmod(150-7, about-6)
nummod(miles-8, 150-7)
nmod:npmod(southwest-9, miles-8)
appos(Osuka-4, southwest-9)
case(Tokyo-11, of-10)
nmod:of(southwest-9, Tokyo-11)
punct(Osuka-4, ,-12)
aux(finish-14, will-13)
root(ROOT-0, finish-14)
dobj(finish-14, glass-15)
acl(glass-15, melted-16)
case(Corning-18, in-17)
nmod:in(melted-16, Corning-18)
punct(Corning-18, ,-19)
appos(Corning-18, N.Y-20)
punct(finish-14, .-21)
punct(added-7, ,-1)
cc(added-7, but-2)
amod(facilities-4, melt-3)
nsubjpass(added-7, facilities-4)
aux(added-7, may-5)
auxpass(added-7, be-6)
ccomp(said-12, added-7)
advmod(added-7, later-8)
punct(said-12, ,-9)
det(company-11, the-10)
nsubj(said-12, company-11)
root(ROOT-0, said-12)
punct(said-12, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#facilities

melt :: The impact of her crash coup is melting away as her fund has trailed the market consistently ./.
det(impact-2, The-1)
nsubj(melting-8, impact-2)
case(coup-6, of-3)
nmod:poss(coup-6, her-4)
compound(coup-6, crash-5)
nmod:of(impact-2, coup-6)
aux(melting-8, is-7)
root(ROOT-0, melting-8)
compound:prt(melting-8, away-9)
mark(trailed-14, as-10)
nmod:poss(fund-12, her-11)
nsubj(trailed-14, fund-12)
aux(trailed-14, has-13)
advcl(melting-8, trailed-14)
det(market-16, the-15)
dobj(trailed-14, market-16)
advmod(trailed-14, consistently-17)
punct(melting-8, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#impact

melt :: Thanks to a new formula and colder dispensing equipment , Twistee Treat Corp. says its cones can be held for 12 minutes before starting to melt , twice as long as other brands ./.
ccomp(says-14, Thanks-1)
case(formula-5, to-2)
det(formula-5, a-3)
amod(formula-5, new-4)
nmod:to(Thanks-1, formula-5)
cc(formula-5, and-6)
amod(equipment-9, colder-7)
amod(equipment-9, dispensing-8)
nmod:to(Thanks-1, equipment-9)
conj:and(formula-5, equipment-9)
punct(says-14, ,-10)
compound(Corp.-13, Twistee-11)
compound(Corp.-13, Treat-12)
nsubj(says-14, Corp.-13)
root(ROOT-0, says-14)
nmod:poss(cones-16, its-15)
nsubjpass(held-19, cones-16)
aux(held-19, can-17)
auxpass(held-19, be-18)
ccomp(says-14, held-19)
case(minutes-22, for-20)
nummod(minutes-22, 12-21)
nmod:for(held-19, minutes-22)
mark(starting-24, before-23)
advcl(held-19, starting-24)
mark(melt-26, to-25)
xcomp(starting-24, melt-26)
punct(held-19, ,-27)
advmod(long-30, twice-28)
advmod(long-30, as-29)
advmod(held-19, long-30)
case(brands-33, as-31)
amod(brands-33, other-32)
nmod:as(long-30, brands-33)
punct(says-14, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

melt :: The fires , Ford said , could be caused by a nylon wiring shield that could melt and drip onto the engine 's hot exhaust manifold , `` resulting in an engine compartment fire . ''/''
det(fires-2, The-1)
nsubjpass(caused-9, fires-2)
punct(said-5, ,-3)
nsubj(said-5, Ford-4)
parataxis(caused-9, said-5)
punct(said-5, ,-6)
aux(caused-9, could-7)
auxpass(caused-9, be-8)
root(ROOT-0, caused-9)
case(shield-14, by-10)
det(shield-14, a-11)
compound(shield-14, nylon-12)
compound(shield-14, wiring-13)
nmod:agent(caused-9, shield-14)
nsubj(melt-17, shield-14)
ref(shield-14, that-15)
aux(melt-17, could-16)
acl:relcl(shield-14, melt-17)
cc(melt-17, and-18)
acl:relcl(shield-14, drip-19)
conj:and(melt-17, drip-19)
case(manifold-26, onto-20)
det(engine-22, the-21)
nmod:poss(manifold-26, engine-22)
case(engine-22, 's-23)
amod(manifold-26, hot-24)
compound(manifold-26, exhaust-25)
nmod:onto(drip-19, manifold-26)
punct(shield-14, ,-27)
punct(shield-14, ``-28)
acl(shield-14, resulting-29)
case(fire-34, in-30)
det(fire-34, an-31)
compound(fire-34, engine-32)
compound(fire-34, compartment-33)
nmod:in(resulting-29, fire-34)
punct(caused-9, .-35)
punct(caused-9, ''-36)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: melt#shield

melt :: `` We had to melt it down with hot water , as hot as your head could stand , before we could comb the hair out , '' recalls Jennie Aguilar , a beauty-school instructor in Canoga Park , Calif ./.
punct(recalls-29, ``-1)
nsubj(had-3, We-2)
nsubj:xsubj(melt-5, We-2)
ccomp(recalls-29, had-3)
mark(melt-5, to-4)
xcomp(had-3, melt-5)
dobj(melt-5, it-6)
compound:prt(melt-5, down-7)
case(water-10, with-8)
amod(water-10, hot-9)
nmod:with(melt-5, water-10)
punct(had-3, ,-11)
advmod(hot-13, as-12)
advmod(had-3, hot-13)
mark(stand-18, as-14)
nmod:poss(head-16, your-15)
nsubj(stand-18, head-16)
aux(stand-18, could-17)
advcl(hot-13, stand-18)
punct(had-3, ,-19)
mark(comb-23, before-20)
nsubj(comb-23, we-21)
aux(comb-23, could-22)
advcl(had-3, comb-23)
det(hair-25, the-24)
dobj(comb-23, hair-25)
compound:prt(comb-23, out-26)
punct(recalls-29, ,-27)
punct(recalls-29, ''-28)
root(ROOT-0, recalls-29)
compound(Aguilar-31, Jennie-30)
nsubj(recalls-29, Aguilar-31)
punct(Aguilar-31, ,-32)
det(instructor-35, a-33)
compound(instructor-35, beauty-school-34)
appos(Aguilar-31, instructor-35)
case(Park-38, in-36)
compound(Park-38, Canoga-37)
nmod:in(instructor-35, Park-38)
punct(Park-38, ,-39)
appos(Park-38, Calif-40)
punct(recalls-29, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#it

melt :: Mr. Phillips said the bars would `` melt for about half '' of their auction price ./.
compound(Phillips-2, Mr.-1)
nsubj(said-3, Phillips-2)
root(ROOT-0, said-3)
det(bars-5, the-4)
nsubj(melt-8, bars-5)
aux(melt-8, would-6)
punct(melt-8, ``-7)
ccomp(said-3, melt-8)
case(half-11, for-9)
advmod(half-11, about-10)
nmod:for(melt-8, half-11)
punct(half-11, ''-12)
case(price-16, of-13)
nmod:poss(price-16, their-14)
compound(price-16, auction-15)
nmod:of(half-11, price-16)
punct(said-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#bars

melt :: Unable to buy gold , he bought jewelry items cheap at government retail stores , melted them down and fashioned them into stylish items sold at a markup on the black market ./.
ccomp(bought-7, Unable-1)
mark(buy-3, to-2)
xcomp(Unable-1, buy-3)
dobj(buy-3, gold-4)
punct(bought-7, ,-5)
nsubj(bought-7, he-6)
nsubj(melted-16, he-6)
nsubj(fashioned-20, he-6)
root(ROOT-0, bought-7)
compound(items-9, jewelry-8)
dobj(bought-7, items-9)
amod(items-9, cheap-10)
case(stores-14, at-11)
compound(stores-14, government-12)
compound(stores-14, retail-13)
nmod:at(cheap-10, stores-14)
punct(bought-7, ,-15)
conj:and(bought-7, melted-16)
dobj(melted-16, them-17)
compound:prt(melted-16, down-18)
cc(bought-7, and-19)
conj:and(bought-7, fashioned-20)
dobj(fashioned-20, them-21)
case(items-24, into-22)
amod(items-24, stylish-23)
nmod:into(fashioned-20, items-24)
acl(items-24, sold-25)
case(markup-28, at-26)
det(markup-28, a-27)
nmod:at(sold-25, markup-28)
case(market-32, on-29)
det(market-32, the-30)
amod(market-32, black-31)
nmod:on(markup-28, market-32)
punct(bought-7, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#them

melt :: Support for the shipyard strike began melting away when workers across Poland ignored Solidarity 's call for sympathy stoppages ./.
nsubj(began-6, Support-1)
case(strike-5, for-2)
det(strike-5, the-3)
compound(strike-5, shipyard-4)
nmod:for(Support-1, strike-5)
root(ROOT-0, began-6)
xcomp(began-6, melting-7)
advmod(melting-7, away-8)
advmod(ignored-13, when-9)
nsubj(ignored-13, workers-10)
case(Poland-12, across-11)
nmod:across(workers-10, Poland-12)
advcl(melting-7, ignored-13)
nmod:poss(call-16, Solidarity-14)
case(Solidarity-14, 's-15)
dobj(ignored-13, call-16)
case(stoppages-19, for-17)
compound(stoppages-19, sympathy-18)
nmod:for(call-16, stoppages-19)
punct(began-6, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

melt :: And they claim -- butter not melting in their retinyl-palmitated , Heather Mist tinted mouths -- to `` rebuild the epidermis and strengthen its natural defenses , '' to `` enhance the natural rate of repair of cells , '' and to `` virtually reverse the visual signs of age on surface skin . ''/''
cc(claim-3, And-1)
nsubj(claim-3, they-2)
root(ROOT-0, claim-3)
punct(claim-3, ---4)
dobj(claim-3, butter-5)
neg(melting-7, not-6)
acl(butter-5, melting-7)
case(retinyl-palmitated-10, in-8)
nmod:poss(retinyl-palmitated-10, their-9)
nmod:in(melting-7, retinyl-palmitated-10)
punct(butter-5, ,-11)
compound(mouths-15, Heather-12)
compound(mouths-15, Mist-13)
amod(mouths-15, tinted-14)
appos(butter-5, mouths-15)
punct(butter-5, ---16)
mark(rebuild-19, to-17)
punct(rebuild-19, ``-18)
acl(butter-5, rebuild-19)
det(epidermis-21, the-20)
dobj(rebuild-19, epidermis-21)
nsubj:xsubj(enhance-31, epidermis-21)
cc(rebuild-19, and-22)
acl(butter-5, strengthen-23)
conj:and(rebuild-19, strengthen-23)
nmod:poss(defenses-26, its-24)
amod(defenses-26, natural-25)
dobj(strengthen-23, defenses-26)
punct(rebuild-19, ,-27)
punct(rebuild-19, ''-28)
mark(enhance-31, to-29)
punct(enhance-31, ``-30)
xcomp(rebuild-19, enhance-31)
det(rate-34, the-32)
amod(rate-34, natural-33)
dobj(enhance-31, rate-34)
case(repair-36, of-35)
nmod:of(rate-34, repair-36)
case(cells-38, of-37)
nmod:of(repair-36, cells-38)
punct(butter-5, ,-39)
punct(butter-5, ''-40)
cc(butter-5, and-41)
mark(reverse-45, to-42)
punct(reverse-45, ``-43)
advmod(reverse-45, virtually-44)
dobj(claim-3, reverse-45)
conj:and(butter-5, reverse-45)
det(signs-48, the-46)
amod(signs-48, visual-47)
dobj(reverse-45, signs-48)
case(age-50, of-49)
nmod:of(signs-48, age-50)
case(skin-53, on-51)
compound(skin-53, surface-52)
nmod:on(signs-48, skin-53)
punct(claim-3, .-54)
punct(claim-3, ''-55)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: melt#retinyl-palmitated

melt :: In a joint venture with a Japanese company this fall , Nucor Corp. of Charlotte will start melting steel in a new 500-worker I-beam mill at Blytheville , Ark . , on the Mississippi ./.
case(venture-4, In-1)
det(venture-4, a-2)
amod(venture-4, joint-3)
nmod:in(start-17, venture-4)
case(company-8, with-5)
det(company-8, a-6)
amod(company-8, Japanese-7)
nmod:with(venture-4, company-8)
det(fall-10, this-9)
nmod:tmod(venture-4, fall-10)
punct(start-17, ,-11)
compound(Corp.-13, Nucor-12)
nsubj(start-17, Corp.-13)
case(Charlotte-15, of-14)
nmod:of(Corp.-13, Charlotte-15)
aux(start-17, will-16)
root(ROOT-0, start-17)
xcomp(start-17, melting-18)
dobj(melting-18, steel-19)
case(mill-25, in-20)
det(mill-25, a-21)
amod(mill-25, new-22)
amod(mill-25, 500-worker-23)
compound(mill-25, I-beam-24)
nmod:in(melting-18, mill-25)
case(Blytheville-27, at-26)
nmod:at(mill-25, Blytheville-27)
punct(Blytheville-27, ,-28)
appos(Blytheville-27, Ark-29)
punct(start-17, .-30)
punct(Mississippi-4, ,-1)
case(Mississippi-4, on-2)
det(Mississippi-4, the-3)
root(ROOT-0, Mississippi-4)
punct(Mississippi-4, .-5)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#steel

melt :: Lord Bryce noted in 1888 , `` The conjunction of the forces of rank , wealth , knowledge , and intellect '' in a great metropolis like New York `` makes such a city a sort of foundry , '' a key place where `` opinion is melted and cast , '' and `` easily and swiftly propagated and diffused throughout the country . ''/''
compound(Bryce-2, Lord-1)
nsubj(noted-3, Bryce-2)
nsubj(propagated-58, Bryce-2)
root(ROOT-0, noted-3)
case(1888-5, in-4)
nmod:in(noted-3, 1888-5)
punct(noted-3, ,-6)
punct(noted-3, ``-7)
det(conjunction-9, The-8)
nsubj(makes-31, conjunction-9)
case(forces-12, of-10)
det(forces-12, the-11)
nmod:of(conjunction-9, forces-12)
case(rank-14, of-13)
nmod:of(forces-12, rank-14)
punct(rank-14, ,-15)
nmod:of(forces-12, wealth-16)
conj:and(rank-14, wealth-16)
punct(rank-14, ,-17)
nmod:of(forces-12, knowledge-18)
conj:and(rank-14, knowledge-18)
punct(rank-14, ,-19)
cc(rank-14, and-20)
nmod:of(forces-12, intellect-21)
conj:and(rank-14, intellect-21)
punct(forces-12, ''-22)
case(metropolis-26, in-23)
det(metropolis-26, a-24)
amod(metropolis-26, great-25)
nmod:in(forces-12, metropolis-26)
case(York-29, like-27)
compound(York-29, New-28)
nmod:like(metropolis-26, York-29)
punct(forces-12, ``-30)
ccomp(noted-3, makes-31)
det:predet(city-34, such-32)
det(city-34, a-33)
nsubj(sort-36, city-34)
det(sort-36, a-35)
xcomp(makes-31, sort-36)
case(foundry-38, of-37)
nmod:of(sort-36, foundry-38)
punct(makes-31, ,-39)
punct(makes-31, ''-40)
det(place-43, a-41)
amod(place-43, key-42)
dobj(makes-31, place-43)
advmod(melted-48, where-44)
punct(melted-48, ``-45)
nsubjpass(melted-48, opinion-46)
nsubjpass(cast-50, opinion-46)
auxpass(melted-48, is-47)
acl:relcl(place-43, melted-48)
cc(melted-48, and-49)
acl:relcl(place-43, cast-50)
conj:and(melted-48, cast-50)
punct(noted-3, ,-51)
punct(noted-3, ''-52)
cc(noted-3, and-53)
punct(noted-3, ``-54)
advmod(propagated-58, easily-55)
cc(easily-55, and-56)
conj:and(easily-55, swiftly-57)
advmod(propagated-58, swiftly-57)
conj:and(noted-3, propagated-58)
cc(propagated-58, and-59)
conj:and(noted-3, diffused-60)
conj:and(propagated-58, diffused-60)
case(country-63, throughout-61)
det(country-63, the-62)
nmod:throughout(propagated-58, country-63)
punct(noted-3, .-64)
punct(noted-3, ''-65)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: melt#opinion

melt :: Great ; when they 've finished melting , we 'll all have stew ./.
root(ROOT-0, Great-1)
punct(Great-1, ;-2)
advmod(finished-6, when-3)
nsubj(finished-6, they-4)
aux(finished-6, 've-5)
advcl(have-12, finished-6)
xcomp(finished-6, melting-7)
punct(have-12, ,-8)
nsubj(have-12, we-9)
aux(have-12, 'll-10)
advmod(have-12, all-11)
parataxis(Great-1, have-12)
dobj(have-12, stew-13)
punct(Great-1, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

melt :: It was a white New Year in Moscow , but by the time Christmas rolled around last week , unusually high temperatures , in the 30s and 40s day and night , had melted the snow away , leaving streets and sidewalks coated with mud and puddles ./.
nsubj(Year-6, It-1)
nsubj(melted-34, It-1)
cop(Year-6, was-2)
det(Year-6, a-3)
amod(Year-6, white-4)
amod(Year-6, New-5)
root(ROOT-0, Year-6)
case(Moscow-8, in-7)
nmod:in(Year-6, Moscow-8)
punct(Year-6, ,-9)
cc(Year-6, but-10)
case(time-13, by-11)
det(time-13, the-12)
nmod:by(melted-34, time-13)
nsubj(rolled-15, Christmas-14)
acl:relcl(time-13, rolled-15)
advmod(rolled-15, around-16)
amod(week-18, last-17)
nmod:tmod(rolled-15, week-18)
punct(time-13, ,-19)
advmod(high-21, unusually-20)
amod(temperatures-22, high-21)
appos(time-13, temperatures-22)
punct(time-13, ,-23)
case(day-29, in-24)
det(day-29, the-25)
compound(day-29, 30s-26)
cc(30s-26, and-27)
conj:and(30s-26, 40s-28)
compound(day-29, 40s-28)
nmod:in(time-13, day-29)
cc(day-29, and-30)
nmod:in(time-13, night-31)
conj:and(day-29, night-31)
punct(time-13, ,-32)
aux(melted-34, had-33)
conj:but(Year-6, melted-34)
det(snow-36, the-35)
dobj(melted-34, snow-36)
advmod(melted-34, away-37)
punct(melted-34, ,-38)
advcl(melted-34, leaving-39)
dobj(leaving-39, streets-40)
cc(streets-40, and-41)
dobj(leaving-39, sidewalks-42)
conj:and(streets-40, sidewalks-42)
acl(streets-40, coated-43)
case(mud-45, with-44)
nmod:with(coated-43, mud-45)
cc(mud-45, and-46)
nmod:with(coated-43, puddles-47)
conj:and(mud-45, puddles-47)
punct(Year-6, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#snow

melt :: The father and grown son walked slowly , their long , ebony shadows in sharp contrast against the tawny strips of switch grass , as the young hunter 's golden retriever melted in and out of sight in front of them ./.
det(father-2, The-1)
nsubj(walked-6, father-2)
cc(father-2, and-3)
amod(son-5, grown-4)
conj:and(father-2, son-5)
nsubj(walked-6, son-5)
root(ROOT-0, walked-6)
advmod(walked-6, slowly-7)
punct(walked-6, ,-8)
nmod:poss(shadows-13, their-9)
amod(shadows-13, long-10)
punct(shadows-13, ,-11)
compound(shadows-13, ebony-12)
dobj(walked-6, shadows-13)
case(contrast-16, in-14)
amod(contrast-16, sharp-15)
nmod:in(shadows-13, contrast-16)
case(strips-20, against-17)
det(strips-20, the-18)
amod(strips-20, tawny-19)
nmod:against(contrast-16, strips-20)
case(grass-23, of-21)
compound(grass-23, switch-22)
nmod:of(strips-20, grass-23)
punct(walked-6, ,-24)
mark(melted-32, as-25)
det(hunter-28, the-26)
amod(hunter-28, young-27)
nmod:poss(retriever-31, hunter-28)
case(hunter-28, 's-29)
amod(retriever-31, golden-30)
nsubj(melted-32, retriever-31)
advcl(walked-6, melted-32)
nmod(melted-32, in-33)
advmod(in-33, and-34)
case(sight-37, out-35)
mwe(out-35, of-36)
conj(and-34, sight-37)
case(them-41, in-38)
mwe(in-38, front-39)
mwe(in-38, of-40)
nmod:in_front_of(sight-37, them-41)
punct(walked-6, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#retriever

melt :: And as it does , the importance of the `` farm issue '' in next month 's Iowa caucuses is melting away like snow in a January thaw ./.
cc(melting-21, And-1)
mark(does-4, as-2)
nsubj(does-4, it-3)
advcl(melting-21, does-4)
punct(melting-21, ,-5)
det(importance-7, the-6)
nsubj(melting-21, importance-7)
case(issue-12, of-8)
det(issue-12, the-9)
punct(issue-12, ``-10)
compound(issue-12, farm-11)
nmod:of(importance-7, issue-12)
punct(issue-12, ''-13)
case(caucuses-19, in-14)
amod(month-16, next-15)
nmod:poss(caucuses-19, month-16)
case(month-16, 's-17)
compound(caucuses-19, Iowa-18)
nmod:in(importance-7, caucuses-19)
aux(melting-21, is-20)
root(ROOT-0, melting-21)
compound:prt(melting-21, away-22)
case(snow-24, like-23)
nmod:like(melting-21, snow-24)
case(thaw-28, in-25)
det(thaw-28, a-26)
compound(thaw-28, January-27)
nmod:in(melting-21, thaw-28)
punct(melting-21, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#importance

melt :: In a joint venture with a Japanese company this fall , Nucor Corp. of Charlotte will start melting steel in a new 500-worker I-beam mill at Blytheville , Ark . , on the Mississippi ./.
case(venture-4, In-1)
det(venture-4, a-2)
amod(venture-4, joint-3)
nmod:in(start-17, venture-4)
case(company-8, with-5)
det(company-8, a-6)
amod(company-8, Japanese-7)
nmod:with(venture-4, company-8)
det(fall-10, this-9)
nmod:tmod(venture-4, fall-10)
punct(start-17, ,-11)
compound(Corp.-13, Nucor-12)
nsubj(start-17, Corp.-13)
case(Charlotte-15, of-14)
nmod:of(Corp.-13, Charlotte-15)
aux(start-17, will-16)
root(ROOT-0, start-17)
xcomp(start-17, melting-18)
dobj(melting-18, steel-19)
case(mill-25, in-20)
det(mill-25, a-21)
amod(mill-25, new-22)
amod(mill-25, 500-worker-23)
compound(mill-25, I-beam-24)
nmod:in(melting-18, mill-25)
case(Blytheville-27, at-26)
nmod:at(mill-25, Blytheville-27)
punct(Blytheville-27, ,-28)
appos(Blytheville-27, Ark-29)
punct(start-17, .-30)
punct(Mississippi-4, ,-1)
case(Mississippi-4, on-2)
det(Mississippi-4, the-3)
root(ROOT-0, Mississippi-4)
punct(Mississippi-4, .-5)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#steel

melt :: On the Cadillac Eldorado convertibles , water or melting snow dripping onto the window switch assembly when the driver 's door is open could cause an electrical short ./.
case(convertibles-5, On-1)
det(convertibles-5, the-2)
compound(convertibles-5, Cadillac-3)
compound(convertibles-5, Eldorado-4)
nmod:on(cause-25, convertibles-5)
punct(cause-25, ,-6)
compound(snow-10, water-7)
cc(water-7, or-8)
conj:or(water-7, melting-9)
compound(snow-10, melting-9)
nsubj(cause-25, snow-10)
acl(snow-10, dripping-11)
case(assembly-16, onto-12)
det(assembly-16, the-13)
compound(assembly-16, window-14)
compound(assembly-16, switch-15)
nmod:onto(dripping-11, assembly-16)
advmod(open-23, when-17)
det(driver-19, the-18)
nmod:poss(door-21, driver-19)
case(driver-19, 's-20)
nsubj(open-23, door-21)
cop(open-23, is-22)
advcl(dripping-11, open-23)
aux(cause-25, could-24)
root(ROOT-0, cause-25)
det(short-28, an-26)
amod(short-28, electrical-27)
dobj(cause-25, short-28)
punct(cause-25, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

melt :: `` This is the kind of junk we ca n't even melt into other garbage , '' says a major coin wholesaler who asked to remain anonymous because he has sold other coins under the auspices of the Marshall Islands ./.
punct(says-18, ``-1)
nsubj(kind-5, This-2)
cop(kind-5, is-3)
det(kind-5, the-4)
ccomp(says-18, kind-5)
case(junk-7, of-6)
nmod:of(kind-5, junk-7)
nsubj(melt-12, we-8)
aux(melt-12, ca-9)
neg(melt-12, n't-10)
advmod(melt-12, even-11)
acl:relcl(kind-5, melt-12)
case(garbage-15, into-13)
amod(garbage-15, other-14)
nmod:into(melt-12, garbage-15)
punct(says-18, ,-16)
punct(says-18, ''-17)
root(ROOT-0, says-18)
det(wholesaler-22, a-19)
amod(wholesaler-22, major-20)
compound(wholesaler-22, coin-21)
nsubj(says-18, wholesaler-22)
nsubj(asked-24, wholesaler-22)
nsubj:xsubj(remain-26, wholesaler-22)
ref(wholesaler-22, who-23)
acl:relcl(wholesaler-22, asked-24)
mark(remain-26, to-25)
xcomp(asked-24, remain-26)
xcomp(remain-26, anonymous-27)
mark(sold-31, because-28)
nsubj(sold-31, he-29)
aux(sold-31, has-30)
advcl(asked-24, sold-31)
amod(coins-33, other-32)
dobj(sold-31, coins-33)
case(auspices-36, under-34)
det(auspices-36, the-35)
nmod:under(sold-31, auspices-36)
case(Islands-40, of-37)
det(Islands-40, the-38)
compound(Islands-40, Marshall-39)
nmod:of(auspices-36, Islands-40)
punct(says-18, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#we

melt :: Tens of thousands were melted down for scrap metal right after the war ./.
nsubjpass(melted-5, Tens-1)
case(thousands-3, of-2)
nmod:of(Tens-1, thousands-3)
auxpass(melted-5, were-4)
root(ROOT-0, melted-5)
compound:prt(melted-5, down-6)
case(metal-9, for-7)
compound(metal-9, scrap-8)
nmod:for(melted-5, metal-9)
advmod(war-13, right-10)
case(war-13, after-11)
det(war-13, the-12)
nmod:after(melted-5, war-13)
punct(melted-5, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#tens

melt :: The reasoning was that containers composed of more than one plastic ca n't be melted down and remade into the same types of containers ./.
det(reasoning-2, The-1)
nsubj(was-3, reasoning-2)
root(ROOT-0, was-3)
mark(composed-6, that-4)
nsubj(composed-6, containers-5)
ccomp(was-3, composed-6)
case(plastic-11, of-7)
advmod(one-10, more-8)
mwe(more-8, than-9)
nummod(plastic-11, one-10)
nmod:of(composed-6, plastic-11)
aux(melted-15, ca-12)
neg(melted-15, n't-13)
auxpass(melted-15, be-14)
dep(composed-6, melted-15)
advmod(melted-15, down-16)
cc(melted-15, and-17)
dep(composed-6, remade-18)
conj:and(melted-15, remade-18)
case(types-22, into-19)
det(types-22, the-20)
amod(types-22, same-21)
nmod:into(remade-18, types-22)
case(containers-24, of-23)
nmod:of(types-22, containers-24)
punct(was-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: melt#be

miss :: `` Ray Shaw is an exceptionally talented newsman and business executive and definitely will be missed , '' Mr. Phillips said ./.
punct(said-21, ``-1)
compound(Shaw-3, Ray-2)
nsubj(newsman-8, Shaw-3)
nsubjpass(missed-16, Shaw-3)
cop(newsman-8, is-4)
det(newsman-8, an-5)
advmod(talented-7, exceptionally-6)
amod(newsman-8, talented-7)
ccomp(said-21, newsman-8)
cc(newsman-8, and-9)
compound(executive-11, business-10)
conj:and(newsman-8, executive-11)
ccomp(said-21, executive-11)
cc(newsman-8, and-12)
advmod(missed-16, definitely-13)
aux(missed-16, will-14)
auxpass(missed-16, be-15)
conj:and(newsman-8, missed-16)
ccomp(said-21, missed-16)
punct(said-21, ,-17)
punct(said-21, ''-18)
compound(Phillips-20, Mr.-19)
nsubj(said-21, Phillips-20)
root(ROOT-0, said-21)
punct(said-21, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#shaw

miss :: Susan W. Peters 's Aug. 26 letter to the editor concerning the qualifications of business-school professors misses an important point ./.
compound(Peters-3, Susan-1)
compound(Peters-3, W.-2)
nmod:poss(letter-7, Peters-3)
case(Peters-3, 's-4)
compound(letter-7, Aug.-5)
nummod(letter-7, 26-6)
nsubj(misses-17, letter-7)
case(editor-10, to-8)
det(editor-10, the-9)
nmod:to(letter-7, editor-10)
acl(editor-10, concerning-11)
det(qualifications-13, the-12)
dobj(concerning-11, qualifications-13)
case(professors-16, of-14)
compound(professors-16, business-school-15)
nmod:of(qualifications-13, professors-16)
root(ROOT-0, misses-17)
det(point-20, an-18)
amod(point-20, important-19)
dobj(misses-17, point-20)
punct(misses-17, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#point

miss :: She works doggedly at her job in the garment industry , yet when she misses a promotion she 'd hoped for , she `` borrows '' two dresses from the showroom and takes her best friend dancing ./.
nsubj(works-2, She-1)
root(ROOT-0, works-2)
advmod(works-2, doggedly-3)
case(job-6, at-4)
nmod:poss(job-6, her-5)
nmod:at(works-2, job-6)
case(industry-10, in-7)
det(industry-10, the-8)
compound(industry-10, garment-9)
nmod:in(job-6, industry-10)
punct(works-2, ,-11)
advmod(misses-15, yet-12)
advmod(misses-15, when-13)
nsubj(misses-15, she-14)
advcl(works-2, misses-15)
det(promotion-17, a-16)
dobj(misses-15, promotion-17)
nsubj(hoped-20, she-18)
aux(hoped-20, 'd-19)
acl:relcl(promotion-17, hoped-20)
nmod(hoped-20, for-21)
punct(works-2, ,-22)
nsubj(borrows-25, she-23)
nsubj(takes-33, she-23)
punct(borrows-25, ``-24)
parataxis(works-2, borrows-25)
punct(borrows-25, ''-26)
nummod(dresses-28, two-27)
dobj(borrows-25, dresses-28)
case(showroom-31, from-29)
det(showroom-31, the-30)
nmod:from(borrows-25, showroom-31)
cc(borrows-25, and-32)
parataxis(works-2, takes-33)
conj:and(borrows-25, takes-33)
nmod:poss(dancing-37, her-34)
amod(dancing-37, best-35)
compound(dancing-37, friend-36)
dobj(takes-33, dancing-37)
punct(works-2, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#promotion

miss :: `` The U.S. could miss the boat if they play politics at the ADB and do n't put up the bucks , '' says an ADB executive who declined to be identified ./.
punct(says-24, ``-1)
det(U.S.-3, The-2)
nsubj(miss-5, U.S.-3)
aux(miss-5, could-4)
ccomp(says-24, miss-5)
det(boat-7, the-6)
dobj(miss-5, boat-7)
mark(play-10, if-8)
nsubj(play-10, they-9)
nsubj(put-18, they-9)
advcl(miss-5, play-10)
dobj(play-10, politics-11)
case(ADB-14, at-12)
det(ADB-14, the-13)
nmod:at(play-10, ADB-14)
cc(play-10, and-15)
aux(put-18, do-16)
neg(put-18, n't-17)
advcl(miss-5, put-18)
conj:and(play-10, put-18)
compound:prt(put-18, up-19)
det(bucks-21, the-20)
dobj(put-18, bucks-21)
punct(says-24, ,-22)
punct(says-24, ''-23)
root(ROOT-0, says-24)
det(executive-27, an-25)
compound(executive-27, ADB-26)
nsubj(says-24, executive-27)
nsubj(declined-29, executive-27)
nsubjpass:xsubj(identified-32, executive-27)
ref(executive-27, who-28)
acl:relcl(executive-27, declined-29)
mark(identified-32, to-30)
auxpass(identified-32, be-31)
xcomp(declined-29, identified-32)
punct(says-24, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#boat

miss :: `` A lot of the institutional investors that have missed the boat might want to take the opportunity to get in now , '' he said ./.
punct(said-26, ``-1)
det(lot-3, A-2)
nsubj(want-14, lot-3)
nsubj:xsubj(take-16, lot-3)
case(investors-7, of-4)
det(investors-7, the-5)
amod(investors-7, institutional-6)
nmod:of(lot-3, investors-7)
nsubj(missed-10, investors-7)
ref(investors-7, that-8)
aux(missed-10, have-9)
acl:relcl(investors-7, missed-10)
det(boat-12, the-11)
dobj(missed-10, boat-12)
aux(want-14, might-13)
ccomp(said-26, want-14)
mark(take-16, to-15)
xcomp(want-14, take-16)
det(opportunity-18, the-17)
dobj(take-16, opportunity-18)
mark(get-20, to-19)
acl(opportunity-18, get-20)
case(now-22, in-21)
nmod:in(get-20, now-22)
punct(said-26, ,-23)
punct(said-26, ''-24)
nsubj(said-26, he-25)
root(ROOT-0, said-26)
punct(said-26, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#boat

miss :: The current junior team members missed out on Minkey , which began last year , but they did benefit from Olympic profits in the form of a one-time $ 1.2 million payment disbursed by the U.S. Olympic Committee ./.
det(members-5, The-1)
amod(members-5, current-2)
compound(members-5, junior-3)
compound(members-5, team-4)
nsubj(missed-6, members-5)
root(ROOT-0, missed-6)
compound:prt(missed-6, out-7)
case(Minkey-9, on-8)
nmod:on(missed-6, Minkey-9)
nsubj(began-12, Minkey-9)
punct(Minkey-9, ,-10)
ref(Minkey-9, which-11)
acl:relcl(Minkey-9, began-12)
amod(year-14, last-13)
nmod:tmod(began-12, year-14)
punct(missed-6, ,-15)
cc(missed-6, but-16)
nsubj(did-18, they-17)
conj:but(missed-6, did-18)
dobj(did-18, benefit-19)
case(profits-22, from-20)
compound(profits-22, Olympic-21)
nmod:from(benefit-19, profits-22)
case(form-25, in-23)
det(form-25, the-24)
nmod:in(profits-22, form-25)
case(payment-32, of-26)
det(payment-32, a-27)
amod(payment-32, one-time-28)
amod(payment-32, $-29)
compound(million-31, 1.2-30)
nummod($-29, million-31)
nmod:of(form-25, payment-32)
acl(payment-32, disbursed-33)
case(Committee-38, by-34)
det(Committee-38, the-35)
compound(Committee-38, U.S.-36)
compound(Committee-38, Olympic-37)
nmod:by(disbursed-33, Committee-38)
punct(missed-6, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#members

miss :: `` Of course , you look at some of the women competing today , and they 've missed the whole point ./.
root(ROOT-0, ``-1)
case(course-3, Of-2)
nmod:of(look-6, course-3)
punct(look-6, ,-4)
nsubj(look-6, you-5)
root(``-1, look-6)
case(some-8, at-7)
nmod:at(look-6, some-8)
case(women-11, of-9)
det(women-11, the-10)
nmod:of(some-8, women-11)
acl(women-11, competing-12)
nmod:tmod(competing-12, today-13)
punct(look-6, ,-14)
cc(look-6, and-15)
nsubj(missed-18, they-16)
aux(missed-18, 've-17)
root(``-1, missed-18)
conj:and(look-6, missed-18)
det(point-21, the-19)
amod(point-21, whole-20)
dobj(missed-18, point-21)
punct(look-6, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#point

miss :: Nearly every scene seems to be missing something ./.
advmod(scene-3, Nearly-1)
det(scene-3, every-2)
nsubj(seems-4, scene-3)
nsubj:xsubj(missing-7, scene-3)
root(ROOT-0, seems-4)
mark(missing-7, to-5)
aux(missing-7, be-6)
xcomp(seems-4, missing-7)
dobj(missing-7, something-8)
punct(seems-4, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#something

miss :: The Soviet Union is unwilling and unlikely to miss the deadline for withdrawing all its troops from Afghanistan , despite its latest blustering and military maneuvering there , Western and Soviet officials indicated ./.
det(Union-3, The-1)
compound(Union-3, Soviet-2)
nsubj(unwilling-5, Union-3)
nsubj(unlikely-7, Union-3)
nsubj:xsubj(miss-9, Union-3)
cop(unwilling-5, is-4)
root(ROOT-0, unwilling-5)
cc(unwilling-5, and-6)
conj:and(unwilling-5, unlikely-7)
mark(miss-9, to-8)
xcomp(unwilling-5, miss-9)
det(deadline-11, the-10)
dobj(miss-9, deadline-11)
mark(withdrawing-13, for-12)
advcl(miss-9, withdrawing-13)
det:predet(troops-16, all-14)
nmod:poss(troops-16, its-15)
dobj(withdrawing-13, troops-16)
case(Afghanistan-18, from-17)
nmod:from(withdrawing-13, Afghanistan-18)
punct(unwilling-5, ,-19)
case(blustering-23, despite-20)
nmod:poss(blustering-23, its-21)
amod(blustering-23, latest-22)
nmod:despite(unwilling-5, blustering-23)
cc(blustering-23, and-24)
amod(maneuvering-26, military-25)
nmod:despite(unwilling-5, maneuvering-26)
conj:and(blustering-23, maneuvering-26)
advmod(blustering-23, there-27)
punct(blustering-23, ,-28)
amod(officials-32, Western-29)
cc(Western-29, and-30)
conj:and(Western-29, Soviet-31)
amod(officials-32, Soviet-31)
nsubj(indicated-33, officials-32)
dep(blustering-23, indicated-33)
punct(unwilling-5, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#deadline

miss :: MOSCOW APPEARS unwilling to miss a deadline for its pullout from Afghanistan ./.
nsubj(APPEARS-2, MOSCOW-1)
root(ROOT-0, APPEARS-2)
xcomp(APPEARS-2, unwilling-3)
mark(miss-5, to-4)
xcomp(unwilling-3, miss-5)
det(deadline-7, a-6)
dobj(miss-5, deadline-7)
case(pullout-10, for-8)
nmod:poss(pullout-10, its-9)
nmod:for(deadline-7, pullout-10)
case(Afghanistan-12, from-11)
nmod:from(pullout-10, Afghanistan-12)
punct(APPEARS-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#deadline

miss :: But Western and Soviet officials indicated that Moscow is unlikely to miss the Feb. 15 deadline for withdrawing its soldiers from the country ./.
cc(indicated-6, But-1)
amod(officials-5, Western-2)
cc(Western-2, and-3)
conj:and(Western-2, Soviet-4)
amod(officials-5, Soviet-4)
nsubj(indicated-6, officials-5)
root(ROOT-0, indicated-6)
mark(unlikely-10, that-7)
nsubj(unlikely-10, Moscow-8)
nsubj:xsubj(miss-12, Moscow-8)
cop(unlikely-10, is-9)
ccomp(indicated-6, unlikely-10)
mark(miss-12, to-11)
xcomp(unlikely-10, miss-12)
det(deadline-16, the-13)
compound(deadline-16, Feb.-14)
nummod(deadline-16, 15-15)
dobj(miss-12, deadline-16)
mark(withdrawing-18, for-17)
advcl(miss-12, withdrawing-18)
nmod:poss(soldiers-20, its-19)
dobj(withdrawing-18, soldiers-20)
case(country-23, from-21)
det(country-23, the-22)
nmod:from(withdrawing-18, country-23)
punct(indicated-6, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#deadline

miss :: Throughout training , Mr. Hynes and his classmates feared above all that they would wash out , or that the war would end , and that they 'd miss their chance at fighting the good fight ./.
case(training-2, Throughout-1)
nmod:throughout(feared-9, training-2)
punct(feared-9, ,-3)
compound(Hynes-5, Mr.-4)
nsubj(feared-9, Hynes-5)
cc(Hynes-5, and-6)
nmod:poss(classmates-8, his-7)
conj:and(Hynes-5, classmates-8)
nsubj(feared-9, classmates-8)
root(ROOT-0, feared-9)
case(all-11, above-10)
nmod:above(feared-9, all-11)
mark(wash-15, that-12)
nsubj(wash-15, they-13)
aux(wash-15, would-14)
ccomp(feared-9, wash-15)
compound:prt(wash-15, out-16)
punct(wash-15, ,-17)
cc(wash-15, or-18)
mark(end-23, that-19)
det(war-21, the-20)
nsubj(end-23, war-21)
aux(end-23, would-22)
ccomp(feared-9, end-23)
conj:or(wash-15, end-23)
punct(feared-9, ,-24)
cc(feared-9, and-25)
mark(miss-29, that-26)
nsubj(miss-29, they-27)
aux(miss-29, 'd-28)
conj:and(feared-9, miss-29)
nmod:poss(chance-31, their-30)
dobj(miss-29, chance-31)
mark(fighting-33, at-32)
advcl(miss-29, fighting-33)
det(fight-36, the-34)
amod(fight-36, good-35)
dobj(fighting-33, fight-36)
punct(feared-9, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#chance

miss :: What is missing is a general investor demand for physical gold , which would be the `` swing '' factor , he said ./.
nsubj(missing-3, What-1)
aux(missing-3, is-2)
csubj(demand-8, missing-3)
cop(demand-8, is-4)
det(demand-8, a-5)
amod(demand-8, general-6)
compound(demand-8, investor-7)
ccomp(said-23, demand-8)
case(gold-11, for-9)
amod(gold-11, physical-10)
nmod:for(demand-8, gold-11)
nsubj(factor-20, gold-11)
punct(gold-11, ,-12)
ref(gold-11, which-13)
aux(factor-20, would-14)
cop(factor-20, be-15)
det(factor-20, the-16)
punct(factor-20, ``-17)
compound(factor-20, swing-18)
punct(factor-20, ''-19)
acl:relcl(gold-11, factor-20)
punct(said-23, ,-21)
nsubj(said-23, he-22)
root(ROOT-0, said-23)
punct(said-23, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#what

miss :: In 1986 , the company slipped into the red with a loss of 40 million marks on massive inventory write-downs on out-of-fashion products that missed new leisure trends set by emerging competitors ./.
case(1986-2, In-1)
nmod:in(slipped-6, 1986-2)
punct(slipped-6, ,-3)
det(company-5, the-4)
nsubj(slipped-6, company-5)
root(ROOT-0, slipped-6)
case(red-9, into-7)
det(red-9, the-8)
nmod:into(slipped-6, red-9)
case(loss-12, with-10)
det(loss-12, a-11)
nmod:with(slipped-6, loss-12)
case(marks-16, of-13)
compound(million-15, 40-14)
nummod(marks-16, million-15)
nmod:of(loss-12, marks-16)
case(write-downs-20, on-17)
amod(write-downs-20, massive-18)
compound(write-downs-20, inventory-19)
nmod:on(loss-12, write-downs-20)
case(products-23, on-21)
amod(products-23, out-of-fashion-22)
nmod:on(write-downs-20, products-23)
nsubj(missed-25, products-23)
ref(products-23, that-24)
acl:relcl(products-23, missed-25)
amod(trends-28, new-26)
compound(trends-28, leisure-27)
dobj(missed-25, trends-28)
acl(trends-28, set-29)
case(competitors-32, by-30)
amod(competitors-32, emerging-31)
nmod:by(set-29, competitors-32)
punct(slipped-6, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#trends

miss :: Your July 11 editorial `` ' Breach ' of Faith '' on the Krasnoyarsk radar , the AntiBallistic Missile Treaty , the strategic defense initiative , etc. misses the point ./.
nmod:poss(editorial-4, Your-1)
compound(editorial-4, July-2)
nummod(editorial-4, 11-3)
root(ROOT-0, editorial-4)
punct(Breach-7, ``-5)
punct(Breach-7, '-6)
dep(editorial-4, Breach-7)
punct(Breach-7, '-8)
case(Faith-10, of-9)
nmod:of(Breach-7, Faith-10)
punct(Breach-7, ''-11)
case(radar-15, on-12)
det(radar-15, the-13)
compound(radar-15, Krasnoyarsk-14)
nmod:on(Breach-7, radar-15)
punct(Breach-7, ,-16)
det(Treaty-20, the-17)
amod(Treaty-20, AntiBallistic-18)
compound(Treaty-20, Missile-19)
appos(Breach-7, Treaty-20)
punct(Breach-7, ,-21)
det(initiative-25, the-22)
amod(initiative-25, strategic-23)
compound(initiative-25, defense-24)
appos(Breach-7, initiative-25)
punct(Breach-7, ,-26)
nsubj(misses-28, etc.-27)
acl:relcl(Breach-7, misses-28)
det(point-30, the-29)
dobj(misses-28, point-30)
punct(editorial-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#point

miss :: And a lot of WWOR viewers may have deduced something else was missing when , halfway up the highway , Marion was suddenly driving a different car with license plates from a different state ./.
cc(deduced-9, And-1)
det(lot-3, a-2)
nsubj(deduced-9, lot-3)
case(viewers-6, of-4)
compound(viewers-6, WWOR-5)
nmod:of(lot-3, viewers-6)
aux(deduced-9, may-7)
aux(deduced-9, have-8)
root(ROOT-0, deduced-9)
nsubj(missing-13, something-10)
amod(something-10, else-11)
aux(missing-13, was-12)
ccomp(deduced-9, missing-13)
advmod(driving-24, when-14)
punct(driving-24, ,-15)
advmod(highway-19, halfway-16)
case(highway-19, up-17)
det(highway-19, the-18)
nmod:up(driving-24, highway-19)
punct(driving-24, ,-20)
nsubj(driving-24, Marion-21)
aux(driving-24, was-22)
advmod(driving-24, suddenly-23)
advcl(missing-13, driving-24)
det(car-27, a-25)
amod(car-27, different-26)
dobj(driving-24, car-27)
case(plates-30, with-28)
compound(plates-30, license-29)
nmod:with(driving-24, plates-30)
case(state-34, from-31)
det(state-34, a-32)
amod(state-34, different-33)
nmod:from(driving-24, state-34)
punct(deduced-9, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#something

miss :: There also are missing ingredients elsewhere at General Foods ./.
expl(missing-4, There-1)
advmod(missing-4, also-2)
aux(missing-4, are-3)
root(ROOT-0, missing-4)
dobj(missing-4, ingredients-5)
advmod(ingredients-5, elsewhere-6)
case(Foods-9, at-7)
compound(Foods-9, General-8)
nmod:at(ingredients-5, Foods-9)
punct(missing-4, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#ingredients

miss :: They miss the point ignored by most city planners in Latin America: People , not planners , make cities ./.
nsubj(miss-2, They-1)
root(ROOT-0, miss-2)
det(point-4, the-3)
dobj(miss-2, point-4)
acl(point-4, ignored-5)
case(planners-9, by-6)
amod(planners-9, most-7)
compound(planners-9, city-8)
nmod:by(ignored-5, planners-9)
case(America-12, in-10)
compound(America-12, Latin-11)
nmod:in(planners-9, America-12)
punct(miss-2, :-13)
nsubj(make-19, People-14)
punct(People-14, ,-15)
neg(planners-17, not-16)
appos(People-14, planners-17)
punct(People-14, ,-18)
parataxis(miss-2, make-19)
dobj(make-19, cities-20)
punct(miss-2, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#point

miss :: Virginia Belden , who sells vacuum cleaners and sewing machines at the Towne East store , however , frets that some shoppers might miss the thrill of getting a bargain ./.
compound(Belden-2, Virginia-1)
nsubj(sells-5, Belden-2)
nsubj(frets-19, Belden-2)
punct(Belden-2, ,-3)
ref(Belden-2, who-4)
acl:relcl(Belden-2, sells-5)
compound(cleaners-7, vacuum-6)
dobj(sells-5, cleaners-7)
cc(cleaners-7, and-8)
compound(machines-10, sewing-9)
dobj(sells-5, machines-10)
conj:and(cleaners-7, machines-10)
case(store-15, at-11)
det(store-15, the-12)
compound(store-15, Towne-13)
compound(store-15, East-14)
nmod:at(sells-5, store-15)
punct(Belden-2, ,-16)
advmod(frets-19, however-17)
punct(frets-19, ,-18)
root(ROOT-0, frets-19)
mark(miss-24, that-20)
det(shoppers-22, some-21)
nsubj(miss-24, shoppers-22)
aux(miss-24, might-23)
ccomp(frets-19, miss-24)
det(thrill-26, the-25)
dobj(miss-24, thrill-26)
mark(getting-28, of-27)
acl(thrill-26, getting-28)
det(bargain-30, a-29)
dobj(getting-28, bargain-30)
punct(frets-19, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#thrill

miss :: Recently , she was able to accept a last-minute invitation to play in Boston , missing a Bruckner Fifth Symphony with the orchestra ./.
advmod(able-5, Recently-1)
punct(able-5, ,-2)
nsubj(able-5, she-3)
nsubj:xsubj(accept-7, she-3)
cop(able-5, was-4)
root(ROOT-0, able-5)
mark(accept-7, to-6)
xcomp(able-5, accept-7)
det(invitation-10, a-8)
amod(invitation-10, last-minute-9)
dobj(accept-7, invitation-10)
mark(play-12, to-11)
acl(invitation-10, play-12)
case(Boston-14, in-13)
nmod:in(play-12, Boston-14)
punct(able-5, ,-15)
xcomp(able-5, missing-16)
det(Symphony-20, a-17)
compound(Symphony-20, Bruckner-18)
amod(Symphony-20, Fifth-19)
dobj(missing-16, Symphony-20)
case(orchestra-23, with-21)
det(orchestra-23, the-22)
nmod:with(missing-16, orchestra-23)
punct(able-5, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#symphony

miss :: Yields on big certificates of deposit surged in the latest week , but consumers who generally hold smaller CDs missed much of the ride ./.
nsubj(surged-7, Yields-1)
case(certificates-4, on-2)
amod(certificates-4, big-3)
nmod:on(Yields-1, certificates-4)
case(deposit-6, of-5)
nmod:of(certificates-4, deposit-6)
root(ROOT-0, surged-7)
case(week-11, in-8)
det(week-11, the-9)
amod(week-11, latest-10)
nmod:in(surged-7, week-11)
punct(surged-7, ,-12)
cc(surged-7, but-13)
nsubj(hold-17, consumers-14)
nsubj(missed-20, consumers-14)
ref(consumers-14, who-15)
advmod(hold-17, generally-16)
acl:relcl(consumers-14, hold-17)
amod(CDs-19, smaller-18)
dobj(hold-17, CDs-19)
conj:but(surged-7, missed-20)
dobj(missed-20, much-21)
case(ride-24, of-22)
det(ride-24, the-23)
nmod:of(much-21, ride-24)
punct(surged-7, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#ride

miss :: It missed some opportunities , for example , because it had n't made sure AT & T 's salesmen received incentives for pushing its products ./.
nsubj(missed-2, It-1)
root(ROOT-0, missed-2)
det(opportunities-4, some-3)
dobj(missed-2, opportunities-4)
punct(missed-2, ,-5)
case(example-7, for-6)
nmod:for(missed-2, example-7)
punct(missed-2, ,-8)
mark(made-13, because-9)
nsubj(made-13, it-10)
aux(made-13, had-11)
neg(made-13, n't-12)
advcl(missed-2, made-13)
xcomp(made-13, sure-14)
nmod:poss(salesmen-19, AT-15)
cc(AT-15, &-16)
conj:&(AT-15, T-17)
nmod:poss(salesmen-19, T-17)
case(T-17, 's-18)
nsubj(received-20, salesmen-19)
ccomp(sure-14, received-20)
dobj(received-20, incentives-21)
mark(pushing-23, for-22)
acl(incentives-21, pushing-23)
nmod:poss(products-25, its-24)
dobj(pushing-23, products-25)
punct(missed-2, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#opportunities

miss :: These are only a handful of the missed opportunities for a campaign that only 90 days ago showed enormous promise ./.
nsubj(handful-5, These-1)
cop(handful-5, are-2)
advmod(handful-5, only-3)
det(handful-5, a-4)
root(ROOT-0, handful-5)
case(opportunities-9, of-6)
det(opportunities-9, the-7)
amod(opportunities-9, missed-8)
nmod:of(handful-5, opportunities-9)
case(campaign-12, for-10)
det(campaign-12, a-11)
nmod:for(opportunities-9, campaign-12)
nsubj(showed-18, campaign-12)
ref(campaign-12, that-13)
advmod(90-15, only-14)
nummod(days-16, 90-15)
nmod:npmod(ago-17, days-16)
advmod(showed-18, ago-17)
acl:relcl(campaign-12, showed-18)
amod(promise-20, enormous-19)
dobj(showed-18, promise-20)
punct(handful-5, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#opportunities

miss :: `` Wall Street has missed how valuable brands really are and how much growth they can give you , '' says Ms. Page of Bear Stearns ./.
punct(says-21, ``-1)
compound(Street-3, Wall-2)
nsubj(missed-5, Street-3)
aux(missed-5, has-4)
ccomp(says-21, missed-5)
advmod(valuable-7, how-6)
dep(are-10, valuable-7)
nsubj(are-10, brands-8)
advmod(are-10, really-9)
ccomp(missed-5, are-10)
cc(are-10, and-11)
advmod(much-13, how-12)
amod(growth-14, much-13)
dobj(give-17, growth-14)
nsubj(give-17, they-15)
aux(give-17, can-16)
ccomp(missed-5, give-17)
conj:and(are-10, give-17)
dobj(give-17, you-18)
punct(says-21, ,-19)
punct(says-21, ''-20)
root(ROOT-0, says-21)
compound(Page-23, Ms.-22)
nsubj(says-21, Page-23)
case(Stearns-26, of-24)
compound(Stearns-26, Bear-25)
nmod:of(Page-23, Stearns-26)
punct(says-21, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#street

miss :: But Soviet officials apparently agreed to commit in general terms to the joint project rather than miss the opportunity for a summit signing ./.
cc(agreed-5, But-1)
amod(officials-3, Soviet-2)
nsubj(agreed-5, officials-3)
nsubj:xsubj(commit-7, officials-3)
advmod(agreed-5, apparently-4)
root(ROOT-0, agreed-5)
mark(commit-7, to-6)
xcomp(agreed-5, commit-7)
case(terms-10, in-8)
amod(terms-10, general-9)
nmod:in(commit-7, terms-10)
case(project-14, to-11)
det(project-14, the-12)
amod(project-14, joint-13)
nmod:to(commit-7, project-14)
cc(commit-7, rather-15)
mwe(rather-15, than-16)
xcomp(agreed-5, miss-17)
conj:negcc(commit-7, miss-17)
det(opportunity-19, the-18)
dobj(miss-17, opportunity-19)
case(signing-23, for-20)
det(signing-23, a-21)
compound(signing-23, summit-22)
nmod:for(opportunity-19, signing-23)
punct(agreed-5, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#opportunity

miss :: I do n't miss it at all . ''/''
nsubj(miss-4, I-1)
aux(miss-4, do-2)
neg(miss-4, n't-3)
root(ROOT-0, miss-4)
dobj(miss-4, it-5)
case(all-7, at-6)
nmod:at(miss-4, all-7)
punct(miss-4, .-8)
punct(miss-4, ''-9)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: miss#it

miss :: Thus , the conventional antibody test misses an unknown segment of AIDS-infected people ./.
advmod(misses-7, Thus-1)
punct(misses-7, ,-2)
det(test-6, the-3)
amod(test-6, conventional-4)
compound(test-6, antibody-5)
nsubj(misses-7, test-6)
root(ROOT-0, misses-7)
det(segment-10, an-8)
amod(segment-10, unknown-9)
dobj(misses-7, segment-10)
case(people-13, of-11)
amod(people-13, AIDS-infected-12)
nmod:of(segment-10, people-13)
punct(misses-7, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#people

miss :: Say Sparky Anderson does it , and the batter swings and misses and the runner is thrown out at second ./.
root(ROOT-0, Say-1)
compound(Anderson-3, Sparky-2)
nsubj(does-4, Anderson-3)
ccomp(Say-1, does-4)
dobj(does-4, it-5)
punct(Say-1, ,-6)
cc(Say-1, and-7)
det(swings-10, the-8)
compound(swings-10, batter-9)
nsubjpass(thrown-17, swings-10)
cc(swings-10, and-11)
conj:and(swings-10, misses-12)
nsubjpass(thrown-17, misses-12)
cc(swings-10, and-13)
det(runner-15, the-14)
conj:and(swings-10, runner-15)
nsubjpass(thrown-17, runner-15)
auxpass(thrown-17, is-16)
conj:and(Say-1, thrown-17)
compound:prt(thrown-17, out-18)
case(second-20, at-19)
nmod:at(thrown-17, second-20)
punct(Say-1, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

miss :: Mr. Knight and others criticize the service for helping students miss classes ./.
compound(Knight-2, Mr.-1)
nsubj(criticize-5, Knight-2)
cc(Knight-2, and-3)
conj:and(Knight-2, others-4)
nsubj(criticize-5, others-4)
root(ROOT-0, criticize-5)
det(service-7, the-6)
dobj(criticize-5, service-7)
mark(helping-9, for-8)
advcl(criticize-5, helping-9)
nsubj(miss-11, students-10)
ccomp(helping-9, miss-11)
dobj(miss-11, classes-12)
punct(criticize-5, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#classes

miss :: Among the possibilities considered by investigators: The suspect claimants might have posed as heirs , or even as missing shareholders in their own right , though they were n't on the original list provided by the company ./.
case(possibilities-3, Among-1)
det(possibilities-3, the-2)
nmod:among(posed-13, possibilities-3)
acl(possibilities-3, considered-4)
case(investigators-6, by-5)
nmod:by(considered-4, investigators-6)
punct(posed-13, :-7)
det(claimants-10, The-8)
amod(claimants-10, suspect-9)
nsubj(posed-13, claimants-10)
nsubj(posed-13', claimants-10)
aux(posed-13, might-11)
aux(posed-13, have-12)
root(ROOT-0, posed-13)
conj:or(posed-13, posed-13')
case(heirs-15, as-14)
nmod:as(posed-13, heirs-15)
punct(heirs-15, ,-16)
cc(posed-13, or-17)
advmod(shareholders-21, even-18)
case(shareholders-21, as-19)
amod(shareholders-21, missing-20)
nmod:as(posed-13', shareholders-21)
case(right-25, in-22)
nmod:poss(right-25, their-23)
amod(right-25, own-24)
nmod:in(shareholders-21, right-25)
punct(posed-13, ,-26)
mark(list-34, though-27)
nsubj(list-34, they-28)
cop(list-34, were-29)
neg(list-34, n't-30)
case(list-34, on-31)
det(list-34, the-32)
amod(list-34, original-33)
advcl(posed-13, list-34)
acl(list-34, provided-35)
case(company-38, by-36)
det(company-38, the-37)
nmod:by(provided-35, company-38)
punct(posed-13, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#shareholders

miss :: Re your page-one article `` Out of Orbit: Why a Space Station That Costs $ 25 Billion May Never Leave Earth , '' Sept. 1: Funding the `` Black Hole '' referenced in the article on the National Aeronautics and Space Administration 's Shuttle and Space Station is similar to funding other `` Black Holes '' that government contractors are trying to fill with overruns , often justified with specious explanations of the causes of missed targets ./.
root(ROOT-0, Re-1)
nmod:poss(article-4, your-2)
compound(article-4, page-one-3)
dep(Re-1, article-4)
punct(article-4, ``-5)
case(Orbit-8, Out-6)
mwe(Out-6, of-7)
nmod:out_of(article-4, Orbit-8)
punct(article-4, :-9)
advmod(Leave-21, Why-10)
det(Station-13, a-11)
compound(Station-13, Space-12)
nsubj(Costs-15, Station-13)
nsubj(Leave-21, Station-13)
ref(Station-13, That-14)
acl:relcl(Station-13, Costs-15)
dep(25-17, $-16)
dobj(Costs-15, 25-17)
nummod(25-17, Billion-18)
aux(Leave-21, May-19)
neg(Leave-21, Never-20)
dep(article-4, Leave-21)
dobj(Leave-21, Earth-22)
punct(Leave-21, ,-23)
punct(Leave-21, ''-24)
nmod:tmod(Leave-21, Sept.-25)
nummod(Sept.-25, 1-26)
punct(Leave-21, :-27)
csubj(similar-51, Funding-28)
det(Hole-32, the-29)
punct(Hole-32, ``-30)
amod(Hole-32, Black-31)
dobj(Funding-28, Hole-32)
punct(Hole-32, ''-33)
acl(Hole-32, referenced-34)
case(article-37, in-35)
det(article-37, the-36)
nmod:in(referenced-34, article-37)
case(Aeronautics-41, on-38)
det(Aeronautics-41, the-39)
compound(Aeronautics-41, National-40)
nmod:on(article-37, Aeronautics-41)
cc(Aeronautics-41, and-42)
compound(Administration-44, Space-43)
nmod:poss(Shuttle-46, Administration-44)
case(Administration-44, 's-45)
nmod:on(article-37, Shuttle-46)
conj:and(Aeronautics-41, Shuttle-46)
cc(Shuttle-46, and-47)
compound(Station-49, Space-48)
conj:and(Aeronautics-41, Station-49)
conj:and(Shuttle-46, Station-49)
cop(similar-51, is-50)
parataxis(Leave-21, similar-51)
mark(funding-53, to-52)
advcl(similar-51, funding-53)
amod(Holes-57, other-54)
punct(Holes-57, ``-55)
amod(Holes-57, Black-56)
dobj(funding-53, Holes-57)
dobj(trying-63, Holes-57)
nsubj:xsubj(fill-65, Holes-57)
punct(Holes-57, ''-58)
ref(Holes-57, that-59)
compound(contractors-61, government-60)
nsubj(trying-63, contractors-61)
aux(trying-63, are-62)
acl:relcl(Holes-57, trying-63)
mark(fill-65, to-64)
xcomp(trying-63, fill-65)
case(overruns-67, with-66)
nmod:with(fill-65, overruns-67)
punct(similar-51, ,-68)
advmod(justified-70, often-69)
xcomp(similar-51, justified-70)
case(explanations-73, with-71)
amod(explanations-73, specious-72)
nmod:with(justified-70, explanations-73)
case(causes-76, of-74)
det(causes-76, the-75)
nmod:of(explanations-73, causes-76)
case(targets-79, of-77)
amod(targets-79, missed-78)
nmod:of(causes-76, targets-79)
punct(Re-1, .-80)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#targets

miss :: Other people love Acapulco -- and do n't miss Frank Sinatra ./.
amod(people-2, Other-1)
nsubj(love-3, people-2)
root(ROOT-0, love-3)
dobj(love-3, Acapulco-4)
punct(love-3, ---5)
cc(love-3, and-6)
aux(Sinatra-11, do-7)
neg(Sinatra-11, n't-8)
compound(Sinatra-11, miss-9)
compound(Sinatra-11, Frank-10)
conj:and(love-3, Sinatra-11)
punct(love-3, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

miss :: MISSED CONNECTIONS: If you 're bound for Denver but get stuck in Detroit for the night because of a missed connection , do n't expect the airline to help ./.
amod(CONNECTIONS-2, MISSED-1)
root(ROOT-0, CONNECTIONS-2)
punct(CONNECTIONS-2, :-3)
mark(bound-7, If-4)
nsubjpass(bound-7, you-5)
nsubjpass(stuck-12, you-5)
nsubj(expect-26, you-5)
auxpass(bound-7, 're-6)
dep(CONNECTIONS-2, bound-7)
case(Denver-9, for-8)
nmod:for(bound-7, Denver-9)
cc(bound-7, but-10)
auxpass(stuck-12, get-11)
dep(CONNECTIONS-2, stuck-12)
conj:but(bound-7, stuck-12)
case(Detroit-14, in-13)
nmod:in(stuck-12, Detroit-14)
case(night-17, for-15)
det(night-17, the-16)
nmod:for(stuck-12, night-17)
case(connection-22, because-18)
mwe(because-18, of-19)
det(connection-22, a-20)
amod(connection-22, missed-21)
nmod:because_of(stuck-12, connection-22)
punct(bound-7, ,-23)
aux(expect-26, do-24)
neg(expect-26, n't-25)
dep(CONNECTIONS-2, expect-26)
conj:but(bound-7, expect-26)
det(airline-28, the-27)
dobj(expect-26, airline-28)
nsubj:xsubj(help-30, airline-28)
mark(help-30, to-29)
xcomp(expect-26, help-30)
punct(CONNECTIONS-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#connections

miss :: Rep. Dymally agrees efforts to exclude aliens are impractical , but he says the Census Bureau must account for the estimated 1.4 % of the population -- including many urban blacks -- that they missed in 1980 ./.
compound(Dymally-2, Rep.-1)
nsubj(agrees-3, Dymally-2)
root(ROOT-0, agrees-3)
nsubj(impractical-9, efforts-4)
mark(exclude-6, to-5)
acl(efforts-4, exclude-6)
dobj(exclude-6, aliens-7)
cop(impractical-9, are-8)
ccomp(agrees-3, impractical-9)
punct(agrees-3, ,-10)
cc(agrees-3, but-11)
nsubj(says-13, he-12)
conj:but(agrees-3, says-13)
det(Bureau-16, the-14)
compound(Bureau-16, Census-15)
nsubj(account-18, Bureau-16)
aux(account-18, must-17)
ccomp(says-13, account-18)
case(%-23, for-19)
det(%-23, the-20)
amod(%-23, estimated-21)
nummod(%-23, 1.4-22)
nmod:for(account-18, %-23)
dobj(missed-35, %-23)
case(population-26, of-24)
det(population-26, the-25)
nmod:of(%-23, population-26)
punct(%-23, ---27)
case(blacks-31, including-28)
amod(blacks-31, many-29)
amod(blacks-31, urban-30)
nmod:including(%-23, blacks-31)
punct(%-23, ---32)
ref(%-23, that-33)
nsubj(missed-35, they-34)
acl:relcl(%-23, missed-35)
case(1980-37, in-36)
nmod:in(missed-35, 1980-37)
punct(agrees-3, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#population

miss :: The big error came in October , 1982 , when the analysts failed to realize they were already in a recession and forecast moderate 2.2 % growth in the inflation-adjusted gross national product in 1982 , completely missing the deep downturn ./.
det(error-3, The-1)
amod(error-3, big-2)
nsubj(came-4, error-3)
root(ROOT-0, came-4)
case(October-6, in-5)
nmod:in(came-4, October-6)
punct(October-6, ,-7)
amod(October-6, 1982-8)
punct(October-6, ,-9)
advmod(failed-13, when-10)
det(analysts-12, the-11)
nsubj(failed-13, analysts-12)
nsubj:xsubj(realize-15, analysts-12)
acl:relcl(October-6, failed-13)
mark(realize-15, to-14)
xcomp(failed-13, realize-15)
nsubj(recession-21, they-16)
cop(recession-21, were-17)
advmod(recession-21, already-18)
case(recession-21, in-19)
det(recession-21, a-20)
ccomp(realize-15, recession-21)
cc(recession-21, and-22)
compound(growth-27, forecast-23)
amod(growth-27, moderate-24)
compound(%-26, 2.2-25)
amod(growth-27, %-26)
ccomp(realize-15, growth-27)
conj:and(recession-21, growth-27)
case(product-33, in-28)
det(product-33, the-29)
amod(product-33, inflation-adjusted-30)
amod(product-33, gross-31)
amod(product-33, national-32)
nmod:in(recession-21, product-33)
case(1982-35, in-34)
nmod:in(recession-21, 1982-35)
punct(came-4, ,-36)
advmod(missing-38, completely-37)
xcomp(came-4, missing-38)
det(downturn-41, the-39)
amod(downturn-41, deep-40)
dobj(missing-38, downturn-41)
punct(came-4, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#downturn

miss :: Monitrend Mutual Value , based in Nashville , Tenn . , went to a 100 % cash position in August and missed the recent stock market uptick ./.
compound(Value-3, Monitrend-1)
compound(Value-3, Mutual-2)
root(ROOT-0, Value-3)
punct(Value-3, ,-4)
acl(Value-3, based-5)
case(Nashville-7, in-6)
nmod:in(based-5, Nashville-7)
punct(Nashville-7, ,-8)
appos(Nashville-7, Tenn-9)
punct(Value-3, .-10)
punct(went-2, ,-1)
root(ROOT-0, went-2)
case(position-8, to-3)
det(position-8, a-4)
compound(%-6, 100-5)
amod(position-8, %-6)
compound(position-8, cash-7)
nmod:to(went-2, position-8)
case(August-10, in-9)
nmod:in(position-8, August-10)
cc(went-2, and-11)
conj:and(went-2, missed-12)
det(uptick-17, the-13)
amod(uptick-17, recent-14)
compound(uptick-17, stock-15)
compound(uptick-17, market-16)
dobj(missed-12, uptick-17)
punct(went-2, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#uptick

miss :: He will always be our good friend , and I will miss him . ''/''
nsubj(friend-7, He-1)
aux(friend-7, will-2)
advmod(friend-7, always-3)
cop(friend-7, be-4)
nmod:poss(friend-7, our-5)
amod(friend-7, good-6)
root(ROOT-0, friend-7)
punct(friend-7, ,-8)
cc(friend-7, and-9)
nsubj(miss-12, I-10)
aux(miss-12, will-11)
conj:and(friend-7, miss-12)
dobj(miss-12, him-13)
punct(friend-7, .-14)
punct(friend-7, ''-15)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: miss#him

miss :: However , S & P said a tentative renegotiation of $ 63 billion in Brazilian loans will more than offset the missed interest payments from Argentina ./.
advmod(said-6, However-1)
punct(said-6, ,-2)
nsubj(said-6, S-3)
cc(S-3, &-4)
conj:&(S-3, P-5)
nsubj(said-6, P-5)
root(ROOT-0, said-6)
det(renegotiation-9, a-7)
amod(renegotiation-9, tentative-8)
nsubj(offset-20, renegotiation-9)
case($-11, of-10)
nmod:of(renegotiation-9, $-11)
compound(billion-13, 63-12)
nummod($-11, billion-13)
case(loans-16, in-14)
amod(loans-16, Brazilian-15)
nmod:in($-11, loans-16)
aux(offset-20, will-17)
advmod(offset-20, more-18)
case(more-18, than-19)
ccomp(said-6, offset-20)
det(payments-24, the-21)
amod(payments-24, missed-22)
compound(payments-24, interest-23)
dobj(offset-20, payments-24)
case(Argentina-26, from-25)
nmod:from(payments-24, Argentina-26)
punct(said-6, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#payments

miss :: Part of the drop was attributed to the lessening severity of Hurricane Gilbert and expectations it would miss major U.S. oil facilities ./.
nsubjpass(attributed-6, Part-1)
case(drop-4, of-2)
det(drop-4, the-3)
nmod:of(Part-1, drop-4)
auxpass(attributed-6, was-5)
root(ROOT-0, attributed-6)
case(severity-10, to-7)
det(severity-10, the-8)
amod(severity-10, lessening-9)
nmod:to(attributed-6, severity-10)
case(Gilbert-13, of-11)
compound(Gilbert-13, Hurricane-12)
nmod:of(severity-10, Gilbert-13)
cc(Gilbert-13, and-14)
nmod:of(severity-10, expectations-15)
conj:and(Gilbert-13, expectations-15)
nsubj(miss-18, it-16)
aux(miss-18, would-17)
acl:relcl(severity-10, miss-18)
amod(facilities-22, major-19)
compound(facilities-22, U.S.-20)
compound(facilities-22, oil-21)
dobj(miss-18, facilities-22)
punct(attributed-6, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#facilities

miss :: While the Olympics are evoking thoughts of ancient Greece , do n't miss these new productions of the tragedies of Sophocles -- `` Oedipus the King , '' `` Oedipus at Colonus '' and `` Antigone . ''/''
mark(evoking-5, While-1)
det(Olympics-3, the-2)
nsubj(evoking-5, Olympics-3)
aux(evoking-5, are-4)
advcl(miss-13, evoking-5)
dobj(evoking-5, thoughts-6)
case(Greece-9, of-7)
amod(Greece-9, ancient-8)
nmod:of(thoughts-6, Greece-9)
punct(miss-13, ,-10)
aux(miss-13, do-11)
neg(miss-13, n't-12)
root(ROOT-0, miss-13)
det(productions-16, these-14)
amod(productions-16, new-15)
dobj(miss-13, productions-16)
case(tragedies-19, of-17)
det(tragedies-19, the-18)
nmod:of(productions-16, tragedies-19)
case(Sophocles-21, of-20)
nmod:of(tragedies-19, Sophocles-21)
punct(miss-13, ---22)
punct(miss-13, ``-23)
dep(miss-13, Oedipus-24)
det(King-26, the-25)
dep(Oedipus-24, King-26)
punct(miss-13, ,-27)
punct(miss-13, ''-28)
punct(miss-13, ``-29)
dobj(miss-13, Oedipus-30)
case(Colonus-32, at-31)
nmod:at(Oedipus-30, Colonus-32)
punct(miss-13, ''-33)
cc(miss-13, and-34)
punct(miss-13, ``-35)
conj:and(miss-13, Antigone-36)
punct(miss-13, .-37)
punct(miss-13, ''-38)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: miss#tragedies

miss :: But the news media 's frenzied attacks on the Republican vice presidential nominee 's military record have missed the point ./.
cc(missed-18, But-1)
det(media-4, the-2)
compound(media-4, news-3)
nmod:poss(attacks-7, media-4)
case(media-4, 's-5)
amod(attacks-7, frenzied-6)
nsubj(missed-18, attacks-7)
case(record-16, on-8)
det(nominee-13, the-9)
amod(nominee-13, Republican-10)
compound(nominee-13, vice-11)
amod(nominee-13, presidential-12)
nmod:poss(record-16, nominee-13)
case(nominee-13, 's-14)
amod(record-16, military-15)
nmod:on(attacks-7, record-16)
aux(missed-18, have-17)
root(ROOT-0, missed-18)
det(point-20, the-19)
dobj(missed-18, point-20)
punct(missed-18, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#point

miss :: The California system acknowledges it missed some opportunities by not going abroad sooner ./.
det(system-3, The-1)
compound(system-3, California-2)
nsubj(acknowledges-4, system-3)
root(ROOT-0, acknowledges-4)
nsubj(missed-6, it-5)
ccomp(acknowledges-4, missed-6)
det(opportunities-8, some-7)
dobj(missed-6, opportunities-8)
mark(going-11, by-9)
neg(going-11, not-10)
advcl(missed-6, going-11)
advmod(going-11, abroad-12)
advmod(going-11, sooner-13)
punct(acknowledges-4, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#opportunities

miss :: Meanwhile , prices in parts of the North that missed the boom might start rising ./.
advmod(start-14, Meanwhile-1)
punct(start-14, ,-2)
nsubj(start-14, prices-3)
case(parts-5, in-4)
nmod:in(prices-3, parts-5)
case(North-8, of-6)
det(North-8, the-7)
nmod:of(parts-5, North-8)
nsubj(missed-10, North-8)
ref(North-8, that-9)
acl:relcl(North-8, missed-10)
det(boom-12, the-11)
dobj(missed-10, boom-12)
aux(start-14, might-13)
root(ROOT-0, start-14)
xcomp(start-14, rising-15)
punct(start-14, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#boom

miss :: He has been wrong on interest rates recently , again because he missed the full impact of the declining dollar , and he concedes that bond prices could fall temporarily ./.
nsubj(wrong-4, He-1)
aux(wrong-4, has-2)
cop(wrong-4, been-3)
root(ROOT-0, wrong-4)
case(rates-7, on-5)
compound(rates-7, interest-6)
nmod:on(wrong-4, rates-7)
advmod(wrong-4, recently-8)
punct(wrong-4, ,-9)
advmod(wrong-4, again-10)
mark(missed-13, because-11)
nsubj(missed-13, he-12)
advcl(wrong-4, missed-13)
det(impact-16, the-14)
amod(impact-16, full-15)
dobj(missed-13, impact-16)
case(dollar-20, of-17)
det(dollar-20, the-18)
amod(dollar-20, declining-19)
nmod:of(impact-16, dollar-20)
punct(wrong-4, ,-21)
cc(wrong-4, and-22)
nsubj(concedes-24, he-23)
conj:and(wrong-4, concedes-24)
mark(fall-29, that-25)
compound(prices-27, bond-26)
nsubj(fall-29, prices-27)
aux(fall-29, could-28)
ccomp(concedes-24, fall-29)
advmod(fall-29, temporarily-30)
punct(wrong-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#dollar

miss :: Coincidentally or not , this meant that Sen. Quayle also would miss a scheduled joint appearance with the vice president today in Chicago at the meeting of the Veterans of Foreign Wars ./.
advmod(meant-6, Coincidentally-1)
cc(Coincidentally-1, or-2)
conj:or(Coincidentally-1, not-3)
advmod(meant-6, not-3)
punct(meant-6, ,-4)
nsubj(meant-6, this-5)
root(ROOT-0, meant-6)
mark(miss-12, that-7)
compound(Quayle-9, Sen.-8)
nsubj(miss-12, Quayle-9)
advmod(miss-12, also-10)
aux(miss-12, would-11)
ccomp(meant-6, miss-12)
det(appearance-16, a-13)
amod(appearance-16, scheduled-14)
amod(appearance-16, joint-15)
dobj(miss-12, appearance-16)
case(president-20, with-17)
det(president-20, the-18)
compound(president-20, vice-19)
nmod:with(appearance-16, president-20)
nmod:tmod(miss-12, today-21)
case(Chicago-23, in-22)
nmod:in(miss-12, Chicago-23)
case(meeting-26, at-24)
det(meeting-26, the-25)
nmod:at(miss-12, meeting-26)
case(Veterans-29, of-27)
det(Veterans-29, the-28)
nmod:of(meeting-26, Veterans-29)
case(Wars-32, of-30)
amod(Wars-32, Foreign-31)
nmod:of(Veterans-29, Wars-32)
punct(meant-6, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#appearance

miss :: What a missed photo opportunity to help close the gender gap and woo the animal-rights lobby at the same time ./.
root(ROOT-0, What-1)
det(opportunity-5, a-2)
amod(opportunity-5, missed-3)
compound(opportunity-5, photo-4)
nsubj(What-1, opportunity-5)
mark(help-7, to-6)
acl(opportunity-5, help-7)
ccomp(help-7, close-8)
det(gap-11, the-9)
compound(gap-11, gender-10)
dobj(close-8, gap-11)
cc(close-8, and-12)
ccomp(help-7, woo-13)
conj:and(close-8, woo-13)
det(lobby-16, the-14)
amod(lobby-16, animal-rights-15)
dobj(woo-13, lobby-16)
case(time-20, at-17)
det(time-20, the-18)
amod(time-20, same-19)
nmod:at(close-8, time-20)
punct(What-1, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#opportunity

miss :: But now , he adds , `` I could n't even hazard a guess '' about the whereabouts of the missing painting ./.
cc(hazard-12, But-1)
advmod(hazard-12, now-2)
punct(adds-5, ,-3)
nsubj(adds-5, he-4)
parataxis(hazard-12, adds-5)
punct(adds-5, ,-6)
punct(hazard-12, ``-7)
nsubj(hazard-12, I-8)
aux(hazard-12, could-9)
neg(hazard-12, n't-10)
advmod(hazard-12, even-11)
root(ROOT-0, hazard-12)
det(guess-14, a-13)
dobj(hazard-12, guess-14)
punct(guess-14, ''-15)
case(whereabouts-18, about-16)
det(whereabouts-18, the-17)
nmod:about(guess-14, whereabouts-18)
case(painting-22, of-19)
det(painting-22, the-20)
amod(painting-22, missing-21)
nmod:of(whereabouts-18, painting-22)
punct(hazard-12, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#painting

miss :: So far , the central bank has missed almost every government monetary target for the first half by a wide margin ./.
advmod(far-2, So-1)
advmod(missed-8, far-2)
punct(missed-8, ,-3)
det(bank-6, the-4)
amod(bank-6, central-5)
nsubj(missed-8, bank-6)
aux(missed-8, has-7)
root(ROOT-0, missed-8)
advmod(target-13, almost-9)
det(target-13, every-10)
compound(target-13, government-11)
amod(target-13, monetary-12)
dobj(missed-8, target-13)
case(half-17, for-14)
det(half-17, the-15)
amod(half-17, first-16)
nmod:for(target-13, half-17)
case(margin-21, by-18)
det(margin-21, a-19)
amod(margin-21, wide-20)
nmod:by(missed-8, margin-21)
punct(missed-8, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#target

miss :: If only employees would learn to `` prioritize and organize , '' corporate executives often argue , then tardy reports , missed deadlines and frantic late nights would disappear ./.
mark(learn-5, If-1)
advmod(employees-3, only-2)
nsubj(learn-5, employees-3)
nsubj:xsubj(prioritize-8, employees-3)
aux(learn-5, would-4)
advcl(reports-20, learn-5)
mark(prioritize-8, to-6)
punct(prioritize-8, ``-7)
xcomp(learn-5, prioritize-8)
cc(prioritize-8, and-9)
xcomp(learn-5, organize-10)
conj:and(prioritize-8, organize-10)
punct(argue-16, ,-11)
punct(argue-16, ''-12)
amod(executives-14, corporate-13)
nsubj(argue-16, executives-14)
advmod(argue-16, often-15)
parataxis(reports-20, argue-16)
punct(argue-16, ,-17)
advmod(reports-20, then-18)
amod(reports-20, tardy-19)
root(ROOT-0, reports-20)
punct(reports-20, ,-21)
csubj(disappear-29, missed-22)
dobj(missed-22, deadlines-23)
cc(deadlines-23, and-24)
dobj(missed-22, frantic-25)
conj:and(deadlines-23, frantic-25)
amod(nights-27, late-26)
dep(deadlines-23, nights-27)
aux(disappear-29, would-28)
parataxis(reports-20, disappear-29)
punct(reports-20, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#deadlines

miss :: Smaller , more precise probes were developed that researchers hoped would home in on the missing DNA bit and , possibly , the DMD gene itself ./.
advmod(developed-7, Smaller-1)
punct(developed-7, ,-2)
advmod(precise-4, more-3)
amod(probes-5, precise-4)
nsubjpass(developed-7, probes-5)
auxpass(developed-7, were-6)
root(ROOT-0, developed-7)
dobj(hoped-10, that-8)
nsubj(hoped-10, researchers-9)
ccomp(developed-7, hoped-10)
dep(hoped-10, would-11)
advmod(bit-18, home-12)
case(bit-18, in-13)
case(bit-18, on-14)
det(bit-18, the-15)
amod(bit-18, missing-16)
compound(bit-18, DNA-17)
nmod:on(would-11, bit-18)
cc(bit-18, and-19)
punct(bit-18, ,-20)
advmod(bit-18, possibly-21)
punct(bit-18, ,-22)
det(gene-25, the-23)
compound(gene-25, DMD-24)
appos(bit-18, gene-25)
nmod:npmod(gene-25, itself-26)
punct(developed-7, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#bit

miss :: The tape , which is in the possession of Century 's lawyers , shows cars with missing hubcaps , burned seats , body repairs , flat tires and cracked windows ./.
det(tape-2, The-1)
nsubj(possession-8, tape-2)
nsubj(shows-14, tape-2)
punct(tape-2, ,-3)
ref(tape-2, which-4)
cop(possession-8, is-5)
case(possession-8, in-6)
det(possession-8, the-7)
acl:relcl(tape-2, possession-8)
case(lawyers-12, of-9)
nmod:poss(lawyers-12, Century-10)
case(Century-10, 's-11)
nmod:of(possession-8, lawyers-12)
punct(tape-2, ,-13)
root(ROOT-0, shows-14)
dobj(shows-14, cars-15)
case(hubcaps-18, with-16)
amod(hubcaps-18, missing-17)
nmod:with(shows-14, hubcaps-18)
punct(shows-14, ,-19)
amod(seats-21, burned-20)
dobj(shows-14, seats-21)
punct(seats-21, ,-22)
compound(repairs-24, body-23)
dobj(shows-14, repairs-24)
conj:and(seats-21, repairs-24)
punct(seats-21, ,-25)
amod(tires-27, flat-26)
dobj(shows-14, tires-27)
conj:and(seats-21, tires-27)
cc(seats-21, and-28)
dobj(shows-14, cracked-29)
conj:and(seats-21, cracked-29)
dobj(cracked-29, windows-30)
punct(shows-14, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#hubcaps

miss :: There 's that damn ball of the Renthals that Laurence insists I not miss , and the Todesco wedding , and the final gala for the ballet where I 'm the chairperson ./.
expl('s-2, There-1)
root(ROOT-0, 's-2)
det(ball-5, that-3)
compound(ball-5, damn-4)
nsubj('s-2, ball-5)
case(Renthals-8, of-6)
det(Renthals-8, the-7)
nmod:of(ball-5, Renthals-8)
dobj(insists-11, Renthals-8)
ref(Renthals-8, that-9)
nsubj(insists-11, Laurence-10)
acl:relcl(Renthals-8, insists-11)
nsubj(miss-14, I-12)
neg(miss-14, not-13)
ccomp(insists-11, miss-14)
punct('s-2, ,-15)
cc('s-2, and-16)
det(wedding-19, the-17)
compound(wedding-19, Todesco-18)
conj:and('s-2, wedding-19)
punct(wedding-19, ,-20)
cc(wedding-19, and-21)
det(gala-24, the-22)
amod(gala-24, final-23)
conj:and('s-2, gala-24)
conj:and(wedding-19, gala-24)
case(ballet-27, for-25)
det(ballet-27, the-26)
nmod:for(gala-24, ballet-27)
advmod(chairperson-32, where-28)
nsubj(chairperson-32, I-29)
cop(chairperson-32, 'm-30)
det(chairperson-32, the-31)
acl:relcl(ballet-27, chairperson-32)
punct('s-2, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#i

miss :: The company has said a cash-flow shortage caused it to miss $ 3.3 million in interest payments on its 10 7 8 % senior debentures due Dec. 31 , 1995 ./.
det(company-2, The-1)
nsubj(said-4, company-2)
aux(said-4, has-3)
root(ROOT-0, said-4)
det(shortage-7, a-5)
amod(shortage-7, cash-flow-6)
nsubj(caused-8, shortage-7)
ccomp(said-4, caused-8)
dobj(caused-8, it-9)
nsubj:xsubj(miss-11, it-9)
mark(miss-11, to-10)
xcomp(caused-8, miss-11)
dobj(miss-11, $-12)
compound(million-14, 3.3-13)
nummod($-12, million-14)
case(payments-17, in-15)
compound(payments-17, interest-16)
nmod:in($-12, payments-17)
case(debentures-25, on-18)
nmod:poss(debentures-25, its-19)
compound(8-22, 10-20)
compound(8-22, 7-21)
dep(%-23, 8-22)
dep(debentures-25, %-23)
amod(debentures-25, senior-24)
nmod:on(miss-11, debentures-25)
amod(debentures-25, due-26)
nmod:tmod(due-26, Dec.-27)
nummod(Dec.-27, 31-28)
punct(Dec.-27, ,-29)
nummod(Dec.-27, 1995-30)
punct(said-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#$

miss :: I 've missed 'em ./.
nsubj(missed-3, I-1)
aux(missed-3, 've-2)
root(ROOT-0, missed-3)
dobj(missed-3, 'em-4)
punct(missed-3, .-5)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#'em

miss :: Although his colleagues were n't eager to satisfy him , they were even less eager to miss their flights home and a weekend of campaigning ./.
mark(eager-6, Although-1)
nmod:poss(colleagues-3, his-2)
nsubj(eager-6, colleagues-3)
nsubj:xsubj(satisfy-8, colleagues-3)
cop(eager-6, were-4)
neg(eager-6, n't-5)
advcl(eager-15, eager-6)
mark(satisfy-8, to-7)
xcomp(eager-6, satisfy-8)
dobj(satisfy-8, him-9)
punct(eager-15, ,-10)
nsubj(eager-15, they-11)
nsubj:xsubj(miss-17, they-11)
cop(eager-15, were-12)
advmod(less-14, even-13)
advmod(eager-15, less-14)
root(ROOT-0, eager-15)
mark(miss-17, to-16)
xcomp(eager-15, miss-17)
nmod:poss(home-20, their-18)
compound(home-20, flights-19)
dobj(miss-17, home-20)
cc(home-20, and-21)
det(weekend-23, a-22)
dobj(miss-17, weekend-23)
conj:and(home-20, weekend-23)
case(campaigning-25, of-24)
nmod:of(weekend-23, campaigning-25)
punct(eager-15, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#home

miss :: The point of view of the economist here misses the essential by being too technical , namely that the values associated with a free-market economy can be destroyed by the tax system ./.
det(point-2, The-1)
nsubj(misses-9, point-2)
case(view-4, of-3)
nmod:of(point-2, view-4)
case(economist-7, of-5)
det(economist-7, the-6)
nmod:of(view-4, economist-7)
advmod(misses-9, here-8)
root(ROOT-0, misses-9)
det(essential-11, the-10)
dobj(misses-9, essential-11)
mark(technical-15, by-12)
cop(technical-15, being-13)
advmod(technical-15, too-14)
advcl(misses-9, technical-15)
punct(technical-15, ,-16)
advmod(destroyed-28, namely-17)
mark(destroyed-28, that-18)
det(values-20, the-19)
nsubjpass(destroyed-28, values-20)
acl(values-20, associated-21)
case(economy-25, with-22)
det(economy-25, a-23)
amod(economy-25, free-market-24)
nmod:with(associated-21, economy-25)
aux(destroyed-28, can-26)
auxpass(destroyed-28, be-27)
advcl(technical-15, destroyed-28)
case(system-32, by-29)
det(system-32, the-30)
compound(system-32, tax-31)
nmod:agent(destroyed-28, system-32)
punct(misses-9, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#essential

miss :: Blacks who have quit white-run businesses say they do n't miss insults from whites who often did n't even realize they were insulting , or the edginess on the part of whites uncomfortable around blacks ./.
nsubj(quit-4, Blacks-1)
nsubj(say-7, Blacks-1)
ref(Blacks-1, who-2)
aux(quit-4, have-3)
acl:relcl(Blacks-1, quit-4)
amod(businesses-6, white-run-5)
dobj(quit-4, businesses-6)
root(ROOT-0, say-7)
nsubj(miss-11, they-8)
aux(miss-11, do-9)
neg(miss-11, n't-10)
ccomp(say-7, miss-11)
dobj(miss-11, insults-12)
case(whites-14, from-13)
nmod:from(miss-11, whites-14)
nsubj(realize-20, whites-14)
ref(whites-14, who-15)
advmod(realize-20, often-16)
aux(realize-20, did-17)
neg(realize-20, n't-18)
advmod(realize-20, even-19)
acl:relcl(whites-14, realize-20)
nsubj(insulting-23, they-21)
cop(insulting-23, were-22)
ccomp(realize-20, insulting-23)
punct(miss-11, ,-24)
cc(miss-11, or-25)
det(edginess-27, the-26)
ccomp(say-7, edginess-27)
conj:or(miss-11, edginess-27)
case(part-30, on-28)
det(part-30, the-29)
nmod:on(edginess-27, part-30)
case(whites-32, of-31)
nmod:of(part-30, whites-32)
amod(whites-32, uncomfortable-33)
case(blacks-35, around-34)
nmod:around(uncomfortable-33, blacks-35)
punct(say-7, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#insults

miss :: This little romp does n't miss a cliche ./.
det(little-2, This-1)
nsubj(romp-3, little-2)
root(ROOT-0, romp-3)
aux(miss-6, does-4)
neg(miss-6, n't-5)
ccomp(romp-3, miss-6)
det(cliche-8, a-7)
dobj(miss-6, cliche-8)
punct(romp-3, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#cliche

miss :: Regular fans of this long-lived TV news magazine will not want to miss its 10th anniversary retrospective show , featuring excerpts from Barbara Walters 's interviews with Richard Nixon , Edwin Meese and James Brady ; reports on AIDS and Agent Orange ; and profiles of Barbra Streisand , Katharine Hepburn and Andrew Lloyd Webber ./.
amod(fans-2, Regular-1)
nsubj(want-11, fans-2)
nsubj:xsubj(miss-13, fans-2)
case(magazine-8, of-3)
det(magazine-8, this-4)
amod(magazine-8, long-lived-5)
compound(magazine-8, TV-6)
compound(magazine-8, news-7)
nmod:of(fans-2, magazine-8)
aux(want-11, will-9)
neg(want-11, not-10)
root(ROOT-0, want-11)
mark(miss-13, to-12)
xcomp(want-11, miss-13)
nmod:poss(show-18, its-14)
amod(show-18, 10th-15)
compound(show-18, anniversary-16)
amod(show-18, retrospective-17)
dobj(miss-13, show-18)
punct(want-11, ,-19)
xcomp(want-11, featuring-20)
dobj(featuring-20, excerpts-21)
case(interviews-26, from-22)
compound(Walters-24, Barbara-23)
nmod:poss(interviews-26, Walters-24)
case(Walters-24, 's-25)
nmod:from(excerpts-21, interviews-26)
case(Nixon-29, with-27)
compound(Nixon-29, Richard-28)
nmod:with(interviews-26, Nixon-29)
punct(Nixon-29, ,-30)
compound(Meese-32, Edwin-31)
nmod:with(interviews-26, Meese-32)
conj:and(Nixon-29, Meese-32)
cc(Nixon-29, and-33)
compound(Brady-35, James-34)
nmod:with(interviews-26, Brady-35)
conj:and(Nixon-29, Brady-35)
punct(want-11, ;-36)
parataxis(want-11, reports-37)
case(AIDS-39, on-38)
nmod:on(reports-37, AIDS-39)
cc(AIDS-39, and-40)
compound(Orange-42, Agent-41)
nmod:on(reports-37, Orange-42)
conj:and(AIDS-39, Orange-42)
punct(reports-37, ;-43)
cc(reports-37, and-44)
parataxis(want-11, profiles-45)
conj:and(reports-37, profiles-45)
case(Streisand-48, of-46)
compound(Streisand-48, Barbra-47)
nmod:of(profiles-45, Streisand-48)
punct(Streisand-48, ,-49)
compound(Hepburn-51, Katharine-50)
nmod:of(profiles-45, Hepburn-51)
conj:and(Streisand-48, Hepburn-51)
cc(Streisand-48, and-52)
compound(Webber-55, Andrew-53)
compound(Webber-55, Lloyd-54)
nmod:of(profiles-45, Webber-55)
conj:and(Streisand-48, Webber-55)
punct(want-11, .-56)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#show

miss :: Your analysis of our problems with Congress is excellently presented in your April 18 editorial `` The U.S. House of Lords '' but , in my opinion , you missed the obvious solution -- a limit on the amount of time that a congressman or a senator can serve ./.
nmod:poss(analysis-2, Your-1)
nsubjpass(presented-10, analysis-2)
case(problems-5, of-3)
nmod:poss(problems-5, our-4)
nmod:of(analysis-2, problems-5)
case(Congress-7, with-6)
nmod:with(problems-5, Congress-7)
auxpass(presented-10, is-8)
advmod(presented-10, excellently-9)
root(ROOT-0, presented-10)
case(editorial-15, in-11)
nmod:poss(editorial-15, your-12)
compound(editorial-15, April-13)
nummod(editorial-15, 18-14)
nmod:in(presented-10, editorial-15)
punct(editorial-15, ``-16)
det(House-19, The-17)
compound(House-19, U.S.-18)
dep(editorial-15, House-19)
case(Lords-21, of-20)
nmod:of(House-19, Lords-21)
punct(editorial-15, ''-22)
cc(presented-10, but-23)
punct(presented-10, ,-24)
case(opinion-27, in-25)
nmod:poss(opinion-27, my-26)
nmod:in(missed-30, opinion-27)
punct(missed-30, ,-28)
nsubj(missed-30, you-29)
conj:but(presented-10, missed-30)
det(solution-33, the-31)
amod(solution-33, obvious-32)
dobj(missed-30, solution-33)
punct(solution-33, ---34)
det(limit-36, a-35)
dep(solution-33, limit-36)
case(amount-39, on-37)
det(amount-39, the-38)
nmod:on(limit-36, amount-39)
case(time-41, of-40)
nmod:of(amount-39, time-41)
mark(serve-49, that-42)
det(congressman-44, a-43)
nsubj(serve-49, congressman-44)
cc(congressman-44, or-45)
det(senator-47, a-46)
conj:or(congressman-44, senator-47)
nsubj(serve-49, senator-47)
aux(serve-49, can-48)
ccomp(limit-36, serve-49)
punct(presented-10, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#solution

miss :: She remembers a ninth-grader who was bullied by older students into missing class regularly ./.
nsubj(remembers-2, She-1)
root(ROOT-0, remembers-2)
det(ninth-grader-4, a-3)
dobj(remembers-2, ninth-grader-4)
nsubjpass(bullied-7, ninth-grader-4)
ref(ninth-grader-4, who-5)
auxpass(bullied-7, was-6)
acl:relcl(ninth-grader-4, bullied-7)
case(students-10, by-8)
amod(students-10, older-9)
nmod:agent(bullied-7, students-10)
case(class-13, into-11)
amod(class-13, missing-12)
nmod:into(bullied-7, class-13)
advmod(class-13, regularly-14)
punct(remembers-2, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#class

miss :: Company officials have yet to make a full report on the missing inventory that hurt third-quarter results ./.
compound(officials-2, Company-1)
nsubj(have-3, officials-2)
nsubj:xsubj(make-6, officials-2)
root(ROOT-0, have-3)
advmod(have-3, yet-4)
mark(make-6, to-5)
xcomp(have-3, make-6)
det(report-9, a-7)
amod(report-9, full-8)
dobj(make-6, report-9)
case(inventory-13, on-10)
det(inventory-13, the-11)
amod(inventory-13, missing-12)
nmod:on(report-9, inventory-13)
nsubj(hurt-15, inventory-13)
ref(inventory-13, that-14)
acl:relcl(inventory-13, hurt-15)
amod(results-17, third-quarter-16)
dobj(hurt-15, results-17)
punct(have-3, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#inventory

miss :: This year , one from Lancaster , Pa . , bought a lamp and took it home on the plane . -LRB- Irv Blumkin , Ron 's brother , drove the shareholder to the airport after he lingered too long in the store and missed his bus. -RRB-/-RRB-
det(year-2, This-1)
root(ROOT-0, year-2)
punct(year-2, ,-3)
root(,-3, one-4)
case(Lancaster-6, from-5)
nmod:from(one-4, Lancaster-6)
punct(Lancaster-6, ,-7)
appos(Lancaster-6, Pa-8)
punct(one-4, .-9)
punct(bought-2, ,-1)
root(ROOT-0, bought-2)
det(lamp-4, a-3)
dobj(bought-2, lamp-4)
cc(bought-2, and-5)
conj:and(bought-2, took-6)
dobj(took-6, it-7)
advmod(took-6, home-8)
case(plane-11, on-9)
det(plane-11, the-10)
nmod:on(took-6, plane-11)
punct(bought-2, .-12)
punct(drove-9, -LRB--1)
compound(Blumkin-3, Irv-2)
nsubj(drove-9, Blumkin-3)
punct(Blumkin-3, ,-4)
nmod:poss(brother-7, Ron-5)
case(Ron-5, 's-6)
appos(Blumkin-3, brother-7)
punct(Blumkin-3, ,-8)
root(ROOT-0, drove-9)
det(shareholder-11, the-10)
dobj(drove-9, shareholder-11)
case(airport-14, to-12)
det(airport-14, the-13)
nmod:to(drove-9, airport-14)
mark(lingered-17, after-15)
nsubj(lingered-17, he-16)
nsubj(missed-24, he-16)
advcl(drove-9, lingered-17)
advmod(long-19, too-18)
advmod(lingered-17, long-19)
case(store-22, in-20)
det(store-22, the-21)
nmod:in(lingered-17, store-22)
cc(lingered-17, and-23)
advcl(drove-9, missed-24)
conj:and(lingered-17, missed-24)
nmod:poss(bus-26, his-25)
dobj(missed-24, bus-26)
punct(drove-9, .-27)
punct(drove-9, -RRB--28)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: miss#bus

miss :: Most said finding or keeping key people is important ; but without solid planning , Hay says they may miss seeing a need for new talent or training ./.
nsubj(said-2, Most-1)
root(ROOT-0, said-2)
dep(important-9, finding-3)
cc(finding-3, or-4)
conj:or(finding-3, keeping-5)
dep(important-9, keeping-5)
amod(people-7, key-6)
nsubj(important-9, people-7)
cop(important-9, is-8)
ccomp(said-2, important-9)
punct(said-2, ;-10)
cc(said-2, but-11)
case(planning-14, without-12)
amod(planning-14, solid-13)
nmod:without(says-17, planning-14)
punct(says-17, ,-15)
nsubj(says-17, Hay-16)
conj:but(said-2, says-17)
nsubj(miss-20, they-18)
aux(miss-20, may-19)
ccomp(says-17, miss-20)
xcomp(miss-20, seeing-21)
det(need-23, a-22)
dobj(seeing-21, need-23)
case(talent-26, for-24)
amod(talent-26, new-25)
nmod:for(need-23, talent-26)
cc(talent-26, or-27)
nmod:for(need-23, training-28)
conj:or(talent-26, training-28)
punct(said-2, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#they

miss :: It really is a shame the famous old astrologer and Reagan friend Carroll Righter died last week and missed all this ./.
nsubj(shame-5, It-1)
advmod(shame-5, really-2)
cop(shame-5, is-3)
det(shame-5, a-4)
root(ROOT-0, shame-5)
det(astrologer-9, the-6)
amod(astrologer-9, famous-7)
amod(astrologer-9, old-8)
nsubj(died-15, astrologer-9)
nsubj(missed-19, astrologer-9)
cc(astrologer-9, and-10)
compound(Righter-14, Reagan-11)
compound(Righter-14, friend-12)
compound(Righter-14, Carroll-13)
conj:and(astrologer-9, Righter-14)
nsubj(died-15, Righter-14)
ccomp(shame-5, died-15)
amod(week-17, last-16)
nmod:tmod(died-15, week-17)
cc(died-15, and-18)
ccomp(shame-5, missed-19)
conj:and(died-15, missed-19)
det:predet(this-21, all-20)
dobj(missed-19, this-21)
punct(shame-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#this

miss :: He gives a tour of a Berlin that is affectionate yet bewildered ; though he is n't a native Berliner , his is the view of a returning son who does n't quite know what to make of the city he 's missed so much ./.
nsubj(gives-2, He-1)
root(ROOT-0, gives-2)
det(tour-4, a-3)
dobj(gives-2, tour-4)
case(Berlin-7, of-5)
det(Berlin-7, a-6)
nmod:of(tour-4, Berlin-7)
nsubj(affectionate-10, Berlin-7)
ref(Berlin-7, that-8)
cop(affectionate-10, is-9)
acl:relcl(Berlin-7, affectionate-10)
advmod(bewildered-12, yet-11)
dep(affectionate-10, bewildered-12)
punct(gives-2, ;-13)
mark(Berliner-20, though-14)
nsubj(Berliner-20, he-15)
cop(Berliner-20, is-16)
neg(Berliner-20, n't-17)
det(Berliner-20, a-18)
amod(Berliner-20, native-19)
advcl(view-25, Berliner-20)
punct(view-25, ,-21)
nsubj(view-25, his-22)
cop(view-25, is-23)
det(view-25, the-24)
parataxis(gives-2, view-25)
case(son-29, of-26)
det(son-29, a-27)
amod(son-29, returning-28)
nmod:of(view-25, son-29)
nsubj(know-34, son-29)
ref(son-29, who-30)
aux(know-34, does-31)
neg(know-34, n't-32)
advmod(know-34, quite-33)
acl:relcl(son-29, know-34)
nsubj(make-37, what-35)
mark(make-37, to-36)
ccomp(know-34, make-37)
case(city-40, of-38)
det(city-40, the-39)
nmod:of(make-37, city-40)
nsubjpass(missed-43, he-41)
auxpass(missed-43, 's-42)
acl:relcl(city-40, missed-43)
advmod(much-45, so-44)
advmod(missed-43, much-45)
punct(gives-2, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#he

miss :: As for the sabotage argument , Mr. Kalelkar said that , on the morning following the disaster , an `` instrument supervisor '' found that a pressure indicator was missing from the methyl isocyanate tank ./.
case(argument-5, As-1)
mwe(As-1, for-2)
det(argument-5, the-3)
compound(argument-5, sabotage-4)
nmod:as_for(said-9, argument-5)
punct(said-9, ,-6)
compound(Kalelkar-8, Mr.-7)
nsubj(said-9, Kalelkar-8)
root(ROOT-0, said-9)
mark(found-24, that-10)
punct(found-24, ,-11)
case(morning-14, on-12)
det(morning-14, the-13)
nmod:on(found-24, morning-14)
case(disaster-17, following-15)
det(disaster-17, the-16)
nmod:following(morning-14, disaster-17)
punct(found-24, ,-18)
det(supervisor-22, an-19)
punct(supervisor-22, ``-20)
compound(supervisor-22, instrument-21)
nsubj(found-24, supervisor-22)
punct(supervisor-22, ''-23)
ccomp(said-9, found-24)
mark(missing-30, that-25)
det(indicator-28, a-26)
compound(indicator-28, pressure-27)
nsubj(missing-30, indicator-28)
aux(missing-30, was-29)
ccomp(found-24, missing-30)
case(tank-35, from-31)
det(tank-35, the-32)
compound(tank-35, methyl-33)
compound(tank-35, isocyanate-34)
nmod:from(missing-30, tank-35)
punct(said-9, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#indicator

miss :: Non-U.S. companies that do n't respond to the need for more substantive and timely information will miss the opportunity to attract U.S. investment ./.
amod(companies-2, Non-U.S.-1)
nsubj(respond-6, companies-2)
nsubj(miss-17, companies-2)
ref(companies-2, that-3)
aux(respond-6, do-4)
neg(respond-6, n't-5)
acl:relcl(companies-2, respond-6)
case(need-9, to-7)
det(need-9, the-8)
nmod:to(respond-6, need-9)
case(information-15, for-10)
advmod(substantive-12, more-11)
amod(information-15, substantive-12)
cc(substantive-12, and-13)
conj:and(substantive-12, timely-14)
amod(information-15, timely-14)
nmod:for(need-9, information-15)
aux(miss-17, will-16)
root(ROOT-0, miss-17)
det(opportunity-19, the-18)
dobj(miss-17, opportunity-19)
mark(attract-21, to-20)
acl(opportunity-19, attract-21)
compound(investment-23, U.S.-22)
dobj(attract-21, investment-23)
punct(miss-17, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#opportunity

miss :: He said people who criticize Wall Street 's computerized trading strategies have missed the point ./.
nsubj(said-2, He-1)
root(ROOT-0, said-2)
nsubj(criticize-5, people-3)
nsubj(missed-13, people-3)
ref(people-3, who-4)
acl:relcl(people-3, criticize-5)
compound(Street-7, Wall-6)
nmod:poss(strategies-11, Street-7)
case(Street-7, 's-8)
amod(strategies-11, computerized-9)
compound(strategies-11, trading-10)
dobj(criticize-5, strategies-11)
aux(missed-13, have-12)
ccomp(said-2, missed-13)
det(point-15, the-14)
dobj(missed-13, point-15)
punct(said-2, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#point

miss :: There were no known U.S. casualties , but a helicopter operating off the USS Wainwright , a cruiser , was reported missing ./.
expl(were-2, There-1)
root(ROOT-0, were-2)
neg(casualties-6, no-3)
amod(casualties-6, known-4)
compound(casualties-6, U.S.-5)
nsubj(were-2, casualties-6)
punct(were-2, ,-7)
cc(were-2, but-8)
det(operating-11, a-9)
compound(operating-11, helicopter-10)
nsubjpass(reported-21, operating-11)
case(Wainwright-15, off-12)
det(Wainwright-15, the-13)
compound(Wainwright-15, USS-14)
nmod:off(operating-11, Wainwright-15)
punct(Wainwright-15, ,-16)
det(cruiser-18, a-17)
appos(Wainwright-15, cruiser-18)
punct(Wainwright-15, ,-19)
auxpass(reported-21, was-20)
conj:but(were-2, reported-21)
xcomp(reported-21, missing-22)
punct(were-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

miss :: First City Bancorp. apparently missed its debt-redemption goal yesterday , setting off a scramble to complete its $ 1.5 billion bailout today ./.
compound(Bancorp.-3, First-1)
compound(Bancorp.-3, City-2)
nsubj(missed-5, Bancorp.-3)
advmod(missed-5, apparently-4)
root(ROOT-0, missed-5)
nmod:poss(goal-8, its-6)
amod(goal-8, debt-redemption-7)
dobj(missed-5, goal-8)
nmod:tmod(missed-5, yesterday-9)
punct(missed-5, ,-10)
advcl(missed-5, setting-11)
compound:prt(setting-11, off-12)
det(scramble-14, a-13)
dobj(setting-11, scramble-14)
mark(complete-16, to-15)
acl(scramble-14, complete-16)
nmod:poss(bailout-21, its-17)
amod(bailout-21, $-18)
compound(billion-20, 1.5-19)
nummod($-18, billion-20)
dobj(complete-16, bailout-21)
nmod:tmod(complete-16, today-22)
punct(missed-5, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#goal

miss :: `` We 're guaranteed to miss some of the up market , '' he concedes ./.
punct(concedes-15, ``-1)
nsubjpass(guaranteed-4, We-2)
nsubj:xsubj(miss-6, We-2)
auxpass(guaranteed-4, 're-3)
ccomp(concedes-15, guaranteed-4)
mark(miss-6, to-5)
xcomp(guaranteed-4, miss-6)
dobj(miss-6, some-7)
case(market-11, of-8)
det(market-11, the-9)
compound(market-11, up-10)
nmod:of(some-7, market-11)
punct(concedes-15, ,-12)
punct(concedes-15, ''-13)
nsubj(concedes-15, he-14)
root(ROOT-0, concedes-15)
punct(concedes-15, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#market

miss :: Nelson Peltz and Peter May , whose junk-bond wizardry built Triangle Industries and won them the sobriquet of `` the new aces of low tech , '' may have missed out on a pot of money at CJI Industries ./.
compound(Peltz-2, Nelson-1)
root(ROOT-0, Peltz-2)
cc(Peltz-2, and-3)
compound(May-5, Peter-4)
conj:and(Peltz-2, May-5)
nmod:poss(wizardry-9, May-5)
punct(May-5, ,-6)
ref(May-5, whose-7)
compound(wizardry-9, junk-bond-8)
nsubj(built-10, wizardry-9)
nsubj(won-14, wizardry-9)
acl:relcl(May-5, built-10)
compound(Industries-12, Triangle-11)
dobj(built-10, Industries-12)
cc(built-10, and-13)
acl:relcl(May-5, won-14)
conj:and(built-10, won-14)
iobj(won-14, them-15)
det(sobriquet-17, the-16)
nsubj(missed-30, sobriquet-17)
case(aces-22, of-18)
punct(aces-22, ``-19)
det(aces-22, the-20)
amod(aces-22, new-21)
nmod:of(sobriquet-17, aces-22)
case(tech-25, of-23)
amod(tech-25, low-24)
nmod:of(aces-22, tech-25)
punct(aces-22, ,-26)
punct(aces-22, ''-27)
aux(missed-30, may-28)
aux(missed-30, have-29)
ccomp(won-14, missed-30)
compound:prt(missed-30, out-31)
case(pot-34, on-32)
det(pot-34, a-33)
nmod:on(missed-30, pot-34)
case(money-36, of-35)
nmod:of(pot-34, money-36)
case(Industries-39, at-37)
compound(Industries-39, CJI-38)
nmod:at(pot-34, Industries-39)
punct(Peltz-2, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#sobriquet

miss :: The amount of the missed payments was n't disclosed , but Magma said if the payment are n't received within 15 days , existing agreements between the two companies will terminate ./.
det(amount-2, The-1)
nsubjpass(disclosed-9, amount-2)
case(payments-6, of-3)
det(payments-6, the-4)
amod(payments-6, missed-5)
nmod:of(amount-2, payments-6)
auxpass(disclosed-9, was-7)
neg(disclosed-9, n't-8)
root(ROOT-0, disclosed-9)
punct(disclosed-9, ,-10)
cc(disclosed-9, but-11)
nsubj(said-13, Magma-12)
conj:but(disclosed-9, said-13)
mark(received-19, if-14)
det(payment-16, the-15)
nsubjpass(received-19, payment-16)
auxpass(received-19, are-17)
neg(received-19, n't-18)
advcl(terminate-31, received-19)
case(days-22, within-20)
nummod(days-22, 15-21)
nmod:within(received-19, days-22)
punct(terminate-31, ,-23)
amod(agreements-25, existing-24)
nsubj(terminate-31, agreements-25)
case(companies-29, between-26)
det(companies-29, the-27)
nummod(companies-29, two-28)
nmod:between(agreements-25, companies-29)
aux(terminate-31, will-30)
ccomp(said-13, terminate-31)
punct(disclosed-9, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#payments

miss :: If the New Orleans Public Service unit misses payment of four consecutive dividends , preferred holders could take control of the company ./.
mark(misses-8, If-1)
det(unit-7, the-2)
compound(unit-7, New-3)
compound(unit-7, Orleans-4)
compound(unit-7, Public-5)
compound(unit-7, Service-6)
nsubj(misses-8, unit-7)
root(ROOT-0, misses-8)
dobj(misses-8, payment-9)
case(dividends-13, of-10)
nummod(dividends-13, four-11)
amod(dividends-13, consecutive-12)
nmod:of(payment-9, dividends-13)
punct(dividends-13, ,-14)
amod(holders-16, preferred-15)
nsubj(take-18, holders-16)
aux(take-18, could-17)
acl:relcl(dividends-13, take-18)
dobj(take-18, control-19)
case(company-22, of-20)
det(company-22, the-21)
nmod:of(control-19, company-22)
punct(misses-8, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#dividends

miss :: In the hallway beyond , the shouts of students changing classes reverberate , reminding Mrs. Black that this soon-to-be mother of two needs an excuse to give her teacher for missing a class ./.
case(hallway-3, In-1)
det(hallway-3, the-2)
root(ROOT-0, hallway-3)
dep(hallway-3, beyond-4)
punct(beyond-4, ,-5)
det(shouts-7, the-6)
root(,-5, shouts-7)
case(students-9, of-8)
nmod:of(shouts-7, students-9)
amod(classes-11, changing-10)
nsubj(reverberate-12, classes-11)
acl:relcl(students-9, reverberate-12)
punct(shouts-7, ,-13)
acl(shouts-7, reminding-14)
compound(Black-16, Mrs.-15)
dobj(reminding-14, Black-16)
dep(reminding-14, that-17)
det(mother-20, this-18)
amod(mother-20, soon-to-be-19)
dep(that-17, mother-20)
case(needs-23, of-21)
nummod(needs-23, two-22)
nmod:of(mother-20, needs-23)
det(excuse-25, an-24)
dep(needs-23, excuse-25)
mark(give-27, to-26)
acl(excuse-25, give-27)
nmod:poss(teacher-29, her-28)
dobj(give-27, teacher-29)
mark(missing-31, for-30)
advcl(give-27, missing-31)
det(class-33, a-32)
dobj(missing-31, class-33)
punct(shouts-7, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#class

miss :: But now he says he would rather risk missing the start of any bull market than being caught in another collapse , `` which would be unforgivable in the eyes of my clients . ''/''
cc(says-4, But-1)
advmod(says-4, now-2)
nsubj(says-4, he-3)
root(ROOT-0, says-4)
nsubj(risk-8, he-5)
aux(risk-8, would-6)
advmod(risk-8, rather-7)
ccomp(says-4, risk-8)
xcomp(risk-8, missing-9)
det(start-11, the-10)
dobj(missing-9, start-11)
case(market-15, of-12)
det(market-15, any-13)
compound(market-15, bull-14)
nmod:of(start-11, market-15)
mark(caught-18, than-16)
auxpass(caught-18, being-17)
acl(start-11, caught-18)
case(collapse-21, in-19)
det(collapse-21, another-20)
nmod:in(caught-18, collapse-21)
nsubj(unforgivable-27, collapse-21)
punct(collapse-21, ,-22)
punct(collapse-21, ``-23)
ref(collapse-21, which-24)
aux(unforgivable-27, would-25)
cop(unforgivable-27, be-26)
acl:relcl(collapse-21, unforgivable-27)
case(eyes-30, in-28)
det(eyes-30, the-29)
nmod:in(unforgivable-27, eyes-30)
case(clients-33, of-31)
nmod:poss(clients-33, my-32)
nmod:of(eyes-30, clients-33)
punct(says-4, .-34)
punct(says-4, ''-35)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: miss#market

miss :: `` We just missed it , '' says a spokeswoman for Newsweek ./.
punct(says-8, ``-1)
nsubj(missed-4, We-2)
advmod(missed-4, just-3)
ccomp(says-8, missed-4)
dobj(missed-4, it-5)
punct(says-8, ,-6)
punct(says-8, ''-7)
root(ROOT-0, says-8)
det(spokeswoman-10, a-9)
nsubj(says-8, spokeswoman-10)
case(Newsweek-12, for-11)
nmod:for(spokeswoman-10, Newsweek-12)
punct(says-8, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#it

miss :: The biggest missed opportunity , however , may have come last autumn , when the notion of naming former Gov. Alexander to the Dole ticket was first broached ./.
det(opportunity-4, The-1)
amod(opportunity-4, biggest-2)
amod(opportunity-4, missed-3)
nsubj(come-10, opportunity-4)
punct(come-10, ,-5)
advmod(come-10, however-6)
punct(come-10, ,-7)
aux(come-10, may-8)
aux(come-10, have-9)
root(ROOT-0, come-10)
amod(autumn-12, last-11)
dobj(come-10, autumn-12)
punct(autumn-12, ,-13)
advmod(broached-28, when-14)
det(notion-16, the-15)
nsubjpass(broached-28, notion-16)
mark(naming-18, of-17)
acl(notion-16, naming-18)
amod(Alexander-21, former-19)
compound(Alexander-21, Gov.-20)
dobj(naming-18, Alexander-21)
case(ticket-25, to-22)
det(ticket-25, the-23)
compound(ticket-25, Dole-24)
nmod:to(naming-18, ticket-25)
auxpass(broached-28, was-26)
advmod(broached-28, first-27)
acl:relcl(autumn-12, broached-28)
punct(come-10, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#opportunity

miss :: I 'd miss it if I did n't play ./.
nsubj(miss-3, I-1)
aux(miss-3, 'd-2)
root(ROOT-0, miss-3)
dobj(miss-3, it-4)
mark(play-9, if-5)
nsubj(play-9, I-6)
aux(play-9, did-7)
neg(play-9, n't-8)
advcl(miss-3, play-9)
punct(miss-3, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#it

miss :: Since then Mr. McCrea has bounced an all-state candidate off the team for a year for missing his summer basketball camp ./.
case(then-2, Since-1)
nmod:since(bounced-6, then-2)
compound(McCrea-4, Mr.-3)
nsubj(bounced-6, McCrea-4)
aux(bounced-6, has-5)
root(ROOT-0, bounced-6)
det(candidate-9, an-7)
amod(candidate-9, all-state-8)
dobj(bounced-6, candidate-9)
case(team-12, off-10)
det(team-12, the-11)
nmod:off(bounced-6, team-12)
case(year-15, for-13)
det(year-15, a-14)
nmod:for(team-12, year-15)
mark(missing-17, for-16)
advcl(bounced-6, missing-17)
nmod:poss(camp-21, his-18)
compound(camp-21, summer-19)
compound(camp-21, basketball-20)
dobj(missing-17, camp-21)
punct(bounced-6, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#camp

miss :: But he missed the shot ./.
cc(missed-3, But-1)
nsubj(missed-3, he-2)
root(ROOT-0, missed-3)
det(shot-5, the-4)
dobj(missed-3, shot-5)
punct(missed-3, .-6)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#shot

miss :: In case you missed it , this low-budget exploitation flick is one of the record 263 films that qualify for Academy Award nominations by virtue of the fact that they opened in 1987 and played for at least a week in Los Angeles ./.
mark(missed-4, In-1)
mwe(In-1, case-2)
nsubj(missed-4, you-3)
advcl(one-12, missed-4)
dobj(missed-4, it-5)
punct(one-12, ,-6)
det(flick-10, this-7)
amod(flick-10, low-budget-8)
compound(flick-10, exploitation-9)
nsubj(one-12, flick-10)
cop(one-12, is-11)
root(ROOT-0, one-12)
case(films-17, of-13)
det(films-17, the-14)
compound(films-17, record-15)
nummod(films-17, 263-16)
nmod:of(one-12, films-17)
nsubj(qualify-19, films-17)
ref(films-17, that-18)
acl:relcl(films-17, qualify-19)
case(nominations-23, for-20)
compound(nominations-23, Academy-21)
compound(nominations-23, Award-22)
nmod:for(qualify-19, nominations-23)
case(virtue-25, by-24)
nmod:by(qualify-19, virtue-25)
case(fact-28, of-26)
det(fact-28, the-27)
nmod:of(virtue-25, fact-28)
mark(opened-31, that-29)
nsubj(opened-31, they-30)
nsubj(played-35, they-30)
ccomp(fact-28, opened-31)
case(1987-33, in-32)
nmod:in(opened-31, 1987-33)
cc(opened-31, and-34)
ccomp(fact-28, played-35)
conj:and(opened-31, played-35)
case(week-40, for-36)
case(least-38, at-37)
advmod(week-40, least-38)
det(week-40, a-39)
nmod:for(played-35, week-40)
case(Angeles-43, in-41)
compound(Angeles-43, Los-42)
nmod:in(played-35, Angeles-43)
punct(one-12, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#it

miss :: Care Enterprises Inc . , a financially troubled nursing home operator , said negotiations with its banks are continuing for further extensions and waivers of loan covenant violations involving a $ 5 million principal payment that it missed last Friday ./.
compound(Inc-3, Care-1)
compound(Inc-3, Enterprises-2)
root(ROOT-0, Inc-3)
punct(Inc-3, .-4)
punct(said-9, ,-1)
det(operator-7, a-2)
advmod(troubled-4, financially-3)
amod(operator-7, troubled-4)
compound(operator-7, nursing-5)
compound(operator-7, home-6)
nsubj(said-9, operator-7)
punct(said-9, ,-8)
root(ROOT-0, said-9)
nsubj(continuing-15, negotiations-10)
case(banks-13, with-11)
nmod:poss(banks-13, its-12)
nmod:with(negotiations-10, banks-13)
aux(continuing-15, are-14)
ccomp(said-9, continuing-15)
case(extensions-18, for-16)
amod(extensions-18, further-17)
nmod:for(continuing-15, extensions-18)
cc(extensions-18, and-19)
nmod:for(continuing-15, waivers-20)
conj:and(extensions-18, waivers-20)
case(violations-24, of-21)
compound(violations-24, loan-22)
compound(violations-24, covenant-23)
nmod:of(waivers-20, violations-24)
acl(extensions-18, involving-25)
det(payment-31, a-26)
amod(payment-31, $-27)
compound(million-29, 5-28)
nummod($-27, million-29)
amod(payment-31, principal-30)
dobj(involving-25, payment-31)
dobj(missed-34, payment-31)
ref(payment-31, that-32)
nsubj(missed-34, it-33)
acl:relcl(payment-31, missed-34)
amod(Friday-36, last-35)
nmod:tmod(missed-34, Friday-36)
punct(said-9, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#payment

miss :: Jonathan Kaye , a Boston real estate developer , sometimes takes a portable to his health club to avoid missing important calls ./.
compound(Kaye-2, Jonathan-1)
nsubj(takes-11, Kaye-2)
punct(Kaye-2, ,-3)
det(developer-8, a-4)
compound(developer-8, Boston-5)
amod(developer-8, real-6)
compound(developer-8, estate-7)
appos(Kaye-2, developer-8)
punct(Kaye-2, ,-9)
advmod(takes-11, sometimes-10)
root(ROOT-0, takes-11)
det(portable-13, a-12)
dobj(takes-11, portable-13)
case(club-17, to-14)
nmod:poss(club-17, his-15)
compound(club-17, health-16)
nmod:to(takes-11, club-17)
mark(avoid-19, to-18)
advcl(takes-11, avoid-19)
xcomp(avoid-19, missing-20)
amod(calls-22, important-21)
dobj(missing-20, calls-22)
punct(takes-11, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#calls

miss :: Nothing Like the Sun '' left you relatively cool , you wo n't want to miss these concerts featuring the former Police chief and his hot new band ./.
nsubj(left-6, Nothing-1)
case(Sun-4, Like-2)
det(Sun-4, the-3)
nmod:like(Nothing-1, Sun-4)
punct(Sun-4, ''-5)
ccomp(want-14, left-6)
nsubj(cool-9, you-7)
advmod(cool-9, relatively-8)
ccomp(left-6, cool-9)
punct(want-14, ,-10)
nsubj(want-14, you-11)
nsubj:xsubj(miss-16, you-11)
aux(want-14, wo-12)
neg(want-14, n't-13)
root(ROOT-0, want-14)
mark(miss-16, to-15)
xcomp(want-14, miss-16)
det(concerts-18, these-17)
dobj(miss-16, concerts-18)
acl(concerts-18, featuring-19)
det(chief-23, the-20)
amod(chief-23, former-21)
compound(chief-23, Police-22)
dobj(featuring-19, chief-23)
cc(chief-23, and-24)
nmod:poss(band-28, his-25)
amod(band-28, hot-26)
amod(band-28, new-27)
dobj(featuring-19, band-28)
conj:and(chief-23, band-28)
punct(want-14, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#concerts

miss :: Mr. Grauer added , `` The commission totally missed the point ./.
compound(Grauer-2, Mr.-1)
nsubj(added-3, Grauer-2)
root(ROOT-0, added-3)
punct(added-3, ,-4)
punct(added-3, ``-5)
det(commission-7, The-6)
nsubj(missed-9, commission-7)
advmod(missed-9, totally-8)
ccomp(added-3, missed-9)
det(point-11, the-10)
dobj(missed-9, point-11)
punct(added-3, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#point

miss :: In `` As Session Ends , Democrats Can Brag a Little , but They Dropped a Big One '' -LRB- back page , Dec. 18 -RRB- , you missed the biggest accomplishment of the congressional Democrats ./.
case(Ends-5, In-1)
punct(Ends-5, ``-2)
case(Ends-5, As-3)
compound(Ends-5, Session-4)
nmod:as(Brag-9, Ends-5)
punct(Brag-9, ,-6)
nsubj(Brag-9, Democrats-7)
aux(Brag-9, Can-8)
root(ROOT-0, Brag-9)
det(Little-11, a-10)
dobj(Brag-9, Little-11)
punct(Brag-9, ,-12)
cc(Brag-9, but-13)
nsubj(Dropped-15, They-14)
conj:but(Brag-9, Dropped-15)
det(One-18, a-16)
amod(One-18, Big-17)
dobj(Dropped-15, One-18)
punct(One-18, ''-19)
punct(page-22, -LRB--20)
advmod(page-22, back-21)
dep(One-18, page-22)
punct(page-22, ,-23)
nmod:tmod(page-22, Dec.-24)
nummod(Dec.-24, 18-25)
punct(page-22, -RRB--26)
punct(Dropped-15, ,-27)
nsubj(missed-29, you-28)
parataxis(Dropped-15, missed-29)
det(accomplishment-32, the-30)
amod(accomplishment-32, biggest-31)
dobj(missed-29, accomplishment-32)
case(Democrats-36, of-33)
det(Democrats-36, the-34)
amod(Democrats-36, congressional-35)
nmod:of(accomplishment-32, Democrats-36)
punct(Brag-9, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#democrats

miss :: Normal Barrett was flying to a Hawaiian island when he missed a connection in Honolulu because his United Airlines flight left late ./.
amod(Barrett-2, Normal-1)
nsubj(flying-4, Barrett-2)
aux(flying-4, was-3)
root(ROOT-0, flying-4)
case(island-8, to-5)
det(island-8, a-6)
amod(island-8, Hawaiian-7)
nmod:to(flying-4, island-8)
advmod(missed-11, when-9)
nsubj(missed-11, he-10)
advcl(flying-4, missed-11)
det(connection-13, a-12)
dobj(missed-11, connection-13)
case(Honolulu-15, in-14)
nmod:in(connection-13, Honolulu-15)
mark(left-21, because-16)
nmod:poss(flight-20, his-17)
compound(flight-20, United-18)
compound(flight-20, Airlines-19)
nsubj(left-21, flight-20)
advcl(missed-11, left-21)
advmod(left-21, late-22)
punct(flying-4, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#connection

miss :: Three submarine crewmen remained missing following an explosion and fire on the USS Bonefish that injured 22 of 92 aboard during a training mission 160 miles off Florida Sunday ./.
nummod(crewmen-3, Three-1)
amod(crewmen-3, submarine-2)
nsubj(remained-4, crewmen-3)
root(ROOT-0, remained-4)
xcomp(remained-4, missing-5)
case(explosion-8, following-6)
det(explosion-8, an-7)
nmod:following(remained-4, explosion-8)
nsubj(injured-16, explosion-8)
cc(explosion-8, and-9)
nmod:following(remained-4, fire-10)
conj:and(explosion-8, fire-10)
nsubj(injured-16, fire-10)
case(Bonefish-14, on-11)
det(Bonefish-14, the-12)
compound(Bonefish-14, USS-13)
nmod:on(explosion-8, Bonefish-14)
ref(explosion-8, that-15)
acl:relcl(explosion-8, injured-16)
dobj(injured-16, 22-17)
case(92-19, of-18)
nmod:of(22-17, 92-19)
advmod(injured-16, aboard-20)
case(mission-24, during-21)
det(mission-24, a-22)
compound(mission-24, training-23)
nmod:during(injured-16, mission-24)
nummod(miles-26, 160-25)
nmod:off(mission-24, miles-26)
case(miles-26, off-27)
compound(Sunday-29, Florida-28)
dep(miles-26, Sunday-29)
punct(remained-4, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

miss :: Yet he missed the mark on his beliefs that money has no `` cost '' and interest rates are the `` price '' of money ./.
advmod(missed-3, Yet-1)
nsubj(missed-3, he-2)
root(ROOT-0, missed-3)
det(mark-5, the-4)
dobj(missed-3, mark-5)
case(beliefs-8, on-6)
nmod:poss(beliefs-8, his-7)
nmod:on(price-22, beliefs-8)
mark(has-11, that-9)
nsubj(has-11, money-10)
csubj(price-22, has-11)
neg(cost-14, no-12)
punct(cost-14, ``-13)
dobj(has-11, cost-14)
punct(cost-14, ''-15)
cc(cost-14, and-16)
compound(rates-18, interest-17)
dobj(has-11, rates-18)
conj:and(cost-14, rates-18)
cop(price-22, are-19)
det(price-22, the-20)
punct(price-22, ``-21)
ccomp(missed-3, price-22)
punct(price-22, ''-23)
case(money-25, of-24)
nmod:of(price-22, money-25)
punct(missed-3, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#mark

miss :: Thomas E. Bolger , chairman and chief executive officer of Bell Atlantic Corp. in Philadelphia , said that although `` the entire industry will miss '' Mr. Olson , he does n't believe the company will suffer any substantial setbacks ./.
compound(Bolger-3, Thomas-1)
compound(Bolger-3, E.-2)
nsubj(said-17, Bolger-3)
punct(Bolger-3, ,-4)
appos(Bolger-3, chairman-5)
cc(chairman-5, and-6)
amod(officer-9, chief-7)
amod(officer-9, executive-8)
appos(Bolger-3, officer-9)
conj:and(chairman-5, officer-9)
case(Corp.-13, of-10)
compound(Corp.-13, Bell-11)
compound(Corp.-13, Atlantic-12)
nmod:of(chairman-5, Corp.-13)
case(Philadelphia-15, in-14)
nmod:in(Corp.-13, Philadelphia-15)
punct(Bolger-3, ,-16)
root(ROOT-0, said-17)
mark(believe-33, that-18)
mark(miss-25, although-19)
punct(miss-25, ``-20)
det(industry-23, the-21)
amod(industry-23, entire-22)
nsubj(miss-25, industry-23)
aux(miss-25, will-24)
advcl(believe-33, miss-25)
punct(miss-25, ''-26)
compound(Olson-28, Mr.-27)
dobj(miss-25, Olson-28)
punct(believe-33, ,-29)
nsubj(believe-33, he-30)
aux(believe-33, does-31)
neg(believe-33, n't-32)
ccomp(said-17, believe-33)
det(company-35, the-34)
nsubj(suffer-37, company-35)
aux(suffer-37, will-36)
ccomp(believe-33, suffer-37)
det(setbacks-40, any-38)
amod(setbacks-40, substantial-39)
dobj(suffer-37, setbacks-40)
punct(said-17, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#olson

miss :: There were n't any American casualties reported , but a U.S. attack helicopter carrying two crew members was missing ./.
expl(were-2, There-1)
root(ROOT-0, were-2)
neg(were-2, n't-3)
det(casualties-6, any-4)
amod(casualties-6, American-5)
nsubj(reported-7, casualties-6)
ccomp(were-2, reported-7)
punct(were-2, ,-8)
cc(were-2, but-9)
det(helicopter-13, a-10)
compound(helicopter-13, U.S.-11)
compound(helicopter-13, attack-12)
nsubj(missing-19, helicopter-13)
acl(helicopter-13, carrying-14)
nummod(members-17, two-15)
compound(members-17, crew-16)
dobj(carrying-14, members-17)
aux(missing-19, was-18)
conj:but(were-2, missing-19)
punct(were-2, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#helicopter

miss :: First City Bancorp. of Texas apparently missed its goal of redeeming 70 % of its long-term debt by 5 p.m. EDT yesterday , setting off an 11th-hour scramble to complete its $ 1.5 billion bailout today as planned ./.
compound(Bancorp.-3, First-1)
compound(Bancorp.-3, City-2)
nsubj(missed-7, Bancorp.-3)
case(Texas-5, of-4)
nmod:of(Bancorp.-3, Texas-5)
advmod(missed-7, apparently-6)
root(ROOT-0, missed-7)
nmod:poss(goal-9, its-8)
dobj(missed-7, goal-9)
case(%-13, of-10)
amod(%-13, redeeming-11)
nummod(%-13, 70-12)
nmod:of(goal-9, %-13)
case(debt-17, of-14)
nmod:poss(debt-17, its-15)
amod(debt-17, long-term-16)
nmod:of(%-13, debt-17)
case(EDT-21, by-18)
nummod(EDT-21, 5-19)
advmod(EDT-21, p.m.-20)
nmod:by(missed-7, EDT-21)
nmod:tmod(missed-7, yesterday-22)
punct(missed-7, ,-23)
advcl(missed-7, setting-24)
compound:prt(setting-24, off-25)
det(scramble-28, an-26)
amod(scramble-28, 11th-hour-27)
dobj(setting-24, scramble-28)
mark(complete-30, to-29)
acl(scramble-28, complete-30)
nmod:poss(bailout-35, its-31)
amod(bailout-35, $-32)
compound(billion-34, 1.5-33)
nummod($-32, billion-34)
dobj(complete-30, bailout-35)
nmod:tmod(complete-30, today-36)
mark(planned-38, as-37)
advcl(complete-30, planned-38)
punct(missed-7, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#%

miss :: In 15 years , Ms. Tsemel says , `` I can count my wins on one hand -- with two fingers missing . ''/''
case(years-3, In-1)
nummod(years-3, 15-2)
nmod:in(count-12, years-3)
punct(says-7, ,-4)
compound(Tsemel-6, Ms.-5)
nsubj(says-7, Tsemel-6)
parataxis(count-12, says-7)
punct(says-7, ,-8)
punct(count-12, ``-9)
nsubj(count-12, I-10)
aux(count-12, can-11)
root(ROOT-0, count-12)
nmod:poss(wins-14, my-13)
dobj(count-12, wins-14)
case(hand-17, on-15)
nummod(hand-17, one-16)
nmod:on(count-12, hand-17)
punct(count-12, ---18)
mark(missing-22, with-19)
nummod(fingers-21, two-20)
nsubj(missing-22, fingers-21)
advcl(count-12, missing-22)
punct(count-12, .-23)
punct(count-12, ''-24)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: miss#fingers

miss :: Some are trying to escape childhoods troubled by missing fathers or drug-addicted mothers ./.
nsubj(trying-3, Some-1)
nsubj:xsubj(escape-5, Some-1)
aux(trying-3, are-2)
root(ROOT-0, trying-3)
mark(escape-5, to-4)
xcomp(trying-3, escape-5)
dobj(escape-5, childhoods-6)
acl(childhoods-6, troubled-7)
case(fathers-10, by-8)
amod(fathers-10, missing-9)
nmod:by(troubled-7, fathers-10)
cc(fathers-10, or-11)
amod(mothers-13, drug-addicted-12)
nmod:by(troubled-7, mothers-13)
conj:or(fathers-10, mothers-13)
punct(trying-3, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#fathers

miss :: She says the pain has been so bad that she has missed more than a week of work at her job as a bank teller ./.
nsubj(says-2, She-1)
root(ROOT-0, says-2)
det(pain-4, the-3)
nsubj(bad-8, pain-4)
aux(bad-8, has-5)
cop(bad-8, been-6)
advmod(bad-8, so-7)
ccomp(says-2, bad-8)
mark(missed-12, that-9)
nsubj(missed-12, she-10)
aux(missed-12, has-11)
ccomp(bad-8, missed-12)
dobj(missed-12, more-13)
case(week-16, than-14)
det(week-16, a-15)
nmod:than(more-13, week-16)
case(work-18, of-17)
nmod:of(week-16, work-18)
case(job-21, at-19)
nmod:poss(job-21, her-20)
nmod:at(missed-12, job-21)
case(teller-25, as-22)
det(teller-25, a-23)
compound(teller-25, bank-24)
nmod:as(job-21, teller-25)
punct(says-2, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#more

miss :: Says Charles Fuhrmann , a Merrill Lynch Capital Markets managing director , `` This year we missed the greedseekers and tourists . ''/''
root(ROOT-0, Says-1)
compound(Fuhrmann-3, Charles-2)
nsubj(Says-1, Fuhrmann-3)
punct(Fuhrmann-3, ,-4)
det(director-11, a-5)
compound(director-11, Merrill-6)
compound(director-11, Lynch-7)
compound(director-11, Capital-8)
compound(director-11, Markets-9)
amod(director-11, managing-10)
appos(Fuhrmann-3, director-11)
punct(Says-1, ,-12)
punct(Says-1, ``-13)
det(year-15, This-14)
nmod:tmod(missed-17, year-15)
nsubj(missed-17, we-16)
ccomp(Says-1, missed-17)
det(greedseekers-19, the-18)
dobj(missed-17, greedseekers-19)
cc(greedseekers-19, and-20)
dobj(missed-17, tourists-21)
conj:and(greedseekers-19, tourists-21)
punct(Says-1, .-22)
punct(Says-1, ''-23)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: miss#greedseekers

miss :: The only thing missing is wine ./.
det(thing-3, The-1)
amod(thing-3, only-2)
nsubj(wine-6, thing-3)
acl(thing-3, missing-4)
cop(wine-6, is-5)
root(ROOT-0, wine-6)
punct(wine-6, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

miss :: Alfred Goldman , a market strategist with A.G. Edwards & Sons in St. Louis , said with the move in the industrial average beyond its old high , some money managers were probably gripped by the `` classic fear of missing the boat , '' and they scrambled to buy some stocks late in the day ./.
compound(Goldman-2, Alfred-1)
nsubj(said-16, Goldman-2)
punct(Goldman-2, ,-3)
det(strategist-6, a-4)
compound(strategist-6, market-5)
appos(Goldman-2, strategist-6)
case(Edwards-9, with-7)
compound(Edwards-9, A.G.-8)
nmod:with(strategist-6, Edwards-9)
cc(Edwards-9, &-10)
nmod:with(strategist-6, Sons-11)
conj:&(Edwards-9, Sons-11)
case(Louis-14, in-12)
compound(Louis-14, St.-13)
nmod:in(Edwards-9, Louis-14)
punct(Goldman-2, ,-15)
root(ROOT-0, said-16)
case(move-19, with-17)
det(move-19, the-18)
nmod:with(gripped-34, move-19)
case(average-23, in-20)
det(average-23, the-21)
amod(average-23, industrial-22)
nmod:in(move-19, average-23)
case(high-27, beyond-24)
nmod:poss(high-27, its-25)
amod(high-27, old-26)
nmod:beyond(move-19, high-27)
punct(gripped-34, ,-28)
det(managers-31, some-29)
compound(managers-31, money-30)
nsubjpass(gripped-34, managers-31)
auxpass(gripped-34, were-32)
advmod(gripped-34, probably-33)
ccomp(said-16, gripped-34)
case(fear-39, by-35)
det(fear-39, the-36)
punct(fear-39, ``-37)
amod(fear-39, classic-38)
nmod:agent(gripped-34, fear-39)
mark(missing-41, of-40)
acl(fear-39, missing-41)
det(boat-43, the-42)
dobj(missing-41, boat-43)
punct(gripped-34, ,-44)
punct(gripped-34, ''-45)
cc(gripped-34, and-46)
nsubj(scrambled-48, they-47)
nsubj:xsubj(buy-50, they-47)
ccomp(said-16, scrambled-48)
conj:and(gripped-34, scrambled-48)
mark(buy-50, to-49)
xcomp(scrambled-48, buy-50)
det(stocks-52, some-51)
dobj(buy-50, stocks-52)
advmod(buy-50, late-53)
case(day-56, in-54)
det(day-56, the-55)
nmod:in(late-53, day-56)
punct(said-16, .-57)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#boat

miss :: Even so , Mr. Babbitt wo n't miss the rigors of the road ./.
advmod(so-2, Even-1)
advmod(miss-8, so-2)
punct(miss-8, ,-3)
compound(Babbitt-5, Mr.-4)
nsubj(miss-8, Babbitt-5)
aux(miss-8, wo-6)
neg(miss-8, n't-7)
root(ROOT-0, miss-8)
det(rigors-10, the-9)
dobj(miss-8, rigors-10)
case(road-13, of-11)
det(road-13, the-12)
nmod:of(rigors-10, road-13)
punct(miss-8, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#road

miss :: She resigned , she says , in part because `` I felt I was missing certain things in life that were as valuable as work . ''/''
nsubj(resigned-2, She-1)
root(ROOT-0, resigned-2)
punct(says-5, ,-3)
nsubj(says-5, she-4)
parataxis(resigned-2, says-5)
punct(says-5, ,-6)
case(part-8, in-7)
nmod:in(resigned-2, part-8)
mark(felt-12, because-9)
punct(felt-12, ``-10)
nsubj(felt-12, I-11)
advcl(resigned-2, felt-12)
nsubj(missing-15, I-13)
aux(missing-15, was-14)
ccomp(felt-12, missing-15)
amod(things-17, certain-16)
dobj(missing-15, things-17)
case(life-19, in-18)
nmod:in(missing-15, life-19)
nsubj(valuable-23, that-20)
cop(valuable-23, were-21)
advmod(valuable-23, as-22)
dep(missing-15, valuable-23)
case(work-25, as-24)
nmod:as(valuable-23, work-25)
punct(resigned-2, .-26)
punct(resigned-2, ''-27)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: miss#things

miss :: If McDonnell Douglas ca n't land those orders this year , it risks losing its temporary lead over Boeing and missing out on perhaps hundreds of midrange aircraft orders in the long run ./.
mark(land-6, If-1)
compound(Douglas-3, McDonnell-2)
nsubj(land-6, Douglas-3)
aux(land-6, ca-4)
neg(land-6, n't-5)
advcl(risks-13, land-6)
det(orders-8, those-7)
dobj(land-6, orders-8)
det(year-10, this-9)
nmod:tmod(land-6, year-10)
punct(risks-13, ,-11)
nsubj(risks-13, it-12)
root(ROOT-0, risks-13)
ccomp(risks-13, losing-14)
nmod:poss(lead-17, its-15)
amod(lead-17, temporary-16)
dobj(losing-14, lead-17)
case(Boeing-19, over-18)
nmod:over(lead-17, Boeing-19)
cc(losing-14, and-20)
ccomp(risks-13, missing-21)
conj:and(losing-14, missing-21)
compound:prt(missing-21, out-22)
case(hundreds-25, on-23)
advmod(hundreds-25, perhaps-24)
nmod:on(missing-21, hundreds-25)
case(orders-29, of-26)
amod(orders-29, midrange-27)
compound(orders-29, aircraft-28)
nmod:of(hundreds-25, orders-29)
case(run-33, in-30)
det(run-33, the-31)
amod(run-33, long-32)
nmod:in(hundreds-25, run-33)
punct(risks-13, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#hundreds

miss :: `` Some analysts felt that many if anything during the '60s and '70s were overcapitalized and missed out on some business opportunities for not being as aggressive as they should have been ./.
root(ROOT-0, ``-1)
det(analysts-3, Some-2)
nsubj(felt-4, analysts-3)
root(``-1, felt-4)
mark(overcapitalized-15, that-5)
amod(anything-8, many-6)
mark(anything-8, if-7)
nsubjpass(overcapitalized-15, anything-8)
nsubjpass(missed-17, anything-8)
case('60s-11, during-9)
det('60s-11, the-10)
nmod:during(anything-8, '60s-11)
cc('60s-11, and-12)
nmod:during(anything-8, '70s-13)
conj:and('60s-11, '70s-13)
auxpass(overcapitalized-15, were-14)
ccomp(felt-4, overcapitalized-15)
cc(overcapitalized-15, and-16)
ccomp(felt-4, missed-17)
conj:and(overcapitalized-15, missed-17)
compound:prt(missed-17, out-18)
case(opportunities-22, on-19)
det(opportunities-22, some-20)
compound(opportunities-22, business-21)
nmod:on(missed-17, opportunities-22)
mark(aggressive-27, for-23)
neg(aggressive-27, not-24)
cop(aggressive-27, being-25)
advmod(aggressive-27, as-26)
acl(opportunities-22, aggressive-27)
mark(been-32, as-28)
nsubj(been-32, they-29)
aux(been-32, should-30)
aux(been-32, have-31)
dep(aggressive-27, been-32)
punct(felt-4, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#anything

miss :: Notes and diaries suggest Mr. Bush may have missed the beginning of that session ./.
nsubj(suggest-4, Notes-1)
cc(Notes-1, and-2)
conj:and(Notes-1, diaries-3)
nsubj(suggest-4, diaries-3)
root(ROOT-0, suggest-4)
compound(Bush-6, Mr.-5)
nsubj(missed-9, Bush-6)
aux(missed-9, may-7)
aux(missed-9, have-8)
ccomp(suggest-4, missed-9)
det(beginning-11, the-10)
dobj(missed-9, beginning-11)
case(session-14, of-12)
det(session-14, that-13)
nmod:of(beginning-11, session-14)
punct(suggest-4, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#beginning

miss :: But passengers who planned to travel at the low advertised fare but did n't purchase tickets before France rejected the fare missed the opportunity ./.
root(ROOT-0, But-1)
dep(But-1, passengers-2)
nsubj(planned-4, passengers-2)
nsubj:xsubj(travel-6, passengers-2)
nsubj(purchase-15, passengers-2)
ref(passengers-2, who-3)
acl:relcl(passengers-2, planned-4)
mark(travel-6, to-5)
xcomp(planned-4, travel-6)
case(fare-11, at-7)
det(fare-11, the-8)
amod(fare-11, low-9)
amod(fare-11, advertised-10)
nmod:at(travel-6, fare-11)
cc(planned-4, but-12)
aux(purchase-15, did-13)
neg(purchase-15, n't-14)
acl:relcl(passengers-2, purchase-15)
conj:but(planned-4, purchase-15)
dobj(purchase-15, tickets-16)
mark(rejected-19, before-17)
nsubj(rejected-19, France-18)
advcl(purchase-15, rejected-19)
det(fare-21, the-20)
nsubj(missed-22, fare-21)
ccomp(rejected-19, missed-22)
det(opportunity-24, the-23)
dobj(missed-22, opportunity-24)
punct(passengers-2, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#opportunity

miss :: Largely because of missing inventory , Crazy Eddie Inc. reported a fiscal third-quarter loss of $ 73 million , exceeding its sales of $ 68.7 million for the period ./.
advmod(inventory-5, Largely-1)
case(inventory-5, because-2)
mwe(because-2, of-3)
amod(inventory-5, missing-4)
nmod:because_of(reported-10, inventory-5)
punct(reported-10, ,-6)
compound(Inc.-9, Crazy-7)
compound(Inc.-9, Eddie-8)
nsubj(reported-10, Inc.-9)
root(ROOT-0, reported-10)
det(loss-14, a-11)
amod(loss-14, fiscal-12)
amod(loss-14, third-quarter-13)
dobj(reported-10, loss-14)
case($-16, of-15)
nmod:of(loss-14, $-16)
compound(million-18, 73-17)
nummod($-16, million-18)
punct(reported-10, ,-19)
advcl(reported-10, exceeding-20)
nmod:poss(sales-22, its-21)
dobj(exceeding-20, sales-22)
case($-24, of-23)
nmod:of(sales-22, $-24)
compound(million-26, 68.7-25)
nummod($-24, million-26)
case(period-29, for-27)
det(period-29, the-28)
nmod:for(sales-22, period-29)
punct(reported-10, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#inventory

miss :: `` Their situation is classic to the computer or technology business -- they missed the next product cycle , and in this business when you miss one , you may not get a chance for another . ''/''
root(ROOT-0, ``-1)
nmod:poss(situation-3, Their-2)
nsubj(classic-5, situation-3)
cop(classic-5, is-4)
root(``-1, classic-5)
case(computer-8, to-6)
det(computer-8, the-7)
nmod:to(classic-5, computer-8)
cc(computer-8, or-9)
compound(business-11, technology-10)
nmod:to(classic-5, business-11)
conj:or(computer-8, business-11)
punct(classic-5, ---12)
nsubj(missed-14, they-13)
parataxis(classic-5, missed-14)
det(cycle-18, the-15)
amod(cycle-18, next-16)
compound(cycle-18, product-17)
dobj(missed-14, cycle-18)
punct(missed-14, ,-19)
cc(missed-14, and-20)
case(business-23, in-21)
det(business-23, this-22)
parataxis(classic-5, business-23)
conj:and(missed-14, business-23)
advmod(miss-26, when-24)
nsubj(miss-26, you-25)
acl:relcl(business-23, miss-26)
dobj(miss-26, one-27)
punct(classic-5, ,-28)
nsubj(get-32, you-29)
aux(get-32, may-30)
neg(get-32, not-31)
parataxis(classic-5, get-32)
det(chance-34, a-33)
dobj(get-32, chance-34)
case(another-36, for-35)
nmod:for(chance-34, another-36)
punct(classic-5, .-37)
punct(classic-5, ''-38)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: miss#cycle

miss :: `` We have n't dug down to see '' what is missing , says Mr. Nelson ./.
punct(says-14, ``-1)
nsubj(dug-5, We-2)
nsubj:xsubj(see-8, We-2)
aux(dug-5, have-3)
neg(dug-5, n't-4)
ccomp(says-14, dug-5)
compound:prt(dug-5, down-6)
mark(see-8, to-7)
xcomp(dug-5, see-8)
punct(see-8, ''-9)
nsubj(missing-12, what-10)
aux(missing-12, is-11)
ccomp(see-8, missing-12)
punct(says-14, ,-13)
root(ROOT-0, says-14)
compound(Nelson-16, Mr.-15)
nsubj(says-14, Nelson-16)
punct(says-14, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#what

miss :: When he discovers they 're celebrating the sale of a property , he rudely begins to berate the older executive , in front of all , for not giving him a fair chance , only to find out he missed a telephone message ./.
advmod(discovers-3, When-1)
nsubj(discovers-3, he-2)
advcl(begins-15, discovers-3)
nsubj(celebrating-6, they-4)
aux(celebrating-6, 're-5)
ccomp(discovers-3, celebrating-6)
det(sale-8, the-7)
dobj(celebrating-6, sale-8)
case(property-11, of-9)
det(property-11, a-10)
nmod:of(sale-8, property-11)
punct(begins-15, ,-12)
nsubj(begins-15, he-13)
nsubj:xsubj(berate-17, he-13)
advmod(begins-15, rudely-14)
root(ROOT-0, begins-15)
mark(berate-17, to-16)
xcomp(begins-15, berate-17)
det(executive-20, the-18)
amod(executive-20, older-19)
dobj(berate-17, executive-20)
punct(executive-20, ,-21)
case(all-25, in-22)
mwe(in-22, front-23)
mwe(in-22, of-24)
nmod:in_front_of(executive-20, all-25)
punct(executive-20, ,-26)
mark(giving-29, for-27)
neg(giving-29, not-28)
acl(executive-20, giving-29)
iobj(giving-29, him-30)
det(chance-33, a-31)
amod(chance-33, fair-32)
dobj(giving-29, chance-33)
punct(giving-29, ,-34)
advmod(find-37, only-35)
mark(find-37, to-36)
advcl(giving-29, find-37)
compound:prt(find-37, out-38)
nsubj(missed-40, he-39)
ccomp(find-37, missed-40)
det(message-43, a-41)
compound(message-43, telephone-42)
dobj(missed-40, message-43)
punct(begins-15, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#message

miss :: `` The record contains affidavits from several former employees who were given severance benefits in spite of the fact that they did not miss any work . ''/''
punct(contains-4, ``-1)
det(record-3, The-2)
nsubj(contains-4, record-3)
root(ROOT-0, contains-4)
dobj(contains-4, affidavits-5)
case(employees-9, from-6)
amod(employees-9, several-7)
amod(employees-9, former-8)
nmod:from(affidavits-5, employees-9)
nsubjpass(given-12, employees-9)
ref(employees-9, who-10)
auxpass(given-12, were-11)
acl:relcl(employees-9, given-12)
compound(benefits-14, severance-13)
dobj(given-12, benefits-14)
case(fact-19, in-15)
mwe(in-15, spite-16)
mwe(in-15, of-17)
det(fact-19, the-18)
nmod:in_spite_of(given-12, fact-19)
mark(miss-24, that-20)
nsubj(miss-24, they-21)
aux(miss-24, did-22)
neg(miss-24, not-23)
ccomp(fact-19, miss-24)
det(work-26, any-25)
dobj(miss-24, work-26)
punct(contains-4, .-27)
punct(contains-4, ''-28)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: miss#work

miss :: `` That does n't stop us from missing Brian , of course . ''/''
punct(stop-5, ``-1)
nsubj(stop-5, That-2)
aux(stop-5, does-3)
neg(stop-5, n't-4)
root(ROOT-0, stop-5)
dobj(stop-5, us-6)
mark(missing-8, from-7)
advcl(stop-5, missing-8)
dobj(missing-8, Brian-9)
punct(stop-5, ,-10)
case(course-12, of-11)
nmod:of(stop-5, course-12)
punct(stop-5, .-13)
punct(stop-5, ''-14)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: miss#brian

miss :: About 150 people remain missing ./.
advmod(150-2, About-1)
nummod(people-3, 150-2)
nsubj(remain-4, people-3)
root(ROOT-0, remain-4)
xcomp(remain-4, missing-5)
punct(remain-4, .-6)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

miss :: PARENTS with mildly ill children do n't have to miss work under a program initiated for Minneapolis-area employees of Honeywell Inc ./.
nsubj(have-8, PARENTS-1)
nsubj:xsubj(miss-10, PARENTS-1)
case(children-5, with-2)
advmod(ill-4, mildly-3)
amod(children-5, ill-4)
nmod:with(PARENTS-1, children-5)
aux(have-8, do-6)
neg(have-8, n't-7)
root(ROOT-0, have-8)
mark(miss-10, to-9)
xcomp(have-8, miss-10)
dobj(miss-10, work-11)
case(program-14, under-12)
det(program-14, a-13)
nmod:under(miss-10, program-14)
acl(program-14, initiated-15)
case(employees-18, for-16)
amod(employees-18, Minneapolis-area-17)
nmod:for(initiated-15, employees-18)
case(Inc-21, of-19)
compound(Inc-21, Honeywell-20)
nmod:of(employees-18, Inc-21)
punct(have-8, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#work

miss :: The finding of the crack could prompt a re-examination of the struts on the rockets used for Discovery to ensure that cracks have n't been missed there ./.
det(finding-2, The-1)
nsubj(prompt-7, finding-2)
case(crack-5, of-3)
det(crack-5, the-4)
nmod:of(finding-2, crack-5)
aux(prompt-7, could-6)
root(ROOT-0, prompt-7)
det(re-examination-9, a-8)
dobj(prompt-7, re-examination-9)
case(struts-12, of-10)
det(struts-12, the-11)
nmod:of(re-examination-9, struts-12)
case(rockets-15, on-13)
det(rockets-15, the-14)
nmod:on(struts-12, rockets-15)
acl(rockets-15, used-16)
case(Discovery-18, for-17)
nmod:for(used-16, Discovery-18)
mark(ensure-20, to-19)
xcomp(used-16, ensure-20)
mark(missed-26, that-21)
nsubjpass(missed-26, cracks-22)
aux(missed-26, have-23)
neg(missed-26, n't-24)
auxpass(missed-26, been-25)
ccomp(ensure-20, missed-26)
advmod(missed-26, there-27)
punct(prompt-7, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#cracks

miss :: Few Poles missed that message in his tributes to their leader ./.
amod(Poles-2, Few-1)
nsubj(missed-3, Poles-2)
root(ROOT-0, missed-3)
dobj(missed-3, that-4)
dep(that-4, message-5)
case(tributes-8, in-6)
nmod:poss(tributes-8, his-7)
nmod:in(message-5, tributes-8)
case(leader-11, to-9)
nmod:poss(leader-11, their-10)
nmod:to(tributes-8, leader-11)
punct(missed-3, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#that

miss :: That rise is at least 1 degree Fahrenheit per decade ; we wo n't be able to miss it if it happens ./.
det(rise-2, That-1)
nsubj(Fahrenheit-8, rise-2)
cop(Fahrenheit-8, is-3)
case(least-5, at-4)
nmod:npmod(1-6, least-5)
nummod(Fahrenheit-8, 1-6)
compound(Fahrenheit-8, degree-7)
root(ROOT-0, Fahrenheit-8)
case(decade-10, per-9)
nmod:per(Fahrenheit-8, decade-10)
punct(Fahrenheit-8, ;-11)
nsubj(able-16, we-12)
nsubj:xsubj(miss-18, we-12)
aux(able-16, wo-13)
neg(able-16, n't-14)
cop(able-16, be-15)
parataxis(Fahrenheit-8, able-16)
mark(miss-18, to-17)
xcomp(able-16, miss-18)
dobj(miss-18, it-19)
mark(happens-22, if-20)
nsubj(happens-22, it-21)
advcl(able-16, happens-22)
punct(Fahrenheit-8, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#it

miss :: Short sellers `` have missed some points '' about CopyTele , says Mr. Maxwell , who bought the stock at 9 3 4 ./.
amod(sellers-2, Short-1)
nsubj(missed-5, sellers-2)
punct(missed-5, ``-3)
aux(missed-5, have-4)
ccomp(says-12, missed-5)
det(points-7, some-6)
dobj(missed-5, points-7)
punct(points-7, ''-8)
case(CopyTele-10, about-9)
nmod:about(points-7, CopyTele-10)
punct(says-12, ,-11)
root(ROOT-0, says-12)
compound(Maxwell-14, Mr.-13)
nsubj(says-12, Maxwell-14)
nsubj(bought-17, Maxwell-14)
punct(Maxwell-14, ,-15)
ref(Maxwell-14, who-16)
acl:relcl(Maxwell-14, bought-17)
det(stock-19, the-18)
dobj(bought-17, stock-19)
case(4-23, at-20)
compound(3-22, 9-21)
nummod(4-23, 3-22)
nmod:at(bought-17, 4-23)
punct(says-12, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#points

miss :: That aspect of what they did will be missed , '' said Joseph Ostrow , world-wide media director for ad agency Foote , Cone & Belding Communications Inc ./.
det(aspect-2, That-1)
root(ROOT-0, aspect-2)
mark(missed-9, of-3)
dobj(missed-9, what-4)
nsubjpass(missed-9, they-5)
aux(missed-9, did-6)
aux(missed-9, will-7)
auxpass(missed-9, be-8)
acl(aspect-2, missed-9)
punct(said-12, ,-10)
punct(said-12, ''-11)
dep(aspect-2, said-12)
compound(Ostrow-14, Joseph-13)
nsubj(said-12, Ostrow-14)
punct(Ostrow-14, ,-15)
amod(director-18, world-wide-16)
compound(director-18, media-17)
appos(Ostrow-14, director-18)
case(Foote-22, for-19)
compound(Foote-22, ad-20)
compound(Foote-22, agency-21)
nmod:for(director-18, Foote-22)
punct(Foote-22, ,-23)
nmod:for(director-18, Cone-24)
conj:&(Foote-22, Cone-24)
cc(Foote-22, &-25)
compound(Inc-28, Belding-26)
compound(Inc-28, Communications-27)
nmod:for(director-18, Inc-28)
conj:&(Foote-22, Inc-28)
punct(aspect-2, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#what

miss :: Over the past year , two teams of researchers , one at Johns Hopkins University and the other in London , have found that cells taken from colon cancer tumors are missing tiny bits of DNA -- possibly even tiny bits of genes -- on two different chromosomes ./.
case(year-4, Over-1)
det(year-4, the-2)
amod(year-4, past-3)
nmod:over(found-23, year-4)
punct(found-23, ,-5)
nummod(teams-7, two-6)
nsubj(found-23, teams-7)
case(researchers-9, of-8)
nmod:of(teams-7, researchers-9)
punct(teams-7, ,-10)
appos(teams-7, one-11)
case(University-15, at-12)
compound(University-15, Johns-13)
compound(University-15, Hopkins-14)
nmod:at(one-11, University-15)
cc(one-11, and-16)
det(other-18, the-17)
appos(teams-7, other-18)
conj:and(one-11, other-18)
case(London-20, in-19)
nmod:in(other-18, London-20)
punct(teams-7, ,-21)
aux(found-23, have-22)
root(ROOT-0, found-23)
mark(missing-32, that-24)
nsubj(missing-32, cells-25)
acl(cells-25, taken-26)
case(tumors-30, from-27)
compound(tumors-30, colon-28)
compound(tumors-30, cancer-29)
nmod:from(taken-26, tumors-30)
aux(missing-32, are-31)
ccomp(found-23, missing-32)
amod(bits-34, tiny-33)
dobj(missing-32, bits-34)
case(DNA-36, of-35)
nmod:of(bits-34, DNA-36)
punct(missing-32, ---37)
advmod(tiny-40, possibly-38)
advmod(tiny-40, even-39)
amod(bits-41, tiny-40)
dep(missing-32, bits-41)
case(genes-43, of-42)
nmod:of(bits-41, genes-43)
punct(missing-32, ---44)
case(chromosomes-48, on-45)
nummod(chromosomes-48, two-46)
amod(chromosomes-48, different-47)
nmod:on(missing-32, chromosomes-48)
punct(found-23, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#dna

miss :: Among the monographic presentations , one ought not to miss Jacobo Borges 's virtuosic and highly charged paintings at the Venezuelan pavilion and Janez Bernik 's powerfully expressionistic paintings at the Yugoslavian pavilion ./.
case(presentations-4, Among-1)
det(presentations-4, the-2)
amod(presentations-4, monographic-3)
nmod:among(ought-7, presentations-4)
punct(ought-7, ,-5)
nsubj(ought-7, one-6)
nsubj:xsubj(miss-10, one-6)
root(ROOT-0, ought-7)
neg(miss-10, not-8)
mark(miss-10, to-9)
xcomp(ought-7, miss-10)
compound(Borges-12, Jacobo-11)
nmod:poss(paintings-18, Borges-12)
case(Borges-12, 's-13)
amod(paintings-18, virtuosic-14)
cc(virtuosic-14, and-15)
advmod(charged-17, highly-16)
conj:and(virtuosic-14, charged-17)
amod(paintings-18, charged-17)
dobj(miss-10, paintings-18)
case(pavilion-22, at-19)
det(pavilion-22, the-20)
amod(pavilion-22, Venezuelan-21)
nmod:at(miss-10, pavilion-22)
cc(pavilion-22, and-23)
compound(Bernik-25, Janez-24)
nmod:poss(paintings-29, Bernik-25)
case(Bernik-25, 's-26)
advmod(expressionistic-28, powerfully-27)
amod(paintings-29, expressionistic-28)
nmod:at(miss-10, paintings-29)
conj:and(pavilion-22, paintings-29)
case(pavilion-33, at-30)
det(pavilion-33, the-31)
amod(pavilion-33, Yugoslavian-32)
nmod:at(miss-10, pavilion-33)
punct(ought-7, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#paintings

miss :: `` I miss my camp , my camels , my cheese , '' he says wistfully ./.
root(ROOT-0, ``-1)
nsubj(miss-3, I-2)
root(``-1, miss-3)
nmod:poss(camp-5, my-4)
dobj(miss-3, camp-5)
punct(miss-3, ,-6)
nmod:poss(camels-8, my-7)
dobj(miss-3, camels-8)
punct(camels-8, ,-9)
nmod:poss(cheese-11, my-10)
appos(camels-8, cheese-11)
punct(camels-8, ,-12)
punct(camels-8, ''-13)
nsubj(says-15, he-14)
dep(camels-8, says-15)
advmod(says-15, wistfully-16)
punct(miss-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#camp

miss :: If crazed publications are up your alley , you wo n't want to miss Confused Pet Monthly , Australasian Survivor , or Rotten Island -- `` a children 's book about a land where everything is as bad as it possibly could be . ''/''
mark(alley-7, If-1)
amod(publications-3, crazed-2)
nsubj(alley-7, publications-3)
cop(alley-7, are-4)
case(alley-7, up-5)
nmod:poss(alley-7, your-6)
advcl(want-12, alley-7)
punct(want-12, ,-8)
nsubj(want-12, you-9)
nsubj:xsubj(miss-14, you-9)
aux(want-12, wo-10)
neg(want-12, n't-11)
root(ROOT-0, want-12)
mark(miss-14, to-13)
xcomp(want-12, miss-14)
amod(Survivor-20, Confused-15)
compound(Survivor-20, Pet-16)
amod(Survivor-20, Monthly-17)
punct(Survivor-20, ,-18)
amod(Survivor-20, Australasian-19)
dobj(miss-14, Survivor-20)
punct(Survivor-20, ,-21)
cc(Survivor-20, or-22)
amod(Island-24, Rotten-23)
dobj(miss-14, Island-24)
conj:or(Survivor-20, Island-24)
punct(Survivor-20, ---25)
punct(book-30, ``-26)
det(children-28, a-27)
nmod:poss(book-30, children-28)
case(children-28, 's-29)
dep(Survivor-20, book-30)
case(land-33, about-31)
det(land-33, a-32)
nmod:about(book-30, land-33)
advmod(bad-38, where-34)
nsubj(bad-38, everything-35)
cop(bad-38, is-36)
advmod(bad-38, as-37)
acl:relcl(land-33, bad-38)
mark(be-43, as-39)
nsubj(be-43, it-40)
advmod(be-43, possibly-41)
aux(be-43, could-42)
advcl(bad-38, be-43)
punct(want-12, .-44)
punct(want-12, ''-45)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: miss#survivor

miss :: If such eccentric beguilement appeals to you , do n't miss this book ./.
mark(miss-11, If-1)
amod(appeals-5, such-2)
amod(appeals-5, eccentric-3)
compound(appeals-5, beguilement-4)
nsubj(miss-11, appeals-5)
case(you-7, to-6)
nmod:to(appeals-5, you-7)
punct(appeals-5, ,-8)
aux(miss-11, do-9)
neg(miss-11, n't-10)
root(ROOT-0, miss-11)
det(book-13, this-12)
dobj(miss-11, book-13)
punct(miss-11, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#book

miss :: In nine seconds two men were dead , one was missing and presumed so , and three young women -- Mrs. Charles H. Roy , Mrs. Robert A. Anderson , Mrs. David E. Stenstrom -- were left widows ./.
case(seconds-3, In-1)
nummod(seconds-3, nine-2)
nmod:in(dead-7, seconds-3)
nummod(men-5, two-4)
nsubj(dead-7, men-5)
cop(dead-7, were-6)
ccomp(missing-11, dead-7)
punct(missing-11, ,-8)
nsubj(missing-11, one-9)
nsubj(presumed-13, one-9)
aux(missing-11, was-10)
root(ROOT-0, missing-11)
cc(missing-11, and-12)
conj:and(missing-11, presumed-13)
advmod(presumed-13, so-14)
punct(missing-11, ,-15)
cc(missing-11, and-16)
nummod(women-19, three-17)
amod(women-19, young-18)
nsubjpass(left-37, women-19)
punct(women-19, ---20)
compound(Roy-24, Mrs.-21)
compound(Roy-24, Charles-22)
compound(Roy-24, H.-23)
dep(women-19, Roy-24)
punct(Roy-24, ,-25)
compound(Anderson-29, Mrs.-26)
compound(Anderson-29, Robert-27)
compound(Anderson-29, A.-28)
conj(Roy-24, Anderson-29)
punct(Roy-24, ,-30)
compound(Stenstrom-34, Mrs.-31)
compound(Stenstrom-34, David-32)
compound(Stenstrom-34, E.-33)
appos(Roy-24, Stenstrom-34)
punct(Roy-24, ---35)
auxpass(left-37, were-36)
conj:and(missing-11, left-37)
dobj(left-37, widows-38)
punct(missing-11, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#one

miss :: You ca n't miss the hints of `` Rheingold '' and `` Siegfried , '' nor the occasional overblown welling up of massed orchestral sound ./.
nsubj(miss-4, You-1)
aux(miss-4, ca-2)
neg(miss-4, n't-3)
root(ROOT-0, miss-4)
det(hints-6, the-5)
dobj(miss-4, hints-6)
case(Rheingold-9, of-7)
punct(Rheingold-9, ``-8)
nmod:of(hints-6, Rheingold-9)
punct(Rheingold-9, ''-10)
cc(Rheingold-9, and-11)
punct(Rheingold-9, ``-12)
nmod:of(hints-6, Siegfried-13)
conj:and(Rheingold-9, Siegfried-13)
punct(Rheingold-9, ,-14)
punct(Rheingold-9, ''-15)
cc(Rheingold-9, nor-16)
det(overblown-19, the-17)
amod(overblown-19, occasional-18)
nmod:of(hints-6, overblown-19)
conj:and(Rheingold-9, overblown-19)
acl(overblown-19, welling-20)
advmod(welling-20, up-21)
case(sound-25, of-22)
amod(sound-25, massed-23)
amod(sound-25, orchestral-24)
nmod:of(up-21, sound-25)
punct(miss-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#hints

miss :: It also said that 35 , 478 troops were wounded and that 311 remained missing in the Soviet Union 's battle with anti-Kabul Moslem insurgents ./.
nsubj(said-3, It-1)
advmod(said-3, also-2)
root(ROOT-0, said-3)
mark(wounded-10, that-4)
nummod(wounded-10, 35-5)
punct(wounded-10, ,-6)
nummod(troops-8, 478-7)
nsubjpass(wounded-10, troops-8)
auxpass(wounded-10, were-9)
ccomp(said-3, wounded-10)
cc(wounded-10, and-11)
mark(remained-14, that-12)
nsubj(remained-14, 311-13)
ccomp(said-3, remained-14)
conj:and(wounded-10, remained-14)
xcomp(remained-14, missing-15)
case(battle-21, in-16)
det(Union-19, the-17)
compound(Union-19, Soviet-18)
nmod:poss(battle-21, Union-19)
case(Union-19, 's-20)
nmod:in(missing-15, battle-21)
case(insurgents-25, with-22)
amod(insurgents-25, anti-Kabul-23)
compound(insurgents-25, Moslem-24)
nmod:with(battle-21, insurgents-25)
punct(said-3, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#battle

miss :: In nearby Henderson , Roger Ellis wakes up in the middle of the night because his Dallas-owned bank , which once promised him an endless supply of credit , is demanding that he pay off his construction company 's note even though he has never missed a payment ./.
case(Henderson-3, In-1)
amod(Henderson-3, nearby-2)
nmod:in(wakes-7, Henderson-3)
punct(wakes-7, ,-4)
compound(Ellis-6, Roger-5)
nsubj(wakes-7, Ellis-6)
root(ROOT-0, wakes-7)
compound:prt(wakes-7, up-8)
case(middle-11, in-9)
det(middle-11, the-10)
nmod:in(wakes-7, middle-11)
case(night-14, of-12)
det(night-14, the-13)
nmod:of(middle-11, night-14)
mark(demanding-31, because-15)
nmod:poss(bank-18, his-16)
amod(bank-18, Dallas-owned-17)
nsubj(promised-22, bank-18)
nsubj(demanding-31, bank-18)
punct(bank-18, ,-19)
ref(bank-18, which-20)
advmod(promised-22, once-21)
acl:relcl(bank-18, promised-22)
iobj(promised-22, him-23)
det(supply-26, an-24)
amod(supply-26, endless-25)
dobj(promised-22, supply-26)
case(credit-28, of-27)
nmod:of(supply-26, credit-28)
punct(bank-18, ,-29)
aux(demanding-31, is-30)
advcl(wakes-7, demanding-31)
mark(pay-34, that-32)
nsubj(pay-34, he-33)
ccomp(demanding-31, pay-34)
compound:prt(pay-34, off-35)
nmod:poss(company-38, his-36)
compound(company-38, construction-37)
nmod:poss(note-40, company-38)
case(company-38, 's-39)
dobj(pay-34, note-40)
advmod(missed-46, even-41)
mark(missed-46, though-42)
nsubj(missed-46, he-43)
aux(missed-46, has-44)
neg(missed-46, never-45)
advcl(pay-34, missed-46)
det(payment-48, a-47)
dobj(missed-46, payment-48)
punct(wakes-7, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: miss#payment

pass :: We should not deny the existence of abhorrent passages , but let us not pass over thousands of pages embodying tolerance , forgiveness and allembracing harmony , such as in `` The Brothers Karamazov '' and many others , and Dostoevsky 's speech commemorating the death of Pushkin in which he urged Russian national universality ./.
nsubj(deny-4, We-1)
nsubj(let-12, We-1)
aux(deny-4, should-2)
neg(deny-4, not-3)
root(ROOT-0, deny-4)
det(existence-6, the-5)
dobj(deny-4, existence-6)
case(passages-9, of-7)
amod(passages-9, abhorrent-8)
nmod:of(existence-6, passages-9)
punct(deny-4, ,-10)
cc(deny-4, but-11)
conj:but(deny-4, let-12)
nsubj(pass-15, us-13)
neg(pass-15, not-14)
ccomp(let-12, pass-15)
compound:prt(pass-15, over-16)
dobj(pass-15, thousands-17)
case(pages-19, of-18)
nmod:of(thousands-17, pages-19)
acl(pages-19, embodying-20)
dobj(embodying-20, tolerance-21)
punct(tolerance-21, ,-22)
dobj(embodying-20, forgiveness-23)
conj:and(tolerance-21, forgiveness-23)
cc(tolerance-21, and-24)
dobj(embodying-20, allembracing-25)
conj:and(tolerance-21, allembracing-25)
dobj(allembracing-25, harmony-26)
punct(harmony-26, ,-27)
case(Karamazov-34, such-28)
mwe(such-28, as-29)
case(Karamazov-34, in-30)
punct(Karamazov-34, ``-31)
det(Karamazov-34, The-32)
compound(Karamazov-34, Brothers-33)
nmod:such_as(harmony-26, Karamazov-34)
punct(pass-15, ''-35)
cc(let-12, and-36)
amod(others-38, many-37)
conj:but(deny-4, others-38)
conj:and(let-12, others-38)
punct(let-12, ,-39)
cc(let-12, and-40)
nmod:poss(speech-43, Dostoevsky-41)
case(Dostoevsky-41, 's-42)
conj:but(deny-4, speech-43)
conj:and(let-12, speech-43)
acl(speech-43, commemorating-44)
det(death-46, the-45)
dobj(commemorating-44, death-46)
nmod:in(urged-52, death-46)
case(Pushkin-48, of-47)
nmod:of(death-46, Pushkin-48)
case(which-50, in-49)
ref(death-46, which-50)
nsubj(urged-52, he-51)
acl:relcl(death-46, urged-52)
compound(universality-55, Russian-53)
compound(universality-55, national-54)
dobj(urged-52, universality-55)
punct(deny-4, .-56)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pass#pages

pass :: `` But we also do n't want to hem and haw with phrases like 'passed away ' or 'no longer with us. '/POS
punct(want-7, ``-1)
cc(want-7, But-2)
nsubj(want-7, we-3)
advmod(want-7, also-4)
aux(want-7, do-5)
neg(want-7, n't-6)
root(ROOT-0, want-7)
case(hem-9, to-8)
nmod:to(want-7, hem-9)
cc(hem-9, and-10)
nmod:to(want-7, haw-11)
conj:and(hem-9, haw-11)
case(phrases-13, with-12)
nmod:with(want-7, phrases-13)
case(passed-16, like-14)
punct(passed-16, `-15)
acl(phrases-13, passed-16)
advmod(passed-16, away-17)
punct(passed-16, '-18)
cc(passed-16, or-19)
punct(passed-16, `-20)
neg(longer-22, no-21)
root(`-20, longer-22)
case(us-24, with-23)
nmod:with(longer-22, us-24)
punct(longer-22, .-25)
punct(longer-22, '-26)
root(ROOT-0, /-1)
root(/-1, POS-2)
No match found

pass :: Surely , before not too many years have passed , such passages will be read into the record of a congressional committee with utter incredulity all around ./.
advmod(read-15, Surely-1)
punct(read-15, ,-2)
mark(passed-9, before-3)
neg(years-7, not-4)
advmod(many-6, too-5)
amod(years-7, many-6)
nsubj(passed-9, years-7)
aux(passed-9, have-8)
advcl(read-15, passed-9)
punct(read-15, ,-10)
amod(passages-12, such-11)
nsubjpass(read-15, passages-12)
aux(read-15, will-13)
auxpass(read-15, be-14)
root(ROOT-0, read-15)
case(record-18, into-16)
det(record-18, the-17)
nmod:into(read-15, record-18)
case(committee-22, of-19)
det(committee-22, a-20)
amod(committee-22, congressional-21)
nmod:of(record-18, committee-22)
case(incredulity-25, with-23)
amod(incredulity-25, utter-24)
nmod:with(committee-22, incredulity-25)
dep(around-27, all-26)
advmod(read-15, around-27)
punct(read-15, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pass#years

pass :: Wotan and Brunnhilde thus met on passing crags in the night for a final passionate embrace ./.
nsubj(met-5, Wotan-1)
cc(Wotan-1, and-2)
conj:and(Wotan-1, Brunnhilde-3)
nsubj(met-5, Brunnhilde-3)
advmod(met-5, thus-4)
root(ROOT-0, met-5)
mark(passing-7, on-6)
advcl(met-5, passing-7)
dobj(passing-7, crags-8)
case(night-11, in-9)
det(night-11, the-10)
nmod:in(passing-7, night-11)
case(passionate-15, for-12)
det(passionate-15, a-13)
amod(passionate-15, final-14)
nmod:for(passing-7, passionate-15)
dep(passionate-15, embrace-16)
punct(met-5, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pass#crags

plant :: Grand Met 's letter describes the spinoff plan as `` another time bomb , planted by Pillsbury 's management , to deter the acquisition of the company by Grand Met or any other party . ''/''
compound(Met-2, Grand-1)
nmod:poss(letter-4, Met-2)
case(Met-2, 's-3)
nsubj(describes-5, letter-4)
root(ROOT-0, describes-5)
det(plan-8, the-6)
compound(plan-8, spinoff-7)
dobj(describes-5, plan-8)
case(bomb-13, as-9)
punct(bomb-13, ``-10)
det(bomb-13, another-11)
compound(bomb-13, time-12)
nmod:as(describes-5, bomb-13)
punct(bomb-13, ,-14)
acl(bomb-13, planted-15)
case(management-19, by-16)
nmod:poss(management-19, Pillsbury-17)
case(Pillsbury-17, 's-18)
nmod:by(planted-15, management-19)
punct(bomb-13, ,-20)
mark(deter-22, to-21)
acl(bomb-13, deter-22)
det(acquisition-24, the-23)
dobj(deter-22, acquisition-24)
case(company-27, of-25)
det(company-27, the-26)
nmod:of(acquisition-24, company-27)
case(Met-30, by-28)
compound(Met-30, Grand-29)
nmod:by(acquisition-24, Met-30)
cc(Met-30, or-31)
det(party-34, any-32)
amod(party-34, other-33)
nmod:by(acquisition-24, party-34)
conj:or(Met-30, party-34)
punct(describes-5, .-35)
punct(describes-5, ''-36)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: plant#management

plant :: Last week , after a team had gone through its paces , one of the handlers forgot to remove a stick of dynamite that had been planted in the suitcase ./.
amod(week-2, Last-1)
nmod:tmod(forgot-17, week-2)
punct(forgot-17, ,-3)
mark(gone-8, after-4)
det(team-6, a-5)
nsubj(gone-8, team-6)
aux(gone-8, had-7)
advcl(forgot-17, gone-8)
case(paces-11, through-9)
nmod:poss(paces-11, its-10)
nmod:through(gone-8, paces-11)
punct(forgot-17, ,-12)
nsubj(forgot-17, one-13)
nsubj:xsubj(remove-19, one-13)
case(handlers-16, of-14)
det(handlers-16, the-15)
nmod:of(one-13, handlers-16)
root(ROOT-0, forgot-17)
mark(remove-19, to-18)
xcomp(forgot-17, remove-19)
det(stick-21, a-20)
dobj(remove-19, stick-21)
nsubjpass(planted-27, stick-21)
case(dynamite-23, of-22)
nmod:of(stick-21, dynamite-23)
ref(stick-21, that-24)
aux(planted-27, had-25)
auxpass(planted-27, been-26)
acl:relcl(stick-21, planted-27)
case(suitcase-30, in-28)
det(suitcase-30, the-29)
nmod:in(planted-27, suitcase-30)
punct(forgot-17, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#stick

plant :: More mines than maize is planted in the countryside , much of which is controlled by the guerrillas ./.
amod(mines-2, More-1)
nsubjpass(planted-6, mines-2)
case(maize-4, than-3)
nmod:than(mines-2, maize-4)
auxpass(planted-6, is-5)
root(ROOT-0, planted-6)
case(countryside-9, in-7)
det(countryside-9, the-8)
nmod:in(planted-6, countryside-9)
punct(planted-6, ,-10)
nsubjpass(controlled-15, much-11)
case(which-13, of-12)
nmod:of(much-11, which-13)
auxpass(controlled-15, is-14)
parataxis(planted-6, controlled-15)
case(guerrillas-18, by-16)
det(guerrillas-18, the-17)
nmod:agent(controlled-15, guerrillas-18)
punct(planted-6, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#mines

plant :: There was no immediate claim of responsibility , but police said the bomb was probably planted by Sinhalese extremists in retaliation for the restaurant owner 's defiance of a call for a general strike ./.
expl(was-2, There-1)
root(ROOT-0, was-2)
neg(claim-5, no-3)
amod(claim-5, immediate-4)
nsubj(was-2, claim-5)
case(responsibility-7, of-6)
nmod:of(claim-5, responsibility-7)
punct(was-2, ,-8)
cc(was-2, but-9)
nsubj(said-11, police-10)
conj:but(was-2, said-11)
det(bomb-13, the-12)
nsubjpass(planted-16, bomb-13)
auxpass(planted-16, was-14)
advmod(planted-16, probably-15)
ccomp(said-11, planted-16)
case(extremists-19, by-17)
compound(extremists-19, Sinhalese-18)
nmod:agent(planted-16, extremists-19)
case(retaliation-21, in-20)
nmod:in(planted-16, retaliation-21)
case(defiance-27, for-22)
det(owner-25, the-23)
compound(owner-25, restaurant-24)
nmod:poss(defiance-27, owner-25)
case(owner-25, 's-26)
nmod:for(retaliation-21, defiance-27)
case(call-30, of-28)
det(call-30, a-29)
nmod:of(defiance-27, call-30)
case(strike-34, for-31)
det(strike-34, a-32)
amod(strike-34, general-33)
nmod:for(call-30, strike-34)
punct(was-2, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#bomb

plant :: Some mines were planted by the U.S.-backed guerrillas themselves ./.
det(mines-2, Some-1)
nsubjpass(planted-4, mines-2)
auxpass(planted-4, were-3)
root(ROOT-0, planted-4)
case(guerrillas-8, by-5)
det(guerrillas-8, the-6)
amod(guerrillas-8, U.S.-backed-7)
nmod:agent(planted-4, guerrillas-8)
nmod:npmod(guerrillas-8, themselves-9)
punct(planted-4, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#mines

plant :: The moles were just doing what comes naturally , planting a micromanagement time bomb in another massive piece of legislation ./.
det(moles-2, The-1)
nsubj(doing-5, moles-2)
aux(doing-5, were-3)
advmod(doing-5, just-4)
root(ROOT-0, doing-5)
nsubj(comes-7, what-6)
ccomp(doing-5, comes-7)
advmod(comes-7, naturally-8)
punct(doing-5, ,-9)
advcl(doing-5, planting-10)
det(bomb-14, a-11)
compound(bomb-14, micromanagement-12)
compound(bomb-14, time-13)
dobj(planting-10, bomb-14)
case(piece-18, in-15)
det(piece-18, another-16)
amod(piece-18, massive-17)
nmod:in(planting-10, piece-18)
case(legislation-20, of-19)
nmod:of(piece-18, legislation-20)
punct(doing-5, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#bomb

plant :: Capitalizing on their heritage -- the town 's name derives from the Scottish birthplace of poet Robert Burns -- citizens imported a fire-engine-red Scottish phone booth and planted it in the courthouse square ./.
root(ROOT-0, Capitalizing-1)
case(heritage-4, on-2)
nmod:poss(heritage-4, their-3)
nmod:on(Capitalizing-1, heritage-4)
punct(Capitalizing-1, ---5)
det(town-7, the-6)
nmod:poss(name-9, town-7)
case(town-7, 's-8)
nsubj(derives-10, name-9)
parataxis(Capitalizing-1, derives-10)
case(birthplace-14, from-11)
det(birthplace-14, the-12)
amod(birthplace-14, Scottish-13)
nmod:from(derives-10, birthplace-14)
case(Burns-18, of-15)
compound(Burns-18, poet-16)
compound(Burns-18, Robert-17)
nmod:of(birthplace-14, Burns-18)
punct(Capitalizing-1, ---19)
dep(Capitalizing-1, citizens-20)
acl(citizens-20, imported-21)
det(booth-26, a-22)
amod(booth-26, fire-engine-red-23)
amod(booth-26, Scottish-24)
compound(booth-26, phone-25)
dobj(imported-21, booth-26)
cc(citizens-20, and-27)
dep(Capitalizing-1, planted-28)
conj:and(citizens-20, planted-28)
dobj(planted-28, it-29)
case(square-33, in-30)
det(square-33, the-31)
compound(square-33, courthouse-32)
nmod:in(planted-28, square-33)
punct(Capitalizing-1, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#it

plant :: Is there any chance that the spirit of a united Europe can be planted beyond the Oder-Neisse Line ?/.
root(ROOT-0, Is-1)
expl(Is-1, there-2)
det(chance-4, any-3)
nsubj(Is-1, chance-4)
mark(planted-14, that-5)
det(spirit-7, the-6)
nsubjpass(planted-14, spirit-7)
case(Europe-11, of-8)
det(Europe-11, a-9)
compound(Europe-11, united-10)
nmod:of(spirit-7, Europe-11)
aux(planted-14, can-12)
auxpass(planted-14, be-13)
ccomp(chance-4, planted-14)
case(Line-18, beyond-15)
det(Line-18, the-16)
amod(Line-18, Oder-Neisse-17)
nmod:beyond(planted-14, Line-18)
punct(Is-1, ?-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#spirit

plant :: A bomb would have required `` a bribable '' Pakistani soldier or officer to plant it , an administration official said ./.
det(bomb-2, A-1)
nsubj(required-5, bomb-2)
aux(required-5, would-3)
aux(required-5, have-4)
ccomp(said-21, required-5)
punct(required-5, ``-6)
det(soldier-11, a-7)
amod(soldier-11, bribable-8)
punct(soldier-11, ''-9)
amod(soldier-11, Pakistani-10)
dobj(required-5, soldier-11)
cc(soldier-11, or-12)
dobj(required-5, officer-13)
conj:or(soldier-11, officer-13)
mark(plant-15, to-14)
acl(soldier-11, plant-15)
dobj(plant-15, it-16)
punct(said-21, ,-17)
det(official-20, an-18)
compound(official-20, administration-19)
nsubj(said-21, official-20)
root(ROOT-0, said-21)
punct(said-21, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#it

plant :: It is time to join the X-maquis , go gray like artemisia , and start planting toward the xeric year 2000 ./.
nsubj(time-3, It-1)
cop(time-3, is-2)
root(ROOT-0, time-3)
mark(join-5, to-4)
acl(time-3, join-5)
det(X-maquis-7, the-6)
dobj(join-5, X-maquis-7)
punct(join-5, ,-8)
acl(time-3, go-9)
conj:and(join-5, go-9)
xcomp(go-9, gray-10)
case(artemisia-12, like-11)
nmod:like(gray-10, artemisia-12)
punct(join-5, ,-13)
cc(join-5, and-14)
acl(time-3, start-15)
conj:and(join-5, start-15)
xcomp(start-15, planting-16)
case(year-20, toward-17)
det(year-20, the-18)
compound(year-20, xeric-19)
nmod:toward(planting-16, year-20)
nummod(year-20, 2000-21)
punct(time-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#year

plant :: Similarly , Victor Munoz , a Chihuahua-born U.S. labor leader , credits the PAN for planting the seeds of democracy ./.
advmod(credits-12, Similarly-1)
punct(credits-12, ,-2)
compound(Munoz-4, Victor-3)
nsubj(credits-12, Munoz-4)
punct(Munoz-4, ,-5)
det(leader-10, a-6)
amod(leader-10, Chihuahua-born-7)
compound(leader-10, U.S.-8)
compound(leader-10, labor-9)
appos(Munoz-4, leader-10)
punct(Munoz-4, ,-11)
root(ROOT-0, credits-12)
det(PAN-14, the-13)
dobj(credits-12, PAN-14)
mark(planting-16, for-15)
acl(PAN-14, planting-16)
det(seeds-18, the-17)
dobj(planting-16, seeds-18)
case(democracy-20, of-19)
nmod:of(seeds-18, democracy-20)
punct(credits-12, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#seeds

plant :: U.S. intelligence officials believe Col. Hawari , whose real name is Mohammed Abdel-Ali Labib and who is a protege and close ally of PLO chairman Yasir Arafat , was responsible for planting a sophisticated bomb that killed four Americans on a TWA jetliner in 1986 ./.
compound(officials-3, U.S.-1)
compound(officials-3, intelligence-2)
nsubj(believe-4, officials-3)
root(ROOT-0, believe-4)
compound(Hawari-6, Col.-5)
dobj(believe-4, Hawari-6)
nmod:poss(name-10, Hawari-6)
punct(Hawari-6, ,-7)
ref(Hawari-6, whose-8)
amod(name-10, real-9)
nsubjpass(Mohammed-12, name-10)
auxpass(Mohammed-12, is-11)
acl:relcl(Hawari-6, Mohammed-12)
compound(Labib-14, Abdel-Ali-13)
dobj(Mohammed-12, Labib-14)
cc(Labib-14, and-15)
nsubj(protege-19, who-16)
cop(protege-19, is-17)
det(protege-19, a-18)
dobj(Mohammed-12, protege-19)
conj:and(Labib-14, protege-19)
cc(protege-19, and-20)
amod(ally-22, close-21)
conj:and(Labib-14, ally-22)
conj:and(protege-19, ally-22)
case(Arafat-27, of-23)
compound(Arafat-27, PLO-24)
compound(Arafat-27, chairman-25)
compound(Arafat-27, Yasir-26)
nmod:of(protege-19, Arafat-27)
punct(protege-19, ,-28)
cop(responsible-30, was-29)
dep(protege-19, responsible-30)
mark(planting-32, for-31)
advcl(responsible-30, planting-32)
det(bomb-35, a-33)
amod(bomb-35, sophisticated-34)
dobj(planting-32, bomb-35)
nsubj(killed-37, bomb-35)
ref(bomb-35, that-36)
acl:relcl(bomb-35, killed-37)
nummod(Americans-39, four-38)
dobj(killed-37, Americans-39)
case(jetliner-43, on-40)
det(jetliner-43, a-41)
compound(jetliner-43, TWA-42)
nmod:on(killed-37, jetliner-43)
case(1986-45, in-44)
nmod:in(killed-37, 1986-45)
punct(believe-4, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#bomb

plant :: By the time Mr. Torres got his ether , agents had planted electronic beepers inside the barrels ./.
case(time-3, By-1)
det(time-3, the-2)
nmod:by(got-6, time-3)
compound(Torres-5, Mr.-4)
nsubj(got-6, Torres-5)
root(ROOT-0, got-6)
nmod:poss(ether-8, his-7)
dobj(got-6, ether-8)
punct(got-6, ,-9)
nsubj(planted-12, agents-10)
aux(planted-12, had-11)
parataxis(got-6, planted-12)
amod(beepers-14, electronic-13)
dobj(planted-12, beepers-14)
case(barrels-17, inside-15)
det(barrels-17, the-16)
nmod:inside(planted-12, barrels-17)
punct(got-6, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#beepers

plant :: Last week , according to reports from Beirut , forces of the Iranian-directed Hezbollah , or Party of God , forced the rival , Syrian-backed Amal militia to withdraw from parts of the Lebanese capital 's Shiite Moslem slums and planted Iranian flags atop the mosques there ./.
amod(week-2, Last-1)
nmod:tmod(forced-21, week-2)
punct(forced-21, ,-3)
case(reports-6, according-4)
mwe(according-4, to-5)
nmod:according_to(forced-21, reports-6)
case(Beirut-8, from-7)
nmod:from(reports-6, Beirut-8)
punct(forced-21, ,-9)
nsubj(forced-21, forces-10)
case(Hezbollah-14, of-11)
det(Hezbollah-14, the-12)
amod(Hezbollah-14, Iranian-directed-13)
nmod:of(forces-10, Hezbollah-14)
punct(Hezbollah-14, ,-15)
cc(Hezbollah-14, or-16)
nmod:of(forces-10, Party-17)
conj:or(Hezbollah-14, Party-17)
case(God-19, of-18)
nmod:of(Party-17, God-19)
punct(forced-21, ,-20)
root(ROOT-0, forced-21)
det(rival-23, the-22)
dobj(forced-21, rival-23)
punct(rival-23, ,-24)
amod(militia-27, Syrian-backed-25)
amod(militia-27, Amal-26)
appos(rival-23, militia-27)
mark(withdraw-29, to-28)
advcl(forced-21, withdraw-29)
case(parts-31, from-30)
nmod:from(withdraw-29, parts-31)
case(slums-39, of-32)
det(capital-35, the-33)
amod(capital-35, Lebanese-34)
nmod:poss(slums-39, capital-35)
case(capital-35, 's-36)
compound(slums-39, Shiite-37)
compound(slums-39, Moslem-38)
nmod:of(parts-31, slums-39)
cc(withdraw-29, and-40)
amod(flags-43, planted-41)
amod(flags-43, Iranian-42)
advcl(forced-21, flags-43)
conj:and(withdraw-29, flags-43)
case(mosques-46, atop-44)
det(mosques-46, the-45)
nmod:atop(flags-43, mosques-46)
advmod(flags-43, there-47)
punct(forced-21, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#flags

plant :: `` Certainly the place where Chambers wrote ' Witness ' and where the 'pumpkin papers ' that ultimately indicted Hiss were kept is a place of considerable historical importance and meets the minimal requirements , '' said Tony Dolan , a Reagan speechwriter who planted the idea of the historical designation with Mr. Hodel ./.
punct(said-38, ``-1)
advmod(place-4, Certainly-2)
det(place-4, the-3)
nsubj(place-26, place-4)
nsubj(meets-32, place-4)
advmod(wrote-7, where-5)
nsubj(wrote-7, Chambers-6)
acl:relcl(place-4, wrote-7)
punct(wrote-7, '-8)
dobj(wrote-7, Witness-9)
case(Witness-9, '-10)
cc(Witness-9, and-11)
advmod(kept-23, where-12)
det(papers-16, the-13)
punct(papers-16, `-14)
compound(papers-16, pumpkin-15)
nsubj(indicted-20, papers-16)
nsubjpass(kept-23, papers-16)
case(papers-16, '-17)
ref(papers-16, that-18)
advmod(indicted-20, ultimately-19)
acl:relcl(papers-16, indicted-20)
dobj(indicted-20, Hiss-21)
auxpass(kept-23, were-22)
dobj(wrote-7, kept-23)
conj:and(Witness-9, kept-23)
cop(place-26, is-24)
det(place-26, a-25)
ccomp(said-38, place-26)
case(importance-30, of-27)
amod(importance-30, considerable-28)
amod(importance-30, historical-29)
nmod:of(place-26, importance-30)
cc(place-26, and-31)
conj:and(place-26, meets-32)
ccomp(said-38, meets-32)
det(requirements-35, the-33)
amod(requirements-35, minimal-34)
dobj(meets-32, requirements-35)
punct(said-38, ,-36)
punct(said-38, ''-37)
root(ROOT-0, said-38)
compound(Dolan-40, Tony-39)
nsubj(said-38, Dolan-40)
punct(Dolan-40, ,-41)
det(speechwriter-44, a-42)
compound(speechwriter-44, Reagan-43)
appos(Dolan-40, speechwriter-44)
nsubj(planted-46, speechwriter-44)
ref(speechwriter-44, who-45)
acl:relcl(speechwriter-44, planted-46)
det(idea-48, the-47)
dobj(planted-46, idea-48)
case(designation-52, of-49)
det(designation-52, the-50)
amod(designation-52, historical-51)
nmod:of(idea-48, designation-52)
case(Hodel-55, with-53)
compound(Hodel-55, Mr.-54)
nmod:with(planted-46, Hodel-55)
punct(said-38, .-56)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#designation

plant :: Last week , the ever-clever Michael Kinsley in the Washington Post forged stream after stream of income data to plant his flag: `` Affluent people , far from shouldering an ever-greater share of the tax burden , are n't even keeping up with their rising share of the nation 's income . ''/''
amod(week-2, Last-1)
nmod:tmod(forged-12, week-2)
punct(forged-12, ,-3)
det(Kinsley-7, the-4)
compound(Kinsley-7, ever-clever-5)
compound(Kinsley-7, Michael-6)
nsubj(forged-12, Kinsley-7)
case(Post-11, in-8)
det(Post-11, the-9)
compound(Post-11, Washington-10)
nmod:in(Kinsley-7, Post-11)
root(ROOT-0, forged-12)
dobj(forged-12, stream-13)
case(stream-15, after-14)
nmod:after(forged-12, stream-15)
case(data-18, of-16)
compound(data-18, income-17)
nmod:of(stream-15, data-18)
mark(plant-20, to-19)
advcl(forged-12, plant-20)
nmod:poss(flag-22, his-21)
dobj(plant-20, flag-22)
punct(forged-12, :-23)
punct(forged-12, ``-24)
amod(people-26, Affluent-25)
nsubj(keeping-42, people-26)
punct(people-26, ,-27)
advmod(shouldering-30, far-28)
mark(shouldering-30, from-29)
acl(people-26, shouldering-30)
det(share-33, an-31)
amod(share-33, ever-greater-32)
dobj(shouldering-30, share-33)
case(burden-37, of-34)
det(burden-37, the-35)
compound(burden-37, tax-36)
nmod:of(share-33, burden-37)
punct(people-26, ,-38)
aux(keeping-42, are-39)
neg(keeping-42, n't-40)
advmod(keeping-42, even-41)
ccomp(forged-12, keeping-42)
compound:prt(keeping-42, up-43)
case(share-47, with-44)
nmod:poss(share-47, their-45)
amod(share-47, rising-46)
nmod:with(keeping-42, share-47)
case(income-52, of-48)
det(nation-50, the-49)
nmod:poss(income-52, nation-50)
case(nation-50, 's-51)
nmod:of(share-47, income-52)
punct(forged-12, .-53)
punct(forged-12, ''-54)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: plant#flag

plant :: But David Lett was a visionary , and in 1966 he planted pinot noir in the red hills near Dundee ./.
cc(visionary-6, But-1)
compound(Lett-3, David-2)
nsubj(visionary-6, Lett-3)
cop(visionary-6, was-4)
det(visionary-6, a-5)
root(ROOT-0, visionary-6)
punct(visionary-6, ,-7)
cc(visionary-6, and-8)
case(1966-10, in-9)
nmod:in(planted-12, 1966-10)
nsubj(planted-12, he-11)
conj:and(visionary-6, planted-12)
compound(noir-14, pinot-13)
dobj(planted-12, noir-14)
case(hills-18, in-15)
det(hills-18, the-16)
compound(hills-18, red-17)
nmod:in(noir-14, hills-18)
case(Dundee-20, near-19)
nmod:near(hills-18, Dundee-20)
punct(visionary-6, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#noir

plant :: After the close of trading , however , a National Weather Service official said the heaviest rains and strongest winds are expected today only in southwest Louisiana , where almost half of the state 's soybeans are planted ./.
case(close-3, After-1)
det(close-3, the-2)
nmod:after(said-14, close-3)
case(trading-5, of-4)
nmod:of(close-3, trading-5)
punct(said-14, ,-6)
advmod(said-14, however-7)
punct(said-14, ,-8)
det(official-13, a-9)
amod(official-13, National-10)
compound(official-13, Weather-11)
compound(official-13, Service-12)
nsubj(said-14, official-13)
root(ROOT-0, said-14)
det(rains-17, the-15)
amod(rains-17, heaviest-16)
nsubjpass(expected-22, rains-17)
cc(rains-17, and-18)
amod(winds-20, strongest-19)
conj:and(rains-17, winds-20)
nsubjpass(expected-22, winds-20)
auxpass(expected-22, are-21)
ccomp(said-14, expected-22)
nmod:tmod(expected-22, today-23)
advmod(Louisiana-27, only-24)
case(Louisiana-27, in-25)
compound(Louisiana-27, southwest-26)
nmod:in(expected-22, Louisiana-27)
punct(Louisiana-27, ,-28)
advmod(planted-38, where-29)
advmod(half-31, almost-30)
nsubjpass(planted-38, half-31)
case(soybeans-36, of-32)
det(state-34, the-33)
nmod:poss(soybeans-36, state-34)
case(state-34, 's-35)
nmod:of(half-31, soybeans-36)
auxpass(planted-38, are-37)
acl:relcl(Louisiana-27, planted-38)
punct(said-14, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#half

plant :: I lost 95 % of the trees planted in one field this past spring ./.
nsubj(lost-2, I-1)
root(ROOT-0, lost-2)
nummod(%-4, 95-3)
dobj(lost-2, %-4)
case(trees-7, of-5)
det(trees-7, the-6)
nmod:of(%-4, trees-7)
acl(trees-7, planted-8)
case(field-11, in-9)
nummod(field-11, one-10)
nmod:in(planted-8, field-11)
det(spring-14, this-12)
amod(spring-14, past-13)
nmod:tmod(planted-8, spring-14)
punct(lost-2, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#field

plant :: Mr. Hane , the Fort Motte farmer , planted only 250 acres in soybeans this spring , just one-third as much as six years ago ./.
compound(Hane-2, Mr.-1)
nsubj(planted-9, Hane-2)
punct(Hane-2, ,-3)
det(farmer-7, the-4)
compound(farmer-7, Fort-5)
compound(farmer-7, Motte-6)
appos(Hane-2, farmer-7)
punct(Hane-2, ,-8)
root(ROOT-0, planted-9)
advmod(250-11, only-10)
nummod(acres-12, 250-11)
dobj(planted-9, acres-12)
case(soybeans-14, in-13)
nmod:in(planted-9, soybeans-14)
det(spring-16, this-15)
nmod:tmod(planted-9, spring-16)
punct(planted-9, ,-17)
advmod(one-third-19, just-18)
advmod(planted-9, one-third-19)
advmod(six-23, as-20)
advmod(six-23, much-21)
advmod(six-23, as-22)
nummod(years-24, six-23)
nmod:npmod(ago-25, years-24)
advmod(one-third-19, ago-25)
punct(planted-9, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#acres

plant :: Farmers have planted pine trees on many former soybean fields under a government program that pays them $ 45 an acre each year to idle land ./.
nsubj(planted-3, Farmers-1)
aux(planted-3, have-2)
root(ROOT-0, planted-3)
compound(trees-5, pine-4)
dobj(planted-3, trees-5)
case(fields-10, on-6)
amod(fields-10, many-7)
amod(fields-10, former-8)
compound(fields-10, soybean-9)
nmod:on(planted-3, fields-10)
case(program-14, under-11)
det(program-14, a-12)
compound(program-14, government-13)
nmod:under(planted-3, program-14)
nsubj(pays-16, program-14)
ref(program-14, that-15)
acl:relcl(program-14, pays-16)
iobj(pays-16, them-17)
dep(45-19, $-18)
dobj(pays-16, 45-19)
det(acre-21, an-20)
nmod:npmod(45-19, acre-21)
det(year-23, each-22)
nmod:tmod(pays-16, year-23)
case(land-26, to-24)
amod(land-26, idle-25)
nmod:to(pays-16, land-26)
punct(planted-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#trees

plant :: Because of sharp drops in grain stockpiles , the department is likely to allow farmers to plant more acreage next year ./.
case(drops-4, Because-1)
mwe(Because-1, of-2)
amod(drops-4, sharp-3)
nmod:because_of(likely-12, drops-4)
case(stockpiles-7, in-5)
compound(stockpiles-7, grain-6)
nmod:in(drops-4, stockpiles-7)
punct(likely-12, ,-8)
det(department-10, the-9)
nsubj(likely-12, department-10)
nsubj:xsubj(allow-14, department-10)
cop(likely-12, is-11)
root(ROOT-0, likely-12)
mark(allow-14, to-13)
xcomp(likely-12, allow-14)
dobj(allow-14, farmers-15)
nsubj:xsubj(plant-17, farmers-15)
mark(plant-17, to-16)
xcomp(allow-14, plant-17)
amod(acreage-19, more-18)
dobj(plant-17, acreage-19)
amod(year-21, next-20)
nmod:tmod(plant-17, year-21)
punct(likely-12, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#acreage

plant :: Last September a federal agent even tried to plant a listening device in the building housing MCA 's home video unit , but was discovered by MCA security guards ./.
amod(September-2, Last-1)
nmod:tmod(tried-7, September-2)
det(agent-5, a-3)
amod(agent-5, federal-4)
nsubj(tried-7, agent-5)
nsubj:xsubj(plant-9, agent-5)
nsubjpass(discovered-25, agent-5)
advmod(tried-7, even-6)
root(ROOT-0, tried-7)
mark(plant-9, to-8)
xcomp(tried-7, plant-9)
det(device-12, a-10)
amod(device-12, listening-11)
dobj(plant-9, device-12)
case(unit-21, in-13)
det(MCA-17, the-14)
compound(MCA-17, building-15)
compound(MCA-17, housing-16)
nmod:poss(unit-21, MCA-17)
case(MCA-17, 's-18)
compound(unit-21, home-19)
compound(unit-21, video-20)
nmod:in(plant-9, unit-21)
punct(tried-7, ,-22)
cc(tried-7, but-23)
auxpass(discovered-25, was-24)
conj:but(tried-7, discovered-25)
case(guards-29, by-26)
compound(guards-29, MCA-27)
compound(guards-29, security-28)
nmod:agent(discovered-25, guards-29)
punct(tried-7, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#device

plant :: Kim Sang Up , a 51-year-old ginseng farmer here , says some of his 5 , 000 pyong of ginseng land are now as far as two hours from his house , and only 2 , 000 are planted in ginseng at any one time . -LRB- A pyong is about four square yards. -RRB-/-RRB-
nsubj(Sang-2, Kim-1)
root(ROOT-0, Sang-2)
advmod(Sang-2, Up-3)
punct(Sang-2, ,-4)
det(farmer-8, a-5)
amod(farmer-8, 51-year-old-6)
compound(farmer-8, ginseng-7)
dobj(Sang-2, farmer-8)
advmod(farmer-8, here-9)
punct(Sang-2, ,-10)
dep(Sang-2, says-11)
dobj(says-11, some-12)
acl(some-12, of-13)
root(of-13, his-14)
root(his-14, 5-15)
punct(5-15, ,-16)
nummod(pyong-18, 000-17)
root(,-16, pyong-18)
case(land-21, of-19)
compound(land-21, ginseng-20)
nmod:of(pyong-18, land-21)
acl(pyong-18, are-22)
advmod(are-22, now-23)
advmod(far-25, as-24)
dep(now-23, far-25)
case(hours-28, as-26)
nummod(hours-28, two-27)
nmod:as(far-25, hours-28)
case(house-31, from-29)
nmod:poss(house-31, his-30)
nmod:from(hours-28, house-31)
punct(far-25, ,-32)
cc(far-25, and-33)
advmod(2-35, only-34)
nmod:tmod(planted-39, 2-35)
punct(planted-39, ,-36)
nsubjpass(planted-39, 000-37)
auxpass(planted-39, are-38)
dep(now-23, planted-39)
conj:and(far-25, planted-39)
case(ginseng-41, in-40)
nmod:in(planted-39, ginseng-41)
case(time-45, at-42)
det(time-45, any-43)
nummod(time-45, one-44)
nmod:at(planted-39, time-45)
punct(pyong-18, .-46)
punct(yards-8, -LRB--1)
det(pyong-3, A-2)
nsubj(yards-8, pyong-3)
cop(yards-8, is-4)
advmod(four-6, about-5)
nummod(yards-8, four-6)
amod(yards-8, square-7)
root(ROOT-0, yards-8)
punct(yards-8, .-9)
punct(yards-8, -RRB--10)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: plant#000

plant :: The South 's overall softwood growth of 5.7 billion cubic feet annually could be increased by 2.1 billion cubic feet by planting pine on 22 million acres of marginal crop land and pasture , the study says ./.
det(South-2, The-1)
nmod:poss(growth-6, South-2)
case(South-2, 's-3)
amod(growth-6, overall-4)
amod(growth-6, softwood-5)
nsubjpass(increased-15, growth-6)
case(feet-11, of-7)
compound(billion-9, 5.7-8)
nummod(feet-11, billion-9)
amod(feet-11, cubic-10)
nmod:of(growth-6, feet-11)
advmod(increased-15, annually-12)
aux(increased-15, could-13)
auxpass(increased-15, be-14)
ccomp(says-37, increased-15)
case(feet-20, by-16)
compound(billion-18, 2.1-17)
nummod(feet-20, billion-18)
amod(feet-20, cubic-19)
nmod:agent(increased-15, feet-20)
mark(planting-22, by-21)
advcl(increased-15, planting-22)
dobj(planting-22, pine-23)
case(acres-27, on-24)
compound(million-26, 22-25)
nummod(acres-27, million-26)
nmod:on(planting-22, acres-27)
case(land-31, of-28)
amod(land-31, marginal-29)
compound(land-31, crop-30)
nmod:of(acres-27, land-31)
cc(land-31, and-32)
nmod:of(acres-27, pasture-33)
conj:and(land-31, pasture-33)
punct(says-37, ,-34)
det(study-36, the-35)
nsubj(says-37, study-36)
root(ROOT-0, says-37)
punct(says-37, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#pine

plant :: At that level the department could permit farmers in the government program to plant on more land ./.
case(level-3, At-1)
det(level-3, that-2)
nmod:at(permit-7, level-3)
det(department-5, the-4)
nsubj(permit-7, department-5)
aux(permit-7, could-6)
root(ROOT-0, permit-7)
dobj(permit-7, farmers-8)
nsubj:xsubj(plant-14, farmers-8)
case(program-12, in-9)
det(program-12, the-10)
compound(program-12, government-11)
nmod:in(farmers-8, program-12)
mark(plant-14, to-13)
xcomp(permit-7, plant-14)
case(land-17, on-15)
amod(land-17, more-16)
nmod:on(plant-14, land-17)
punct(permit-7, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#farmers

plant :: The vandalism occurred Friday and was discovered Saturday when authorities at Manila Memorial Park cemetery received a telephone warning that a bomb had been planted in Aquino 's concrete tomb , a military official said ./.
det(vandalism-2, The-1)
nsubj(occurred-3, vandalism-2)
nsubjpass(discovered-7, vandalism-2)
root(ROOT-0, occurred-3)
nmod:tmod(occurred-3, Friday-4)
cc(occurred-3, and-5)
auxpass(discovered-7, was-6)
conj:and(occurred-3, discovered-7)
nmod:tmod(discovered-7, Saturday-8)
advmod(received-16, when-9)
nsubj(received-16, authorities-10)
case(cemetery-15, at-11)
compound(cemetery-15, Manila-12)
compound(cemetery-15, Memorial-13)
compound(cemetery-15, Park-14)
nmod:at(authorities-10, cemetery-15)
acl:relcl(Saturday-8, received-16)
det(warning-19, a-17)
compound(warning-19, telephone-18)
dobj(received-16, warning-19)
mark(planted-25, that-20)
det(bomb-22, a-21)
nsubjpass(planted-25, bomb-22)
aux(planted-25, had-23)
auxpass(planted-25, been-24)
ccomp(warning-19, planted-25)
case(tomb-30, in-26)
nmod:poss(tomb-30, Aquino-27)
case(Aquino-27, 's-28)
amod(tomb-30, concrete-29)
nmod:in(said-35, tomb-30)
punct(tomb-30, ,-31)
det(official-34, a-32)
amod(official-34, military-33)
nsubj(said-35, official-34)
ccomp(planted-25, said-35)
punct(occurred-3, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#bomb

plant :: The action began a few months ago when Fred Carr , First Executive 's chairman , moved to spruce up the lot by planting some grass ./.
det(action-2, The-1)
nsubj(began-3, action-2)
root(ROOT-0, began-3)
det(months-6, a-4)
amod(months-6, few-5)
nmod:npmod(ago-7, months-6)
advmod(began-3, ago-7)
advmod(moved-17, when-8)
compound(Carr-10, Fred-9)
nsubj(moved-17, Carr-10)
nsubj:xsubj(spruce-19, Carr-10)
punct(Carr-10, ,-11)
compound(Executive-13, First-12)
nmod:poss(chairman-15, Executive-13)
case(Executive-13, 's-14)
appos(Carr-10, chairman-15)
punct(Carr-10, ,-16)
advcl(began-3, moved-17)
mark(spruce-19, to-18)
xcomp(moved-17, spruce-19)
compound:prt(spruce-19, up-20)
det(lot-22, the-21)
dobj(spruce-19, lot-22)
mark(planting-24, by-23)
advcl(spruce-19, planting-24)
det(grass-26, some-25)
dobj(planting-24, grass-26)
punct(began-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#grass

plant :: They 've arranged 1 , 280 hotel and dormitory rooms for Dukakis workers , organized a bus system to get them to the convention , met the volunteers at the airport , distributed the blue-and-white signs that delegates wave to the cameras , and planted the trailers from which campaign managers are staging the convention that introduces the Massachusetts governor to the voters ./.
nsubj(arranged-3, They-1)
nsubj(distributed-33, They-1)
nsubj(planted-45, They-1)
aux(arranged-3, 've-2)
root(ROOT-0, arranged-3)
compound(rooms-10, 1-4)
punct(1-4, ,-5)
nummod(hotel-7, 280-6)
conj:and(1-4, hotel-7)
compound(rooms-10, hotel-7)
cc(1-4, and-8)
conj:and(1-4, dormitory-9)
compound(rooms-10, dormitory-9)
nsubj(met-26, rooms-10)
case(workers-13, for-11)
compound(workers-13, Dukakis-12)
nmod:for(rooms-10, workers-13)
punct(rooms-10, ,-14)
acl(rooms-10, organized-15)
det(system-18, a-16)
compound(system-18, bus-17)
dobj(organized-15, system-18)
mark(get-20, to-19)
advcl(organized-15, get-20)
dobj(get-20, them-21)
case(convention-24, to-22)
det(convention-24, the-23)
nmod:to(get-20, convention-24)
punct(rooms-10, ,-25)
ccomp(arranged-3, met-26)
det(volunteers-28, the-27)
dobj(met-26, volunteers-28)
case(airport-31, at-29)
det(airport-31, the-30)
nmod:at(met-26, airport-31)
punct(arranged-3, ,-32)
conj:and(arranged-3, distributed-33)
det(signs-36, the-34)
amod(signs-36, blue-and-white-35)
dobj(distributed-33, signs-36)
mark(wave-39, that-37)
nsubj(wave-39, delegates-38)
ccomp(signs-36, wave-39)
case(cameras-42, to-40)
det(cameras-42, the-41)
nmod:to(wave-39, cameras-42)
punct(arranged-3, ,-43)
cc(arranged-3, and-44)
conj:and(arranged-3, planted-45)
det(trailers-47, the-46)
dobj(planted-45, trailers-47)
nmod:from(staging-53, trailers-47)
case(which-49, from-48)
ref(trailers-47, which-49)
compound(managers-51, campaign-50)
nsubj(staging-53, managers-51)
aux(staging-53, are-52)
acl:relcl(trailers-47, staging-53)
det(convention-55, the-54)
dobj(staging-53, convention-55)
nsubj(introduces-57, convention-55)
ref(convention-55, that-56)
acl:relcl(convention-55, introduces-57)
det(governor-60, the-58)
compound(governor-60, Massachusetts-59)
dobj(introduces-57, governor-60)
case(voters-63, to-61)
det(voters-63, the-62)
nmod:to(introduces-57, voters-63)
punct(arranged-3, .-64)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#trailers

plant :: The crash was blamed on a bomb planted by Sikh terrorists ./.
det(crash-2, The-1)
nsubjpass(blamed-4, crash-2)
auxpass(blamed-4, was-3)
root(ROOT-0, blamed-4)
case(bomb-7, on-5)
det(bomb-7, a-6)
nmod:on(blamed-4, bomb-7)
acl(bomb-7, planted-8)
case(terrorists-11, by-9)
compound(terrorists-11, Sikh-10)
nmod:by(planted-8, terrorists-11)
punct(blamed-4, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#terrorists

plant :: That planted the seeds of discontent between Mr. Kirk and the Jackson forces ./.
nsubj(planted-2, That-1)
root(ROOT-0, planted-2)
det(seeds-4, the-3)
dobj(planted-2, seeds-4)
case(discontent-6, of-5)
nmod:of(seeds-4, discontent-6)
case(Kirk-9, between-7)
compound(Kirk-9, Mr.-8)
nmod:between(seeds-4, Kirk-9)
cc(Kirk-9, and-10)
det(forces-13, the-11)
compound(forces-13, Jackson-12)
nmod:between(seeds-4, forces-13)
conj:and(Kirk-9, forces-13)
punct(planted-2, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#seeds

plant :: Also , many farmers have planted soybeans amid their ruined wheat crop , possibly bolstering production ./.
advmod(planted-6, Also-1)
punct(planted-6, ,-2)
amod(farmers-4, many-3)
nsubj(planted-6, farmers-4)
aux(planted-6, have-5)
root(ROOT-0, planted-6)
dobj(planted-6, soybeans-7)
case(crop-12, amid-8)
nmod:poss(crop-12, their-9)
amod(crop-12, ruined-10)
compound(crop-12, wheat-11)
nmod:amid(planted-6, crop-12)
punct(planted-6, ,-13)
advmod(bolstering-15, possibly-14)
xcomp(planted-6, bolstering-15)
dobj(bolstering-15, production-16)
punct(planted-6, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#soybeans

plant :: Currently , if they do n't plant an allotted percentage of their so-called crop base with subsidized crops , the government penalizes them the next year by reducing the size of their base , thus cutting their subsidy payments ./.
advmod(penalizes-22, Currently-1)
punct(penalizes-22, ,-2)
mark(plant-7, if-3)
nsubj(plant-7, they-4)
aux(plant-7, do-5)
neg(plant-7, n't-6)
advcl(penalizes-22, plant-7)
det(percentage-10, an-8)
amod(percentage-10, allotted-9)
dobj(plant-7, percentage-10)
case(base-15, of-11)
nmod:poss(base-15, their-12)
amod(base-15, so-called-13)
compound(base-15, crop-14)
nmod:of(percentage-10, base-15)
case(crops-18, with-16)
amod(crops-18, subsidized-17)
nmod:with(base-15, crops-18)
punct(penalizes-22, ,-19)
det(government-21, the-20)
nsubj(penalizes-22, government-21)
root(ROOT-0, penalizes-22)
iobj(penalizes-22, them-23)
det(year-26, the-24)
amod(year-26, next-25)
dobj(penalizes-22, year-26)
mark(reducing-28, by-27)
advcl(penalizes-22, reducing-28)
det(size-30, the-29)
dobj(reducing-28, size-30)
case(base-33, of-31)
nmod:poss(base-33, their-32)
nmod:of(size-30, base-33)
punct(penalizes-22, ,-34)
advmod(cutting-36, thus-35)
xcomp(penalizes-22, cutting-36)
nmod:poss(payments-39, their-37)
compound(payments-39, subsidy-38)
dobj(cutting-36, payments-39)
punct(penalizes-22, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#base

plant :: He is projecting that the number of acres planted with corn could rise by about one-fifth and soybean acreage could increase by one-sixth ./.
nsubj(projecting-3, He-1)
aux(projecting-3, is-2)
csubj(increase-21, projecting-3)
mark(rise-13, that-4)
det(number-6, the-5)
nsubj(rise-13, number-6)
case(acres-8, of-7)
nmod:of(number-6, acres-8)
acl(acres-8, planted-9)
case(corn-11, with-10)
nmod:with(planted-9, corn-11)
aux(rise-13, could-12)
ccomp(projecting-3, rise-13)
case(acreage-19, by-14)
advmod(one-fifth-16, about-15)
amod(acreage-19, one-fifth-16)
cc(one-fifth-16, and-17)
conj:and(one-fifth-16, soybean-18)
amod(acreage-19, soybean-18)
nmod:by(rise-13, acreage-19)
aux(increase-21, could-20)
root(ROOT-0, increase-21)
case(one-sixth-23, by-22)
nmod:by(increase-21, one-sixth-23)
punct(increase-21, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#corn

plant :: Based on the number of acres planted in the spring , the Agriculture Department estimated earlier this year that a normal yield of 121 bushels an acre would generate a harvest of 7.3 billion bushels ./.
case(number-4, Based-1)
mwe(Based-1, on-2)
det(number-4, the-3)
advcl(estimated-15, number-4)
case(acres-6, of-5)
nmod:of(number-4, acres-6)
acl(acres-6, planted-7)
case(spring-10, in-8)
det(spring-10, the-9)
nmod:in(planted-7, spring-10)
punct(estimated-15, ,-11)
det(Department-14, the-12)
compound(Department-14, Agriculture-13)
nsubj(estimated-15, Department-14)
root(ROOT-0, estimated-15)
advmod(year-18, earlier-16)
det(year-18, this-17)
nmod:tmod(estimated-15, year-18)
mark(generate-29, that-19)
det(yield-22, a-20)
amod(yield-22, normal-21)
nsubj(generate-29, yield-22)
case(bushels-25, of-23)
nummod(bushels-25, 121-24)
nmod:of(yield-22, bushels-25)
det(acre-27, an-26)
nmod:npmod(bushels-25, acre-27)
aux(generate-29, would-28)
ccomp(estimated-15, generate-29)
det(harvest-31, a-30)
dobj(generate-29, harvest-31)
case(bushels-35, of-32)
compound(billion-34, 7.3-33)
nummod(bushels-35, billion-34)
nmod:of(harvest-31, bushels-35)
punct(estimated-15, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#spring

plant :: This week , analysts are also beginning to trim their production estimates of the wheat crop planted this spring in the Northern Plains states ./.
det(week-2, This-1)
nmod:tmod(beginning-7, week-2)
punct(beginning-7, ,-3)
nsubj(beginning-7, analysts-4)
nsubj:xsubj(trim-9, analysts-4)
aux(beginning-7, are-5)
advmod(beginning-7, also-6)
root(ROOT-0, beginning-7)
mark(trim-9, to-8)
xcomp(beginning-7, trim-9)
nmod:poss(estimates-12, their-10)
compound(estimates-12, production-11)
dobj(trim-9, estimates-12)
case(crop-16, of-13)
det(crop-16, the-14)
compound(crop-16, wheat-15)
nmod:of(estimates-12, crop-16)
acl(crop-16, planted-17)
det(spring-19, this-18)
nmod:tmod(planted-17, spring-19)
case(states-24, in-20)
det(states-24, the-21)
amod(states-24, Northern-22)
compound(states-24, Plains-23)
nmod:in(planted-17, states-24)
punct(beginning-7, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#spring

plant :: When a New York magazine confronted Wasserstein Perella with an as-yet-unpublished unflattering story about the new firm , Wasserstein Perella officials suspected First Boston of planting it ./.
advmod(confronted-6, When-1)
det(magazine-5, a-2)
compound(magazine-5, New-3)
compound(magazine-5, York-4)
nsubj(confronted-6, magazine-5)
advcl(suspected-22, confronted-6)
compound(Perella-8, Wasserstein-7)
dobj(confronted-6, Perella-8)
case(story-13, with-9)
det(story-13, an-10)
amod(story-13, as-yet-unpublished-11)
amod(story-13, unflattering-12)
nmod:with(confronted-6, story-13)
case(firm-17, about-14)
det(firm-17, the-15)
amod(firm-17, new-16)
nmod:about(story-13, firm-17)
punct(suspected-22, ,-18)
compound(officials-21, Wasserstein-19)
compound(officials-21, Perella-20)
nsubj(suspected-22, officials-21)
root(ROOT-0, suspected-22)
advmod(Boston-24, First-23)
dobj(suspected-22, Boston-24)
mark(planting-26, of-25)
acl(Boston-24, planting-26)
dobj(planting-26, it-27)
punct(suspected-22, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#it

plant :: The moshav did n't plant melons this winter , opting instead for crops such as cotton and wheat that can be harvested by machine ./.
det(moshav-2, The-1)
nsubj(plant-5, moshav-2)
aux(plant-5, did-3)
neg(plant-5, n't-4)
root(ROOT-0, plant-5)
dobj(plant-5, melons-6)
det(winter-8, this-7)
nmod:tmod(plant-5, winter-8)
punct(plant-5, ,-9)
advcl(plant-5, opting-10)
advmod(opting-10, instead-11)
case(crops-13, for-12)
nmod:for(opting-10, crops-13)
nsubjpass(harvested-22, crops-13)
case(cotton-16, such-14)
mwe(such-14, as-15)
nmod:such_as(crops-13, cotton-16)
cc(cotton-16, and-17)
nmod:such_as(crops-13, wheat-18)
conj:and(cotton-16, wheat-18)
ref(crops-13, that-19)
aux(harvested-22, can-20)
auxpass(harvested-22, be-21)
acl:relcl(crops-13, harvested-22)
case(machine-24, by-23)
nmod:agent(harvested-22, machine-24)
punct(plant-5, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#melons

plant :: The government wo n't estimate the condition of the recently planted corn and soybean crops until August ./.
det(government-2, The-1)
nsubj(estimate-5, government-2)
aux(estimate-5, wo-3)
neg(estimate-5, n't-4)
root(ROOT-0, estimate-5)
det(condition-7, the-6)
dobj(estimate-5, condition-7)
case(corn-12, of-8)
det(corn-12, the-9)
advmod(planted-11, recently-10)
amod(corn-12, planted-11)
nmod:of(condition-7, corn-12)
cc(corn-12, and-13)
compound(crops-15, soybean-14)
nmod:of(condition-7, crops-15)
conj:and(corn-12, crops-15)
case(August-17, until-16)
nmod:until(estimate-5, August-17)
punct(estimate-5, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#corn

plant :: The winter wheat crop , planted last fall , `` is deteriorating as it matures because of moisture deficiencies , '' said Mr. Schwensen ./.
det(crop-4, The-1)
compound(crop-4, winter-2)
compound(crop-4, wheat-3)
nsubj(deteriorating-12, crop-4)
punct(crop-4, ,-5)
acl(crop-4, planted-6)
amod(fall-8, last-7)
nmod:tmod(planted-6, fall-8)
punct(crop-4, ,-9)
punct(deteriorating-12, ``-10)
aux(deteriorating-12, is-11)
ccomp(said-22, deteriorating-12)
mark(matures-15, as-13)
nsubj(matures-15, it-14)
advcl(deteriorating-12, matures-15)
case(deficiencies-19, because-16)
mwe(because-16, of-17)
compound(deficiencies-19, moisture-18)
nmod:because_of(matures-15, deficiencies-19)
punct(said-22, ,-20)
punct(said-22, ''-21)
root(ROOT-0, said-22)
compound(Schwensen-24, Mr.-23)
nsubj(said-22, Schwensen-24)
punct(said-22, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#fall

plant :: One million of the acres were already in soil-saving grasses or trees when put into the reserve , and roughly a third of the cropland now idled was previously planted in crops that were not defined by the Agriculture Department as surplus -- meaning a dead loss for consumers and the U.S. economy ./.
nummod(million-2, One-1)
nsubj(grasses-10, million-2)
nsubj(meaning-44, million-2)
case(acres-5, of-3)
det(acres-5, the-4)
nmod:of(million-2, acres-5)
cop(grasses-10, were-6)
advmod(grasses-10, already-7)
case(grasses-10, in-8)
amod(grasses-10, soil-saving-9)
root(ROOT-0, grasses-10)
cc(grasses-10, or-11)
conj:or(grasses-10, trees-12)
advmod(put-14, when-13)
advcl(grasses-10, put-14)
case(reserve-17, into-15)
det(reserve-17, the-16)
nmod:into(put-14, reserve-17)
punct(grasses-10, ,-18)
cc(grasses-10, and-19)
advmod(third-22, roughly-20)
det(third-22, a-21)
nsubjpass(planted-30, third-22)
case(cropland-25, of-23)
det(cropland-25, the-24)
nmod:of(third-22, cropland-25)
advmod(idled-27, now-26)
acl(third-22, idled-27)
auxpass(planted-30, was-28)
advmod(planted-30, previously-29)
conj:and(grasses-10, planted-30)
case(crops-32, in-31)
nmod:in(planted-30, crops-32)
nsubjpass(defined-36, crops-32)
ref(crops-32, that-33)
auxpass(defined-36, were-34)
neg(defined-36, not-35)
acl:relcl(crops-32, defined-36)
case(Department-40, by-37)
det(Department-40, the-38)
compound(Department-40, Agriculture-39)
nmod:agent(defined-36, Department-40)
case(surplus-42, as-41)
nmod:as(defined-36, surplus-42)
punct(grasses-10, ---43)
conj:and(grasses-10, meaning-44)
det(loss-47, a-45)
amod(loss-47, dead-46)
dobj(meaning-44, loss-47)
case(consumers-49, for-48)
nmod:for(loss-47, consumers-49)
cc(consumers-49, and-50)
det(economy-53, the-51)
compound(economy-53, U.S.-52)
nmod:for(loss-47, economy-53)
conj:and(consumers-49, economy-53)
punct(grasses-10, .-54)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#third

plant :: The best way to reduce erosion is to lower price supports and target-prices that make it profitable for farmers to plant on marginal , highly erosive low-yielding ground ./.
det(way-3, The-1)
amod(way-3, best-2)
nsubj(is-7, way-3)
mark(reduce-5, to-4)
acl(way-3, reduce-5)
dobj(reduce-5, erosion-6)
root(ROOT-0, is-7)
case(supports-11, to-8)
amod(supports-11, lower-9)
compound(supports-11, price-10)
nmod:to(is-7, supports-11)
cc(supports-11, and-12)
nmod:to(is-7, target-prices-13)
conj:and(supports-11, target-prices-13)
nsubj(make-15, target-prices-13)
ref(target-prices-13, that-14)
acl:relcl(target-prices-13, make-15)
nsubj(profitable-17, it-16)
xcomp(make-15, profitable-17)
mark(plant-21, for-18)
nsubj(plant-21, farmers-19)
mark(plant-21, to-20)
advcl(profitable-17, plant-21)
case(ground-28, on-22)
amod(ground-28, marginal-23)
punct(ground-28, ,-24)
advmod(erosive-26, highly-25)
amod(ground-28, erosive-26)
amod(ground-28, low-yielding-27)
nmod:on(plant-21, ground-28)
punct(is-7, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#farmers

plant :: Many had believed that the heavier-than-expected weekend rains would dampen for at least several days a rally that has been based primarily on conjecture that the newly planted corn and soybean crops were too dry to start growing ./.
nsubj(believed-3, Many-1)
aux(believed-3, had-2)
root(ROOT-0, believed-3)
mark(dampen-10, that-4)
det(rains-8, the-5)
amod(rains-8, heavier-than-expected-6)
compound(rains-8, weekend-7)
nsubj(dampen-10, rains-8)
aux(dampen-10, would-9)
ccomp(believed-3, dampen-10)
case(days-15, for-11)
case(least-13, at-12)
nmod:npmod(several-14, least-13)
nummod(days-15, several-14)
nmod:for(dampen-10, days-15)
det(rally-17, a-16)
dep(days-15, rally-17)
nsubjpass(based-21, rally-17)
ref(rally-17, that-18)
aux(based-21, has-19)
auxpass(based-21, been-20)
acl:relcl(rally-17, based-21)
advmod(based-21, primarily-22)
case(conjecture-24, on-23)
nmod:on(based-21, conjecture-24)
mark(dry-35, that-25)
det(corn-29, the-26)
advmod(planted-28, newly-27)
amod(corn-29, planted-28)
nsubj(dry-35, corn-29)
nsubj:xsubj(start-37, corn-29)
cc(corn-29, and-30)
compound(crops-32, soybean-31)
conj:and(corn-29, crops-32)
nsubj(dry-35, crops-32)
nsubj:xsubj(start-37, crops-32)
cop(dry-35, were-33)
advmod(dry-35, too-34)
ccomp(conjecture-24, dry-35)
mark(start-37, to-36)
xcomp(dry-35, start-37)
xcomp(start-37, growing-38)
punct(believed-3, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#corn

plant :: Durum wheat farmers expect to plant 3.7 million acres , up 12 % from last year , while spring wheat plantings are expected to total 12.8 million acres , down 7 % ./.
compound(farmers-3, Durum-1)
compound(farmers-3, wheat-2)
nsubj(expect-4, farmers-3)
nsubj:xsubj(plant-6, farmers-3)
root(ROOT-0, expect-4)
mark(plant-6, to-5)
xcomp(expect-4, plant-6)
compound(million-8, 3.7-7)
nummod(acres-9, million-8)
dobj(plant-6, acres-9)
punct(acres-9, ,-10)
advmod(acres-9, up-11)
nummod(%-13, 12-12)
nmod:npmod(up-11, %-13)
case(year-16, from-14)
amod(year-16, last-15)
nmod:from(up-11, year-16)
punct(expect-4, ,-17)
mark(expected-23, while-18)
compound(plantings-21, spring-19)
compound(plantings-21, wheat-20)
nsubjpass(expected-23, plantings-21)
auxpass(expected-23, are-22)
advcl(expect-4, expected-23)
case(acres-28, to-24)
amod(acres-28, total-25)
compound(million-27, 12.8-26)
nummod(acres-28, million-27)
nmod:to(expected-23, acres-28)
punct(expected-23, ,-29)
advmod(expected-23, down-30)
nummod(%-32, 7-31)
nmod:npmod(down-30, %-32)
punct(expect-4, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#acres

plant :: Most analysts expect farmers to plant 66.7 million to 70 million acres , up from 65.7 million acres last year ./.
amod(analysts-2, Most-1)
nsubj(expect-3, analysts-2)
root(ROOT-0, expect-3)
dobj(expect-3, farmers-4)
nsubj:xsubj(plant-6, farmers-4)
mark(plant-6, to-5)
xcomp(expect-3, plant-6)
compound(million-8, 66.7-7)
dobj(plant-6, million-8)
case(acres-12, to-9)
compound(million-11, 70-10)
nummod(acres-12, million-11)
nmod:to(plant-6, acres-12)
punct(plant-6, ,-13)
advmod(plant-6, up-14)
case(acres-18, from-15)
compound(million-17, 65.7-16)
nummod(acres-18, million-17)
nmod:from(up-14, acres-18)
amod(year-20, last-19)
nmod:tmod(acres-18, year-20)
punct(expect-3, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#million

plant :: Spring potatoes have been planted on 81 , 900 acres , down 1 % from last year but up 6 % from two years ago ./.
compound(potatoes-2, Spring-1)
nsubjpass(planted-5, potatoes-2)
aux(planted-5, have-3)
auxpass(planted-5, been-4)
root(ROOT-0, planted-5)
case(81-7, on-6)
nmod:on(planted-5, 81-7)
punct(81-7, ,-8)
nummod(acres-10, 900-9)
appos(81-7, acres-10)
punct(81-7, ,-11)
advmod(but-18, down-12)
nummod(%-14, 1-13)
nmod:npmod(down-12, %-14)
case(year-17, from-15)
amod(year-17, last-16)
nmod:from(down-12, year-17)
advmod(81-7, but-18)
advmod(but-18, up-19)
nummod(%-21, 6-20)
nmod:npmod(up-19, %-21)
case(ago-25, from-22)
nummod(years-24, two-23)
nmod:npmod(ago-25, years-24)
advcl(up-19, ago-25)
punct(planted-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#potatoes

plant :: However , new-crop beans -- to be planted this spring -- were up on continued expectations that this year 's planted acreage wo n't exceed last year 's by much , analysts said ./.
advmod(expectations-16, However-1)
punct(expectations-16, ,-2)
compound(beans-4, new-crop-3)
nsubj(expectations-16, beans-4)
punct(planted-8, ---5)
mark(planted-8, to-6)
auxpass(planted-8, be-7)
dep(beans-4, planted-8)
det(spring-10, this-9)
nmod:tmod(planted-8, spring-10)
punct(planted-8, ---11)
cop(expectations-16, were-12)
advmod(expectations-16, up-13)
case(expectations-16, on-14)
amod(expectations-16, continued-15)
ccomp(said-33, expectations-16)
mark(exceed-25, that-17)
det(year-19, this-18)
nmod:poss(acreage-22, year-19)
case(year-19, 's-20)
amod(acreage-22, planted-21)
nsubj(exceed-25, acreage-22)
aux(exceed-25, wo-23)
neg(exceed-25, n't-24)
ccomp(expectations-16, exceed-25)
amod(year-27, last-26)
dobj(exceed-25, year-27)
case(year-27, 's-28)
case(much-30, by-29)
nmod:by(year-27, much-30)
punct(said-33, ,-31)
nsubj(said-33, analysts-32)
root(ROOT-0, said-33)
punct(said-33, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#acreage

plant :: Next to it the firm planted a sign: `` Little things like this will never come between us . ''/''
case(it-3, Next-1)
mwe(Next-1, to-2)
nmod:next_to(planted-6, it-3)
det(firm-5, the-4)
nsubj(planted-6, firm-5)
root(ROOT-0, planted-6)
det(sign-8, a-7)
dobj(planted-6, sign-8)
punct(sign-8, :-9)
punct(sign-8, ``-10)
amod(things-12, Little-11)
nsubj(come-17, things-12)
case(this-14, like-13)
nmod:like(things-12, this-14)
aux(come-17, will-15)
neg(come-17, never-16)
ccomp(sign-8, come-17)
case(us-19, between-18)
nmod:between(come-17, us-19)
punct(planted-6, .-20)
punct(planted-6, ''-21)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: plant#sign

plant :: `` Brazil is planting on about half of the land they can plant on ./.
root(ROOT-0, ``-1)
nsubj(planting-4, Brazil-2)
aux(planting-4, is-3)
root(``-1, planting-4)
case(half-7, on-5)
advmod(half-7, about-6)
nmod:on(planting-4, half-7)
case(land-10, of-8)
det(land-10, the-9)
nmod:of(half-7, land-10)
nsubj(plant-13, they-11)
aux(plant-13, can-12)
acl:relcl(land-10, plant-13)
nmod(plant-13, on-14)
punct(planting-4, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#brazil

plant :: `` The new irrigation tunnel has allowed us to plant 6 , 000 willow trees and 600 apple trees and to earn money for the education of our children , '' she says , tears welling in her eyes ./.
punct(says-33, ``-1)
det(tunnel-5, The-2)
amod(tunnel-5, new-3)
compound(tunnel-5, irrigation-4)
nsubj(allowed-7, tunnel-5)
aux(allowed-7, has-6)
ccomp(says-33, allowed-7)
dobj(allowed-7, us-8)
nsubj:xsubj(plant-10, us-8)
nsubj:xsubj(earn-22, us-8)
mark(plant-10, to-9)
xcomp(allowed-7, plant-10)
nummod(trees-19, 6-11)
punct(6-11, ,-12)
nummod(trees-15, 000-13)
compound(trees-15, willow-14)
conj:and(6-11, trees-15)
nummod(trees-19, trees-15)
cc(6-11, and-16)
conj:and(6-11, 600-17)
nummod(trees-19, 600-17)
compound(trees-19, apple-18)
dobj(plant-10, trees-19)
cc(plant-10, and-20)
mark(earn-22, to-21)
xcomp(allowed-7, earn-22)
conj:and(plant-10, earn-22)
dobj(earn-22, money-23)
case(education-26, for-24)
det(education-26, the-25)
nmod:for(earn-22, education-26)
case(children-29, of-27)
nmod:poss(children-29, our-28)
nmod:of(education-26, children-29)
punct(says-33, ,-30)
punct(says-33, ''-31)
nsubj(says-33, she-32)
root(ROOT-0, says-33)
punct(says-33, ,-34)
nsubj(says-33, tears-35)
acl(tears-35, welling-36)
case(eyes-39, in-37)
nmod:poss(eyes-39, her-38)
nmod:in(welling-36, eyes-39)
punct(says-33, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#trees

plant :: Many farmers reduced wheat planting under a government program that requires them to idle 27.5 % of their acreage to qualify for price-support subsidies , said Ewen Wilson , assistant agriculture secretary for economics ./.
amod(farmers-2, Many-1)
nsubj(reduced-3, farmers-2)
ccomp(said-26, reduced-3)
compound(planting-5, wheat-4)
dobj(reduced-3, planting-5)
case(program-9, under-6)
det(program-9, a-7)
compound(program-9, government-8)
nmod:under(reduced-3, program-9)
nsubj(requires-11, program-9)
ref(program-9, that-10)
acl:relcl(program-9, requires-11)
dobj(requires-11, them-12)
case(%-16, to-13)
amod(%-16, idle-14)
nummod(%-16, 27.5-15)
nmod:to(requires-11, %-16)
case(acreage-19, of-17)
nmod:poss(acreage-19, their-18)
nmod:of(%-16, acreage-19)
mark(qualify-21, to-20)
advcl(requires-11, qualify-21)
case(subsidies-24, for-22)
amod(subsidies-24, price-support-23)
nmod:for(qualify-21, subsidies-24)
punct(said-26, ,-25)
root(ROOT-0, said-26)
compound(Wilson-28, Ewen-27)
nsubj(said-26, Wilson-28)
punct(Wilson-28, ,-29)
amod(secretary-32, assistant-30)
compound(secretary-32, agriculture-31)
appos(Wilson-28, secretary-32)
case(economics-34, for-33)
nmod:for(secretary-32, economics-34)
punct(said-26, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

plant :: There 's the tree planted in his honor at Freedoms Foundation in Valley Forge , Pa ./.
expl('s-2, There-1)
root(ROOT-0, 's-2)
det(tree-4, the-3)
nsubj('s-2, tree-4)
acl(tree-4, planted-5)
case(honor-8, in-6)
nmod:poss(honor-8, his-7)
nmod:in(planted-5, honor-8)
case(Foundation-11, at-9)
compound(Foundation-11, Freedoms-10)
nmod:at(planted-5, Foundation-11)
case(Forge-14, in-12)
compound(Forge-14, Valley-13)
nmod:in(Foundation-11, Forge-14)
punct(Forge-14, ,-15)
appos(Forge-14, Pa-16)
punct('s-2, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#honor

plant :: The Agriculture Department is scheduled to report Thursday on farmers ' spring planting intentions ./.
det(Department-3, The-1)
compound(Department-3, Agriculture-2)
nsubjpass(scheduled-5, Department-3)
nsubj:xsubj(report-7, Department-3)
auxpass(scheduled-5, is-4)
root(ROOT-0, scheduled-5)
mark(report-7, to-6)
xcomp(scheduled-5, report-7)
nmod:tmod(report-7, Thursday-8)
case(intentions-14, on-9)
nmod:poss(intentions-14, farmers-10)
case(farmers-10, '-11)
compound(intentions-14, spring-12)
compound(intentions-14, planting-13)
nmod:on(report-7, intentions-14)
punct(scheduled-5, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

plant :: On Friday , an analyst at another major commodity firm said he expects no more than 60 million acres to be planted to soybeans ./.
case(Friday-2, On-1)
nmod:on(said-11, Friday-2)
punct(said-11, ,-3)
det(analyst-5, an-4)
nsubj(said-11, analyst-5)
case(firm-10, at-6)
det(firm-10, another-7)
amod(firm-10, major-8)
compound(firm-10, commodity-9)
nmod:at(analyst-5, firm-10)
root(ROOT-0, said-11)
nsubj(expects-13, he-12)
ccomp(said-11, expects-13)
advmod(million-18, no-14)
advmod(million-18, more-15)
mwe(more-15, than-16)
compound(million-18, 60-17)
nummod(acres-19, million-18)
dobj(expects-13, acres-19)
nsubjpass:xsubj(planted-22, acres-19)
mark(planted-22, to-20)
auxpass(planted-22, be-21)
xcomp(expects-13, planted-22)
case(soybeans-24, to-23)
nmod:to(planted-22, soybeans-24)
punct(said-11, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#be

plant :: The first jury , which included two Japanese , quickly tossed out a statue of a French flag topped by the red ball from the Japanese flag , a statue of the bottom part of a man 's head with a bunch of ladders sticking out the top , a mammoth mechanical lotus flower , scores of giant TV screens , and dozens of assorted towers , including one with gardens planted in a spiral up the middle ./.
det(jury-3, The-1)
amod(jury-3, first-2)
nsubj(included-6, jury-3)
nsubj(tossed-11, jury-3)
punct(jury-3, ,-4)
ref(jury-3, which-5)
acl:relcl(jury-3, included-6)
nummod(Japanese-8, two-7)
dobj(included-6, Japanese-8)
punct(jury-3, ,-9)
advmod(tossed-11, quickly-10)
root(ROOT-0, tossed-11)
compound:prt(tossed-11, out-12)
det(statue-14, a-13)
dobj(tossed-11, statue-14)
case(flag-18, of-15)
det(flag-18, a-16)
amod(flag-18, French-17)
nmod:of(statue-14, flag-18)
acl(flag-18, topped-19)
case(ball-23, by-20)
det(ball-23, the-21)
amod(ball-23, red-22)
nmod:by(topped-19, ball-23)
case(flag-27, from-24)
det(flag-27, the-25)
amod(flag-27, Japanese-26)
nmod:from(topped-19, flag-27)
punct(flag-18, ,-28)
det(statue-30, a-29)
appos(flag-18, statue-30)
case(part-34, of-31)
det(part-34, the-32)
amod(part-34, bottom-33)
nmod:of(statue-30, part-34)
case(head-39, of-35)
det(man-37, a-36)
nmod:poss(head-39, man-37)
case(man-37, 's-38)
nmod:of(part-34, head-39)
case(bunch-42, with-40)
det(bunch-42, a-41)
nmod:with(statue-30, bunch-42)
case(ladders-44, of-43)
nmod:of(bunch-42, ladders-44)
acl(ladders-44, sticking-45)
compound:prt(sticking-45, out-46)
det(top-48, the-47)
dobj(sticking-45, top-48)
punct(top-48, ,-49)
det(flower-54, a-50)
amod(flower-54, mammoth-51)
amod(flower-54, mechanical-52)
compound(flower-54, lotus-53)
appos(top-48, flower-54)
punct(top-48, ,-55)
dobj(sticking-45, scores-56)
conj:and(top-48, scores-56)
case(screens-60, of-57)
amod(screens-60, giant-58)
compound(screens-60, TV-59)
nmod:of(scores-56, screens-60)
punct(top-48, ,-61)
cc(top-48, and-62)
dobj(sticking-45, dozens-63)
conj:and(top-48, dozens-63)
case(towers-66, of-64)
amod(towers-66, assorted-65)
nmod:of(dozens-63, towers-66)
punct(flag-18, ,-67)
case(one-69, including-68)
nmod:including(flag-18, one-69)
case(gardens-71, with-70)
nmod:with(one-69, gardens-71)
acl(gardens-71, planted-72)
case(spiral-75, in-73)
det(spiral-75, a-74)
nmod:in(planted-72, spiral-75)
case(middle-78, up-76)
det(middle-78, the-77)
nmod:up(spiral-75, middle-78)
punct(tossed-11, .-79)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#spiral

plant :: However , new-crop beans -- to be planted this spring -- were up on continued expectations that this year 's planted acreage wo n't exceed last year 's by much , analysts said ./.
advmod(expectations-16, However-1)
punct(expectations-16, ,-2)
compound(beans-4, new-crop-3)
nsubj(expectations-16, beans-4)
punct(planted-8, ---5)
mark(planted-8, to-6)
auxpass(planted-8, be-7)
dep(beans-4, planted-8)
det(spring-10, this-9)
nmod:tmod(planted-8, spring-10)
punct(planted-8, ---11)
cop(expectations-16, were-12)
advmod(expectations-16, up-13)
case(expectations-16, on-14)
amod(expectations-16, continued-15)
ccomp(said-33, expectations-16)
mark(exceed-25, that-17)
det(year-19, this-18)
nmod:poss(acreage-22, year-19)
case(year-19, 's-20)
amod(acreage-22, planted-21)
nsubj(exceed-25, acreage-22)
aux(exceed-25, wo-23)
neg(exceed-25, n't-24)
ccomp(expectations-16, exceed-25)
amod(year-27, last-26)
dobj(exceed-25, year-27)
case(year-27, 's-28)
case(much-30, by-29)
nmod:by(year-27, much-30)
punct(said-33, ,-31)
nsubj(said-33, analysts-32)
root(ROOT-0, said-33)
punct(said-33, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#acreage

plant :: Next to it the firm planted a sign: `` Little things like this will never come between us . ''/''
case(it-3, Next-1)
mwe(Next-1, to-2)
nmod:next_to(planted-6, it-3)
det(firm-5, the-4)
nsubj(planted-6, firm-5)
root(ROOT-0, planted-6)
det(sign-8, a-7)
dobj(planted-6, sign-8)
punct(sign-8, :-9)
punct(sign-8, ``-10)
amod(things-12, Little-11)
nsubj(come-17, things-12)
case(this-14, like-13)
nmod:like(things-12, this-14)
aux(come-17, will-15)
neg(come-17, never-16)
ccomp(sign-8, come-17)
case(us-19, between-18)
nmod:between(come-17, us-19)
punct(planted-6, .-20)
punct(planted-6, ''-21)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: plant#sign

plant :: Administration officials said data collected by the U.S . , Japan , and Bahrain has confirmed South Korean charges that two North Korean agents planted a bomb that killed 115 people aboard a KAL jet last November ./.
compound(officials-2, Administration-1)
nsubj(said-3, officials-2)
root(ROOT-0, said-3)
dobj(said-3, data-4)
acl(data-4, collected-5)
case(U.S-8, by-6)
det(U.S-8, the-7)
nmod:by(collected-5, U.S-8)
punct(said-3, .-9)
punct(confirmed-7, ,-1)
conj:and(confirmed-7, Japan-2)
punct(confirmed-7, ,-3)
cc(confirmed-7, and-4)
nsubj(confirmed-7, Bahrain-5)
aux(confirmed-7, has-6)
root(ROOT-0, confirmed-7)
amod(Korean-9, South-8)
amod(charges-10, Korean-9)
dobj(confirmed-7, charges-10)
mark(planted-16, that-11)
nummod(agents-15, two-12)
amod(Korean-14, North-13)
amod(agents-15, Korean-14)
nsubj(planted-16, agents-15)
ccomp(charges-10, planted-16)
det(bomb-18, a-17)
dobj(planted-16, bomb-18)
nsubj(killed-20, bomb-18)
ref(bomb-18, that-19)
acl:relcl(bomb-18, killed-20)
nummod(people-22, 115-21)
dobj(killed-20, people-22)
case(jet-26, aboard-23)
det(jet-26, a-24)
compound(jet-26, KAL-25)
nmod:aboard(killed-20, jet-26)
amod(November-28, last-27)
nmod:tmod(jet-26, November-28)
punct(confirmed-7, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#bomb

plant :: Mr. Shamir spent Tu Bishvat planting a tree at a Jewish settlement on the occupied West Bank , where he said he expected the settlement movement to grow and flourish ./.
compound(Shamir-2, Mr.-1)
nsubj(spent-3, Shamir-2)
root(ROOT-0, spent-3)
compound(Bishvat-5, Tu-4)
nsubj(planting-6, Bishvat-5)
dep(spent-3, planting-6)
det(tree-8, a-7)
dobj(planting-6, tree-8)
case(settlement-12, at-9)
det(settlement-12, a-10)
amod(settlement-12, Jewish-11)
nmod:at(planting-6, settlement-12)
case(Bank-17, on-13)
det(Bank-17, the-14)
amod(Bank-17, occupied-15)
compound(Bank-17, West-16)
nmod:on(settlement-12, Bank-17)
punct(Bank-17, ,-18)
advmod(said-21, where-19)
nsubj(said-21, he-20)
acl:relcl(Bank-17, said-21)
nsubj(expected-23, he-22)
ccomp(said-21, expected-23)
det(movement-26, the-24)
compound(movement-26, settlement-25)
dobj(expected-23, movement-26)
nsubj:xsubj(grow-28, movement-26)
mark(grow-28, to-27)
xcomp(expected-23, grow-28)
cc(grow-28, and-29)
xcomp(expected-23, flourish-30)
conj:and(grow-28, flourish-30)
punct(spent-3, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#tree

plant :: `` The new irrigation tunnel has allowed us to plant 6 , 000 willow trees and 600 apple trees and to earn money for the education of our children , '' she says , tears welling in her eyes ./.
punct(says-33, ``-1)
det(tunnel-5, The-2)
amod(tunnel-5, new-3)
compound(tunnel-5, irrigation-4)
nsubj(allowed-7, tunnel-5)
aux(allowed-7, has-6)
ccomp(says-33, allowed-7)
dobj(allowed-7, us-8)
nsubj:xsubj(plant-10, us-8)
nsubj:xsubj(earn-22, us-8)
mark(plant-10, to-9)
xcomp(allowed-7, plant-10)
nummod(trees-19, 6-11)
punct(6-11, ,-12)
nummod(trees-15, 000-13)
compound(trees-15, willow-14)
conj:and(6-11, trees-15)
nummod(trees-19, trees-15)
cc(6-11, and-16)
conj:and(6-11, 600-17)
nummod(trees-19, 600-17)
compound(trees-19, apple-18)
dobj(plant-10, trees-19)
cc(plant-10, and-20)
mark(earn-22, to-21)
xcomp(allowed-7, earn-22)
conj:and(plant-10, earn-22)
dobj(earn-22, money-23)
case(education-26, for-24)
det(education-26, the-25)
nmod:for(earn-22, education-26)
case(children-29, of-27)
nmod:poss(children-29, our-28)
nmod:of(education-26, children-29)
punct(says-33, ,-30)
punct(says-33, ''-31)
nsubj(says-33, she-32)
root(ROOT-0, says-33)
punct(says-33, ,-34)
nsubj(says-33, tears-35)
acl(tears-35, welling-36)
case(eyes-39, in-37)
nmod:poss(eyes-39, her-38)
nmod:in(welling-36, eyes-39)
punct(says-33, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#trees

plant :: They sell their fruit , save the money , and borrow against it to plant more trees ./.
nsubj(sell-2, They-1)
nsubj(save-6, They-1)
nsubj(borrow-11, They-1)
nsubj:xsubj(plant-15, They-1)
root(ROOT-0, sell-2)
nmod:poss(fruit-4, their-3)
dobj(sell-2, fruit-4)
punct(sell-2, ,-5)
conj:and(sell-2, save-6)
det(money-8, the-7)
dobj(save-6, money-8)
punct(sell-2, ,-9)
cc(sell-2, and-10)
conj:and(sell-2, borrow-11)
case(it-13, against-12)
nmod:against(borrow-11, it-13)
mark(plant-15, to-14)
xcomp(borrow-11, plant-15)
amod(trees-17, more-16)
dobj(plant-15, trees-17)
punct(sell-2, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#trees

plant :: The State Department cited `` compelling '' evidence of North Korean complicity after a confessed North Korean agent said on South Korean television that she planted the bombs ./.
det(Department-3, The-1)
compound(Department-3, State-2)
nsubj(cited-4, Department-3)
root(ROOT-0, cited-4)
punct(evidence-8, ``-5)
amod(evidence-8, compelling-6)
punct(evidence-8, ''-7)
dobj(cited-4, evidence-8)
case(complicity-12, of-9)
amod(Korean-11, North-10)
amod(complicity-12, Korean-11)
nmod:of(evidence-8, complicity-12)
mark(said-19, after-13)
det(agent-18, a-14)
amod(agent-18, confessed-15)
amod(agent-18, North-16)
amod(agent-18, Korean-17)
nsubj(said-19, agent-18)
acl(evidence-8, said-19)
case(television-23, on-20)
amod(Korean-22, South-21)
amod(television-23, Korean-22)
nmod:on(said-19, television-23)
mark(planted-26, that-24)
nsubj(planted-26, she-25)
ccomp(said-19, planted-26)
det(bombs-28, the-27)
dobj(planted-26, bombs-28)
punct(cited-4, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#bombs

plant :: Farmers in Kansas , the No. 1 wheat-producing state , planted 10.2 million acres , the smallest since 1971 ./.
nsubj(planted-11, Farmers-1)
case(Kansas-3, in-2)
nmod:in(Farmers-1, Kansas-3)
punct(Kansas-3, ,-4)
det(state-9, the-5)
compound(state-9, No.-6)
nummod(state-9, 1-7)
amod(state-9, wheat-producing-8)
appos(Kansas-3, state-9)
punct(Kansas-3, ,-10)
root(ROOT-0, planted-11)
compound(million-13, 10.2-12)
nummod(acres-14, million-13)
dobj(planted-11, acres-14)
punct(planted-11, ,-15)
det(smallest-17, the-16)
nmod:npmod(planted-11, smallest-17)
case(1971-19, since-18)
nmod:since(smallest-17, 1971-19)
punct(planted-11, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#acres

plant :: Prices were also elevated by speculation that frigid high winds in the Midwest could erode topsoil and expose the soft red winter wheat crop planted last fall , said Daniel Basse , an analyst at GNP Commodities Inc . , Chicago ./.
nsubj(elevated-4, Prices-1)
aux(elevated-4, were-2)
advmod(elevated-4, also-3)
ccomp(said-29, elevated-4)
case(speculation-6, by-5)
nmod:by(elevated-4, speculation-6)
mark(erode-15, that-7)
amod(winds-10, frigid-8)
amod(winds-10, high-9)
nsubj(erode-15, winds-10)
nsubj(expose-18, winds-10)
case(Midwest-13, in-11)
det(Midwest-13, the-12)
nmod:in(winds-10, Midwest-13)
aux(erode-15, could-14)
ccomp(speculation-6, erode-15)
dobj(erode-15, topsoil-16)
cc(erode-15, and-17)
ccomp(speculation-6, expose-18)
conj:and(erode-15, expose-18)
det(crop-24, the-19)
amod(crop-24, soft-20)
amod(crop-24, red-21)
compound(crop-24, winter-22)
compound(crop-24, wheat-23)
dobj(expose-18, crop-24)
acl(crop-24, planted-25)
amod(fall-27, last-26)
nmod:tmod(planted-25, fall-27)
punct(said-29, ,-28)
root(ROOT-0, said-29)
compound(Basse-31, Daniel-30)
nsubj(said-29, Basse-31)
punct(Basse-31, ,-32)
det(analyst-34, an-33)
appos(Basse-31, analyst-34)
case(Inc-38, at-35)
compound(Inc-38, GNP-36)
compound(Inc-38, Commodities-37)
nmod:at(analyst-34, Inc-38)
punct(said-29, .-39)
punct(Chicago-2, ,-1)
root(ROOT-0, Chicago-2)
punct(Chicago-2, .-3)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#fall

plant :: There was no claim of responsibility , but officials suspect the bomb was planted by ethnic Karen separatists ./.
expl(was-2, There-1)
root(ROOT-0, was-2)
neg(claim-4, no-3)
nsubj(was-2, claim-4)
case(responsibility-6, of-5)
nmod:of(claim-4, responsibility-6)
punct(was-2, ,-7)
cc(was-2, but-8)
nsubj(suspect-10, officials-9)
conj:but(was-2, suspect-10)
det(bomb-12, the-11)
nsubjpass(planted-14, bomb-12)
auxpass(planted-14, was-13)
ccomp(suspect-10, planted-14)
case(separatists-18, by-15)
amod(separatists-18, ethnic-16)
compound(separatists-18, Karen-17)
nmod:agent(planted-14, separatists-18)
punct(was-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#bomb

plant :: You have to plant it when it 's small , and wait for it to grow. '/''
nsubj(have-2, You-1)
nsubj:xsubj(plant-4, You-1)
nsubj(wait-12, You-1)
root(ROOT-0, have-2)
mark(plant-4, to-3)
xcomp(have-2, plant-4)
dobj(plant-4, it-5)
advmod(small-9, when-6)
nsubj(small-9, it-7)
cop(small-9, 's-8)
advcl(have-2, small-9)
punct(have-2, ,-10)
cc(have-2, and-11)
conj:and(have-2, wait-12)
mark(grow-16, for-13)
nsubj(grow-16, it-14)
mark(grow-16, to-15)
advcl(wait-12, grow-16)
punct(have-2, .-17)
punct(have-2, '-18)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: plant#it

plant :: Ms. Long clearly relishes the hands-on work of running a winery and overseeing the evolution of a vineyard planted to her specifications ./.
compound(Long-2, Ms.-1)
nsubj(relishes-4, Long-2)
advmod(relishes-4, clearly-3)
root(ROOT-0, relishes-4)
det(work-7, the-5)
amod(work-7, hands-on-6)
dobj(relishes-4, work-7)
mark(running-9, of-8)
acl(work-7, running-9)
det(winery-11, a-10)
dobj(running-9, winery-11)
cc(running-9, and-12)
acl(work-7, overseeing-13)
conj:and(running-9, overseeing-13)
det(evolution-15, the-14)
dobj(overseeing-13, evolution-15)
case(vineyard-18, of-16)
det(vineyard-18, a-17)
nmod:of(evolution-15, vineyard-18)
acl(vineyard-18, planted-19)
case(specifications-22, to-20)
nmod:poss(specifications-22, her-21)
nmod:to(planted-19, specifications-22)
punct(relishes-4, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#specifications

plant :: It will promote inefficiency -LRB- some trees will continue to be planted on marginal land or land not suited for certain species -RRB- , stifle innovation -LRB- with the safety net in place there will be less incentive to try different cultural practices -RRB- and distort the market -LRB- surpluses will become greater -RRB- ./.
nsubj(promote-3, It-1)
nsubj(distort-46, It-1)
aux(promote-3, will-2)
root(ROOT-0, promote-3)
dobj(promote-3, inefficiency-4)
punct(continue-9, -LRB--5)
det(trees-7, some-6)
nsubj(continue-9, trees-7)
nsubjpass:xsubj(planted-12, trees-7)
aux(continue-9, will-8)
dep(inefficiency-4, continue-9)
mark(planted-12, to-10)
auxpass(planted-12, be-11)
xcomp(continue-9, planted-12)
case(land-15, on-13)
amod(land-15, marginal-14)
nmod:on(planted-12, land-15)
cc(land-15, or-16)
nmod:on(planted-12, land-17)
conj:or(land-15, land-17)
neg(suited-19, not-18)
acl(land-15, suited-19)
case(species-22, for-20)
amod(species-22, certain-21)
nmod:for(suited-19, species-22)
punct(continue-9, -RRB--23)
punct(promote-3, ,-24)
dep(promote-3, stifle-25)
dobj(stifle-25, innovation-26)
punct(stifle-25, -LRB--27)
case(net-31, with-28)
det(net-31, the-29)
compound(net-31, safety-30)
nmod:with(stifle-25, net-31)
case(place-33, in-32)
nmod:in(net-31, place-33)
expl(incentive-38, there-34)
aux(incentive-38, will-35)
cop(incentive-38, be-36)
amod(incentive-38, less-37)
dep(stifle-25, incentive-38)
mark(try-40, to-39)
acl(incentive-38, try-40)
amod(practices-43, different-41)
amod(practices-43, cultural-42)
dobj(try-40, practices-43)
punct(promote-3, -RRB--44)
cc(promote-3, and-45)
conj:and(promote-3, distort-46)
det(market-48, the-47)
dobj(distort-46, market-48)
punct(become-52, -LRB--49)
nsubj(become-52, surpluses-50)
aux(become-52, will-51)
parataxis(distort-46, become-52)
xcomp(become-52, greater-53)
punct(become-52, -RRB--54)
punct(promote-3, .-55)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#be

plant :: Among other steps such as planting chokecherries to restore riparian habitat and carrying out water projects to protect the preserve 's wetlands , the managers of this privately owned preserve create fires ./.
case(steps-3, Among-1)
amod(steps-3, other-2)
nmod:among(create-31, steps-3)
mark(planting-6, such-4)
mwe(such-4, as-5)
acl(steps-3, planting-6)
dobj(planting-6, chokecherries-7)
mark(restore-9, to-8)
advcl(planting-6, restore-9)
amod(habitat-11, riparian-10)
dobj(restore-9, habitat-11)
cc(restore-9, and-12)
advcl(planting-6, carrying-13)
conj:and(restore-9, carrying-13)
compound:prt(carrying-13, out-14)
compound(projects-16, water-15)
dobj(carrying-13, projects-16)
mark(protect-18, to-17)
advcl(carrying-13, protect-18)
det(preserve-20, the-19)
nmod:poss(wetlands-22, preserve-20)
case(preserve-20, 's-21)
dobj(protect-18, wetlands-22)
punct(create-31, ,-23)
det(managers-25, the-24)
nsubj(create-31, managers-25)
case(preserve-30, of-26)
det(preserve-30, this-27)
advmod(owned-29, privately-28)
amod(preserve-30, owned-29)
nmod:of(managers-25, preserve-30)
root(ROOT-0, create-31)
dobj(create-31, fires-32)
punct(create-31, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#chokecherries

plant :: But the closer to plant capacity the economy is operating , the faster low unemployment pushes up costs and prices ./.
cc(pushes-16, But-1)
det(closer-3, the-2)
dep(pushes-16, closer-3)
mark(plant-5, to-4)
acl(closer-3, plant-5)
dobj(plant-5, capacity-6)
det(economy-8, the-7)
nsubj(operating-10, economy-8)
aux(operating-10, is-9)
acl:relcl(capacity-6, operating-10)
punct(pushes-16, ,-11)
det(unemployment-15, the-12)
advmod(low-14, faster-13)
amod(unemployment-15, low-14)
nsubj(pushes-16, unemployment-15)
root(ROOT-0, pushes-16)
compound:prt(pushes-16, up-17)
dobj(pushes-16, costs-18)
cc(costs-18, and-19)
dobj(pushes-16, prices-20)
conj:and(costs-18, prices-20)
punct(pushes-16, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#capacity

plant :: Just as the American romance with the English garden has come to full bloom and Americans finally are pronouncing Jekyll properly -- Jeekill -- we get reliable intimations of an infinitely droughty future and must begin planting against the imminent desertification of our Anglo-style gardens ./.
advmod(romance-5, Just-1)
case(romance-5, as-2)
det(romance-5, the-3)
amod(romance-5, American-4)
nmod:as(come-11, romance-5)
case(garden-9, with-6)
det(garden-9, the-7)
compound(garden-9, English-8)
nmod:with(romance-5, garden-9)
aux(come-11, has-10)
root(ROOT-0, come-11)
case(bloom-14, to-12)
amod(bloom-14, full-13)
nmod:to(come-11, bloom-14)
cc(bloom-14, and-15)
nmod:to(come-11, Americans-16)
conj:and(bloom-14, Americans-16)
advmod(pronouncing-19, finally-17)
aux(pronouncing-19, are-18)
xcomp(come-11, pronouncing-19)
dobj(pronouncing-19, Jekyll-20)
advmod(get-26, properly-21)
punct(Jeekill-23, ---22)
dep(properly-21, Jeekill-23)
punct(Jeekill-23, ---24)
nsubj(get-26, we-25)
nsubj(begin-36, we-25)
acl:relcl(Jekyll-20, get-26)
amod(intimations-28, reliable-27)
dobj(get-26, intimations-28)
case(future-33, of-29)
det(future-33, an-30)
advmod(droughty-32, infinitely-31)
amod(future-33, droughty-32)
nmod:of(intimations-28, future-33)
cc(get-26, and-34)
aux(begin-36, must-35)
acl:relcl(Jekyll-20, begin-36)
conj:and(get-26, begin-36)
xcomp(begin-36, planting-37)
case(desertification-41, against-38)
det(desertification-41, the-39)
amod(desertification-41, imminent-40)
nmod:against(planting-37, desertification-41)
case(gardens-45, of-42)
nmod:poss(gardens-45, our-43)
amod(gardens-45, Anglo-style-44)
nmod:of(desertification-41, gardens-45)
punct(come-11, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#desertification

plant :: Russians planted the first trees in 1805 near the eastern Aleutian village of Unalaska ; a few survive and enjoy National Historic Landmark status ./.
nsubj(planted-2, Russians-1)
root(ROOT-0, planted-2)
det(trees-5, the-3)
amod(trees-5, first-4)
dobj(planted-2, trees-5)
case(1805-7, in-6)
nmod:in(planted-2, 1805-7)
case(village-12, near-8)
det(village-12, the-9)
compound(village-12, eastern-10)
compound(village-12, Aleutian-11)
nmod:near(1805-7, village-12)
case(Unalaska-14, of-13)
nmod:of(village-12, Unalaska-14)
punct(planted-2, ;-15)
det(survive-18, a-16)
amod(survive-18, few-17)
parataxis(planted-2, survive-18)
cc(survive-18, and-19)
parataxis(planted-2, enjoy-20)
conj:and(survive-18, enjoy-20)
amod(status-24, National-21)
amod(status-24, Historic-22)
compound(status-24, Landmark-23)
dobj(enjoy-20, status-24)
punct(planted-2, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#trees

plant :: Whalers , traders and missionaries planted seedlings at settlements scattered along the chain ./.
nsubj(planted-6, Whalers-1)
punct(Whalers-1, ,-2)
conj:and(Whalers-1, traders-3)
nsubj(planted-6, traders-3)
cc(Whalers-1, and-4)
conj:and(Whalers-1, missionaries-5)
nsubj(planted-6, missionaries-5)
root(ROOT-0, planted-6)
dobj(planted-6, seedlings-7)
case(settlements-9, at-8)
nmod:at(planted-6, settlements-9)
acl(settlements-9, scattered-10)
case(chain-13, along-11)
det(chain-13, the-12)
nmod:along(scattered-10, chain-13)
punct(planted-6, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#seedlings

plant :: Drought was strangling the surrounding countryside , and they did n't have anything to plant , anyway ./.
nsubj(strangling-3, Drought-1)
aux(strangling-3, was-2)
root(ROOT-0, strangling-3)
det(countryside-6, the-4)
amod(countryside-6, surrounding-5)
dobj(strangling-3, countryside-6)
punct(strangling-3, ,-7)
cc(strangling-3, and-8)
nsubj(have-12, they-9)
aux(have-12, did-10)
neg(have-12, n't-11)
conj:and(strangling-3, have-12)
dobj(have-12, anything-13)
case(plant-15, to-14)
nmod:to(anything-13, plant-15)
punct(have-12, ,-16)
advmod(have-12, anyway-17)
punct(strangling-3, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

plant :: These were incentives , the official visitor said , to get them planting again ./.
nsubj(incentives-3, These-1)
cop(incentives-3, were-2)
root(ROOT-0, incentives-3)
punct(incentives-3, ,-4)
det(visitor-7, the-5)
amod(visitor-7, official-6)
nsubj(said-8, visitor-7)
nsubj:xsubj(get-11, visitor-7)
acl:relcl(incentives-3, said-8)
punct(said-8, ,-9)
mark(get-11, to-10)
xcomp(said-8, get-11)
nsubj(planting-13, them-12)
dep(get-11, planting-13)
advmod(planting-13, again-14)
punct(incentives-3, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#them

plant :: Showing off a rose garden he planted with his own hands , Mr. Lance quietly volunteers: `` One of the great things about roses , unlike people from time to time , is that you get back what you put into them . ''/''
advcl(volunteers-16, Showing-1)
compound:prt(Showing-1, off-2)
det(garden-5, a-3)
compound(garden-5, rose-4)
dobj(Showing-1, garden-5)
nsubj(planted-7, he-6)
acl:relcl(garden-5, planted-7)
case(hands-11, with-8)
nmod:poss(hands-11, his-9)
amod(hands-11, own-10)
nmod:with(planted-7, hands-11)
punct(volunteers-16, ,-12)
compound(Lance-14, Mr.-13)
nsubj(volunteers-16, Lance-14)
advmod(volunteers-16, quietly-15)
root(ROOT-0, volunteers-16)
punct(volunteers-16, :-17)
punct(volunteers-16, ``-18)
dep(volunteers-16, One-19)
case(things-23, of-20)
det(things-23, the-21)
amod(things-23, great-22)
nmod:of(One-19, things-23)
case(roses-25, about-24)
nmod:about(things-23, roses-25)
punct(One-19, ,-26)
case(people-28, unlike-27)
nmod:unlike(One-19, people-28)
case(time-30, from-29)
nmod:from(people-28, time-30)
case(time-32, to-31)
nmod:to(time-30, time-32)
punct(One-19, ,-33)
dep(One-19, is-34)
mark(get-37, that-35)
nsubj(get-37, you-36)
ccomp(is-34, get-37)
advmod(get-37, back-38)
dobj(put-41, what-39)
nsubj(put-41, you-40)
ccomp(get-37, put-41)
case(them-43, into-42)
nmod:into(put-41, them-43)
punct(volunteers-16, .-44)
punct(volunteers-16, ''-45)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: plant#he

plant :: Few things give him more satisfaction now , it seems , than the hundreds of roses , fruit trees and berry bushes the 57-year-old Mr. Lance and a grandson have planted together ./.
amod(things-2, Few-1)
nsubj(give-3, things-2)
root(ROOT-0, give-3)
iobj(give-3, him-4)
amod(satisfaction-6, more-5)
dobj(give-3, satisfaction-6)
advmod(give-3, now-7)
punct(seems-10, ,-8)
nsubj(seems-10, it-9)
parataxis(give-3, seems-10)
punct(seems-10, ,-11)
case(hundreds-14, than-12)
det(hundreds-14, the-13)
nmod:than(give-3, hundreds-14)
case(roses-16, of-15)
nmod:of(hundreds-14, roses-16)
punct(hundreds-14, ,-17)
compound(trees-19, fruit-18)
nmod:than(give-3, trees-19)
conj:and(hundreds-14, trees-19)
cc(hundreds-14, and-20)
compound(bushes-22, berry-21)
nmod:than(give-3, bushes-22)
conj:and(hundreds-14, bushes-22)
det(Lance-26, the-23)
amod(Lance-26, 57-year-old-24)
compound(Lance-26, Mr.-25)
nsubj(planted-31, Lance-26)
cc(Lance-26, and-27)
det(grandson-29, a-28)
conj:and(Lance-26, grandson-29)
nsubj(planted-31, grandson-29)
aux(planted-31, have-30)
acl:relcl(hundreds-14, planted-31)
advmod(planted-31, together-32)
punct(give-3, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#lance

plant :: The downturn quickly steamrolled on conjecture that the big rise in soybean futures prices in the past two weeks might motivate some farmers to plant more soybeans ./.
det(downturn-2, The-1)
nsubj(steamrolled-4, downturn-2)
advmod(steamrolled-4, quickly-3)
root(ROOT-0, steamrolled-4)
case(conjecture-6, on-5)
nmod:on(steamrolled-4, conjecture-6)
mark(motivate-21, that-7)
det(rise-10, the-8)
amod(rise-10, big-9)
nsubj(motivate-21, rise-10)
case(prices-14, in-11)
compound(prices-14, soybean-12)
compound(prices-14, futures-13)
nmod:in(rise-10, prices-14)
case(weeks-19, in-15)
det(weeks-19, the-16)
amod(weeks-19, past-17)
nummod(weeks-19, two-18)
nmod:in(rise-10, weeks-19)
aux(motivate-21, might-20)
ccomp(steamrolled-4, motivate-21)
det(farmers-23, some-22)
dobj(motivate-21, farmers-23)
nsubj:xsubj(plant-25, farmers-23)
mark(plant-25, to-24)
xcomp(motivate-21, plant-25)
amod(soybeans-27, more-26)
dobj(plant-25, soybeans-27)
punct(steamrolled-4, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#soybeans

plant :: Thus , such basic camouflage measures as false runways made of painted plastic strips , dummy buildings and planes , sod planted on concrete buildings , reforestation and the like could lead him to drop his bombs in the wrong place ./.
advmod(lead-32, Thus-1)
punct(lead-32, ,-2)
amod(measures-6, such-3)
amod(measures-6, basic-4)
compound(measures-6, camouflage-5)
nsubj(lead-32, measures-6)
case(runways-9, as-7)
amod(runways-9, false-8)
nmod:as(measures-6, runways-9)
acl(runways-9, made-10)
case(strips-14, of-11)
amod(strips-14, painted-12)
compound(strips-14, plastic-13)
nmod:of(made-10, strips-14)
punct(measures-6, ,-15)
compound(buildings-17, dummy-16)
appos(measures-6, buildings-17)
cc(buildings-17, and-18)
appos(measures-6, planes-19)
conj:and(buildings-17, planes-19)
punct(measures-6, ,-20)
appos(measures-6, sod-21)
acl(sod-21, planted-22)
case(buildings-25, on-23)
amod(buildings-25, concrete-24)
nmod:on(planted-22, buildings-25)
punct(buildings-25, ,-26)
nmod:on(planted-22, reforestation-27)
conj:and(buildings-25, reforestation-27)
cc(buildings-25, and-28)
det(like-30, the-29)
nmod:on(planted-22, like-30)
conj:and(buildings-25, like-30)
aux(lead-32, could-31)
root(ROOT-0, lead-32)
dobj(lead-32, him-33)
nsubj:xsubj(drop-35, him-33)
mark(drop-35, to-34)
xcomp(lead-32, drop-35)
nmod:poss(bombs-37, his-36)
dobj(drop-35, bombs-37)
case(place-41, in-38)
det(place-41, the-39)
amod(place-41, wrong-40)
nmod:in(drop-35, place-41)
punct(lead-32, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#buildings

plant :: According to Ernest Simon , cotton specialist for Prudential-Bache Securities Inc . , dry weather in areas of Texas and in the Mississippi Valley , from Missouri to Louisiana , presented a potential threat to the newly planted crop ./.
case(Simon-4, According-1)
mwe(According-1, to-2)
compound(Simon-4, Ernest-3)
root(ROOT-0, Simon-4)
punct(Simon-4, ,-5)
compound(specialist-7, cotton-6)
root(,-5, specialist-7)
case(Inc-11, for-8)
compound(Inc-11, Prudential-Bache-9)
compound(Inc-11, Securities-10)
nmod:for(specialist-7, Inc-11)
punct(specialist-7, .-12)
punct(presented-19, ,-1)
amod(weather-3, dry-2)
conj:and(weather-3, weather-3')
nsubj(presented-19, weather-3)
nsubj(presented-19, weather-3')
case(areas-5, in-4)
nmod:in(weather-3, areas-5)
case(Texas-7, of-6)
nmod:of(areas-5, Texas-7)
cc(weather-3, and-8)
case(Valley-12, in-9)
det(Valley-12, the-10)
compound(Valley-12, Mississippi-11)
nmod:in(weather-3', Valley-12)
punct(Valley-12, ,-13)
case(Missouri-15, from-14)
nmod:from(Valley-12, Missouri-15)
case(Louisiana-17, to-16)
nmod:to(Missouri-15, Louisiana-17)
punct(Valley-12, ,-18)
root(ROOT-0, presented-19)
det(threat-22, a-20)
amod(threat-22, potential-21)
dobj(presented-19, threat-22)
case(crop-27, to-23)
det(crop-27, the-24)
advmod(planted-26, newly-25)
amod(crop-27, planted-26)
nmod:to(threat-22, crop-27)
punct(presented-19, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plant#crop

play :: Mr. Gorbachev has complained that children play soccer with loaves of bread because they 're so cheap ./.
compound(Gorbachev-2, Mr.-1)
nsubj(complained-4, Gorbachev-2)
aux(complained-4, has-3)
root(ROOT-0, complained-4)
mark(play-7, that-5)
nsubj(play-7, children-6)
ccomp(complained-4, play-7)
dobj(play-7, soccer-8)
case(loaves-10, with-9)
nmod:with(play-7, loaves-10)
case(bread-12, of-11)
nmod:of(loaves-10, bread-12)
mark(cheap-17, because-13)
nsubj(cheap-17, they-14)
cop(cheap-17, 're-15)
advmod(cheap-17, so-16)
advcl(play-7, cheap-17)
punct(complained-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: play#soccer

play :: At his sentencing , Mr. Marchese and his court-appointed lawyer , John J. Byrnes , complained that Mr. Marchese played a small role in the larger tax-shelter conspiracy orchestrated by Mr. Galanis ./.
case(sentencing-3, At-1)
nmod:poss(sentencing-3, his-2)
nmod:at(complained-16, sentencing-3)
punct(complained-16, ,-4)
compound(Marchese-6, Mr.-5)
nsubj(complained-16, Marchese-6)
cc(Marchese-6, and-7)
nmod:poss(lawyer-10, his-8)
amod(lawyer-10, court-appointed-9)
conj:and(Marchese-6, lawyer-10)
nsubj(complained-16, lawyer-10)
punct(lawyer-10, ,-11)
compound(Byrnes-14, John-12)
compound(Byrnes-14, J.-13)
appos(lawyer-10, Byrnes-14)
punct(lawyer-10, ,-15)
root(ROOT-0, complained-16)
mark(played-20, that-17)
compound(Marchese-19, Mr.-18)
nsubj(played-20, Marchese-19)
ccomp(complained-16, played-20)
det(role-23, a-21)
amod(role-23, small-22)
dobj(played-20, role-23)
case(conspiracy-28, in-24)
det(conspiracy-28, the-25)
amod(conspiracy-28, larger-26)
compound(conspiracy-28, tax-shelter-27)
nmod:in(played-20, conspiracy-28)
acl(conspiracy-28, orchestrated-29)
case(Galanis-32, by-30)
compound(Galanis-32, Mr.-31)
nmod:by(orchestrated-29, Galanis-32)
punct(complained-16, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: play#role

play :: Mrs. Bush , who disdains what she calls fake public displays of affection by the Dukakises , also will play an important role in her husband 's campaign ./.
compound(Bush-2, Mrs.-1)
nsubj(disdains-5, Bush-2)
nsubj(play-20, Bush-2)
punct(Bush-2, ,-3)
ref(Bush-2, who-4)
acl:relcl(Bush-2, disdains-5)
dobj(calls-8, what-6)
nsubj(calls-8, she-7)
ccomp(disdains-5, calls-8)
amod(displays-11, fake-9)
amod(displays-11, public-10)
dobj(calls-8, displays-11)
case(affection-13, of-12)
nmod:of(displays-11, affection-13)
case(Dukakises-16, by-14)
det(Dukakises-16, the-15)
nmod:by(calls-8, Dukakises-16)
punct(Bush-2, ,-17)
advmod(play-20, also-18)
aux(play-20, will-19)
root(ROOT-0, play-20)
det(role-23, an-21)
amod(role-23, important-22)
dobj(play-20, role-23)
case(campaign-28, in-24)
nmod:poss(husband-26, her-25)
nmod:poss(campaign-28, husband-26)
case(husband-26, 's-27)
nmod:in(play-20, campaign-28)
punct(play-20, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: play#role

play :: Mr. Axinn continued that the defendants want a `` level playing field '' with the plaintiffs , but the judge interrupted and said , `` they -LRB- the states -RRB- have built the field and you want to play on it . ''/''
compound(Axinn-2, Mr.-1)
nsubj(continued-3, Axinn-2)
root(ROOT-0, continued-3)
mark(want-7, that-4)
det(defendants-6, the-5)
nsubj(want-7, defendants-6)
ccomp(continued-3, want-7)
det(field-12, a-8)
punct(field-12, ``-9)
compound(field-12, level-10)
compound(field-12, playing-11)
dobj(want-7, field-12)
punct(field-12, ''-13)
case(plaintiffs-16, with-14)
det(plaintiffs-16, the-15)
nmod:with(want-7, plaintiffs-16)
punct(continued-3, ,-17)
cc(continued-3, but-18)
det(judge-20, the-19)
nsubj(interrupted-21, judge-20)
nsubj(said-23, judge-20)
conj:but(continued-3, interrupted-21)
cc(interrupted-21, and-22)
conj:but(continued-3, said-23)
conj:and(interrupted-21, said-23)
punct(said-23, ,-24)
punct(said-23, ``-25)
nsubj(built-32, they-26)
punct(states-29, -LRB--27)
det(states-29, the-28)
appos(they-26, states-29)
punct(states-29, -RRB--30)
aux(built-32, have-31)
ccomp(said-23, built-32)
det(field-34, the-33)
dobj(built-32, field-34)
cc(built-32, and-35)
nsubj(want-37, you-36)
nsubj:xsubj(play-39, you-36)
ccomp(said-23, want-37)
conj:and(built-32, want-37)
mark(play-39, to-38)
xcomp(want-37, play-39)
case(it-41, on-40)
nmod:on(play-39, it-41)
punct(continued-3, .-42)
punct(continued-3, ''-43)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: play#you

play :: Audiences love the interplay between Brown , a renowned bassist , and Harris , whose technique and volcanic energy moved one colleague to say , `` If God meant us to play like that , He would have given us 88 fingers . ''/''
nsubj(love-2, Audiences-1)
root(ROOT-0, love-2)
det(interplay-4, the-3)
dobj(love-2, interplay-4)
case(Brown-6, between-5)
nmod:between(interplay-4, Brown-6)
punct(Brown-6, ,-7)
det(bassist-10, a-8)
amod(bassist-10, renowned-9)
appos(Brown-6, bassist-10)
punct(Brown-6, ,-11)
cc(Brown-6, and-12)
nmod:between(interplay-4, Harris-13)
conj:and(Brown-6, Harris-13)
nmod:poss(technique-16, Harris-13)
punct(Harris-13, ,-14)
ref(Harris-13, whose-15)
nsubj(moved-20, technique-16)
cc(technique-16, and-17)
amod(energy-19, volcanic-18)
conj:and(technique-16, energy-19)
nsubj(moved-20, energy-19)
acl:relcl(Harris-13, moved-20)
nummod(colleague-22, one-21)
dobj(moved-20, colleague-22)
nsubj:xsubj(say-24, colleague-22)
mark(say-24, to-23)
xcomp(moved-20, say-24)
punct(say-24, ,-25)
punct(say-24, ``-26)
mark(meant-29, If-27)
nsubj(meant-29, God-28)
advcl(given-39, meant-29)
dobj(meant-29, us-30)
nsubj:xsubj(play-32, us-30)
mark(play-32, to-31)
xcomp(meant-29, play-32)
case(that-34, like-33)
nmod:like(play-32, that-34)
punct(given-39, ,-35)
nsubj(given-39, He-36)
aux(given-39, would-37)
aux(given-39, have-38)
ccomp(say-24, given-39)
iobj(given-39, us-40)
nummod(fingers-42, 88-41)
dobj(given-39, fingers-42)
punct(love-2, .-43)
punct(love-2, ''-44)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: play#us

play :: FMC officials long have complained that government officials in those countries play an aggressive role in marketing their industries ' war machinery ./.
compound(officials-2, FMC-1)
nsubj(complained-5, officials-2)
advmod(complained-5, long-3)
aux(complained-5, have-4)
root(ROOT-0, complained-5)
mark(play-12, that-6)
compound(officials-8, government-7)
nsubj(play-12, officials-8)
case(countries-11, in-9)
det(countries-11, those-10)
nmod:in(officials-8, countries-11)
ccomp(complained-5, play-12)
det(role-15, an-13)
amod(role-15, aggressive-14)
dobj(play-12, role-15)
mark(marketing-17, in-16)
advcl(play-12, marketing-17)
nmod:poss(industries-19, their-18)
nmod:poss(machinery-22, industries-19)
case(industries-19, '-20)
compound(machinery-22, war-21)
dobj(marketing-17, machinery-22)
punct(complained-5, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: play#role

play :: Not only is this false , Mr. Bilzerian 's suit complains , but the league would n't play by his rules ./.
neg(only-2, Not-1)
nsubj(false-5, only-2)
cop(false-5, is-3)
det(false-5, this-4)
root(ROOT-0, false-5)
punct(complains-11, ,-6)
compound(Bilzerian-8, Mr.-7)
nmod:poss(suit-10, Bilzerian-8)
case(Bilzerian-8, 's-9)
nsubj(complains-11, suit-10)
dep(false-5, complains-11)
punct(complains-11, ,-12)
cc(false-5, but-13)
det(league-15, the-14)
nsubj(play-18, league-15)
aux(play-18, would-16)
neg(play-18, n't-17)
conj:but(false-5, play-18)
case(rules-21, by-19)
nmod:poss(rules-21, his-20)
nmod:by(play-18, rules-21)
punct(false-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: play#league

play :: Publisher Thomas Valentino complains BMI paid him just $ 12 when a piece he handled was played on the nationally syndicated program `` Lifestyles of the Rich and Famous . ''/''
compound(Valentino-3, Publisher-1)
compound(Valentino-3, Thomas-2)
nsubj(complains-4, Valentino-3)
root(ROOT-0, complains-4)
nsubj(paid-6, BMI-5)
ccomp(complains-4, paid-6)
iobj(paid-6, him-7)
advmod($-9, just-8)
dobj(paid-6, $-9)
nummod($-9, 12-10)
advmod(played-17, when-11)
det(piece-13, a-12)
nsubjpass(played-17, piece-13)
nsubj(handled-15, he-14)
acl:relcl(piece-13, handled-15)
auxpass(played-17, was-16)
advcl(paid-6, played-17)
case(program-22, on-18)
det(program-22, the-19)
advmod(syndicated-21, nationally-20)
amod(program-22, syndicated-21)
nmod:on(played-17, program-22)
punct(program-22, ``-23)
dep(program-22, Lifestyles-24)
case(Rich-27, of-25)
det(Rich-27, the-26)
nmod:of(Lifestyles-24, Rich-27)
cc(Rich-27, and-28)
nmod:of(Lifestyles-24, Famous-29)
conj:and(Rich-27, Famous-29)
punct(complains-4, .-30)
punct(complains-4, ''-31)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: play#piece

play :: He ignores the fact that if the defendants were less affluent , it is unlikely that either plaintiff or lawyer would be playing in this legalistic sweepstakes ./.
nsubj(ignores-2, He-1)
root(ROOT-0, ignores-2)
det(fact-4, the-3)
dobj(ignores-2, fact-4)
mark(unlikely-15, that-5)
mark(affluent-11, if-6)
det(defendants-8, the-7)
nsubj(affluent-11, defendants-8)
cop(affluent-11, were-9)
advmod(affluent-11, less-10)
advcl(unlikely-15, affluent-11)
punct(unlikely-15, ,-12)
nsubj(unlikely-15, it-13)
cop(unlikely-15, is-14)
ccomp(fact-4, unlikely-15)
mark(playing-23, that-16)
cc:preconj(plaintiff-18, either-17)
nsubj(playing-23, plaintiff-18)
cc(plaintiff-18, or-19)
conj:or(plaintiff-18, lawyer-20)
nsubj(playing-23, lawyer-20)
aux(playing-23, would-21)
aux(playing-23, be-22)
ccomp(unlikely-15, playing-23)
case(sweepstakes-27, in-24)
det(sweepstakes-27, this-25)
amod(sweepstakes-27, legalistic-26)
nmod:in(playing-23, sweepstakes-27)
punct(ignores-2, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: play#plaintiff

play :: But soon new ads will play down the dog even further and display a metal `` G , '' Greyhound 's stock symbol , coming out of a foundry ./.
cc(play-6, But-1)
advmod(play-6, soon-2)
amod(ads-4, new-3)
nsubj(play-6, ads-4)
nsubj(display-13, ads-4)
aux(play-6, will-5)
root(ROOT-0, play-6)
compound:prt(play-6, down-7)
det(dog-9, the-8)
dobj(play-6, dog-9)
advmod(further-11, even-10)
advmod(play-6, further-11)
cc(play-6, and-12)
conj:and(play-6, display-13)
det(G-17, a-14)
compound(G-17, metal-15)
punct(G-17, ``-16)
dobj(display-13, G-17)
punct(play-6, ,-18)
root(,-18, ''-19)
nmod:poss(symbol-23, Greyhound-20)
case(Greyhound-20, 's-21)
compound(symbol-23, stock-22)
root(''-19, symbol-23)
punct(symbol-23, ,-24)
root(,-24, coming-25)
case(foundry-29, out-26)
mwe(out-26, of-27)
det(foundry-29, a-28)
nmod:out_of(coming-25, foundry-29)
punct(coming-25, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: play#dog

play :: Major retailers have become very good at playing competing manufacturers against one another to obtain free display fixtures , cooperative advertising , extended payment terms and other concessions , as well as price discounts , he said ./.
amod(retailers-2, Major-1)
nsubj(become-4, retailers-2)
aux(become-4, have-3)
ccomp(said-37, become-4)
advmod(good-6, very-5)
xcomp(become-4, good-6)
mark(playing-8, at-7)
advcl(become-4, playing-8)
amod(manufacturers-10, competing-9)
dobj(playing-8, manufacturers-10)
case(one-12, against-11)
nmod:against(playing-8, one-12)
dep(one-12, another-13)
mark(obtain-15, to-14)
advcl(playing-8, obtain-15)
amod(fixtures-18, free-16)
compound(fixtures-18, display-17)
dobj(obtain-15, fixtures-18)
punct(fixtures-18, ,-19)
amod(advertising-21, cooperative-20)
appos(fixtures-18, advertising-21)
punct(fixtures-18, ,-22)
xcomp(become-4, extended-23)
compound(terms-25, payment-24)
dobj(extended-23, terms-25)
cc(terms-25, and-26)
amod(concessions-28, other-27)
dobj(extended-23, concessions-28)
conj:and(terms-25, concessions-28)
punct(extended-23, ,-29)
cc(extended-23, as-30)
mwe(as-30, well-31)
mwe(as-30, as-32)
compound(discounts-34, price-33)
xcomp(become-4, discounts-34)
conj:and(extended-23, discounts-34)
punct(said-37, ,-35)
nsubj(said-37, he-36)
root(ROOT-0, said-37)
punct(said-37, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: play#manufacturers

play :: Proceso has played a key role in making possible the once-unthinkable displays of disrespect that Mr. Salinas has faced ./.
nsubj(played-3, Proceso-1)
aux(played-3, has-2)
root(ROOT-0, played-3)
det(role-6, a-4)
amod(role-6, key-5)
dobj(played-3, role-6)
mark(making-8, in-7)
advcl(played-3, making-8)
xcomp(making-8, possible-9)
det(displays-12, the-10)
amod(displays-12, once-unthinkable-11)
dobj(possible-9, displays-12)
dobj(faced-19, displays-12)
case(disrespect-14, of-13)
nmod:of(displays-12, disrespect-14)
ref(displays-12, that-15)
compound(Salinas-17, Mr.-16)
nsubj(faced-19, Salinas-17)
aux(faced-19, has-18)
acl:relcl(displays-12, faced-19)
punct(played-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: play#role

play :: As voters trooped to the polls and caucus locations in the Northern Plains , Mr. Robertson accused Vice President Bush 's campaign of playing a part in the disclosures about the sex life of television evangelist Jimmy Swaggart ./.
mark(trooped-3, As-1)
nsubj(trooped-3, voters-2)
advcl(accused-17, trooped-3)
case(polls-6, to-4)
det(polls-6, the-5)
nmod:to(trooped-3, polls-6)
cc(polls-6, and-7)
compound(locations-9, caucus-8)
nmod:to(trooped-3, locations-9)
conj:and(polls-6, locations-9)
case(Plains-13, in-10)
det(Plains-13, the-11)
compound(Plains-13, Northern-12)
nmod:in(polls-6, Plains-13)
punct(accused-17, ,-14)
compound(Robertson-16, Mr.-15)
nsubj(accused-17, Robertson-16)
root(ROOT-0, accused-17)
compound(Bush-20, Vice-18)
compound(Bush-20, President-19)
nmod:poss(campaign-22, Bush-20)
case(Bush-20, 's-21)
dobj(accused-17, campaign-22)
mark(playing-24, of-23)
acl(campaign-22, playing-24)
det(part-26, a-25)
dobj(playing-24, part-26)
case(disclosures-29, in-27)
det(disclosures-29, the-28)
nmod:in(playing-24, disclosures-29)
case(life-33, about-30)
det(life-33, the-31)
compound(life-33, sex-32)
nmod:about(disclosures-29, life-33)
case(Swaggart-38, of-34)
compound(Swaggart-38, television-35)
compound(Swaggart-38, evangelist-36)
compound(Swaggart-38, Jimmy-37)
nmod:of(life-33, Swaggart-38)
punct(accused-17, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: play#part

play :: `` Just girls play with Barbie dolls and just boys play with GI Joe , '' she complains ./.
punct(complains-18, ``-1)
advmod(girls-3, Just-2)
nsubj(play-4, girls-3)
ccomp(complains-18, play-4)
case(dolls-7, with-5)
compound(dolls-7, Barbie-6)
nmod:with(play-4, dolls-7)
cc(play-4, and-8)
advmod(boys-10, just-9)
nsubj(play-11, boys-10)
conj:and(play-4, play-11)
ccomp(complains-18, play-11)
case(Joe-14, with-12)
compound(Joe-14, GI-13)
nmod:with(play-11, Joe-14)
punct(complains-18, ,-15)
punct(complains-18, ''-16)
nsubj(complains-18, she-17)
root(ROOT-0, complains-18)
punct(complains-18, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: play#girls

play :: Karen Stern has played the harp surrounded by ice sculptures at a restaurant and as part of the display for a three-foot-high cake at a pastry competition ./.
compound(Stern-2, Karen-1)
nsubj(played-4, Stern-2)
aux(played-4, has-3)
root(ROOT-0, played-4)
det(harp-6, the-5)
dobj(played-4, harp-6)
acl(harp-6, surrounded-7)
case(sculptures-10, by-8)
compound(sculptures-10, ice-9)
nmod:by(surrounded-7, sculptures-10)
case(restaurant-13, at-11)
det(restaurant-13, a-12)
nmod:at(played-4, restaurant-13)
cc(played-4, and-14)
case(part-16, as-15)
conj:and(played-4, part-16)
case(display-19, of-17)
det(display-19, the-18)
nmod:of(part-16, display-19)
case(cake-23, for-20)
det(cake-23, a-21)
amod(cake-23, three-foot-high-22)
nmod:for(display-19, cake-23)
case(competition-27, at-24)
det(competition-27, a-25)
compound(competition-27, pastry-26)
nmod:at(cake-23, competition-27)
punct(played-4, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: play#harp

play :: After two hours of this and more , Mr. Grappelli finally came on stage , wearing the loudest plaid shirt you 've ever seen , and impishly , sweetly played circles around everyone , never for a second showing his age ./.
case(hours-3, After-1)
nummod(hours-3, two-2)
nmod:after(came-12, hours-3)
case(this-5, of-4)
nmod:of(hours-3, this-5)
cc(this-5, and-6)
nmod:of(hours-3, more-7)
conj:and(this-5, more-7)
punct(came-12, ,-8)
compound(Grappelli-10, Mr.-9)
nsubj(came-12, Grappelli-10)
nsubj(played-30, Grappelli-10)
advmod(came-12, finally-11)
root(ROOT-0, came-12)
case(stage-14, on-13)
nmod:on(came-12, stage-14)
punct(came-12, ,-15)
xcomp(came-12, wearing-16)
det(shirt-20, the-17)
amod(shirt-20, loudest-18)
compound(shirt-20, plaid-19)
dobj(wearing-16, shirt-20)
nsubj(seen-24, you-21)
aux(seen-24, 've-22)
advmod(seen-24, ever-23)
acl:relcl(shirt-20, seen-24)
punct(came-12, ,-25)
cc(came-12, and-26)
advmod(played-30, impishly-27)
punct(played-30, ,-28)
advmod(played-30, sweetly-29)
conj:and(came-12, played-30)
dobj(played-30, circles-31)
case(everyone-33, around-32)
nmod:around(played-30, everyone-33)
punct(played-30, ,-34)
neg(showing-39, never-35)
case(showing-39, for-36)
det(showing-39, a-37)
amod(showing-39, second-38)
advcl(played-30, showing-39)
nmod:poss(age-41, his-40)
dobj(showing-39, age-41)
punct(came-12, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: play#circles

play :: Displaying his erudition , however , Mr. Bonin soon says he will handle the position the way Mr. Kasparov himself once played against Grandmaster Ljubomir Ljubojevic , the leading Yugoslav player ./.
advcl(says-10, Displaying-1)
nmod:poss(erudition-3, his-2)
dobj(Displaying-1, erudition-3)
punct(says-10, ,-4)
advmod(says-10, however-5)
punct(says-10, ,-6)
compound(Bonin-8, Mr.-7)
nsubj(says-10, Bonin-8)
advmod(says-10, soon-9)
root(ROOT-0, says-10)
nsubj(handle-13, he-11)
aux(handle-13, will-12)
ccomp(says-10, handle-13)
det(position-15, the-14)
dobj(handle-13, position-15)
det(way-17, the-16)
dep(position-15, way-17)
compound(Kasparov-19, Mr.-18)
nsubj(played-22, Kasparov-19)
nmod:npmod(Kasparov-19, himself-20)
advmod(played-22, once-21)
acl:relcl(way-17, played-22)
case(Ljubojevic-26, against-23)
compound(Ljubojevic-26, Grandmaster-24)
compound(Ljubojevic-26, Ljubomir-25)
nmod:against(played-22, Ljubojevic-26)
punct(Ljubojevic-26, ,-27)
det(player-31, the-28)
amod(player-31, leading-29)
compound(player-31, Yugoslav-30)
appos(Ljubojevic-26, player-31)
punct(says-10, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: play#kasparov

play :: `` We 'd prefer to soft-play that kind of stuff . ''/''
root(ROOT-0, ``-1)
nsubj(prefer-4, We-2)
nsubj:xsubj(soft-play-6, We-2)
aux(prefer-4, 'd-3)
root(``-1, prefer-4)
mark(soft-play-6, to-5)
xcomp(prefer-4, soft-play-6)
det(kind-8, that-7)
dobj(soft-play-6, kind-8)
case(stuff-10, of-9)
nmod:of(kind-8, stuff-10)
punct(prefer-4, .-11)
punct(prefer-4, ''-12)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

plow :: The downtown shop alone is grossing more than $ 1 million a year now , but the Shihs take salaries of only about $ 2 , 000 a month each from their business , plowing profits back into their drive to become the McDonald 's of the flower game ./.
det(shop-3, The-1)
compound(shop-3, downtown-2)
nsubj(grossing-6, shop-3)
advmod(shop-3, alone-4)
aux(grossing-6, is-5)
root(ROOT-0, grossing-6)
advmod($-9, more-7)
mwe(more-7, than-8)
dobj(grossing-6, $-9)
compound(million-11, 1-10)
nummod($-9, million-11)
det(year-13, a-12)
nmod:npmod($-9, year-13)
advmod(grossing-6, now-14)
punct(grossing-6, ,-15)
cc(grossing-6, but-16)
det(Shihs-18, the-17)
nsubj(take-19, Shihs-18)
conj:but(grossing-6, take-19)
dobj(take-19, salaries-20)
case($-24, of-21)
advmod($-24, only-22)
advmod($-24, about-23)
nmod:of(salaries-20, $-24)
nummod($-24, 2-25)
punct($-24, ,-26)
nummod($-24, 000-27)
det(month-29, a-28)
nmod:npmod($-24, month-29)
dep($-24, each-30)
case(business-33, from-31)
nmod:poss(business-33, their-32)
nmod:from(each-30, business-33)
punct(take-19, ,-34)
advcl(take-19, plowing-35)
dobj(plowing-35, profits-36)
advmod(plowing-35, back-37)
case(drive-40, into-38)
nmod:poss(drive-40, their-39)
nmod:into(back-37, drive-40)
mark(become-42, to-41)
advcl(plowing-35, become-42)
det(McDonald-44, the-43)
xcomp(become-42, McDonald-44)
case(McDonald-44, 's-45)
case(game-49, of-46)
det(game-49, the-47)
compound(game-49, flower-48)
nmod:of(McDonald-44, game-49)
punct(grossing-6, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#profits

plow :: While a possible recession later this year could make the waters choppy for such projects , developers are plowing ahead by building new marinas or improving old ones ./.
mark(make-9, While-1)
det(recession-4, a-2)
amod(recession-4, possible-3)
nsubj(make-9, recession-4)
advmod(year-7, later-5)
det(year-7, this-6)
nmod:tmod(make-9, year-7)
aux(make-9, could-8)
advcl(plowing-19, make-9)
det(waters-11, the-10)
nsubj(choppy-12, waters-11)
xcomp(make-9, choppy-12)
case(projects-15, for-13)
amod(projects-15, such-14)
nmod:for(choppy-12, projects-15)
punct(plowing-19, ,-16)
nsubj(plowing-19, developers-17)
aux(plowing-19, are-18)
root(ROOT-0, plowing-19)
advmod(plowing-19, ahead-20)
mark(building-22, by-21)
advcl(plowing-19, building-22)
amod(marinas-24, new-23)
dobj(building-22, marinas-24)
cc(building-22, or-25)
advcl(plowing-19, improving-26)
conj:or(building-22, improving-26)
amod(ones-28, old-27)
dobj(improving-26, ones-28)
punct(plowing-19, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#developers

plow :: Tyson Foods said that despite Holly Farms ' rejection it was plowing ahead with its offer ./.
compound(Foods-2, Tyson-1)
nsubj(said-3, Foods-2)
root(ROOT-0, said-3)
mark(plowing-12, that-4)
case(rejection-9, despite-5)
compound(Farms-7, Holly-6)
nmod:poss(rejection-9, Farms-7)
case(Farms-7, '-8)
nmod:despite(plowing-12, rejection-9)
nsubj(plowing-12, it-10)
aux(plowing-12, was-11)
ccomp(said-3, plowing-12)
advmod(plowing-12, ahead-13)
case(offer-16, with-14)
nmod:poss(offer-16, its-15)
nmod:with(plowing-12, offer-16)
punct(said-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#it

plow :: Over-the-counter stocks began November in the same funk in which they plowed through October , as OTC indexes slipped slightly on low volume ./.
amod(stocks-2, Over-the-counter-1)
nsubj(began-3, stocks-2)
root(ROOT-0, began-3)
dobj(began-3, November-4)
case(funk-8, in-5)
det(funk-8, the-6)
amod(funk-8, same-7)
nmod:in(began-3, funk-8)
nmod:in(plowed-12, funk-8)
case(which-10, in-9)
ref(funk-8, which-10)
nsubj(plowed-12, they-11)
acl:relcl(funk-8, plowed-12)
case(October-14, through-13)
nmod:through(plowed-12, October-14)
punct(began-3, ,-15)
mark(slipped-19, as-16)
compound(indexes-18, OTC-17)
nsubj(slipped-19, indexes-18)
advcl(began-3, slipped-19)
advmod(slipped-19, slightly-20)
case(volume-23, on-21)
amod(volume-23, low-22)
nmod:on(slipped-19, volume-23)
punct(began-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#they

plow :: Mr. Cooper was in fact researching a book on Beethoven 's working methods and had plowed through some 8 , 000 pages of the composer 's notes five years ago when he recognized the bones of the 10th ./.
compound(Cooper-2, Mr.-1)
nsubj(fact-5, Cooper-2)
nsubj(plowed-16, Cooper-2)
cop(fact-5, was-3)
case(fact-5, in-4)
root(ROOT-0, fact-5)
acl(fact-5, researching-6)
det(book-8, a-7)
dobj(researching-6, book-8)
case(methods-13, on-9)
nmod:poss(methods-13, Beethoven-10)
case(Beethoven-10, 's-11)
amod(methods-13, working-12)
nmod:on(book-8, methods-13)
cc(fact-5, and-14)
aux(plowed-16, had-15)
conj:and(fact-5, plowed-16)
case(8-19, through-17)
advmod(8-19, some-18)
nmod:through(plowed-16, 8-19)
punct(8-19, ,-20)
nummod(pages-22, 000-21)
appos(8-19, pages-22)
case(notes-27, of-23)
det(composer-25, the-24)
nmod:poss(notes-27, composer-25)
case(composer-25, 's-26)
nmod:of(pages-22, notes-27)
nummod(years-29, five-28)
nmod:npmod(ago-30, years-29)
advmod(pages-22, ago-30)
advmod(recognized-33, when-31)
nsubj(recognized-33, he-32)
acl:relcl(pages-22, recognized-33)
det(bones-35, the-34)
dobj(recognized-33, bones-35)
case(10th-38, of-36)
det(10th-38, the-37)
nmod:of(bones-35, 10th-38)
punct(fact-5, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#cooper

plow :: Despite the potential drawbacks , the networks are plowing ahead ./.
case(drawbacks-4, Despite-1)
det(drawbacks-4, the-2)
amod(drawbacks-4, potential-3)
nmod:despite(plowing-9, drawbacks-4)
punct(plowing-9, ,-5)
det(networks-7, the-6)
nsubj(plowing-9, networks-7)
aux(plowing-9, are-8)
root(ROOT-0, plowing-9)
advmod(plowing-9, ahead-10)
punct(plowing-9, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#networks

plow :: `` We 've been plowing a lot of new furrows , '' says Richard Burket of Archer-Daniels-Midland Co . , Decatur , Ill ./.
punct(says-13, ``-1)
nsubj(plowing-5, We-2)
aux(plowing-5, 've-3)
aux(plowing-5, been-4)
ccomp(says-13, plowing-5)
det(lot-7, a-6)
dobj(plowing-5, lot-7)
case(furrows-10, of-8)
amod(furrows-10, new-9)
nmod:of(lot-7, furrows-10)
punct(says-13, ,-11)
punct(says-13, ''-12)
root(ROOT-0, says-13)
compound(Burket-15, Richard-14)
nsubj(says-13, Burket-15)
case(Co-18, of-16)
compound(Co-18, Archer-Daniels-Midland-17)
nmod:of(Burket-15, Co-18)
punct(says-13, .-19)
root(ROOT-0, ,-1)
root(,-1, Decatur-2)
punct(Decatur-2, ,-3)
appos(Decatur-2, Ill-4)
punct(Decatur-2, .-5)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#furrows

plow :: TNT also says it will plow a hefty 80 % of its revenue back into programming -- some $ 250 million over its first three years ./.
nsubj(says-3, TNT-1)
advmod(says-3, also-2)
root(ROOT-0, says-3)
nsubj(plow-6, it-4)
aux(plow-6, will-5)
ccomp(says-3, plow-6)
det(%-10, a-7)
amod(%-10, hefty-8)
nummod(%-10, 80-9)
dobj(plow-6, %-10)
case(revenue-13, of-11)
nmod:poss(revenue-13, its-12)
nmod:of(%-10, revenue-13)
advmod(plow-6, back-14)
case(programming-16, into-15)
nmod:into(back-14, programming-16)
punct(plow-6, ---17)
advmod($-19, some-18)
dobj(plow-6, $-19)
compound(million-21, 250-20)
nummod($-19, million-21)
case(years-26, over-22)
nmod:poss(years-26, its-23)
amod(years-26, first-24)
nummod(years-26, three-25)
nmod:over($-19, years-26)
punct(says-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#revenue

plow :: State officials are advising farmers to plow under infested fields ./.
compound(officials-2, State-1)
nsubj(advising-4, officials-2)
aux(advising-4, are-3)
root(ROOT-0, advising-4)
dobj(advising-4, farmers-5)
nsubj:xsubj(plow-7, farmers-5)
mark(plow-7, to-6)
xcomp(advising-4, plow-7)
case(fields-10, under-8)
amod(fields-10, infested-9)
nmod:under(plow-7, fields-10)
punct(advising-4, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#farmers

plow :: The soil was so rocky that they had to do something with the boulders plowed up in their fields ; dry stone walls were built in other , scattered parts of the U.S . , but in smaller numbers ./.
det(soil-2, The-1)
nsubj(rocky-5, soil-2)
cop(rocky-5, was-3)
advmod(rocky-5, so-4)
root(ROOT-0, rocky-5)
mark(had-8, that-6)
nsubj(had-8, they-7)
nsubj:xsubj(do-10, they-7)
ccomp(rocky-5, had-8)
mark(do-10, to-9)
xcomp(had-8, do-10)
dobj(do-10, something-11)
case(boulders-14, with-12)
det(boulders-14, the-13)
nmod:with(do-10, boulders-14)
acl(boulders-14, plowed-15)
compound:prt(plowed-15, up-16)
case(fields-19, in-17)
nmod:poss(fields-19, their-18)
nmod:in(plowed-15, fields-19)
punct(rocky-5, ;-20)
amod(walls-23, dry-21)
compound(walls-23, stone-22)
nsubjpass(built-25, walls-23)
auxpass(built-25, were-24)
parataxis(rocky-5, built-25)
case(parts-30, in-26)
amod(parts-30, other-27)
punct(parts-30, ,-28)
amod(parts-30, scattered-29)
nmod:in(built-25, parts-30)
case(U.S-33, of-31)
det(U.S-33, the-32)
nmod:of(parts-30, U.S-33)
punct(rocky-5, .-34)
punct(numbers-5, ,-1)
case(numbers-5, but-2)
case(numbers-5, in-3)
amod(numbers-5, smaller-4)
root(ROOT-0, numbers-5)
punct(numbers-5, .-6)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#fields

plow :: Field stone , generally rounder , is hard to come by because much is already in old stone walls , and few farmers are plowing new fields ./.
compound(stone-2, Field-1)
nsubj(hard-8, stone-2)
nsubj:xsubj(come-10, stone-2)
punct(stone-2, ,-3)
advmod(rounder-5, generally-4)
appos(stone-2, rounder-5)
punct(stone-2, ,-6)
cop(hard-8, is-7)
root(ROOT-0, hard-8)
mark(come-10, to-9)
xcomp(hard-8, come-10)
nmod(come-10, by-11)
advmod(walls-19, because-12)
nsubj(walls-19, much-13)
cop(walls-19, is-14)
advmod(walls-19, already-15)
case(walls-19, in-16)
compound(walls-19, old-17)
compound(walls-19, stone-18)
dep(come-10, walls-19)
punct(walls-19, ,-20)
cc(walls-19, and-21)
amod(farmers-23, few-22)
nsubj(plowing-25, farmers-23)
aux(plowing-25, are-24)
dep(come-10, plowing-25)
conj:and(walls-19, plowing-25)
amod(fields-27, new-26)
dobj(plowing-25, fields-27)
punct(hard-8, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#fields

plow :: Countless marginal players -- individuals who plowed their money into foreign mutual funds and new institutional entrants seeking a quick killing overseas -- have disappeared ./.
amod(players-3, Countless-1)
amod(players-3, marginal-2)
nsubj(disappeared-25, players-3)
punct(players-3, ---4)
dep(players-3, individuals-5)
nsubj(plowed-7, individuals-5)
ref(individuals-5, who-6)
acl:relcl(individuals-5, plowed-7)
nmod:poss(money-9, their-8)
dobj(plowed-7, money-9)
case(funds-13, into-10)
amod(funds-13, foreign-11)
amod(funds-13, mutual-12)
nmod:into(plowed-7, funds-13)
cc(plowed-7, and-14)
amod(entrants-17, new-15)
amod(entrants-17, institutional-16)
acl:relcl(individuals-5, entrants-17)
conj:and(plowed-7, entrants-17)
acl(entrants-17, seeking-18)
det(killing-21, a-19)
amod(killing-21, quick-20)
dobj(seeking-18, killing-21)
advmod(seeking-18, overseas-22)
punct(players-3, ---23)
aux(disappeared-25, have-24)
root(ROOT-0, disappeared-25)
punct(disappeared-25, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#money

plow :: Foreign farmers are fast plowing new acreage for soybeans to meet demand around the world ./.
amod(farmers-2, Foreign-1)
nsubj(plowing-5, farmers-2)
aux(plowing-5, are-3)
advmod(plowing-5, fast-4)
root(ROOT-0, plowing-5)
amod(acreage-7, new-6)
dobj(plowing-5, acreage-7)
case(soybeans-9, for-8)
nmod:for(plowing-5, soybeans-9)
mark(meet-11, to-10)
advcl(plowing-5, meet-11)
dobj(meet-11, demand-12)
case(world-15, around-13)
det(world-15, the-14)
nmod:around(demand-12, world-15)
punct(plowing-5, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#acreage

plow :: That was because in Brandon , Fla . , during the waning hours of Aug. 1 , the '84 Olympic silver medalist 's sports car plowed into a group of 30 teens ./.
root(ROOT-0, That-1)
dep(That-1, was-2)
advmod(was-2, because-3)
case(Brandon-5, in-4)
nmod:in(because-3, Brandon-5)
punct(Brandon-5, ,-6)
appos(Brandon-5, Fla-7)
punct(That-1, .-8)
punct(plowed-18, ,-1)
case(hours-5, during-2)
det(hours-5, the-3)
amod(hours-5, waning-4)
nmod:during(plowed-18, hours-5)
case(Aug.-7, of-6)
nmod:of(hours-5, Aug.-7)
nummod(Aug.-7, 1-8)
punct(plowed-18, ,-9)
det(medalist-14, the-10)
compound(medalist-14, '84-11)
compound(medalist-14, Olympic-12)
compound(medalist-14, silver-13)
nmod:poss(car-17, medalist-14)
case(medalist-14, 's-15)
compound(car-17, sports-16)
nsubj(plowed-18, car-17)
root(ROOT-0, plowed-18)
case(group-21, into-19)
det(group-21, a-20)
nmod:into(plowed-18, group-21)
case(teens-24, of-22)
nummod(teens-24, 30-23)
nmod:of(group-21, teens-24)
punct(plowed-18, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#car

plow :: Among those currently plowing millions into non-U.S. investments are the San Francisco City and County Employees Retirement System and state funds in Oregon and Colorado ./.
case(those-2, Among-1)
nmod:among(are-9, those-2)
advmod(plowing-4, currently-3)
acl(those-2, plowing-4)
dobj(plowing-4, millions-5)
case(investments-8, into-6)
amod(investments-8, non-U.S.-7)
nmod:into(plowing-4, investments-8)
root(ROOT-0, are-9)
det(City-13, the-10)
compound(City-13, San-11)
compound(City-13, Francisco-12)
nsubj(are-9, City-13)
cc(City-13, and-14)
compound(System-18, County-15)
compound(System-18, Employees-16)
compound(System-18, Retirement-17)
nsubj(are-9, System-18)
conj:and(City-13, System-18)
cc(City-13, and-19)
compound(funds-21, state-20)
nsubj(are-9, funds-21)
conj:and(City-13, funds-21)
case(Oregon-23, in-22)
nmod:in(City-13, Oregon-23)
cc(Oregon-23, and-24)
nmod:in(City-13, Colorado-25)
conj:and(Oregon-23, Colorado-25)
punct(are-9, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#millions

plow :: Most African governments pay lip service but not much else to the principle of plowing those hunting revenues back into the rural communities ./.
amod(governments-3, Most-1)
amod(governments-3, African-2)
nsubj(pay-4, governments-3)
root(ROOT-0, pay-4)
compound(service-6, lip-5)
dobj(pay-4, service-6)
cc(not-8, but-7)
cc(service-6, not-8)
advmod(else-10, much-9)
dobj(pay-4, else-10)
conj:negcc(service-6, else-10)
case(principle-13, to-11)
det(principle-13, the-12)
nmod:to(else-10, principle-13)
mark(plowing-15, of-14)
acl(principle-13, plowing-15)
det(revenues-18, those-16)
compound(revenues-18, hunting-17)
dobj(plowing-15, revenues-18)
advmod(plowing-15, back-19)
case(communities-23, into-20)
det(communities-23, the-21)
amod(communities-23, rural-22)
nmod:into(back-19, communities-23)
punct(pay-4, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#revenues

plow :: As the two paddled along , a fast-moving motorized water scooter driven by a six-year-old boy plowed into them , killing Mrs. Simpson ./.
mark(paddled-4, As-1)
det(two-3, the-2)
nsubj(paddled-4, two-3)
root(ROOT-0, paddled-4)
advmod(paddled-4, along-5)
punct(paddled-4, ,-6)
det(scooter-11, a-7)
amod(scooter-11, fast-moving-8)
amod(scooter-11, motorized-9)
compound(scooter-11, water-10)
root(,-6, scooter-11)
acl(scooter-11, driven-12)
case(boy-16, by-13)
det(boy-16, a-14)
amod(boy-16, six-year-old-15)
nmod:by(driven-12, boy-16)
acl(boy-16, plowed-17)
case(them-19, into-18)
nmod:into(plowed-17, them-19)
punct(scooter-11, ,-20)
acl(scooter-11, killing-21)
compound(Simpson-23, Mrs.-22)
dobj(killing-21, Simpson-23)
punct(scooter-11, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#them

plow :: The plane 's landing gear collapsed as it plowed through the soft earth at the end of the runway ./.
det(plane-2, The-1)
nmod:poss(gear-5, plane-2)
case(plane-2, 's-3)
compound(gear-5, landing-4)
nsubj(collapsed-6, gear-5)
root(ROOT-0, collapsed-6)
mark(plowed-9, as-7)
nsubj(plowed-9, it-8)
advcl(collapsed-6, plowed-9)
case(earth-13, through-10)
det(earth-13, the-11)
amod(earth-13, soft-12)
nmod:through(plowed-9, earth-13)
case(end-16, at-14)
det(end-16, the-15)
nmod:at(plowed-9, end-16)
case(runway-19, of-17)
det(runway-19, the-18)
nmod:of(end-16, runway-19)
punct(collapsed-6, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#it

plow :: He said the legislation should n't be so generous as to induce any farmers to plow under their crops , and should n't `` bust the budget . ''/''
nsubj(said-2, He-1)
root(ROOT-0, said-2)
det(legislation-4, the-3)
nsubj(generous-9, legislation-4)
aux(generous-9, should-5)
neg(generous-9, n't-6)
cop(generous-9, be-7)
advmod(generous-9, so-8)
ccomp(said-2, generous-9)
mark(induce-12, as-10)
mark(induce-12, to-11)
advcl(generous-9, induce-12)
det(farmers-14, any-13)
dobj(induce-12, farmers-14)
nsubj:xsubj(plow-16, farmers-14)
mark(plow-16, to-15)
xcomp(induce-12, plow-16)
case(crops-19, under-17)
nmod:poss(crops-19, their-18)
nmod:under(plow-16, crops-19)
punct(generous-9, ,-20)
cc(generous-9, and-21)
aux(bust-25, should-22)
neg(bust-25, n't-23)
punct(bust-25, ``-24)
ccomp(said-2, bust-25)
conj:and(generous-9, bust-25)
det(budget-27, the-26)
dobj(bust-25, budget-27)
punct(said-2, .-28)
punct(said-2, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: plow#farmers

plow :: Morally repugnant and economically absurd , the scheme would knock over homes and churches , plow up cemeteries and herd the residents into `` urban agro-industrial complexes . ''/''
advmod(repugnant-2, Morally-1)
ccomp(knock-10, repugnant-2)
cc(repugnant-2, and-3)
advmod(absurd-5, economically-4)
conj:and(repugnant-2, absurd-5)
ccomp(knock-10, absurd-5)
punct(knock-10, ,-6)
det(scheme-8, the-7)
nsubj(knock-10, scheme-8)
aux(knock-10, would-9)
root(ROOT-0, knock-10)
case(homes-12, over-11)
nmod:over(knock-10, homes-12)
cc(homes-12, and-13)
nmod:over(knock-10, churches-14)
conj:and(homes-12, churches-14)
punct(knock-10, ,-15)
xcomp(knock-10, plow-16)
compound:prt(plow-16, up-17)
dobj(plow-16, cemeteries-18)
cc(cemeteries-18, and-19)
dobj(plow-16, herd-20)
conj:and(cemeteries-18, herd-20)
det(residents-22, the-21)
dobj(cemeteries-18, residents-22)
case(complexes-27, into-23)
punct(complexes-27, ``-24)
amod(complexes-27, urban-25)
amod(complexes-27, agro-industrial-26)
nmod:into(cemeteries-18, complexes-27)
punct(knock-10, .-28)
punct(knock-10, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: plow#cemeteries

plow :: In late June , for example , a group that included Teddy Roosevelt 's great-great-granddaughter stood down some bulldozers trying to plow a road through a moor near the island village of Siasconset ./.
case(June-3, In-1)
amod(June-3, late-2)
nmod:in(stood-16, June-3)
punct(stood-16, ,-4)
case(example-6, for-5)
nmod:for(stood-16, example-6)
punct(stood-16, ,-7)
det(group-9, a-8)
nsubj(included-11, group-9)
nsubj(stood-16, group-9)
ref(group-9, that-10)
acl:relcl(group-9, included-11)
compound(Roosevelt-13, Teddy-12)
nmod:poss(great-great-granddaughter-15, Roosevelt-13)
case(Roosevelt-13, 's-14)
dobj(included-11, great-great-granddaughter-15)
root(ROOT-0, stood-16)
compound:prt(stood-16, down-17)
det(bulldozers-19, some-18)
dobj(stood-16, bulldozers-19)
acl(bulldozers-19, trying-20)
mark(plow-22, to-21)
xcomp(trying-20, plow-22)
det(road-24, a-23)
dobj(plow-22, road-24)
case(moor-27, through-25)
det(moor-27, a-26)
nmod:through(plow-22, moor-27)
case(village-31, near-28)
det(village-31, the-29)
compound(village-31, island-30)
nmod:near(moor-27, village-31)
case(Siasconset-33, of-32)
nmod:of(village-31, Siasconset-33)
punct(stood-16, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#road

plow :: Texas is indeed the most dramatic and scandalous example of S & L managers plowing money into dubious projects , often with less than an arms-length relationship with developers and totally unrealistic estimates of the potential income streams of the commercial and residential buildings they were financing ./.
nsubj(example-9, Texas-1)
cop(example-9, is-2)
advmod(example-9, indeed-3)
det(example-9, the-4)
advmod(dramatic-6, most-5)
amod(example-9, dramatic-6)
cc(dramatic-6, and-7)
conj:and(dramatic-6, scandalous-8)
amod(example-9, scandalous-8)
root(ROOT-0, example-9)
case(managers-14, of-10)
compound(managers-14, S-11)
cc(S-11, &-12)
conj:&(S-11, L-13)
compound(managers-14, L-13)
nmod:of(example-9, managers-14)
acl(managers-14, plowing-15)
dobj(plowing-15, money-16)
case(projects-19, into-17)
amod(projects-19, dubious-18)
nmod:into(plowing-15, projects-19)
punct(example-9, ,-20)
advmod(relationship-27, often-21)
case(relationship-27, with-22)
advmod(relationship-27, less-23)
mwe(less-23, than-24)
det(relationship-27, an-25)
amod(relationship-27, arms-length-26)
nmod:with(example-9, relationship-27)
case(developers-29, with-28)
nmod:with(relationship-27, developers-29)
cc(relationship-27, and-30)
advmod(unrealistic-32, totally-31)
amod(estimates-33, unrealistic-32)
nmod:with(example-9, estimates-33)
conj:and(relationship-27, estimates-33)
case(streams-38, of-34)
det(streams-38, the-35)
amod(streams-38, potential-36)
compound(streams-38, income-37)
nmod:of(estimates-33, streams-38)
case(buildings-44, of-39)
det(buildings-44, the-40)
amod(buildings-44, commercial-41)
cc(commercial-41, and-42)
conj:and(commercial-41, residential-43)
amod(buildings-44, residential-43)
nmod:of(streams-38, buildings-44)
nsubj(financing-47, they-45)
aux(financing-47, were-46)
acl:relcl(buildings-44, financing-47)
punct(example-9, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#money

plow :: Officials may shut others as they plow through 4 , 000 remaining applications to do business ./.
nsubj(shut-3, Officials-1)
aux(shut-3, may-2)
root(ROOT-0, shut-3)
dobj(shut-3, others-4)
mark(plow-7, as-5)
nsubj(plow-7, they-6)
advcl(shut-3, plow-7)
case(4-9, through-8)
nmod:through(plow-7, 4-9)
punct(4-9, ,-10)
nummod(applications-13, 000-11)
amod(applications-13, remaining-12)
appos(4-9, applications-13)
mark(do-15, to-14)
acl(applications-13, do-15)
dobj(do-15, business-16)
punct(shut-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#they

plow :: The profit has been plowed back into the bank , which has pursued its mission -- to rebuild a decaying neighborhood -- with a singular focus ./.
det(profit-2, The-1)
nsubjpass(plowed-5, profit-2)
nsubj:xsubj(rebuild-18, profit-2)
aux(plowed-5, has-3)
auxpass(plowed-5, been-4)
root(ROOT-0, plowed-5)
advmod(plowed-5, back-6)
case(bank-9, into-7)
det(bank-9, the-8)
nmod:into(plowed-5, bank-9)
nsubj(pursued-13, bank-9)
punct(bank-9, ,-10)
ref(bank-9, which-11)
aux(pursued-13, has-12)
acl:relcl(bank-9, pursued-13)
nmod:poss(mission-15, its-14)
dobj(pursued-13, mission-15)
punct(bank-9, ---16)
mark(rebuild-18, to-17)
xcomp(plowed-5, rebuild-18)
det(neighborhood-21, a-19)
amod(neighborhood-21, decaying-20)
dobj(rebuild-18, neighborhood-21)
punct(rebuild-18, ---22)
case(focus-26, with-23)
det(focus-26, a-24)
amod(focus-26, singular-25)
nmod:with(rebuild-18, focus-26)
punct(plowed-5, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#profit

plow :: `` Americans regard as safe something you could plow into a wall without hurting yourself , '' he said ./.
punct(said-19, ``-1)
nsubj(regard-3, Americans-2)
ccomp(said-19, regard-3)
case(something-6, as-4)
amod(something-6, safe-5)
nmod:as(regard-3, something-6)
nsubj(plow-9, you-7)
aux(plow-9, could-8)
acl:relcl(something-6, plow-9)
case(wall-12, into-10)
det(wall-12, a-11)
nmod:into(plow-9, wall-12)
mark(hurting-14, without-13)
advcl(plow-9, hurting-14)
dobj(hurting-14, yourself-15)
punct(said-19, ,-16)
punct(said-19, ''-17)
nsubj(said-19, he-18)
root(ROOT-0, said-19)
punct(said-19, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#you

plow :: They plow through their copy like farmers trying to meet a quota ./.
nsubj(plow-2, They-1)
root(ROOT-0, plow-2)
case(copy-5, through-3)
nmod:poss(copy-5, their-4)
nmod:through(plow-2, copy-5)
case(farmers-7, like-6)
nmod:like(plow-2, farmers-7)
acl(farmers-7, trying-8)
mark(meet-10, to-9)
xcomp(trying-8, meet-10)
det(quota-12, a-11)
dobj(meet-10, quota-12)
punct(plow-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#they

plow :: `` And available funds are being plowed into mortar , brick and tar , '' says chief of research David Swenson ./.
punct(plowed-7, ``-1)
cc(plowed-7, And-2)
amod(funds-4, available-3)
nsubjpass(plowed-7, funds-4)
aux(plowed-7, are-5)
auxpass(plowed-7, being-6)
dep(says-16, plowed-7)
case(mortar-9, into-8)
nmod:into(plowed-7, mortar-9)
punct(mortar-9, ,-10)
nmod:into(plowed-7, brick-11)
conj:and(mortar-9, brick-11)
cc(mortar-9, and-12)
nmod:into(plowed-7, tar-13)
conj:and(mortar-9, tar-13)
punct(plowed-7, ,-14)
punct(plowed-7, ''-15)
root(ROOT-0, says-16)
nsubj(says-16, chief-17)
case(Swenson-21, of-18)
compound(Swenson-21, research-19)
compound(Swenson-21, David-20)
nmod:of(chief-17, Swenson-21)
punct(says-16, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#funds

plow :: But sometimes there is a loosening of former rigidities: The communists once declared golf a capitalist evil and plowed up courses to plant crops ./.
cc(is-4, But-1)
advmod(is-4, sometimes-2)
expl(is-4, there-3)
root(ROOT-0, is-4)
det(loosening-6, a-5)
nsubj(is-4, loosening-6)
case(rigidities-9, of-7)
amod(rigidities-9, former-8)
nmod:of(loosening-6, rigidities-9)
punct(is-4, :-10)
det(communists-12, The-11)
nsubj(declared-14, communists-12)
advmod(declared-14, once-13)
parataxis(is-4, declared-14)
dobj(declared-14, golf-15)
det(evil-18, a-16)
amod(evil-18, capitalist-17)
dobj(golf-15, evil-18)
cc(golf-15, and-19)
dobj(declared-14, plowed-20)
conj:and(golf-15, plowed-20)
compound:prt(plowed-20, up-21)
dobj(plowed-20, courses-22)
case(crops-25, to-23)
compound(crops-25, plant-24)
nmod:to(courses-22, crops-25)
punct(is-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#courses

plow :: When Chief Gates plowed into the front room , which also served as a play area , the only people inside were two women and three small children , two of whom were eating ice cream ./.
advmod(plowed-4, When-1)
amod(Gates-3, Chief-2)
nsubj(plowed-4, Gates-3)
root(ROOT-0, plowed-4)
case(room-8, into-5)
det(room-8, the-6)
amod(room-8, front-7)
nmod:into(plowed-4, room-8)
nsubj(served-12, room-8)
punct(room-8, ,-9)
ref(room-8, which-10)
advmod(served-12, also-11)
acl:relcl(room-8, served-12)
case(area-16, as-13)
det(area-16, a-14)
compound(area-16, play-15)
nmod:as(served-12, area-16)
punct(plowed-4, ,-17)
det(people-20, the-18)
amod(people-20, only-19)
root(,-17, people-20)
mark(women-24, inside-21)
cop(women-24, were-22)
nummod(women-24, two-23)
dep(people-20, women-24)
nmod:of(two-30, women-24)
cc(women-24, and-25)
nummod(children-28, three-26)
amod(children-28, small-27)
dep(people-20, children-28)
conj:and(women-24, children-28)
nmod:of(two-30, children-28)
punct(women-24, ,-29)
nsubj(eating-34, two-30)
case(whom-32, of-31)
ref(women-24, whom-32)
aux(eating-34, were-33)
acl:relcl(women-24, eating-34)
compound(cream-36, ice-35)
dobj(eating-34, cream-36)
punct(people-20, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#gates

plow :: Mr. Williams thus launched a divestiture binge that ended only last year , ultimately raising more than $ 1.2 billion in cash -- money that the company plowed not only into reducing debt and upgrading its its natural-gas pipelines , but also into transforming old pipelines into new telephone lines ./.
compound(Williams-2, Mr.-1)
nsubj(launched-4, Williams-2)
advmod(launched-4, thus-3)
root(ROOT-0, launched-4)
det(binge-7, a-5)
compound(binge-7, divestiture-6)
dobj(launched-4, binge-7)
nsubj(ended-9, binge-7)
ref(binge-7, that-8)
acl:relcl(binge-7, ended-9)
advmod(year-12, only-10)
amod(year-12, last-11)
nmod:tmod(ended-9, year-12)
punct(launched-4, ,-13)
advmod(raising-15, ultimately-14)
advcl(launched-4, raising-15)
advmod($-18, more-16)
mwe(more-16, than-17)
dobj(raising-15, $-18)
compound(billion-20, 1.2-19)
nummod($-18, billion-20)
case(cash-22, in-21)
nmod:in($-18, cash-22)
punct(raising-15, ---23)
dobj(raising-15, money-24)
dobj(plowed-28, money-24)
ref(money-24, that-25)
det(company-27, the-26)
nsubj(plowed-28, company-27)
acl:relcl(money-24, plowed-28)
neg(only-30, not-29)
cc:preconj(reducing-32, only-30)
mark(reducing-32, into-31)
ccomp(plowed-28, reducing-32)
dobj(reducing-32, debt-33)
cc(reducing-32, and-34)
ccomp(plowed-28, upgrading-35)
conj:and(reducing-32, upgrading-35)
nmod:poss(pipelines-39, its-36)
nmod:poss(pipelines-39, its-37)
compound(pipelines-39, natural-gas-38)
dobj(upgrading-35, pipelines-39)
punct(reducing-32, ,-40)
cc(reducing-32, but-41)
advmod(transforming-44, also-42)
mark(transforming-44, into-43)
ccomp(plowed-28, transforming-44)
conj:and(reducing-32, transforming-44)
amod(pipelines-46, old-45)
dobj(transforming-44, pipelines-46)
case(lines-50, into-47)
amod(lines-50, new-48)
compound(lines-50, telephone-49)
nmod:into(transforming-44, lines-50)
punct(launched-4, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#money

plow :: As a result , Drexel is plowing more money into leveraged buy-outs , employee buy-outs and other friendly transactions ./.
case(result-3, As-1)
det(result-3, a-2)
nmod:as(plowing-7, result-3)
punct(plowing-7, ,-4)
nsubj(plowing-7, Drexel-5)
aux(plowing-7, is-6)
root(ROOT-0, plowing-7)
amod(money-9, more-8)
dobj(plowing-7, money-9)
case(buy-outs-12, into-10)
amod(buy-outs-12, leveraged-11)
nmod:into(plowing-7, buy-outs-12)
punct(buy-outs-12, ,-13)
compound(buy-outs-15, employee-14)
nmod:into(plowing-7, buy-outs-15)
conj:and(buy-outs-12, buy-outs-15)
cc(buy-outs-12, and-16)
amod(transactions-19, other-17)
amod(transactions-19, friendly-18)
nmod:into(plowing-7, transactions-19)
conj:and(buy-outs-12, transactions-19)
punct(plowing-7, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#money

plow :: The expansion is further evidence of Quantum 's intent to plow resources into its basic chemical operations now that it has made its exit from the wine and spirits business ./.
det(expansion-2, The-1)
nsubj(evidence-5, expansion-2)
cop(evidence-5, is-3)
amod(evidence-5, further-4)
root(ROOT-0, evidence-5)
case(intent-9, of-6)
nmod:poss(intent-9, Quantum-7)
case(Quantum-7, 's-8)
nmod:of(evidence-5, intent-9)
mark(plow-11, to-10)
acl(intent-9, plow-11)
dobj(plow-11, resources-12)
case(operations-17, into-13)
nmod:poss(operations-17, its-14)
amod(operations-17, basic-15)
compound(operations-17, chemical-16)
nmod:into(plow-11, operations-17)
advmod(made-22, now-18)
mark(made-22, that-19)
nsubj(made-22, it-20)
aux(made-22, has-21)
advcl(plow-11, made-22)
nmod:poss(exit-24, its-23)
dobj(made-22, exit-24)
case(business-30, from-25)
det(business-30, the-26)
compound(business-30, wine-27)
cc(wine-27, and-28)
conj:and(wine-27, spirits-29)
compound(business-30, spirits-29)
nmod:from(made-22, business-30)
punct(evidence-5, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#resources

plow :: In retelling the story of Freud 's life and work , Peter Gay plows a furrow already dug deep by many previous Freud biographers and historians of psychoanalysis ./.
mark(retelling-2, In-1)
advcl(plows-14, retelling-2)
det(story-4, the-3)
dobj(retelling-2, story-4)
case(life-8, of-5)
nmod:poss(life-8, Freud-6)
case(Freud-6, 's-7)
nmod:of(story-4, life-8)
cc(life-8, and-9)
nmod:of(story-4, work-10)
conj:and(life-8, work-10)
punct(plows-14, ,-11)
compound(Gay-13, Peter-12)
nsubj(plows-14, Gay-13)
root(ROOT-0, plows-14)
det(furrow-16, a-15)
nsubj(dug-18, furrow-16)
advmod(dug-18, already-17)
ccomp(plows-14, dug-18)
xcomp(dug-18, deep-19)
case(biographers-24, by-20)
amod(biographers-24, many-21)
amod(biographers-24, previous-22)
compound(biographers-24, Freud-23)
nmod:by(dug-18, biographers-24)
cc(biographers-24, and-25)
nmod:by(dug-18, historians-26)
conj:and(biographers-24, historians-26)
case(psychoanalysis-28, of-27)
nmod:of(historians-26, psychoanalysis-28)
punct(plows-14, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#gay

plow :: The pilots ' union has retained the accounting firm of Touche , Ross & Co. to plow through Texas Air 's financial reports ./.
det(pilots-2, The-1)
nmod:poss(union-4, pilots-2)
case(pilots-2, '-3)
nsubj(retained-6, union-4)
aux(retained-6, has-5)
root(ROOT-0, retained-6)
det(firm-9, the-7)
compound(firm-9, accounting-8)
dobj(retained-6, firm-9)
case(Touche-11, of-10)
nmod:of(firm-9, Touche-11)
punct(Touche-11, ,-12)
nmod:of(firm-9, Ross-13)
conj:&(Touche-11, Ross-13)
cc(Touche-11, &-14)
nmod:of(firm-9, Co.-15)
conj:&(Touche-11, Co.-15)
mark(plow-17, to-16)
acl(firm-9, plow-17)
case(reports-23, through-18)
compound(Air-20, Texas-19)
nmod:poss(reports-23, Air-20)
case(Air-20, 's-21)
amod(reports-23, financial-22)
nmod:through(plow-17, reports-23)
punct(retained-6, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#reports

plow :: `` Because the ground had long since been plowed and planted , '' he writes , `` the harvest of disunion came quickly after the thunderstorm of Lincoln 's election . ''/''
punct(came-22, ``-1)
mark(plowed-9, Because-2)
det(ground-4, the-3)
nsubjpass(plowed-9, ground-4)
nsubjpass(planted-11, ground-4)
aux(plowed-9, had-5)
advmod(plowed-9, long-6)
advmod(plowed-9, since-7)
auxpass(plowed-9, been-8)
advcl(came-22, plowed-9)
cc(plowed-9, and-10)
conj:and(plowed-9, planted-11)
advcl(came-22, planted-11)
punct(writes-15, ,-12)
punct(writes-15, ''-13)
nsubj(writes-15, he-14)
parataxis(came-22, writes-15)
punct(writes-15, ,-16)
punct(came-22, ``-17)
det(harvest-19, the-18)
nsubj(came-22, harvest-19)
case(disunion-21, of-20)
nmod:of(harvest-19, disunion-21)
root(ROOT-0, came-22)
advmod(came-22, quickly-23)
case(thunderstorm-26, after-24)
det(thunderstorm-26, the-25)
nmod:after(came-22, thunderstorm-26)
case(election-30, of-27)
nmod:poss(election-30, Lincoln-28)
case(Lincoln-28, 's-29)
nmod:of(thunderstorm-26, election-30)
punct(came-22, .-31)
punct(came-22, ''-32)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: plow#ground

plow :: Much of Mr. Jackson 's money is being plowed back into a direct-mail program , which reportedly is growing rapidly ./.
nsubjpass(plowed-9, Much-1)
case(money-6, of-2)
compound(Jackson-4, Mr.-3)
nmod:poss(money-6, Jackson-4)
case(Jackson-4, 's-5)
nmod:of(Much-1, money-6)
aux(plowed-9, is-7)
auxpass(plowed-9, being-8)
root(ROOT-0, plowed-9)
advmod(plowed-9, back-10)
case(program-14, into-11)
det(program-14, a-12)
amod(program-14, direct-mail-13)
nmod:into(plowed-9, program-14)
nsubj(growing-19, program-14)
punct(program-14, ,-15)
ref(program-14, which-16)
advmod(growing-19, reportedly-17)
aux(growing-19, is-18)
acl:relcl(program-14, growing-19)
advmod(growing-19, rapidly-20)
punct(plowed-9, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#much

plow :: Though the company 's cash flow looks healthy on paper , one analyst said , much of it has to be plowed back into operations ./.
mark(looks-7, Though-1)
det(company-3, the-2)
nmod:poss(flow-6, company-3)
case(company-3, 's-4)
compound(flow-6, cash-5)
nsubj(looks-7, flow-6)
advcl(has-19, looks-7)
xcomp(looks-7, healthy-8)
case(paper-10, on-9)
nmod:on(looks-7, paper-10)
punct(said-14, ,-11)
nummod(analyst-13, one-12)
nsubj(said-14, analyst-13)
parataxis(has-19, said-14)
punct(said-14, ,-15)
nsubj(has-19, much-16)
nsubjpass:xsubj(plowed-22, much-16)
case(it-18, of-17)
nmod:of(much-16, it-18)
root(ROOT-0, has-19)
mark(plowed-22, to-20)
auxpass(plowed-22, be-21)
xcomp(has-19, plowed-22)
advmod(plowed-22, back-23)
case(operations-25, into-24)
nmod:into(back-23, operations-25)
punct(has-19, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#be

plow :: The Air Florida pilots cursed for posterity on the cockpit recorder , decided to take off even though they knew the wings of the plane were dangerously icy , and plowed their plane into a bridge ./.
det(pilots-4, The-1)
compound(pilots-4, Air-2)
compound(pilots-4, Florida-3)
nsubj(cursed-5, pilots-4)
nsubj(decided-13, pilots-4)
nsubj:xsubj(take-15, pilots-4)
nsubj(plowed-31, pilots-4)
root(ROOT-0, cursed-5)
case(posterity-7, for-6)
nmod:for(cursed-5, posterity-7)
case(recorder-11, on-8)
det(recorder-11, the-9)
compound(recorder-11, cockpit-10)
nmod:on(posterity-7, recorder-11)
punct(cursed-5, ,-12)
conj:and(cursed-5, decided-13)
mark(take-15, to-14)
xcomp(decided-13, take-15)
compound:prt(take-15, off-16)
advmod(knew-20, even-17)
mark(knew-20, though-18)
nsubj(knew-20, they-19)
advcl(take-15, knew-20)
det(wings-22, the-21)
nsubj(icy-28, wings-22)
case(plane-25, of-23)
det(plane-25, the-24)
nmod:of(wings-22, plane-25)
cop(icy-28, were-26)
advmod(icy-28, dangerously-27)
ccomp(knew-20, icy-28)
punct(cursed-5, ,-29)
cc(cursed-5, and-30)
conj:and(cursed-5, plowed-31)
nmod:poss(plane-33, their-32)
dobj(plowed-31, plane-33)
case(bridge-36, into-34)
det(bridge-36, a-35)
nmod:into(plowed-31, bridge-36)
punct(cursed-5, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#plane

plow :: Early last month , U.S. investors such as Rockefeller Foundation and Equitable Capital Management Corp. plowed $ 225 million into Advent Corp. 's International Network Fund ./.
advmod(month-3, Early-1)
amod(month-3, last-2)
nmod:tmod(plowed-16, month-3)
punct(plowed-16, ,-4)
compound(investors-6, U.S.-5)
nsubj(plowed-16, investors-6)
case(Foundation-10, such-7)
mwe(such-7, as-8)
compound(Foundation-10, Rockefeller-9)
nmod:such_as(investors-6, Foundation-10)
cc(Foundation-10, and-11)
compound(Corp.-15, Equitable-12)
compound(Corp.-15, Capital-13)
compound(Corp.-15, Management-14)
nmod:such_as(investors-6, Corp.-15)
conj:and(Foundation-10, Corp.-15)
root(ROOT-0, plowed-16)
dobj(plowed-16, $-17)
compound(million-19, 225-18)
nummod($-17, million-19)
case(Fund-26, into-20)
compound(Corp.-22, Advent-21)
nmod:poss(Fund-26, Corp.-22)
case(Corp.-22, 's-23)
amod(Fund-26, International-24)
compound(Fund-26, Network-25)
nmod:into(plowed-16, Fund-26)
punct(plowed-16, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#$

plow :: He was tested for drugs after running a stop signal and plowing his freight train into a passenger train , killing 16 people ./.
nsubjpass(tested-3, He-1)
auxpass(tested-3, was-2)
root(ROOT-0, tested-3)
case(drugs-5, for-4)
nmod:for(tested-3, drugs-5)
mark(running-7, after-6)
advcl(tested-3, running-7)
det(signal-10, a-8)
compound(signal-10, stop-9)
dobj(running-7, signal-10)
cc(running-7, and-11)
advcl(tested-3, plowing-12)
conj:and(running-7, plowing-12)
nmod:poss(train-15, his-13)
compound(train-15, freight-14)
dobj(plowing-12, train-15)
case(train-19, into-16)
det(train-19, a-17)
compound(train-19, passenger-18)
nmod:into(plowing-12, train-19)
punct(running-7, ,-20)
advcl(running-7, killing-21)
nummod(people-23, 16-22)
dobj(killing-21, people-23)
punct(tested-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#train

plow :: He plowed afoot behind a mule , picked cotton and hoed peanuts ./.
nsubj(plowed-2, He-1)
nsubj(picked-8, He-1)
nsubj(hoed-11, He-1)
root(ROOT-0, plowed-2)
advmod(plowed-2, afoot-3)
case(mule-6, behind-4)
det(mule-6, a-5)
nmod:behind(plowed-2, mule-6)
punct(plowed-2, ,-7)
conj:and(plowed-2, picked-8)
dobj(picked-8, cotton-9)
cc(plowed-2, and-10)
conj:and(plowed-2, hoed-11)
dobj(hoed-11, peanuts-12)
punct(plowed-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#he

plow :: In retelling the story of Freud 's life and work , Peter Gay plows a furrow already dug deep by many previous Freud biographers and historians of psychoanalysis ./.
mark(retelling-2, In-1)
advcl(plows-14, retelling-2)
det(story-4, the-3)
dobj(retelling-2, story-4)
case(life-8, of-5)
nmod:poss(life-8, Freud-6)
case(Freud-6, 's-7)
nmod:of(story-4, life-8)
cc(life-8, and-9)
nmod:of(story-4, work-10)
conj:and(life-8, work-10)
punct(plows-14, ,-11)
compound(Gay-13, Peter-12)
nsubj(plows-14, Gay-13)
root(ROOT-0, plows-14)
det(furrow-16, a-15)
nsubj(dug-18, furrow-16)
advmod(dug-18, already-17)
ccomp(plows-14, dug-18)
xcomp(dug-18, deep-19)
case(biographers-24, by-20)
amod(biographers-24, many-21)
amod(biographers-24, previous-22)
compound(biographers-24, Freud-23)
nmod:by(dug-18, biographers-24)
cc(biographers-24, and-25)
nmod:by(dug-18, historians-26)
conj:and(biographers-24, historians-26)
case(psychoanalysis-28, of-27)
nmod:of(historians-26, psychoanalysis-28)
punct(plows-14, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#gay

plow :: The pilots ' union has retained the accounting firm of Touche , Ross & Co. to plow through Texas Air 's financial reports ./.
det(pilots-2, The-1)
nmod:poss(union-4, pilots-2)
case(pilots-2, '-3)
nsubj(retained-6, union-4)
aux(retained-6, has-5)
root(ROOT-0, retained-6)
det(firm-9, the-7)
compound(firm-9, accounting-8)
dobj(retained-6, firm-9)
case(Touche-11, of-10)
nmod:of(firm-9, Touche-11)
punct(Touche-11, ,-12)
nmod:of(firm-9, Ross-13)
conj:&(Touche-11, Ross-13)
cc(Touche-11, &-14)
nmod:of(firm-9, Co.-15)
conj:&(Touche-11, Co.-15)
mark(plow-17, to-16)
acl(firm-9, plow-17)
case(reports-23, through-18)
compound(Air-20, Texas-19)
nmod:poss(reports-23, Air-20)
case(Air-20, 's-21)
amod(reports-23, financial-22)
nmod:through(plow-17, reports-23)
punct(retained-6, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#reports

plow :: It knocked her down , ran over her leg and plowed into some parked cars , hurtling her six-week-old son off the front seat ./.
nsubj(knocked-2, It-1)
nsubj(ran-6, It-1)
nsubj(plowed-11, It-1)
root(ROOT-0, knocked-2)
dobj(knocked-2, her-3)
compound:prt(knocked-2, down-4)
punct(knocked-2, ,-5)
conj:and(knocked-2, ran-6)
case(leg-9, over-7)
nmod:poss(leg-9, her-8)
nmod:over(ran-6, leg-9)
cc(knocked-2, and-10)
conj:and(knocked-2, plowed-11)
case(cars-15, into-12)
det(cars-15, some-13)
amod(cars-15, parked-14)
nmod:into(plowed-11, cars-15)
punct(knocked-2, ,-16)
advcl(knocked-2, hurtling-17)
nmod:poss(son-20, her-18)
amod(son-20, six-week-old-19)
dobj(hurtling-17, son-20)
case(seat-24, off-21)
det(seat-24, the-22)
amod(seat-24, front-23)
nmod:off(hurtling-17, seat-24)
punct(knocked-2, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#it

plow :: But the $ 40 billion of accumulated losses at insolvent S & Ls would plow under both funds ./.
cc(plow-15, But-1)
det($-3, the-2)
nsubj(plow-15, $-3)
compound(billion-5, 40-4)
nummod($-3, billion-5)
case(losses-8, of-6)
amod(losses-8, accumulated-7)
nmod:of($-3, losses-8)
case(S-11, at-9)
amod(S-11, insolvent-10)
nmod:at(losses-8, S-11)
cc(S-11, &-12)
nmod:at(losses-8, Ls-13)
conj:&(S-11, Ls-13)
aux(plow-15, would-14)
root(ROOT-0, plow-15)
case(funds-18, under-16)
det(funds-18, both-17)
nmod:under(plow-15, funds-18)
punct(plow-15, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#$

plow :: Later they were burned as railroad fuel and plowed under as fertilizer ./.
advmod(burned-4, Later-1)
nsubjpass(burned-4, they-2)
nsubjpass(plowed-9, they-2)
auxpass(burned-4, were-3)
root(ROOT-0, burned-4)
case(fuel-7, as-5)
compound(fuel-7, railroad-6)
nmod:as(burned-4, fuel-7)
cc(burned-4, and-8)
conj:and(burned-4, plowed-9)
compound:prt(plowed-9, under-10)
case(fertilizer-12, as-11)
nmod:as(plowed-9, fertilizer-12)
punct(burned-4, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#they

plow :: Early last month , U.S. investors such as Rockefeller Foundation and Equitable Capital Management Corp. plowed $ 225 million into Advent Corp. 's International Network Fund ./.
advmod(month-3, Early-1)
amod(month-3, last-2)
nmod:tmod(plowed-16, month-3)
punct(plowed-16, ,-4)
compound(investors-6, U.S.-5)
nsubj(plowed-16, investors-6)
case(Foundation-10, such-7)
mwe(such-7, as-8)
compound(Foundation-10, Rockefeller-9)
nmod:such_as(investors-6, Foundation-10)
cc(Foundation-10, and-11)
compound(Corp.-15, Equitable-12)
compound(Corp.-15, Capital-13)
compound(Corp.-15, Management-14)
nmod:such_as(investors-6, Corp.-15)
conj:and(Foundation-10, Corp.-15)
root(ROOT-0, plowed-16)
dobj(plowed-16, $-17)
compound(million-19, 225-18)
nummod($-17, million-19)
case(Fund-26, into-20)
compound(Corp.-22, Advent-21)
nmod:poss(Fund-26, Corp.-22)
case(Corp.-22, 's-23)
amod(Fund-26, International-24)
compound(Fund-26, Network-25)
nmod:into(plowed-16, Fund-26)
punct(plowed-16, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#$

plow :: Cray plows more than 15 % of its revenues back into R & D , a very high percentage even for high-tech companies ./.
nsubj(plows-2, Cray-1)
root(ROOT-0, plows-2)
advmod(15-5, more-3)
mwe(more-3, than-4)
nummod(%-6, 15-5)
dobj(plows-2, %-6)
case(revenues-9, of-7)
nmod:poss(revenues-9, its-8)
nmod:of(%-6, revenues-9)
advmod(plows-2, back-10)
case(R-12, into-11)
nmod:into(back-10, R-12)
cc(R-12, &-13)
nmod:into(back-10, D-14)
conj:&(R-12, D-14)
punct(R-12, ,-15)
det(percentage-19, a-16)
advmod(high-18, very-17)
amod(percentage-19, high-18)
appos(R-12, percentage-19)
advmod(companies-23, even-20)
case(companies-23, for-21)
amod(companies-23, high-tech-22)
nmod:for(percentage-19, companies-23)
punct(plows-2, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#revenues

plow :: He was tested for drugs after running a stop signal and plowing his freight train into a passenger train , killing 16 people ./.
nsubjpass(tested-3, He-1)
auxpass(tested-3, was-2)
root(ROOT-0, tested-3)
case(drugs-5, for-4)
nmod:for(tested-3, drugs-5)
mark(running-7, after-6)
advcl(tested-3, running-7)
det(signal-10, a-8)
compound(signal-10, stop-9)
dobj(running-7, signal-10)
cc(running-7, and-11)
advcl(tested-3, plowing-12)
conj:and(running-7, plowing-12)
nmod:poss(train-15, his-13)
compound(train-15, freight-14)
dobj(plowing-12, train-15)
case(train-19, into-16)
det(train-19, a-17)
compound(train-19, passenger-18)
nmod:into(plowing-12, train-19)
punct(running-7, ,-20)
advcl(running-7, killing-21)
nummod(people-23, 16-22)
dobj(killing-21, people-23)
punct(tested-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#train

plow :: Among those eliminated are stocks that do n't pay dividends , which include some fast-growing concerns that are plowing all available money into expansion ./.
case(those-2, Among-1)
nmod:among(are-4, those-2)
acl(those-2, eliminated-3)
root(ROOT-0, are-4)
nsubj(are-4, stocks-5)
nsubj(pay-9, stocks-5)
nsubj(include-13, stocks-5)
ref(stocks-5, that-6)
aux(pay-9, do-7)
neg(pay-9, n't-8)
acl:relcl(stocks-5, pay-9)
dobj(pay-9, dividends-10)
punct(stocks-5, ,-11)
ref(stocks-5, which-12)
acl:relcl(stocks-5, include-13)
det(concerns-16, some-14)
amod(concerns-16, fast-growing-15)
dobj(include-13, concerns-16)
nsubj(plowing-19, concerns-16)
ref(concerns-16, that-17)
aux(plowing-19, are-18)
acl:relcl(concerns-16, plowing-19)
det(money-22, all-20)
amod(money-22, available-21)
dobj(plowing-19, money-22)
case(expansion-24, into-23)
nmod:into(plowing-19, expansion-24)
punct(are-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#money

plow :: He frets that industry 's failure to plow profits back into new capacity will constrain exports , considered by many economists as the brightest hope for maintaining U.S. growth , even if consumer spending weakens ./.
nsubj(frets-2, He-1)
root(ROOT-0, frets-2)
mark(constrain-15, that-3)
nmod:poss(failure-6, industry-4)
case(industry-4, 's-5)
nsubj(constrain-15, failure-6)
mark(plow-8, to-7)
acl(failure-6, plow-8)
dobj(plow-8, profits-9)
advmod(plow-8, back-10)
case(capacity-13, into-11)
amod(capacity-13, new-12)
nmod:into(back-10, capacity-13)
aux(constrain-15, will-14)
ccomp(frets-2, constrain-15)
dobj(constrain-15, exports-16)
punct(exports-16, ,-17)
acl(exports-16, considered-18)
case(economists-21, by-19)
amod(economists-21, many-20)
nmod:by(considered-18, economists-21)
case(hope-25, as-22)
det(hope-25, the-23)
amod(hope-25, brightest-24)
nmod:as(considered-18, hope-25)
mark(maintaining-27, for-26)
acl(hope-25, maintaining-27)
compound(growth-29, U.S.-28)
dobj(maintaining-27, growth-29)
punct(exports-16, ,-30)
advmod(weakens-35, even-31)
mark(weakens-35, if-32)
compound(spending-34, consumer-33)
nsubj(weakens-35, spending-34)
advcl(constrain-15, weakens-35)
punct(frets-2, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#profits

plow :: He plowed afoot behind a mule , picked cotton and hoed peanuts ./.
nsubj(plowed-2, He-1)
nsubj(picked-8, He-1)
nsubj(hoed-11, He-1)
root(ROOT-0, plowed-2)
advmod(plowed-2, afoot-3)
case(mule-6, behind-4)
det(mule-6, a-5)
nmod:behind(plowed-2, mule-6)
punct(plowed-2, ,-7)
conj:and(plowed-2, picked-8)
dobj(picked-8, cotton-9)
cc(plowed-2, and-10)
conj:and(plowed-2, hoed-11)
dobj(hoed-11, peanuts-12)
punct(plowed-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#he

plow :: The speculation centers on whether some farmers would plow under their wheat crop , some of which is nearing harvest , to make the switch in time to grow soybeans , said Richard Loewy , senior grain and oilseed analyst at Prudential-Bache Securities Inc . , New York ./.
det(speculation-2, The-1)
nsubj(centers-3, speculation-2)
ccomp(said-32, centers-3)
mark(plow-9, on-4)
mark(plow-9, whether-5)
det(farmers-7, some-6)
nsubj(plow-9, farmers-7)
nsubj:xsubj(make-23, farmers-7)
aux(plow-9, would-8)
advcl(centers-3, plow-9)
case(crop-13, under-10)
nmod:poss(crop-13, their-11)
compound(crop-13, wheat-12)
nmod:under(plow-9, crop-13)
punct(plow-9, ,-14)
nsubj(nearing-19, some-15)
case(which-17, of-16)
nmod:of(some-15, which-17)
aux(nearing-19, is-18)
ccomp(plow-9, nearing-19)
dobj(nearing-19, harvest-20)
punct(plow-9, ,-21)
mark(make-23, to-22)
xcomp(plow-9, make-23)
det(switch-25, the-24)
dobj(make-23, switch-25)
case(time-27, in-26)
nmod:in(make-23, time-27)
mark(grow-29, to-28)
advcl(make-23, grow-29)
dobj(grow-29, soybeans-30)
punct(said-32, ,-31)
root(ROOT-0, said-32)
compound(Loewy-34, Richard-33)
nsubj(said-32, Loewy-34)
punct(Loewy-34, ,-35)
amod(grain-37, senior-36)
appos(Loewy-34, grain-37)
cc(grain-37, and-38)
compound(analyst-40, oilseed-39)
appos(Loewy-34, analyst-40)
conj:and(grain-37, analyst-40)
case(Inc-44, at-41)
compound(Inc-44, Prudential-Bache-42)
compound(Inc-44, Securities-43)
nmod:at(grain-37, Inc-44)
punct(said-32, .-45)
punct(York-3, ,-1)
compound(York-3, New-2)
root(ROOT-0, York-3)
punct(York-3, .-4)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#farmers

plow :: Most land being farmed by FmHA borrowers would be plowed regardless of whether the FmHA ever existed ./.
amod(land-2, Most-1)
nsubjpass(farmed-4, land-2)
auxpass(farmed-4, being-3)
csubjpass(plowed-10, farmed-4)
case(borrowers-7, by-5)
compound(borrowers-7, FmHA-6)
nmod:agent(farmed-4, borrowers-7)
aux(plowed-10, would-8)
auxpass(plowed-10, be-9)
root(ROOT-0, plowed-10)
advmod(plowed-10, regardless-11)
mark(existed-17, of-12)
mark(existed-17, whether-13)
det(FmHA-15, the-14)
nsubj(existed-17, FmHA-15)
advmod(existed-17, ever-16)
advcl(regardless-11, existed-17)
punct(plowed-10, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#be

plow :: Bostonians have excuses about why their snow is worse: The snow is often wet and slippery , making it harder to plow ; narrow , winding roads , steep hills , numerous bridges and potholes make driving more treacherous ./.
nsubj(have-2, Bostonians-1)
root(ROOT-0, have-2)
dobj(have-2, excuses-3)
mark(worse-9, about-4)
advmod(worse-9, why-5)
nmod:poss(snow-7, their-6)
nsubj(worse-9, snow-7)
cop(worse-9, is-8)
acl(excuses-3, worse-9)
punct(worse-9, :-10)
det(snow-12, The-11)
nsubj(wet-15, snow-12)
nsubj(slippery-17, snow-12)
cop(wet-15, is-13)
advmod(wet-15, often-14)
ccomp(worse-9, wet-15)
cc(wet-15, and-16)
ccomp(worse-9, slippery-17)
conj:and(wet-15, slippery-17)
punct(wet-15, ,-18)
advcl(wet-15, making-19)
nsubj(plow-23, it-20)
dep(plow-23, harder-21)
mark(plow-23, to-22)
xcomp(making-19, plow-23)
punct(plow-23, ;-24)
amod(roads-28, narrow-25)
punct(roads-28, ,-26)
amod(roads-28, winding-27)
nsubj(make-37, roads-28)
punct(roads-28, ,-29)
compound(hills-31, steep-30)
conj:and(roads-28, hills-31)
nsubj(make-37, hills-31)
punct(roads-28, ,-32)
amod(bridges-34, numerous-33)
conj:and(roads-28, bridges-34)
nsubj(make-37, bridges-34)
cc(roads-28, and-35)
conj:and(roads-28, potholes-36)
nsubj(make-37, potholes-36)
parataxis(plow-23, make-37)
xcomp(make-37, driving-38)
advmod(treacherous-40, more-39)
xcomp(driving-38, treacherous-40)
punct(have-2, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: plow#it

pour :: They poured gasoline over the pile and set it on fire ./.
nsubj(poured-2, They-1)
nsubj(set-8, They-1)
root(ROOT-0, poured-2)
dobj(poured-2, gasoline-3)
case(pile-6, over-4)
det(pile-6, the-5)
nmod:over(poured-2, pile-6)
cc(poured-2, and-7)
conj:and(poured-2, set-8)
dobj(set-8, it-9)
case(fire-11, on-10)
nmod:on(set-8, fire-11)
punct(poured-2, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#gasoline

pour :: As manufacturers get bigger , they are likely to pour more money into the battle for shelf space , raising the ante for new players ./.
mark(get-3, As-1)
nsubj(get-3, manufacturers-2)
advcl(likely-8, get-3)
xcomp(get-3, bigger-4)
punct(likely-8, ,-5)
nsubj(likely-8, they-6)
nsubj:xsubj(pour-10, they-6)
cop(likely-8, are-7)
root(ROOT-0, likely-8)
mark(pour-10, to-9)
xcomp(likely-8, pour-10)
amod(money-12, more-11)
dobj(pour-10, money-12)
case(battle-15, into-13)
det(battle-15, the-14)
nmod:into(pour-10, battle-15)
case(space-18, for-16)
compound(space-18, shelf-17)
nmod:for(battle-15, space-18)
punct(likely-8, ,-19)
xcomp(likely-8, raising-20)
det(ante-22, the-21)
dobj(raising-20, ante-22)
case(players-25, for-23)
amod(players-25, new-24)
nmod:for(raising-20, players-25)
punct(likely-8, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#money

pour :: This at a time when Germany is already leading a new rush to subsidize perestroika -- last week Deutsche Bank closed an agreement to pour some $ 1.9 billion of aid into Moscow 's bottomless coffers ./.
nsubj(closed-21, This-1)
case(time-4, at-2)
det(time-4, a-3)
nmod:at(closed-21, time-4)
advmod(leading-9, when-5)
nsubj(leading-9, Germany-6)
aux(leading-9, is-7)
advmod(leading-9, already-8)
acl:relcl(time-4, leading-9)
det(rush-12, a-10)
amod(rush-12, new-11)
dobj(leading-9, rush-12)
mark(subsidize-14, to-13)
acl(rush-12, subsidize-14)
dobj(subsidize-14, perestroika-15)
punct(closed-21, ---16)
amod(week-18, last-17)
nmod:tmod(closed-21, week-18)
compound(Bank-20, Deutsche-19)
nsubj(closed-21, Bank-20)
root(ROOT-0, closed-21)
det(agreement-23, an-22)
dobj(closed-21, agreement-23)
mark(pour-25, to-24)
acl(agreement-23, pour-25)
advmod($-27, some-26)
dobj(pour-25, $-27)
compound(billion-29, 1.9-28)
nummod($-27, billion-29)
case(aid-31, of-30)
nmod:of($-27, aid-31)
case(coffers-36, into-32)
nmod:poss(coffers-36, Moscow-33)
case(Moscow-33, 's-34)
amod(coffers-36, bottomless-35)
nmod:into(pour-25, coffers-36)
punct(closed-21, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#aid

pour :: More than $ 5 million is being poured into this year 's campaign , political insiders estimate , making it a hugely expensive municipal debate ./.
advmod($-3, More-1)
mwe(More-1, than-2)
nsubjpass(poured-8, $-3)
compound(million-5, 5-4)
nummod($-3, million-5)
aux(poured-8, is-6)
auxpass(poured-8, being-7)
ccomp(estimate-17, poured-8)
case(campaign-13, into-9)
det(year-11, this-10)
nmod:poss(campaign-13, year-11)
case(year-11, 's-12)
nmod:into(poured-8, campaign-13)
punct(estimate-17, ,-14)
amod(insiders-16, political-15)
nsubj(estimate-17, insiders-16)
root(ROOT-0, estimate-17)
punct(estimate-17, ,-18)
xcomp(estimate-17, making-19)
nsubj(debate-25, it-20)
det(debate-25, a-21)
advmod(expensive-23, hugely-22)
amod(debate-25, expensive-23)
amod(debate-25, municipal-24)
xcomp(making-19, debate-25)
punct(estimate-17, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#$

pour :: `` Cold water has been poured on the market and any advance has been stopped dead in its tracks , '' one dealer said ./.
punct(said-24, ``-1)
amod(water-3, Cold-2)
nsubjpass(poured-6, water-3)
aux(poured-6, has-4)
auxpass(poured-6, been-5)
ccomp(said-24, poured-6)
case(market-9, on-7)
det(market-9, the-8)
nmod:on(poured-6, market-9)
cc(poured-6, and-10)
det(advance-12, any-11)
nsubjpass(stopped-15, advance-12)
aux(stopped-15, has-13)
auxpass(stopped-15, been-14)
conj:and(poured-6, stopped-15)
ccomp(said-24, stopped-15)
compound:prt(stopped-15, dead-16)
case(tracks-19, in-17)
nmod:poss(tracks-19, its-18)
nmod:in(stopped-15, tracks-19)
punct(said-24, ,-20)
punct(said-24, ''-21)
nummod(dealer-23, one-22)
nsubj(said-24, dealer-23)
root(ROOT-0, said-24)
punct(said-24, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#water

pour :: A military group led by two men described as supporters of former ruler Ne Win took power in embattled Burma , and angry citizens armed with homemade weapons poured into Rangoon 's streets to reject the new regime only hours after it was announced ./.
det(group-3, A-1)
amod(group-3, military-2)
nsubj(Win-15, group-3)
acl(group-3, led-4)
case(men-7, by-5)
nummod(men-7, two-6)
nmod:by(led-4, men-7)
acl(men-7, described-8)
case(supporters-10, as-9)
nmod:as(described-8, supporters-10)
case(Ne-14, of-11)
amod(Ne-14, former-12)
compound(Ne-14, ruler-13)
nmod:of(supporters-10, Ne-14)
root(ROOT-0, Win-15)
ccomp(Win-15, took-16)
dobj(took-16, power-17)
case(Burma-20, in-18)
amod(Burma-20, embattled-19)
nmod:in(took-16, Burma-20)
punct(took-16, ,-21)
cc(took-16, and-22)
amod(citizens-24, angry-23)
nsubj(poured-29, citizens-24)
nsubj:xsubj(reject-35, citizens-24)
acl(citizens-24, armed-25)
case(weapons-28, with-26)
compound(weapons-28, homemade-27)
nmod:with(armed-25, weapons-28)
ccomp(Win-15, poured-29)
conj:and(took-16, poured-29)
case(streets-33, into-30)
nmod:poss(streets-33, Rangoon-31)
case(Rangoon-31, 's-32)
nmod:into(poured-29, streets-33)
mark(reject-35, to-34)
xcomp(poured-29, reject-35)
det(regime-38, the-36)
amod(regime-38, new-37)
dobj(reject-35, regime-38)
amod(hours-40, only-39)
nmod:tmod(reject-35, hours-40)
mark(announced-44, after-41)
nsubjpass(announced-44, it-42)
auxpass(announced-44, was-43)
acl(hours-40, announced-44)
punct(Win-15, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#citizens

pour :: A military group described as supporting former leader Ne Win ousted Burma 's civilian president , and thousands of citizens armed with homemade weapons poured into Rangoon 's streets to reject the regime , the fourth in two months ./.
det(group-3, A-1)
amod(group-3, military-2)
nsubj(poured-25, group-3)
nsubj:xsubj(reject-31, group-3)
acl(group-3, described-4)
mark(supporting-6, as-5)
advcl(described-4, supporting-6)
amod(Ne-9, former-7)
compound(Ne-9, leader-8)
nsubj(ousted-11, Ne-9)
aux(ousted-11, Win-10)
ccomp(supporting-6, ousted-11)
nmod:poss(president-15, Burma-12)
case(Burma-12, 's-13)
amod(president-15, civilian-14)
dobj(ousted-11, president-15)
punct(group-3, ,-16)
cc(group-3, and-17)
conj:and(group-3, thousands-18)
nsubj(poured-25, thousands-18)
nsubj:xsubj(reject-31, thousands-18)
case(citizens-20, of-19)
nmod:of(thousands-18, citizens-20)
acl(thousands-18, armed-21)
case(weapons-24, with-22)
compound(weapons-24, homemade-23)
nmod:with(armed-21, weapons-24)
root(ROOT-0, poured-25)
case(streets-29, into-26)
nmod:poss(streets-29, Rangoon-27)
case(Rangoon-27, 's-28)
nmod:into(poured-25, streets-29)
mark(reject-31, to-30)
xcomp(poured-25, reject-31)
det(regime-33, the-32)
dobj(reject-31, regime-33)
punct(poured-25, ,-34)
det(fourth-36, the-35)
root(,-34, fourth-36)
case(months-39, in-37)
nummod(months-39, two-38)
nmod:in(fourth-36, months-39)
punct(fourth-36, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#group

pour :: Securities firms and banks have long poured money into the coffers of state and local officials to improve their chances of getting municipal finance business ./.
compound(firms-2, Securities-1)
nsubj(have-5, firms-2)
cc(firms-2, and-3)
conj:and(firms-2, banks-4)
nsubj(have-5, banks-4)
root(ROOT-0, have-5)
advmod(poured-7, long-6)
ccomp(have-5, poured-7)
dobj(poured-7, money-8)
case(coffers-11, into-9)
det(coffers-11, the-10)
nmod:into(poured-7, coffers-11)
case(officials-16, of-12)
compound(officials-16, state-13)
cc(state-13, and-14)
conj:and(state-13, local-15)
compound(officials-16, local-15)
nmod:of(coffers-11, officials-16)
mark(improve-18, to-17)
advcl(poured-7, improve-18)
nmod:poss(chances-20, their-19)
dobj(improve-18, chances-20)
mark(getting-22, of-21)
acl(chances-20, getting-22)
amod(business-25, municipal-23)
compound(business-25, finance-24)
dobj(getting-22, business-25)
punct(have-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#money

pour :: Re your page-one story `` To Mark Year 2000 , Some Events Will Be Out of This World , '' June 27: I 'd hate to pour water on anybody 's millennial observance , but 2000 is the last year of the 20th century ./.
root(ROOT-0, Re-1)
nmod:poss(story-4, your-2)
compound(story-4, page-one-3)
dep(Re-1, story-4)
punct(story-4, ``-5)
case(Year-8, To-6)
compound(Year-8, Mark-7)
nmod:to(story-4, Year-8)
nummod(Year-8, 2000-9)
punct(story-4, ,-10)
det(Events-12, Some-11)
appos(story-4, Events-12)
acl(Events-12, Will-13)
root(Will-13, Be-14)
case(World-18, Out-15)
mwe(Out-15, of-16)
det(World-18, This-17)
nmod:out_of(Be-14, World-18)
punct(Be-14, ,-19)
root(,-19, ''-20)
root(''-20, June-21)
nummod(June-21, 27-22)
punct(June-21, :-23)
nsubj(hate-26, I-24)
nsubj:xsubj(pour-28, I-24)
aux(hate-26, 'd-25)
parataxis(June-21, hate-26)
mark(pour-28, to-27)
xcomp(hate-26, pour-28)
dobj(pour-28, water-29)
case(observance-34, on-30)
nmod:poss(observance-34, anybody-31)
case(anybody-31, 's-32)
amod(observance-34, millennial-33)
nmod:on(pour-28, observance-34)
punct(hate-26, ,-35)
cc(hate-26, but-36)
nsubj(year-41, 2000-37)
cop(year-41, is-38)
det(year-41, the-39)
amod(year-41, last-40)
parataxis(June-21, year-41)
conj:but(hate-26, year-41)
case(century-45, of-42)
det(century-45, the-43)
amod(century-45, 20th-44)
nmod:of(year-41, century-45)
punct(June-21, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#water

pour :: Salsa and rap music pour out of the windows ./.
compound(music-4, Salsa-1)
cc(Salsa-1, and-2)
conj:and(Salsa-1, rap-3)
compound(music-4, rap-3)
nsubj(pour-5, music-4)
root(ROOT-0, pour-5)
case(windows-9, out-6)
mwe(out-6, of-7)
det(windows-9, the-8)
nmod:out_of(pour-5, windows-9)
punct(pour-5, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#music

pour :: In recent years , Drexel has poured far more resources into areas such as high-yield , `` junk '' bonds , merger and acquisition advice and mortgage-backed securities ./.
case(years-3, In-1)
amod(years-3, recent-2)
nmod:in(poured-7, years-3)
punct(poured-7, ,-4)
nsubj(poured-7, Drexel-5)
aux(poured-7, has-6)
root(ROOT-0, poured-7)
advmod(more-9, far-8)
amod(resources-10, more-9)
dobj(poured-7, resources-10)
case(areas-12, into-11)
nmod:into(poured-7, areas-12)
case(high-yield-15, such-13)
mwe(such-13, as-14)
nmod:such_as(areas-12, high-yield-15)
punct(high-yield-15, ,-16)
punct(bonds-20, ``-17)
compound(bonds-20, junk-18)
punct(bonds-20, ''-19)
nmod:such_as(areas-12, bonds-20)
conj:and(high-yield-15, bonds-20)
punct(high-yield-15, ,-21)
nmod:such_as(areas-12, merger-22)
conj:and(high-yield-15, merger-22)
cc(high-yield-15, and-23)
compound(advice-25, acquisition-24)
nmod:such_as(areas-12, advice-25)
conj:and(high-yield-15, advice-25)
cc(high-yield-15, and-26)
amod(securities-28, mortgage-backed-27)
nmod:such_as(areas-12, securities-28)
conj:and(high-yield-15, securities-28)
punct(poured-7, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#resources

pour :: Thousands of delegates and reporters start pouring into the OMNI , soon to be featured in a Japanese horror movie with large flying insects winging out of the pods where Dan Rather and Peter Jennings are fighting the battle of the bores ./.
nsubj(start-6, Thousands-1)
case(delegates-3, of-2)
nmod:of(Thousands-1, delegates-3)
cc(delegates-3, and-4)
nmod:of(Thousands-1, reporters-5)
conj:and(delegates-3, reporters-5)
root(ROOT-0, start-6)
xcomp(start-6, pouring-7)
case(OMNI-10, into-8)
det(OMNI-10, the-9)
nmod:into(pouring-7, OMNI-10)
punct(start-6, ,-11)
advmod(featured-15, soon-12)
mark(featured-15, to-13)
auxpass(featured-15, be-14)
advcl(start-6, featured-15)
case(movie-20, in-16)
det(movie-20, a-17)
amod(movie-20, Japanese-18)
compound(movie-20, horror-19)
nmod:in(featured-15, movie-20)
case(insects-24, with-21)
amod(insects-24, large-22)
amod(insects-24, flying-23)
nmod:with(movie-20, insects-24)
acl(insects-24, winging-25)
case(pods-29, out-26)
mwe(out-26, of-27)
det(pods-29, the-28)
nmod:out_of(winging-25, pods-29)
acl(pods-29, where-30)
root(where-30, Dan-31)
advmod(fighting-37, Rather-32)
cc(Rather-32, and-33)
conj:and(Rather-32, Peter-34)
advmod(fighting-37, Peter-34)
nsubj(fighting-37, Jennings-35)
aux(fighting-37, are-36)
acl(Dan-31, fighting-37)
det(battle-39, the-38)
dobj(fighting-37, battle-39)
case(bores-42, of-40)
det(bores-42, the-41)
nmod:of(battle-39, bores-42)
punct(Dan-31, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#omni

pour :: NASA partisans blame the administration for allowing the civilian space agency to drift and deteriorate through the 1980s while pouring vast sums into the Pentagon ./.
compound(partisans-2, NASA-1)
nsubj(blame-3, partisans-2)
root(ROOT-0, blame-3)
det(administration-5, the-4)
dobj(blame-3, administration-5)
mark(allowing-7, for-6)
advcl(blame-3, allowing-7)
det(agency-11, the-8)
amod(agency-11, civilian-9)
compound(agency-11, space-10)
dobj(allowing-7, agency-11)
nsubj:xsubj(drift-13, agency-11)
mark(drift-13, to-12)
xcomp(allowing-7, drift-13)
cc(drift-13, and-14)
xcomp(allowing-7, deteriorate-15)
conj:and(drift-13, deteriorate-15)
case(1980s-18, through-16)
det(1980s-18, the-17)
nmod:through(drift-13, 1980s-18)
mark(pouring-20, while-19)
advcl(allowing-7, pouring-20)
amod(sums-22, vast-21)
dobj(pouring-20, sums-22)
case(Pentagon-25, into-23)
det(Pentagon-25, the-24)
nmod:into(pouring-20, Pentagon-25)
punct(blame-3, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#sums

pour :: They 've poured millions of dollars into lawmakers ' campaign coffers ./.
nsubj(poured-3, They-1)
aux(poured-3, 've-2)
root(ROOT-0, poured-3)
dobj(poured-3, millions-4)
case(dollars-6, of-5)
nmod:of(millions-4, dollars-6)
case(coffers-11, into-7)
nmod:poss(coffers-11, lawmakers-8)
case(lawmakers-8, '-9)
compound(coffers-11, campaign-10)
nmod:into(poured-3, coffers-11)
punct(poured-3, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#dollars

pour :: But it 's another thing to simply pour money into a fiscal black hole ./.
cc(thing-5, But-1)
nsubj(thing-5, it-2)
cop(thing-5, 's-3)
det(thing-5, another-4)
root(ROOT-0, thing-5)
mark(pour-8, to-6)
advmod(pour-8, simply-7)
acl(thing-5, pour-8)
dobj(pour-8, money-9)
case(hole-14, into-10)
det(hole-14, a-11)
amod(hole-14, fiscal-12)
amod(hole-14, black-13)
nmod:into(pour-8, hole-14)
punct(thing-5, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#money

pour :: China poured tens of thousands of dollars into producing the country 's first batch of U.S.-trained M.B.A.s , including Mr. Wang ./.
nsubj(poured-2, China-1)
root(ROOT-0, poured-2)
dobj(poured-2, tens-3)
case(thousands-5, of-4)
nmod:of(tens-3, thousands-5)
case(dollars-7, of-6)
nmod:of(thousands-5, dollars-7)
mark(producing-9, into-8)
advcl(poured-2, producing-9)
det(country-11, the-10)
nmod:poss(batch-14, country-11)
case(country-11, 's-12)
amod(batch-14, first-13)
dobj(producing-9, batch-14)
case(M.B.A.s-17, of-15)
amod(M.B.A.s-17, U.S.-trained-16)
nmod:of(batch-14, M.B.A.s-17)
punct(batch-14, ,-18)
case(Wang-21, including-19)
compound(Wang-21, Mr.-20)
nmod:including(batch-14, Wang-21)
punct(poured-2, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#thousands

pour :: American investors may be shunning U.S. stock funds these days , but not the Japanese ; a record $ 700 million of Japanese money this week poured into a new U.S. mutual fund ./.
amod(investors-2, American-1)
nsubj(shunning-5, investors-2)
nsubj(Japanese-15, investors-2)
aux(shunning-5, may-3)
aux(shunning-5, be-4)
root(ROOT-0, shunning-5)
compound(funds-8, U.S.-6)
compound(funds-8, stock-7)
dobj(shunning-5, funds-8)
det(days-10, these-9)
nmod:tmod(shunning-5, days-10)
punct(shunning-5, ,-11)
cc(shunning-5, but-12)
neg(Japanese-15, not-13)
det(Japanese-15, the-14)
conj:but(shunning-5, Japanese-15)
punct(shunning-5, ;-16)
det(record-18, a-17)
nsubj(poured-27, record-18)
nummod(record-18, $-19)
compound(million-21, 700-20)
nummod($-19, million-21)
case(money-24, of-22)
amod(money-24, Japanese-23)
nmod:of(record-18, money-24)
det(week-26, this-25)
nmod:tmod(record-18, week-26)
parataxis(shunning-5, poured-27)
case(fund-33, into-28)
det(fund-33, a-29)
amod(fund-33, new-30)
compound(fund-33, U.S.-31)
amod(fund-33, mutual-32)
nmod:into(poured-27, fund-33)
punct(shunning-5, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#record

pour :: Money continues to pour into venture-capital funds , but investors are becoming increasingly selective about the partnerships with which they place money ./.
nsubj(continues-2, Money-1)
nsubj:xsubj(pour-4, Money-1)
root(ROOT-0, continues-2)
mark(pour-4, to-3)
xcomp(continues-2, pour-4)
case(funds-7, into-5)
amod(funds-7, venture-capital-6)
nmod:into(pour-4, funds-7)
punct(continues-2, ,-8)
cc(continues-2, but-9)
nsubj(becoming-12, investors-10)
aux(becoming-12, are-11)
conj:but(continues-2, becoming-12)
advmod(selective-14, increasingly-13)
xcomp(becoming-12, selective-14)
case(partnerships-17, about-15)
det(partnerships-17, the-16)
nmod:about(becoming-12, partnerships-17)
nmod:with(place-21, partnerships-17)
case(which-19, with-18)
ref(partnerships-17, which-19)
nsubj(place-21, they-20)
acl:relcl(partnerships-17, place-21)
dobj(place-21, money-22)
punct(continues-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#money

pour :: It 's little wonder , then , that Susan has taken to escaping into the company of her delightfully charming , exceedingly attractive , immensely rich fantasy family: an adoring husband , a devoted daughter and a frothy younger brother whose only occupation in life is to pour yet another round of champagne -- `` champers , '' as he prefers to call it -- for the four of them ./.
nsubj(wonder-4, It-1)
cop(wonder-4, 's-2)
amod(wonder-4, little-3)
root(ROOT-0, wonder-4)
punct(wonder-4, ,-5)
advmod(wonder-4, then-6)
punct(wonder-4, ,-7)
mark(taken-11, that-8)
nsubj(taken-11, Susan-9)
aux(taken-11, has-10)
dep(wonder-4, taken-11)
mark(escaping-13, to-12)
advcl(taken-11, escaping-13)
case(company-16, into-14)
det(company-16, the-15)
nmod:into(escaping-13, company-16)
case(family-28, of-17)
nmod:poss(family-28, her-18)
advmod(charming-20, delightfully-19)
amod(family-28, charming-20)
punct(family-28, ,-21)
advmod(attractive-23, exceedingly-22)
amod(family-28, attractive-23)
punct(family-28, ,-24)
advmod(rich-26, immensely-25)
amod(family-28, rich-26)
compound(family-28, fantasy-27)
nmod:of(company-16, family-28)
punct(taken-11, :-29)
det(husband-32, an-30)
amod(husband-32, adoring-31)
dep(taken-11, husband-32)
punct(husband-32, ,-33)
det(daughter-36, a-34)
amod(daughter-36, devoted-35)
dep(taken-11, daughter-36)
conj:and(husband-32, daughter-36)
cc(husband-32, and-37)
det(brother-41, a-38)
amod(brother-41, frothy-39)
amod(brother-41, younger-40)
dep(taken-11, brother-41)
conj:and(husband-32, brother-41)
nmod:poss(occupation-44, brother-41)
ref(brother-41, whose-42)
amod(occupation-44, only-43)
nsubj(is-47, occupation-44)
nsubj:xsubj(pour-49, occupation-44)
case(life-46, in-45)
nmod:in(occupation-44, life-46)
acl:relcl(brother-41, is-47)
mark(pour-49, to-48)
xcomp(is-47, pour-49)
advmod(pour-49, yet-50)
det(round-52, another-51)
dobj(pour-49, round-52)
case(champagne-54, of-53)
nmod:of(round-52, champagne-54)
punct(round-52, ---55)
punct(round-52, ``-56)
dep(round-52, champers-57)
punct(round-52, ,-58)
punct(round-52, ''-59)
mark(prefers-62, as-60)
nsubj(prefers-62, he-61)
nsubj:xsubj(call-64, he-61)
advcl(round-52, prefers-62)
mark(call-64, to-63)
xcomp(prefers-62, call-64)
dobj(call-64, it-65)
punct(call-64, ---66)
case(four-69, for-67)
det(four-69, the-68)
nmod:for(call-64, four-69)
case(them-71, of-70)
nmod:of(four-69, them-71)
punct(wonder-4, .-72)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#champagne

pour :: It pours toilet paper in parts of Michigan ./.
nsubj(pours-2, It-1)
root(ROOT-0, pours-2)
compound(paper-4, toilet-3)
dobj(pours-2, paper-4)
case(parts-6, in-5)
nmod:in(pours-2, parts-6)
case(Michigan-8, of-7)
nmod:of(parts-6, Michigan-8)
punct(pours-2, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#paper

pour :: `` As long as the rains come pouring down on our land , we have hope . ''/''
punct(have-15, ``-1)
advmod(long-3, As-2)
advmod(have-15, long-3)
mark(come-7, as-4)
det(rains-6, the-5)
nsubj(come-7, rains-6)
advcl(long-3, come-7)
xcomp(come-7, pouring-8)
compound:prt(pouring-8, down-9)
case(land-12, on-10)
nmod:poss(land-12, our-11)
nmod:on(pouring-8, land-12)
punct(have-15, ,-13)
nsubj(have-15, we-14)
root(ROOT-0, have-15)
dobj(have-15, hope-16)
punct(have-15, .-17)
punct(have-15, ''-18)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: pour#land

pour :: Nearly 600 entries poured in , and ten finalists were announced recently ./.
advmod(600-2, Nearly-1)
nummod(entries-3, 600-2)
nsubj(poured-4, entries-3)
root(ROOT-0, poured-4)
advmod(poured-4, in-5)
punct(poured-4, ,-6)
cc(poured-4, and-7)
nummod(finalists-9, ten-8)
nsubjpass(announced-11, finalists-9)
auxpass(announced-11, were-10)
conj:and(poured-4, announced-11)
advmod(announced-11, recently-12)
punct(poured-4, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#entries

pour :: Public anger reached its zenith April 30 , 1982 , when angry mobs stopped three taxis bearing margis , dragged them from their cars , bludgeoned and poured acid on them and finally burned them to death ./.
amod(anger-2, Public-1)
nsubj(reached-3, anger-2)
root(ROOT-0, reached-3)
nmod:poss(April-6, its-4)
compound(April-6, zenith-5)
nsubj(dragged-20, April-6)
nummod(April-6, 30-7)
punct(April-6, ,-8)
nummod(April-6, 1982-9)
punct(April-6, ,-10)
advmod(stopped-14, when-11)
amod(mobs-13, angry-12)
nsubj(stopped-14, mobs-13)
acl:relcl(April-6, stopped-14)
nummod(taxis-16, three-15)
dobj(stopped-14, taxis-16)
acl(taxis-16, bearing-17)
dobj(bearing-17, margis-18)
punct(April-6, ,-19)
ccomp(reached-3, dragged-20)
dobj(dragged-20, them-21)
case(cars-24, from-22)
nmod:poss(cars-24, their-23)
nmod:from(dragged-20, cars-24)
punct(cars-24, ,-25)
dep(cars-24, bludgeoned-26)
cc(bludgeoned-26, and-27)
amod(acid-29, poured-28)
dep(cars-24, acid-29)
conj:and(bludgeoned-26, acid-29)
case(them-31, on-30)
nmod:on(bludgeoned-26, them-31)
cc(bludgeoned-26, and-32)
advmod(burned-34, finally-33)
dep(cars-24, burned-34)
conj:and(bludgeoned-26, burned-34)
dobj(burned-34, them-35)
case(death-37, to-36)
nmod:to(burned-34, death-37)
punct(reached-3, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#acid

pour :: Judges often ca n't review voluminous fee applications as they pour in ./.
nsubj(review-5, Judges-1)
advmod(review-5, often-2)
aux(review-5, ca-3)
neg(review-5, n't-4)
root(ROOT-0, review-5)
amod(applications-8, voluminous-6)
compound(applications-8, fee-7)
dobj(review-5, applications-8)
mark(pour-11, as-9)
nsubj(pour-11, they-10)
advcl(review-5, pour-11)
advmod(pour-11, in-12)
punct(review-5, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#they

pour :: `` As long as the rains come pouring down on our land , we have hope . ''/''
punct(have-15, ``-1)
advmod(long-3, As-2)
advmod(have-15, long-3)
mark(come-7, as-4)
det(rains-6, the-5)
nsubj(come-7, rains-6)
advcl(long-3, come-7)
xcomp(come-7, pouring-8)
compound:prt(pouring-8, down-9)
case(land-12, on-10)
nmod:poss(land-12, our-11)
nmod:on(pouring-8, land-12)
punct(have-15, ,-13)
nsubj(have-15, we-14)
root(ROOT-0, have-15)
dobj(have-15, hope-16)
punct(have-15, .-17)
punct(have-15, ''-18)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: pour#land

pour :: Mr. Icahn is already pouring money into his effort to fight Texaco 's plan ./.
compound(Icahn-2, Mr.-1)
nsubj(pouring-5, Icahn-2)
aux(pouring-5, is-3)
advmod(pouring-5, already-4)
root(ROOT-0, pouring-5)
dobj(pouring-5, money-6)
case(effort-9, into-7)
nmod:poss(effort-9, his-8)
nmod:into(pouring-5, effort-9)
mark(fight-11, to-10)
acl(effort-9, fight-11)
nmod:poss(plan-14, Texaco-12)
case(Texaco-12, 's-13)
dobj(fight-11, plan-14)
punct(pouring-5, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#money

pour :: The bard of Les-Loges-en-Josas , France , Stephen Powelson , stands ready , able and more than merely willing to pour the first 14 , 300 lines into your ear , from memory -- and in classical Greek ./.
det(bard-2, The-1)
nsubj(stands-11, bard-2)
case(Les-Loges-en-Josas-4, of-3)
nmod:of(bard-2, Les-Loges-en-Josas-4)
punct(Les-Loges-en-Josas-4, ,-5)
conj(Les-Loges-en-Josas-4, France-6)
punct(Les-Loges-en-Josas-4, ,-7)
compound(Powelson-9, Stephen-8)
appos(Les-Loges-en-Josas-4, Powelson-9)
punct(Les-Loges-en-Josas-4, ,-10)
root(ROOT-0, stands-11)
xcomp(stands-11, ready-12)
punct(ready-12, ,-13)
xcomp(stands-11, able-14)
conj:and(ready-12, able-14)
cc(ready-12, and-15)
advmod(willing-19, more-16)
case(willing-19, than-17)
advmod(willing-19, merely-18)
xcomp(stands-11, willing-19)
conj:and(ready-12, willing-19)
mark(pour-21, to-20)
xcomp(willing-19, pour-21)
det(14-24, the-22)
amod(14-24, first-23)
dobj(pour-21, 14-24)
punct(14-24, ,-25)
nummod(lines-27, 300-26)
appos(14-24, lines-27)
case(ear-30, into-28)
nmod:poss(ear-30, your-29)
nmod:into(lines-27, ear-30)
punct(14-24, ,-31)
case(memory-33, from-32)
nmod:from(pour-21, memory-33)
punct(ready-12, ---34)
cc(ready-12, and-35)
case(Greek-38, in-36)
amod(Greek-38, classical-37)
xcomp(stands-11, Greek-38)
conj:and(ready-12, Greek-38)
punct(stands-11, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#14

pour :: Kubota Ltd . , for example , has poured about $ 75 million into some of Silicon Valley 's hottest companies , including MIPS Computer Systems and Ardent Computer ./.
compound(Ltd-2, Kubota-1)
root(ROOT-0, Ltd-2)
punct(Ltd-2, .-3)
punct(poured-6, ,-1)
case(example-3, for-2)
nmod:for(poured-6, example-3)
punct(poured-6, ,-4)
aux(poured-6, has-5)
root(ROOT-0, poured-6)
advmod($-8, about-7)
dobj(poured-6, $-8)
compound(million-10, 75-9)
nummod($-8, million-10)
case(some-12, into-11)
nmod:into(poured-6, some-12)
case(companies-18, of-13)
compound(Valley-15, Silicon-14)
nmod:poss(companies-18, Valley-15)
case(Valley-15, 's-16)
amod(companies-18, hottest-17)
nmod:of(some-12, companies-18)
punct(companies-18, ,-19)
case(Systems-23, including-20)
compound(Systems-23, MIPS-21)
compound(Systems-23, Computer-22)
nmod:including(companies-18, Systems-23)
cc(Systems-23, and-24)
amod(Computer-26, Ardent-25)
nmod:including(companies-18, Computer-26)
conj:and(Systems-23, Computer-26)
punct(poured-6, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#$

pour :: As a regional brand , however , Stokely already ca n't come close to matching the dollars that both the biggies pour into advertising and trade promotion ./.
case(brand-4, As-1)
det(brand-4, a-2)
amod(brand-4, regional-3)
nmod:as(come-12, brand-4)
punct(come-12, ,-5)
advmod(come-12, however-6)
punct(come-12, ,-7)
nsubj(come-12, Stokely-8)
advmod(come-12, already-9)
aux(come-12, ca-10)
neg(come-12, n't-11)
root(ROOT-0, come-12)
advmod(come-12, close-13)
mark(matching-15, to-14)
advcl(close-13, matching-15)
det(dollars-17, the-16)
dobj(matching-15, dollars-17)
dobj(pour-22, dollars-17)
ref(dollars-17, that-18)
cc:preconj(biggies-21, both-19)
det(biggies-21, the-20)
nsubj(pour-22, biggies-21)
acl:relcl(dollars-17, pour-22)
case(promotion-27, into-23)
compound(promotion-27, advertising-24)
cc(advertising-24, and-25)
conj:and(advertising-24, trade-26)
compound(promotion-27, trade-26)
nmod:into(pour-22, promotion-27)
punct(come-12, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#dollars

pour :: `` There are early signs that marketers have perceived a coupon glut and are questioning the efficacy of pouring out billions of them every year , '' said Joseph Laird , an investment banker active in the information industry ./.
punct(said-28, ``-1)
expl(are-3, There-2)
ccomp(said-28, are-3)
advmod(signs-5, early-4)
nsubj(are-3, signs-5)
nsubj(questioning-15, signs-5)
mark(perceived-9, that-6)
nsubj(perceived-9, marketers-7)
aux(perceived-9, have-8)
ccomp(signs-5, perceived-9)
det(glut-12, a-10)
compound(glut-12, coupon-11)
dobj(perceived-9, glut-12)
cc(are-3, and-13)
aux(questioning-15, are-14)
conj:and(are-3, questioning-15)
ccomp(said-28, questioning-15)
det(efficacy-17, the-16)
dobj(questioning-15, efficacy-17)
mark(pouring-19, of-18)
acl(efficacy-17, pouring-19)
compound:prt(pouring-19, out-20)
dobj(pouring-19, billions-21)
case(them-23, of-22)
nmod:of(billions-21, them-23)
det(year-25, every-24)
nmod:tmod(pouring-19, year-25)
punct(said-28, ,-26)
punct(said-28, ''-27)
root(ROOT-0, said-28)
compound(Laird-30, Joseph-29)
nsubj(said-28, Laird-30)
punct(Laird-30, ,-31)
det(banker-34, an-32)
compound(banker-34, investment-33)
appos(Laird-30, banker-34)
amod(banker-34, active-35)
case(industry-39, in-36)
det(industry-39, the-37)
compound(industry-39, information-38)
nmod:in(active-35, industry-39)
punct(said-28, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#them

pour :: But in the intervening years , so much criticism has been poured upon Chamberlain 's failed policies that they have dissolved into caricature ./.
cc(poured-12, But-1)
case(years-5, in-2)
det(years-5, the-3)
amod(years-5, intervening-4)
nmod:in(poured-12, years-5)
punct(poured-12, ,-6)
advmod(much-8, so-7)
amod(criticism-9, much-8)
nsubjpass(poured-12, criticism-9)
aux(poured-12, has-10)
auxpass(poured-12, been-11)
root(ROOT-0, poured-12)
case(policies-17, upon-13)
nmod:poss(policies-17, Chamberlain-14)
case(Chamberlain-14, 's-15)
amod(policies-17, failed-16)
nmod:upon(poured-12, policies-17)
dobj(dissolved-21, policies-17)
ref(policies-17, that-18)
nsubj(dissolved-21, they-19)
aux(dissolved-21, have-20)
acl:relcl(policies-17, dissolved-21)
case(caricature-23, into-22)
nmod:into(dissolved-21, caricature-23)
punct(poured-12, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#criticism

pour :: An immense , loving labor of critical scholarly skills is poured into the study of this remarkable woman , who will be a discovery to many readers , as she was to me ./.
det(labor-5, An-1)
amod(labor-5, immense-2)
punct(labor-5, ,-3)
amod(labor-5, loving-4)
nsubjpass(poured-11, labor-5)
case(skills-9, of-6)
amod(skills-9, critical-7)
amod(skills-9, scholarly-8)
nmod:of(labor-5, skills-9)
auxpass(poured-11, is-10)
root(ROOT-0, poured-11)
case(study-14, into-12)
det(study-14, the-13)
nmod:into(poured-11, study-14)
case(woman-18, of-15)
det(woman-18, this-16)
amod(woman-18, remarkable-17)
nmod:of(study-14, woman-18)
nsubj(discovery-24, woman-18)
punct(woman-18, ,-19)
ref(woman-18, who-20)
aux(discovery-24, will-21)
cop(discovery-24, be-22)
det(discovery-24, a-23)
acl:relcl(woman-18, discovery-24)
case(readers-27, to-25)
amod(readers-27, many-26)
nmod:to(discovery-24, readers-27)
punct(poured-11, ,-28)
mark(was-31, as-29)
nsubj(was-31, she-30)
advcl(poured-11, was-31)
case(me-33, to-32)
nmod:to(was-31, me-33)
punct(poured-11, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#labor

pour :: In light of all this , you might expect the government here to pour millions into science ./.
case(light-2, In-1)
nmod:in(expect-9, light-2)
case(this-5, of-3)
det:predet(this-5, all-4)
nmod:of(light-2, this-5)
punct(expect-9, ,-6)
nsubj(expect-9, you-7)
aux(expect-9, might-8)
root(ROOT-0, expect-9)
det(government-11, the-10)
dobj(expect-9, government-11)
nsubj:xsubj(pour-14, government-11)
advmod(expect-9, here-12)
mark(pour-14, to-13)
xcomp(expect-9, pour-14)
dobj(pour-14, millions-15)
case(science-17, into-16)
nmod:into(pour-14, science-17)
punct(expect-9, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#millions

pour :: She is a spellbinding , handsome Valkyrie , and if her upper body strength is rather stronger than her upper register , the rich middle range pours out like liquid amber ./.
nsubj(Valkyrie-7, She-1)
cop(Valkyrie-7, is-2)
det(Valkyrie-7, a-3)
amod(Valkyrie-7, spellbinding-4)
punct(Valkyrie-7, ,-5)
amod(Valkyrie-7, handsome-6)
root(ROOT-0, Valkyrie-7)
punct(Valkyrie-7, ,-8)
cc(Valkyrie-7, and-9)
mark(stronger-17, if-10)
nmod:poss(strength-14, her-11)
amod(strength-14, upper-12)
compound(strength-14, body-13)
nsubj(stronger-17, strength-14)
cop(stronger-17, is-15)
advmod(stronger-17, rather-16)
advcl(pours-27, stronger-17)
case(register-21, than-18)
nmod:poss(register-21, her-19)
amod(register-21, upper-20)
nmod:than(stronger-17, register-21)
punct(pours-27, ,-22)
det(range-26, the-23)
amod(range-26, rich-24)
amod(range-26, middle-25)
nsubj(pours-27, range-26)
conj:and(Valkyrie-7, pours-27)
compound:prt(pours-27, out-28)
case(amber-31, like-29)
amod(amber-31, liquid-30)
nmod:like(pours-27, amber-31)
punct(Valkyrie-7, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#range

pour :: Spain is pouring 15 billion pesetas -LRB- $ 122.2 million -RRB- into major new equipment by Ceselsa , a Spanish maker ./.
nsubj(pouring-3, Spain-1)
aux(pouring-3, is-2)
root(ROOT-0, pouring-3)
compound(billion-5, 15-4)
nummod(pesetas-6, billion-5)
dobj(pouring-3, pesetas-6)
punct($-8, -LRB--7)
dep(pesetas-6, $-8)
compound(million-10, 122.2-9)
nummod($-8, million-10)
punct($-8, -RRB--11)
case(equipment-15, into-12)
amod(equipment-15, major-13)
amod(equipment-15, new-14)
nmod:into(pouring-3, equipment-15)
case(Ceselsa-17, by-16)
nmod:by(pouring-3, Ceselsa-17)
punct(Ceselsa-17, ,-18)
det(maker-21, a-19)
amod(maker-21, Spanish-20)
appos(Ceselsa-17, maker-21)
punct(pouring-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#pesetas

pour :: It poured into the vacuum created by the collapse of a Keynesian mainstream that had no explanation for simultaneous stagnation and inflation ./.
nsubj(poured-2, It-1)
root(ROOT-0, poured-2)
case(vacuum-5, into-3)
det(vacuum-5, the-4)
nmod:into(poured-2, vacuum-5)
acl(vacuum-5, created-6)
case(collapse-9, by-7)
det(collapse-9, the-8)
nmod:by(created-6, collapse-9)
case(mainstream-13, of-10)
det(mainstream-13, a-11)
amod(mainstream-13, Keynesian-12)
nmod:of(collapse-9, mainstream-13)
nsubj(had-15, mainstream-13)
ref(mainstream-13, that-14)
acl:relcl(mainstream-13, had-15)
neg(explanation-17, no-16)
dobj(had-15, explanation-17)
case(stagnation-20, for-18)
amod(stagnation-20, simultaneous-19)
nmod:for(explanation-17, stagnation-20)
cc(stagnation-20, and-21)
nmod:for(explanation-17, inflation-22)
conj:and(stagnation-20, inflation-22)
punct(poured-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#it

pour :: In Version Four , in his autobiography , Mr. Bush describes the plane being hit , with smoke pouring into the cockpit and flames rippling across the wing ; he says he homed in on the target and dropped his four 500-pound bombs ; then turned out to sea , leveled off `` and told Delaney and White to bail out , turning the plane to starboard to take the slipstream off the door near Delaney 's station . ''/''
case(Version-2, In-1)
nmod:in(describes-11, Version-2)
nummod(Version-2, Four-3)
punct(describes-11, ,-4)
case(autobiography-7, in-5)
nmod:poss(autobiography-7, his-6)
nmod:in(describes-11, autobiography-7)
punct(describes-11, ,-8)
compound(Bush-10, Mr.-9)
nsubj(describes-11, Bush-10)
root(ROOT-0, describes-11)
det(plane-13, the-12)
nsubjpass(hit-15, plane-13)
auxpass(hit-15, being-14)
ccomp(describes-11, hit-15)
punct(hit-15, ,-16)
case(smoke-18, with-17)
nmod:with(hit-15, smoke-18)
acl(smoke-18, pouring-19)
case(cockpit-22, into-20)
det(cockpit-22, the-21)
nmod:into(pouring-19, cockpit-22)
cc(cockpit-22, and-23)
nmod:into(pouring-19, flames-24)
conj:and(cockpit-22, flames-24)
acl(cockpit-22, rippling-25)
case(wing-28, across-26)
det(wing-28, the-27)
nmod:across(rippling-25, wing-28)
punct(describes-11, ;-29)
nsubj(says-31, he-30)
parataxis(describes-11, says-31)
nsubj(homed-33, he-32)
nsubj(dropped-39, he-32)
ccomp(says-31, homed-33)
compound:prt(homed-33, in-34)
case(target-37, on-35)
det(target-37, the-36)
nmod:on(homed-33, target-37)
cc(homed-33, and-38)
ccomp(says-31, dropped-39)
conj:and(homed-33, dropped-39)
nmod:poss(bombs-43, his-40)
nummod(bombs-43, four-41)
amod(bombs-43, 500-pound-42)
dobj(dropped-39, bombs-43)
punct(describes-11, ;-44)
advmod(turned-46, then-45)
parataxis(describes-11, turned-46)
compound:prt(turned-46, out-47)
case(sea-49, to-48)
nmod:to(turned-46, sea-49)
punct(turned-46, ,-50)
parataxis(describes-11, leveled-51)
conj:and(turned-46, leveled-51)
compound:prt(leveled-51, off-52)
punct(leveled-51, ``-53)
cc(turned-46, and-54)
parataxis(describes-11, told-55)
conj:and(turned-46, told-55)
dobj(told-55, Delaney-56)
nsubj:xsubj(bail-60, Delaney-56)
cc(Delaney-56, and-57)
dobj(told-55, White-58)
conj:and(Delaney-56, White-58)
nsubj:xsubj(bail-60, White-58)
mark(bail-60, to-59)
xcomp(told-55, bail-60)
compound:prt(bail-60, out-61)
punct(bail-60, ,-62)
xcomp(bail-60, turning-63)
det(plane-65, the-64)
dobj(turning-63, plane-65)
case(starboard-67, to-66)
nmod:to(turning-63, starboard-67)
mark(take-69, to-68)
advcl(turning-63, take-69)
det(slipstream-71, the-70)
dobj(take-69, slipstream-71)
case(door-74, off-72)
det(door-74, the-73)
nmod:off(take-69, door-74)
case(station-78, near-75)
nmod:poss(station-78, Delaney-76)
case(Delaney-76, 's-77)
nmod:near(door-74, station-78)
punct(describes-11, .-79)
punct(describes-11, ''-80)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: pour#cockpit

pour :: GE has poured more than $ 200 million into designing better turbine parts ./.
nsubj(poured-3, GE-1)
aux(poured-3, has-2)
root(ROOT-0, poured-3)
advmod($-6, more-4)
mwe(more-4, than-5)
dobj(poured-3, $-6)
compound(million-8, 200-7)
nummod($-6, million-8)
mark(designing-10, into-9)
advcl(poured-3, designing-10)
amod(parts-13, better-11)
compound(parts-13, turbine-12)
dobj(designing-10, parts-13)
punct(poured-3, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#$

pour :: So the chemical industry is reluctantly pouring millions into developing biodegradable plastics ./.
dep(pouring-7, So-1)
det(industry-4, the-2)
compound(industry-4, chemical-3)
nsubj(pouring-7, industry-4)
aux(pouring-7, is-5)
advmod(pouring-7, reluctantly-6)
root(ROOT-0, pouring-7)
dobj(pouring-7, millions-8)
mark(developing-10, into-9)
advcl(pouring-7, developing-10)
amod(plastics-12, biodegradable-11)
dobj(developing-10, plastics-12)
punct(pouring-7, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#millions

pour :: For one , the industry has poured a fortune into advertisements designed to promote plastic bags , trashcan liners and other household products that are , as the television commercial goes , hefty , hefty , hefty ./.
case(one-2, For-1)
nmod:for(poured-7, one-2)
punct(poured-7, ,-3)
det(industry-5, the-4)
nsubj(poured-7, industry-5)
aux(poured-7, has-6)
root(ROOT-0, poured-7)
det(fortune-9, a-8)
dobj(poured-7, fortune-9)
case(advertisements-11, into-10)
nmod:into(poured-7, advertisements-11)
acl(advertisements-11, designed-12)
mark(promote-14, to-13)
xcomp(designed-12, promote-14)
amod(bags-16, plastic-15)
dobj(promote-14, bags-16)
punct(poured-7, ,-17)
compound(liners-19, trashcan-18)
dobj(poured-7, liners-19)
nsubj(hefty-37, liners-19)
cc(liners-19, and-20)
amod(products-23, other-21)
compound(products-23, household-22)
dobj(poured-7, products-23)
conj:and(liners-19, products-23)
nsubj(hefty-37, products-23)
ref(liners-19, that-24)
cop(hefty-37, are-25)
punct(hefty-37, ,-26)
mark(goes-31, as-27)
det(commercial-30, the-28)
compound(commercial-30, television-29)
nsubj(goes-31, commercial-30)
dep(hefty-37, goes-31)
punct(hefty-37, ,-32)
amod(hefty-37, hefty-33)
punct(hefty-37, ,-34)
amod(hefty-37, hefty-35)
punct(hefty-37, ,-36)
acl:relcl(liners-19, hefty-37)
punct(poured-7, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#fortune

pour :: And just at that very moment and time , a thunderhead that had lowered all that cool afternoon over the Jersey shore broke and lightning poured out of the sky across the white struts of the superstructure as we fell a mile a minute into the shattering abyss ./.
cc(broke-23, And-1)
advmod(moment-6, just-2)
case(moment-6, at-3)
det(moment-6, that-4)
advmod(moment-6, very-5)
nmod:at(broke-23, moment-6)
cc(moment-6, and-7)
conj:and(moment-6, time-8)
nmod:at(broke-23, time-8)
punct(broke-23, ,-9)
det(thunderhead-11, a-10)
nsubj(lowered-14, thunderhead-11)
nsubj(broke-23, thunderhead-11)
ref(thunderhead-11, that-12)
aux(lowered-14, had-13)
acl:relcl(thunderhead-11, lowered-14)
det:predet(afternoon-18, all-15)
det(afternoon-18, that-16)
amod(afternoon-18, cool-17)
nmod:tmod(lowered-14, afternoon-18)
case(shore-22, over-19)
det(shore-22, the-20)
compound(shore-22, Jersey-21)
nmod:over(lowered-14, shore-22)
root(ROOT-0, broke-23)
cc(broke-23, and-24)
nsubj(poured-26, lightning-25)
conj:and(broke-23, poured-26)
case(sky-30, out-27)
mwe(out-27, of-28)
det(sky-30, the-29)
nmod:out_of(poured-26, sky-30)
case(struts-34, across-31)
det(struts-34, the-32)
amod(struts-34, white-33)
nmod:across(poured-26, struts-34)
case(superstructure-37, of-35)
det(superstructure-37, the-36)
nmod:of(struts-34, superstructure-37)
mark(fell-40, as-38)
nsubj(fell-40, we-39)
advcl(poured-26, fell-40)
det(mile-42, a-41)
dobj(fell-40, mile-42)
det(minute-44, a-43)
nmod:npmod(mile-42, minute-44)
case(abyss-48, into-45)
det(abyss-48, the-46)
amod(abyss-48, shattering-47)
nmod:into(fell-40, abyss-48)
punct(broke-23, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#lightning

pour :: The campaign against Boston 's rats will require pouring , in a manner of speaking , millions of dollars down rat holes ./.
det(campaign-2, The-1)
nsubj(require-8, campaign-2)
case(rats-6, against-3)
nmod:poss(rats-6, Boston-4)
case(Boston-4, 's-5)
nmod:against(campaign-2, rats-6)
aux(require-8, will-7)
root(ROOT-0, require-8)
xcomp(require-8, pouring-9)
punct(pouring-9, ,-10)
case(manner-13, in-11)
det(manner-13, a-12)
nmod:in(pouring-9, manner-13)
case(speaking-15, of-14)
nmod:of(manner-13, speaking-15)
punct(pouring-9, ,-16)
dobj(pouring-9, millions-17)
case(dollars-19, of-18)
nmod:of(millions-17, dollars-19)
case(holes-22, down-20)
compound(holes-22, rat-21)
nmod:down(millions-17, holes-22)
punct(require-8, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#dollars

pour :: Here was Sanyo , pouring in capital and engineering talent ./.
advmod(Sanyo-3, Here-1)
cop(Sanyo-3, was-2)
root(ROOT-0, Sanyo-3)
punct(Sanyo-3, ,-4)
acl(Sanyo-3, pouring-5)
case(talent-10, in-6)
compound(talent-10, capital-7)
cc(capital-7, and-8)
conj:and(capital-7, engineering-9)
compound(talent-10, engineering-9)
nmod:in(pouring-5, talent-10)
punct(Sanyo-3, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#talent

pour :: Our view is that the Russians and Cubans figured this out some time ago , which is why , despite Mr. Reagan 's occasional speeches , they never hesitated to pour advisers and war materiel by the ton into Nicaragua ./.
nmod:poss(view-2, Our-1)
nsubj(is-3, view-2)
root(ROOT-0, is-3)
mark(figured-9, that-4)
det(Russians-6, the-5)
nsubj(figured-9, Russians-6)
cc(Russians-6, and-7)
conj:and(Russians-6, Cubans-8)
nsubj(figured-9, Cubans-8)
ccomp(is-3, figured-9)
dobj(figured-9, this-10)
case(time-13, out-11)
det(time-13, some-12)
advmod(figured-9, time-13)
case(time-13, ago-14)
punct(figured-9, ,-15)
nsubj(is-17, which-16)
dep(figured-9, is-17)
advmod(hesitated-29, why-18)
punct(hesitated-29, ,-19)
case(speeches-25, despite-20)
compound(Reagan-22, Mr.-21)
nmod:poss(speeches-25, Reagan-22)
case(Reagan-22, 's-23)
amod(speeches-25, occasional-24)
nmod:despite(hesitated-29, speeches-25)
punct(hesitated-29, ,-26)
nsubj(hesitated-29, they-27)
nsubj:xsubj(pour-31, they-27)
neg(hesitated-29, never-28)
advcl(is-17, hesitated-29)
mark(pour-31, to-30)
xcomp(hesitated-29, pour-31)
dobj(pour-31, advisers-32)
cc(advisers-32, and-33)
compound(materiel-35, war-34)
dobj(pour-31, materiel-35)
conj:and(advisers-32, materiel-35)
case(ton-38, by-36)
det(ton-38, the-37)
nmod:by(pour-31, ton-38)
case(Nicaragua-40, into-39)
nmod:into(ton-38, Nicaragua-40)
punct(is-3, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#advisers

pour :: Offers for more projects pour in every day , spurring Mr. Vinton to mull over the possibility of opening satellite offices in New York and Los Angeles to deal with all the people clamoring for Claymation ./.
nsubj(pour-5, Offers-1)
case(projects-4, for-2)
amod(projects-4, more-3)
nmod:for(Offers-1, projects-4)
root(ROOT-0, pour-5)
case(day-8, in-6)
det(day-8, every-7)
nmod:in(pour-5, day-8)
punct(pour-5, ,-9)
xcomp(pour-5, spurring-10)
compound(Vinton-12, Mr.-11)
dobj(spurring-10, Vinton-12)
nsubj:xsubj(mull-14, Vinton-12)
mark(mull-14, to-13)
xcomp(spurring-10, mull-14)
case(possibility-17, over-15)
det(possibility-17, the-16)
nmod:over(mull-14, possibility-17)
mark(opening-19, of-18)
acl(possibility-17, opening-19)
compound(offices-21, satellite-20)
dobj(opening-19, offices-21)
case(York-24, in-22)
compound(York-24, New-23)
nmod:in(opening-19, York-24)
cc(York-24, and-25)
compound(Angeles-27, Los-26)
nmod:in(opening-19, Angeles-27)
conj:and(York-24, Angeles-27)
mark(deal-29, to-28)
advcl(opening-19, deal-29)
case(people-33, with-30)
det:predet(people-33, all-31)
det(people-33, the-32)
nmod:with(deal-29, people-33)
acl(people-33, clamoring-34)
case(Claymation-36, for-35)
nmod:for(clamoring-34, Claymation-36)
punct(pour-5, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#offers

pour :: `` The drivers smelled anti-freeze , noticed smoke pouring from the engines , and within 10 to 15 minutes , the engines were engulfed in flames . ''/''
root(ROOT-0, ``-1)
det(drivers-3, The-2)
nsubj(smelled-4, drivers-3)
root(``-1, smelled-4)
amod(smoke-8, anti-freeze-5)
punct(smoke-8, ,-6)
amod(smoke-8, noticed-7)
dobj(smelled-4, smoke-8)
acl(smoke-8, pouring-9)
case(engines-12, from-10)
det(engines-12, the-11)
nmod:from(pouring-9, engines-12)
punct(smoke-8, ,-13)
cc(smoke-8, and-14)
case(minutes-19, within-15)
compound(15-18, 10-16)
dep(15-18, to-17)
nummod(minutes-19, 15-18)
nmod:within(engulfed-24, minutes-19)
punct(engulfed-24, ,-20)
det(engines-22, the-21)
nsubjpass(engulfed-24, engines-22)
auxpass(engulfed-24, were-23)
dobj(smelled-4, engulfed-24)
conj:and(smoke-8, engulfed-24)
case(flames-26, in-25)
nmod:in(engulfed-24, flames-26)
punct(smelled-4, .-27)
punct(smelled-4, ''-28)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: pour#engines

pour :: Simply pouring more aid into this environment will breed more state-subsidized projects to compete with the private sector and a bigger bureaucracy to administer the projects ./.
advmod(pouring-2, Simply-1)
csubj(breed-9, pouring-2)
amod(aid-4, more-3)
dobj(pouring-2, aid-4)
case(environment-7, into-5)
det(environment-7, this-6)
nmod:into(pouring-2, environment-7)
aux(breed-9, will-8)
root(ROOT-0, breed-9)
amod(projects-12, more-10)
amod(projects-12, state-subsidized-11)
dobj(breed-9, projects-12)
mark(compete-14, to-13)
advcl(breed-9, compete-14)
case(sector-18, with-15)
det(sector-18, the-16)
amod(sector-18, private-17)
nmod:with(compete-14, sector-18)
cc(sector-18, and-19)
det(bureaucracy-22, a-20)
amod(bureaucracy-22, bigger-21)
nmod:with(compete-14, bureaucracy-22)
conj:and(sector-18, bureaucracy-22)
mark(administer-24, to-23)
xcomp(compete-14, administer-24)
det(projects-26, the-25)
dobj(administer-24, projects-26)
punct(breed-9, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#aid

pour :: U.S. drug agents estimate that about 40 % of all the cocaine and marijuana pouring into America comes through the Bahamas ; of that , at times as much as half may have been run through Bimini , agents say ./.
compound(agents-3, U.S.-1)
compound(agents-3, drug-2)
nsubj(estimate-4, agents-3)
root(ROOT-0, estimate-4)
mark(comes-18, that-5)
advmod(40-7, about-6)
nummod(%-8, 40-7)
nsubj(comes-18, %-8)
case(cocaine-12, of-9)
det:predet(cocaine-12, all-10)
det(cocaine-12, the-11)
nmod:of(%-8, cocaine-12)
cc(cocaine-12, and-13)
nmod:of(%-8, marijuana-14)
conj:and(cocaine-12, marijuana-14)
acl(cocaine-12, pouring-15)
case(America-17, into-16)
nmod:into(pouring-15, America-17)
ccomp(estimate-4, comes-18)
case(Bahamas-21, through-19)
det(Bahamas-21, the-20)
nmod:through(comes-18, Bahamas-21)
punct(comes-18, ;-22)
case(that-24, of-23)
nmod:of(say-40, that-24)
punct(say-40, ,-25)
case(times-27, at-26)
nmod:at(say-40, times-27)
advmod(much-29, as-28)
advmod(times-27, much-29)
mark(run-35, as-30)
nsubjpass(run-35, half-31)
aux(run-35, may-32)
aux(run-35, have-33)
auxpass(run-35, been-34)
advcl(much-29, run-35)
case(Bimini-37, through-36)
nmod:through(run-35, Bimini-37)
punct(say-40, ,-38)
nsubj(say-40, agents-39)
parataxis(comes-18, say-40)
punct(estimate-4, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#america

pour :: Every day his troops gather under the green , red and black banner of black nationalism and pour out a stream of racial abuse ./.
det(day-2, Every-1)
nmod:tmod(gather-5, day-2)
nmod:poss(troops-4, his-3)
nsubj(gather-5, troops-4)
nsubj(pour-18, troops-4)
root(ROOT-0, gather-5)
case(banner-13, under-6)
det(banner-13, the-7)
amod(banner-13, green-8)
punct(green-8, ,-9)
conj:and(green-8, red-10)
amod(banner-13, red-10)
cc(green-8, and-11)
conj:and(green-8, black-12)
amod(banner-13, black-12)
nmod:under(gather-5, banner-13)
case(nationalism-16, of-14)
amod(nationalism-16, black-15)
nmod:of(banner-13, nationalism-16)
cc(gather-5, and-17)
conj:and(gather-5, pour-18)
compound:prt(pour-18, out-19)
det(stream-21, a-20)
dobj(pour-18, stream-21)
case(abuse-24, of-22)
amod(abuse-24, racial-23)
nmod:of(stream-21, abuse-24)
punct(gather-5, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#abuse

pour :: When Mr. Corbett poured molasses on Chief 's feed to make it more appealing , the bored hog merely licked off the syrup ./.
advmod(poured-4, When-1)
compound(Corbett-3, Mr.-2)
nsubj(poured-4, Corbett-3)
advcl(licked-20, poured-4)
dobj(poured-4, molasses-5)
case(feed-9, on-6)
nmod:poss(feed-9, Chief-7)
case(Chief-7, 's-8)
nmod:on(poured-4, feed-9)
mark(make-11, to-10)
advcl(poured-4, make-11)
nsubj(appealing-14, it-12)
advmod(appealing-14, more-13)
xcomp(make-11, appealing-14)
punct(licked-20, ,-15)
det(hog-18, the-16)
amod(hog-18, bored-17)
nsubj(licked-20, hog-18)
advmod(licked-20, merely-19)
root(ROOT-0, licked-20)
compound:prt(licked-20, off-21)
det(syrup-23, the-22)
dobj(licked-20, syrup-23)
punct(licked-20, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#molasses

pour :: Oil prices continued to fall yesterday in trading torn by rumors and growing evidence that Saudi Arabian crude is pouring into the market ./.
compound(prices-2, Oil-1)
nsubj(continued-3, prices-2)
nsubj:xsubj(fall-5, prices-2)
root(ROOT-0, continued-3)
mark(fall-5, to-4)
xcomp(continued-3, fall-5)
nmod:tmod(fall-5, yesterday-6)
case(trading-8, in-7)
nmod:in(fall-5, trading-8)
acl(trading-8, torn-9)
case(rumors-11, by-10)
nmod:by(torn-9, rumors-11)
cc(rumors-11, and-12)
amod(evidence-14, growing-13)
nmod:by(torn-9, evidence-14)
conj:and(rumors-11, evidence-14)
mark(pouring-20, that-15)
amod(crude-18, Saudi-16)
amod(crude-18, Arabian-17)
nsubj(pouring-20, crude-18)
aux(pouring-20, is-19)
ccomp(evidence-14, pouring-20)
case(market-23, into-21)
det(market-23, the-22)
nmod:into(pouring-20, market-23)
punct(continued-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#crude

pour :: The celebration is a rambunctious countrystyle baptism on a central highlands cattle ranch , with serenading mariachis , swaggering cowboys , and white-jacketed waiters pouring tequila like water ./.
det(celebration-2, The-1)
nsubj(baptism-7, celebration-2)
cop(baptism-7, is-3)
det(baptism-7, a-4)
amod(baptism-7, rambunctious-5)
amod(baptism-7, countrystyle-6)
root(ROOT-0, baptism-7)
case(ranch-13, on-8)
det(ranch-13, a-9)
amod(ranch-13, central-10)
compound(ranch-13, highlands-11)
compound(ranch-13, cattle-12)
nmod:on(baptism-7, ranch-13)
punct(baptism-7, ,-14)
case(mariachis-17, with-15)
amod(mariachis-17, serenading-16)
nmod:with(baptism-7, mariachis-17)
punct(mariachis-17, ,-18)
amod(cowboys-20, swaggering-19)
nmod:with(baptism-7, cowboys-20)
conj:and(mariachis-17, cowboys-20)
punct(mariachis-17, ,-21)
cc(mariachis-17, and-22)
amod(waiters-24, white-jacketed-23)
nmod:with(baptism-7, waiters-24)
conj:and(mariachis-17, waiters-24)
acl(waiters-24, pouring-25)
dobj(pouring-25, tequila-26)
case(water-28, like-27)
nmod:like(pouring-25, water-28)
punct(baptism-7, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#tequila

pour :: In this nervous , jumpy world economic reality matters less than the rumors and out-of-context scraps of information that pour into the trading rooms ./.
case(reality-8, In-1)
det(reality-8, this-2)
amod(reality-8, nervous-3)
punct(reality-8, ,-4)
amod(reality-8, jumpy-5)
compound(reality-8, world-6)
amod(reality-8, economic-7)
root(ROOT-0, reality-8)
dep(reality-8, matters-9)
amod(matters-9, less-10)
case(rumors-13, than-11)
det(rumors-13, the-12)
nmod:than(less-10, rumors-13)
nsubj(pour-20, rumors-13)
cc(rumors-13, and-14)
amod(scraps-16, out-of-context-15)
nmod:than(less-10, scraps-16)
conj:and(rumors-13, scraps-16)
nsubj(pour-20, scraps-16)
case(information-18, of-17)
nmod:of(rumors-13, information-18)
ref(rumors-13, that-19)
acl:relcl(rumors-13, pour-20)
case(rooms-24, into-21)
det(rooms-24, the-22)
compound(rooms-24, trading-23)
nmod:into(pour-20, rooms-24)
punct(reality-8, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#rumors

pour :: Still , calls continue to pour in on Dr. Lapin 's 800-NO-BLOOD hotline ./.
advmod(continue-4, Still-1)
punct(continue-4, ,-2)
aux(continue-4, calls-3)
root(ROOT-0, continue-4)
mark(pour-6, to-5)
xcomp(continue-4, pour-6)
compound:prt(pour-6, in-7)
case(hotline-13, on-8)
compound(Lapin-10, Dr.-9)
nmod:poss(hotline-13, Lapin-10)
case(Lapin-10, 's-11)
amod(hotline-13, 800-NO-BLOOD-12)
nmod:on(pour-6, hotline-13)
punct(continue-4, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#hotline

pour :: Whatever the case , `` there 's been a tremendous amount of new investment pouring into our market , '' said Jonathan Kolatch , a vice president in the high-yield bond group at Goldman , Sachs & Co. Martin S. Fridson , a principal at Morgan Stanley & Co. and manager of credit research , agrees: `` There 's a greater universe of institutions buying junk bonds now . ''/''
dep(case-3, Whatever-1)
det(case-3, the-2)
dep(amount-11, case-3)
punct(amount-11, ,-4)
punct(amount-11, ``-5)
expl(amount-11, there-6)
auxpass(amount-11, 's-7)
cop(amount-11, been-8)
det(amount-11, a-9)
amod(amount-11, tremendous-10)
ccomp(said-21, amount-11)
case(investment-14, of-12)
amod(investment-14, new-13)
nmod:of(amount-11, investment-14)
acl(investment-14, pouring-15)
case(market-18, into-16)
nmod:poss(market-18, our-17)
nmod:into(pouring-15, market-18)
punct(said-21, ,-19)
punct(said-21, ''-20)
root(ROOT-0, said-21)
compound(Kolatch-23, Jonathan-22)
nsubj(said-21, Kolatch-23)
punct(Kolatch-23, ,-24)
det(president-27, a-25)
compound(president-27, vice-26)
appos(Kolatch-23, president-27)
case(group-32, in-28)
det(group-32, the-29)
amod(group-32, high-yield-30)
compound(group-32, bond-31)
nmod:in(president-27, group-32)
case(Goldman-34, at-33)
nmod:at(president-27, Goldman-34)
punct(Goldman-34, ,-35)
nmod:at(president-27, Sachs-36)
conj:&(Goldman-34, Sachs-36)
cc(Goldman-34, &-37)
nmod:at(president-27, Co.-38)
conj:&(Goldman-34, Co.-38)
punct(said-21, .-39)
compound(Fridson-3, Martin-1)
compound(Fridson-3, S.-2)
nsubj(agrees-18, Fridson-3)
punct(Fridson-3, ,-4)
det(principal-6, a-5)
appos(Fridson-3, principal-6)
case(Stanley-9, at-7)
compound(Stanley-9, Morgan-8)
nmod:at(principal-6, Stanley-9)
cc(Stanley-9, &-10)
nmod:at(principal-6, Co.-11)
conj:&(Stanley-9, Co.-11)
cc(principal-6, and-12)
appos(Fridson-3, manager-13)
conj:and(principal-6, manager-13)
case(research-16, of-14)
compound(research-16, credit-15)
nmod:of(manager-13, research-16)
punct(Fridson-3, ,-17)
root(ROOT-0, agrees-18)
punct(agrees-18, :-19)
punct(agrees-18, ``-20)
expl('s-22, There-21)
ccomp(agrees-18, 's-22)
det(universe-25, a-23)
amod(universe-25, greater-24)
nsubj('s-22, universe-25)
case(institutions-27, of-26)
nmod:of(universe-25, institutions-27)
acl(institutions-27, buying-28)
compound(bonds-30, junk-29)
dobj(buying-28, bonds-30)
advmod('s-22, now-31)
punct(agrees-18, .-32)
punct(agrees-18, ''-33)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: pour#market

pour :: Despite a drying up of domestic demand for equity-warrant paper , more than $ 1 billion of equity-warrant issues poured into the market last week , and further heavy issuance is scheduled for coming weeks ./.
case(drying-3, Despite-1)
det(drying-3, a-2)
nmod:despite(poured-20, drying-3)
case(demand-7, up-4)
case(demand-7, of-5)
amod(demand-7, domestic-6)
nmod:of(drying-3, demand-7)
case(paper-10, for-8)
amod(paper-10, equity-warrant-9)
nmod:for(demand-7, paper-10)
punct(poured-20, ,-11)
advmod($-14, more-12)
mwe(more-12, than-13)
nsubj(poured-20, $-14)
compound(billion-16, 1-15)
nummod($-14, billion-16)
case(issues-19, of-17)
amod(issues-19, equity-warrant-18)
nmod:of($-14, issues-19)
root(ROOT-0, poured-20)
case(market-23, into-21)
det(market-23, the-22)
nmod:into(poured-20, market-23)
amod(week-25, last-24)
nmod:tmod(poured-20, week-25)
punct(poured-20, ,-26)
cc(poured-20, and-27)
advmod(issuance-30, further-28)
amod(issuance-30, heavy-29)
nsubjpass(scheduled-32, issuance-30)
auxpass(scheduled-32, is-31)
conj:and(poured-20, scheduled-32)
case(weeks-35, for-33)
amod(weeks-35, coming-34)
nmod:for(scheduled-32, weeks-35)
punct(poured-20, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#$

pour :: At state dinners , the president pours wine for his guests , but in adherence to Islam never touches a drop himself ./.
case(dinners-3, At-1)
compound(dinners-3, state-2)
nmod:at(pours-7, dinners-3)
punct(pours-7, ,-4)
det(president-6, the-5)
nsubj(pours-7, president-6)
nsubj(touches-19, president-6)
root(ROOT-0, pours-7)
dobj(pours-7, wine-8)
case(guests-11, for-9)
nmod:poss(guests-11, his-10)
nmod:for(pours-7, guests-11)
punct(pours-7, ,-12)
cc(pours-7, but-13)
case(adherence-15, in-14)
nmod:in(touches-19, adherence-15)
case(Islam-17, to-16)
nmod:to(adherence-15, Islam-17)
neg(touches-19, never-18)
conj:but(pours-7, touches-19)
det(drop-21, a-20)
dobj(touches-19, drop-21)
nmod:npmod(drop-21, himself-22)
punct(pours-7, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#wine

pour :: In buying CIT , Manufacturers repeated some of its missteps of its Third World and other lending , adopting a modish banking strategy and pouring proportionately more resources into it than competitors did ./.
mark(buying-2, In-1)
advcl(repeated-6, buying-2)
dobj(buying-2, CIT-3)
punct(repeated-6, ,-4)
nsubj(repeated-6, Manufacturers-5)
root(ROOT-0, repeated-6)
dobj(repeated-6, some-7)
case(missteps-10, of-8)
nmod:poss(missteps-10, its-9)
nmod:of(some-7, missteps-10)
case(World-14, of-11)
nmod:poss(World-14, its-12)
amod(World-14, Third-13)
nmod:of(missteps-10, World-14)
cc(World-14, and-15)
amod(lending-17, other-16)
nmod:of(missteps-10, lending-17)
conj:and(World-14, lending-17)
punct(repeated-6, ,-18)
dep(repeated-6, adopting-19)
det(strategy-23, a-20)
amod(strategy-23, modish-21)
compound(strategy-23, banking-22)
dobj(adopting-19, strategy-23)
cc(adopting-19, and-24)
dep(repeated-6, pouring-25)
conj:and(adopting-19, pouring-25)
advmod(more-27, proportionately-26)
amod(resources-28, more-27)
dobj(pouring-25, resources-28)
case(it-30, into-29)
nmod:into(pouring-25, it-30)
mark(did-33, than-31)
nsubj(did-33, competitors-32)
advcl(pouring-25, did-33)
punct(repeated-6, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#resources

pour :: Some analysts here also poured scorn on the takeover concerns ./.
det(analysts-2, Some-1)
nsubj(poured-5, analysts-2)
advmod(analysts-2, here-3)
advmod(poured-5, also-4)
root(ROOT-0, poured-5)
dobj(poured-5, scorn-6)
case(concerns-10, on-7)
det(concerns-10, the-8)
compound(concerns-10, takeover-9)
nmod:on(scorn-6, concerns-10)
punct(poured-5, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#scorn

pour :: Guests had to do their own pouring and mixing ./.
nsubj(had-2, Guests-1)
nsubj:xsubj(do-4, Guests-1)
root(ROOT-0, had-2)
mark(do-4, to-3)
xcomp(had-2, do-4)
nmod:poss(own-6, their-5)
dobj(do-4, own-6)
dep(do-4, pouring-7)
cc(pouring-7, and-8)
dep(do-4, mixing-9)
conj:and(pouring-7, mixing-9)
punct(had-2, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

pour :: Among other things , that would free up more of Moscow 's resources to be poured into the continuing expansion of the Soviet Pacific fleet and military facilities like Da Nang and Cam Ranh Bay ./.
case(things-3, Among-1)
amod(things-3, other-2)
nmod:among(free-7, things-3)
punct(free-7, ,-4)
nsubj(free-7, that-5)
aux(free-7, would-6)
root(ROOT-0, free-7)
compound:prt(free-7, up-8)
dobj(free-7, more-9)
nsubjpass:xsubj(poured-16, more-9)
case(resources-13, of-10)
nmod:poss(resources-13, Moscow-11)
case(Moscow-11, 's-12)
nmod:of(more-9, resources-13)
mark(poured-16, to-14)
auxpass(poured-16, be-15)
xcomp(free-7, poured-16)
case(expansion-20, into-17)
det(expansion-20, the-18)
amod(expansion-20, continuing-19)
nmod:into(poured-16, expansion-20)
case(fleet-25, of-21)
det(fleet-25, the-22)
compound(fleet-25, Soviet-23)
compound(fleet-25, Pacific-24)
nmod:of(expansion-20, fleet-25)
cc(fleet-25, and-26)
amod(facilities-28, military-27)
nmod:of(expansion-20, facilities-28)
conj:and(fleet-25, facilities-28)
case(Nang-31, like-29)
compound(Nang-31, Da-30)
nmod:like(expansion-20, Nang-31)
cc(Nang-31, and-32)
compound(Bay-35, Cam-33)
compound(Bay-35, Ranh-34)
nmod:like(expansion-20, Bay-35)
conj:and(Nang-31, Bay-35)
punct(free-7, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#be

pour :: `` Do you know what democracy means ? '' he says , pouring a glass of my Orangina ./.
root(ROOT-0, ``-1)
aux(know-4, Do-2)
nsubj(know-4, you-3)
root(``-1, know-4)
dobj(means-7, what-5)
nsubj(means-7, democracy-6)
ccomp(know-4, means-7)
punct(know-4, ?-8)
punct(know-4, ''-9)
nsubj(says-2, he-1)
root(ROOT-0, says-2)
punct(says-2, ,-3)
xcomp(says-2, pouring-4)
det(glass-6, a-5)
dobj(pouring-4, glass-6)
case(Orangina-9, of-7)
nmod:poss(Orangina-9, my-8)
nmod:of(glass-6, Orangina-9)
punct(says-2, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#orangina

pour :: As each diver plunges into a cage , Mr. Roessler pours a smelly dipper of chum on top of him: the initiation rite ./.
mark(plunges-4, As-1)
det(diver-3, each-2)
nsubj(plunges-4, diver-3)
advcl(pours-11, plunges-4)
case(cage-7, into-5)
det(cage-7, a-6)
nmod:into(plunges-4, cage-7)
punct(pours-11, ,-8)
compound(Roessler-10, Mr.-9)
nsubj(pours-11, Roessler-10)
root(ROOT-0, pours-11)
det(dipper-14, a-12)
amod(dipper-14, smelly-13)
dobj(pours-11, dipper-14)
case(chum-16, of-15)
nmod:of(dipper-14, chum-16)
case(him-20, on-17)
mwe(on-17, top-18)
mwe(on-17, of-19)
nmod:on_top_of(pours-11, him-20)
punct(pours-11, :-21)
det(rite-24, the-22)
compound(rite-24, initiation-23)
dep(pours-11, rite-24)
punct(pours-11, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#chum

pour :: I leave her there , pouring out her words into the darkness . ''/''
nsubj(leave-2, I-1)
root(ROOT-0, leave-2)
dobj(leave-2, her-3)
advmod(leave-2, there-4)
punct(leave-2, ,-5)
xcomp(leave-2, pouring-6)
compound:prt(pouring-6, out-7)
nmod:poss(words-9, her-8)
dobj(pouring-6, words-9)
case(darkness-12, into-10)
det(darkness-12, the-11)
nmod:into(pouring-6, darkness-12)
punct(leave-2, .-13)
punct(leave-2, ''-14)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: pour#words

pour :: Why do companies pour money into the wrong places ?/.
advmod(pour-4, Why-1)
aux(pour-4, do-2)
nsubj(pour-4, companies-3)
root(ROOT-0, pour-4)
dobj(pour-4, money-5)
case(places-9, into-6)
det(places-9, the-7)
amod(places-9, wrong-8)
nmod:into(pour-4, places-9)
punct(pour-4, ?-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#money

pour :: Custom demands that cognac be poured from a freshly opened bottle ./.
nsubj(demands-2, Custom-1)
root(ROOT-0, demands-2)
mark(poured-6, that-3)
nsubjpass(poured-6, cognac-4)
auxpass(poured-6, be-5)
ccomp(demands-2, poured-6)
case(bottle-11, from-7)
det(bottle-11, a-8)
advmod(opened-10, freshly-9)
amod(bottle-11, opened-10)
nmod:from(poured-6, bottle-11)
punct(demands-2, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#cognac

pour :: Foreign and domestic buyers poured into the market at the outset of trading on continued strength in the dollar and the widely held belief that interest rates are headed lower , said Frederick Leiner , a futures analyst with Prudential-Bache Securities Inc . , Chicago ./.
amod(buyers-4, Foreign-1)
cc(Foreign-1, and-2)
conj:and(Foreign-1, domestic-3)
amod(buyers-4, domestic-3)
nsubj(poured-5, buyers-4)
ccomp(said-32, poured-5)
case(market-8, into-6)
det(market-8, the-7)
nmod:into(poured-5, market-8)
case(outset-11, at-9)
det(outset-11, the-10)
nmod:at(poured-5, outset-11)
case(trading-13, of-12)
nmod:of(outset-11, trading-13)
case(strength-16, on-14)
amod(strength-16, continued-15)
nmod:on(poured-5, strength-16)
case(dollar-19, in-17)
det(dollar-19, the-18)
nmod:in(strength-16, dollar-19)
cc(strength-16, and-20)
det(belief-24, the-21)
advmod(held-23, widely-22)
amod(belief-24, held-23)
nmod:on(poured-5, belief-24)
conj:and(strength-16, belief-24)
mark(headed-29, that-25)
compound(rates-27, interest-26)
nsubjpass(headed-29, rates-27)
auxpass(headed-29, are-28)
ccomp(belief-24, headed-29)
advmod(headed-29, lower-30)
punct(said-32, ,-31)
root(ROOT-0, said-32)
compound(Leiner-34, Frederick-33)
nsubj(said-32, Leiner-34)
punct(Leiner-34, ,-35)
det(analyst-38, a-36)
compound(analyst-38, futures-37)
appos(Leiner-34, analyst-38)
case(Inc-42, with-39)
compound(Inc-42, Prudential-Bache-40)
compound(Inc-42, Securities-41)
nmod:with(analyst-38, Inc-42)
punct(said-32, .-43)
punct(Chicago-2, ,-1)
root(ROOT-0, Chicago-2)
punct(Chicago-2, .-3)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#buyers

pour :: As clients pour into the issues , prices jump ./.
mark(pour-3, As-1)
nsubj(pour-3, clients-2)
advcl(jump-9, pour-3)
case(issues-6, into-4)
det(issues-6, the-5)
nmod:into(pour-3, issues-6)
punct(jump-9, ,-7)
nsubj(jump-9, prices-8)
root(ROOT-0, jump-9)
punct(jump-9, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#clients

pour :: As each diver plunges into a cage , Mr. Roessler pours a smelly dipper of chum on top of him: the initiation rite ./.
mark(plunges-4, As-1)
det(diver-3, each-2)
nsubj(plunges-4, diver-3)
advcl(pours-11, plunges-4)
case(cage-7, into-5)
det(cage-7, a-6)
nmod:into(plunges-4, cage-7)
punct(pours-11, ,-8)
compound(Roessler-10, Mr.-9)
nsubj(pours-11, Roessler-10)
root(ROOT-0, pours-11)
det(dipper-14, a-12)
amod(dipper-14, smelly-13)
dobj(pours-11, dipper-14)
case(chum-16, of-15)
nmod:of(dipper-14, chum-16)
case(him-20, on-17)
mwe(on-17, top-18)
mwe(on-17, of-19)
nmod:on_top_of(pours-11, him-20)
punct(pours-11, :-21)
det(rite-24, the-22)
compound(rite-24, initiation-23)
dep(pours-11, rite-24)
punct(pours-11, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#chum

pour :: At the Pavilion , Mr. Worthington pours a last glass ./.
case(Pavilion-3, At-1)
det(Pavilion-3, the-2)
nmod:at(pours-7, Pavilion-3)
punct(pours-7, ,-4)
compound(Worthington-6, Mr.-5)
nsubj(pours-7, Worthington-6)
root(ROOT-0, pours-7)
det(glass-10, a-8)
amod(glass-10, last-9)
dobj(pours-7, glass-10)
punct(pours-7, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#glass

pour :: At the same time , revenues from merchant banking poured in ./.
case(time-4, At-1)
det(time-4, the-2)
amod(time-4, same-3)
nmod:at(poured-10, time-4)
punct(poured-10, ,-5)
nsubj(poured-10, revenues-6)
case(banking-9, from-7)
compound(banking-9, merchant-8)
nmod:from(revenues-6, banking-9)
root(ROOT-0, poured-10)
compound:prt(poured-10, in-11)
punct(poured-10, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#revenues

pour :: Perhaps the most surprising finding of the commission was that in 50 major Big Board stocks , 30 % of the specialists sold more shares on Oct. 19 than they bought , apparently pouring gasoline on an already raging fire ./.
advmod(was-9, Perhaps-1)
det(finding-5, the-2)
advmod(surprising-4, most-3)
amod(finding-5, surprising-4)
nsubj(was-9, finding-5)
case(commission-8, of-6)
det(commission-8, the-7)
nmod:of(finding-5, commission-8)
root(ROOT-0, was-9)
mark(sold-23, that-10)
case(stocks-16, in-11)
nummod(stocks-16, 50-12)
amod(stocks-16, major-13)
compound(stocks-16, Big-14)
compound(stocks-16, Board-15)
nmod:in(sold-23, stocks-16)
punct(sold-23, ,-17)
nummod(%-19, 30-18)
nsubj(sold-23, %-19)
case(specialists-22, of-20)
det(specialists-22, the-21)
nmod:of(%-19, specialists-22)
ccomp(was-9, sold-23)
amod(shares-25, more-24)
dobj(sold-23, shares-25)
case(Oct.-27, on-26)
nmod:on(sold-23, Oct.-27)
nummod(Oct.-27, 19-28)
mark(bought-31, than-29)
nsubj(bought-31, they-30)
advcl(sold-23, bought-31)
punct(sold-23, ,-32)
advmod(pouring-34, apparently-33)
advcl(sold-23, pouring-34)
dobj(pouring-34, gasoline-35)
case(fire-40, on-36)
det(fire-40, an-37)
advmod(raging-39, already-38)
amod(fire-40, raging-39)
nmod:on(pouring-34, fire-40)
punct(was-9, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#gasoline

pour :: As we watch everybody eat -- Dan pouring rather a lot of salt on his chicken salad and from the looks of it , running out of banter -- a local pollster makes conversation with the press ./.
mark(watch-3, As-1)
nsubj(watch-3, we-2)
root(ROOT-0, watch-3)
nsubj(eat-5, everybody-4)
ccomp(watch-3, eat-5)
punct(pouring-8, ---6)
nsubj(pouring-8, Dan-7)
nsubj(pouring-8', Dan-7)
dep(watch-3, pouring-8)
dep(watch-3, pouring-8')
conj:and(pouring-8, pouring-8')
advmod(lot-11, rather-9)
det(lot-11, a-10)
dobj(pouring-8, lot-11)
case(salt-13, of-12)
nmod:of(lot-11, salt-13)
case(salad-17, on-14)
nmod:poss(salad-17, his-15)
compound(salad-17, chicken-16)
nmod:on(pouring-8, salad-17)
cc(pouring-8, and-18)
case(looks-21, from-19)
det(looks-21, the-20)
nmod:from(pouring-8', looks-21)
case(it-23, of-22)
nmod:of(looks-21, it-23)
punct(pouring-8, ,-24)
advcl(pouring-8, running-25)
case(banter-28, out-26)
mwe(out-26, of-27)
nmod:out_of(running-25, banter-28)
punct(banter-28, ---29)
det(pollster-32, a-30)
amod(pollster-32, local-31)
nsubj(makes-33, pollster-32)
acl:relcl(banter-28, makes-33)
dobj(makes-33, conversation-34)
case(press-37, with-35)
det(press-37, the-36)
nmod:with(makes-33, press-37)
punct(watch-3, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#salt

pour :: Lone Star Industries Inc. says its new cement , Pyrament , is so durable and fast-drying that an airplane can land on it four hours after it is poured , and so versatile it can be poured in almost any temperature ./.
compound(Inc.-4, Lone-1)
compound(Inc.-4, Star-2)
compound(Inc.-4, Industries-3)
nsubj(says-5, Inc.-4)
root(ROOT-0, says-5)
nmod:poss(cement-8, its-6)
amod(cement-8, new-7)
nsubj(durable-14, cement-8)
nsubj(fast-drying-16, cement-8)
nsubj(versatile-33, cement-8)
punct(cement-8, ,-9)
appos(cement-8, Pyrament-10)
punct(cement-8, ,-11)
cop(durable-14, is-12)
advmod(durable-14, so-13)
ccomp(says-5, durable-14)
cc(durable-14, and-15)
ccomp(says-5, fast-drying-16)
conj:and(durable-14, fast-drying-16)
mark(land-21, that-17)
det(airplane-19, an-18)
nsubj(land-21, airplane-19)
aux(land-21, can-20)
ccomp(durable-14, land-21)
case(it-23, on-22)
nmod:on(land-21, it-23)
nummod(hours-25, four-24)
dep(poured-29, hours-25)
mark(poured-29, after-26)
nsubjpass(poured-29, it-27)
auxpass(poured-29, is-28)
advcl(land-21, poured-29)
punct(durable-14, ,-30)
cc(durable-14, and-31)
advmod(versatile-33, so-32)
ccomp(says-5, versatile-33)
conj:and(durable-14, versatile-33)
nsubjpass(poured-37, it-34)
aux(poured-37, can-35)
auxpass(poured-37, be-36)
ccomp(versatile-33, poured-37)
case(temperature-41, in-38)
advmod(temperature-41, almost-39)
det(temperature-41, any-40)
nmod:in(poured-37, temperature-41)
punct(says-5, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#it

pour :: Joseph M. Kornick , a principal , says the Minute Maid handle is more comfortably rounded `` to fit adults and children '' and has been placed lower `` to lower the center of gravity '' for easier pouring ./.
compound(Kornick-3, Joseph-1)
compound(Kornick-3, M.-2)
nsubj(says-8, Kornick-3)
punct(Kornick-3, ,-4)
det(principal-6, a-5)
appos(Kornick-3, principal-6)
punct(Kornick-3, ,-7)
root(ROOT-0, says-8)
det(Maid-11, the-9)
compound(Maid-11, Minute-10)
nsubj(handle-12, Maid-11)
ccomp(says-8, handle-12)
auxpass(rounded-16, is-13)
advmod(comfortably-15, more-14)
advmod(rounded-16, comfortably-15)
dep(handle-12, rounded-16)
punct(rounded-16, ``-17)
mark(fit-19, to-18)
xcomp(rounded-16, fit-19)
dobj(fit-19, adults-20)
cc(adults-20, and-21)
dobj(fit-19, children-22)
conj:and(adults-20, children-22)
punct(rounded-16, ''-23)
cc(rounded-16, and-24)
aux(placed-27, has-25)
auxpass(placed-27, been-26)
dep(handle-12, placed-27)
conj:and(rounded-16, placed-27)
advmod(placed-27, lower-28)
punct(placed-27, ``-29)
mark(lower-31, to-30)
xcomp(placed-27, lower-31)
det(center-33, the-32)
dobj(lower-31, center-33)
case(gravity-35, of-34)
nmod:of(center-33, gravity-35)
punct(lower-31, ''-36)
case(pouring-39, for-37)
amod(pouring-39, easier-38)
nmod:for(lower-31, pouring-39)
punct(says-8, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

pour :: `` She 's only had the chance to practice her conviction politics because the other side has been pouring paraffin over themselves and putting matches to it in front of the television cameras at routine intervals . ''/''
punct(had-5, ``-1)
nsubjpass(had-5, She-2)
auxpass(had-5, 's-3)
advmod(had-5, only-4)
root(ROOT-0, had-5)
det(chance-7, the-6)
dobj(had-5, chance-7)
mark(practice-9, to-8)
acl(chance-7, practice-9)
nmod:poss(politics-12, her-10)
compound(politics-12, conviction-11)
dobj(practice-9, politics-12)
mark(pouring-19, because-13)
det(side-16, the-14)
amod(side-16, other-15)
nsubj(pouring-19, side-16)
nsubj(putting-24, side-16)
aux(pouring-19, has-17)
aux(pouring-19, been-18)
advcl(had-5, pouring-19)
dobj(pouring-19, paraffin-20)
case(themselves-22, over-21)
nmod:over(pouring-19, themselves-22)
cc(pouring-19, and-23)
advcl(had-5, putting-24)
conj:and(pouring-19, putting-24)
dobj(putting-24, matches-25)
case(it-27, to-26)
nmod:to(putting-24, it-27)
case(cameras-33, in-28)
mwe(in-28, front-29)
mwe(in-28, of-30)
det(cameras-33, the-31)
compound(cameras-33, television-32)
nmod:in_front_of(putting-24, cameras-33)
case(intervals-36, at-34)
amod(intervals-36, routine-35)
nmod:at(putting-24, intervals-36)
punct(had-5, .-37)
punct(had-5, ''-38)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: pour#paraffin

pour :: The report noted that whoever sent the SOS would have had to open a small hatch at the top of the boat in order to extend the radio 's antenna , thereby permitting water to pour in and capsize the craft ./.
det(report-2, The-1)
nsubj(noted-3, report-2)
root(ROOT-0, noted-3)
mark(sent-6, that-4)
nsubj(sent-6, whoever-5)
ccomp(noted-3, sent-6)
det(SOS-8, the-7)
nsubj(had-11, SOS-8)
nsubj:xsubj(open-13, SOS-8)
aux(had-11, would-9)
aux(had-11, have-10)
ccomp(sent-6, had-11)
mark(open-13, to-12)
xcomp(had-11, open-13)
det(hatch-16, a-14)
amod(hatch-16, small-15)
dobj(open-13, hatch-16)
case(top-19, at-17)
det(top-19, the-18)
nmod:at(open-13, top-19)
case(boat-22, of-20)
det(boat-22, the-21)
nmod:of(top-19, boat-22)
mark(extend-26, in-23)
mwe(in-23, order-24)
mark(extend-26, to-25)
advcl(open-13, extend-26)
det(radio-28, the-27)
nmod:poss(antenna-30, radio-28)
case(radio-28, 's-29)
dobj(extend-26, antenna-30)
punct(had-11, ,-31)
advmod(permitting-33, thereby-32)
xcomp(had-11, permitting-33)
dobj(permitting-33, water-34)
mark(pour-36, to-35)
advcl(permitting-33, pour-36)
compound:prt(pour-36, in-37)
cc(pour-36, and-38)
advcl(permitting-33, capsize-39)
conj:and(pour-36, capsize-39)
det(craft-41, the-40)
dobj(pour-36, craft-41)
punct(noted-3, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#craft

pour :: The leak and pump problems developed Friday soon after technicians began pouring more than half a million gallons of liquid hydrogen and liquid oxygen propellant into the spaceship 's external fuel tank on Launch Pad 39B ./.
det(problems-5, The-1)
compound(problems-5, leak-2)
cc(leak-2, and-3)
conj:and(leak-2, pump-4)
compound(problems-5, pump-4)
nsubj(developed-6, problems-5)
root(ROOT-0, developed-6)
nmod:tmod(developed-6, Friday-7)
advmod(began-11, soon-8)
mark(began-11, after-9)
nsubj(began-11, technicians-10)
advcl(developed-6, began-11)
xcomp(began-11, pouring-12)
advmod(half-15, more-13)
mwe(more-13, than-14)
advmod(million-17, half-15)
advmod(million-17, a-16)
nummod(gallons-18, million-17)
dobj(pouring-12, gallons-18)
case(hydrogen-21, of-19)
amod(hydrogen-21, liquid-20)
nmod:of(gallons-18, hydrogen-21)
cc(hydrogen-21, and-22)
amod(propellant-25, liquid-23)
compound(propellant-25, oxygen-24)
nmod:of(gallons-18, propellant-25)
conj:and(hydrogen-21, propellant-25)
case(tank-32, into-26)
det(spaceship-28, the-27)
nmod:poss(tank-32, spaceship-28)
case(spaceship-28, 's-29)
amod(tank-32, external-30)
compound(tank-32, fuel-31)
nmod:into(pouring-12, tank-32)
case(39B-36, on-33)
compound(39B-36, Launch-34)
compound(39B-36, Pad-35)
nmod:on(tank-32, 39B-36)
punct(developed-6, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#hydrogen

pour :: They are pouring lots of free drinks , especially champagne and liqueurs , at art events in Los Angeles and New York ./.
nsubj(pouring-3, They-1)
aux(pouring-3, are-2)
root(ROOT-0, pouring-3)
dobj(pouring-3, lots-4)
case(drinks-7, of-5)
amod(drinks-7, free-6)
nmod:of(lots-4, drinks-7)
punct(lots-4, ,-8)
advmod(champagne-10, especially-9)
appos(lots-4, champagne-10)
cc(champagne-10, and-11)
appos(lots-4, liqueurs-12)
conj:and(champagne-10, liqueurs-12)
punct(lots-4, ,-13)
case(events-16, at-14)
compound(events-16, art-15)
nmod:at(pouring-3, events-16)
case(Angeles-19, in-17)
compound(Angeles-19, Los-18)
nmod:in(events-16, Angeles-19)
cc(Angeles-19, and-20)
compound(York-22, New-21)
nmod:in(events-16, York-22)
conj:and(Angeles-19, York-22)
punct(pouring-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#lots

pour :: Here Mr. Brown plays barkeep mentor to Mr. Cruise , the wise old hand who teaches the pup how to succeed at the high-stakes game of pouring brew ./.
advmod(plays-4, Here-1)
compound(Brown-3, Mr.-2)
nsubj(plays-4, Brown-3)
root(ROOT-0, plays-4)
compound(mentor-6, barkeep-5)
dobj(plays-4, mentor-6)
case(Cruise-9, to-7)
compound(Cruise-9, Mr.-8)
nmod:to(plays-4, Cruise-9)
punct(Cruise-9, ,-10)
det(hand-14, the-11)
amod(hand-14, wise-12)
amod(hand-14, old-13)
appos(Cruise-9, hand-14)
nsubj(teaches-16, hand-14)
ref(hand-14, who-15)
acl:relcl(hand-14, teaches-16)
det(pup-18, the-17)
dobj(teaches-16, pup-18)
nsubj:xsubj(succeed-21, pup-18)
advmod(succeed-21, how-19)
mark(succeed-21, to-20)
xcomp(teaches-16, succeed-21)
case(game-25, at-22)
det(game-25, the-23)
amod(game-25, high-stakes-24)
nmod:at(succeed-21, game-25)
mark(pouring-27, of-26)
acl(game-25, pouring-27)
dobj(pouring-27, brew-28)
punct(plays-4, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pour#brew

pump :: Japanese investors pumped in $ 190 million in this year 's first half ./.
amod(investors-2, Japanese-1)
nsubj(pumped-3, investors-2)
root(ROOT-0, pumped-3)
case($-5, in-4)
nmod:in(pumped-3, $-5)
compound(million-7, 190-6)
nummod($-5, million-7)
case(half-13, in-8)
det(year-10, this-9)
nmod:poss(half-13, year-10)
case(year-10, 's-11)
amod(half-13, first-12)
nmod:in(pumped-3, half-13)
punct(pumped-3, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#investors

pump :: Philip Morris could be forced to deal with the same problems it has struggled with at General Foods -- pumping new life into old products ./.
compound(Morris-2, Philip-1)
nsubjpass(forced-5, Morris-2)
nsubj:xsubj(deal-7, Morris-2)
aux(forced-5, could-3)
auxpass(forced-5, be-4)
root(ROOT-0, forced-5)
mark(deal-7, to-6)
xcomp(forced-5, deal-7)
case(problems-11, with-8)
det(problems-11, the-9)
amod(problems-11, same-10)
nmod:with(deal-7, problems-11)
nsubj(struggled-14, it-12)
aux(struggled-14, has-13)
acl:relcl(problems-11, struggled-14)
case(Foods-18, with-15)
case(Foods-18, at-16)
compound(Foods-18, General-17)
nmod:with(struggled-14, Foods-18)
punct(problems-11, ---19)
acl(problems-11, pumping-20)
amod(life-22, new-21)
dobj(pumping-20, life-22)
case(products-25, into-23)
amod(products-25, old-24)
nmod:into(pumping-20, products-25)
punct(forced-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#life

pump :: Credited with pumping new life into tired food brands , he is a lure for any potential acquirer , and is a likely candidate of Philip Morris to lead its lackluster General Foods businesses ./.
advcl(lure-14, Credited-1)
mark(pumping-3, with-2)
advcl(Credited-1, pumping-3)
amod(life-5, new-4)
dobj(pumping-3, life-5)
case(brands-9, into-6)
amod(brands-9, tired-7)
compound(brands-9, food-8)
nmod:into(pumping-3, brands-9)
punct(lure-14, ,-10)
nsubj(lure-14, he-11)
cop(lure-14, is-12)
det(lure-14, a-13)
root(ROOT-0, lure-14)
case(acquirer-18, for-15)
det(acquirer-18, any-16)
amod(acquirer-18, potential-17)
nmod:for(lure-14, acquirer-18)
punct(lure-14, ,-19)
cc(lure-14, and-20)
cop(candidate-24, is-21)
det(candidate-24, a-22)
amod(candidate-24, likely-23)
conj:and(lure-14, candidate-24)
case(Morris-27, of-25)
compound(Morris-27, Philip-26)
nmod:of(candidate-24, Morris-27)
mark(lead-29, to-28)
acl(candidate-24, lead-29)
nmod:poss(businesses-34, its-30)
amod(businesses-34, lackluster-31)
amod(businesses-34, General-32)
compound(businesses-34, Foods-33)
dobj(lead-29, businesses-34)
punct(lure-14, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#life

pump :: London , freed from foreign-exchange controls in 1979 , has become a world financial center , pumping more than twice as much money into the country now as North Sea oil ./.
nsubj(become-11, London-1)
punct(London-1, ,-2)
acl(London-1, freed-3)
case(controls-6, from-4)
compound(controls-6, foreign-exchange-5)
nmod:from(freed-3, controls-6)
case(1979-8, in-7)
nmod:in(freed-3, 1979-8)
punct(London-1, ,-9)
aux(become-11, has-10)
root(ROOT-0, become-11)
det(center-15, a-12)
compound(center-15, world-13)
amod(center-15, financial-14)
xcomp(become-11, center-15)
punct(become-11, ,-16)
xcomp(become-11, pumping-17)
advmod(much-22, more-18)
advmod(much-22, than-19)
advmod(much-22, twice-20)
advmod(much-22, as-21)
amod(money-23, much-22)
dobj(pumping-17, money-23)
case(country-26, into-24)
det(country-26, the-25)
nmod:into(pumping-17, country-26)
advmod(oil-31, now-27)
case(oil-31, as-28)
compound(oil-31, North-29)
compound(oil-31, Sea-30)
nmod:as(pumping-17, oil-31)
punct(become-11, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#money

pump :: One of the highest concentrations of chemical plants in the nation , its hulking factories whir and hiss , pumping steam into a hazy , burnt-orange sky ./.
root(ROOT-0, One-1)
case(concentrations-5, of-2)
det(concentrations-5, the-3)
amod(concentrations-5, highest-4)
nmod:of(One-1, concentrations-5)
case(plants-8, of-6)
compound(plants-8, chemical-7)
nmod:of(concentrations-5, plants-8)
case(nation-11, in-9)
det(nation-11, the-10)
nmod:in(concentrations-5, nation-11)
punct(One-1, ,-12)
nmod:poss(whir-16, its-13)
amod(whir-16, hulking-14)
compound(whir-16, factories-15)
appos(One-1, whir-16)
cc(whir-16, and-17)
appos(One-1, hiss-18)
conj:and(whir-16, hiss-18)
punct(One-1, ,-19)
amod(steam-21, pumping-20)
appos(One-1, steam-21)
case(sky-27, into-22)
det(sky-27, a-23)
amod(sky-27, hazy-24)
punct(sky-27, ,-25)
amod(sky-27, burnt-orange-26)
nmod:into(steam-21, sky-27)
punct(One-1, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#steam

pump :: France 's Socialist government resurrected the previous government 's plan to pump 12 billion francs -LRB- $ 1.88 billion -RRB- into state-owned auto maker Regie Nationale des Usines Renault , a move that may raise hackles in the European Community ./.
nmod:poss(government-4, France-1)
case(France-1, 's-2)
amod(government-4, Socialist-3)
nsubj(resurrected-5, government-4)
root(ROOT-0, resurrected-5)
det(government-8, the-6)
amod(government-8, previous-7)
nmod:poss(plan-10, government-8)
case(government-8, 's-9)
dobj(resurrected-5, plan-10)
mark(pump-12, to-11)
acl(plan-10, pump-12)
compound(billion-14, 12-13)
nummod(francs-15, billion-14)
dobj(pump-12, francs-15)
punct($-17, -LRB--16)
dep(francs-15, $-17)
compound(billion-19, 1.88-18)
nummod($-17, billion-19)
punct($-17, -RRB--20)
case(maker-24, into-21)
amod(maker-24, state-owned-22)
compound(maker-24, auto-23)
nmod:into(pump-12, maker-24)
compound(Renault-29, Regie-25)
compound(Renault-29, Nationale-26)
compound(Renault-29, des-27)
compound(Renault-29, Usines-28)
dep(maker-24, Renault-29)
punct(Renault-29, ,-30)
det(move-32, a-31)
appos(Renault-29, move-32)
nsubj(raise-35, move-32)
ref(move-32, that-33)
aux(raise-35, may-34)
acl:relcl(move-32, raise-35)
dobj(raise-35, hackles-36)
case(Community-40, in-37)
det(Community-40, the-38)
compound(Community-40, European-39)
nmod:in(raise-35, Community-40)
punct(resurrected-5, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#francs

pump :: The addition of the Iraqi Kurds , at least 20 % of whom are Pesh Merga fighting for an independent Kurdistan , could pump new vigor into Turkey 's indigenous Kurdish extremists ./.
det(addition-2, The-1)
nsubj(Merga-16, addition-2)
case(Kurds-6, of-3)
det(Kurds-6, the-4)
amod(Kurds-6, Iraqi-5)
nmod:of(addition-2, Kurds-6)
punct(Merga-16, ,-7)
case(least-9, at-8)
nmod:npmod(20-10, least-9)
nummod(%-11, 20-10)
nsubj(Merga-16, %-11)
case(whom-13, of-12)
nmod:of(%-11, whom-13)
cop(Merga-16, are-14)
amod(Merga-16, Pesh-15)
root(ROOT-0, Merga-16)
xcomp(Merga-16, fighting-17)
case(Kurdistan-21, for-18)
det(Kurdistan-21, an-19)
amod(Kurdistan-21, independent-20)
nmod:for(fighting-17, Kurdistan-21)
punct(Merga-16, ,-22)
aux(pump-24, could-23)
dep(Merga-16, pump-24)
amod(vigor-26, new-25)
dobj(pump-24, vigor-26)
case(extremists-32, into-27)
nmod:poss(extremists-32, Turkey-28)
case(Turkey-28, 's-29)
amod(extremists-32, indigenous-30)
amod(extremists-32, Kurdish-31)
nmod:into(pump-24, extremists-32)
punct(Merga-16, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#vigor

pump :: Roger Ailes , the man who will guide George Bush 's heavy media campaign , is pumping up his anger like a lineman preparing to crush the opposing quarterback ./.
compound(Ailes-2, Roger-1)
nsubj(pumping-17, Ailes-2)
punct(Ailes-2, ,-3)
det(man-5, the-4)
appos(Ailes-2, man-5)
nsubj(guide-8, man-5)
ref(man-5, who-6)
aux(guide-8, will-7)
acl:relcl(man-5, guide-8)
compound(Bush-10, George-9)
nmod:poss(campaign-14, Bush-10)
case(Bush-10, 's-11)
amod(campaign-14, heavy-12)
compound(campaign-14, media-13)
dobj(guide-8, campaign-14)
punct(Ailes-2, ,-15)
aux(pumping-17, is-16)
root(ROOT-0, pumping-17)
compound:prt(pumping-17, up-18)
nmod:poss(anger-20, his-19)
dobj(pumping-17, anger-20)
case(lineman-23, like-21)
det(lineman-23, a-22)
nmod:like(pumping-17, lineman-23)
acl(lineman-23, preparing-24)
mark(crush-26, to-25)
xcomp(preparing-24, crush-26)
det(quarterback-29, the-27)
amod(quarterback-29, opposing-28)
dobj(crush-26, quarterback-29)
punct(pumping-17, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#anger

pump :: In doing so , the state is trying to use retirees as a vehicle to achieve a public-policy aim: pumping more jobs and money into its poorest region ./.
mark(doing-2, In-1)
advcl(trying-8, doing-2)
advmod(doing-2, so-3)
punct(trying-8, ,-4)
det(state-6, the-5)
nsubj(trying-8, state-6)
nsubj:xsubj(use-10, state-6)
aux(trying-8, is-7)
root(ROOT-0, trying-8)
mark(use-10, to-9)
xcomp(trying-8, use-10)
dobj(use-10, retirees-11)
case(vehicle-14, as-12)
det(vehicle-14, a-13)
nmod:as(use-10, vehicle-14)
mark(achieve-16, to-15)
advcl(use-10, achieve-16)
det(aim-19, a-17)
compound(aim-19, public-policy-18)
dobj(achieve-16, aim-19)
punct(trying-8, :-20)
parataxis(trying-8, pumping-21)
amod(jobs-23, more-22)
dobj(pumping-21, jobs-23)
cc(jobs-23, and-24)
dobj(pumping-21, money-25)
conj:and(jobs-23, money-25)
case(region-29, into-26)
nmod:poss(region-29, its-27)
amod(region-29, poorest-28)
nmod:into(pumping-21, region-29)
punct(trying-8, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#jobs

pump :: Because of such saturation , German officials argue , cutting already low interest rates or pumping up a budget deficit that is already a higher percentage of their economy than the U.S. deficit , would lead to rampant inflation ./.
case(saturation-4, Because-1)
mwe(Because-1, of-2)
amod(saturation-4, such-3)
nmod:because_of(lead-36, saturation-4)
punct(argue-8, ,-5)
amod(officials-7, German-6)
nsubj(argue-8, officials-7)
parataxis(lead-36, argue-8)
punct(argue-8, ,-9)
ccomp(argue-8, cutting-10)
advmod(low-12, already-11)
amod(rates-14, low-12)
compound(rates-14, interest-13)
dobj(cutting-10, rates-14)
cc(cutting-10, or-15)
ccomp(argue-8, pumping-16)
conj:or(cutting-10, pumping-16)
compound:prt(pumping-16, up-17)
det(deficit-20, a-18)
compound(deficit-20, budget-19)
dobj(pumping-16, deficit-20)
nsubj(percentage-26, deficit-20)
ref(deficit-20, that-21)
cop(percentage-26, is-22)
advmod(percentage-26, already-23)
det(percentage-26, a-24)
amod(percentage-26, higher-25)
acl:relcl(deficit-20, percentage-26)
case(economy-29, of-27)
nmod:poss(economy-29, their-28)
nmod:of(percentage-26, economy-29)
case(deficit-33, than-30)
det(deficit-33, the-31)
compound(deficit-33, U.S.-32)
nmod:than(percentage-26, deficit-33)
punct(argue-8, ,-34)
aux(lead-36, would-35)
root(ROOT-0, lead-36)
case(inflation-39, to-37)
amod(inflation-39, rampant-38)
nmod:to(lead-36, inflation-39)
punct(lead-36, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#deficit

pump :: Wolverine also said the Wyoming well is being pumped at a rate of 255 barrels of oil a day from a depth of 7 , 260 feet ./.
nsubj(said-3, Wolverine-1)
advmod(said-3, also-2)
root(ROOT-0, said-3)
det(well-6, the-4)
compound(well-6, Wyoming-5)
nsubjpass(pumped-9, well-6)
aux(pumped-9, is-7)
auxpass(pumped-9, being-8)
ccomp(said-3, pumped-9)
case(rate-12, at-10)
det(rate-12, a-11)
nmod:at(pumped-9, rate-12)
case(barrels-15, of-13)
nummod(barrels-15, 255-14)
nmod:of(rate-12, barrels-15)
case(oil-17, of-16)
nmod:of(barrels-15, oil-17)
det(day-19, a-18)
nmod:npmod(barrels-15, day-19)
case(depth-22, from-20)
det(depth-22, a-21)
nmod:from(pumped-9, depth-22)
case(feet-27, of-23)
nummod(feet-27, 7-24)
punct(feet-27, ,-25)
nummod(feet-27, 260-26)
nmod:of(depth-22, feet-27)
punct(said-3, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#well

pump :: Among the hundreds of pages of affidavits and depositions filed by the SEC with a federal court in New York earlier this week are sworn statements by six of Mr. Wang 's colleagues in Morgan Stanley 's mergers and acquisitions department indicating that he was intimately familiar with much of their work , and sometimes may have pumped them for details ./.
case(hundreds-3, Among-1)
det(hundreds-3, the-2)
nmod:among(sworn-25, hundreds-3)
case(pages-5, of-4)
nmod:of(hundreds-3, pages-5)
case(affidavits-7, of-6)
nmod:of(pages-5, affidavits-7)
cc(affidavits-7, and-8)
nmod:of(pages-5, depositions-9)
conj:and(affidavits-7, depositions-9)
acl(affidavits-7, filed-10)
case(SEC-13, by-11)
det(SEC-13, the-12)
nmod:by(filed-10, SEC-13)
case(court-17, with-14)
det(court-17, a-15)
amod(court-17, federal-16)
nmod:with(filed-10, court-17)
case(York-20, in-18)
compound(York-20, New-19)
nmod:in(court-17, York-20)
advmod(week-23, earlier-21)
det(week-23, this-22)
nmod:tmod(filed-10, week-23)
auxpass(sworn-25, are-24)
root(ROOT-0, sworn-25)
dobj(sworn-25, statements-26)
case(six-28, by-27)
nmod:agent(sworn-25, six-28)
case(colleagues-33, of-29)
compound(Wang-31, Mr.-30)
nmod:poss(colleagues-33, Wang-31)
case(Wang-31, 's-32)
nmod:of(six-28, colleagues-33)
case(mergers-38, in-34)
compound(Stanley-36, Morgan-35)
nmod:poss(mergers-38, Stanley-36)
case(Stanley-36, 's-37)
nmod:in(colleagues-33, mergers-38)
cc(mergers-38, and-39)
compound(department-41, acquisitions-40)
nmod:in(colleagues-33, department-41)
conj:and(mergers-38, department-41)
advcl(sworn-25, indicating-42)
mark(familiar-47, that-43)
nsubj(familiar-47, he-44)
nsubj(pumped-58, he-44)
cop(familiar-47, was-45)
advmod(familiar-47, intimately-46)
ccomp(indicating-42, familiar-47)
case(much-49, with-48)
nmod:with(familiar-47, much-49)
case(work-52, of-50)
nmod:poss(work-52, their-51)
nmod:of(much-49, work-52)
punct(familiar-47, ,-53)
cc(familiar-47, and-54)
advmod(pumped-58, sometimes-55)
aux(pumped-58, may-56)
aux(pumped-58, have-57)
ccomp(indicating-42, pumped-58)
conj:and(familiar-47, pumped-58)
dobj(pumped-58, them-59)
case(details-61, for-60)
nmod:for(pumped-58, details-61)
punct(sworn-25, .-62)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#them

pump :: In the year ended March 31 , North Sea oil pumped # 8.2 billion into government coffers ./.
case(year-3, In-1)
det(year-3, the-2)
nmod:in(pumped-11, year-3)
acl(year-3, ended-4)
nmod:tmod(ended-4, March-5)
nummod(March-5, 31-6)
punct(pumped-11, ,-7)
compound(oil-10, North-8)
compound(oil-10, Sea-9)
nsubj(pumped-11, oil-10)
root(ROOT-0, pumped-11)
compound(billion-14, #-12)
compound(billion-14, 8.2-13)
dobj(pumped-11, billion-14)
case(coffers-17, into-15)
compound(coffers-17, government-16)
nmod:into(pumped-11, coffers-17)
punct(pumped-11, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#billion

pump :: Britain 's North Sea section pumps about 2.5 million barrels of oil a day , while the Norwegian section pumps about 1.2 million barrels a day ./.
nmod:poss(pumps-6, Britain-1)
case(Britain-1, 's-2)
compound(pumps-6, North-3)
compound(pumps-6, Sea-4)
compound(pumps-6, section-5)
root(ROOT-0, pumps-6)
advmod(million-9, about-7)
compound(million-9, 2.5-8)
nummod(barrels-10, million-9)
dep(pumps-6, barrels-10)
case(oil-12, of-11)
nmod:of(barrels-10, oil-12)
det(day-14, a-13)
nmod:npmod(barrels-10, day-14)
punct(pumps-6, ,-15)
mark(barrels-24, while-16)
det(pumps-20, the-17)
amod(pumps-20, Norwegian-18)
compound(pumps-20, section-19)
nsubj(barrels-24, pumps-20)
advmod(million-23, about-21)
compound(million-23, 1.2-22)
nummod(barrels-24, million-23)
dep(pumps-6, barrels-24)
det(day-26, a-25)
nmod:npmod(barrels-24, day-26)
punct(pumps-6, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#britain

pump :: He says he has been `` pumping up the volume '' on his staff ./.
nsubj(says-2, He-1)
root(ROOT-0, says-2)
nsubj(pumping-7, he-3)
aux(pumping-7, has-4)
aux(pumping-7, been-5)
punct(pumping-7, ``-6)
ccomp(says-2, pumping-7)
compound:prt(pumping-7, up-8)
det(volume-10, the-9)
dobj(pumping-7, volume-10)
punct(volume-10, ''-11)
case(staff-14, on-12)
nmod:poss(staff-14, his-13)
nmod:on(volume-10, staff-14)
punct(says-2, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#volume

pump :: They are irate about new capital-adequacy requirements that force securities firms to pump at least 20 % more capital into reserves ./.
nsubj(irate-3, They-1)
cop(irate-3, are-2)
root(ROOT-0, irate-3)
case(requirements-7, about-4)
amod(requirements-7, new-5)
compound(requirements-7, capital-adequacy-6)
nmod:about(irate-3, requirements-7)
nsubj(force-9, requirements-7)
ref(requirements-7, that-8)
acl:relcl(requirements-7, force-9)
compound(firms-11, securities-10)
dobj(force-9, firms-11)
nsubj:xsubj(pump-13, firms-11)
mark(pump-13, to-12)
xcomp(force-9, pump-13)
case(least-15, at-14)
nmod:npmod(20-16, least-15)
nummod(%-17, 20-16)
nmod:npmod(more-18, %-17)
amod(capital-19, more-18)
dobj(pump-13, capital-19)
case(reserves-21, into-20)
nmod:into(pump-13, reserves-21)
punct(irate-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#capital

pump :: The commission 's endorsement of using gambling to pump up Detroit 's economy was widely expected , and serves mainly to push the heated Detroit casino debate back to the city council ./.
det(commission-2, The-1)
nmod:poss(endorsement-4, commission-2)
case(commission-2, 's-3)
nsubjpass(expected-16, endorsement-4)
nsubj(serves-19, endorsement-4)
nsubj:xsubj(push-22, endorsement-4)
mark(using-6, of-5)
acl(endorsement-4, using-6)
dobj(using-6, gambling-7)
mark(pump-9, to-8)
advcl(using-6, pump-9)
compound:prt(pump-9, up-10)
nmod:poss(economy-13, Detroit-11)
case(Detroit-11, 's-12)
dobj(pump-9, economy-13)
auxpass(expected-16, was-14)
advmod(expected-16, widely-15)
root(ROOT-0, expected-16)
punct(expected-16, ,-17)
cc(expected-16, and-18)
conj:and(expected-16, serves-19)
advmod(serves-19, mainly-20)
mark(push-22, to-21)
xcomp(serves-19, push-22)
det(debate-27, the-23)
amod(debate-27, heated-24)
compound(debate-27, Detroit-25)
compound(debate-27, casino-26)
dobj(push-22, debate-27)
advmod(push-22, back-28)
case(council-32, to-29)
det(council-32, the-30)
compound(council-32, city-31)
nmod:to(back-28, council-32)
punct(expected-16, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#economy

pump :: Each will pump almost $ 25 million into media and polling ./.
nsubj(pump-3, Each-1)
aux(pump-3, will-2)
root(ROOT-0, pump-3)
advmod($-5, almost-4)
dobj(pump-3, $-5)
compound(million-7, 25-6)
nummod($-5, million-7)
case(media-9, into-8)
nmod:into(pump-3, media-9)
cc(media-9, and-10)
nmod:into(pump-3, polling-11)
conj:and(media-9, polling-11)
punct(pump-3, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#$

pump :: There is , of course , a long-established list of `` have '' and `` have not '' sports in the U.S . , but it is ironic that weightlifting ranks with the `` nots '' at a time when Americans are pumping iron in unprecedented numbers ./.
expl(is-2, There-1)
root(ROOT-0, is-2)
punct(is-2, ,-3)
case(course-5, of-4)
nmod:of(is-2, course-5)
punct(is-2, ,-6)
det(list-9, a-7)
amod(list-9, long-established-8)
nsubj(is-2, list-9)
case(have-12, of-10)
punct(have-12, ``-11)
nmod:of(list-9, have-12)
punct(have-12, ''-13)
cc(have-12, and-14)
punct(have-12, ``-15)
aux(sports-19, have-16)
neg(sports-19, not-17)
punct(sports-19, ''-18)
nmod:of(list-9, sports-19)
conj:and(have-12, sports-19)
case(U.S-22, in-20)
det(U.S-22, the-21)
nmod:in(sports-19, U.S-22)
punct(is-2, .-23)
punct(ironic-5, ,-1)
cc(ironic-5, but-2)
nsubj(ironic-5, it-3)
cop(ironic-5, is-4)
root(ROOT-0, ironic-5)
dep(ironic-5, that-6)
amod(ranks-8, weightlifting-7)
root(that-6, ranks-8)
case(nots-12, with-9)
det(nots-12, the-10)
punct(nots-12, ``-11)
nmod:with(ranks-8, nots-12)
punct(nots-12, ''-13)
case(time-16, at-14)
det(time-16, a-15)
nmod:at(ranks-8, time-16)
advmod(pumping-20, when-17)
nsubj(pumping-20, Americans-18)
aux(pumping-20, are-19)
acl:relcl(time-16, pumping-20)
dobj(pumping-20, iron-21)
case(numbers-24, in-22)
amod(numbers-24, unprecedented-23)
nmod:in(pumping-20, numbers-24)
punct(ranks-8, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#iron

pump :: The company has been pumping gas in Houston for more than 25 years , but is classified in the area as a non-major , with a market share of just 2.6 % , according to Whitney Leigh ./.
det(company-2, The-1)
nsubj(pumping-5, company-2)
nsubjpass(classified-17, company-2)
aux(pumping-5, has-3)
aux(pumping-5, been-4)
root(ROOT-0, pumping-5)
dobj(pumping-5, gas-6)
case(Houston-8, in-7)
nmod:in(pumping-5, Houston-8)
case(years-13, for-9)
advmod(25-12, more-10)
mwe(more-10, than-11)
nummod(years-13, 25-12)
nmod:for(pumping-5, years-13)
punct(pumping-5, ,-14)
cc(pumping-5, but-15)
auxpass(classified-17, is-16)
conj:but(pumping-5, classified-17)
case(area-20, in-18)
det(area-20, the-19)
nmod:in(classified-17, area-20)
case(non-major-23, as-21)
det(non-major-23, a-22)
nmod:as(classified-17, non-major-23)
punct(classified-17, ,-24)
case(share-28, with-25)
det(share-28, a-26)
compound(share-28, market-27)
nmod:with(classified-17, share-28)
case(%-32, of-29)
advmod(2.6-31, just-30)
nummod(%-32, 2.6-31)
nmod:of(share-28, %-32)
punct(pumping-5, ,-33)
case(Leigh-37, according-34)
mwe(according-34, to-35)
compound(Leigh-37, Whitney-36)
conj:but(pumping-5, Leigh-37)
punct(pumping-5, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#gas

pump :: Mr. Bluey , who reports to SEC enforcement chief Gary Lynch , says he will particularly watch for accounting violations in pumping up sales , cost deferral and new types of financial instruments ./.
compound(Bluey-2, Mr.-1)
nsubj(reports-5, Bluey-2)
nsubj(says-13, Bluey-2)
punct(Bluey-2, ,-3)
ref(Bluey-2, who-4)
acl:relcl(Bluey-2, reports-5)
case(Lynch-11, to-6)
compound(Lynch-11, SEC-7)
compound(Lynch-11, enforcement-8)
compound(Lynch-11, chief-9)
compound(Lynch-11, Gary-10)
nmod:to(reports-5, Lynch-11)
punct(Bluey-2, ,-12)
root(ROOT-0, says-13)
nsubj(watch-17, he-14)
aux(watch-17, will-15)
advmod(watch-17, particularly-16)
ccomp(says-13, watch-17)
case(violations-20, for-18)
compound(violations-20, accounting-19)
nmod:for(watch-17, violations-20)
mark(pumping-22, in-21)
advcl(watch-17, pumping-22)
compound:prt(pumping-22, up-23)
dobj(pumping-22, sales-24)
punct(watch-17, ,-25)
compound(deferral-27, cost-26)
dobj(watch-17, deferral-27)
cc(deferral-27, and-28)
amod(types-30, new-29)
dobj(watch-17, types-30)
conj:and(deferral-27, types-30)
case(instruments-33, of-31)
amod(instruments-33, financial-32)
nmod:of(types-30, instruments-33)
punct(says-13, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#sales

pump :: Instead of buying assets and pumping up bank reserves last spring , the Fed should have been heeding the run-up in gold and commodities and playing the sell card ./.
mark(buying-3, Instead-1)
mwe(Instead-1, of-2)
advcl(heeding-18, buying-3)
dobj(buying-3, assets-4)
cc(buying-3, and-5)
conj:and(buying-3, pumping-6)
advcl(heeding-18, pumping-6)
compound:prt(pumping-6, up-7)
compound(reserves-9, bank-8)
dobj(pumping-6, reserves-9)
amod(spring-11, last-10)
nmod:tmod(pumping-6, spring-11)
punct(heeding-18, ,-12)
det(Fed-14, the-13)
nsubj(heeding-18, Fed-14)
nsubj(playing-26, Fed-14)
aux(heeding-18, should-15)
aux(heeding-18, have-16)
aux(heeding-18, been-17)
root(ROOT-0, heeding-18)
det(run-up-20, the-19)
dobj(heeding-18, run-up-20)
case(gold-22, in-21)
nmod:in(run-up-20, gold-22)
cc(gold-22, and-23)
nmod:in(run-up-20, commodities-24)
conj:and(gold-22, commodities-24)
cc(heeding-18, and-25)
conj:and(heeding-18, playing-26)
det(card-29, the-27)
compound(card-29, sell-28)
dobj(playing-26, card-29)
punct(heeding-18, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#reserves

pump :: Texas Air said the sale of the hourly New York-Boston-Washington shuttle is intended to pump cash into long-ailing Eastern ./.
compound(Air-2, Texas-1)
nsubj(said-3, Air-2)
root(ROOT-0, said-3)
det(sale-5, the-4)
nsubjpass(intended-13, sale-5)
nsubj:xsubj(pump-15, sale-5)
case(shuttle-11, of-6)
det(shuttle-11, the-7)
amod(shuttle-11, hourly-8)
amod(shuttle-11, New-9)
compound(shuttle-11, York-Boston-Washington-10)
nmod:of(sale-5, shuttle-11)
auxpass(intended-13, is-12)
ccomp(said-3, intended-13)
mark(pump-15, to-14)
xcomp(intended-13, pump-15)
dobj(pump-15, cash-16)
case(Eastern-19, into-17)
amod(Eastern-19, long-ailing-18)
nmod:into(pump-15, Eastern-19)
punct(said-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#cash

pump :: For most promoters , the preferred scam is `` pump and dump '' -- pump up the per-share price with hot air and hype , then dump the stock on duped investors for immense profits ./.
case(promoters-3, For-1)
amod(promoters-3, most-2)
nmod:for(pump-10, promoters-3)
punct(pump-10, ,-4)
det(scam-7, the-5)
amod(scam-7, preferred-6)
nsubj(pump-10, scam-7)
cop(pump-10, is-8)
punct(pump-10, ``-9)
root(ROOT-0, pump-10)
cc(pump-10, and-11)
conj:and(pump-10, dump-12)
punct(pump-10, ''-13)
punct(pump-10, ---14)
dep(pump-10, pump-15)
compound:prt(pump-15, up-16)
det(price-19, the-17)
amod(price-19, per-share-18)
dobj(pump-15, price-19)
case(air-22, with-20)
amod(air-22, hot-21)
nmod:with(pump-15, air-22)
cc(air-22, and-23)
nmod:with(pump-15, hype-24)
conj:and(air-22, hype-24)
punct(pump-15, ,-25)
advmod(dump-27, then-26)
dep(pump-15, dump-27)
det(stock-29, the-28)
dobj(dump-27, stock-29)
case(investors-32, on-30)
amod(investors-32, duped-31)
nmod:on(dump-27, investors-32)
case(profits-35, for-33)
amod(profits-35, immense-34)
nmod:for(dump-27, profits-35)
punct(pump-10, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#price

pump :: By pumping money into coverage of local business , the papers aimed at an affluent and influential audience in their communities ./.
mark(pumping-2, By-1)
root(ROOT-0, pumping-2)
dobj(pumping-2, money-3)
case(coverage-5, into-4)
nmod:into(pumping-2, coverage-5)
case(business-8, of-6)
amod(business-8, local-7)
nmod:of(coverage-5, business-8)
punct(pumping-2, ,-9)
det(papers-11, the-10)
root(,-9, papers-11)
acl(papers-11, aimed-12)
case(audience-18, at-13)
det(audience-18, an-14)
amod(audience-18, affluent-15)
cc(affluent-15, and-16)
conj:and(affluent-15, influential-17)
amod(audience-18, influential-17)
nmod:at(aimed-12, audience-18)
case(communities-21, in-19)
nmod:poss(communities-21, their-20)
nmod:in(audience-18, communities-21)
punct(papers-11, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#money

pump :: Asset managers and institutions , which have been selling some of their old OTC favorites for two days now , began pumping proceeds into former OTC high-flyers , mostly issues that plummeted in the crash ./.
compound(managers-2, Asset-1)
nsubj(selling-9, managers-2)
nsubj(began-21, managers-2)
cc(managers-2, and-3)
conj:and(managers-2, institutions-4)
nsubj(selling-9, institutions-4)
nsubj(began-21, institutions-4)
punct(managers-2, ,-5)
ref(managers-2, which-6)
aux(selling-9, have-7)
aux(selling-9, been-8)
acl:relcl(managers-2, selling-9)
dobj(selling-9, some-10)
case(favorites-15, of-11)
nmod:poss(favorites-15, their-12)
amod(favorites-15, old-13)
compound(favorites-15, OTC-14)
nmod:of(some-10, favorites-15)
case(days-18, for-16)
nummod(days-18, two-17)
nmod:for(selling-9, days-18)
advmod(days-18, now-19)
punct(managers-2, ,-20)
root(ROOT-0, began-21)
xcomp(began-21, pumping-22)
dobj(pumping-22, proceeds-23)
case(high-flyers-27, into-24)
amod(high-flyers-27, former-25)
compound(high-flyers-27, OTC-26)
nmod:into(pumping-22, high-flyers-27)
punct(began-21, ,-28)
advmod(issues-30, mostly-29)
dobj(began-21, issues-30)
nsubj(plummeted-32, issues-30)
ref(issues-30, that-31)
acl:relcl(issues-30, plummeted-32)
case(crash-35, in-33)
det(crash-35, the-34)
nmod:in(plummeted-32, crash-35)
punct(began-21, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#proceeds

pump :: But last year a team of investors pumped about $ 3 million in new equity into the company and restructured some of its debt ./.
cc(pumped-8, But-1)
amod(year-3, last-2)
nmod:tmod(pumped-8, year-3)
det(team-5, a-4)
nsubj(pumped-8, team-5)
nsubj(restructured-20, team-5)
case(investors-7, of-6)
nmod:of(team-5, investors-7)
root(ROOT-0, pumped-8)
advmod($-10, about-9)
dobj(pumped-8, $-10)
compound(million-12, 3-11)
nummod($-10, million-12)
case(equity-15, in-13)
amod(equity-15, new-14)
nmod:in($-10, equity-15)
case(company-18, into-16)
det(company-18, the-17)
nmod:into(pumped-8, company-18)
cc(pumped-8, and-19)
conj:and(pumped-8, restructured-20)
dobj(restructured-20, some-21)
case(debt-24, of-22)
nmod:poss(debt-24, its-23)
nmod:of(some-21, debt-24)
punct(pumped-8, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#$

pump :: Thanks to further development of previously discovered reserves in Alaska and the Gulf of Mexico , BP America is one of the few North American oil producers that pumped more crude oil last year than in 1986 ./.
dep(one-20, Thanks-1)
case(development-4, to-2)
amod(development-4, further-3)
nmod:to(Thanks-1, development-4)
case(reserves-8, of-5)
advmod(discovered-7, previously-6)
amod(reserves-8, discovered-7)
nmod:of(development-4, reserves-8)
case(Alaska-10, in-9)
nmod:in(reserves-8, Alaska-10)
cc(Alaska-10, and-11)
det(Gulf-13, the-12)
nmod:in(reserves-8, Gulf-13)
conj:and(Alaska-10, Gulf-13)
case(Mexico-15, of-14)
nmod:of(Gulf-13, Mexico-15)
punct(one-20, ,-16)
compound(America-18, BP-17)
nsubj(one-20, America-18)
cop(one-20, is-19)
root(ROOT-0, one-20)
case(producers-27, of-21)
det(producers-27, the-22)
amod(producers-27, few-23)
amod(American-25, North-24)
amod(producers-27, American-25)
compound(producers-27, oil-26)
nmod:of(one-20, producers-27)
nsubj(pumped-29, producers-27)
ref(producers-27, that-28)
acl:relcl(producers-27, pumped-29)
advmod(crude-31, more-30)
amod(oil-32, crude-31)
dobj(pumped-29, oil-32)
amod(year-34, last-33)
nmod:tmod(pumped-29, year-34)
case(1986-37, than-35)
case(1986-37, in-36)
nmod:in(pumped-29, 1986-37)
punct(one-20, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#oil

pump :: But as long as Washington keeps pumping in those subsidies , the situation will remain stabilized , even improving a bit ./.
cc(remain-15, But-1)
advmod(long-3, as-2)
advmod(remain-15, long-3)
mark(keeps-6, as-4)
nsubj(keeps-6, Washington-5)
advcl(long-3, keeps-6)
xcomp(keeps-6, pumping-7)
case(subsidies-10, in-8)
det(subsidies-10, those-9)
nmod:in(pumping-7, subsidies-10)
punct(remain-15, ,-11)
det(situation-13, the-12)
nsubj(remain-15, situation-13)
aux(remain-15, will-14)
root(ROOT-0, remain-15)
xcomp(remain-15, stabilized-16)
punct(remain-15, ,-17)
advmod(improving-19, even-18)
xcomp(remain-15, improving-19)
det(bit-21, a-20)
dobj(improving-19, bit-21)
punct(remain-15, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#subsidies

pump :: Nevertheless , they continue to pump money into the market ./.
advmod(continue-4, Nevertheless-1)
punct(continue-4, ,-2)
nsubj(continue-4, they-3)
nsubj:xsubj(pump-6, they-3)
root(ROOT-0, continue-4)
mark(pump-6, to-5)
xcomp(continue-4, pump-6)
dobj(pump-6, money-7)
case(market-10, into-8)
det(market-10, the-9)
nmod:into(pump-6, market-10)
punct(continue-4, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#money

pump :: Performing his own compositions , traditional R & B tunes , zydeco originals and his interpretations of rock numbers , Buck and the band spit out the kind of crackling music that 's been missing since the heyday of Stax Records , when Booker T. and the MGs pumped a driving rhythm behind Sam & Dave , Carla Thomas and Otis Redding ./.
root(ROOT-0, Performing-1)
nmod:poss(compositions-4, his-2)
amod(compositions-4, own-3)
dobj(Performing-1, compositions-4)
punct(Performing-1, ,-5)
amod(R-7, traditional-6)
root(,-5, R-7)
cc(R-7, &-8)
compound(tunes-10, B-9)
root(,-5, tunes-10)
conj:&(R-7, tunes-10)
punct(R-7, ,-11)
compound(originals-13, zydeco-12)
root(,-5, originals-13)
conj:&(R-7, originals-13)
cc(R-7, and-14)
nmod:poss(interpretations-16, his-15)
root(,-5, interpretations-16)
conj:and(R-7, interpretations-16)
case(numbers-19, of-17)
compound(numbers-19, rock-18)
nmod:of(interpretations-16, numbers-19)
punct(numbers-19, ,-20)
nmod:of(interpretations-16, Buck-21)
conj:and(numbers-19, Buck-21)
cc(numbers-19, and-22)
det(spit-25, the-23)
compound(spit-25, band-24)
nmod:of(interpretations-16, spit-25)
conj:and(numbers-19, spit-25)
case(kind-28, out-26)
det(kind-28, the-27)
nmod:out(R-7, kind-28)
mark(crackling-30, of-29)
acl(kind-28, crackling-30)
dobj(crackling-30, music-31)
nsubjpass(missing-35, music-31)
ref(music-31, that-32)
auxpass(missing-35, 's-33)
aux(missing-35, been-34)
acl:relcl(music-31, missing-35)
case(heyday-38, since-36)
det(heyday-38, the-37)
nmod:since(missing-35, heyday-38)
case(Records-41, of-39)
compound(Records-41, Stax-40)
nmod:of(heyday-38, Records-41)
punct(heyday-38, ,-42)
advmod(pumped-49, when-43)
compound(T.-45, Booker-44)
nsubj(pumped-49, T.-45)
cc(T.-45, and-46)
det(MGs-48, the-47)
conj:and(T.-45, MGs-48)
nsubj(pumped-49, MGs-48)
acl:relcl(heyday-38, pumped-49)
det(rhythm-52, a-50)
amod(rhythm-52, driving-51)
dobj(pumped-49, rhythm-52)
case(Sam-54, behind-53)
nmod:behind(rhythm-52, Sam-54)
cc(Sam-54, &-55)
nmod:behind(rhythm-52, Dave-56)
conj:&(Sam-54, Dave-56)
punct(Sam-54, ,-57)
compound(Thomas-59, Carla-58)
nmod:behind(rhythm-52, Thomas-59)
conj:&(Sam-54, Thomas-59)
cc(Sam-54, and-60)
compound(Redding-62, Otis-61)
nmod:behind(rhythm-52, Redding-62)
conj:and(Sam-54, Redding-62)
punct(R-7, .-63)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#rhythm

pump :: Besides if Mikhail Gorbachev wants to spend all those resources so the East bloc 's skaters and lugers can pump revenue into ABC , it 's fine with us ./.
mark(fine-27, Besides-1)
mark(wants-5, if-2)
compound(Gorbachev-4, Mikhail-3)
nsubj(wants-5, Gorbachev-4)
nsubj:xsubj(spend-7, Gorbachev-4)
advcl(fine-27, wants-5)
mark(spend-7, to-6)
xcomp(wants-5, spend-7)
det:predet(resources-10, all-8)
det(resources-10, those-9)
dobj(spend-7, resources-10)
mark(pump-20, so-11)
det(bloc-14, the-12)
compound(bloc-14, East-13)
nmod:poss(skaters-16, bloc-14)
case(bloc-14, 's-15)
nsubj(pump-20, skaters-16)
cc(skaters-16, and-17)
conj:and(skaters-16, lugers-18)
nsubj(pump-20, lugers-18)
aux(pump-20, can-19)
advcl(spend-7, pump-20)
dobj(pump-20, revenue-21)
case(ABC-23, into-22)
nmod:into(pump-20, ABC-23)
punct(fine-27, ,-24)
nsubj(fine-27, it-25)
cop(fine-27, 's-26)
root(ROOT-0, fine-27)
case(us-29, with-28)
nmod:with(fine-27, us-29)
punct(fine-27, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#revenue

pump :: Money managers who pattern their portfolios on this index usually buy the new additions , causing a flurry of activity and pumping up the price of the shares ./.
compound(managers-2, Money-1)
nsubj(pattern-4, managers-2)
nsubj(buy-11, managers-2)
ref(managers-2, who-3)
acl:relcl(managers-2, pattern-4)
nmod:poss(portfolios-6, their-5)
dobj(pattern-4, portfolios-6)
case(index-9, on-7)
det(index-9, this-8)
nmod:on(pattern-4, index-9)
advmod(buy-11, usually-10)
root(ROOT-0, buy-11)
det(additions-14, the-12)
amod(additions-14, new-13)
dobj(buy-11, additions-14)
punct(buy-11, ,-15)
dep(buy-11, causing-16)
det(flurry-18, a-17)
dobj(causing-16, flurry-18)
case(activity-20, of-19)
nmod:of(flurry-18, activity-20)
cc(causing-16, and-21)
dep(buy-11, pumping-22)
conj:and(causing-16, pumping-22)
compound:prt(pumping-22, up-23)
det(price-25, the-24)
dobj(pumping-22, price-25)
case(shares-28, of-26)
det(shares-28, the-27)
nmod:of(price-25, shares-28)
punct(buy-11, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#shares

pump :: Instead of buying assets and pumping up bank reserves last spring , the Fed should have been heeding the run-up in gold and commodities and playing the sell card ./.
mark(buying-3, Instead-1)
mwe(Instead-1, of-2)
advcl(heeding-18, buying-3)
dobj(buying-3, assets-4)
cc(buying-3, and-5)
conj:and(buying-3, pumping-6)
advcl(heeding-18, pumping-6)
compound:prt(pumping-6, up-7)
compound(reserves-9, bank-8)
dobj(pumping-6, reserves-9)
amod(spring-11, last-10)
nmod:tmod(pumping-6, spring-11)
punct(heeding-18, ,-12)
det(Fed-14, the-13)
nsubj(heeding-18, Fed-14)
nsubj(playing-26, Fed-14)
aux(heeding-18, should-15)
aux(heeding-18, have-16)
aux(heeding-18, been-17)
root(ROOT-0, heeding-18)
det(run-up-20, the-19)
dobj(heeding-18, run-up-20)
case(gold-22, in-21)
nmod:in(run-up-20, gold-22)
cc(gold-22, and-23)
nmod:in(run-up-20, commodities-24)
conj:and(gold-22, commodities-24)
cc(heeding-18, and-25)
conj:and(heeding-18, playing-26)
det(card-29, the-27)
compound(card-29, sell-28)
dobj(playing-26, card-29)
punct(heeding-18, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#reserves

pump :: Industry publications of record initially were skeptical of some of the new claims , knowing that Mexico , for instance , had once pumped up its reserves officially to increase bank borrowings ./.
compound(publications-2, Industry-1)
nsubj(skeptical-7, publications-2)
case(record-4, of-3)
nmod:of(publications-2, record-4)
advmod(skeptical-7, initially-5)
cop(skeptical-7, were-6)
root(ROOT-0, skeptical-7)
case(some-9, of-8)
nmod:of(skeptical-7, some-9)
case(claims-13, of-10)
det(claims-13, the-11)
amod(claims-13, new-12)
nmod:of(some-9, claims-13)
punct(skeptical-7, ,-14)
xcomp(skeptical-7, knowing-15)
mark(pumped-24, that-16)
nsubj(pumped-24, Mexico-17)
punct(pumped-24, ,-18)
case(instance-20, for-19)
nmod:for(pumped-24, instance-20)
punct(pumped-24, ,-21)
aux(pumped-24, had-22)
advmod(pumped-24, once-23)
ccomp(knowing-15, pumped-24)
compound:prt(pumped-24, up-25)
nmod:poss(reserves-27, its-26)
dobj(pumped-24, reserves-27)
advmod(pumped-24, officially-28)
mark(increase-30, to-29)
advcl(pumped-24, increase-30)
compound(borrowings-32, bank-31)
dobj(increase-30, borrowings-32)
punct(skeptical-7, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#reserves

pump :: They also became a major element in the more-than-doubling of the Nikkei average in the two years to last October because of the huge amount of money they pumped into the market ./.
nsubj(became-3, They-1)
advmod(became-3, also-2)
root(ROOT-0, became-3)
det(element-6, a-4)
amod(element-6, major-5)
xcomp(became-3, element-6)
case(more-than-doubling-9, in-7)
det(more-than-doubling-9, the-8)
nmod:in(element-6, more-than-doubling-9)
case(average-13, of-10)
det(average-13, the-11)
compound(average-13, Nikkei-12)
nmod:of(more-than-doubling-9, average-13)
case(years-17, in-14)
det(years-17, the-15)
nummod(years-17, two-16)
nmod:in(average-13, years-17)
case(October-20, to-18)
amod(October-20, last-19)
nmod:to(element-6, October-20)
case(amount-25, because-21)
mwe(because-21, of-22)
det(amount-25, the-23)
amod(amount-25, huge-24)
nmod:because_of(became-3, amount-25)
case(money-27, of-26)
nmod:of(amount-25, money-27)
nsubj(pumped-29, they-28)
acl:relcl(money-27, pumped-29)
case(market-32, into-30)
det(market-32, the-31)
nmod:into(pumped-29, market-32)
punct(became-3, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#they

pump :: But as long as Washington keeps pumping in those subsidies , the situation will remain stabilized , even improving a bit ./.
cc(remain-15, But-1)
advmod(long-3, as-2)
advmod(remain-15, long-3)
mark(keeps-6, as-4)
nsubj(keeps-6, Washington-5)
advcl(long-3, keeps-6)
xcomp(keeps-6, pumping-7)
case(subsidies-10, in-8)
det(subsidies-10, those-9)
nmod:in(pumping-7, subsidies-10)
punct(remain-15, ,-11)
det(situation-13, the-12)
nsubj(remain-15, situation-13)
aux(remain-15, will-14)
root(ROOT-0, remain-15)
xcomp(remain-15, stabilized-16)
punct(remain-15, ,-17)
advmod(improving-19, even-18)
xcomp(remain-15, improving-19)
det(bit-21, a-20)
dobj(improving-19, bit-21)
punct(remain-15, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#subsidies

pump :: To make up for some of that loss , Western Pennsylvania Water has brought another of its pumping stations to full capacity ./.
mark(make-2, To-1)
advcl(brought-14, make-2)
compound:prt(make-2, up-3)
case(some-5, for-4)
nmod:for(make-2, some-5)
case(loss-8, of-6)
det(loss-8, that-7)
nmod:of(some-5, loss-8)
punct(brought-14, ,-9)
amod(Water-12, Western-10)
compound(Water-12, Pennsylvania-11)
nsubj(brought-14, Water-12)
aux(brought-14, has-13)
root(ROOT-0, brought-14)
dobj(brought-14, another-15)
case(stations-19, of-16)
nmod:poss(stations-19, its-17)
amod(stations-19, pumping-18)
nmod:of(another-15, stations-19)
case(capacity-22, to-20)
amod(capacity-22, full-21)
nmod:to(brought-14, capacity-22)
punct(brought-14, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#stations

pump :: The Australian experience might be of interest to the U.S . , which just agreed to pump nearly $ 1 billion of development aid into the Philippines ./.
det(experience-3, The-1)
amod(experience-3, Australian-2)
nsubj(interest-7, experience-3)
aux(interest-7, might-4)
cop(interest-7, be-5)
case(interest-7, of-6)
root(ROOT-0, interest-7)
case(U.S-10, to-8)
det(U.S-10, the-9)
nmod:to(interest-7, U.S-10)
punct(interest-7, .-11)
punct(agreed-4, ,-1)
nsubj(agreed-4, which-2)
nsubj:xsubj(pump-6, which-2)
advmod(agreed-4, just-3)
root(ROOT-0, agreed-4)
mark(pump-6, to-5)
xcomp(agreed-4, pump-6)
advmod($-8, nearly-7)
dobj(pump-6, $-8)
compound(billion-10, 1-9)
nummod($-8, billion-10)
case(aid-13, of-11)
compound(aid-13, development-12)
nmod:of($-8, aid-13)
case(Philippines-16, into-14)
det(Philippines-16, the-15)
nmod:into(pump-6, Philippines-16)
punct(agreed-4, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#aid

pump :: Cargill pumped nearly $ 1 million into the weekly radio program from its inception in 1975 through Mr. Keillor 's departure in June of last year ./.
nsubj(pumped-2, Cargill-1)
root(ROOT-0, pumped-2)
advmod($-4, nearly-3)
dobj(pumped-2, $-4)
compound(million-6, 1-5)
nummod($-4, million-6)
case(program-11, into-7)
det(program-11, the-8)
amod(program-11, weekly-9)
compound(program-11, radio-10)
nmod:into(pumped-2, program-11)
case(inception-14, from-12)
nmod:poss(inception-14, its-13)
nmod:from(program-11, inception-14)
case(1975-16, in-15)
nmod:in(inception-14, 1975-16)
case(departure-21, through-17)
compound(Keillor-19, Mr.-18)
nmod:poss(departure-21, Keillor-19)
case(Keillor-19, 's-20)
nmod:through(inception-14, departure-21)
case(June-23, in-22)
nmod:in(departure-21, June-23)
case(year-26, of-24)
amod(year-26, last-25)
nmod:of(June-23, year-26)
punct(pumped-2, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#$

pump :: Last week , the company said it was ready to enter bankruptcy court to avoid complying with the federal order to pump holding company assets into its troubled banks ./.
amod(week-2, Last-1)
nmod:tmod(said-6, week-2)
punct(said-6, ,-3)
det(company-5, the-4)
nsubj(said-6, company-5)
root(ROOT-0, said-6)
nsubj(ready-9, it-7)
nsubj:xsubj(enter-11, it-7)
cop(ready-9, was-8)
ccomp(said-6, ready-9)
mark(enter-11, to-10)
xcomp(ready-9, enter-11)
compound(court-13, bankruptcy-12)
dobj(enter-11, court-13)
mark(avoid-15, to-14)
advcl(enter-11, avoid-15)
xcomp(avoid-15, complying-16)
case(order-20, with-17)
det(order-20, the-18)
amod(order-20, federal-19)
nmod:with(complying-16, order-20)
mark(pump-22, to-21)
acl(order-20, pump-22)
xcomp(pump-22, holding-23)
compound(assets-25, company-24)
dobj(holding-23, assets-25)
case(banks-29, into-26)
nmod:poss(banks-29, its-27)
amod(banks-29, troubled-28)
nmod:into(holding-23, banks-29)
punct(said-6, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

pump :: With the Pledge , the furlough program and the ACLU , they pumped some genuine voter concerns into the election ./.
case(Pledge-3, With-1)
det(Pledge-3, the-2)
nmod:with(pumped-13, Pledge-3)
punct(pumped-13, ,-4)
det(program-7, the-5)
compound(program-7, furlough-6)
nsubj(pumped-13, program-7)
cc(program-7, and-8)
det(ACLU-10, the-9)
conj:and(program-7, ACLU-10)
nsubj(pumped-13, ACLU-10)
punct(pumped-13, ,-11)
nsubj(pumped-13, they-12)
root(ROOT-0, pumped-13)
det(concerns-17, some-14)
amod(concerns-17, genuine-15)
compound(concerns-17, voter-16)
dobj(pumped-13, concerns-17)
case(election-20, into-18)
det(election-20, the-19)
nmod:into(pumped-13, election-20)
punct(pumped-13, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#concerns

pump :: It is particularly upset over population growth , namely that the millions of foreign dollars pumped into the country have n't convinced Filipinos that zero population growth is the path to prosperity ./.
nsubjpass(upset-4, It-1)
auxpass(upset-4, is-2)
advmod(upset-4, particularly-3)
root(ROOT-0, upset-4)
case(growth-7, over-5)
compound(growth-7, population-6)
nmod:over(upset-4, growth-7)
punct(upset-4, ,-8)
advmod(convinced-22, namely-9)
mark(convinced-22, that-10)
det(millions-12, the-11)
nsubj(convinced-22, millions-12)
case(dollars-15, of-13)
amod(dollars-15, foreign-14)
nmod:of(millions-12, dollars-15)
acl(millions-12, pumped-16)
case(country-19, into-17)
det(country-19, the-18)
nmod:into(pumped-16, country-19)
aux(convinced-22, have-20)
neg(convinced-22, n't-21)
advcl(upset-4, convinced-22)
nsubj(zero-25, Filipinos-23)
nsubj(path-30, Filipinos-23)
ref(Filipinos-23, that-24)
acl:relcl(Filipinos-23, zero-25)
compound(growth-27, population-26)
dobj(zero-25, growth-27)
cop(path-30, is-28)
det(path-30, the-29)
ccomp(convinced-22, path-30)
case(prosperity-32, to-31)
nmod:to(path-30, prosperity-32)
punct(upset-4, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#country

pump :: On a wall is a poster of a woman pumping iron ./.
case(wall-3, On-1)
det(wall-3, a-2)
nmod:on(is-4, wall-3)
root(ROOT-0, is-4)
det(poster-6, a-5)
nsubj(is-4, poster-6)
case(woman-9, of-7)
det(woman-9, a-8)
nmod:of(poster-6, woman-9)
amod(iron-11, pumping-10)
dep(woman-9, iron-11)
punct(is-4, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#iron

pump :: The fierce-looking , hairy-chested Mr. Ventura , a ring dangling from one ear , is shown saying , `` Do n't pump trouble ./.
det(saying-17, The-1)
dep(shown-16, fierce-looking-2)
punct(shown-16, ,-3)
amod(Ventura-6, hairy-chested-4)
compound(Ventura-6, Mr.-5)
nsubjpass(shown-16, Ventura-6)
punct(Ventura-6, ,-7)
det(ring-9, a-8)
appos(Ventura-6, ring-9)
acl(ring-9, dangling-10)
case(ear-13, from-11)
nummod(ear-13, one-12)
nmod:from(dangling-10, ear-13)
punct(Ventura-6, ,-14)
auxpass(shown-16, is-15)
amod(saying-17, shown-16)
root(ROOT-0, saying-17)
punct(saying-17, ,-18)
punct(saying-17, ``-19)
aux(pump-22, Do-20)
neg(pump-22, n't-21)
dep(saying-17, pump-22)
dobj(pump-22, trouble-23)
punct(saying-17, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#trouble

pump :: No one minds pumping Bambi full of lead ; the issue is whether to bring along the dogs as well as the Winchester ./.
neg(minds-3, No-1)
compound(minds-3, one-2)
root(ROOT-0, minds-3)
acl(minds-3, pumping-4)
dobj(pumping-4, Bambi-5)
amod(Bambi-5, full-6)
case(lead-8, of-7)
nmod:of(full-6, lead-8)
punct(minds-3, ;-9)
det(issue-11, the-10)
nsubj(is-12, issue-11)
parataxis(minds-3, is-12)
mark(bring-15, whether-13)
mark(bring-15, to-14)
ccomp(is-12, bring-15)
compound:prt(bring-15, along-16)
det(dogs-18, the-17)
dobj(bring-15, dogs-18)
cc(dogs-18, as-19)
mwe(as-19, well-20)
mwe(as-19, as-21)
det(Winchester-23, the-22)
dobj(bring-15, Winchester-23)
conj:and(dogs-18, Winchester-23)
punct(minds-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#bambi

pump :: French and European Community officials met to discuss the French government 's plan to pump 12 billion francs -LRB- $ 1.89 billion -RRB- into state-owned auto maker Regie Nationale des Usines Renault , and said the proposal will require further study ./.
compound(officials-5, French-1)
cc(French-1, and-2)
conj:and(French-1, European-3)
compound(officials-5, European-3)
compound(officials-5, Community-4)
nsubj(met-6, officials-5)
nsubj:xsubj(discuss-8, officials-5)
nsubj(said-35, officials-5)
root(ROOT-0, met-6)
mark(discuss-8, to-7)
xcomp(met-6, discuss-8)
det(government-11, the-9)
amod(government-11, French-10)
nmod:poss(plan-13, government-11)
case(government-11, 's-12)
dobj(discuss-8, plan-13)
mark(pump-15, to-14)
acl(plan-13, pump-15)
compound(billion-17, 12-16)
nummod(francs-18, billion-17)
dobj(pump-15, francs-18)
punct($-20, -LRB--19)
dep(francs-18, $-20)
compound(billion-22, 1.89-21)
nummod($-20, billion-22)
punct($-20, -RRB--23)
case(maker-27, into-24)
amod(maker-27, state-owned-25)
compound(maker-27, auto-26)
nmod:into(pump-15, maker-27)
compound(Renault-32, Regie-28)
compound(Renault-32, Nationale-29)
compound(Renault-32, des-30)
compound(Renault-32, Usines-31)
dep(maker-27, Renault-32)
punct(met-6, ,-33)
cc(met-6, and-34)
conj:and(met-6, said-35)
det(proposal-37, the-36)
nsubj(require-39, proposal-37)
aux(require-39, will-38)
ccomp(said-35, require-39)
amod(study-41, further-40)
dobj(require-39, study-41)
punct(met-6, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#francs

pump :: Regardless of the election outcome , the towering federal deficit means the next president will inherit a flat defense budget and a far different defense climate than the one President Reagan enjoyed when he pumped up Pentagon spending virtually overnight in 1981 ./.
case(outcome-5, Regardless-1)
mwe(Regardless-1, of-2)
det(outcome-5, the-3)
compound(outcome-5, election-4)
nmod:regardless_of(means-11, outcome-5)
punct(means-11, ,-6)
det(deficit-10, the-7)
amod(deficit-10, towering-8)
amod(deficit-10, federal-9)
nsubj(means-11, deficit-10)
root(ROOT-0, means-11)
det(president-14, the-12)
amod(president-14, next-13)
nsubj(inherit-16, president-14)
aux(inherit-16, will-15)
ccomp(means-11, inherit-16)
det(budget-20, a-17)
amod(budget-20, flat-18)
compound(budget-20, defense-19)
dobj(inherit-16, budget-20)
cc(budget-20, and-21)
det(climate-26, a-22)
advmod(different-24, far-23)
amod(climate-26, different-24)
compound(climate-26, defense-25)
dobj(inherit-16, climate-26)
conj:and(budget-20, climate-26)
case(President-30, than-27)
det(President-30, the-28)
nummod(President-30, one-29)
nmod:than(budget-20, President-30)
nsubj(enjoyed-32, Reagan-31)
acl:relcl(President-30, enjoyed-32)
advmod(pumped-35, when-33)
nsubj(pumped-35, he-34)
advcl(enjoyed-32, pumped-35)
compound:prt(pumped-35, up-36)
compound(spending-38, Pentagon-37)
nsubj(overnight-40, spending-38)
advmod(overnight-40, virtually-39)
xcomp(pumped-35, overnight-40)
case(1981-42, in-41)
nmod:in(overnight-40, 1981-42)
punct(means-11, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#he

pump :: The Reagan administration changed the pattern of 15 years of federal research-and-development spending by slowing to a crawl the growth of civilian research programs , such as energy development , while pumping up defense ./.
det(administration-3, The-1)
compound(administration-3, Reagan-2)
nsubj(changed-4, administration-3)
root(ROOT-0, changed-4)
det(pattern-6, the-5)
dobj(changed-4, pattern-6)
case(years-9, of-7)
nummod(years-9, 15-8)
nmod:of(pattern-6, years-9)
case(spending-13, of-10)
amod(spending-13, federal-11)
compound(spending-13, research-and-development-12)
nmod:of(years-9, spending-13)
mark(slowing-15, by-14)
advcl(changed-4, slowing-15)
case(crawl-18, to-16)
det(crawl-18, a-17)
nmod:to(slowing-15, crawl-18)
det(growth-20, the-19)
dobj(crawl-18, growth-20)
case(programs-24, of-21)
amod(programs-24, civilian-22)
compound(programs-24, research-23)
nmod:of(growth-20, programs-24)
punct(programs-24, ,-25)
case(development-29, such-26)
mwe(such-26, as-27)
compound(development-29, energy-28)
nmod:such_as(programs-24, development-29)
punct(changed-4, ,-30)
mark(pumping-32, while-31)
advcl(changed-4, pumping-32)
compound:prt(pumping-32, up-33)
dobj(pumping-32, defense-34)
punct(changed-4, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#defense

pump :: Indeed , the U.S. maintains that the bases pump many millions of dollars into the Philippine economy , over and above whatever compensation and aid the U.S. gives to Manila ./.
advmod(maintains-5, Indeed-1)
punct(maintains-5, ,-2)
det(U.S.-4, the-3)
nsubj(maintains-5, U.S.-4)
root(ROOT-0, maintains-5)
mark(pump-9, that-6)
det(bases-8, the-7)
nsubj(pump-9, bases-8)
ccomp(maintains-5, pump-9)
amod(millions-11, many-10)
dobj(pump-9, millions-11)
case(dollars-13, of-12)
nmod:of(millions-11, dollars-13)
case(economy-17, into-14)
det(economy-17, the-15)
amod(economy-17, Philippine-16)
nmod:into(pump-9, economy-17)
punct(pump-9, ,-18)
case(compensation-23, over-19)
cc(over-19, and-20)
conj:and(over-19, above-21)
det(compensation-23, whatever-22)
nmod:above(gives-28', compensation-23)
nmod:over(gives-28, compensation-23)
cc(compensation-23, and-24)
conj:and(compensation-23, aid-25)
nmod:above(gives-28', aid-25)
nmod:over(gives-28, aid-25)
det(U.S.-27, the-26)
nsubj(gives-28, U.S.-27)
nsubj(gives-28', U.S.-27)
parataxis(pump-9, gives-28)
parataxis(pump-9, gives-28')
conj:and(gives-28, gives-28')
case(Manila-30, to-29)
nmod:to(gives-28, Manila-30)
punct(maintains-5, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#dollars

pump :: Industry watchers respect Genentech for pumping such a large chunk of capital into its basic science program , and for preserving its enviable scientific edge , but the investment is n't expected to yield products for several years ./.
compound(Genentech-4, Industry-1)
compound(Genentech-4, watchers-2)
compound(Genentech-4, respect-3)
root(ROOT-0, Genentech-4)
mark(pumping-6, for-5)
acl(Genentech-4, pumping-6)
amod(chunk-10, such-7)
det(chunk-10, a-8)
amod(chunk-10, large-9)
dobj(pumping-6, chunk-10)
case(capital-12, of-11)
nmod:of(chunk-10, capital-12)
case(program-17, into-13)
nmod:poss(program-17, its-14)
amod(program-17, basic-15)
compound(program-17, science-16)
nmod:into(pumping-6, program-17)
punct(Genentech-4, ,-18)
cc(Genentech-4, and-19)
mark(preserving-21, for-20)
conj:and(Genentech-4, preserving-21)
nmod:poss(edge-25, its-22)
amod(edge-25, enviable-23)
amod(edge-25, scientific-24)
dobj(preserving-21, edge-25)
punct(Genentech-4, ,-26)
cc(Genentech-4, but-27)
det(investment-29, the-28)
nsubjpass(expected-32, investment-29)
nsubj:xsubj(yield-34, investment-29)
auxpass(expected-32, is-30)
neg(expected-32, n't-31)
conj:but(Genentech-4, expected-32)
mark(yield-34, to-33)
xcomp(expected-32, yield-34)
dobj(yield-34, products-35)
case(years-38, for-36)
amod(years-38, several-37)
nmod:for(yield-34, years-38)
punct(Genentech-4, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#capital

pump :: There has been a consequent letdown in political suspense ; and , since too many reporters these days cover politics as if it were a form of horse racing , the press is now doing its best to pump drama into the vice presidential nominations ./.
expl(letdown-6, There-1)
aux(letdown-6, has-2)
cop(letdown-6, been-3)
det(letdown-6, a-4)
amod(letdown-6, consequent-5)
root(ROOT-0, letdown-6)
case(suspense-9, in-7)
amod(suspense-9, political-8)
nmod:in(letdown-6, suspense-9)
punct(letdown-6, ;-10)
cc(letdown-6, and-11)
punct(letdown-6, ,-12)
case(reporters-16, since-13)
advmod(many-15, too-14)
amod(reporters-16, many-15)
nmod:since(cover-19, reporters-16)
det(days-18, these-17)
nmod:tmod(cover-19, days-18)
conj:and(letdown-6, cover-19)
dobj(cover-19, politics-20)
mark(form-26, as-21)
mwe(as-21, if-22)
nsubj(form-26, it-23)
cop(form-26, were-24)
det(form-26, a-25)
advcl(cover-19, form-26)
case(racing-29, of-27)
compound(racing-29, horse-28)
nmod:of(form-26, racing-29)
punct(letdown-6, ,-30)
det(press-32, the-31)
nsubj(doing-35, press-32)
aux(doing-35, is-33)
advmod(doing-35, now-34)
parataxis(letdown-6, doing-35)
nmod:poss(best-37, its-36)
dobj(doing-35, best-37)
mark(pump-39, to-38)
advcl(doing-35, pump-39)
dobj(pump-39, drama-40)
case(nominations-45, into-41)
det(nominations-45, the-42)
compound(nominations-45, vice-43)
amod(nominations-45, presidential-44)
nmod:into(pump-39, nominations-45)
punct(letdown-6, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#drama

pump :: During the past 10 years state and federal governments have pumped money into the railroad , whose main line track has been substantially improved ./.
case(state-6, During-1)
det(state-6, the-2)
amod(state-6, past-3)
compound(years-5, 10-4)
amod(state-6, years-5)
nmod:during(pumped-11, state-6)
cc(state-6, and-7)
amod(governments-9, federal-8)
conj:and(state-6, governments-9)
nmod:during(pumped-11, governments-9)
aux(pumped-11, have-10)
root(ROOT-0, pumped-11)
dobj(pumped-11, money-12)
case(railroad-15, into-13)
det(railroad-15, the-14)
nmod:into(pumped-11, railroad-15)
nmod:poss(track-20, railroad-15)
punct(railroad-15, ,-16)
ref(railroad-15, whose-17)
amod(track-20, main-18)
compound(track-20, line-19)
nsubjpass(improved-24, track-20)
aux(improved-24, has-21)
auxpass(improved-24, been-22)
advmod(improved-24, substantially-23)
acl:relcl(railroad-15, improved-24)
punct(pumped-11, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#money

pump :: Carl Rowan , of course , is the famous liberal newspaper columnist and TV commentator who may have become even more famous Tuesday for pumping a bullet from a .22-caliber handgun into the wrist of Ben Neal Smith , 18 , of Chevy Chase ./.
compound(Rowan-2, Carl-1)
nsubj(columnist-12, Rowan-2)
punct(columnist-12, ,-3)
case(course-5, of-4)
nmod:of(columnist-12, course-5)
punct(columnist-12, ,-6)
cop(columnist-12, is-7)
det(columnist-12, the-8)
amod(columnist-12, famous-9)
amod(columnist-12, liberal-10)
compound(columnist-12, newspaper-11)
root(ROOT-0, columnist-12)
nsubj(become-19, columnist-12)
cc(columnist-12, and-13)
compound(commentator-15, TV-14)
conj:and(columnist-12, commentator-15)
nsubj(become-19, commentator-15)
ref(columnist-12, who-16)
aux(become-19, may-17)
aux(become-19, have-18)
acl:relcl(columnist-12, become-19)
advmod(famous-22, even-20)
advmod(famous-22, more-21)
xcomp(become-19, famous-22)
nmod:tmod(famous-22, Tuesday-23)
mark(pumping-25, for-24)
advcl(become-19, pumping-25)
det(bullet-27, a-26)
dobj(pumping-25, bullet-27)
case(.22-30, from-28)
det(.22-30, a-29)
nmod:from(pumping-25, .22-30)
punct(.22-30, --31)
compound(handgun-33, caliber-32)
dep(.22-30, handgun-33)
case(wrist-36, into-34)
det(wrist-36, the-35)
nmod:into(handgun-33, wrist-36)
case(Smith-40, of-37)
compound(Smith-40, Ben-38)
compound(Smith-40, Neal-39)
nmod:of(wrist-36, Smith-40)
punct(Smith-40, ,-41)
amod(Smith-40, 18-42)
punct(Smith-40, ,-43)
case(Chase-46, of-44)
compound(Chase-46, Chevy-45)
nmod:of(Smith-40, Chase-46)
punct(columnist-12, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#bullet

pump :: It often pumps in equity , resulting in massive dilution for current shareholders , and drives a hard bargain with creditors , forcing them to accept far less than 100 cents for each dollar they are owed ./.
nsubj(pumps-3, It-1)
nsubj(drives-16, It-1)
advmod(pumps-3, often-2)
root(ROOT-0, pumps-3)
case(equity-5, in-4)
nmod:in(pumps-3, equity-5)
punct(pumps-3, ,-6)
advcl(pumps-3, resulting-7)
case(dilution-10, in-8)
amod(dilution-10, massive-9)
nmod:in(resulting-7, dilution-10)
case(shareholders-13, for-11)
amod(shareholders-13, current-12)
nmod:for(dilution-10, shareholders-13)
punct(pumps-3, ,-14)
cc(pumps-3, and-15)
conj:and(pumps-3, drives-16)
det(bargain-19, a-17)
amod(bargain-19, hard-18)
dobj(drives-16, bargain-19)
case(creditors-21, with-20)
nmod:with(bargain-19, creditors-21)
punct(pumps-3, ,-22)
advcl(pumps-3, forcing-23)
dobj(forcing-23, them-24)
nsubj:xsubj(accept-26, them-24)
mark(accept-26, to-25)
xcomp(forcing-23, accept-26)
advmod(100-30, far-27)
advmod(100-30, less-28)
mwe(less-28, than-29)
nummod(cents-31, 100-30)
dobj(accept-26, cents-31)
case(dollar-34, for-32)
det(dollar-34, each-33)
nmod:for(cents-31, dollar-34)
nsubjpass(owed-37, they-35)
auxpass(owed-37, are-36)
acl:relcl(dollar-34, owed-37)
punct(pumps-3, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#it

pump :: However , Robert M. Bass Group Inc. of Fort Worth , Texas , which has agreed to pump $ 550 million in new capital into American Savings and acquire the thrift with $ 2 billion of federal aid , apparently plans to launch its own campaign to market various financial services through American Savings ./.
advmod(plans-41, However-1)
punct(plans-41, ,-2)
compound(Inc.-7, Robert-3)
compound(Inc.-7, M.-4)
compound(Inc.-7, Bass-5)
compound(Inc.-7, Group-6)
nsubj(agreed-16, Inc.-7)
nsubj:xsubj(pump-18, Inc.-7)
nsubj(plans-41, Inc.-7)
nsubj:xsubj(launch-43, Inc.-7)
case(Worth-10, of-8)
compound(Worth-10, Fort-9)
nmod:of(Inc.-7, Worth-10)
punct(Worth-10, ,-11)
appos(Worth-10, Texas-12)
punct(Worth-10, ,-13)
ref(Inc.-7, which-14)
aux(agreed-16, has-15)
acl:relcl(Inc.-7, agreed-16)
mark(pump-18, to-17)
xcomp(agreed-16, pump-18)
dobj(pump-18, $-19)
compound(million-21, 550-20)
nummod($-19, million-21)
case(capital-24, in-22)
amod(capital-24, new-23)
nmod:in($-19, capital-24)
case(Savings-27, into-25)
amod(Savings-27, American-26)
nmod:into(pump-18, Savings-27)
cc(pump-18, and-28)
xcomp(agreed-16, acquire-29)
conj:and(pump-18, acquire-29)
det(thrift-31, the-30)
dobj(acquire-29, thrift-31)
case($-33, with-32)
nmod:with(acquire-29, $-33)
compound(billion-35, 2-34)
nummod($-33, billion-35)
case(aid-38, of-36)
amod(aid-38, federal-37)
nmod:of($-33, aid-38)
punct(Inc.-7, ,-39)
advmod(plans-41, apparently-40)
root(ROOT-0, plans-41)
mark(launch-43, to-42)
xcomp(plans-41, launch-43)
nmod:poss(campaign-46, its-44)
amod(campaign-46, own-45)
dobj(launch-43, campaign-46)
mark(market-48, to-47)
advcl(launch-43, market-48)
amod(services-51, various-49)
amod(services-51, financial-50)
dobj(market-48, services-51)
case(Savings-54, through-52)
amod(Savings-54, American-53)
nmod:through(market-48, Savings-54)
punct(plans-41, .-55)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#aid

pump :: Baker Hughes and Dresser have a joint venture , BJ-Titan , in the pressure pumping services business , though they said last week they are seeking buyers ./.
compound(Hughes-2, Baker-1)
nsubj(have-5, Hughes-2)
cc(Hughes-2, and-3)
conj:and(Hughes-2, Dresser-4)
nsubj(have-5, Dresser-4)
root(ROOT-0, have-5)
det(venture-8, a-6)
amod(venture-8, joint-7)
dobj(have-5, venture-8)
punct(venture-8, ,-9)
appos(venture-8, BJ-Titan-10)
punct(venture-8, ,-11)
case(pressure-14, in-12)
det(pressure-14, the-13)
nmod:in(venture-8, pressure-14)
acl(pressure-14, pumping-15)
compound(business-17, services-16)
dobj(pumping-15, business-17)
punct(have-5, ,-18)
mark(said-21, though-19)
nsubj(said-21, they-20)
advcl(have-5, said-21)
amod(week-23, last-22)
nmod:tmod(said-21, week-23)
nsubj(seeking-26, they-24)
aux(seeking-26, are-25)
ccomp(said-21, seeking-26)
dobj(seeking-26, buyers-27)
punct(have-5, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#business

pump :: The oil company disclosed earlier yesterday that last week 's fire had damaged a pumping station and conduits , inhibiting the flow of gasoline product into the Colonial Pipeline ./.
det(company-3, The-1)
compound(company-3, oil-2)
nsubj(disclosed-4, company-3)
root(ROOT-0, disclosed-4)
amod(yesterday-6, earlier-5)
nmod:tmod(disclosed-4, yesterday-6)
mark(damaged-13, that-7)
amod(week-9, last-8)
nmod:poss(fire-11, week-9)
case(week-9, 's-10)
nsubj(damaged-13, fire-11)
aux(damaged-13, had-12)
ccomp(disclosed-4, damaged-13)
det(station-16, a-14)
amod(station-16, pumping-15)
dobj(damaged-13, station-16)
cc(station-16, and-17)
dobj(damaged-13, conduits-18)
conj:and(station-16, conduits-18)
punct(damaged-13, ,-19)
advcl(damaged-13, inhibiting-20)
det(flow-22, the-21)
dobj(inhibiting-20, flow-22)
case(product-25, of-23)
compound(product-25, gasoline-24)
nmod:of(flow-22, product-25)
case(Pipeline-29, into-26)
det(Pipeline-29, the-27)
amod(Pipeline-29, Colonial-28)
nmod:into(flow-22, Pipeline-29)
punct(disclosed-4, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#station

pump :: The spokesman was n't able to quantify pumping capacity ; the refinery has a crude oil input capacity of 400 , 000 barrels a day , but runs between 250 , 000 barrels and 275 , 000 barrels a day ./.
det(spokesman-2, The-1)
nsubj(able-5, spokesman-2)
nsubj:xsubj(quantify-7, spokesman-2)
cop(able-5, was-3)
neg(able-5, n't-4)
root(ROOT-0, able-5)
mark(quantify-7, to-6)
xcomp(able-5, quantify-7)
amod(capacity-9, pumping-8)
dobj(quantify-7, capacity-9)
punct(able-5, ;-10)
det(refinery-12, the-11)
nsubj(has-13, refinery-12)
parataxis(able-5, has-13)
det(capacity-18, a-14)
amod(capacity-18, crude-15)
compound(capacity-18, oil-16)
compound(capacity-18, input-17)
dobj(has-13, capacity-18)
acl(capacity-18, of-19)
root(of-19, 400-20)
punct(400-20, ,-21)
nummod(barrels-23, 000-22)
root(,-21, barrels-23)
det(day-25, a-24)
nmod:npmod(barrels-23, day-25)
punct(barrels-23, ,-26)
cc(barrels-23, but-27)
root(,-21, runs-28)
conj:but(barrels-23, runs-28)
case(250-30, between-29)
nmod:between(runs-28, 250-30)
punct(250-30, ,-31)
nummod(barrels-33, 000-32)
nmod:between(runs-28, barrels-33)
conj:and(250-30, barrels-33)
cc(250-30, and-34)
nmod:between(runs-28, 275-35)
conj:and(250-30, 275-35)
punct(250-30, ,-36)
nummod(barrels-38, 000-37)
appos(250-30, barrels-38)
det(day-40, a-39)
nmod:npmod(barrels-38, day-40)
punct(barrels-23, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#capacity

pump :: Union Carbide announced after the market closed May 18 , a Wednesday , that it was cutting its quarterly dividend by 46 % and that it would offer 15 million new common shares as a means of reducing the company 's heavy debt load and of pumping more cash into the operation ./.
compound(Carbide-2, Union-1)
nsubj(announced-3, Carbide-2)
root(ROOT-0, announced-3)
mark(closed-7, after-4)
det(market-6, the-5)
nsubj(closed-7, market-6)
advcl(announced-3, closed-7)
advmod(closed-7, May-8)
dep(May-8, 18-9)
punct(18-9, ,-10)
det(Wednesday-12, a-11)
appos(18-9, Wednesday-12)
punct(18-9, ,-13)
mark(cutting-17, that-14)
nsubj(cutting-17, it-15)
aux(cutting-17, was-16)
ccomp(18-9, cutting-17)
nmod:poss(dividend-20, its-18)
amod(dividend-20, quarterly-19)
dobj(cutting-17, dividend-20)
case(%-23, by-21)
nummod(%-23, 46-22)
nmod:by(cutting-17, %-23)
cc(cutting-17, and-24)
mark(offer-28, that-25)
nsubj(offer-28, it-26)
aux(offer-28, would-27)
ccomp(18-9, offer-28)
conj:and(cutting-17, offer-28)
compound(million-30, 15-29)
nummod(shares-33, million-30)
amod(shares-33, new-31)
amod(shares-33, common-32)
dobj(offer-28, shares-33)
case(means-36, as-34)
det(means-36, a-35)
nmod:as(offer-28, means-36)
mark(reducing-38, of-37)
acl(means-36, reducing-38)
det(company-40, the-39)
nmod:poss(load-44, company-40)
case(company-40, 's-41)
amod(load-44, heavy-42)
compound(load-44, debt-43)
dobj(reducing-38, load-44)
cc(reducing-38, and-45)
mark(pumping-47, of-46)
acl(means-36, pumping-47)
conj:and(reducing-38, pumping-47)
amod(cash-49, more-48)
dobj(pumping-47, cash-49)
case(operation-52, into-50)
det(operation-52, the-51)
nmod:into(pumping-47, operation-52)
punct(announced-3, .-53)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#cash

pump :: The provincial governments of Alberta and Saskatchewan have offered a total of 28.5 million Canadian dollars -LRB- $ 23.2 million -RRB- to assist in well drilling , water pumping and other relief activities ./.
det(governments-3, The-1)
amod(governments-3, provincial-2)
nsubj(offered-9, governments-3)
case(Alberta-5, of-4)
nmod:of(governments-3, Alberta-5)
cc(Alberta-5, and-6)
nmod:of(governments-3, Saskatchewan-7)
conj:and(Alberta-5, Saskatchewan-7)
aux(offered-9, have-8)
root(ROOT-0, offered-9)
det(total-11, a-10)
dobj(offered-9, total-11)
case(dollars-16, of-12)
compound(million-14, 28.5-13)
nummod(dollars-16, million-14)
amod(dollars-16, Canadian-15)
nmod:of(total-11, dollars-16)
punct($-18, -LRB--17)
dep(dollars-16, $-18)
compound(million-20, 23.2-19)
nummod($-18, million-20)
punct($-18, -RRB--21)
mark(assist-23, to-22)
acl(total-11, assist-23)
case(drilling-26, in-24)
advmod(drilling-26, well-25)
nmod:in(assist-23, drilling-26)
punct(offered-9, ,-27)
compound(pumping-29, water-28)
dep(offered-9, pumping-29)
cc(pumping-29, and-30)
amod(activities-33, other-31)
compound(activities-33, relief-32)
dep(offered-9, activities-33)
conj:and(pumping-29, activities-33)
punct(offered-9, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

pump :: The new automated system pumps the solvent through a thin catheter inserted into the gallbladder under local anesthesia , the center said ./.
det(pumps-5, The-1)
amod(pumps-5, new-2)
amod(pumps-5, automated-3)
compound(pumps-5, system-4)
ccomp(said-22, pumps-5)
det(solvent-7, the-6)
dep(pumps-5, solvent-7)
case(catheter-11, through-8)
det(catheter-11, a-9)
amod(catheter-11, thin-10)
nmod:through(solvent-7, catheter-11)
acl(catheter-11, inserted-12)
case(gallbladder-15, into-13)
det(gallbladder-15, the-14)
nmod:into(inserted-12, gallbladder-15)
case(anesthesia-18, under-16)
amod(anesthesia-18, local-17)
nmod:under(inserted-12, anesthesia-18)
punct(said-22, ,-19)
det(center-21, the-20)
nsubj(said-22, center-21)
root(ROOT-0, said-22)
punct(said-22, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

pump :: Other investigators say faulty idling valves can make cars surge by suddenly pumping extra air into the engines ./.
amod(investigators-2, Other-1)
nsubj(say-3, investigators-2)
root(ROOT-0, say-3)
amod(valves-6, faulty-4)
amod(valves-6, idling-5)
nsubj(make-8, valves-6)
aux(make-8, can-7)
ccomp(say-3, make-8)
compound(surge-10, cars-9)
dobj(make-8, surge-10)
mark(pumping-13, by-11)
advmod(pumping-13, suddenly-12)
advcl(make-8, pumping-13)
amod(air-15, extra-14)
dobj(pumping-13, air-15)
case(engines-18, into-16)
det(engines-18, the-17)
nmod:into(pumping-13, engines-18)
punct(say-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#air

pump :: The case makes New York state seem almost ungrateful for the way it responded to a federal law that pumped $ 675 million of Uncle Sam 's funds into 21 troubled New York thrifts a few years ago ./.
det(case-2, The-1)
nsubj(makes-3, case-2)
root(ROOT-0, makes-3)
compound(state-6, New-4)
compound(state-6, York-5)
nsubj(seem-7, state-6)
ccomp(makes-3, seem-7)
advmod(ungrateful-9, almost-8)
xcomp(seem-7, ungrateful-9)
case(way-12, for-10)
det(way-12, the-11)
nmod:for(seem-7, way-12)
nsubj(responded-14, it-13)
acl:relcl(way-12, responded-14)
case(law-18, to-15)
det(law-18, a-16)
amod(law-18, federal-17)
nmod:to(responded-14, law-18)
nsubj(pumped-20, law-18)
ref(law-18, that-19)
acl:relcl(law-18, pumped-20)
dobj(pumped-20, $-21)
compound(million-23, 675-22)
nummod($-21, million-23)
case(funds-28, of-24)
compound(Sam-26, Uncle-25)
nmod:poss(funds-28, Sam-26)
case(Sam-26, 's-27)
nmod:of($-21, funds-28)
case(thrifts-34, into-29)
nummod(thrifts-34, 21-30)
amod(thrifts-34, troubled-31)
compound(thrifts-34, New-32)
compound(thrifts-34, York-33)
nmod:into(pumped-20, thrifts-34)
det(years-37, a-35)
amod(years-37, few-36)
nmod:npmod(ago-38, years-37)
advmod(thrifts-34, ago-38)
punct(makes-3, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#funds

pump :: Gary Floyd , owner of Johnson 's Corner , says he pumped one million fewer gallons of diesel fuel in 1987 than a year earlier ./.
compound(Floyd-2, Gary-1)
nsubj(says-10, Floyd-2)
punct(Floyd-2, ,-3)
appos(Floyd-2, owner-4)
case(Corner-8, of-5)
nmod:poss(Corner-8, Johnson-6)
case(Johnson-6, 's-7)
nmod:of(owner-4, Corner-8)
punct(Floyd-2, ,-9)
root(ROOT-0, says-10)
nsubj(pumped-12, he-11)
ccomp(says-10, pumped-12)
compound(million-14, one-13)
nummod(gallons-16, million-14)
amod(gallons-16, fewer-15)
dobj(pumped-12, gallons-16)
case(fuel-19, of-17)
compound(fuel-19, diesel-18)
nmod:of(gallons-16, fuel-19)
case(1987-21, in-20)
nmod:in(pumped-12, 1987-21)
case(earlier-25, than-22)
det(year-24, a-23)
nmod:npmod(earlier-25, year-24)
advcl(pumped-12, earlier-25)
punct(says-10, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#fuel

pump :: Two years ago , Utah state engineers came up with what seemed a logical solution to the seasonal flooding of the Great Salt Lake: Create yet another lake nearby , and pump the excess water into it ./.
nummod(years-2, Two-1)
nmod:npmod(ago-3, years-2)
advmod(came-8, ago-3)
punct(came-8, ,-4)
compound(engineers-7, Utah-5)
compound(engineers-7, state-6)
nsubj(came-8, engineers-7)
root(ROOT-0, came-8)
compound:prt(came-8, up-9)
mark(seemed-12, with-10)
nsubj(seemed-12, what-11)
advcl(came-8, seemed-12)
det(solution-15, a-13)
amod(solution-15, logical-14)
dobj(seemed-12, solution-15)
case(flooding-19, to-16)
det(flooding-19, the-17)
amod(flooding-19, seasonal-18)
nmod:to(solution-15, flooding-19)
case(Lake-24, of-20)
det(Lake-24, the-21)
compound(Lake-24, Great-22)
compound(Lake-24, Salt-23)
nmod:of(flooding-19, Lake-24)
punct(solution-15, :-25)
dep(solution-15, Create-26)
advmod(lake-29, yet-27)
det(lake-29, another-28)
xcomp(Create-26, lake-29)
advmod(lake-29, nearby-30)
punct(Create-26, ,-31)
cc(Create-26, and-32)
dep(solution-15, pump-33)
conj:and(Create-26, pump-33)
det(water-36, the-34)
amod(water-36, excess-35)
dobj(pump-33, water-36)
case(it-38, into-37)
nmod:into(pump-33, it-38)
punct(came-8, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#water

pump :: BJ-Titan primarily offers pumping and other services that aim to increase a well 's output of oil and gas ./.
nsubj(offers-3, BJ-Titan-1)
advmod(offers-3, primarily-2)
root(ROOT-0, offers-3)
compound(services-7, pumping-4)
cc(pumping-4, and-5)
conj:and(pumping-4, other-6)
compound(services-7, other-6)
dobj(offers-3, services-7)
nsubj(aim-9, services-7)
nsubj:xsubj(increase-11, services-7)
ref(services-7, that-8)
acl:relcl(services-7, aim-9)
mark(increase-11, to-10)
xcomp(aim-9, increase-11)
det(well-13, a-12)
nmod:poss(output-15, well-13)
case(well-13, 's-14)
dobj(increase-11, output-15)
case(oil-17, of-16)
nmod:of(output-15, oil-17)
cc(oil-17, and-18)
nmod:of(output-15, gas-19)
conj:and(oil-17, gas-19)
punct(offers-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

pump :: Harvey D. White , an Auckland cardiologist , found that `` no dramatic difference '' emerged from a small study comparing TPA with streptokinase in preserving the heart 's pumping power and in prolonging survival following a first heart attack ./.
compound(White-3, Harvey-1)
compound(White-3, D.-2)
nsubj(found-9, White-3)
punct(White-3, ,-4)
det(cardiologist-7, an-5)
compound(cardiologist-7, Auckland-6)
appos(White-3, cardiologist-7)
punct(White-3, ,-8)
root(ROOT-0, found-9)
mark(emerged-16, that-10)
punct(emerged-16, ``-11)
neg(difference-14, no-12)
amod(difference-14, dramatic-13)
nsubj(emerged-16, difference-14)
punct(emerged-16, ''-15)
ccomp(found-9, emerged-16)
case(study-20, from-17)
det(study-20, a-18)
amod(study-20, small-19)
nmod:from(emerged-16, study-20)
acl(study-20, comparing-21)
dobj(comparing-21, TPA-22)
case(streptokinase-24, with-23)
nmod:with(comparing-21, streptokinase-24)
mark(preserving-26, in-25)
advcl(comparing-21, preserving-26)
det(heart-28, the-27)
nmod:poss(power-31, heart-28)
case(heart-28, 's-29)
amod(power-31, pumping-30)
dobj(preserving-26, power-31)
cc(preserving-26, and-32)
mark(prolonging-34, in-33)
advcl(comparing-21, prolonging-34)
conj:and(preserving-26, prolonging-34)
dobj(prolonging-34, survival-35)
case(attack-40, following-36)
det(attack-40, a-37)
amod(attack-40, first-38)
compound(attack-40, heart-39)
nmod:following(prolonging-34, attack-40)
punct(found-9, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#power

pump :: The heart 's pumping power three weeks after treatment , as measured by the fraction of blood ejected with each heartbeat , was `` exactly the same '' -- 58 % for both groups , Dr. White said ./.
det(heart-2, The-1)
nmod:poss(power-5, heart-2)
case(heart-2, 's-3)
amod(power-5, pumping-4)
nsubj(same-27, power-5)
nummod(weeks-7, three-6)
nmod:after(power-5, weeks-7)
case(weeks-7, after-8)
dep(weeks-7, treatment-9)
punct(power-5, ,-10)
mark(measured-12, as-11)
acl(power-5, measured-12)
case(fraction-15, by-13)
det(fraction-15, the-14)
nmod:by(measured-12, fraction-15)
case(blood-17, of-16)
nmod:of(fraction-15, blood-17)
acl(blood-17, ejected-18)
case(heartbeat-21, with-19)
det(heartbeat-21, each-20)
nmod:with(ejected-18, heartbeat-21)
punct(power-5, ,-22)
cop(same-27, was-23)
punct(same-27, ``-24)
advmod(same-27, exactly-25)
det(same-27, the-26)
root(ROOT-0, same-27)
punct(same-27, ''-28)
punct(same-27, ---29)
nummod(%-31, 58-30)
dep(said-38, %-31)
case(groups-34, for-32)
det(groups-34, both-33)
nmod:for(%-31, groups-34)
punct(said-38, ,-35)
compound(White-37, Dr.-36)
nsubj(said-38, White-37)
parataxis(same-27, said-38)
punct(same-27, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#power

pump :: Scientists disagree , however , as to whether the heart 's pumping power is a true predictor of survival ./.
nsubj(disagree-2, Scientists-1)
root(ROOT-0, disagree-2)
punct(disagree-2, ,-3)
advmod(disagree-2, however-4)
punct(disagree-2, ,-5)
case(predictor-17, as-6)
mark(predictor-17, to-7)
mark(predictor-17, whether-8)
det(heart-10, the-9)
nmod:poss(power-13, heart-10)
case(heart-10, 's-11)
amod(power-13, pumping-12)
nsubj(predictor-17, power-13)
cop(predictor-17, is-14)
det(predictor-17, a-15)
amod(predictor-17, true-16)
nmod:as(disagree-2, predictor-17)
case(survival-19, of-18)
nmod:of(predictor-17, survival-19)
punct(disagree-2, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#power

pump :: Dr. Grosssbard added that the apparent equality in pumping power obscured the fact that more streptokinase patients had died in the first three weeks ./.
compound(Grosssbard-2, Dr.-1)
nsubj(added-3, Grosssbard-2)
root(ROOT-0, added-3)
mark(obscured-11, that-4)
det(equality-7, the-5)
amod(equality-7, apparent-6)
nsubj(obscured-11, equality-7)
case(power-10, in-8)
amod(power-10, pumping-9)
nmod:in(equality-7, power-10)
ccomp(added-3, obscured-11)
det(fact-13, the-12)
dobj(obscured-11, fact-13)
mark(died-19, that-14)
amod(patients-17, more-15)
compound(patients-17, streptokinase-16)
nsubj(died-19, patients-17)
aux(died-19, had-18)
ccomp(fact-13, died-19)
case(weeks-24, in-20)
det(weeks-24, the-21)
amod(weeks-24, first-22)
nummod(weeks-24, three-23)
nmod:in(died-19, weeks-24)
punct(added-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#power

pump :: The LCG produced for the Apollo astronauts and used by current shuttle crews is made of white spandex and ribbed with 1 8-inch tubing through which water is pumped from a heat exchanger worn on a backpack to maintain an even body temperature ./.
det(LCG-2, The-1)
nsubj(produced-3, LCG-2)
root(ROOT-0, produced-3)
case(astronauts-7, for-4)
det(astronauts-7, the-5)
compound(astronauts-7, Apollo-6)
nmod:for(produced-3, astronauts-7)
cc(produced-3, and-8)
nsubjpass(made-15, used-9)
case(crews-13, by-10)
amod(crews-13, current-11)
compound(crews-13, shuttle-12)
nmod:by(used-9, crews-13)
auxpass(made-15, is-14)
conj:and(produced-3, made-15)
case(spandex-18, of-16)
amod(spandex-18, white-17)
nmod:of(made-15, spandex-18)
cc(spandex-18, and-19)
nmod:of(made-15, ribbed-20)
conj:and(spandex-18, ribbed-20)
case(tubing-24, with-21)
nummod(tubing-24, 1-22)
amod(tubing-24, 8-inch-23)
nmod:with(ribbed-20, tubing-24)
nmod:through(pumped-29, tubing-24)
case(which-26, through-25)
ref(tubing-24, which-26)
nsubjpass(pumped-29, water-27)
auxpass(pumped-29, is-28)
acl:relcl(tubing-24, pumped-29)
case(exchanger-33, from-30)
det(exchanger-33, a-31)
compound(exchanger-33, heat-32)
nmod:from(pumped-29, exchanger-33)
acl(exchanger-33, worn-34)
case(backpack-37, on-35)
det(backpack-37, a-36)
nmod:on(worn-34, backpack-37)
mark(maintain-39, to-38)
xcomp(worn-34, maintain-39)
det(temperature-43, an-40)
advmod(temperature-43, even-41)
compound(temperature-43, body-42)
dobj(maintain-39, temperature-43)
punct(produced-3, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#water

pump :: A score of 200 indicates an ability to grasp simple scientific principles , such as the heart 's main function is to pump blood , or the moon glows because of reflected light from the sun ./.
det(score-2, A-1)
nsubj(indicates-5, score-2)
case(200-4, of-3)
nmod:of(score-2, 200-4)
root(ROOT-0, indicates-5)
det(ability-7, an-6)
nsubj(is-21, ability-7)
nsubj:xsubj(pump-23, ability-7)
mark(grasp-9, to-8)
acl(ability-7, grasp-9)
amod(principles-12, simple-10)
amod(principles-12, scientific-11)
dobj(grasp-9, principles-12)
punct(principles-12, ,-13)
case(function-20, such-14)
mwe(such-14, as-15)
det(heart-17, the-16)
nmod:poss(function-20, heart-17)
case(heart-17, 's-18)
amod(function-20, main-19)
nmod:such_as(principles-12, function-20)
ccomp(indicates-5, is-21)
mark(pump-23, to-22)
xcomp(is-21, pump-23)
dobj(pump-23, blood-24)
punct(blood-24, ,-25)
cc(blood-24, or-26)
det(moon-28, the-27)
dobj(pump-23, moon-28)
conj:or(blood-24, moon-28)
dep(is-21, glows-29)
case(light-33, because-30)
mwe(because-30, of-31)
amod(light-33, reflected-32)
nmod:because_of(glows-29, light-33)
case(sun-36, from-34)
det(sun-36, the-35)
nmod:from(light-33, sun-36)
punct(indicates-5, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#blood

pump :: Lung congestion is a result of weakened or impaired pumping action by the heart 's key lower left chamber ./.
compound(congestion-2, Lung-1)
nsubj(result-5, congestion-2)
cop(result-5, is-3)
det(result-5, a-4)
root(ROOT-0, result-5)
case(weakened-7, of-6)
nmod:of(result-5, weakened-7)
cc(weakened-7, or-8)
nmod:of(result-5, impaired-9)
conj:or(weakened-7, impaired-9)
amod(action-11, pumping-10)
dep(weakened-7, action-11)
case(chamber-19, by-12)
det(heart-14, the-13)
nmod:poss(chamber-19, heart-14)
case(heart-14, 's-15)
amod(chamber-19, key-16)
dep(left-18, lower-17)
amod(chamber-19, left-18)
nmod:by(weakened-7, chamber-19)
punct(result-5, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#action

pump :: Under the pact , Ashland will treat the contaminated soil , and it will pump and treat ground water to meet drinking-water standards , among other things ./.
case(pact-3, Under-1)
det(pact-3, the-2)
nmod:under(treat-7, pact-3)
punct(treat-7, ,-4)
nsubj(treat-7, Ashland-5)
aux(treat-7, will-6)
root(ROOT-0, treat-7)
det(soil-10, the-8)
amod(soil-10, contaminated-9)
dobj(treat-7, soil-10)
punct(treat-7, ,-11)
cc(treat-7, and-12)
nsubj(pump-15, it-13)
nsubj(treat-17, it-13)
aux(pump-15, will-14)
conj:and(treat-7, pump-15)
cc(pump-15, and-16)
conj:and(treat-7, treat-17)
conj:and(pump-15, treat-17)
compound(water-19, ground-18)
dobj(pump-15, water-19)
mark(meet-21, to-20)
advcl(pump-15, meet-21)
compound(standards-23, drinking-water-22)
dobj(meet-21, standards-23)
punct(treat-7, ,-24)
case(things-27, among-25)
amod(things-27, other-26)
nmod:among(treat-7, things-27)
punct(treat-7, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#water

pump :: A prepared statement from Dr. Lenfant 's office , read by an institute spokesman , said the institute plans to refocus its resources on the smaller , `` simple and reliable '' left ventricular assist devices -- half-heart pumps that may be implanted in tandem with the real heart to boost the power of its main pumping chamber ./.
det(statement-3, A-1)
amod(statement-3, prepared-2)
nsubj(said-16, statement-3)
case(office-8, from-4)
compound(Lenfant-6, Dr.-5)
nmod:poss(office-8, Lenfant-6)
case(Lenfant-6, 's-7)
nmod:from(statement-3, office-8)
punct(statement-3, ,-9)
acl(statement-3, read-10)
case(spokesman-14, by-11)
det(spokesman-14, an-12)
compound(spokesman-14, institute-13)
nmod:by(read-10, spokesman-14)
punct(statement-3, ,-15)
root(ROOT-0, said-16)
det(institute-18, the-17)
nsubj(plans-19, institute-18)
nsubj:xsubj(refocus-21, institute-18)
ccomp(said-16, plans-19)
mark(refocus-21, to-20)
xcomp(plans-19, refocus-21)
nmod:poss(resources-23, its-22)
dobj(refocus-21, resources-23)
case(the-25, on-24)
nmod:on(refocus-21, the-25)
dep(left-33, smaller-26)
punct(left-33, ,-27)
punct(left-33, ``-28)
ccomp(left-33, simple-29)
cc(simple-29, and-30)
conj:and(simple-29, reliable-31)
ccomp(left-33, reliable-31)
punct(left-33, ''-32)
root(the-25, left-33)
xcomp(left-33, ventricular-34)
dep(ventricular-34, assist-35)
dobj(assist-35, devices-36)
punct(pumps-39, ---37)
amod(pumps-39, half-heart-38)
dep(devices-36, pumps-39)
nsubjpass(implanted-43, pumps-39)
nsubj:xsubj(boost-51, pumps-39)
ref(pumps-39, that-40)
aux(implanted-43, may-41)
auxpass(implanted-43, be-42)
acl:relcl(pumps-39, implanted-43)
case(tandem-45, in-44)
nmod:in(implanted-43, tandem-45)
case(heart-49, with-46)
det(heart-49, the-47)
amod(heart-49, real-48)
nmod:with(tandem-45, heart-49)
mark(boost-51, to-50)
xcomp(implanted-43, boost-51)
det(power-53, the-52)
dobj(boost-51, power-53)
case(chamber-58, of-54)
nmod:poss(chamber-58, its-55)
amod(chamber-58, main-56)
amod(chamber-58, pumping-57)
nmod:of(power-53, chamber-58)
punct(left-33, .-59)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#chamber

pump :: The solvent , methyl tert-butyl ether , has been known for some time to dissolve gallstones but has n't been widely used because it had to be pumped into the gallbladder by a hand syringe for several hours while the patient was under general anesthesia ./.
det(ether-6, The-1)
amod(ether-6, solvent-2)
punct(ether-6, ,-3)
compound(ether-6, methyl-4)
compound(ether-6, tert-butyl-5)
nsubjpass(known-10, ether-6)
nsubjpass(used-22, ether-6)
punct(ether-6, ,-7)
aux(known-10, has-8)
auxpass(known-10, been-9)
root(ROOT-0, known-10)
case(time-13, for-11)
det(time-13, some-12)
nmod:for(known-10, time-13)
mark(dissolve-15, to-14)
acl(time-13, dissolve-15)
dobj(dissolve-15, gallstones-16)
cc(known-10, but-17)
aux(used-22, has-18)
neg(used-22, n't-19)
auxpass(used-22, been-20)
advmod(used-22, widely-21)
conj:but(known-10, used-22)
mark(had-25, because-23)
nsubj(had-25, it-24)
nsubjpass:xsubj(pumped-28, it-24)
advcl(used-22, had-25)
mark(pumped-28, to-26)
auxpass(pumped-28, be-27)
xcomp(had-25, pumped-28)
case(gallbladder-31, into-29)
det(gallbladder-31, the-30)
nmod:into(pumped-28, gallbladder-31)
case(syringe-35, by-32)
det(syringe-35, a-33)
compound(syringe-35, hand-34)
nmod:agent(pumped-28, syringe-35)
case(hours-38, for-36)
amod(hours-38, several-37)
nmod:for(pumped-28, hours-38)
mark(anesthesia-45, while-39)
det(patient-41, the-40)
nsubj(anesthesia-45, patient-41)
cop(anesthesia-45, was-42)
case(anesthesia-45, under-43)
amod(anesthesia-45, general-44)
advcl(had-25, anesthesia-45)
punct(known-10, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#be

pump :: Recovery efforts off the coast of Florida had been delayed while the workers pumped toxic gases from the 30-year-old vessel ./.
compound(efforts-2, Recovery-1)
nsubjpass(delayed-10, efforts-2)
case(coast-5, off-3)
det(coast-5, the-4)
nmod:off(efforts-2, coast-5)
case(Florida-7, of-6)
nmod:of(coast-5, Florida-7)
aux(delayed-10, had-8)
auxpass(delayed-10, been-9)
root(ROOT-0, delayed-10)
mark(pumped-14, while-11)
det(workers-13, the-12)
nsubj(pumped-14, workers-13)
advcl(delayed-10, pumped-14)
amod(gases-16, toxic-15)
dobj(pumped-14, gases-16)
case(vessel-20, from-17)
det(vessel-20, the-18)
amod(vessel-20, 30-year-old-19)
nmod:from(pumped-14, vessel-20)
punct(delayed-10, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#gases

pump :: They pump their arms and wiggle their hips vigorously , producing a motion that Red Smith once likened to that of earthworms out after a thunderstorm ./.
nsubj(pump-2, They-1)
nsubj(wiggle-6, They-1)
root(ROOT-0, pump-2)
nmod:poss(arms-4, their-3)
dobj(pump-2, arms-4)
cc(pump-2, and-5)
conj:and(pump-2, wiggle-6)
nmod:poss(hips-8, their-7)
dobj(wiggle-6, hips-8)
advmod(wiggle-6, vigorously-9)
punct(pump-2, ,-10)
advcl(pump-2, producing-11)
det(motion-13, a-12)
dobj(producing-11, motion-13)
dobj(likened-18, motion-13)
ref(motion-13, that-14)
compound(Smith-16, Red-15)
nsubj(likened-18, Smith-16)
advmod(likened-18, once-17)
acl:relcl(motion-13, likened-18)
case(that-20, to-19)
nmod:to(likened-18, that-20)
case(earthworms-22, of-21)
nmod:of(that-20, earthworms-22)
case(thunderstorm-26, out-23)
case(thunderstorm-26, after-24)
det(thunderstorm-26, a-25)
nmod:after(likened-18, thunderstorm-26)
punct(pump-2, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#arms

pump :: Two doctors from Pittsburgh raced by private jet to the Midwest to retrieve it ; on return , bad weather kept their plane circling over Pittsburgh for an hour and a half while Mr. McGowan , his chest opened and a heart-lung machine pumping his blood , lay on the operating table ./.
nummod(doctors-2, Two-1)
nsubj(raced-5, doctors-2)
nsubj:xsubj(retrieve-13, doctors-2)
case(Pittsburgh-4, from-3)
nmod:from(doctors-2, Pittsburgh-4)
root(ROOT-0, raced-5)
case(jet-8, by-6)
amod(jet-8, private-7)
nmod:by(raced-5, jet-8)
case(Midwest-11, to-9)
det(Midwest-11, the-10)
nmod:to(raced-5, Midwest-11)
mark(retrieve-13, to-12)
xcomp(raced-5, retrieve-13)
dobj(retrieve-13, it-14)
punct(raced-5, ;-15)
case(return-17, on-16)
nmod:on(kept-21, return-17)
punct(kept-21, ,-18)
amod(weather-20, bad-19)
nsubj(kept-21, weather-20)
parataxis(raced-5, kept-21)
nmod:poss(plane-23, their-22)
nsubj(circling-24, plane-23)
xcomp(kept-21, circling-24)
case(Pittsburgh-26, over-25)
nmod:over(circling-24, Pittsburgh-26)
case(hour-29, for-27)
det(hour-29, an-28)
nmod:for(circling-24, hour-29)
cc(hour-29, and-30)
det(half-32, a-31)
nmod:for(circling-24, half-32)
conj:and(hour-29, half-32)
mark(lay-48, while-33)
compound(McGowan-35, Mr.-34)
nsubj(lay-48, McGowan-35)
punct(McGowan-35, ,-36)
nmod:poss(chest-38, his-37)
nsubj(opened-39, chest-38)
acl:relcl(McGowan-35, opened-39)
cc(opened-39, and-40)
det(machine-43, a-41)
amod(machine-43, heart-lung-42)
acl:relcl(McGowan-35, machine-43)
conj:and(opened-39, machine-43)
acl(machine-43, pumping-44)
nmod:poss(blood-46, his-45)
dobj(pumping-44, blood-46)
punct(McGowan-35, ,-47)
advcl(kept-21, lay-48)
case(table-52, on-49)
det(table-52, the-50)
compound(table-52, operating-51)
nmod:on(lay-48, table-52)
punct(raced-5, .-53)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: pump#blood

rain :: Iranian guns pummeled Basra on the war 's first day , and in the following eight years , about 65 , 000 shells rained down ./.
amod(guns-2, Iranian-1)
nsubj(pummeled-3, guns-2)
root(ROOT-0, pummeled-3)
dobj(pummeled-3, Basra-4)
case(day-10, on-5)
det(war-7, the-6)
nmod:poss(day-10, war-7)
case(war-7, 's-8)
amod(day-10, first-9)
nmod:on(pummeled-3, day-10)
punct(pummeled-3, ,-11)
cc(pummeled-3, and-12)
case(years-17, in-13)
det(years-17, the-14)
amod(years-17, following-15)
nummod(years-17, eight-16)
conj:and(pummeled-3, years-17)
punct(years-17, ,-18)
advmod(65-20, about-19)
appos(years-17, 65-20)
punct(65-20, ,-21)
nummod(shells-23, 000-22)
nsubj(rained-24, shells-23)
acl:relcl(65-20, rained-24)
advmod(rained-24, down-25)
punct(pummeled-3, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#shells

rain :: Coincidence perhaps , but within 48 hours , Ms. Fox says , it rained here ./.
root(ROOT-0, Coincidence-1)
advmod(Coincidence-1, perhaps-2)
punct(Coincidence-1, ,-3)
cc(Coincidence-1, but-4)
case(hours-7, within-5)
nummod(hours-7, 48-6)
nmod:within(rained-14, hours-7)
punct(says-11, ,-8)
compound(Fox-10, Ms.-9)
nsubj(says-11, Fox-10)
parataxis(rained-14, says-11)
punct(says-11, ,-12)
nsubj(rained-14, it-13)
conj:but(Coincidence-1, rained-14)
advmod(rained-14, here-15)
punct(Coincidence-1, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: Gustave de La France , an old farmer who lives deep in the bald mountains near Hinche , says: `` When it rains , the spirits in the rocks are nourished , so the rocks grow larger . ''/''
compound(France-4, Gustave-1)
compound(France-4, de-2)
compound(France-4, La-3)
nsubj(says-19, France-4)
punct(France-4, ,-5)
det(farmer-8, an-6)
amod(farmer-8, old-7)
appos(France-4, farmer-8)
nsubj(lives-10, farmer-8)
ref(farmer-8, who-9)
acl:relcl(farmer-8, lives-10)
advmod(lives-10, deep-11)
case(mountains-15, in-12)
det(mountains-15, the-13)
amod(mountains-15, bald-14)
nmod:in(lives-10, mountains-15)
case(Hinche-17, near-16)
nmod:near(mountains-15, Hinche-17)
punct(France-4, ,-18)
root(ROOT-0, says-19)
punct(says-19, :-20)
punct(says-19, ``-21)
advmod(rains-24, When-22)
nsubj(rains-24, it-23)
advcl(nourished-32, rains-24)
punct(nourished-32, ,-25)
det(spirits-27, the-26)
nsubjpass(nourished-32, spirits-27)
case(rocks-30, in-28)
det(rocks-30, the-29)
nmod:in(spirits-27, rocks-30)
auxpass(nourished-32, are-31)
ccomp(says-19, nourished-32)
punct(nourished-32, ,-33)
mark(grow-37, so-34)
det(rocks-36, the-35)
nsubj(grow-37, rocks-36)
advcl(nourished-32, grow-37)
xcomp(grow-37, larger-38)
punct(says-19, .-39)
punct(says-19, ''-40)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: rain#it

rain :: Every time it rained , the family placed cups and bowls all over the house to catch the leaks ./.
det(time-2, Every-1)
nmod:tmod(placed-8, time-2)
nsubj(rained-4, it-3)
acl:relcl(time-2, rained-4)
punct(placed-8, ,-5)
det(family-7, the-6)
nsubj(placed-8, family-7)
nsubj(bowls-11, family-7)
root(ROOT-0, placed-8)
dobj(placed-8, cups-9)
cc(placed-8, and-10)
conj:and(placed-8, bowls-11)
dobj(bowls-11, all-12)
case(house-15, over-13)
det(house-15, the-14)
nmod:over(all-12, house-15)
mark(catch-17, to-16)
advcl(bowls-11, catch-17)
det(leaks-19, the-18)
dobj(catch-17, leaks-19)
punct(placed-8, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: Red ink has been raining upon one AI company after another -- including Symbolics Inc . , Teknowledge Inc. and Intellicorp -- and Xerox 's business has been hurt , too ./.
amod(ink-2, Red-1)
nsubj(raining-5, ink-2)
aux(raining-5, has-3)
aux(raining-5, been-4)
root(ROOT-0, raining-5)
case(company-9, upon-6)
nummod(company-9, one-7)
compound(company-9, AI-8)
nmod:upon(raining-5, company-9)
case(another-11, after-10)
nmod:after(raining-5, another-11)
punct(another-11, ---12)
case(Inc-15, including-13)
compound(Inc-15, Symbolics-14)
nmod:including(another-11, Inc-15)
punct(raining-5, .-16)
punct(hurt-13, ,-1)
compound(Inc.-3, Teknowledge-2)
nsubjpass(hurt-13, Inc.-3)
cc(Inc.-3, and-4)
conj:and(Inc.-3, Intellicorp-5)
nsubjpass(hurt-13, Intellicorp-5)
punct(Inc.-3, ---6)
cc(Inc.-3, and-7)
nmod:poss(business-10, Xerox-8)
case(Xerox-8, 's-9)
conj:and(Inc.-3, business-10)
nsubjpass(hurt-13, business-10)
aux(hurt-13, has-11)
auxpass(hurt-13, been-12)
root(ROOT-0, hurt-13)
punct(hurt-13, ,-14)
advmod(hurt-13, too-15)
punct(hurt-13, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#ink

rain :: `` No , it does n't rain every day , '' protests a vendor at Cherrapunji 's waterlogged market , his face wreathed in swirling , midmorning mist ./.
punct(protests-12, ``-1)
discourse(rain-7, No-2)
punct(rain-7, ,-3)
nsubj(rain-7, it-4)
aux(rain-7, does-5)
neg(rain-7, n't-6)
ccomp(protests-12, rain-7)
det(day-9, every-8)
nmod:tmod(rain-7, day-9)
punct(protests-12, ,-10)
punct(protests-12, ''-11)
root(ROOT-0, protests-12)
det(vendor-14, a-13)
nsubj(protests-12, vendor-14)
case(market-19, at-15)
nmod:poss(market-19, Cherrapunji-16)
case(Cherrapunji-16, 's-17)
amod(market-19, waterlogged-18)
nmod:at(vendor-14, market-19)
punct(vendor-14, ,-20)
nmod:poss(face-22, his-21)
nsubj(wreathed-23, face-22)
acl:relcl(vendor-14, wreathed-23)
mark(swirling-25, in-24)
advcl(wreathed-23, swirling-25)
punct(swirling-25, ,-26)
compound(mist-28, midmorning-27)
dobj(swirling-25, mist-28)
punct(protests-12, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: One of their favorite songs has the line: `` It rains and rains Until the stones will break . ''/''
nsubj(has-6, One-1)
case(songs-5, of-2)
nmod:poss(songs-5, their-3)
amod(songs-5, favorite-4)
nmod:of(One-1, songs-5)
root(ROOT-0, has-6)
det(line-8, the-7)
dobj(has-6, line-8)
punct(line-8, :-9)
punct(line-8, ``-10)
nsubj(rains-12, It-11)
dep(line-8, rains-12)
cc(rains-12, and-13)
dep(line-8, rains-14)
conj:and(rains-12, rains-14)
mark(break-19, Until-15)
det(stones-17, the-16)
nsubj(break-19, stones-17)
aux(break-19, will-18)
advcl(rains-12, break-19)
punct(has-6, .-20)
punct(has-6, ''-21)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: rain#it

rain :: Mr. Syiem says there are times when it rains heavily , day and night , for two weeks running ./.
compound(Syiem-2, Mr.-1)
nsubj(says-3, Syiem-2)
root(ROOT-0, says-3)
expl(are-5, there-4)
ccomp(says-3, are-5)
nsubj(are-5, times-6)
advmod(rains-9, when-7)
nsubj(rains-9, it-8)
acl:relcl(times-6, rains-9)
advmod(rains-9, heavily-10)
punct(times-6, ,-11)
appos(times-6, day-12)
cc(day-12, and-13)
appos(times-6, night-14)
conj:and(day-12, night-14)
punct(times-6, ,-15)
case(weeks-18, for-16)
nummod(weeks-18, two-17)
nmod:for(times-6, weeks-18)
acl(weeks-18, running-19)
punct(says-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: `` If we return from the International Coffee Organization meetings in London at the end of September and it still has n't rained , then it would be a consideration , '' he said ./.
punct(said-34, ``-1)
mark(return-4, If-2)
nsubj(return-4, we-3)
advcl(consideration-30, return-4)
case(meetings-10, from-5)
det(meetings-10, the-6)
amod(meetings-10, International-7)
compound(meetings-10, Coffee-8)
compound(meetings-10, Organization-9)
nmod:from(return-4, meetings-10)
case(London-12, in-11)
nmod:in(meetings-10, London-12)
case(end-15, at-13)
det(end-15, the-14)
nmod:at(return-4, end-15)
case(September-17, of-16)
nmod:of(end-15, September-17)
cc(return-4, and-18)
nsubj(rained-23, it-19)
advmod(rained-23, still-20)
aux(rained-23, has-21)
neg(rained-23, n't-22)
conj:and(return-4, rained-23)
advcl(consideration-30, rained-23)
punct(consideration-30, ,-24)
advmod(it-26, then-25)
nsubj(consideration-30, it-26)
aux(consideration-30, would-27)
cop(consideration-30, be-28)
det(consideration-30, a-29)
ccomp(said-34, consideration-30)
punct(said-34, ,-31)
punct(said-34, ''-32)
nsubj(said-34, he-33)
root(ROOT-0, said-34)
punct(said-34, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: `` I was in the stands when it rained , '' said Victor Lespinasse , a floor broker for Dean Witter Reynolds , Chicago ./.
punct(said-12, ``-1)
nsubj(stands-6, I-2)
cop(stands-6, was-3)
case(stands-6, in-4)
det(stands-6, the-5)
ccomp(said-12, stands-6)
advmod(rained-9, when-7)
nsubj(rained-9, it-8)
advcl(stands-6, rained-9)
punct(said-12, ,-10)
punct(said-12, ''-11)
root(ROOT-0, said-12)
compound(Lespinasse-14, Victor-13)
nsubj(said-12, Lespinasse-14)
punct(Lespinasse-14, ,-15)
det(broker-18, a-16)
compound(broker-18, floor-17)
appos(Lespinasse-14, broker-18)
case(Reynolds-22, for-19)
compound(Reynolds-22, Dean-20)
compound(Reynolds-22, Witter-21)
nmod:for(broker-18, Reynolds-22)
punct(Reynolds-22, ,-23)
appos(Reynolds-22, Chicago-24)
punct(said-12, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: Then , after 3 1 2 innings , it rained , with the Cubs ahead , 3-1 ./.
advmod(rained-10, Then-1)
punct(rained-10, ,-2)
case(innings-7, after-3)
nummod(innings-7, 3-4)
nummod(innings-7, 1-5)
nummod(innings-7, 2-6)
nmod:after(rained-10, innings-7)
punct(rained-10, ,-8)
nsubj(rained-10, it-9)
root(ROOT-0, rained-10)
punct(rained-10, ,-11)
case(Cubs-14, with-12)
det(Cubs-14, the-13)
nmod:with(rained-10, Cubs-14)
advmod(Cubs-14, ahead-15)
punct(Cubs-14, ,-16)
nummod(Cubs-14, 3-1-17)
punct(rained-10, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: It 's raining . ''/''
nsubj(raining-3, It-1)
aux(raining-3, 's-2)
root(ROOT-0, raining-3)
punct(raining-3, .-4)
punct(raining-3, ''-5)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: rain#it

rain :: In addition , Mr. Sieck said , NASA would cancel the test if it rained , on the off chance that the firing could be hit by lightning ./.
case(addition-2, In-1)
nmod:in(cancel-10, addition-2)
punct(said-6, ,-3)
compound(Sieck-5, Mr.-4)
nsubj(said-6, Sieck-5)
parataxis(cancel-10, said-6)
punct(said-6, ,-7)
nsubj(cancel-10, NASA-8)
aux(cancel-10, would-9)
root(ROOT-0, cancel-10)
det(test-12, the-11)
dobj(cancel-10, test-12)
mark(rained-15, if-13)
nsubj(rained-15, it-14)
advcl(cancel-10, rained-15)
punct(rained-15, ,-16)
case(chance-20, on-17)
det(chance-20, the-18)
amod(chance-20, off-19)
nmod:on(rained-15, chance-20)
mark(hit-26, that-21)
det(firing-23, the-22)
nsubjpass(hit-26, firing-23)
aux(hit-26, could-24)
auxpass(hit-26, be-25)
ccomp(chance-20, hit-26)
case(lightning-28, by-27)
nmod:agent(hit-26, lightning-28)
punct(cancel-10, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: When it finally rained , it was a letdown . ''/''
advmod(rained-4, When-1)
nsubj(rained-4, it-2)
advmod(rained-4, finally-3)
advcl(letdown-9, rained-4)
punct(letdown-9, ,-5)
nsubj(letdown-9, it-6)
cop(letdown-9, was-7)
det(letdown-9, a-8)
root(ROOT-0, letdown-9)
punct(letdown-9, .-10)
punct(letdown-9, ''-11)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: rain#it

rain :: `` When it does n't rain on my land , it will rain on my brother 's , '' says Antonio Avina ./.
root(ROOT-0, ``-1)
advmod(rain-6, When-2)
nsubj(rain-6, it-3)
aux(rain-6, does-4)
neg(rain-6, n't-5)
advcl(rain-13, rain-6)
case(land-9, on-7)
nmod:poss(land-9, my-8)
nmod:on(rain-6, land-9)
punct(rain-13, ,-10)
nsubj(rain-13, it-11)
aux(rain-13, will-12)
root(``-1, rain-13)
advcl(rain-13, on-14)
nmod:poss(brother-16, my-15)
dobj(on-14, brother-16)
case(brother-16, 's-17)
punct(says-20, ,-18)
punct(says-20, ''-19)
dep(brother-16, says-20)
compound(Avina-22, Antonio-21)
nsubj(says-20, Avina-22)
punct(rain-13, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: And when Mr. Dukakis 's 46-minute address had ended -- as the confetti and the balloons rained down and jubilant delegates waved an estimated 10 , 000 American flags -- Mr. Jackson , his wife and family joined the Dukakis and Bentsen families on the platform ./.
root(ROOT-0, And-1)
advmod(ended-9, when-2)
compound(Dukakis-4, Mr.-3)
nmod:poss(address-7, Dukakis-4)
case(Dukakis-4, 's-5)
amod(address-7, 46-minute-6)
nsubj(ended-9, address-7)
aux(ended-9, had-8)
dep(And-1, ended-9)
punct(confetti-13, ---10)
case(confetti-13, as-11)
det(confetti-13, the-12)
nmod:as(ended-9, confetti-13)
cc(confetti-13, and-14)
det(balloons-16, the-15)
nsubj(rained-17, balloons-16)
nmod:as(ended-9, rained-17)
conj:and(confetti-13, rained-17)
advmod(rained-17, down-18)
cc(rained-17, and-19)
amod(delegates-21, jubilant-20)
nsubj(waved-22, delegates-21)
conj:and(confetti-13, waved-22)
conj:and(rained-17, waved-22)
dobj(waved-22, an-23)
amod(an-23, estimated-24)
dep(estimated-24, 10-25)
punct(10-25, ,-26)
nummod(flags-29, 000-27)
amod(flags-29, American-28)
appos(10-25, flags-29)
punct(10-25, ---30)
compound(Jackson-32, Mr.-31)
nsubj(joined-38, Jackson-32)
punct(Jackson-32, ,-33)
nmod:poss(wife-35, his-34)
appos(Jackson-32, wife-35)
cc(wife-35, and-36)
appos(Jackson-32, family-37)
conj:and(wife-35, family-37)
parataxis(10-25, joined-38)
det(families-43, the-39)
compound(families-43, Dukakis-40)
cc(Dukakis-40, and-41)
conj:and(Dukakis-40, Bentsen-42)
compound(families-43, Bentsen-42)
dobj(joined-38, families-43)
case(platform-46, on-44)
det(platform-46, the-45)
nmod:on(joined-38, platform-46)
punct(ended-9, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#balloons

rain :: But I could n't make it rain . ''/''
cc(make-5, But-1)
nsubj(make-5, I-2)
aux(make-5, could-3)
neg(make-5, n't-4)
root(ROOT-0, make-5)
nsubj(rain-7, it-6)
xcomp(make-5, rain-7)
punct(make-5, .-8)
punct(make-5, ''-9)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: rain#it

rain :: But Champion International Corp. may soon have to curtail production at its Canton , N.C . , paper mill if it does n't rain soon ./.
cc(have-7, But-1)
compound(Corp.-4, Champion-2)
compound(Corp.-4, International-3)
nsubj(have-7, Corp.-4)
nsubj:xsubj(curtail-9, Corp.-4)
aux(have-7, may-5)
advmod(have-7, soon-6)
root(ROOT-0, have-7)
mark(curtail-9, to-8)
xcomp(have-7, curtail-9)
dobj(curtail-9, production-10)
case(its-12, at-11)
nmod:at(curtail-9, its-12)
root(its-12, Canton-13)
punct(Canton-13, ,-14)
appos(Canton-13, N.C-15)
punct(Canton-13, .-16)
root(ROOT-0, ,-1)
compound(mill-3, paper-2)
root(,-1, mill-3)
mark(rain-8, if-4)
nsubj(rain-8, it-5)
aux(rain-8, does-6)
neg(rain-8, n't-7)
advcl(mill-3, rain-8)
advmod(rain-8, soon-9)
punct(mill-3, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: Pyongyang would like nothing better than to rain on Seoul 's parade ./.
nsubj(like-3, Pyongyang-1)
aux(like-3, would-2)
root(ROOT-0, like-3)
dobj(like-3, nothing-4)
amod(nothing-4, better-5)
mark(rain-8, than-6)
mark(rain-8, to-7)
advcl(better-5, rain-8)
case(parade-12, on-9)
nmod:poss(parade-12, Seoul-10)
case(Seoul-10, 's-11)
nmod:on(rain-8, parade-12)
punct(like-3, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#parade

rain :: U.S. Stinger missiles , machine guns and mangled human limbs came raining down on what was left ./.
compound(missiles-3, U.S.-1)
compound(missiles-3, Stinger-2)
nsubj(came-11, missiles-3)
punct(missiles-3, ,-4)
compound(guns-6, machine-5)
conj:and(missiles-3, guns-6)
nsubj(came-11, guns-6)
cc(missiles-3, and-7)
amod(limbs-10, mangled-8)
amod(limbs-10, human-9)
conj:and(missiles-3, limbs-10)
nsubj(came-11, limbs-10)
root(ROOT-0, came-11)
xcomp(came-11, raining-12)
compound:prt(raining-12, down-13)
mark(left-17, on-14)
nsubjpass(left-17, what-15)
auxpass(left-17, was-16)
advcl(raining-12, left-17)
punct(came-11, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

rain :: It has rained only an inch and a half since January , and most of that came in sprinkles that quickly sizzled back into the air as soon as they hit the burning ground ./.
nsubj(rained-3, It-1)
aux(rained-3, has-2)
root(ROOT-0, rained-3)
advmod(inch-6, only-4)
det(inch-6, an-5)
dobj(rained-3, inch-6)
cc(inch-6, and-7)
det(half-9, a-8)
dobj(rained-3, half-9)
conj:and(inch-6, half-9)
case(January-11, since-10)
nmod:since(rained-3, January-11)
punct(rained-3, ,-12)
cc(rained-3, and-13)
nsubj(came-17, most-14)
case(that-16, of-15)
nmod:of(most-14, that-16)
conj:and(rained-3, came-17)
case(sprinkles-19, in-18)
nmod:in(came-17, sprinkles-19)
nsubj(sizzled-22, that-20)
advmod(sizzled-22, quickly-21)
ccomp(sprinkles-19, sizzled-22)
advmod(sizzled-22, back-23)
case(air-26, into-24)
det(air-26, the-25)
nmod:into(sizzled-22, air-26)
advmod(soon-28, as-27)
advmod(sizzled-22, soon-28)
mark(hit-31, as-29)
nsubj(hit-31, they-30)
advcl(soon-28, hit-31)
det(ground-34, the-32)
compound(ground-34, burning-33)
dobj(hit-31, ground-34)
punct(rained-3, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#inch

rain :: `` It 's raining proposals , not moisture , '' says Sen. Tom Daschle , Democrat of South Dakota ./.
punct(says-11, ``-1)
nsubj(raining-4, It-2)
aux(raining-4, 's-3)
ccomp(says-11, raining-4)
dobj(raining-4, proposals-5)
punct(proposals-5, ,-6)
neg(moisture-8, not-7)
appos(proposals-5, moisture-8)
punct(says-11, ,-9)
punct(says-11, ''-10)
root(ROOT-0, says-11)
compound(Daschle-14, Sen.-12)
compound(Daschle-14, Tom-13)
nsubj(says-11, Daschle-14)
punct(Daschle-14, ,-15)
appos(Daschle-14, Democrat-16)
case(Dakota-19, of-17)
compound(Dakota-19, South-18)
nmod:of(Democrat-16, Dakota-19)
punct(says-11, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#proposals

rain :: `` It ai n't going to rain . ''/''
root(ROOT-0, ``-1)
nsubj(going-5, It-2)
aux(going-5, ai-3)
neg(going-5, n't-4)
root(``-1, going-5)
case(rain-7, to-6)
nmod:to(going-5, rain-7)
punct(going-5, .-8)
punct(going-5, ''-9)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

rain :: For now , he will just reseed the dry wheat fields to soybeans on the chance it will rain ./.
case(now-2, For-1)
nmod:for(reseed-7, now-2)
punct(reseed-7, ,-3)
nsubj(reseed-7, he-4)
aux(reseed-7, will-5)
advmod(reseed-7, just-6)
root(ROOT-0, reseed-7)
det(fields-11, the-8)
amod(fields-11, dry-9)
compound(fields-11, wheat-10)
dobj(reseed-7, fields-11)
case(soybeans-13, to-12)
nmod:to(reseed-7, soybeans-13)
case(chance-16, on-14)
det(chance-16, the-15)
nmod:on(reseed-7, chance-16)
nsubj(rain-19, it-17)
aux(rain-19, will-18)
acl:relcl(chance-16, rain-19)
punct(reseed-7, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: In fact , the current drought-driven frenzy in commodity prices is already tantalizing traders with reminders of the windfall profits that rained on them when commodity prices soared in 1973 to record levels and rebounded again in 1977 ./.
case(fact-2, In-1)
nmod:in(traders-14, fact-2)
punct(traders-14, ,-3)
det(frenzy-7, the-4)
amod(frenzy-7, current-5)
amod(frenzy-7, drought-driven-6)
nsubj(traders-14, frenzy-7)
case(prices-10, in-8)
compound(prices-10, commodity-9)
nmod:in(frenzy-7, prices-10)
cop(traders-14, is-11)
advmod(traders-14, already-12)
amod(traders-14, tantalizing-13)
root(ROOT-0, traders-14)
case(reminders-16, with-15)
nmod:with(traders-14, reminders-16)
case(profits-20, of-17)
det(profits-20, the-18)
compound(profits-20, windfall-19)
nmod:of(reminders-16, profits-20)
nsubj(rained-22, profits-20)
ref(profits-20, that-21)
acl:relcl(profits-20, rained-22)
case(them-24, on-23)
nmod:on(rained-22, them-24)
advmod(soared-28, when-25)
compound(prices-27, commodity-26)
nsubj(soared-28, prices-27)
nsubj:xsubj(record-32, prices-27)
nsubj(rebounded-35, prices-27)
advcl(rained-22, soared-28)
case(1973-30, in-29)
nmod:in(soared-28, 1973-30)
mark(record-32, to-31)
xcomp(soared-28, record-32)
dobj(record-32, levels-33)
cc(soared-28, and-34)
advcl(rained-22, rebounded-35)
conj:and(soared-28, rebounded-35)
advmod(rebounded-35, again-36)
case(1977-38, in-37)
nmod:in(rebounded-35, 1977-38)
punct(traders-14, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#profits

rain :: And , he says ominously , there is always the problem of what to do if the Army diverts water into the rivers and it starts to rain ./.
cc(says-4, And-1)
punct(says-4, ,-2)
nsubj(says-4, he-3)
root(ROOT-0, says-4)
advmod(is-8, ominously-5)
punct(is-8, ,-6)
expl(is-8, there-7)
ccomp(says-4, is-8)
advmod(is-8, always-9)
det(problem-11, the-10)
nsubj(is-8, problem-11)
mark(do-15, of-12)
nsubj(do-15, what-13)
mark(do-15, to-14)
acl(problem-11, do-15)
mark(diverts-19, if-16)
det(Army-18, the-17)
nsubj(diverts-19, Army-18)
advcl(do-15, diverts-19)
dobj(diverts-19, water-20)
case(rivers-23, into-21)
det(rivers-23, the-22)
nmod:into(diverts-19, rivers-23)
cc(diverts-19, and-24)
nsubj(starts-26, it-25)
advcl(do-15, starts-26)
conj:and(diverts-19, starts-26)
case(rain-28, to-27)
nmod:to(starts-26, rain-28)
punct(says-4, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

rain :: The recent Iraqi chemical attack on civilians in the town of Halabja combined with the Iraqi missiles raining on Iranian cities have left Tehranis petrified about possible Iraqi chemical attacks on Tehran ./.
det(attack-5, The-1)
amod(attack-5, recent-2)
amod(attack-5, Iraqi-3)
compound(attack-5, chemical-4)
nsubj(left-23, attack-5)
case(civilians-7, on-6)
nmod:on(attack-5, civilians-7)
case(town-10, in-8)
det(town-10, the-9)
nmod:in(civilians-7, town-10)
case(Halabja-12, of-11)
nmod:of(town-10, Halabja-12)
acl(town-10, combined-13)
case(missiles-17, with-14)
det(missiles-17, the-15)
amod(missiles-17, Iraqi-16)
nmod:with(combined-13, missiles-17)
acl(missiles-17, raining-18)
case(cities-21, on-19)
amod(cities-21, Iranian-20)
nmod:on(raining-18, cities-21)
aux(left-23, have-22)
root(ROOT-0, left-23)
nsubj(petrified-25, Tehranis-24)
xcomp(left-23, petrified-25)
case(attacks-30, about-26)
amod(attacks-30, possible-27)
amod(attacks-30, Iraqi-28)
compound(attacks-30, chemical-29)
nmod:about(petrified-25, attacks-30)
case(Tehran-32, on-31)
nmod:on(attacks-30, Tehran-32)
punct(left-23, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#cities

rain :: Beginning this week , says Steve Freed , an agricultural analyst for Dean Witter Reynolds in Chicago , the corn yield will drop 5 % for every week it rains less than normal ./.
ccomp(says-5, Beginning-1)
det(week-3, this-2)
nmod:tmod(Beginning-1, week-3)
punct(says-5, ,-4)
root(ROOT-0, says-5)
compound(Freed-7, Steve-6)
nsubj(says-5, Freed-7)
punct(Freed-7, ,-8)
det(analyst-11, an-9)
amod(analyst-11, agricultural-10)
appos(Freed-7, analyst-11)
case(Reynolds-15, for-12)
compound(Reynolds-15, Dean-13)
compound(Reynolds-15, Witter-14)
nmod:for(drop-23, Reynolds-15)
case(Chicago-17, in-16)
nmod:in(Reynolds-15, Chicago-17)
punct(Reynolds-15, ,-18)
det(yield-21, the-19)
compound(yield-21, corn-20)
nsubj(drop-23, yield-21)
aux(drop-23, will-22)
acl:relcl(analyst-11, drop-23)
nummod(%-25, 5-24)
dobj(drop-23, %-25)
case(week-28, for-26)
det(week-28, every-27)
nmod:for(drop-23, week-28)
nsubj(rains-30, it-29)
acl:relcl(week-28, rains-30)
advmod(rains-30, less-31)
case(normal-33, than-32)
advcl(less-31, normal-33)
punct(says-5, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: Grain and soybean futures prices plunged because it rained in Iowa ./.
compound(prices-5, Grain-1)
cc(Grain-1, and-2)
conj:and(Grain-1, soybean-3)
compound(prices-5, soybean-3)
compound(prices-5, futures-4)
nsubj(plunged-6, prices-5)
root(ROOT-0, plunged-6)
mark(rained-9, because-7)
nsubj(rained-9, it-8)
advcl(plunged-6, rained-9)
case(Iowa-11, in-10)
nmod:in(rained-9, Iowa-11)
punct(plunged-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: `` If it rains three inches , we 'd go down 30 cents , '' said Mickey Luth , a soybean analyst at Shearson Lehman Hutton , Chicago ./.
punct(go-10, ``-1)
mark(rains-4, If-2)
nsubj(rains-4, it-3)
advcl(go-10, rains-4)
nummod(inches-6, three-5)
dobj(rains-4, inches-6)
punct(go-10, ,-7)
nsubj(go-10, we-8)
aux(go-10, 'd-9)
dep(said-16, go-10)
advmod(go-10, down-11)
nummod(cents-13, 30-12)
nmod:npmod(down-11, cents-13)
punct(go-10, ,-14)
punct(go-10, ''-15)
root(ROOT-0, said-16)
compound(Luth-18, Mickey-17)
nsubj(said-16, Luth-18)
punct(Luth-18, ,-19)
det(analyst-22, a-20)
compound(analyst-22, soybean-21)
appos(Luth-18, analyst-22)
case(Hutton-26, at-23)
compound(Hutton-26, Shearson-24)
compound(Hutton-26, Lehman-25)
nmod:at(analyst-22, Hutton-26)
punct(Hutton-26, ,-27)
appos(Hutton-26, Chicago-28)
punct(said-16, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#inches

rain :: But in the 1960s , when both superpowers were building up ballistic missiles that could rain warheads down from space , the U.S. decided against sinking money into what would be only a partial defense ./.
cc(decided-24, But-1)
case(1960s-4, in-2)
det(1960s-4, the-3)
nmod:in(decided-24, 1960s-4)
punct(decided-24, ,-5)
advmod(building-10, when-6)
det(superpowers-8, both-7)
nsubj(building-10, superpowers-8)
aux(building-10, were-9)
advcl(decided-24, building-10)
compound:prt(building-10, up-11)
amod(missiles-13, ballistic-12)
dobj(building-10, missiles-13)
nsubj(rain-16, missiles-13)
ref(missiles-13, that-14)
aux(rain-16, could-15)
acl:relcl(missiles-13, rain-16)
dobj(rain-16, warheads-17)
advmod(rain-16, down-18)
case(space-20, from-19)
nmod:from(down-18, space-20)
punct(decided-24, ,-21)
det(U.S.-23, the-22)
nsubj(decided-24, U.S.-23)
root(ROOT-0, decided-24)
mark(sinking-26, against-25)
advcl(decided-24, sinking-26)
dobj(sinking-26, money-27)
mark(defense-35, into-28)
nsubj(defense-35, what-29)
aux(defense-35, would-30)
cop(defense-35, be-31)
advmod(defense-35, only-32)
det(defense-35, a-33)
amod(defense-35, partial-34)
advcl(sinking-26, defense-35)
punct(decided-24, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#warheads

rain :: For the midrange computer makers , `` there are thunder clouds on the horizon , and the question is how hard it 's going to rain , '' she said ./.
case(makers-5, For-1)
det(makers-5, the-2)
amod(makers-5, midrange-3)
compound(makers-5, computer-4)
nmod:for(are-9, makers-5)
punct(are-9, ,-6)
punct(are-9, ``-7)
expl(are-9, there-8)
ccomp(said-30, are-9)
compound(clouds-11, thunder-10)
nsubj(are-9, clouds-11)
case(horizon-14, on-12)
det(horizon-14, the-13)
nmod:on(clouds-11, horizon-14)
punct(are-9, ,-15)
cc(are-9, and-16)
det(question-18, the-17)
nsubj(is-19, question-18)
conj:and(are-9, is-19)
ccomp(said-30, is-19)
advmod(hard-21, how-20)
dep(going-24, hard-21)
nsubj(going-24, it-22)
aux(going-24, 's-23)
ccomp(is-19, going-24)
case(rain-26, to-25)
nmod:to(going-24, rain-26)
punct(said-30, ,-27)
punct(said-30, ''-28)
nsubj(said-30, she-29)
root(ROOT-0, said-30)
punct(said-30, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

rain :: `` The most harrowing time is when it rains , and this year it rained every single day except for two days in six weeks ./.
root(ROOT-0, ``-1)
det(time-5, The-2)
advmod(harrowing-4, most-3)
amod(time-5, harrowing-4)
nsubj(is-6, time-5)
root(``-1, is-6)
advmod(rains-9, when-7)
nsubj(rains-9, it-8)
advcl(is-6, rains-9)
punct(is-6, ,-10)
cc(is-6, and-11)
det(year-13, this-12)
nmod:tmod(rained-15, year-13)
nsubj(rained-15, it-14)
root(``-1, rained-15)
conj:and(is-6, rained-15)
det(day-18, every-16)
amod(day-18, single-17)
nmod:tmod(rained-15, day-18)
case(days-22, except-19)
mwe(except-19, for-20)
nummod(days-22, two-21)
nmod:except_for(rained-15, days-22)
case(weeks-25, in-23)
nummod(weeks-25, six-24)
nmod:in(days-22, weeks-25)
punct(is-6, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: Foul weather delayed the regatta , but it finally took place on Jan. 2: `` It rained during the first race , rained and hailed during the second , and snowed during the third , '' Mr. Taylor wrote ./.
amod(weather-2, Foul-1)
nsubj(delayed-3, weather-2)
ccomp(wrote-40, delayed-3)
det(regatta-5, the-4)
dobj(delayed-3, regatta-5)
punct(delayed-3, ,-6)
cc(delayed-3, but-7)
nsubj(took-10, it-8)
advmod(took-10, finally-9)
conj:but(delayed-3, took-10)
ccomp(wrote-40, took-10)
dobj(took-10, place-11)
case(Jan.-13, on-12)
nmod:on(took-10, Jan.-13)
nummod(Jan.-13, 2-14)
punct(took-10, :-15)
punct(took-10, ``-16)
nsubj(rained-18, It-17)
nsubj(rained-24, It-17)
nsubj(snowed-32, It-17)
xcomp(took-10, rained-18)
case(race-22, during-19)
det(race-22, the-20)
amod(race-22, first-21)
nmod:during(rained-18, race-22)
punct(rained-18, ,-23)
xcomp(took-10, rained-24)
conj:and(rained-18, rained-24)
cc(rained-24, and-25)
conj:and(rained-18, hailed-26)
conj:and(rained-24, hailed-26)
case(second-29, during-27)
det(second-29, the-28)
nmod:during(rained-24, second-29)
punct(rained-18, ,-30)
cc(rained-18, and-31)
xcomp(took-10, snowed-32)
conj:and(rained-18, snowed-32)
case(third-35, during-33)
det(third-35, the-34)
nmod:during(snowed-32, third-35)
punct(wrote-40, ,-36)
punct(wrote-40, ''-37)
compound(Taylor-39, Mr.-38)
nsubj(wrote-40, Taylor-39)
root(ROOT-0, wrote-40)
punct(wrote-40, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: Others are Absolut Bravo -LRB- the accompanying photograph shows red roses raining down around the Absolut bottle -RRB- and Absolut Stardom -LRB- the bottle is lighted as if it were a theater marquee -RRB- ./.
nsubj(Bravo-4, Others-1)
cop(Bravo-4, are-2)
compound(Bravo-4, Absolut-3)
root(ROOT-0, Bravo-4)
punct(shows-9, -LRB--5)
det(photograph-8, the-6)
amod(photograph-8, accompanying-7)
nsubj(shows-9, photograph-8)
dep(Bravo-4, shows-9)
amod(roses-11, red-10)
dobj(shows-9, roses-11)
acl(roses-11, raining-12)
compound:prt(raining-12, down-13)
case(bottle-17, around-14)
det(bottle-17, the-15)
compound(bottle-17, Absolut-16)
nmod:around(raining-12, bottle-17)
punct(shows-9, -RRB--18)
cc(Bravo-4, and-19)
compound(Stardom-21, Absolut-20)
conj:and(Bravo-4, Stardom-21)
punct(lighted-26, -LRB--22)
det(bottle-24, the-23)
nsubjpass(lighted-26, bottle-24)
auxpass(lighted-26, is-25)
dep(Stardom-21, lighted-26)
mark(marquee-33, as-27)
mwe(as-27, if-28)
nsubj(marquee-33, it-29)
cop(marquee-33, were-30)
det(marquee-33, a-31)
compound(marquee-33, theater-32)
advcl(lighted-26, marquee-33)
punct(lighted-26, -RRB--34)
punct(Bravo-4, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#bottle

rain :: It rained for the rest of the day and into the evening , canceling or carrying over all but five of the 64 scheduled contests ./.
nsubj(rained-2, It-1)
nsubj(rained-2', It-1)
root(ROOT-0, rained-2)
conj:and(rained-2, rained-2')
case(rest-5, for-3)
det(rest-5, the-4)
nmod:for(rained-2, rest-5)
case(day-8, of-6)
det(day-8, the-7)
nmod:of(rest-5, day-8)
cc(rained-2, and-9)
case(evening-12, into-10)
det(evening-12, the-11)
nmod:into(rained-2', evening-12)
punct(evening-12, ,-13)
acl(evening-12, canceling-14)
cc(canceling-14, or-15)
acl(evening-12, carrying-16)
conj:or(canceling-14, carrying-16)
case(all-18, over-17)
nmod:over(canceling-14, all-18)
cc(all-18, but-19)
nmod:over(canceling-14, five-20)
conj:but(all-18, five-20)
case(contests-25, of-21)
det(contests-25, the-22)
nummod(contests-25, 64-23)
amod(contests-25, scheduled-24)
nmod:of(all-18, contests-25)
punct(rained-2, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: For one thing , it started raining again in mid-July ./.
case(thing-3, For-1)
nummod(thing-3, one-2)
nmod:for(started-6, thing-3)
punct(started-6, ,-4)
nsubj(started-6, it-5)
root(ROOT-0, started-6)
xcomp(started-6, raining-7)
advmod(raining-7, again-8)
case(mid-July-10, in-9)
nmod:in(raining-7, mid-July-10)
punct(started-6, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#mid-july

rain :: `` I wish we did n't run to the government every time it does n't rain , '' says W.J . `` Dub '' Waldrip , of the huge Spade Ranches of Texas and New Mexico ./.
punct(says-19, ``-1)
nsubj(wish-3, I-2)
ccomp(says-19, wish-3)
nsubj(run-7, we-4)
aux(run-7, did-5)
neg(run-7, n't-6)
ccomp(wish-3, run-7)
case(government-10, to-8)
det(government-10, the-9)
nmod:to(run-7, government-10)
det(time-12, every-11)
nmod:tmod(run-7, time-12)
nsubj(rain-16, it-13)
aux(rain-16, does-14)
neg(rain-16, n't-15)
acl:relcl(time-12, rain-16)
punct(says-19, ,-17)
punct(says-19, ''-18)
root(ROOT-0, says-19)
nsubj(says-19, W.J-20)
punct(says-19, .-21)
punct(Waldrip-4, ``-1)
compound(Waldrip-4, Dub-2)
punct(Waldrip-4, ''-3)
root(ROOT-0, Waldrip-4)
punct(Waldrip-4, ,-5)
case(Ranches-10, of-6)
det(Ranches-10, the-7)
amod(Ranches-10, huge-8)
compound(Ranches-10, Spade-9)
nmod:of(Waldrip-4, Ranches-10)
case(Texas-12, of-11)
nmod:of(Ranches-10, Texas-12)
cc(Texas-12, and-13)
compound(Mexico-15, New-14)
nmod:of(Ranches-10, Mexico-15)
conj:and(Texas-12, Mexico-15)
punct(Waldrip-4, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: `` Back when I was his age , '' says oldtimer Mr. Van Cleve , pointing to a 13-year-old boy at his lunch table in Uvalde , `` I remember it rained once . ''/''
punct(pointing-16, ``-1)
advmod(pointing-16, Back-2)
advmod(age-7, when-3)
nsubj(age-7, I-4)
cop(age-7, was-5)
nmod:poss(age-7, his-6)
advcl(Back-2, age-7)
punct(says-10, ,-8)
punct(says-10, ''-9)
parataxis(pointing-16, says-10)
compound(Cleve-14, oldtimer-11)
compound(Cleve-14, Mr.-12)
compound(Cleve-14, Van-13)
nsubj(says-10, Cleve-14)
punct(says-10, ,-15)
root(ROOT-0, pointing-16)
case(boy-20, to-17)
det(boy-20, a-18)
amod(boy-20, 13-year-old-19)
nmod:to(pointing-16, boy-20)
case(table-24, at-21)
nmod:poss(table-24, his-22)
compound(table-24, lunch-23)
nmod:at(pointing-16, table-24)
case(Uvalde-26, in-25)
nmod:in(table-24, Uvalde-26)
punct(pointing-16, ,-27)
punct(pointing-16, ``-28)
nsubj(remember-30, I-29)
ccomp(pointing-16, remember-30)
nsubj(rained-32, it-31)
ccomp(remember-30, rained-32)
advmod(rained-32, once-33)
punct(pointing-16, .-34)
punct(pointing-16, ''-35)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: rain#it

rain :: `` I do n't think we could carry Iowa even if it rains every day , '' says Washington GOP consultant Eddie Mahe , who stayed out of the GOP nomination contest but will work for Mr. Bush this fall ./.
punct(says-18, ``-1)
nsubj(think-5, I-2)
aux(think-5, do-3)
neg(think-5, n't-4)
ccomp(says-18, think-5)
nsubj(carry-8, we-6)
aux(carry-8, could-7)
ccomp(think-5, carry-8)
dobj(carry-8, Iowa-9)
advmod(rains-13, even-10)
mark(rains-13, if-11)
nsubj(rains-13, it-12)
advcl(carry-8, rains-13)
det(day-15, every-14)
nmod:tmod(rains-13, day-15)
punct(says-18, ,-16)
punct(says-18, ''-17)
root(ROOT-0, says-18)
compound(Mahe-23, Washington-19)
compound(Mahe-23, GOP-20)
compound(Mahe-23, consultant-21)
compound(Mahe-23, Eddie-22)
nsubj(says-18, Mahe-23)
nsubj(stayed-26, Mahe-23)
nsubj(work-35, Mahe-23)
punct(Mahe-23, ,-24)
ref(Mahe-23, who-25)
acl:relcl(Mahe-23, stayed-26)
case(contest-32, out-27)
mwe(out-27, of-28)
det(contest-32, the-29)
compound(contest-32, GOP-30)
compound(contest-32, nomination-31)
nmod:out_of(stayed-26, contest-32)
cc(stayed-26, but-33)
aux(work-35, will-34)
acl:relcl(Mahe-23, work-35)
conj:but(stayed-26, work-35)
case(Bush-38, for-36)
compound(Bush-38, Mr.-37)
nmod:for(work-35, Bush-38)
det(fall-40, this-39)
nmod:tmod(work-35, fall-40)
punct(says-18, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: The dual rallies were touched off by falling commodity prices , which came in reaction to rain in the parched Farm Belt ./.
det(rallies-3, The-1)
amod(rallies-3, dual-2)
nsubjpass(touched-5, rallies-3)
auxpass(touched-5, were-4)
root(ROOT-0, touched-5)
compound:prt(touched-5, off-6)
case(prices-10, by-7)
amod(prices-10, falling-8)
compound(prices-10, commodity-9)
nmod:agent(touched-5, prices-10)
nsubj(came-13, prices-10)
punct(prices-10, ,-11)
ref(prices-10, which-12)
acl:relcl(prices-10, came-13)
case(reaction-15, in-14)
nmod:in(came-13, reaction-15)
case(rain-17, to-16)
nmod:to(reaction-15, rain-17)
case(Belt-22, in-18)
det(Belt-22, the-19)
amod(Belt-22, parched-20)
compound(Belt-22, Farm-21)
nmod:in(rain-17, Belt-22)
punct(touched-5, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#belt

rain :: It rained hard Saturday night along the Gulf Coast , and on Sunday morning the infield at McKechnie Field here was so wet that grounds crewmen were using plastic bottles to scoop up the standing water ./.
nsubj(rained-2, It-1)
root(ROOT-0, rained-2)
advmod(rained-2, hard-3)
compound(night-5, Saturday-4)
nmod:tmod(rained-2, night-5)
case(Coast-9, along-6)
det(Coast-9, the-7)
compound(Coast-9, Gulf-8)
nmod:along(rained-2, Coast-9)
punct(rained-2, ,-10)
cc(rained-2, and-11)
case(morning-14, on-12)
compound(morning-14, Sunday-13)
nmod:on(wet-23, morning-14)
det(infield-16, the-15)
nsubj(wet-23, infield-16)
case(Field-19, at-17)
compound(Field-19, McKechnie-18)
nmod:at(infield-16, Field-19)
advmod(infield-16, here-20)
cop(wet-23, was-21)
advmod(wet-23, so-22)
conj:and(rained-2, wet-23)
mark(using-28, that-24)
compound(crewmen-26, grounds-25)
nsubj(using-28, crewmen-26)
aux(using-28, were-27)
ccomp(wet-23, using-28)
amod(bottles-30, plastic-29)
dobj(using-28, bottles-30)
mark(scoop-32, to-31)
advcl(using-28, scoop-32)
compound:prt(scoop-32, up-33)
det(water-36, the-34)
compound(water-36, standing-35)
dobj(scoop-32, water-36)
punct(rained-2, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rain :: It rained hard Saturday night along the Gulf Coast , and on Sunday morning the infield at McKechnie Field here was so wet that grounds crewmen were using plastic bottles to scoop up the standing water ./.
nsubj(rained-2, It-1)
root(ROOT-0, rained-2)
advmod(rained-2, hard-3)
compound(night-5, Saturday-4)
nmod:tmod(rained-2, night-5)
case(Coast-9, along-6)
det(Coast-9, the-7)
compound(Coast-9, Gulf-8)
nmod:along(rained-2, Coast-9)
punct(rained-2, ,-10)
cc(rained-2, and-11)
case(morning-14, on-12)
compound(morning-14, Sunday-13)
nmod:on(wet-23, morning-14)
det(infield-16, the-15)
nsubj(wet-23, infield-16)
case(Field-19, at-17)
compound(Field-19, McKechnie-18)
nmod:at(infield-16, Field-19)
advmod(infield-16, here-20)
cop(wet-23, was-21)
advmod(wet-23, so-22)
conj:and(rained-2, wet-23)
mark(using-28, that-24)
compound(crewmen-26, grounds-25)
nsubj(using-28, crewmen-26)
aux(using-28, were-27)
ccomp(wet-23, using-28)
amod(bottles-30, plastic-29)
dobj(using-28, bottles-30)
mark(scoop-32, to-31)
advcl(using-28, scoop-32)
compound:prt(scoop-32, up-33)
det(water-36, the-34)
compound(water-36, standing-35)
dobj(scoop-32, water-36)
punct(rained-2, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rain#it

rest :: But while contacts between the two sides continued , no talks occurred over the weekend , as senior officials of both groups rested after two weeks of grueling work ./.
cc(occurred-12, But-1)
mark(continued-8, while-2)
nsubj(continued-8, contacts-3)
case(sides-7, between-4)
det(sides-7, the-5)
nummod(sides-7, two-6)
nmod:between(contacts-3, sides-7)
advcl(occurred-12, continued-8)
punct(occurred-12, ,-9)
neg(talks-11, no-10)
nsubj(occurred-12, talks-11)
root(ROOT-0, occurred-12)
case(weekend-15, over-13)
det(weekend-15, the-14)
nmod:over(occurred-12, weekend-15)
punct(occurred-12, ,-16)
mark(rested-23, as-17)
amod(officials-19, senior-18)
nsubj(rested-23, officials-19)
case(groups-22, of-20)
det(groups-22, both-21)
nmod:of(officials-19, groups-22)
advcl(occurred-12, rested-23)
case(weeks-26, after-24)
nummod(weeks-26, two-25)
nmod:after(rested-23, weeks-26)
case(work-29, of-27)
amod(work-29, grueling-28)
nmod:of(weeks-26, work-29)
punct(occurred-12, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#officials

rest :: He said he hoped the new exam would help put to rest recurring charges by teacher unions and others that existing teacher tests do n't accurately assess classroom skills and are unfair to minorities ./.
nsubj(said-2, He-1)
root(ROOT-0, said-2)
nsubj(hoped-4, he-3)
ccomp(said-2, hoped-4)
det(exam-7, the-5)
amod(exam-7, new-6)
nsubj(help-9, exam-7)
aux(help-9, would-8)
ccomp(hoped-4, help-9)
ccomp(help-9, put-10)
mark(rest-12, to-11)
xcomp(put-10, rest-12)
amod(charges-14, recurring-13)
dobj(rest-12, charges-14)
case(unions-17, by-15)
compound(unions-17, teacher-16)
nmod:by(charges-14, unions-17)
cc(unions-17, and-18)
nmod:by(charges-14, others-19)
conj:and(unions-17, others-19)
mark(assess-27, that-20)
amod(tests-23, existing-21)
compound(tests-23, teacher-22)
nsubj(assess-27, tests-23)
nsubj(unfair-32, tests-23)
aux(assess-27, do-24)
neg(assess-27, n't-25)
advmod(assess-27, accurately-26)
dep(charges-14, assess-27)
compound(skills-29, classroom-28)
dobj(assess-27, skills-29)
cc(assess-27, and-30)
cop(unfair-32, are-31)
dep(charges-14, unfair-32)
conj:and(assess-27, unfair-32)
case(minorities-34, to-33)
nmod:to(unfair-32, minorities-34)
punct(said-2, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#charges

rest :: American technological prowess often lies in small companies such as Fusion that focus on narrow niche markets ; Japan 's technological might rests in mammoth conglomerates like Mitsubishi that want to do everything and have the deep pockets to do it ./.
compound(prowess-3, American-1)
amod(prowess-3, technological-2)
nsubj(lies-5, prowess-3)
advmod(lies-5, often-4)
root(ROOT-0, lies-5)
case(companies-8, in-6)
amod(companies-8, small-7)
nmod:in(lies-5, companies-8)
nsubj(focus-13, companies-8)
case(Fusion-11, such-9)
mwe(such-9, as-10)
nmod:such_as(companies-8, Fusion-11)
ref(companies-8, that-12)
acl:relcl(companies-8, focus-13)
case(markets-17, on-14)
amod(markets-17, narrow-15)
compound(markets-17, niche-16)
nmod:on(focus-13, markets-17)
punct(companies-8, ;-18)
nmod:poss(technological-21, Japan-19)
case(Japan-19, 's-20)
nsubj(rests-23, technological-21)
nsubj(have-35, technological-21)
aux(rests-23, might-22)
dep(companies-8, rests-23)
case(conglomerates-26, in-24)
amod(conglomerates-26, mammoth-25)
nmod:in(rests-23, conglomerates-26)
nsubj(want-30, conglomerates-26)
nsubj:xsubj(do-32, conglomerates-26)
case(Mitsubishi-28, like-27)
nmod:like(conglomerates-26, Mitsubishi-28)
ref(conglomerates-26, that-29)
acl:relcl(conglomerates-26, want-30)
mark(do-32, to-31)
xcomp(want-30, do-32)
dobj(do-32, everything-33)
cc(rests-23, and-34)
dep(companies-8, have-35)
conj:and(rests-23, have-35)
det(pockets-38, the-36)
amod(pockets-38, deep-37)
dobj(have-35, pockets-38)
mark(do-40, to-39)
acl(pockets-38, do-40)
dobj(do-40, it-41)
punct(lies-5, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#technological

rest :: Efforts to improve on-board bedding are aimed not at passengers but at pilots and cabin staff , who are supposed to get a chance to rest after working a certain number of hours ./.
nsubjpass(aimed-7, Efforts-1)
nsubjpass(aimed-7', Efforts-1)
mark(improve-3, to-2)
acl(Efforts-1, improve-3)
amod(bedding-5, on-board-4)
dobj(improve-3, bedding-5)
auxpass(aimed-7, are-6)
root(ROOT-0, aimed-7)
conj:but(aimed-7, aimed-7')
neg(passengers-10, not-8)
case(passengers-10, at-9)
nmod:at(aimed-7, passengers-10)
cc(aimed-7, but-11)
case(pilots-13, at-12)
nmod:at(aimed-7', pilots-13)
nsubjpass(supposed-20, pilots-13)
nsubj:xsubj(get-22, pilots-13)
cc(pilots-13, and-14)
compound(staff-16, cabin-15)
nmod:at(aimed-7', staff-16)
conj:and(pilots-13, staff-16)
nsubjpass(supposed-20, staff-16)
nsubj:xsubj(get-22, staff-16)
punct(pilots-13, ,-17)
ref(pilots-13, who-18)
auxpass(supposed-20, are-19)
acl:relcl(pilots-13, supposed-20)
mark(get-22, to-21)
xcomp(supposed-20, get-22)
det(chance-24, a-23)
dobj(get-22, chance-24)
mark(rest-26, to-25)
acl(chance-24, rest-26)
mark(working-28, after-27)
advcl(rest-26, working-28)
det(number-31, a-29)
amod(number-31, certain-30)
dobj(working-28, number-31)
case(hours-33, of-32)
nmod:of(number-31, hours-33)
punct(aimed-7, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

rest :: The last Polish leader who recognized Solidarity , Edward Gierek , lost his job in the process ; Gen. Jaruzelski has rested his political base on a refusal to do the same ./.
det(leader-4, The-1)
amod(leader-4, last-2)
amod(leader-4, Polish-3)
nsubj(recognized-6, leader-4)
nsubj(lost-12, leader-4)
ref(leader-4, who-5)
acl:relcl(leader-4, recognized-6)
dobj(recognized-6, Solidarity-7)
punct(Solidarity-7, ,-8)
compound(Gierek-10, Edward-9)
appos(Solidarity-7, Gierek-10)
punct(Solidarity-7, ,-11)
root(ROOT-0, lost-12)
nmod:poss(job-14, his-13)
dobj(lost-12, job-14)
case(process-17, in-15)
det(process-17, the-16)
nmod:in(lost-12, process-17)
punct(lost-12, ;-18)
compound(Jaruzelski-20, Gen.-19)
nsubj(rested-22, Jaruzelski-20)
aux(rested-22, has-21)
parataxis(lost-12, rested-22)
nmod:poss(base-25, his-23)
amod(base-25, political-24)
dobj(rested-22, base-25)
case(refusal-28, on-26)
det(refusal-28, a-27)
nmod:on(base-25, refusal-28)
mark(do-30, to-29)
acl(refusal-28, do-30)
det(same-32, the-31)
dobj(do-30, same-32)
punct(lost-12, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#base

rest :: `` We ca n't seem to put this issue to rest , '' says C.A. Pei , who is I.M. Pei 's son and a senior associate with New York-based I.M. Pei & Partners ./.
punct(says-14, ``-1)
nsubj(seem-5, We-2)
nsubj:xsubj(put-7, We-2)
aux(seem-5, ca-3)
neg(seem-5, n't-4)
ccomp(says-14, seem-5)
mark(put-7, to-6)
xcomp(seem-5, put-7)
det(issue-9, this-8)
dobj(put-7, issue-9)
mark(rest-11, to-10)
advcl(put-7, rest-11)
punct(says-14, ,-12)
punct(says-14, ''-13)
root(ROOT-0, says-14)
compound(Pei-16, C.A.-15)
nsubj(says-14, Pei-16)
nsubj(son-23, Pei-16)
punct(Pei-16, ,-17)
ref(Pei-16, who-18)
cop(son-23, is-19)
compound(Pei-21, I.M.-20)
nmod:poss(son-23, Pei-21)
case(Pei-21, 's-22)
acl:relcl(Pei-16, son-23)
cc(son-23, and-24)
det(associate-27, a-25)
amod(associate-27, senior-26)
acl:relcl(Pei-16, associate-27)
conj:and(son-23, associate-27)
case(Pei-32, with-28)
amod(York-based-30, New-29)
amod(Pei-32, York-based-30)
compound(Pei-32, I.M.-31)
nmod:with(associate-27, Pei-32)
cc(Pei-32, &-33)
nmod:with(associate-27, Partners-34)
conj:&(Pei-32, Partners-34)
punct(says-14, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

rest :: `` We 've already had a concerted tightening of credit by central banks around the world , so my guess is the Fed rests here and maybe {does nothing different} until the {presidential} election in November , '' Mr. Gross added ./.
punct(added-45, ``-1)
nsubj(had-5, We-2)
aux(had-5, 've-3)
advmod(had-5, already-4)
ccomp(added-45, had-5)
det(tightening-8, a-6)
amod(tightening-8, concerted-7)
dobj(had-5, tightening-8)
case(credit-10, of-9)
nmod:of(tightening-8, credit-10)
case(banks-13, by-11)
amod(banks-13, central-12)
nmod:by(had-5, banks-13)
case(world-16, around-14)
det(world-16, the-15)
nmod:around(banks-13, world-16)
punct(had-5, ,-17)
advmod(Fed-23, so-18)
nmod:poss(guess-20, my-19)
nsubj(Fed-23, guess-20)
cop(Fed-23, is-21)
det(Fed-23, the-22)
nsubj(rests-24, Fed-23)
ccomp(had-5, rests-24)
advmod(rests-24, here-25)
cc(rests-24, and-26)
ccomp(had-5, maybe-27)
conj:and(rests-24, maybe-27)
punct(does-29, -LCB--28)
dep(maybe-27, does-29)
dobj(does-29, nothing-30)
amod(nothing-30, different-31)
punct(does-29, -RCB--32)
case(election-38, until-33)
det(election-38, the-34)
punct(election-38, -LCB--35)
amod(election-38, presidential-36)
punct(election-38, -RCB--37)
nmod:until(maybe-27, election-38)
case(November-40, in-39)
nmod:in(election-38, November-40)
punct(added-45, ,-41)
punct(added-45, ''-42)
compound(Gross-44, Mr.-43)
nsubj(added-45, Gross-44)
root(ROOT-0, added-45)
punct(added-45, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#fed

rest :: A merger , though , would lay the matter to rest ./.
det(merger-2, A-1)
nsubj(lay-7, merger-2)
punct(lay-7, ,-3)
advmod(lay-7, though-4)
punct(lay-7, ,-5)
aux(lay-7, would-6)
root(ROOT-0, lay-7)
det(matter-9, the-8)
dobj(lay-7, matter-9)
mark(rest-11, to-10)
advcl(lay-7, rest-11)
punct(lay-7, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

rest :: Real power still rests with Pretoria just as it does with Jerusalem ./.
amod(power-2, Real-1)
nsubj(rests-4, power-2)
advmod(rests-4, still-3)
root(ROOT-0, rests-4)
case(Pretoria-6, with-5)
nmod:with(rests-4, Pretoria-6)
advmod(does-10, just-7)
mark(does-10, as-8)
nsubj(does-10, it-9)
advcl(rests-4, does-10)
case(Jerusalem-12, with-11)
nmod:with(does-10, Jerusalem-12)
punct(rests-4, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#power

rest :: Next to it rests a wooden face carving he found in a nearby cemetery ./.
dep(rests-4, Next-1)
mark(rests-4, to-2)
nsubj(rests-4, it-3)
root(ROOT-0, rests-4)
det(face-7, a-5)
amod(face-7, wooden-6)
dobj(rests-4, face-7)
acl(face-7, carving-8)
nsubj(found-10, he-9)
ccomp(carving-8, found-10)
case(cemetery-14, in-11)
det(cemetery-14, a-12)
amod(cemetery-14, nearby-13)
nmod:in(found-10, cemetery-14)
punct(rests-4, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#face

rest :: Mostly , though , her technique rests on a meticulous sifting of every shred of testimony , searching for inconsistencies that may buy her client a better verdict ./.
advmod(rests-7, Mostly-1)
punct(rests-7, ,-2)
advmod(rests-7, though-3)
punct(rests-7, ,-4)
nmod:poss(technique-6, her-5)
nsubj(rests-7, technique-6)
root(ROOT-0, rests-7)
case(sifting-11, on-8)
det(sifting-11, a-9)
amod(sifting-11, meticulous-10)
nmod:on(rests-7, sifting-11)
case(shred-14, of-12)
det(shred-14, every-13)
nmod:of(sifting-11, shred-14)
case(testimony-16, of-15)
nmod:of(shred-14, testimony-16)
punct(rests-7, ,-17)
advcl(rests-7, searching-18)
case(inconsistencies-20, for-19)
nmod:for(searching-18, inconsistencies-20)
nsubj(buy-23, inconsistencies-20)
ref(inconsistencies-20, that-21)
aux(buy-23, may-22)
acl:relcl(inconsistencies-20, buy-23)
nmod:poss(client-25, her-24)
dobj(buy-23, client-25)
det(verdict-28, a-26)
amod(verdict-28, better-27)
dobj(buy-23, verdict-28)
punct(rests-7, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#technique

rest :: Thus , a first milestone has been reached on the road to rebuilding an international monetary order , though it rests on the will and ability of governments to impose self-discipline ./.
advmod(reached-8, Thus-1)
punct(reached-8, ,-2)
det(milestone-5, a-3)
amod(milestone-5, first-4)
nsubjpass(reached-8, milestone-5)
nsubj:xsubj(rebuilding-13, milestone-5)
aux(reached-8, has-6)
auxpass(reached-8, been-7)
root(ROOT-0, reached-8)
case(road-11, on-9)
det(road-11, the-10)
nmod:on(reached-8, road-11)
mark(rebuilding-13, to-12)
xcomp(reached-8, rebuilding-13)
det(order-17, an-14)
amod(order-17, international-15)
amod(order-17, monetary-16)
dobj(rebuilding-13, order-17)
punct(reached-8, ,-18)
mark(rests-21, though-19)
nsubj(rests-21, it-20)
nsubj:xsubj(impose-30, it-20)
advcl(reached-8, rests-21)
case(will-24, on-22)
det(will-24, the-23)
nmod:on(rests-21, will-24)
cc(will-24, and-25)
nmod:on(rests-21, ability-26)
conj:and(will-24, ability-26)
case(governments-28, of-27)
nmod:of(will-24, governments-28)
mark(impose-30, to-29)
xcomp(rests-21, impose-30)
dobj(impose-30, self-discipline-31)
punct(reached-8, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#it

rest :: But Norman Augustine , Martin Marietta 's vice chairman and chief executive officer , is n't pulling out the cigars and resting on his laurels ./.
cc(pulling-17, But-1)
compound(Augustine-3, Norman-2)
nsubj(pulling-17, Augustine-3)
nsubj(resting-22, Augustine-3)
punct(Augustine-3, ,-4)
compound(Marietta-6, Martin-5)
nmod:poss(chairman-9, Marietta-6)
case(Marietta-6, 's-7)
compound(chairman-9, vice-8)
appos(Augustine-3, chairman-9)
cc(chairman-9, and-10)
amod(officer-13, chief-11)
compound(officer-13, executive-12)
appos(Augustine-3, officer-13)
conj:and(chairman-9, officer-13)
punct(Augustine-3, ,-14)
aux(pulling-17, is-15)
neg(pulling-17, n't-16)
root(ROOT-0, pulling-17)
compound:prt(pulling-17, out-18)
det(cigars-20, the-19)
dobj(pulling-17, cigars-20)
cc(pulling-17, and-21)
conj:and(pulling-17, resting-22)
case(laurels-25, on-23)
nmod:poss(laurels-25, his-24)
nmod:on(resting-22, laurels-25)
punct(pulling-17, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#augustine

rest :: In that first expedition and in a follow-up a year later , he and his scientific crew shot thousands of still photos and made hours of videotape of the Titanic 's final resting place ./.
case(expedition-4, In-1)
det(expedition-4, that-2)
amod(expedition-4, first-3)
root(ROOT-0, expedition-4)
cc(expedition-4, and-5)
case(follow-up-8, in-6)
det(follow-up-8, a-7)
conj:and(expedition-4, follow-up-8)
det(year-10, a-9)
nmod:npmod(later-11, year-10)
advmod(follow-up-8, later-11)
punct(expedition-4, ,-12)
root(,-12, he-13)
cc(he-13, and-14)
nmod:poss(thousands-19, his-15)
amod(thousands-19, scientific-16)
compound(thousands-19, crew-17)
compound(thousands-19, shot-18)
root(,-12, thousands-19)
conj:and(he-13, thousands-19)
case(photos-22, of-20)
advmod(photos-22, still-21)
nmod:of(thousands-19, photos-22)
cc(he-13, and-23)
root(,-12, made-24)
conj:and(he-13, made-24)
dobj(made-24, hours-25)
case(videotape-27, of-26)
nmod:of(hours-25, videotape-27)
case(place-34, of-28)
det(Titanic-30, the-29)
nmod:poss(place-34, Titanic-30)
case(Titanic-30, 's-31)
amod(place-34, final-32)
amod(place-34, resting-33)
nmod:of(videotape-27, place-34)
punct(he-13, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#place

rest :: Then Mr. Jenninger warned against forgetting: `` Our past will not rest . . . ./.
advmod(warned-4, Then-1)
compound(Jenninger-3, Mr.-2)
nsubj(warned-4, Jenninger-3)
root(ROOT-0, warned-4)
mark(forgetting-6, against-5)
advcl(warned-4, forgetting-6)
punct(forgetting-6, :-7)
punct(forgetting-6, ``-8)
nmod:poss(past-10, Our-9)
nsubj(rest-13, past-10)
aux(rest-13, will-11)
neg(rest-13, not-12)
dep(forgetting-6, rest-13)
punct(rest-13, ...-14)
punct(rest-13, /-15)
punct(warned-4, .-16)
Return str :: rest#past

rest :: It is time these escapist myths are put to rest ./.
nsubj(time-3, It-1)
cop(time-3, is-2)
root(ROOT-0, time-3)
det(myths-6, these-4)
amod(myths-6, escapist-5)
nsubjpass(put-8, myths-6)
nsubj:xsubj(rest-10, myths-6)
auxpass(put-8, are-7)
acl:relcl(time-3, put-8)
mark(rest-10, to-9)
xcomp(put-8, rest-10)
punct(time-3, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#myths

rest :: That mandate , like Mr. Brown 's , will rest on gerrymander , dominance over political money , and liberalism cloaked in conservative rhetoric ./.
det(mandate-2, That-1)
nsubj(rest-10, mandate-2)
punct(mandate-2, ,-3)
case(Brown-6, like-4)
compound(Brown-6, Mr.-5)
nmod:'s(mandate-2, Brown-6)
case(Brown-6, 's-7)
punct(mandate-2, ,-8)
aux(rest-10, will-9)
root(ROOT-0, rest-10)
case(gerrymander-12, on-11)
nmod:on(rest-10, gerrymander-12)
punct(gerrymander-12, ,-13)
nmod:on(rest-10, dominance-14)
conj:and(gerrymander-12, dominance-14)
case(money-17, over-15)
amod(money-17, political-16)
nmod:over(dominance-14, money-17)
punct(gerrymander-12, ,-18)
cc(gerrymander-12, and-19)
nmod:on(rest-10, liberalism-20)
conj:and(gerrymander-12, liberalism-20)
acl(liberalism-20, cloaked-21)
case(rhetoric-24, in-22)
amod(rhetoric-24, conservative-23)
nmod:in(cloaked-21, rhetoric-24)
punct(rest-10, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#mandate

rest :: The consultant explained that Mobil has positioned itself to appeal to more upscale consumers , while the Sohio market rests heavily on middle-class buyers ./.
det(consultant-2, The-1)
nsubj(explained-3, consultant-2)
root(ROOT-0, explained-3)
mark(positioned-7, that-4)
nsubj(positioned-7, Mobil-5)
aux(positioned-7, has-6)
ccomp(explained-3, positioned-7)
dobj(positioned-7, itself-8)
mark(appeal-10, to-9)
advcl(positioned-7, appeal-10)
case(consumers-14, to-11)
amod(consumers-14, more-12)
amod(consumers-14, upscale-13)
nmod:to(appeal-10, consumers-14)
punct(positioned-7, ,-15)
mark(rests-20, while-16)
det(market-19, the-17)
compound(market-19, Sohio-18)
nsubj(rests-20, market-19)
advcl(positioned-7, rests-20)
advmod(rests-20, heavily-21)
case(buyers-24, on-22)
compound(buyers-24, middle-class-23)
nmod:on(rests-20, buyers-24)
punct(explained-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#market

rest :: Much of this argument rests on definitions of control and influence ./.
nsubj(rests-5, Much-1)
case(argument-4, of-2)
det(argument-4, this-3)
nmod:of(Much-1, argument-4)
root(ROOT-0, rests-5)
case(definitions-7, on-6)
nmod:on(rests-5, definitions-7)
case(control-9, of-8)
nmod:of(definitions-7, control-9)
cc(control-9, and-10)
nmod:of(definitions-7, influence-11)
conj:and(control-9, influence-11)
punct(rests-5, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#much

rest :: `` Dukakis 's fate now rests as much in Bush 's hands as his own , '' Mr. Hickman believes ./.
punct(believes-20, ``-1)
nmod:poss(fate-4, Dukakis-2)
case(Dukakis-2, 's-3)
nsubj(rests-6, fate-4)
advmod(rests-6, now-5)
ccomp(believes-20, rests-6)
advmod(much-8, as-7)
dobj(rests-6, much-8)
case(hands-12, in-9)
nmod:poss(hands-12, Bush-10)
case(Bush-10, 's-11)
nmod:in(much-8, hands-12)
case(own-15, as-13)
nmod:poss(own-15, his-14)
nmod:as(much-8, own-15)
punct(believes-20, ,-16)
punct(believes-20, ''-17)
compound(Hickman-19, Mr.-18)
nsubj(believes-20, Hickman-19)
root(ROOT-0, believes-20)
punct(believes-20, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#much

rest :: Other democracies believe , as Americans have believed until recently , that free institutions rest on consent , not on coercion , and that coercion can not create belief ./.
amod(democracies-2, Other-1)
nsubj(believe-3, democracies-2)
root(ROOT-0, believe-3)
punct(believe-3, ,-4)
mark(believed-8, as-5)
nsubj(believed-8, Americans-6)
aux(believed-8, have-7)
advcl(believe-3, believed-8)
case(recently-10, until-9)
advcl(believed-8, recently-10)
punct(believed-8, ,-11)
mark(rest-15, that-12)
amod(institutions-14, free-13)
nsubj(rest-15, institutions-14)
ccomp(believed-8, rest-15)
case(consent-17, on-16)
nmod:on(rest-15, consent-17)
punct(rest-15, ,-18)
neg(coercion-21, not-19)
case(coercion-21, on-20)
nmod:on(rest-15, coercion-21)
punct(rest-15, ,-22)
cc(rest-15, and-23)
mark(create-28, that-24)
nsubj(create-28, coercion-25)
aux(create-28, can-26)
neg(create-28, not-27)
ccomp(believed-8, create-28)
conj:and(rest-15, create-28)
dobj(create-28, belief-29)
punct(believe-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#institutions

rest :: Aside from Ms. Hepburn 's painfully brilliant performance , the film 's fame rests on the sequence in which Alice and her parents try to impress her rich boyfriend -LRB- Fred MacMurray -RRB- with a fancy dinner in their hopelessly shabby home , served by a hopelessly indifferent cook hired for the evening -LRB- Hattie McDaniel -RRB- ./.
case(performance-8, Aside-1)
mwe(Aside-1, from-2)
compound(Hepburn-4, Ms.-3)
nmod:poss(performance-8, Hepburn-4)
case(Hepburn-4, 's-5)
advmod(brilliant-7, painfully-6)
amod(performance-8, brilliant-7)
nmod:aside_from(rests-14, performance-8)
punct(rests-14, ,-9)
det(film-11, the-10)
nmod:poss(fame-13, film-11)
case(film-11, 's-12)
nsubj(rests-14, fame-13)
root(ROOT-0, rests-14)
case(sequence-17, on-15)
det(sequence-17, the-16)
nmod:on(rests-14, sequence-17)
nmod:in(try-24, sequence-17)
case(which-19, in-18)
ref(sequence-17, which-19)
nsubj(try-24, Alice-20)
nsubj:xsubj(impress-26, Alice-20)
cc(Alice-20, and-21)
nmod:poss(parents-23, her-22)
conj:and(Alice-20, parents-23)
nsubj(try-24, parents-23)
nsubj:xsubj(impress-26, parents-23)
acl:relcl(sequence-17, try-24)
mark(impress-26, to-25)
xcomp(try-24, impress-26)
nmod:poss(boyfriend-29, her-27)
amod(boyfriend-29, rich-28)
dobj(impress-26, boyfriend-29)
punct(MacMurray-32, -LRB--30)
compound(MacMurray-32, Fred-31)
appos(boyfriend-29, MacMurray-32)
punct(MacMurray-32, -RRB--33)
case(dinner-37, with-34)
det(dinner-37, a-35)
amod(dinner-37, fancy-36)
nmod:with(impress-26, dinner-37)
case(home-42, in-38)
nmod:poss(home-42, their-39)
advmod(shabby-41, hopelessly-40)
amod(home-42, shabby-41)
nmod:in(dinner-37, home-42)
punct(rests-14, ,-43)
dep(rests-14, served-44)
case(cook-49, by-45)
det(cook-49, a-46)
advmod(indifferent-48, hopelessly-47)
amod(cook-49, indifferent-48)
nmod:by(served-44, cook-49)
dep(served-44, hired-50)
case(evening-53, for-51)
det(evening-53, the-52)
nmod:for(hired-50, evening-53)
punct(McDaniel-56, -LRB--54)
compound(McDaniel-56, Hattie-55)
appos(evening-53, McDaniel-56)
punct(McDaniel-56, -RRB--57)
punct(rests-14, .-58)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#fame

rest :: `` Sure there 's clutter , but I find it easy to ignore , '' says the film maker , his glasses resting , per usual , on his bald pate ./.
punct(says-16, ``-1)
ccomp(says-16, Sure-2)
expl('s-4, there-3)
ccomp(Sure-2, 's-4)
nsubj('s-4, clutter-5)
punct(Sure-2, ,-6)
cc(Sure-2, but-7)
nsubj(find-9, I-8)
conj:but(Sure-2, find-9)
ccomp(says-16, find-9)
nsubj(ignore-13, it-10)
dep(ignore-13, easy-11)
mark(ignore-13, to-12)
xcomp(find-9, ignore-13)
punct(says-16, ,-14)
punct(says-16, ''-15)
root(ROOT-0, says-16)
det(maker-19, the-17)
compound(maker-19, film-18)
nsubj(says-16, maker-19)
punct(maker-19, ,-20)
nmod:poss(glasses-22, his-21)
nsubj(resting-23, glasses-22)
acl:relcl(maker-19, resting-23)
punct(resting-23, ,-24)
case(usual-26, per-25)
advcl(resting-23, usual-26)
punct(resting-23, ,-27)
case(pate-31, on-28)
nmod:poss(pate-31, his-29)
amod(pate-31, bald-30)
nmod:on(resting-23, pate-31)
punct(says-16, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#glasses

rest :: In a reminder of nature 's fickleness , the eye of this year 's drought rests just a couple of hundred miles north of here , along the Red River Valley between Minnesota and North Dakota ./.
case(reminder-3, In-1)
det(reminder-3, a-2)
nmod:in(rests-16, reminder-3)
case(fickleness-7, of-4)
nmod:poss(fickleness-7, nature-5)
case(nature-5, 's-6)
nmod:of(reminder-3, fickleness-7)
punct(rests-16, ,-8)
det(eye-10, the-9)
nsubj(rests-16, eye-10)
case(drought-15, of-11)
det(year-13, this-12)
nmod:poss(drought-15, year-13)
case(year-13, 's-14)
nmod:of(eye-10, drought-15)
root(ROOT-0, rests-16)
advmod(couple-19, just-17)
det(couple-19, a-18)
dobj(rests-16, couple-19)
case(miles-22, of-20)
nummod(miles-22, hundred-21)
nmod:of(couple-19, miles-22)
advmod(couple-19, north-23)
case(here-25, of-24)
nmod:of(north-23, here-25)
punct(rests-16, ,-26)
case(Valley-31, along-27)
det(Valley-31, the-28)
compound(Valley-31, Red-29)
compound(Valley-31, River-30)
nmod:along(rests-16, Valley-31)
case(Minnesota-33, between-32)
nmod:between(Valley-31, Minnesota-33)
cc(Minnesota-33, and-34)
compound(Dakota-36, North-35)
nmod:between(Valley-31, Dakota-36)
conj:and(Minnesota-33, Dakota-36)
punct(rests-16, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#miles

rest :: `` We are very pleased to put this issue to rest , '' Mr. Fish said ./.
punct(said-16, ``-1)
nsubj(pleased-5, We-2)
nsubj:xsubj(put-7, We-2)
cop(pleased-5, are-3)
advmod(pleased-5, very-4)
ccomp(said-16, pleased-5)
mark(put-7, to-6)
xcomp(pleased-5, put-7)
det(issue-9, this-8)
dobj(put-7, issue-9)
mark(rest-11, to-10)
advcl(put-7, rest-11)
punct(said-16, ,-12)
punct(said-16, ''-13)
compound(Fish-15, Mr.-14)
nsubj(said-16, Fish-15)
root(ROOT-0, said-16)
punct(said-16, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

rest :: By the time he was laid to rest in a solemn procession of 100 garbage trucks , a frenzied struggle for control of his empire was under way ./.
case(time-3, By-1)
det(time-3, the-2)
nmod:agent(laid-6, time-3)
nsubjpass(laid-6, he-4)
nsubj:xsubj(rest-8, he-4)
auxpass(laid-6, was-5)
csubj(way-28, laid-6)
mark(rest-8, to-7)
xcomp(laid-6, rest-8)
case(procession-12, in-9)
det(procession-12, a-10)
amod(procession-12, solemn-11)
nmod:in(rest-8, procession-12)
case(trucks-16, of-13)
nummod(trucks-16, 100-14)
compound(trucks-16, garbage-15)
nmod:of(procession-12, trucks-16)
punct(trucks-16, ,-17)
det(struggle-20, a-18)
amod(struggle-20, frenzied-19)
appos(trucks-16, struggle-20)
case(control-22, for-21)
nmod:for(struggle-20, control-22)
case(empire-25, of-23)
nmod:poss(empire-25, his-24)
nmod:of(control-22, empire-25)
cop(way-28, was-26)
case(way-28, under-27)
root(ROOT-0, way-28)
punct(way-28, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#he

rest :: To be fair , the blame for the passage of the Byrd amendment does not rest entirely with the Democrats ./.
mark(fair-3, To-1)
cop(fair-3, be-2)
advcl(rest-16, fair-3)
punct(rest-16, ,-4)
det(blame-6, the-5)
nsubj(rest-16, blame-6)
case(passage-9, for-7)
det(passage-9, the-8)
nmod:for(blame-6, passage-9)
case(amendment-13, of-10)
det(amendment-13, the-11)
compound(amendment-13, Byrd-12)
nmod:of(passage-9, amendment-13)
aux(rest-16, does-14)
neg(rest-16, not-15)
root(ROOT-0, rest-16)
advmod(rest-16, entirely-17)
case(Democrats-20, with-18)
det(Democrats-20, the-19)
nmod:with(rest-16, Democrats-20)
punct(rest-16, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#blame

rest :: However , the final outcome of negotiations on these joint ventures rests largely on whether Texaco can fight off Mr. Icahn at the annual meeting ./.
advmod(rests-12, However-1)
punct(rests-12, ,-2)
det(outcome-5, the-3)
amod(outcome-5, final-4)
nsubj(rests-12, outcome-5)
case(negotiations-7, of-6)
nmod:of(outcome-5, negotiations-7)
case(ventures-11, on-8)
det(ventures-11, these-9)
amod(ventures-11, joint-10)
nmod:on(negotiations-7, ventures-11)
root(ROOT-0, rests-12)
advmod(rests-12, largely-13)
mark(fight-18, on-14)
mark(fight-18, whether-15)
nsubj(fight-18, Texaco-16)
aux(fight-18, can-17)
advcl(rests-12, fight-18)
compound:prt(fight-18, off-19)
compound(Icahn-21, Mr.-20)
dobj(fight-18, Icahn-21)
case(meeting-25, at-22)
det(meeting-25, the-23)
amod(meeting-25, annual-24)
nmod:at(fight-18, meeting-25)
punct(rests-12, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#outcome

rest :: Shares of the biotechnology firm reached a 52-week low at 25 1 8 Friday before coming to rest at 25 5 8 ./.
nsubj(reached-6, Shares-1)
case(firm-5, of-2)
det(firm-5, the-3)
compound(firm-5, biotechnology-4)
nmod:of(Shares-1, firm-5)
root(ROOT-0, reached-6)
det(low-9, a-7)
amod(low-9, 52-week-8)
dobj(reached-6, low-9)
case(8-13, at-10)
compound(8-13, 25-11)
compound(8-13, 1-12)
nmod:at(reached-6, 8-13)
nmod:tmod(reached-6, Friday-14)
mark(coming-16, before-15)
advcl(reached-6, coming-16)
mark(rest-18, to-17)
xcomp(coming-16, rest-18)
case(8-22, at-19)
compound(5-21, 25-20)
nummod(8-22, 5-21)
nmod:at(rest-18, 8-22)
punct(reached-6, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#8

rest :: And , like Mr. Bush , he rests his platform on often untested optimism ./.
cc(rests-8, And-1)
punct(rests-8, ,-2)
case(Bush-5, like-3)
compound(Bush-5, Mr.-4)
nmod:like(rests-8, Bush-5)
punct(rests-8, ,-6)
nsubj(rests-8, he-7)
root(ROOT-0, rests-8)
nmod:poss(platform-10, his-9)
dobj(rests-8, platform-10)
case(optimism-14, on-11)
advmod(untested-13, often-12)
amod(optimism-14, untested-13)
nmod:on(rests-8, optimism-14)
punct(rests-8, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#platform

rest :: Spain has begun restoring the Seville monastery where Christopher Columbus rested between sailings , and where he lay buried for a quarter century after he died , as part of an $ 800 million extravaganza to commemorate his discovery of America ./.
nsubj(begun-3, Spain-1)
aux(begun-3, has-2)
root(ROOT-0, begun-3)
xcomp(begun-3, restoring-4)
det(monastery-7, the-5)
compound(monastery-7, Seville-6)
dobj(restoring-4, monastery-7)
advmod(rested-11, where-8)
compound(Columbus-10, Christopher-9)
nsubj(rested-11, Columbus-10)
acl:relcl(monastery-7, rested-11)
case(sailings-13, between-12)
nmod:between(rested-11, sailings-13)
punct(begun-3, ,-14)
cc(begun-3, and-15)
advmod(lay-18, where-16)
nsubj(lay-18, he-17)
conj:and(begun-3, lay-18)
xcomp(lay-18, buried-19)
case(century-23, for-20)
det(century-23, a-21)
compound(century-23, quarter-22)
nmod:for(buried-19, century-23)
mark(died-26, after-24)
nsubj(died-26, he-25)
advcl(buried-19, died-26)
punct(buried-19, ,-27)
case(part-29, as-28)
nmod:as(buried-19, part-29)
case(extravaganza-35, of-30)
det(extravaganza-35, an-31)
amod(extravaganza-35, $-32)
compound(million-34, 800-33)
nummod($-32, million-34)
nmod:of(part-29, extravaganza-35)
mark(commemorate-37, to-36)
acl(extravaganza-35, commemorate-37)
nmod:poss(discovery-39, his-38)
dobj(commemorate-37, discovery-39)
case(America-41, of-40)
nmod:of(discovery-39, America-41)
punct(begun-3, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#columbus

rest :: The spokesman added that the `` final decision does rest with the board of directors . ''/''
det(spokesman-2, The-1)
nsubj(added-3, spokesman-2)
root(ROOT-0, added-3)
mark(rest-10, that-4)
det(decision-8, the-5)
punct(decision-8, ``-6)
amod(decision-8, final-7)
nsubj(rest-10, decision-8)
aux(rest-10, does-9)
ccomp(added-3, rest-10)
case(board-13, with-11)
det(board-13, the-12)
nmod:with(rest-10, board-13)
case(directors-15, of-14)
nmod:of(board-13, directors-15)
punct(added-3, .-16)
punct(added-3, ''-17)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: rest#decision

rest :: A group of history buffs in this border city is intent on seeing that Pancho Villa rests in peace rather than in pieces ./.
det(group-2, A-1)
nsubj(intent-11, group-2)
case(buffs-5, of-3)
compound(buffs-5, history-4)
nmod:of(group-2, buffs-5)
case(city-9, in-6)
det(city-9, this-7)
compound(city-9, border-8)
nmod:in(group-2, city-9)
cop(intent-11, is-10)
root(ROOT-0, intent-11)
mark(seeing-13, on-12)
advcl(intent-11, seeing-13)
mark(rests-17, that-14)
compound(Villa-16, Pancho-15)
nsubj(rests-17, Villa-16)
nsubj(rests-17', Villa-16)
ccomp(seeing-13, rests-17)
ccomp(seeing-13, rests-17')
conj:negcc(rests-17, rests-17')
case(peace-19, in-18)
nmod:in(rests-17, peace-19)
cc(rests-17, rather-20)
mwe(rather-20, than-21)
case(pieces-23, in-22)
nmod:in(rests-17', pieces-23)
punct(intent-11, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#villa

rest :: But the resolution probably rests more on politics than on flying skill and commercial expertise ./.
cc(rests-5, But-1)
det(resolution-3, the-2)
nsubj(rests-5, resolution-3)
advmod(rests-5, probably-4)
root(ROOT-0, rests-5)
dobj(rests-5, more-6)
case(politics-8, on-7)
nmod:on(more-6, politics-8)
case(skill-12, than-9)
case(skill-12, on-10)
amod(skill-12, flying-11)
nmod:on(more-6, skill-12)
cc(skill-12, and-13)
amod(expertise-15, commercial-14)
nmod:on(more-6, expertise-15)
conj:and(skill-12, expertise-15)
punct(rests-5, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#more

rest :: That 's not to say the taxpayers can rest easy ./.
nsubj(say-5, That-1)
cop(say-5, 's-2)
neg(say-5, not-3)
mark(say-5, to-4)
root(ROOT-0, say-5)
det(taxpayers-7, the-6)
nsubj(rest-9, taxpayers-7)
aux(rest-9, can-8)
ccomp(say-5, rest-9)
advmod(rest-9, easy-10)
punct(say-5, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#taxpayers

rest :: Mr. Lee said he proposed the committee `` as a simple way to put the matter quietly to rest . ''/''
compound(Lee-2, Mr.-1)
nsubj(said-3, Lee-2)
root(ROOT-0, said-3)
nsubj(proposed-5, he-4)
ccomp(said-3, proposed-5)
det(committee-7, the-6)
dobj(proposed-5, committee-7)
punct(way-12, ``-8)
case(way-12, as-9)
det(way-12, a-10)
amod(way-12, simple-11)
nmod:as(committee-7, way-12)
mark(put-14, to-13)
acl(way-12, put-14)
det(matter-16, the-15)
dobj(put-14, matter-16)
advmod(put-14, quietly-17)
mark(rest-19, to-18)
advcl(put-14, rest-19)
punct(said-3, .-20)
punct(said-3, ''-21)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

rest :: `` In the very short term , a lot rests on the behavior of Japanese purchasers of -LRB- Treasury -RRB- bonds , '' he notes ./.
punct(notes-25, ``-1)
case(term-6, In-2)
det(term-6, the-3)
advmod(short-5, very-4)
amod(term-6, short-5)
nmod:in(rests-10, term-6)
punct(rests-10, ,-7)
det(lot-9, a-8)
nsubj(rests-10, lot-9)
ccomp(notes-25, rests-10)
case(behavior-13, on-11)
det(behavior-13, the-12)
nmod:on(rests-10, behavior-13)
case(purchasers-16, of-14)
amod(purchasers-16, Japanese-15)
nmod:of(behavior-13, purchasers-16)
case(bonds-21, of-17)
punct(bonds-21, -LRB--18)
compound(bonds-21, Treasury-19)
punct(bonds-21, -RRB--20)
nmod:of(purchasers-16, bonds-21)
punct(notes-25, ,-22)
punct(notes-25, ''-23)
nsubj(notes-25, he-24)
root(ROOT-0, notes-25)
punct(notes-25, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#lot

rest :: At least Mr. Gay is honest enough , in this instance , to acknowledge that Freud 's entire `` psychoanalysis '' of Leonardo rested on the mistranslation of an Italian word into the German text that served as Freud 's source -- and that `` this gaffe , '' though first pointed out in 1923 , was `` never acknowledged by Freud . . . ''/''
case(least-2, At-1)
nmod:at(honest-6, least-2)
compound(Gay-4, Mr.-3)
nsubj(honest-6, Gay-4)
nsubj:xsubj(acknowledge-14, Gay-4)
cop(honest-6, is-5)
root(ROOT-0, honest-6)
advmod(honest-6, enough-7)
punct(honest-6, ,-8)
case(instance-11, in-9)
det(instance-11, this-10)
nmod:in(honest-6, instance-11)
punct(honest-6, ,-12)
mark(acknowledge-14, to-13)
xcomp(honest-6, acknowledge-14)
mark(rested-24, that-15)
nmod:poss(psychoanalysis-20, Freud-16)
case(Freud-16, 's-17)
amod(psychoanalysis-20, entire-18)
punct(psychoanalysis-20, ``-19)
nsubj(rested-24, psychoanalysis-20)
punct(psychoanalysis-20, ''-21)
case(Leonardo-23, of-22)
nmod:of(psychoanalysis-20, Leonardo-23)
ccomp(acknowledge-14, rested-24)
case(mistranslation-27, on-25)
det(mistranslation-27, the-26)
nmod:on(rested-24, mistranslation-27)
case(word-31, of-28)
det(word-31, an-29)
amod(word-31, Italian-30)
nmod:of(mistranslation-27, word-31)
nsubj(served-37, word-31)
case(text-35, into-32)
det(text-35, the-33)
amod(text-35, German-34)
nmod:into(word-31, text-35)
ref(word-31, that-36)
acl:relcl(word-31, served-37)
case(source-41, as-38)
nmod:poss(source-41, Freud-39)
case(Freud-39, 's-40)
nmod:as(served-37, source-41)
punct(rested-24, ---42)
cc(rested-24, and-43)
mark(acknowledged-60, that-44)
punct(gaffe-47, ``-45)
det(gaffe-47, this-46)
nsubjpass(acknowledged-60, gaffe-47)
punct(gaffe-47, ,-48)
punct(gaffe-47, ''-49)
mark(pointed-52, though-50)
advmod(pointed-52, first-51)
acl(gaffe-47, pointed-52)
compound:prt(pointed-52, out-53)
case(1923-55, in-54)
nmod:in(pointed-52, 1923-55)
punct(gaffe-47, ,-56)
auxpass(acknowledged-60, was-57)
punct(acknowledged-60, ``-58)
neg(acknowledged-60, never-59)
ccomp(acknowledge-14, acknowledged-60)
conj:and(rested-24, acknowledged-60)
case(Freud-62, by-61)
nmod:agent(acknowledged-60, Freud-62)
punct(honest-6, ...-63)
punct(honest-6, ''-64)
punct(honest-6, /-65)
punct(honest-6, ''-66)
Return str :: rest#psychoanalysis

rest :: Franklin Phillips , he ruled , would rest in peace as Harry Fisher ./.
compound(Phillips-2, Franklin-1)
nsubj(rest-8, Phillips-2)
punct(ruled-5, ,-3)
nsubj(ruled-5, he-4)
parataxis(rest-8, ruled-5)
punct(ruled-5, ,-6)
aux(rest-8, would-7)
root(ROOT-0, rest-8)
case(peace-10, in-9)
nmod:in(rest-8, peace-10)
case(Fisher-13, as-11)
compound(Fisher-13, Harry-12)
nmod:as(rest-8, Fisher-13)
punct(rest-8, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#phillips

rest :: But the real decision rests with Mr. Kerkorian , the publicity-shy financier who pieced together the new MGM UA from assets retained when the venerable studio was sold to Turner Broadcasting System Inc. in 1986 ./.
cc(rests-5, But-1)
det(decision-4, the-2)
amod(decision-4, real-3)
nsubj(rests-5, decision-4)
root(ROOT-0, rests-5)
case(Kerkorian-8, with-6)
compound(Kerkorian-8, Mr.-7)
nmod:with(rests-5, Kerkorian-8)
punct(Kerkorian-8, ,-9)
det(financier-12, the-10)
amod(financier-12, publicity-shy-11)
appos(Kerkorian-8, financier-12)
nsubj(pieced-14, financier-12)
ref(financier-12, who-13)
acl:relcl(financier-12, pieced-14)
advmod(pieced-14, together-15)
det(UA-19, the-16)
amod(UA-19, new-17)
compound(UA-19, MGM-18)
dobj(pieced-14, UA-19)
case(assets-21, from-20)
nmod:from(pieced-14, assets-21)
acl(assets-21, retained-22)
advmod(sold-28, when-23)
det(studio-26, the-24)
amod(studio-26, venerable-25)
nsubjpass(sold-28, studio-26)
auxpass(sold-28, was-27)
advcl(retained-22, sold-28)
case(Inc.-33, to-29)
compound(Inc.-33, Turner-30)
compound(Inc.-33, Broadcasting-31)
compound(Inc.-33, System-32)
nmod:to(sold-28, Inc.-33)
case(1986-35, in-34)
nmod:in(sold-28, 1986-35)
punct(rests-5, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#decision

rest :: They refuse to rest and demand treatment with antibiotics ./.
nsubj(refuse-2, They-1)
nsubj:xsubj(rest-4, They-1)
root(ROOT-0, refuse-2)
mark(rest-4, to-3)
xcomp(refuse-2, rest-4)
cc(rest-4, and-5)
xcomp(refuse-2, demand-6)
conj:and(rest-4, demand-6)
dobj(demand-6, treatment-7)
case(antibiotics-9, with-8)
nmod:with(demand-6, antibiotics-9)
punct(refuse-2, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#they

rest :: For Drexel Burnham Lambert Inc . , the old-fashioned tombstone advertisement is going to rest in peace ./.
case(Inc-5, For-1)
compound(Inc-5, Drexel-2)
compound(Inc-5, Burnham-3)
compound(Inc-5, Lambert-4)
root(ROOT-0, Inc-5)
punct(Inc-5, .-6)
punct(going-7, ,-1)
det(advertisement-5, the-2)
amod(advertisement-5, old-fashioned-3)
compound(advertisement-5, tombstone-4)
nsubj(going-7, advertisement-5)
nsubj:xsubj(rest-9, advertisement-5)
aux(going-7, is-6)
root(ROOT-0, going-7)
mark(rest-9, to-8)
xcomp(going-7, rest-9)
case(peace-11, in-10)
nmod:in(rest-9, peace-11)
punct(going-7, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#advertisement

rest :: They refuse to rest and demand treatment with antibiotics ./.
nsubj(refuse-2, They-1)
nsubj:xsubj(rest-4, They-1)
root(ROOT-0, refuse-2)
mark(rest-4, to-3)
xcomp(refuse-2, rest-4)
cc(rest-4, and-5)
xcomp(refuse-2, demand-6)
conj:and(rest-4, demand-6)
dobj(demand-6, treatment-7)
case(antibiotics-9, with-8)
nmod:with(demand-6, antibiotics-9)
punct(refuse-2, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#they

rest :: The missiles , which only on rare occasions are pointed skyward , rest obscurely behind a wire fence at the western edge of town ./.
det(missiles-2, The-1)
nsubj(pointed-10, missiles-2)
nsubj(rest-13, missiles-2)
punct(missiles-2, ,-3)
ref(missiles-2, which-4)
advmod(occasions-8, only-5)
case(occasions-8, on-6)
amod(occasions-8, rare-7)
nmod:on(pointed-10, occasions-8)
cop(pointed-10, are-9)
acl:relcl(missiles-2, pointed-10)
advmod(pointed-10, skyward-11)
punct(missiles-2, ,-12)
root(ROOT-0, rest-13)
advmod(rest-13, obscurely-14)
case(fence-18, behind-15)
det(fence-18, a-16)
compound(fence-18, wire-17)
nmod:behind(rest-13, fence-18)
case(edge-22, at-19)
det(edge-22, the-20)
amod(edge-22, western-21)
nmod:at(fence-18, edge-22)
case(town-24, of-23)
nmod:of(edge-22, town-24)
punct(rest-13, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#missiles

rest :: The grave of sleep swallows you , but still you do n't rest , your brain still chases phantoms ./.
det(grave-2, The-1)
nsubj(chases-18, grave-2)
case(swallows-5, of-3)
compound(swallows-5, sleep-4)
nmod:of(grave-2, swallows-5)
dep(chases-18, you-6)
punct(you-6, ,-7)
cc(you-6, but-8)
advmod(rest-13, still-9)
nsubj(rest-13, you-10)
aux(rest-13, do-11)
neg(rest-13, n't-12)
conj:but(you-6, rest-13)
dep(chases-18, rest-13)
punct(chases-18, ,-14)
nmod:poss(brain-16, your-15)
nsubj(chases-18, brain-16)
advmod(chases-18, still-17)
root(ROOT-0, chases-18)
dobj(chases-18, phantoms-19)
punct(chases-18, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#you

rest :: Mr. Quayle , who stood with one foot resting on the base of his lectern , found himself on risky ground when he boasted , `` We are producing Hondas and exporting Hondas to Japan . ''/''
compound(Quayle-2, Mr.-1)
nsubj(stood-5, Quayle-2)
nsubj(found-17, Quayle-2)
punct(Quayle-2, ,-3)
ref(Quayle-2, who-4)
acl:relcl(Quayle-2, stood-5)
mark(resting-9, with-6)
nummod(foot-8, one-7)
nsubj(resting-9, foot-8)
advcl(stood-5, resting-9)
case(base-12, on-10)
det(base-12, the-11)
nmod:on(resting-9, base-12)
case(lectern-15, of-13)
nmod:poss(lectern-15, his-14)
nmod:of(base-12, lectern-15)
punct(Quayle-2, ,-16)
root(ROOT-0, found-17)
dobj(found-17, himself-18)
case(ground-21, on-19)
amod(ground-21, risky-20)
nmod:on(found-17, ground-21)
advmod(boasted-24, when-22)
nsubj(boasted-24, he-23)
advcl(found-17, boasted-24)
punct(found-17, ,-25)
punct(found-17, ``-26)
nsubj(producing-29, We-27)
aux(producing-29, are-28)
ccomp(found-17, producing-29)
dobj(producing-29, Hondas-30)
cc(Hondas-30, and-31)
compound(Hondas-33, exporting-32)
dobj(producing-29, Hondas-33)
conj:and(Hondas-30, Hondas-33)
case(Japan-35, to-34)
nmod:to(producing-29, Japan-35)
punct(found-17, .-36)
punct(found-17, ''-37)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: rest#foot

rest :: Former JFK adviser Sorensen , harking back to 1960 , tells Dukakis to state positions crisply and be well rested ./.
amod(Sorensen-4, Former-1)
compound(Sorensen-4, JFK-2)
compound(Sorensen-4, adviser-3)
nsubj(tells-11, Sorensen-4)
nsubjpass(rested-20, Sorensen-4)
punct(tells-11, ,-5)
advcl(tells-11, harking-6)
advmod(harking-6, back-7)
case(1960-9, to-8)
nmod:to(back-7, 1960-9)
punct(tells-11, ,-10)
root(ROOT-0, tells-11)
dobj(tells-11, Dukakis-12)
case(positions-15, to-13)
compound(positions-15, state-14)
nmod:to(tells-11, positions-15)
advmod(tells-11, crisply-16)
cc(tells-11, and-17)
auxpass(rested-20, be-18)
advmod(rested-20, well-19)
conj:and(tells-11, rested-20)
punct(tells-11, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#sorensen

rest :: Three weeks after suffering one heart attack last November , 46-year-old Bill Peterson was resting at a St. Louis hospital when he was suddenly gripped by the chest-crushing pain of a second ./.
nummod(weeks-2, Three-1)
dep(resting-15, weeks-2)
mark(weeks-2, after-3)
dep(weeks-2, suffering-4)
nummod(attack-7, one-5)
compound(attack-7, heart-6)
dobj(suffering-4, attack-7)
amod(November-9, last-8)
nmod:tmod(suffering-4, November-9)
punct(resting-15, ,-10)
amod(Peterson-13, 46-year-old-11)
compound(Peterson-13, Bill-12)
nsubj(resting-15, Peterson-13)
aux(resting-15, was-14)
root(ROOT-0, resting-15)
case(hospital-20, at-16)
det(hospital-20, a-17)
compound(hospital-20, St.-18)
compound(hospital-20, Louis-19)
nmod:at(resting-15, hospital-20)
advmod(gripped-25, when-21)
nsubjpass(gripped-25, he-22)
auxpass(gripped-25, was-23)
advmod(gripped-25, suddenly-24)
advcl(resting-15, gripped-25)
case(pain-29, by-26)
det(pain-29, the-27)
amod(pain-29, chest-crushing-28)
nmod:agent(gripped-25, pain-29)
case(second-32, of-30)
det(second-32, a-31)
nmod:of(pain-29, second-32)
punct(resting-15, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#peterson

rest :: `` Look at all the suffering Unita has caused , '' says Espirito , resting his one leg on a bar stool ./.
punct(says-12, ``-1)
ccomp(says-12, Look-2)
case(suffering-6, at-3)
det:predet(suffering-6, all-4)
det(suffering-6, the-5)
nmod:at(Look-2, suffering-6)
nsubj(caused-9, Unita-7)
aux(caused-9, has-8)
ccomp(suffering-6, caused-9)
punct(says-12, ,-10)
punct(says-12, ''-11)
root(ROOT-0, says-12)
nsubj(says-12, Espirito-13)
punct(Espirito-13, ,-14)
root(,-14, resting-15)
nmod:poss(leg-18, his-16)
nummod(leg-18, one-17)
dobj(resting-15, leg-18)
case(stool-22, on-19)
det(stool-22, a-20)
compound(stool-22, bar-21)
nmod:on(resting-15, stool-22)
punct(resting-15, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#leg

rest :: `` He 's tan , rested and ready . ''/''
root(ROOT-0, ``-1)
nsubj(tan-4, He-2)
nsubj(rested-6, He-2)
nsubj(ready-8, He-2)
cop(tan-4, 's-3)
root(``-1, tan-4)
punct(tan-4, ,-5)
root(``-1, rested-6)
conj:and(tan-4, rested-6)
cc(tan-4, and-7)
root(``-1, ready-8)
conj:and(tan-4, ready-8)
punct(tan-4, .-9)
punct(tan-4, ''-10)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: rest#he

rest :: Look who else is ready and rested over at the Orpheum Theater: Populist Huey Long , assassinated 53 years ago , but livelier than most redfish in this revisionist play , `` The Kingfish , '' about a rustic some called a born leader and others a sleazeball ./.
root(ROOT-0, Look-1)
nsubj(ready-5, who-2)
nsubj(rested-7, who-2)
advmod(ready-5, else-3)
cop(ready-5, is-4)
ccomp(Look-1, ready-5)
cc(ready-5, and-6)
ccomp(Look-1, rested-7)
conj:and(ready-5, rested-7)
compound:prt(rested-7, over-8)
case(Theater-12, at-9)
det(Theater-12, the-10)
compound(Theater-12, Orpheum-11)
nmod:at(rested-7, Theater-12)
punct(ready-5, :-13)
amod(Long-16, Populist-14)
compound(Long-16, Huey-15)
dep(ready-5, Long-16)
punct(Long-16, ,-17)
acl(Long-16, assassinated-18)
nummod(years-20, 53-19)
nmod:npmod(ago-21, years-20)
advmod(assassinated-18, ago-21)
punct(Long-16, ,-22)
cc(Long-16, but-23)
dep(ready-5, livelier-24)
conj:but(Long-16, livelier-24)
case(redfish-27, than-25)
amod(redfish-27, most-26)
nmod:than(livelier-24, redfish-27)
case(play-31, in-28)
det(play-31, this-29)
compound(play-31, revisionist-30)
nmod:in(redfish-27, play-31)
punct(Long-16, ,-32)
punct(Long-16, ``-33)
det(Kingfish-35, The-34)
dep(Long-16, Kingfish-35)
punct(Long-16, ,-36)
punct(Long-16, ''-37)
case(rustic-40, about-38)
det(rustic-40, a-39)
nmod:about(Long-16, rustic-40)
nsubj(called-42, some-41)
acl:relcl(rustic-40, called-42)
det(leader-45, a-43)
amod(leader-45, born-44)
nsubj(sleazeball-49, leader-45)
cc(leader-45, and-46)
conj:and(leader-45, others-47)
nsubj(sleazeball-49, others-47)
det(sleazeball-49, a-48)
xcomp(called-42, sleazeball-49)
punct(Look-1, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#who

rest :: A typist 's fingers rest in indentations ; moving a finger within an indentation `` types '' a character ./.
det(typist-2, A-1)
nmod:poss(rest-5, typist-2)
case(typist-2, 's-3)
compound(rest-5, fingers-4)
root(ROOT-0, rest-5)
case(indentations-7, in-6)
nmod:in(rest-5, indentations-7)
punct(rest-5, ;-8)
dep(rest-5, moving-9)
det(finger-11, a-10)
dobj(moving-9, finger-11)
case(types-16, within-12)
det(types-16, an-13)
compound(types-16, indentation-14)
punct(types-16, ``-15)
nmod:within(moving-9, types-16)
punct(types-16, ''-17)
det(character-19, a-18)
nmod:npmod(types-16, character-19)
punct(rest-5, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#typist

rest :: The regulations urge employers with a large staff of women to provide appropriate sanitary equipment , rooms for pregnant women to rest , and nurseries and kindergartens ./.
det(regulations-2, The-1)
nsubj(urge-3, regulations-2)
root(ROOT-0, urge-3)
dobj(urge-3, employers-4)
case(staff-8, with-5)
det(staff-8, a-6)
amod(staff-8, large-7)
nmod:with(urge-3, staff-8)
case(women-10, of-9)
nmod:of(staff-8, women-10)
mark(provide-12, to-11)
advcl(urge-3, provide-12)
amod(equipment-15, appropriate-13)
amod(equipment-15, sanitary-14)
dobj(provide-12, equipment-15)
punct(equipment-15, ,-16)
dobj(provide-12, rooms-17)
conj:and(equipment-15, rooms-17)
mark(rest-22, for-18)
amod(women-20, pregnant-19)
nsubj(rest-22, women-20)
mark(rest-22, to-21)
acl:relcl(rooms-17, rest-22)
punct(equipment-15, ,-23)
cc(equipment-15, and-24)
dobj(provide-12, nurseries-25)
conj:and(equipment-15, nurseries-25)
cc(nurseries-25, and-26)
conj:and(equipment-15, kindergartens-27)
conj:and(nurseries-25, kindergartens-27)
punct(urge-3, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#women

rest :: Flo , sporting elaborate eye makeup and nails painted a half-dozen colors , said after her 200 win that she 'd probably take it easy until the Olympics , working out twice a week , resting , and , probably choosing new outfits ./.
nsubj(painted-9, Flo-1)
punct(painted-9, ,-2)
csubj(painted-9, sporting-3)
amod(makeup-6, elaborate-4)
compound(makeup-6, eye-5)
dobj(sporting-3, makeup-6)
cc(makeup-6, and-7)
dobj(sporting-3, nails-8)
conj:and(makeup-6, nails-8)
root(ROOT-0, painted-9)
det(colors-12, a-10)
amod(colors-12, half-dozen-11)
dobj(painted-9, colors-12)
punct(painted-9, ,-13)
advcl(painted-9, said-14)
mark(win-18, after-15)
nmod:poss(200-17, her-16)
nsubj(win-18, 200-17)
advcl(said-14, win-18)
mark(take-23, that-19)
nsubj(take-23, she-20)
aux(take-23, 'd-21)
advmod(take-23, probably-22)
ccomp(win-18, take-23)
dobj(take-23, it-24)
advmod(take-23, easy-25)
case(Olympics-28, until-26)
det(Olympics-28, the-27)
nmod:until(take-23, Olympics-28)
punct(take-23, ,-29)
advcl(take-23, working-30)
compound:prt(working-30, out-31)
advmod(week-34, twice-32)
det(week-34, a-33)
nmod:tmod(working-30, week-34)
punct(week-34, ,-35)
dep(week-34, resting-36)
punct(resting-36, ,-37)
cc(resting-36, and-38)
punct(resting-36, ,-39)
advmod(choosing-41, probably-40)
dep(week-34, choosing-41)
conj:and(resting-36, choosing-41)
amod(outfits-43, new-42)
dobj(choosing-41, outfits-43)
punct(painted-9, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

rest :: Young boys stretch out on picnic tables in the shade , and older men rest against cool block walls ./.
amod(boys-2, Young-1)
nsubj(stretch-3, boys-2)
root(ROOT-0, stretch-3)
compound:prt(stretch-3, out-4)
case(tables-7, on-5)
compound(tables-7, picnic-6)
nmod:on(stretch-3, tables-7)
case(shade-10, in-8)
det(shade-10, the-9)
nmod:in(stretch-3, shade-10)
punct(stretch-3, ,-11)
cc(stretch-3, and-12)
amod(rest-15, older-13)
compound(rest-15, men-14)
conj:and(stretch-3, rest-15)
case(walls-19, against-16)
amod(walls-19, cool-17)
compound(walls-19, block-18)
nmod:against(rest-15, walls-19)
punct(stretch-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#walls

rest :: And she recalls Joshua 's reaction to his first week of first grade: `` They do n't give us enough time to rest our heads and our hands . ''/''
cc(recalls-3, And-1)
nsubj(recalls-3, she-2)
root(ROOT-0, recalls-3)
nmod:poss(reaction-6, Joshua-4)
case(Joshua-4, 's-5)
dobj(recalls-3, reaction-6)
case(week-10, to-7)
nmod:poss(week-10, his-8)
amod(week-10, first-9)
nmod:to(reaction-6, week-10)
case(grade-13, of-11)
amod(grade-13, first-12)
nmod:of(week-10, grade-13)
punct(recalls-3, :-14)
punct(recalls-3, ``-15)
nsubj(give-19, They-16)
aux(give-19, do-17)
neg(give-19, n't-18)
parataxis(recalls-3, give-19)
iobj(give-19, us-20)
amod(time-22, enough-21)
dobj(give-19, time-22)
mark(rest-24, to-23)
acl(time-22, rest-24)
nmod:poss(heads-26, our-25)
dobj(rest-24, heads-26)
cc(give-19, and-27)
nmod:poss(hands-29, our-28)
parataxis(recalls-3, hands-29)
conj:and(give-19, hands-29)
punct(recalls-3, .-30)
punct(recalls-3, ''-31)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: rest#heads

rest :: `` You can drive it with your fingertips , but still rest your hand on it . ''/''
punct(drive-4, ``-1)
nsubj(drive-4, You-2)
nsubj(rest-12, You-2)
aux(drive-4, can-3)
root(ROOT-0, drive-4)
dobj(drive-4, it-5)
case(fingertips-8, with-6)
nmod:poss(fingertips-8, your-7)
nmod:with(drive-4, fingertips-8)
punct(drive-4, ,-9)
cc(drive-4, but-10)
advmod(rest-12, still-11)
conj:but(drive-4, rest-12)
nmod:poss(hand-14, your-13)
dobj(rest-12, hand-14)
case(it-16, on-15)
nmod:on(rest-12, it-16)
punct(drive-4, .-17)
punct(drive-4, ''-18)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: rest#hand

rest :: He spent most days resting on a quilt in Beatrix Potter 's studio ./.
nsubj(spent-2, He-1)
root(ROOT-0, spent-2)
amod(days-4, most-3)
nmod:tmod(spent-2, days-4)
xcomp(spent-2, resting-5)
case(quilt-8, on-6)
det(quilt-8, a-7)
nmod:on(resting-5, quilt-8)
case(studio-13, in-9)
compound(Potter-11, Beatrix-10)
nmod:poss(studio-13, Potter-11)
case(Potter-11, 's-12)
nmod:in(quilt-8, studio-13)
punct(spent-2, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: rest#quilt

ride :: The new minicomputer is hot , and the company is riding the first flush of demand for some faster new mainframes and software ./.
det(minicomputer-3, The-1)
amod(minicomputer-3, new-2)
nsubj(hot-5, minicomputer-3)
cop(hot-5, is-4)
root(ROOT-0, hot-5)
punct(hot-5, ,-6)
cc(hot-5, and-7)
det(company-9, the-8)
nsubj(riding-11, company-9)
aux(riding-11, is-10)
conj:and(hot-5, riding-11)
det(flush-14, the-12)
amod(flush-14, first-13)
dobj(riding-11, flush-14)
case(demand-16, of-15)
nmod:of(flush-14, demand-16)
case(mainframes-21, for-17)
det(mainframes-21, some-18)
amod(mainframes-21, faster-19)
amod(mainframes-21, new-20)
nmod:for(demand-16, mainframes-21)
cc(mainframes-21, and-22)
nmod:for(demand-16, software-23)
conj:and(mainframes-21, software-23)
punct(hot-5, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#demand

ride :: The summit , therefore , is an important domestic event in Germany , where Mr. Gorbachev has been riding a wave of popularity ./.
det(summit-2, The-1)
nsubj(event-10, summit-2)
punct(event-10, ,-3)
advmod(event-10, therefore-4)
punct(event-10, ,-5)
cop(event-10, is-6)
det(event-10, an-7)
amod(event-10, important-8)
amod(event-10, domestic-9)
root(ROOT-0, event-10)
case(Germany-12, in-11)
nmod:in(event-10, Germany-12)
punct(Germany-12, ,-13)
advmod(riding-19, where-14)
compound(Gorbachev-16, Mr.-15)
nsubj(riding-19, Gorbachev-16)
aux(riding-19, has-17)
aux(riding-19, been-18)
acl:relcl(Germany-12, riding-19)
det(wave-21, a-20)
dobj(riding-19, wave-21)
case(popularity-23, of-22)
nmod:of(wave-21, popularity-23)
punct(event-10, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#popularity

ride :: As he has in previous contests this year , Vice President Bush rode President Reagan 's coattails ./.
mark(contests-6, As-1)
nsubj(contests-6, he-2)
aux(contests-6, has-3)
case(contests-6, in-4)
amod(contests-6, previous-5)
advcl(rode-13, contests-6)
det(year-8, this-7)
nmod:tmod(contests-6, year-8)
punct(rode-13, ,-9)
compound(Bush-12, Vice-10)
compound(Bush-12, President-11)
nsubj(rode-13, Bush-12)
root(ROOT-0, rode-13)
compound(Reagan-15, President-14)
nmod:poss(coattails-17, Reagan-15)
case(Reagan-15, 's-16)
dobj(rode-13, coattails-17)
punct(rode-13, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#coattails

ride :: `` It feels , '' says one uneasy rider , `` like I 'm riding the tailgate of a tornado . ''/''
punct(says-6, ``-1)
nsubj(feels-3, It-2)
ccomp(says-6, feels-3)
punct(says-6, ,-4)
punct(says-6, ''-5)
root(ROOT-0, says-6)
nummod(rider-9, one-7)
amod(rider-9, uneasy-8)
nsubj(says-6, rider-9)
punct(says-6, ,-10)
punct(says-6, ``-11)
mark(riding-15, like-12)
nsubj(riding-15, I-13)
aux(riding-15, 'm-14)
advcl(says-6, riding-15)
det(tailgate-17, the-16)
dobj(riding-15, tailgate-17)
case(tornado-20, of-18)
det(tornado-20, a-19)
nmod:of(tailgate-17, tornado-20)
punct(says-6, .-21)
punct(says-6, ''-22)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: ride#tornado

ride :: Even with so much riding on the outcome , the obstacles to an agreement remain formidable ./.
advmod(riding-5, Even-1)
mark(riding-5, with-2)
advmod(much-4, so-3)
nsubj(riding-5, much-4)
advcl(remain-15, riding-5)
case(outcome-8, on-6)
det(outcome-8, the-7)
nmod:on(riding-5, outcome-8)
punct(remain-15, ,-9)
det(obstacles-11, the-10)
nsubj(remain-15, obstacles-11)
case(agreement-14, to-12)
det(agreement-14, an-13)
nmod:to(obstacles-11, agreement-14)
root(ROOT-0, remain-15)
xcomp(remain-15, formidable-16)
punct(remain-15, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#much

ride :: Still , opponents paint the company as a heavy-handed marauder , riding roughshod over public will ./.
advmod(paint-4, Still-1)
punct(paint-4, ,-2)
nsubj(paint-4, opponents-3)
root(ROOT-0, paint-4)
det(company-6, the-5)
dobj(paint-4, company-6)
case(marauder-10, as-7)
det(marauder-10, a-8)
amod(marauder-10, heavy-handed-9)
nmod:as(paint-4, marauder-10)
punct(paint-4, ,-11)
xcomp(paint-4, riding-12)
dobj(riding-12, roughshod-13)
case(public-15, over-14)
nmod:over(riding-12, public-15)
nmod:tmod(riding-12, will-16)
punct(paint-4, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#roughshod

ride :: Thus , Airbus 's proposed cargo sleepers -- ordinary metal freight containers outfitted with beds that would ride in the belly of the plane -- are being studied by carriers such as Lufthansa German Airlines , but only for its crew ./.
advmod(studied-28, Thus-1)
punct(studied-28, ,-2)
nmod:poss(sleepers-7, Airbus-3)
case(Airbus-3, 's-4)
amod(sleepers-7, proposed-5)
compound(sleepers-7, cargo-6)
nsubjpass(studied-28, sleepers-7)
punct(containers-12, ---8)
amod(containers-12, ordinary-9)
compound(containers-12, metal-10)
compound(containers-12, freight-11)
dep(sleepers-7, containers-12)
acl(containers-12, outfitted-13)
case(beds-15, with-14)
nmod:with(outfitted-13, beds-15)
nsubj(ride-18, beds-15)
ref(beds-15, that-16)
aux(ride-18, would-17)
acl:relcl(beds-15, ride-18)
case(belly-21, in-19)
det(belly-21, the-20)
nmod:in(ride-18, belly-21)
case(plane-24, of-22)
det(plane-24, the-23)
nmod:of(belly-21, plane-24)
punct(containers-12, ---25)
aux(studied-28, are-26)
auxpass(studied-28, being-27)
root(ROOT-0, studied-28)
case(carriers-30, by-29)
nmod:agent(studied-28, carriers-30)
case(Airlines-35, such-31)
mwe(such-31, as-32)
compound(Airlines-35, Lufthansa-33)
compound(Airlines-35, German-34)
nmod:such_as(carriers-30, Airlines-35)
punct(studied-28, ,-36)
cc(studied-28, but-37)
advmod(crew-41, only-38)
case(crew-41, for-39)
nmod:poss(crew-41, its-40)
conj:but(studied-28, crew-41)
punct(studied-28, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#beds

ride :: The agreeable process of bringing money in and out with monthly returns as high as 8 % became affectionately known as `` riding the bicycle . ''/''
det(process-3, The-1)
amod(process-3, agreeable-2)
root(ROOT-0, process-3)
mark(bringing-5, of-4)
acl(process-3, bringing-5)
dobj(bringing-5, money-6)
advmod(bringing-5, in-7)
cc(in-7, and-8)
advmod(bringing-5, out-9)
conj:and(in-7, out-9)
case(returns-12, with-10)
amod(returns-12, monthly-11)
nmod:with(bringing-5, returns-12)
advmod(high-14, as-13)
amod(returns-12, high-14)
mark(became-18, as-15)
nummod(%-17, 8-16)
nsubj(became-18, %-17)
advcl(high-14, became-18)
advmod(known-20, affectionately-19)
xcomp(became-18, known-20)
case(riding-23, as-21)
punct(riding-23, ``-22)
advcl(high-14, riding-23)
det(bicycle-25, the-24)
dobj(riding-23, bicycle-25)
punct(process-3, .-26)
punct(process-3, ''-27)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: ride#bicycle

ride :: On the side of his dash rides his beloved graph recorder , a combination of a slow moving scroll of paper and a stylus that moves as a vertical blur , etching the solid contours of the lake 's bottom and the inverted arcs of fish ./.
case(side-3, On-1)
det(side-3, the-2)
root(ROOT-0, side-3)
case(rides-7, of-4)
nmod:poss(rides-7, his-5)
compound(rides-7, dash-6)
nmod:of(side-3, rides-7)
nmod:poss(recorder-11, his-8)
amod(recorder-11, beloved-9)
compound(recorder-11, graph-10)
dep(side-3, recorder-11)
punct(recorder-11, ,-12)
det(combination-14, a-13)
appos(recorder-11, combination-14)
case(scroll-19, of-15)
det(scroll-19, a-16)
amod(scroll-19, slow-17)
amod(scroll-19, moving-18)
nmod:of(combination-14, scroll-19)
case(paper-21, of-20)
nmod:of(scroll-19, paper-21)
cc(scroll-19, and-22)
det(stylus-24, a-23)
nmod:of(combination-14, stylus-24)
conj:and(scroll-19, stylus-24)
nsubj(moves-26, stylus-24)
ref(stylus-24, that-25)
acl:relcl(stylus-24, moves-26)
case(blur-30, as-27)
det(blur-30, a-28)
amod(blur-30, vertical-29)
nmod:as(moves-26, blur-30)
punct(recorder-11, ,-31)
acl(recorder-11, etching-32)
det(contours-35, the-33)
amod(contours-35, solid-34)
dobj(etching-32, contours-35)
case(bottom-40, of-36)
det(lake-38, the-37)
nmod:poss(bottom-40, lake-38)
case(lake-38, 's-39)
nmod:of(contours-35, bottom-40)
cc(bottom-40, and-41)
det(arcs-44, the-42)
amod(arcs-44, inverted-43)
nmod:of(contours-35, arcs-44)
conj:and(bottom-40, arcs-44)
case(fish-46, of-45)
nmod:of(arcs-44, fish-46)
punct(side-3, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#his

ride :: And he scored the highest-charting guitar instrumental album in a dozen years when his `` Surfing With the Alien , '' released on the independent Relativity label , rode into Billboard 's Top Thirty ./.
cc(scored-3, And-1)
nsubj(scored-3, he-2)
root(ROOT-0, scored-3)
det(album-8, the-4)
amod(album-8, highest-charting-5)
compound(album-8, guitar-6)
amod(album-8, instrumental-7)
dobj(scored-3, album-8)
case(years-12, in-9)
det(years-12, a-10)
compound(years-12, dozen-11)
nmod:in(scored-3, years-12)
advmod(Surfing-16, when-13)
nmod:poss(Surfing-16, his-14)
punct(Surfing-16, ``-15)
acl:relcl(years-12, Surfing-16)
case(Alien-19, With-17)
det(Alien-19, the-18)
nmod:with(Surfing-16, Alien-19)
punct(scored-3, ,-20)
punct(scored-3, ''-21)
dep(scored-3, released-22)
case(label-27, on-23)
det(label-27, the-24)
amod(label-27, independent-25)
compound(label-27, Relativity-26)
nmod:on(released-22, label-27)
punct(scored-3, ,-28)
dep(scored-3, rode-29)
case(Thirty-34, into-30)
nmod:poss(Thirty-34, Billboard-31)
case(Billboard-31, 's-32)
amod(Thirty-34, Top-33)
nmod:into(rode-29, Thirty-34)
punct(scored-3, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#thirty

ride :: But this program fosters an insidious idea: Intelligent discussion is silly -- whoever 's the loudest , wins . -LRB- And of course Mort , with his own sound men riding the mixing board , is always loudest. -RRB-/-RRB-
cc(fosters-4, But-1)
det(program-3, this-2)
nsubj(fosters-4, program-3)
root(ROOT-0, fosters-4)
det(idea-7, an-5)
amod(idea-7, insidious-6)
dobj(fosters-4, idea-7)
punct(idea-7, :-8)
amod(discussion-10, Intelligent-9)
nsubj(silly-12, discussion-10)
cop(silly-12, is-11)
dep(idea-7, silly-12)
punct(silly-12, ---13)
nsubj(loudest-17, whoever-14)
cop(loudest-17, 's-15)
det(loudest-17, the-16)
parataxis(silly-12, loudest-17)
punct(loudest-17, ,-18)
dep(loudest-17, wins-19)
punct(fosters-4, .-20)
punct(loudest-19, -LRB--1)
cc(loudest-19, And-2)
case(course-4, of-3)
nmod:of(loudest-19, course-4)
nsubj(loudest-19, Mort-5)
punct(Mort-5, ,-6)
case(men-11, with-7)
nmod:poss(men-11, his-8)
amod(men-11, own-9)
compound(men-11, sound-10)
nmod:with(Mort-5, men-11)
acl(men-11, riding-12)
det(board-15, the-13)
amod(board-15, mixing-14)
dobj(riding-12, board-15)
punct(Mort-5, ,-16)
cop(loudest-19, is-17)
advmod(loudest-19, always-18)
root(ROOT-0, loudest-19)
punct(loudest-19, .-20)
punct(loudest-19, -RRB--21)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: ride#board

ride :: Mr. Joseph was n't worried because the company was riding high when Ms. Bruck started her research in 1985 ./.
compound(Joseph-2, Mr.-1)
nsubjpass(worried-5, Joseph-2)
auxpass(worried-5, was-3)
neg(worried-5, n't-4)
root(ROOT-0, worried-5)
mark(riding-10, because-6)
det(company-8, the-7)
nsubj(riding-10, company-8)
aux(riding-10, was-9)
advcl(worried-5, riding-10)
advmod(riding-10, high-11)
advmod(started-15, when-12)
compound(Bruck-14, Ms.-13)
nsubj(started-15, Bruck-14)
advcl(riding-10, started-15)
nmod:poss(research-17, her-16)
dobj(started-15, research-17)
case(1985-19, in-18)
nmod:in(started-15, 1985-19)
punct(worried-5, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#company

ride :: The hardest -- that is , most invulnerable-bases in the Western orbit are in Switzerland , Israel and Saudi Arabia ; they have deep , extensive underground facilities and can ride out an attack and deliver a punishing counterblow ./.
det(hardest-2, The-1)
root(ROOT-0, hardest-2)
punct(Switzerland-15, ---3)
nsubj(Switzerland-15, that-4)
cop(Switzerland-15, is-5)
punct(Switzerland-15, ,-6)
amod(invulnerable-bases-8, most-7)
nsubj(Switzerland-15, invulnerable-bases-8)
case(orbit-12, in-9)
det(orbit-12, the-10)
amod(orbit-12, Western-11)
nmod:in(invulnerable-bases-8, orbit-12)
cop(Switzerland-15, are-13)
case(Switzerland-15, in-14)
dep(hardest-2, Switzerland-15)
punct(Switzerland-15, ,-16)
dep(hardest-2, Israel-17)
conj:and(Switzerland-15, Israel-17)
cc(Switzerland-15, and-18)
compound(Arabia-20, Saudi-19)
dep(hardest-2, Arabia-20)
conj:and(Switzerland-15, Arabia-20)
punct(Switzerland-15, ;-21)
nsubj(have-23, they-22)
parataxis(Switzerland-15, have-23)
advmod(have-23, deep-24)
punct(deep-24, ,-25)
amod(facilities-28, extensive-26)
compound(facilities-28, underground-27)
root(,-25, facilities-28)
cc(facilities-28, and-29)
aux(ride-31, can-30)
root(,-25, ride-31)
conj:and(facilities-28, ride-31)
compound:prt(ride-31, out-32)
det(attack-34, an-33)
dobj(ride-31, attack-34)
cc(ride-31, and-35)
conj:and(facilities-28, deliver-36)
conj:and(ride-31, deliver-36)
det(counterblow-39, a-37)
amod(counterblow-39, punishing-38)
dobj(deliver-36, counterblow-39)
punct(facilities-28, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#attack

ride :: Both animals went into the book at $ 3.40-to- $ 1 , but about $ 5 , 000 more of the first-place mutuel pool rode Private Terms 's nose to an inglorious ninth ./.
det(animals-2, Both-1)
nsubj(went-3, animals-2)
root(ROOT-0, went-3)
case(book-6, into-4)
det(book-6, the-5)
nmod:into(went-3, book-6)
case(3.40-to-9, at-7)
dep(3.40-to-9, $-8)
nmod:at(went-3, 3.40-to-9)
punct(3.40-to-9, --10)
dep(1-12, $-11)
dep(3.40-to-9, 1-12)
punct(3.40-to-9, ,-13)
cc(3.40-to-9, but-14)
advmod($-16, about-15)
nmod:at(went-3, $-16)
conj:but(3.40-to-9, $-16)
nummod($-16, 5-17)
punct($-16, ,-18)
nummod($-16, 000-19)
amod($-16, more-20)
case(pool-25, of-21)
det(pool-25, the-22)
amod(pool-25, first-place-23)
compound(pool-25, mutuel-24)
nmod:of(more-20, pool-25)
acl($-16, rode-26)
amod(Terms-28, Private-27)
nmod:poss(nose-30, Terms-28)
case(Terms-28, 's-29)
dobj(rode-26, nose-30)
case(ninth-34, to-31)
det(ninth-34, an-32)
amod(ninth-34, inglorious-33)
nmod:to(rode-26, ninth-34)
punct(went-3, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#nose

ride :: The movie producer and distributor has a lot riding on the picture ./.
det(producer-3, The-1)
compound(producer-3, movie-2)
nsubj(has-6, producer-3)
cc(producer-3, and-4)
conj:and(producer-3, distributor-5)
nsubj(has-6, distributor-5)
root(ROOT-0, has-6)
det(lot-8, a-7)
dobj(has-6, lot-8)
acl(lot-8, riding-9)
case(picture-12, on-10)
det(picture-12, the-11)
nmod:on(riding-9, picture-12)
punct(has-6, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#picture

ride :: It was , after all , Mr. Nixon 's detente that encouraged -LRB- and licensed -RRB- massive sales of militarily sensitive technology to the Soviet Union . -LRB- The Red Army did not `` waltz '' into Afghanistan as Mr. Nixon says here: It rode in -- in tanks built with U.S. help , licensed by Mr. Nixon , at the Kama River plant. -RRB-/-RRB-
root(ROOT-0, It-1)
dep(It-1, was-2)
punct(was-2, ,-3)
case(all-5, after-4)
root(,-3, all-5)
punct(all-5, ,-6)
compound(Nixon-8, Mr.-7)
nmod:poss(detente-10, Nixon-8)
case(Nixon-8, 's-9)
root(,-6, detente-10)
dep(detente-10, that-11)
amod(sales-18, encouraged-12)
punct(licensed-15, -LRB--13)
cc(licensed-15, and-14)
dep(encouraged-12, licensed-15)
punct(licensed-15, -RRB--16)
amod(sales-18, massive-17)
dobj(that-11, sales-18)
case(technology-22, of-19)
advmod(sensitive-21, militarily-20)
amod(technology-22, sensitive-21)
nmod:of(sales-18, technology-22)
case(Union-26, to-23)
det(Union-26, the-24)
compound(Union-26, Soviet-25)
nmod:to(sales-18, Union-26)
punct(detente-10, .-27)
punct(waltz-8, -LRB--1)
det(Army-4, The-2)
compound(Army-4, Red-3)
nsubj(waltz-8, Army-4)
aux(waltz-8, did-5)
neg(waltz-8, not-6)
punct(waltz-8, ``-7)
root(ROOT-0, waltz-8)
punct(waltz-8, ''-9)
case(Afghanistan-11, into-10)
nmod:into(waltz-8, Afghanistan-11)
mark(says-15, as-12)
compound(Nixon-14, Mr.-13)
nsubj(says-15, Nixon-14)
dep(waltz-8, says-15)
advmod(says-15, here-16)
punct(says-15, :-17)
nsubj(rode-19, It-18)
parataxis(says-15, rode-19)
compound:prt(rode-19, in-20)
punct(rode-19, ---21)
case(tanks-23, in-22)
nmod:in(rode-19, tanks-23)
acl(tanks-23, built-24)
case(help-27, with-25)
compound(help-27, U.S.-26)
nmod:with(built-24, help-27)
punct(rode-19, ,-28)
dep(rode-19, licensed-29)
case(Nixon-32, by-30)
compound(Nixon-32, Mr.-31)
nmod:by(licensed-29, Nixon-32)
punct(rode-19, ,-33)
case(plant-38, at-34)
det(plant-38, the-35)
compound(plant-38, Kama-36)
compound(plant-38, River-37)
nmod:at(rode-19, plant-38)
punct(rode-19, .-39)
punct(waltz-8, -RRB--40)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: ride#it

ride :: There 's a lot riding on these tires ./.
expl('s-2, There-1)
root(ROOT-0, 's-2)
det(lot-4, a-3)
nsubj('s-2, lot-4)
acl(lot-4, riding-5)
case(tires-8, on-6)
det(tires-8, these-7)
nmod:on(riding-5, tires-8)
punct('s-2, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#tires

ride :: With so much riding on the picture , MGM UA is playing hardball with theater owners -- as is Paramount , the Gulf & Western Inc. unit that is releasing `` Crocodile Dundee II , '' and the TriStar unit of Columbia Pictures Entertainment Inc . , releasing `` Rambo III . ''/''
mark(riding-4, With-1)
advmod(much-3, so-2)
nsubj(riding-4, much-3)
advcl(playing-12, riding-4)
case(picture-7, on-5)
det(picture-7, the-6)
nmod:on(riding-4, picture-7)
punct(playing-12, ,-8)
compound(UA-10, MGM-9)
nsubj(playing-12, UA-10)
aux(playing-12, is-11)
root(ROOT-0, playing-12)
dobj(playing-12, hardball-13)
case(owners-16, with-14)
compound(owners-16, theater-15)
nmod:with(playing-12, owners-16)
punct(playing-12, ---17)
advmod(Paramount-20, as-18)
cop(Paramount-20, is-19)
parataxis(playing-12, Paramount-20)
nsubj(releasing-30, Paramount-20)
punct(Paramount-20, ,-21)
det(Gulf-23, the-22)
parataxis(playing-12, Gulf-23)
conj:and(Paramount-20, Gulf-23)
nsubj(releasing-30, Gulf-23)
cc(Paramount-20, &-24)
compound(unit-27, Western-25)
compound(unit-27, Inc.-26)
parataxis(playing-12, unit-27)
conj:&(Paramount-20, unit-27)
nsubj(releasing-30, unit-27)
ref(Paramount-20, that-28)
aux(releasing-30, is-29)
acl:relcl(Paramount-20, releasing-30)
punct(releasing-30, ``-31)
compound(II-34, Crocodile-32)
compound(II-34, Dundee-33)
dobj(releasing-30, II-34)
punct(Paramount-20, ,-35)
punct(Paramount-20, ''-36)
cc(Paramount-20, and-37)
det(unit-40, the-38)
compound(unit-40, TriStar-39)
parataxis(playing-12, unit-40)
conj:&(Paramount-20, unit-40)
nsubj(releasing-30, unit-40)
case(Inc-45, of-41)
compound(Inc-45, Columbia-42)
compound(Inc-45, Pictures-43)
compound(Inc-45, Entertainment-44)
nmod:of(unit-40, Inc-45)
punct(playing-12, .-46)
punct(III-5, ,-1)
dep(III-5, releasing-2)
punct(III-5, ``-3)
compound(III-5, Rambo-4)
root(ROOT-0, III-5)
punct(III-5, .-6)
punct(III-5, ''-7)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: ride#much

ride :: In a sense , the 43-year-old Mr. Lucas has more riding on `` Willow '' than anybody ./.
case(sense-3, In-1)
det(sense-3, a-2)
nmod:in(has-9, sense-3)
punct(has-9, ,-4)
det(Lucas-8, the-5)
amod(Lucas-8, 43-year-old-6)
compound(Lucas-8, Mr.-7)
nsubj(has-9, Lucas-8)
root(ROOT-0, has-9)
advmod(riding-11, more-10)
dobj(has-9, riding-11)
case(Willow-14, on-12)
punct(Willow-14, ``-13)
nmod:on(riding-11, Willow-14)
punct(Willow-14, ''-15)
case(anybody-17, than-16)
nmod:than(riding-11, anybody-17)
punct(has-9, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#willow

ride :: `` We were just riding along on a design that was doomed to failure , '' he says ./.
punct(says-18, ``-1)
nsubj(riding-5, We-2)
aux(riding-5, were-3)
advmod(riding-5, just-4)
ccomp(says-18, riding-5)
advmod(riding-5, along-6)
case(design-9, on-7)
det(design-9, a-8)
nmod:on(riding-5, design-9)
nsubjpass(doomed-12, design-9)
ref(design-9, that-10)
auxpass(doomed-12, was-11)
acl:relcl(design-9, doomed-12)
case(failure-14, to-13)
nmod:to(doomed-12, failure-14)
punct(says-18, ,-15)
punct(says-18, ''-16)
nsubj(says-18, he-17)
root(ROOT-0, says-18)
punct(says-18, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#we

ride :: `` There 's a tremendous amount riding on the outcome of this litigation , '' says Carl Taylor , an attorney in the Washington , D.C . , office of Johnson & Swanson , a Dallas-based law firm representing several large corporate plaintiffs ./.
punct(says-16, ``-1)
expl('s-3, There-2)
ccomp(says-16, 's-3)
det(amount-6, a-4)
amod(amount-6, tremendous-5)
nsubj('s-3, amount-6)
acl(amount-6, riding-7)
case(outcome-10, on-8)
det(outcome-10, the-9)
nmod:on(riding-7, outcome-10)
case(litigation-13, of-11)
det(litigation-13, this-12)
nmod:of(outcome-10, litigation-13)
punct(says-16, ,-14)
punct(says-16, ''-15)
root(ROOT-0, says-16)
compound(Taylor-18, Carl-17)
nsubj(says-16, Taylor-18)
punct(Taylor-18, ,-19)
det(attorney-21, an-20)
appos(Taylor-18, attorney-21)
acl(attorney-21, in-22)
root(in-22, the-23)
dep(the-23, Washington-24)
punct(Washington-24, ,-25)
dep(Washington-24, D.C-26)
punct(Washington-24, .-27)
root(ROOT-0, ,-1)
root(,-1, office-2)
case(Johnson-4, of-3)
nmod:of(office-2, Johnson-4)
cc(Johnson-4, &-5)
nmod:of(office-2, Swanson-6)
conj:&(Johnson-4, Swanson-6)
punct(Johnson-4, ,-7)
det(firm-11, a-8)
amod(firm-11, Dallas-based-9)
compound(firm-11, law-10)
appos(Johnson-4, firm-11)
acl(firm-11, representing-12)
amod(plaintiffs-16, several-13)
amod(plaintiffs-16, large-14)
amod(plaintiffs-16, corporate-15)
dobj(representing-12, plaintiffs-16)
punct(office-2, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#outcome

ride :: But TWA allows police dogs trained in explosive detection to ride in seats -- at half fare ./.
cc(allows-3, But-1)
nsubj(allows-3, TWA-2)
root(ROOT-0, allows-3)
compound(dogs-5, police-4)
dobj(allows-3, dogs-5)
acl(dogs-5, trained-6)
case(detection-9, in-7)
amod(detection-9, explosive-8)
nmod:in(trained-6, detection-9)
mark(ride-11, to-10)
xcomp(trained-6, ride-11)
case(seats-13, in-12)
nmod:in(ride-11, seats-13)
punct(allows-3, ---14)
case(fare-17, at-15)
det(fare-17, half-16)
nmod:at(allows-3, fare-17)
punct(allows-3, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#seats

ride :: To ride the next wave of orders in the extended boom time manufacturers expect , McDonnell is trying to capitalize on an edge it will have in the 1990s over Boeing: the ability to produce a plane powered by fuel-efficient `` prop-fan '' engines ./.
mark(ride-2, To-1)
csubj(expect-14, ride-2)
det(wave-5, the-3)
amod(wave-5, next-4)
dobj(ride-2, wave-5)
case(orders-7, of-6)
nmod:of(wave-5, orders-7)
case(manufacturers-13, in-8)
det(manufacturers-13, the-9)
amod(manufacturers-13, extended-10)
compound(manufacturers-13, boom-11)
compound(manufacturers-13, time-12)
nmod:in(wave-5, manufacturers-13)
ccomp(trying-18, expect-14)
punct(trying-18, ,-15)
nsubj(trying-18, McDonnell-16)
nsubj:xsubj(capitalize-20, McDonnell-16)
aux(trying-18, is-17)
root(ROOT-0, trying-18)
mark(capitalize-20, to-19)
xcomp(trying-18, capitalize-20)
case(edge-23, on-21)
det(edge-23, an-22)
nmod:on(capitalize-20, edge-23)
nsubj(have-26, it-24)
aux(have-26, will-25)
acl:relcl(edge-23, have-26)
case(1990s-29, in-27)
det(1990s-29, the-28)
nmod:in(have-26, 1990s-29)
case(Boeing-31, over-30)
nmod:over(1990s-29, Boeing-31)
punct(trying-18, :-32)
det(ability-34, the-33)
parataxis(trying-18, ability-34)
mark(produce-36, to-35)
acl(ability-34, produce-36)
det(plane-38, a-37)
dobj(produce-36, plane-38)
acl(plane-38, powered-39)
case(engines-45, by-40)
amod(engines-45, fuel-efficient-41)
punct(engines-45, ``-42)
compound(engines-45, prop-fan-43)
punct(engines-45, ''-44)
nmod:by(powered-39, engines-45)
punct(trying-18, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#orders

ride :: Nike and L.A. Gear rode good earnings , publicity about the Olympic Games and disappointing news from rival Reebok International to sharp gains , each on heavy trading of about 1.3 million shares ./.
compound(Gear-4, Nike-1)
cc(Nike-1, and-2)
conj:and(Nike-1, L.A.-3)
compound(Gear-4, L.A.-3)
nsubj(rode-5, Gear-4)
root(ROOT-0, rode-5)
amod(earnings-7, good-6)
dobj(rode-5, earnings-7)
punct(rode-5, ,-8)
dobj(rode-5, publicity-9)
case(Games-13, about-10)
det(Games-13, the-11)
compound(Games-13, Olympic-12)
nmod:about(publicity-9, Games-13)
cc(Games-13, and-14)
amod(news-16, disappointing-15)
nmod:about(publicity-9, news-16)
conj:and(Games-13, news-16)
case(International-20, from-17)
amod(International-20, rival-18)
compound(International-20, Reebok-19)
nmod:from(publicity-9, International-20)
case(gains-23, to-21)
amod(gains-23, sharp-22)
nmod:to(publicity-9, gains-23)
punct(publicity-9, ,-24)
appos(publicity-9, each-25)
case(trading-28, on-26)
amod(trading-28, heavy-27)
nmod:on(each-25, trading-28)
case(shares-33, of-29)
advmod(million-32, about-30)
compound(million-32, 1.3-31)
nummod(shares-33, million-32)
nmod:of(trading-28, shares-33)
punct(rode-5, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#earnings

ride :: That Mr. Lafontaine now talks of the need for higher profits for business and fewer demands from labor reflects his propensity for riding the waves of public opinion ./.
mark(talks-5, That-1)
compound(Lafontaine-3, Mr.-2)
nsubj(talks-5, Lafontaine-3)
advmod(talks-5, now-4)
csubj(reflects-19, talks-5)
case(need-8, of-6)
det(need-8, the-7)
nmod:of(talks-5, need-8)
case(profits-11, for-9)
amod(profits-11, higher-10)
nmod:for(need-8, profits-11)
case(business-13, for-12)
nmod:for(profits-11, business-13)
cc(business-13, and-14)
amod(demands-16, fewer-15)
nmod:for(profits-11, demands-16)
conj:and(business-13, demands-16)
case(labor-18, from-17)
nmod:from(demands-16, labor-18)
root(ROOT-0, reflects-19)
nmod:poss(propensity-21, his-20)
dobj(reflects-19, propensity-21)
mark(riding-23, for-22)
acl(propensity-21, riding-23)
det(waves-25, the-24)
dobj(riding-23, waves-25)
case(opinion-28, of-26)
amod(opinion-28, public-27)
nmod:of(waves-25, opinion-28)
punct(reflects-19, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#waves

ride :: With the stock now trading in the low 80s , he wonders whether investors might have benefited more using the money in another investment rather than riding the roller coaster ./.
mark(trading-5, With-1)
det(stock-3, the-2)
nsubj(trading-5, stock-3)
advmod(trading-5, now-4)
advcl(wonders-12, trading-5)
case(80s-9, in-6)
det(80s-9, the-7)
amod(80s-9, low-8)
nmod:in(trading-5, 80s-9)
punct(wonders-12, ,-10)
nsubj(wonders-12, he-11)
root(ROOT-0, wonders-12)
mark(benefited-17, whether-13)
nsubj(benefited-17, investors-14)
aux(benefited-17, might-15)
aux(benefited-17, have-16)
ccomp(wonders-12, benefited-17)
advmod(using-19, more-18)
xcomp(benefited-17, using-19)
det(money-21, the-20)
dobj(using-19, money-21)
case(investment-24, in-22)
det(investment-24, another-23)
nmod:in(using-19, investment-24)
mark(riding-27, rather-25)
mwe(rather-25, than-26)
acl(investment-24, riding-27)
det(coaster-30, the-28)
compound(coaster-30, roller-29)
dobj(riding-27, coaster-30)
punct(wonders-12, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#coaster

ride :: Other analysts say the company 's reputation with international investors has been damaged by the sentiment that Mr. Gardini 's restructuring plan rode roughshod over minority shareholders ' interests ./.
amod(analysts-2, Other-1)
nsubj(say-3, analysts-2)
root(ROOT-0, say-3)
det(company-5, the-4)
nmod:poss(reputation-7, company-5)
case(company-5, 's-6)
nsubjpass(damaged-13, reputation-7)
case(investors-10, with-8)
amod(investors-10, international-9)
nmod:with(reputation-7, investors-10)
aux(damaged-13, has-11)
auxpass(damaged-13, been-12)
ccomp(say-3, damaged-13)
case(sentiment-16, by-14)
det(sentiment-16, the-15)
nmod:agent(damaged-13, sentiment-16)
mark(rode-23, that-17)
compound(Gardini-19, Mr.-18)
nmod:poss(plan-22, Gardini-19)
case(Gardini-19, 's-20)
compound(plan-22, restructuring-21)
nsubj(rode-23, plan-22)
ccomp(sentiment-16, rode-23)
dobj(rode-23, roughshod-24)
case(interests-29, over-25)
compound(shareholders-27, minority-26)
nmod:poss(interests-29, shareholders-27)
case(shareholders-27, '-28)
nmod:over(roughshod-24, interests-29)
punct(say-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#roughshod

ride :: `` Such a big piece of the total company is riding on that pony , '' he says ./.
punct(says-18, ``-1)
amod(piece-5, Such-2)
det(piece-5, a-3)
amod(piece-5, big-4)
nsubj(riding-11, piece-5)
case(company-9, of-6)
det(company-9, the-7)
amod(company-9, total-8)
nmod:of(piece-5, company-9)
aux(riding-11, is-10)
ccomp(says-18, riding-11)
case(pony-14, on-12)
det(pony-14, that-13)
nmod:on(riding-11, pony-14)
punct(says-18, ,-15)
punct(says-18, ''-16)
nsubj(says-18, he-17)
root(ROOT-0, says-18)
punct(says-18, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#piece

ride :: `` We are beginning to ride the same boat as the U.S . , '' says Yasuo Hayashi , the director of the Ministry of International Trade and Industry 's textile division ./.
root(ROOT-0, ``-1)
nsubj(beginning-4, We-2)
nsubj:xsubj(ride-6, We-2)
aux(beginning-4, are-3)
root(``-1, beginning-4)
mark(ride-6, to-5)
xcomp(beginning-4, ride-6)
det(boat-9, the-7)
amod(boat-9, same-8)
dobj(ride-6, boat-9)
case(U.S-12, as-10)
det(U.S-12, the-11)
nmod:as(ride-6, U.S-12)
punct(beginning-4, .-13)
punct(says-3, ,-1)
punct(says-3, ''-2)
root(ROOT-0, says-3)
compound(Hayashi-5, Yasuo-4)
nsubj(says-3, Hayashi-5)
punct(Hayashi-5, ,-6)
det(director-8, the-7)
appos(Hayashi-5, director-8)
case(Ministry-11, of-9)
det(Ministry-11, the-10)
nmod:of(director-8, Ministry-11)
case(Trade-14, of-12)
compound(Trade-14, International-13)
nmod:of(Ministry-11, Trade-14)
cc(Trade-14, and-15)
nmod:poss(division-19, Industry-16)
case(Industry-16, 's-17)
compound(division-19, textile-18)
nmod:of(Ministry-11, division-19)
conj:and(Trade-14, division-19)
punct(says-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#boat

ride :: It will be interesting to observe in Atlanta whether the party 's hardest-working left-wing activists stand by Jesse Jackson , or throw him over to ride the Dukakis train toward the White House ./.
nsubj(interesting-4, It-1)
nsubj:xsubj(observe-6, It-1)
aux(interesting-4, will-2)
cop(interesting-4, be-3)
root(ROOT-0, interesting-4)
mark(observe-6, to-5)
xcomp(interesting-4, observe-6)
case(Atlanta-8, in-7)
nmod:in(observe-6, Atlanta-8)
mark(stand-16, whether-9)
det(party-11, the-10)
nmod:poss(activists-15, party-11)
case(party-11, 's-12)
amod(activists-15, hardest-working-13)
amod(activists-15, left-wing-14)
nsubj(stand-16, activists-15)
nsubj(throw-22, activists-15)
ccomp(observe-6, stand-16)
case(Jackson-19, by-17)
compound(Jackson-19, Jesse-18)
nmod:by(stand-16, Jackson-19)
punct(stand-16, ,-20)
cc(stand-16, or-21)
ccomp(observe-6, throw-22)
conj:or(stand-16, throw-22)
dobj(throw-22, him-23)
compound:prt(throw-22, over-24)
mark(ride-26, to-25)
advcl(throw-22, ride-26)
det(train-29, the-27)
compound(train-29, Dukakis-28)
dobj(ride-26, train-29)
case(House-33, toward-30)
det(House-33, the-31)
compound(House-33, White-32)
nmod:toward(ride-26, House-33)
punct(interesting-4, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#train

ride :: Iran was riding high then as its army pounded Basra , Iraq 's second largest city ./.
nsubj(riding-3, Iran-1)
aux(riding-3, was-2)
root(ROOT-0, riding-3)
advmod(riding-3, high-4)
advmod(pounded-9, then-5)
mark(pounded-9, as-6)
nmod:poss(army-8, its-7)
nsubj(pounded-9, army-8)
advcl(high-4, pounded-9)
dobj(pounded-9, Basra-10)
punct(Basra-10, ,-11)
nmod:poss(city-16, Iraq-12)
case(Iraq-12, 's-13)
amod(city-16, second-14)
amod(city-16, largest-15)
appos(Basra-10, city-16)
punct(riding-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#iran

ride :: John Matt , a 25-year-old stock-index options trader , started riding his bicycle to work to save money , then could n't afford to replace it when it was stolen ./.
compound(Matt-2, John-1)
nsubj(started-10, Matt-2)
punct(Matt-2, ,-3)
det(trader-8, a-4)
amod(trader-8, 25-year-old-5)
compound(trader-8, stock-index-6)
compound(trader-8, options-7)
appos(Matt-2, trader-8)
punct(Matt-2, ,-9)
root(ROOT-0, started-10)
xcomp(started-10, riding-11)
nmod:poss(bicycle-13, his-12)
dobj(riding-11, bicycle-13)
mark(work-15, to-14)
advcl(riding-11, work-15)
mark(save-17, to-16)
xcomp(work-15, save-17)
dobj(save-17, money-18)
punct(started-10, ,-19)
advmod(afford-23, then-20)
aux(afford-23, could-21)
neg(afford-23, n't-22)
parataxis(started-10, afford-23)
mark(replace-25, to-24)
xcomp(afford-23, replace-25)
dobj(replace-25, it-26)
advmod(stolen-30, when-27)
nsubjpass(stolen-30, it-28)
auxpass(stolen-30, was-29)
advcl(replace-25, stolen-30)
punct(started-10, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#bicycle

ride :: A letter from Mayor Ed Koch went out early this month to chief executives of 11 , 000 companies , urging them to reduce the city 's traffic woes by encouraging employees to ride subways ./.
det(letter-2, A-1)
nsubj(went-7, letter-2)
case(Koch-6, from-3)
compound(Koch-6, Mayor-4)
compound(Koch-6, Ed-5)
nmod:from(letter-2, Koch-6)
root(ROOT-0, went-7)
advmod(went-7, out-8)
advmod(month-11, early-9)
det(month-11, this-10)
nmod:tmod(went-7, month-11)
case(executives-14, to-12)
amod(executives-14, chief-13)
nmod:to(went-7, executives-14)
case(11-16, of-15)
nmod:of(executives-14, 11-16)
punct(went-7, ,-17)
nummod(companies-19, 000-18)
dobj(went-7, companies-19)
punct(companies-19, ,-20)
acl(companies-19, urging-21)
dobj(urging-21, them-22)
nsubj:xsubj(reduce-24, them-22)
mark(reduce-24, to-23)
xcomp(urging-21, reduce-24)
det(city-26, the-25)
nmod:poss(woes-29, city-26)
case(city-26, 's-27)
compound(woes-29, traffic-28)
dobj(reduce-24, woes-29)
mark(encouraging-31, by-30)
advcl(reduce-24, encouraging-31)
dobj(encouraging-31, employees-32)
nsubj:xsubj(ride-34, employees-32)
mark(ride-34, to-33)
xcomp(encouraging-31, ride-34)
dobj(ride-34, subways-35)
punct(went-7, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#subways

ride :: Domestic aluminum companies have been riding an upturn for the past 18 months , and are now operating at 104 % of capacity , a statistic that indicates previously written-off facilities have been brought back on line ./.
amod(companies-3, Domestic-1)
compound(companies-3, aluminum-2)
nsubj(riding-6, companies-3)
nsubj(operating-18, companies-3)
aux(riding-6, have-4)
aux(riding-6, been-5)
root(ROOT-0, riding-6)
det(upturn-8, an-7)
dobj(riding-6, upturn-8)
case(months-13, for-9)
det(months-13, the-10)
amod(months-13, past-11)
nummod(months-13, 18-12)
nmod:for(riding-6, months-13)
punct(riding-6, ,-14)
cc(riding-6, and-15)
aux(operating-18, are-16)
advmod(operating-18, now-17)
conj:and(riding-6, operating-18)
case(%-21, at-19)
nummod(%-21, 104-20)
nmod:at(operating-18, %-21)
case(capacity-23, of-22)
nmod:of(%-21, capacity-23)
punct(operating-18, ,-24)
det(statistic-26, a-25)
nsubj(indicates-28, statistic-26)
nsubjpass(brought-34, statistic-26)
ref(statistic-26, that-27)
acl:relcl(statistic-26, indicates-28)
advmod(facilities-31, previously-29)
amod(facilities-31, written-off-30)
dobj(indicates-28, facilities-31)
aux(brought-34, have-32)
auxpass(brought-34, been-33)
parataxis(operating-18, brought-34)
advmod(brought-34, back-35)
case(line-37, on-36)
nmod:on(brought-34, line-37)
punct(riding-6, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#upturn

ride :: Along the way he graduated from Georgia State University , worked two years as an eighth-grade math teacher and developed a passion for riding -- and compulsively tinkering with -- dirt bikes ./.
case(way-3, Along-1)
det(way-3, the-2)
nmod:along(worked-11, way-3)
nsubj(graduated-5, he-4)
acl:relcl(way-3, graduated-5)
case(University-9, from-6)
compound(University-9, Georgia-7)
compound(University-9, State-8)
nmod:from(graduated-5, University-9)
punct(worked-11, ,-10)
root(ROOT-0, worked-11)
nummod(years-13, two-12)
nmod:tmod(worked-11, years-13)
case(teacher-18, as-14)
det(teacher-18, an-15)
amod(teacher-18, eighth-grade-16)
compound(teacher-18, math-17)
nmod:as(worked-11, teacher-18)
cc(worked-11, and-19)
conj:and(worked-11, developed-20)
det(passion-22, a-21)
dobj(developed-20, passion-22)
case(riding-24, for-23)
nmod:for(passion-22, riding-24)
punct(worked-11, ---25)
cc(worked-11, and-26)
advmod(tinkering-28, compulsively-27)
conj:and(worked-11, tinkering-28)
case(bikes-32, with-29)
punct(bikes-32, ---30)
compound(bikes-32, dirt-31)
nmod:with(tinkering-28, bikes-32)
punct(worked-11, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

ride :: And now , you are crammed into the Kwik Kopy bus , riding from Houston Intercontinental Airport to an isolated campus in the woods near Cyprus , Texas ./.
cc(crammed-6, And-1)
advmod(crammed-6, now-2)
punct(crammed-6, ,-3)
nsubjpass(crammed-6, you-4)
auxpass(crammed-6, are-5)
root(ROOT-0, crammed-6)
case(bus-11, into-7)
det(bus-11, the-8)
compound(bus-11, Kwik-9)
compound(bus-11, Kopy-10)
nmod:into(crammed-6, bus-11)
punct(crammed-6, ,-12)
xcomp(crammed-6, riding-13)
case(Airport-17, from-14)
compound(Airport-17, Houston-15)
compound(Airport-17, Intercontinental-16)
nmod:from(riding-13, Airport-17)
case(campus-21, to-18)
det(campus-21, an-19)
amod(campus-21, isolated-20)
nmod:to(riding-13, campus-21)
case(woods-24, in-22)
det(woods-24, the-23)
nmod:in(campus-21, woods-24)
case(Cyprus-26, near-25)
nmod:near(woods-24, Cyprus-26)
punct(Cyprus-26, ,-27)
appos(Cyprus-26, Texas-28)
punct(crammed-6, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#airport

ride :: The House of Representatives , where some 98 % of the Members ride the PAC trail back into office , is looking more and more like a shoddy place ./.
det(House-2, The-1)
nsubj(looking-22, House-2)
case(Representatives-4, of-3)
nmod:of(House-2, Representatives-4)
punct(House-2, ,-5)
advmod(ride-13, where-6)
advmod(98-8, some-7)
nummod(%-9, 98-8)
nsubj(ride-13, %-9)
case(Members-12, of-10)
det(Members-12, the-11)
nmod:of(%-9, Members-12)
acl:relcl(House-2, ride-13)
det(trail-16, the-14)
compound(trail-16, PAC-15)
dobj(ride-13, trail-16)
advmod(ride-13, back-17)
case(office-19, into-18)
nmod:into(back-17, office-19)
punct(House-2, ,-20)
aux(looking-22, is-21)
root(ROOT-0, looking-22)
advmod(place-29, more-23)
cc(more-23, and-24)
conj:and(more-23, more-25)
advmod(place-29, more-25)
case(place-29, like-26)
det(place-29, a-27)
amod(place-29, shoddy-28)
nmod:like(looking-22, place-29)
punct(looking-22, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#trail

ride :: But some holdouts still ride into the arena sporting soft white Stetsons , which provide scant protection against opponents wielding 60-inch fiberglass mallets with hard rubber heads ./.
cc(ride-5, But-1)
det(holdouts-3, some-2)
nsubj(ride-5, holdouts-3)
advmod(ride-5, still-4)
root(ROOT-0, ride-5)
case(arena-8, into-6)
det(arena-8, the-7)
nmod:into(ride-5, arena-8)
acl(arena-8, sporting-9)
amod(Stetsons-12, soft-10)
amod(Stetsons-12, white-11)
dobj(sporting-9, Stetsons-12)
nsubj(provide-15, Stetsons-12)
punct(Stetsons-12, ,-13)
ref(Stetsons-12, which-14)
acl:relcl(Stetsons-12, provide-15)
amod(protection-17, scant-16)
dobj(provide-15, protection-17)
case(opponents-19, against-18)
nmod:against(protection-17, opponents-19)
acl(opponents-19, wielding-20)
amod(mallets-23, 60-inch-21)
compound(mallets-23, fiberglass-22)
dobj(wielding-20, mallets-23)
case(heads-27, with-24)
amod(heads-27, hard-25)
compound(heads-27, rubber-26)
nmod:with(wielding-20, heads-27)
punct(ride-5, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#holdouts

ride :: `` At last insane , at last at peace '' -- these are the thoughts a woman riding a bicycle beams up to the angels ./.
root(ROOT-0, ``-1)
case(insane-4, At-2)
amod(insane-4, last-3)
nmod:at(thoughts-15, insane-4)
punct(thoughts-15, ,-5)
case(last-7, at-6)
advcl(thoughts-15, last-7)
case(peace-9, at-8)
nmod:at(last-7, peace-9)
punct(peace-9, ''-10)
punct(thoughts-15, ---11)
nsubj(thoughts-15, these-12)
cop(thoughts-15, are-13)
det(thoughts-15, the-14)
root(``-1, thoughts-15)
det(woman-17, a-16)
nsubj(beams-21, woman-17)
acl(woman-17, riding-18)
det(bicycle-20, a-19)
dobj(riding-18, bicycle-20)
acl:relcl(thoughts-15, beams-21)
compound:prt(beams-21, up-22)
case(angels-25, to-23)
det(angels-25, the-24)
nmod:to(beams-21, angels-25)
punct(thoughts-15, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#bicycle

ride :: Miss Walker was riding in the Jeep at the time of the accident ./.
compound(Walker-2, Miss-1)
nsubj(riding-4, Walker-2)
aux(riding-4, was-3)
root(ROOT-0, riding-4)
case(Jeep-7, in-5)
det(Jeep-7, the-6)
nmod:in(riding-4, Jeep-7)
case(time-10, at-8)
det(time-10, the-9)
nmod:at(riding-4, time-10)
case(accident-13, of-11)
det(accident-13, the-12)
nmod:of(time-10, accident-13)
punct(riding-4, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#walker

ride :: Thus , Forbes Inc. does n't try to stop Chairman Malcolm Forbes from ballooning or riding motorcycles despite the dangers ./.
advmod(try-7, Thus-1)
punct(try-7, ,-2)
compound(Inc.-4, Forbes-3)
nsubj(try-7, Inc.-4)
nsubj:xsubj(stop-9, Inc.-4)
aux(try-7, does-5)
neg(try-7, n't-6)
root(ROOT-0, try-7)
mark(stop-9, to-8)
xcomp(try-7, stop-9)
compound(Forbes-12, Chairman-10)
compound(Forbes-12, Malcolm-11)
dobj(stop-9, Forbes-12)
case(ballooning-14, from-13)
nmod:from(stop-9, ballooning-14)
cc(ballooning-14, or-15)
compound(motorcycles-17, riding-16)
nmod:from(stop-9, motorcycles-17)
conj:or(ballooning-14, motorcycles-17)
case(dangers-20, despite-18)
det(dangers-20, the-19)
nmod:despite(stop-9, dangers-20)
punct(try-7, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

ride :: They are tales a salesman overhears as he rides in the third-class car of a train through Russia 's Jewish Pale of Settlement ./.
nsubj(tales-3, They-1)
cop(tales-3, are-2)
root(ROOT-0, tales-3)
det(salesman-5, a-4)
nsubj(overhears-6, salesman-5)
acl:relcl(tales-3, overhears-6)
mark(rides-9, as-7)
nsubj(rides-9, he-8)
advcl(overhears-6, rides-9)
case(car-13, in-10)
det(car-13, the-11)
amod(car-13, third-class-12)
nmod:in(rides-9, car-13)
case(train-16, of-14)
det(train-16, a-15)
nmod:of(car-13, train-16)
case(Pale-21, through-17)
nmod:poss(Pale-21, Russia-18)
case(Russia-18, 's-19)
amod(Pale-21, Jewish-20)
nmod:through(rides-9, Pale-21)
case(Settlement-23, of-22)
nmod:of(Pale-21, Settlement-23)
punct(tales-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#he

ride :: Then , their land is appropriated by white men , their child dies , and Alessandro is shot to death for mistakenly riding a settler 's horse ./.
advmod(appropriated-6, Then-1)
punct(appropriated-6, ,-2)
nmod:poss(land-4, their-3)
nsubjpass(appropriated-6, land-4)
auxpass(appropriated-6, is-5)
root(ROOT-0, appropriated-6)
case(men-9, by-7)
amod(men-9, white-8)
nmod:agent(appropriated-6, men-9)
punct(dies-13, ,-10)
nmod:poss(child-12, their-11)
nsubj(dies-13, child-12)
dep(appropriated-6, dies-13)
punct(dies-13, ,-14)
cc(appropriated-6, and-15)
nsubjpass(shot-18, Alessandro-16)
auxpass(shot-18, is-17)
conj:and(appropriated-6, shot-18)
case(death-20, to-19)
nmod:to(shot-18, death-20)
mark(riding-23, for-21)
advmod(riding-23, mistakenly-22)
advcl(shot-18, riding-23)
det(settler-25, a-24)
nmod:poss(horse-27, settler-25)
case(settler-25, 's-26)
dobj(riding-23, horse-27)
punct(appropriated-6, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#horse

ride :: They ride around ./.
nsubj(ride-2, They-1)
root(ROOT-0, ride-2)
advmod(ride-2, around-3)
punct(ride-2, .-4)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#they

ride :: Free riding occurs when a member of an underwriting account withholds part of a public offering and then resells it at a profit ./.
amod(riding-2, Free-1)
nsubj(occurs-3, riding-2)
root(ROOT-0, occurs-3)
advmod(withholds-11, when-4)
det(member-6, a-5)
nsubj(withholds-11, member-6)
nsubj(resells-19, member-6)
case(account-10, of-7)
det(account-10, an-8)
compound(account-10, underwriting-9)
nmod:of(member-6, account-10)
advcl(occurs-3, withholds-11)
dobj(withholds-11, part-12)
case(offering-16, of-13)
det(offering-16, a-14)
amod(offering-16, public-15)
nmod:of(part-12, offering-16)
cc(withholds-11, and-17)
advmod(resells-19, then-18)
advcl(occurs-3, resells-19)
conj:and(withholds-11, resells-19)
dobj(resells-19, it-20)
case(profit-23, at-21)
det(profit-23, a-22)
nmod:at(resells-19, profit-23)
punct(occurs-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

ride :: Ashland Oil Inc . , riding an upturn in the chemicals business , posted sharply higher fiscal second-quarter earnings ./.
compound(Inc-3, Ashland-1)
compound(Inc-3, Oil-2)
root(ROOT-0, Inc-3)
punct(Inc-3, .-4)
punct(posted-10, ,-1)
advcl(posted-10, riding-2)
det(upturn-4, an-3)
dobj(riding-2, upturn-4)
case(business-8, in-5)
det(business-8, the-6)
compound(business-8, chemicals-7)
nmod:in(upturn-4, business-8)
punct(posted-10, ,-9)
root(ROOT-0, posted-10)
advmod(higher-12, sharply-11)
amod(earnings-15, higher-12)
amod(earnings-15, fiscal-13)
compound(earnings-15, second-quarter-14)
dobj(posted-10, earnings-15)
punct(posted-10, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#upturn

ride :: For example , director Dolores D. Wharton was shown riding a bike ./.
case(example-2, For-1)
nmod:for(shown-9, example-2)
punct(shown-9, ,-3)
compound(Wharton-7, director-4)
compound(Wharton-7, Dolores-5)
compound(Wharton-7, D.-6)
nsubjpass(shown-9, Wharton-7)
auxpass(shown-9, was-8)
root(ROOT-0, shown-9)
xcomp(shown-9, riding-10)
det(bike-12, a-11)
dobj(riding-10, bike-12)
punct(shown-9, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#bike

ride :: The media have given him a ticket to ride , but they 're unlikely to leave him in the driver 's seat for long ./.
det(media-2, The-1)
nsubj(given-4, media-2)
aux(given-4, have-3)
root(ROOT-0, given-4)
iobj(given-4, him-5)
det(ticket-7, a-6)
dobj(given-4, ticket-7)
mark(ride-9, to-8)
acl(ticket-7, ride-9)
punct(given-4, ,-10)
cc(given-4, but-11)
nsubj(unlikely-14, they-12)
nsubj:xsubj(leave-16, they-12)
cop(unlikely-14, 're-13)
conj:but(given-4, unlikely-14)
mark(leave-16, to-15)
xcomp(unlikely-14, leave-16)
dobj(leave-16, him-17)
case(seat-22, in-18)
det(driver-20, the-19)
nmod:poss(seat-22, driver-20)
case(driver-20, 's-21)
nmod:in(leave-16, seat-22)
case(long-24, for-23)
nmod:for(leave-16, long-24)
punct(given-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

ride :: I returned to the yard to keep an eye on my children , who delight in riding their scooters in the road if I will stand watch ./.
nsubj(returned-2, I-1)
nsubj:xsubj(keep-7, I-1)
root(ROOT-0, returned-2)
case(yard-5, to-3)
det(yard-5, the-4)
nmod:to(returned-2, yard-5)
mark(keep-7, to-6)
xcomp(returned-2, keep-7)
det(eye-9, an-8)
dobj(keep-7, eye-9)
case(children-12, on-10)
nmod:poss(children-12, my-11)
nmod:on(keep-7, children-12)
nsubj(delight-15, children-12)
punct(children-12, ,-13)
ref(children-12, who-14)
acl:relcl(children-12, delight-15)
mark(riding-17, in-16)
advcl(delight-15, riding-17)
nmod:poss(scooters-19, their-18)
dobj(riding-17, scooters-19)
case(road-22, in-20)
det(road-22, the-21)
nmod:in(riding-17, road-22)
mark(stand-26, if-23)
nsubj(stand-26, I-24)
aux(stand-26, will-25)
advcl(delight-15, stand-26)
dobj(stand-26, watch-27)
punct(returned-2, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#scooters

ride :: Children rode bicycles , played street sports , and had toys that required effort ./.
nsubj(rode-2, Children-1)
nsubj(played-5, Children-1)
nsubj(had-10, Children-1)
root(ROOT-0, rode-2)
dobj(rode-2, bicycles-3)
punct(rode-2, ,-4)
conj:and(rode-2, played-5)
compound(sports-7, street-6)
dobj(played-5, sports-7)
punct(rode-2, ,-8)
cc(rode-2, and-9)
conj:and(rode-2, had-10)
dobj(had-10, toys-11)
nsubj(required-13, toys-11)
ref(toys-11, that-12)
acl:relcl(toys-11, required-13)
dobj(required-13, effort-14)
punct(rode-2, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#bicycles

ride :: Heating-oil futures , currently experiencing little demand because of a strike in New York harbor , had been riding high early in the heating season ./.
compound(futures-2, Heating-oil-1)
nsubj(riding-19, futures-2)
punct(futures-2, ,-3)
advmod(experiencing-5, currently-4)
acl(futures-2, experiencing-5)
amod(demand-7, little-6)
dobj(experiencing-5, demand-7)
case(strike-11, because-8)
mwe(because-8, of-9)
det(strike-11, a-10)
nmod:because_of(experiencing-5, strike-11)
case(harbor-15, in-12)
compound(harbor-15, New-13)
compound(harbor-15, York-14)
nmod:in(strike-11, harbor-15)
punct(futures-2, ,-16)
aux(riding-19, had-17)
aux(riding-19, been-18)
root(ROOT-0, riding-19)
xcomp(riding-19, high-20)
advmod(high-20, early-21)
case(season-25, in-22)
det(season-25, the-23)
compound(season-25, heating-24)
nmod:in(early-21, season-25)
punct(riding-19, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#futures

ride :: Though riding the luge is a fairly dangerous sport , the scariest moment for the Philippines ' Mr. Ocampo came a week before the Olympics when his credentials to participate were temporarily blocked by Philippine bureaucrats ./.
mark(sport-9, Though-1)
csubj(sport-9, riding-2)
det(luge-4, the-3)
dobj(riding-2, luge-4)
cop(sport-9, is-5)
det(sport-9, a-6)
advmod(dangerous-8, fairly-7)
amod(sport-9, dangerous-8)
advcl(came-20, sport-9)
punct(came-20, ,-10)
det(moment-13, the-11)
amod(moment-13, scariest-12)
nsubj(came-20, moment-13)
case(Ocampo-19, for-14)
det(Philippines-16, the-15)
nmod:poss(Ocampo-19, Philippines-16)
case(Philippines-16, '-17)
compound(Ocampo-19, Mr.-18)
nmod:for(moment-13, Ocampo-19)
root(ROOT-0, came-20)
det(week-22, a-21)
nmod:tmod(came-20, week-22)
case(Olympics-25, before-23)
det(Olympics-25, the-24)
nmod:before(came-20, Olympics-25)
advmod(blocked-33, when-26)
nmod:poss(credentials-28, his-27)
nsubjpass(blocked-33, credentials-28)
mark(participate-30, to-29)
acl(credentials-28, participate-30)
auxpass(blocked-33, were-31)
advmod(blocked-33, temporarily-32)
advcl(came-20, blocked-33)
case(bureaucrats-36, by-34)
amod(bureaucrats-36, Philippine-35)
nmod:agent(blocked-33, bureaucrats-36)
punct(came-20, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#luge

ride :: Never mind that , with the weight of America 's expectations riding on his mere four years ' pro experience , he made crucial errors in the big game last year ./.
neg(mind-2, Never-1)
root(ROOT-0, mind-2)
mark(made-23, that-3)
punct(made-23, ,-4)
case(weight-7, with-5)
det(weight-7, the-6)
nmod:with(made-23, weight-7)
case(expectations-11, of-8)
nmod:poss(expectations-11, America-9)
case(America-9, 's-10)
nmod:of(weight-7, expectations-11)
acl(weight-7, riding-12)
case(experience-20, on-13)
nmod:poss(years-17, his-14)
amod(years-17, mere-15)
nummod(years-17, four-16)
nmod:poss(experience-20, years-17)
case(years-17, '-18)
amod(experience-20, pro-19)
nmod:on(riding-12, experience-20)
punct(made-23, ,-21)
nsubj(made-23, he-22)
ccomp(mind-2, made-23)
amod(errors-25, crucial-24)
dobj(made-23, errors-25)
case(game-29, in-26)
det(game-29, the-27)
amod(game-29, big-28)
nmod:in(made-23, game-29)
amod(year-31, last-30)
nmod:tmod(made-23, year-31)
punct(mind-2, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#experience

ride :: For now , he rides around his opponents like a modern Jeb Stuart , staging lightning raids before returning to safety in the South ./.
case(now-2, For-1)
nmod:for(rides-5, now-2)
punct(rides-5, ,-3)
nsubj(rides-5, he-4)
root(ROOT-0, rides-5)
case(opponents-8, around-6)
nmod:poss(opponents-8, his-7)
nmod:around(rides-5, opponents-8)
case(Stuart-13, like-9)
det(Stuart-13, a-10)
amod(Stuart-13, modern-11)
compound(Stuart-13, Jeb-12)
nmod:like(opponents-8, Stuart-13)
punct(Stuart-13, ,-14)
compound(raids-17, staging-15)
compound(raids-17, lightning-16)
appos(Stuart-13, raids-17)
mark(returning-19, before-18)
acl(raids-17, returning-19)
case(safety-21, to-20)
nmod:to(returning-19, safety-21)
case(South-24, in-22)
det(South-24, the-23)
nmod:in(safety-21, South-24)
punct(rides-5, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#he

ride :: And with the economy so far apparently riding out the crash , U.S. companies seem less worried about the threat of an imminent recession that might have kept them from gambling heavily on takeovers ./.
cc(seem-15, And-1)
case(economy-4, with-2)
det(economy-4, the-3)
nmod:with(seem-15, economy-4)
advmod(far-6, so-5)
advmod(riding-8, far-6)
advmod(riding-8, apparently-7)
acl(economy-4, riding-8)
compound:prt(riding-8, out-9)
det(crash-11, the-10)
dobj(riding-8, crash-11)
punct(seem-15, ,-12)
compound(companies-14, U.S.-13)
nsubj(seem-15, companies-14)
root(ROOT-0, seem-15)
advmod(worried-17, less-16)
xcomp(seem-15, worried-17)
case(threat-20, about-18)
det(threat-20, the-19)
nmod:about(worried-17, threat-20)
case(recession-24, of-21)
det(recession-24, an-22)
amod(recession-24, imminent-23)
nmod:of(threat-20, recession-24)
nsubj(kept-28, recession-24)
ref(recession-24, that-25)
aux(kept-28, might-26)
aux(kept-28, have-27)
acl:relcl(recession-24, kept-28)
dobj(kept-28, them-29)
mark(gambling-31, from-30)
advcl(kept-28, gambling-31)
advmod(gambling-31, heavily-32)
case(takeovers-34, on-33)
nmod:on(gambling-31, takeovers-34)
punct(seem-15, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#crash

ride :: Mr. Chun , one DJP official said , fought the resignations , `` believing he could just ride out the storm . ''/''
compound(Chun-2, Mr.-1)
nsubj(said-7, Chun-2)
punct(Chun-2, ,-3)
nummod(official-6, one-4)
compound(official-6, DJP-5)
appos(Chun-2, official-6)
root(ROOT-0, said-7)
punct(said-7, ,-8)
dep(said-7, fought-9)
det(resignations-11, the-10)
dobj(fought-9, resignations-11)
punct(fought-9, ,-12)
punct(fought-9, ``-13)
xcomp(fought-9, believing-14)
nsubj(ride-18, he-15)
aux(ride-18, could-16)
advmod(ride-18, just-17)
ccomp(believing-14, ride-18)
compound:prt(ride-18, out-19)
det(storm-21, the-20)
dobj(ride-18, storm-21)
punct(said-7, .-22)
punct(said-7, ''-23)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: ride#storm

ride :: Mohammed Abu-Helal , a West Bank farmer , used to ride his donkey across the river on Fridays to attend an east-bank mosque ./.
compound(Abu-Helal-2, Mohammed-1)
nsubj(used-9, Abu-Helal-2)
nsubj:xsubj(ride-11, Abu-Helal-2)
punct(Abu-Helal-2, ,-3)
det(farmer-7, a-4)
compound(farmer-7, West-5)
compound(farmer-7, Bank-6)
appos(Abu-Helal-2, farmer-7)
punct(Abu-Helal-2, ,-8)
root(ROOT-0, used-9)
mark(ride-11, to-10)
xcomp(used-9, ride-11)
nmod:poss(donkey-13, his-12)
dobj(ride-11, donkey-13)
nsubj:xsubj(attend-20, donkey-13)
case(river-16, across-14)
det(river-16, the-15)
nmod:across(ride-11, river-16)
case(Fridays-18, on-17)
nmod:on(ride-11, Fridays-18)
mark(attend-20, to-19)
xcomp(ride-11, attend-20)
det(mosque-23, an-21)
amod(mosque-23, east-bank-22)
dobj(attend-20, mosque-23)
punct(used-9, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#donkey

ride :: This might include such cream-puff outings as hiking in the Alps or riding elephants in Thailand ./.
nsubj(include-3, This-1)
aux(include-3, might-2)
root(ROOT-0, include-3)
amod(outings-6, such-4)
amod(outings-6, cream-puff-5)
dobj(include-3, outings-6)
case(hiking-8, as-7)
nmod:as(outings-6, hiking-8)
case(Alps-11, in-9)
det(Alps-11, the-10)
nmod:in(hiking-8, Alps-11)
cc(hiking-8, or-12)
compound(elephants-14, riding-13)
nmod:as(outings-6, elephants-14)
conj:or(hiking-8, elephants-14)
case(Thailand-16, in-15)
nmod:in(elephants-14, Thailand-16)
punct(include-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

ride :: Frequently in bad contemporary movies , when men are n't undressing onscreen , they are riding around in cars with their buddies -- or avenging their deaths ./.
advmod(riding-16, Frequently-1)
case(movies-5, in-2)
amod(movies-5, bad-3)
amod(movies-5, contemporary-4)
nmod:in(riding-16, movies-5)
punct(movies-5, ,-6)
advmod(undressing-11, when-7)
nsubj(undressing-11, men-8)
aux(undressing-11, are-9)
neg(undressing-11, n't-10)
acl:relcl(movies-5, undressing-11)
xcomp(undressing-11, onscreen-12)
punct(movies-5, ,-13)
nsubj(riding-16, they-14)
nsubj(avenging-25, they-14)
aux(riding-16, are-15)
root(ROOT-0, riding-16)
advmod(riding-16, around-17)
case(cars-19, in-18)
nmod:in(riding-16, cars-19)
case(buddies-22, with-20)
nmod:poss(buddies-22, their-21)
nmod:with(riding-16, buddies-22)
punct(riding-16, ---23)
cc(riding-16, or-24)
conj:or(riding-16, avenging-25)
nmod:poss(deaths-27, their-26)
dobj(avenging-25, deaths-27)
punct(riding-16, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#they

ride :: Legend holds that the Jew immediately rode out of town , realizing that he was no match for such a shrewd population ./.
nsubj(holds-2, Legend-1)
root(ROOT-0, holds-2)
mark(rode-7, that-3)
det(Jew-5, the-4)
nsubj(rode-7, Jew-5)
advmod(rode-7, immediately-6)
ccomp(holds-2, rode-7)
case(town-10, out-8)
mwe(out-8, of-9)
nmod:out_of(rode-7, town-10)
punct(rode-7, ,-11)
xcomp(rode-7, realizing-12)
mark(match-17, that-13)
nsubj(match-17, he-14)
cop(match-17, was-15)
neg(match-17, no-16)
ccomp(realizing-12, match-17)
case(population-22, for-18)
amod(population-22, such-19)
det(population-22, a-20)
amod(population-22, shrewd-21)
nmod:for(match-17, population-22)
punct(holds-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#jew

ride :: Riding for pleasure and fitness , horse shows , eventing , rodeos , racing , trail riding , etc . , all involve a significant number of participants and spectators ./.
root(ROOT-0, Riding-1)
case(pleasure-3, for-2)
nmod:for(Riding-1, pleasure-3)
cc(pleasure-3, and-4)
nmod:for(Riding-1, fitness-5)
conj:and(pleasure-3, fitness-5)
punct(Riding-1, ,-6)
compound(shows-8, horse-7)
root(,-6, shows-8)
punct(shows-8, ,-9)
root(,-9, eventing-10)
punct(eventing-10, ,-11)
root(,-11, rodeos-12)
punct(rodeos-12, ,-13)
conj(rodeos-12, racing-14)
punct(rodeos-12, ,-15)
compound(riding-17, trail-16)
conj(rodeos-12, riding-17)
punct(rodeos-12, ,-18)
conj(rodeos-12, etc-19)
punct(rodeos-12, .-20)
punct(involve-3, ,-1)
nsubj(involve-3, all-2)
root(ROOT-0, involve-3)
det(number-6, a-4)
amod(number-6, significant-5)
dobj(involve-3, number-6)
case(participants-8, of-7)
nmod:of(number-6, participants-8)
cc(participants-8, and-9)
nmod:of(number-6, spectators-10)
conj:and(participants-8, spectators-10)
punct(involve-3, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#pleasure

ride :: `` We were contacted by people who smoke our products and ride these trains , '' he added ./.
punct(added-18, ``-1)
nsubjpass(contacted-4, We-2)
auxpass(contacted-4, were-3)
ccomp(added-18, contacted-4)
case(people-6, by-5)
nmod:agent(contacted-4, people-6)
nsubj(smoke-8, people-6)
nsubj(ride-12, people-6)
ref(people-6, who-7)
acl:relcl(people-6, smoke-8)
nmod:poss(products-10, our-9)
dobj(smoke-8, products-10)
cc(smoke-8, and-11)
acl:relcl(people-6, ride-12)
conj:and(smoke-8, ride-12)
det(trains-14, these-13)
dobj(ride-12, trains-14)
punct(added-18, ,-15)
punct(added-18, ''-16)
nsubj(added-18, he-17)
root(ROOT-0, added-18)
punct(added-18, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#trains

ride :: Says Romy Enriquez , an independent candidate for mayor of Zamboanga City: `` You might think Cory is still a candidate the way people like to ride on her popularity . ''/''
root(ROOT-0, Says-1)
compound(Enriquez-3, Romy-2)
nsubj(Says-1, Enriquez-3)
punct(Enriquez-3, ,-4)
det(candidate-7, an-5)
amod(candidate-7, independent-6)
appos(Enriquez-3, candidate-7)
case(mayor-9, for-8)
nmod:for(candidate-7, mayor-9)
case(City-12, of-10)
compound(City-12, Zamboanga-11)
nmod:of(mayor-9, City-12)
punct(Says-1, :-13)
punct(Says-1, ``-14)
nsubj(think-17, You-15)
aux(think-17, might-16)
ccomp(Says-1, think-17)
nsubj(candidate-22, Cory-18)
cop(candidate-22, is-19)
advmod(candidate-22, still-20)
det(candidate-22, a-21)
ccomp(think-17, candidate-22)
det(way-24, the-23)
dobj(candidate-22, way-24)
dep(way-24, people-25)
mark(ride-28, like-26)
mark(ride-28, to-27)
acl(people-25, ride-28)
case(popularity-31, on-29)
nmod:poss(popularity-31, her-30)
nmod:on(ride-28, popularity-31)
punct(Says-1, .-32)
punct(Says-1, ''-33)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: ride#popularity

ride :: I would n't want my kid to ride in one , '' he says ./.
nsubj(want-4, I-1)
aux(want-4, would-2)
neg(want-4, n't-3)
ccomp(says-14, want-4)
nmod:poss(kid-6, my-5)
dobj(want-4, kid-6)
nsubj:xsubj(ride-8, kid-6)
mark(ride-8, to-7)
xcomp(want-4, ride-8)
case(one-10, in-9)
nmod:in(ride-8, one-10)
punct(says-14, ,-11)
punct(says-14, ''-12)
nsubj(says-14, he-13)
root(ROOT-0, says-14)
punct(says-14, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#kid

ride :: They ride from their homes in Beverly Hills to the coast on weekends ./.
nsubj(ride-2, They-1)
root(ROOT-0, ride-2)
case(homes-5, from-3)
nmod:poss(homes-5, their-4)
nmod:from(ride-2, homes-5)
case(Hills-8, in-6)
compound(Hills-8, Beverly-7)
nmod:in(homes-5, Hills-8)
case(coast-11, to-9)
det(coast-11, the-10)
nmod:to(ride-2, coast-11)
case(weekends-13, on-12)
nmod:on(coast-11, weekends-13)
punct(ride-2, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#they

ride :: Dr. Pizzo , who previewed his study at the Fourth International AIDS Conference in Stockholm , has said one little boy resumed riding his bike on AZT therapy ./.
compound(Pizzo-2, Dr.-1)
nsubj(previewed-5, Pizzo-2)
nsubj(said-18, Pizzo-2)
punct(Pizzo-2, ,-3)
ref(Pizzo-2, who-4)
acl:relcl(Pizzo-2, previewed-5)
nmod:poss(study-7, his-6)
dobj(previewed-5, study-7)
case(Conference-13, at-8)
det(Conference-13, the-9)
amod(Conference-13, Fourth-10)
amod(Conference-13, International-11)
compound(Conference-13, AIDS-12)
nmod:at(previewed-5, Conference-13)
case(Stockholm-15, in-14)
nmod:in(Conference-13, Stockholm-15)
punct(Pizzo-2, ,-16)
aux(said-18, has-17)
root(ROOT-0, said-18)
nummod(boy-21, one-19)
amod(boy-21, little-20)
nsubj(resumed-22, boy-21)
ccomp(said-18, resumed-22)
xcomp(resumed-22, riding-23)
nmod:poss(bike-25, his-24)
dobj(riding-23, bike-25)
case(therapy-28, on-26)
compound(therapy-28, AZT-27)
nmod:on(riding-23, therapy-28)
punct(said-18, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#bike

ride :: Lots of people ride bicycles , joggers are out in fair numbers , and the last time I passed a tennis complex , all the courts were full ./.
nsubj(ride-4, Lots-1)
case(people-3, of-2)
nmod:of(Lots-1, people-3)
root(ROOT-0, ride-4)
dobj(ride-4, bicycles-5)
punct(ride-4, ,-6)
nsubj(numbers-12, joggers-7)
cop(numbers-12, are-8)
advmod(numbers-12, out-9)
case(numbers-12, in-10)
amod(numbers-12, fair-11)
ccomp(ride-4, numbers-12)
punct(ride-4, ,-13)
cc(ride-4, and-14)
det(time-17, the-15)
amod(time-17, last-16)
nmod:tmod(full-28, time-17)
nsubj(passed-19, I-18)
acl:relcl(time-17, passed-19)
det(complex-22, a-20)
compound(complex-22, tennis-21)
dobj(passed-19, complex-22)
punct(full-28, ,-23)
det:predet(courts-26, all-24)
det(courts-26, the-25)
nsubj(full-28, courts-26)
cop(full-28, were-27)
conj:and(ride-4, full-28)
punct(ride-4, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#bicycles

ride :: Twelve-year-old Peter Reaves of Pittsburgh treasures `` his free time to ride his bike , play ball and just hangout , '' says his mother Debby ./.
amod(Reaves-3, Twelve-year-old-1)
compound(Reaves-3, Peter-2)
nsubj(treasures-6, Reaves-3)
nsubj(play-16, Reaves-3)
case(Pittsburgh-5, of-4)
nmod:of(Reaves-3, Pittsburgh-5)
ccomp(says-23, treasures-6)
punct(time-10, ``-7)
nmod:poss(time-10, his-8)
amod(time-10, free-9)
dobj(treasures-6, time-10)
mark(ride-12, to-11)
acl(time-10, ride-12)
nmod:poss(bike-14, his-13)
dobj(ride-12, bike-14)
punct(treasures-6, ,-15)
conj:and(treasures-6, play-16)
ccomp(says-23, play-16)
dobj(play-16, ball-17)
cc(treasures-6, and-18)
advmod(hangout-20, just-19)
conj:and(treasures-6, hangout-20)
ccomp(says-23, hangout-20)
punct(says-23, ,-21)
punct(says-23, ''-22)
root(ROOT-0, says-23)
nmod:poss(Debby-26, his-24)
compound(Debby-26, mother-25)
nsubj(says-23, Debby-26)
punct(says-23, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#bike

ride :: `` Also , we have to kick harder , because our legs ride lower in the water than freestylers ' do ./.
punct(have-5, ``-1)
advmod(have-5, Also-2)
punct(have-5, ,-3)
nsubj(have-5, we-4)
nsubj:xsubj(kick-7, we-4)
root(ROOT-0, have-5)
mark(kick-7, to-6)
xcomp(have-5, kick-7)
advmod(kick-7, harder-8)
punct(have-5, ,-9)
mark(ride-13, because-10)
nmod:poss(legs-12, our-11)
nsubj(ride-13, legs-12)
advcl(have-5, ride-13)
advmod(ride-13, lower-14)
case(water-17, in-15)
det(water-17, the-16)
nmod:in(ride-13, water-17)
mark(do-21, than-18)
nsubj(do-21, freestylers-19)
case(freestylers-19, '-20)
advcl(ride-13, do-21)
punct(have-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#legs

ride :: A typical 10-hour day: three hours of gymnastics and diving from 7 a.m. to 10 a.m . ; an hour of taped replays starting at 4 p.m . ; a medley of boxing , basketball and volleyball from 7:30 p.m. to midnight ; then , to wrap things up , tennis or horseback riding from 12:30 a.m. to 2:30 a.m ./.
det(day-4, A-1)
amod(day-4, typical-2)
amod(day-4, 10-hour-3)
root(ROOT-0, day-4)
punct(day-4, :-5)
nummod(hours-7, three-6)
dep(day-4, hours-7)
case(gymnastics-9, of-8)
nmod:of(hours-7, gymnastics-9)
cc(hours-7, and-10)
dep(day-4, diving-11)
conj:and(hours-7, diving-11)
case(a.m.-14, from-12)
nummod(a.m.-14, 7-13)
nmod:from(diving-11, a.m.-14)
case(10-16, to-15)
nmod:to(diving-11, 10-16)
advmod(hours-7, a.m-17)
punct(day-4, .-18)
root(ROOT-0, ;-1)
det(hour-3, an-2)
root(;-1, hour-3)
case(replays-6, of-4)
amod(replays-6, taped-5)
nmod:of(hour-3, replays-6)
acl(replays-6, starting-7)
case(4-9, at-8)
nmod:at(starting-7, 4-9)
advmod(4-9, p.m-10)
punct(hour-3, .-11)
root(ROOT-0, ;-1)
det(medley-3, a-2)
root(;-1, medley-3)
case(boxing-5, of-4)
nmod:of(medley-3, boxing-5)
punct(boxing-5, ,-6)
nmod:of(medley-3, basketball-7)
conj:and(boxing-5, basketball-7)
cc(boxing-5, and-8)
nmod:of(medley-3, volleyball-9)
conj:and(boxing-5, volleyball-9)
case(p.m.-12, from-10)
nummod(p.m.-12, 7:30-11)
nmod:from(medley-3, p.m.-12)
case(midnight-14, to-13)
nmod:to(p.m.-12, midnight-14)
punct(medley-3, ;-15)
advmod(wrap-19, then-16)
punct(wrap-19, ,-17)
mark(wrap-19, to-18)
parataxis(medley-3, wrap-19)
dobj(wrap-19, things-20)
compound:prt(wrap-19, up-21)
punct(wrap-19, ,-22)
parataxis(medley-3, tennis-23)
conj:or(wrap-19, tennis-23)
cc(wrap-19, or-24)
parataxis(medley-3, horseback-25)
conj:or(wrap-19, horseback-25)
acl(horseback-25, riding-26)
case(a.m.-29, from-27)
nummod(a.m.-29, 12:30-28)
nmod:from(riding-26, a.m.-29)
case(2:30-31, to-30)
nmod:to(riding-26, 2:30-31)
advmod(2:30-31, a.m-32)
punct(medley-3, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#a.m.

ride :: The size of a Dalmatiner , these horses were ridden by teen-age boys dressed up as Valkyries to give an illusion of distance in the first production of the `` Ring . ''/''
det(size-2, The-1)
ccomp(ridden-10, size-2)
case(Dalmatiner-5, of-3)
det(Dalmatiner-5, a-4)
nmod:of(size-2, Dalmatiner-5)
punct(ridden-10, ,-6)
det(horses-8, these-7)
nsubjpass(ridden-10, horses-8)
auxpass(ridden-10, were-9)
root(ROOT-0, ridden-10)
case(boys-13, by-11)
amod(boys-13, teen-age-12)
nmod:agent(ridden-10, boys-13)
acl(boys-13, dressed-14)
compound:prt(dressed-14, up-15)
case(Valkyries-17, as-16)
nmod:as(dressed-14, Valkyries-17)
mark(give-19, to-18)
xcomp(dressed-14, give-19)
det(illusion-21, an-20)
dobj(give-19, illusion-21)
case(distance-23, of-22)
nmod:of(illusion-21, distance-23)
case(production-27, in-24)
det(production-27, the-25)
amod(production-27, first-26)
nmod:in(give-19, production-27)
case(Ring-31, of-28)
det(Ring-31, the-29)
punct(Ring-31, ``-30)
nmod:of(production-27, Ring-31)
punct(ridden-10, .-32)
punct(ridden-10, ''-33)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: ride#horses

ride :: Thirty-eight summers ago at Tecumseh Lodge in Eagle River , Wis . , my riding instructor was `` Uncle '' Al Dorfman ./.
nummod(summers-2, Thirty-eight-1)
nmod:npmod(ago-3, summers-2)
root(ROOT-0, ago-3)
case(Lodge-6, at-4)
compound(Lodge-6, Tecumseh-5)
nmod:at(ago-3, Lodge-6)
case(River-9, in-7)
compound(River-9, Eagle-8)
nmod:in(Lodge-6, River-9)
punct(River-9, ,-10)
appos(River-9, Wis-11)
punct(ago-3, .-12)
punct(Dorfman-10, ,-1)
nmod:poss(instructor-4, my-2)
amod(instructor-4, riding-3)
nsubj(Dorfman-10, instructor-4)
cop(Dorfman-10, was-5)
punct(Dorfman-10, ``-6)
compound(Dorfman-10, Uncle-7)
punct(Dorfman-10, ''-8)
compound(Dorfman-10, Al-9)
root(ROOT-0, Dorfman-10)
punct(Dorfman-10, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#instructor

ride :: Locals always urge visitors to discover Helsinki by riding the 3T tram , a nifty little streetcar that whips past the civic highlights ./.
nsubj(urge-3, Locals-1)
advmod(urge-3, always-2)
root(ROOT-0, urge-3)
dobj(urge-3, visitors-4)
nsubj:xsubj(discover-6, visitors-4)
mark(discover-6, to-5)
xcomp(urge-3, discover-6)
dobj(discover-6, Helsinki-7)
mark(riding-9, by-8)
advcl(discover-6, riding-9)
det(tram-12, the-10)
compound(tram-12, 3T-11)
dobj(riding-9, tram-12)
punct(tram-12, ,-13)
det(streetcar-17, a-14)
amod(streetcar-17, nifty-15)
amod(streetcar-17, little-16)
appos(tram-12, streetcar-17)
nsubj(whips-19, streetcar-17)
ref(streetcar-17, that-18)
acl:relcl(streetcar-17, whips-19)
case(highlights-23, past-20)
det(highlights-23, the-21)
amod(highlights-23, civic-22)
nmod:past(whips-19, highlights-23)
punct(urge-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#tram

ride :: Lawn mowers on display ranged from a $ 5 , 000 riding version with four-wheel steering from Swedish maker Husqvarna to a humble $ 69 push mower made by American Lawn Mowers of Shelbyville , Ind ./.
compound(mowers-2, Lawn-1)
nsubj(ranged-5, mowers-2)
case(display-4, on-3)
nmod:on(mowers-2, display-4)
root(ROOT-0, ranged-5)
case(5-9, from-6)
det(5-9, a-7)
dep(5-9, $-8)
nmod:from(ranged-5, 5-9)
punct(5-9, ,-10)
nummod(version-13, 000-11)
amod(version-13, riding-12)
appos(5-9, version-13)
case(steering-16, with-14)
amod(steering-16, four-wheel-15)
nmod:with(version-13, steering-16)
case(maker-19, from-17)
amod(maker-19, Swedish-18)
nmod:from(steering-16, maker-19)
dep(maker-19, Husqvarna-20)
case(mower-27, to-21)
det(mower-27, a-22)
amod(mower-27, humble-23)
amod(mower-27, $-24)
compound($-24, 69-25)
compound(mower-27, push-26)
nmod:to(version-13, mower-27)
acl(mower-27, made-28)
case(Mowers-32, by-29)
amod(Mowers-32, American-30)
compound(Mowers-32, Lawn-31)
nmod:by(made-28, Mowers-32)
case(Shelbyville-34, of-33)
nmod:of(Mowers-32, Shelbyville-34)
punct(Shelbyville-34, ,-35)
appos(Shelbyville-34, Ind-36)
punct(ranged-5, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#version

ride :: Late at night , laughing families pack kebab restaurants or ride Ferris wheels at a gaudy amusement park ./.
advmod(night-3, Late-1)
case(night-3, at-2)
root(ROOT-0, night-3)
punct(night-3, ,-4)
root(,-4, laughing-5)
compound(restaurants-9, families-6)
compound(restaurants-9, pack-7)
compound(restaurants-9, kebab-8)
dobj(laughing-5, restaurants-9)
cc(restaurants-9, or-10)
compound(wheels-13, ride-11)
amod(wheels-13, Ferris-12)
dobj(laughing-5, wheels-13)
conj:or(restaurants-9, wheels-13)
case(park-18, at-14)
det(park-18, a-15)
amod(park-18, gaudy-16)
compound(park-18, amusement-17)
nmod:at(laughing-5, park-18)
punct(laughing-5, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

ride :: Soon after Mr. McCarthy saw society bandleader Peter Duchin on a train , W declared that riding the subways is `` in . ''/''
advmod(saw-5, Soon-1)
mark(saw-5, after-2)
compound(McCarthy-4, Mr.-3)
nsubj(saw-5, McCarthy-4)
advcl(declared-15, saw-5)
compound(Duchin-9, society-6)
compound(Duchin-9, bandleader-7)
compound(Duchin-9, Peter-8)
dobj(saw-5, Duchin-9)
case(train-12, on-10)
det(train-12, a-11)
nmod:on(saw-5, train-12)
punct(declared-15, ,-13)
nsubj(declared-15, W-14)
root(ROOT-0, declared-15)
mark(in-22, that-16)
csubj(in-22, riding-17)
det(subways-19, the-18)
dobj(riding-17, subways-19)
cop(in-22, is-20)
punct(in-22, ``-21)
ccomp(declared-15, in-22)
punct(declared-15, .-23)
punct(declared-15, ''-24)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: ride#subways

ride :: In `` Elephant , '' the suffocating burden of adult responsibility gives way to a moment 's memory of childhood joy when a boy could ride carefree on his father 's shoulders ./.
case(Elephant-3, In-1)
punct(Elephant-3, ``-2)
nmod:in(gives-12, Elephant-3)
punct(gives-12, ,-4)
punct(gives-12, ''-5)
det(burden-8, the-6)
amod(burden-8, suffocating-7)
nsubj(gives-12, burden-8)
case(responsibility-11, of-9)
amod(responsibility-11, adult-10)
nmod:of(burden-8, responsibility-11)
root(ROOT-0, gives-12)
dobj(gives-12, way-13)
case(memory-18, to-14)
det(moment-16, a-15)
nmod:poss(memory-18, moment-16)
case(moment-16, 's-17)
nmod:to(gives-12, memory-18)
case(joy-21, of-19)
compound(joy-21, childhood-20)
nmod:of(memory-18, joy-21)
advmod(ride-26, when-22)
det(boy-24, a-23)
nsubj(ride-26, boy-24)
aux(ride-26, could-25)
advcl(gives-12, ride-26)
xcomp(ride-26, carefree-27)
case(shoulders-32, on-28)
nmod:poss(father-30, his-29)
nmod:poss(shoulders-32, father-30)
case(father-30, 's-31)
nmod:on(carefree-27, shoulders-32)
punct(gives-12, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#boy

ride :: The pumps can be reprogrammed by telephone to alter dosages , and he says that one of his young patients recently resumed riding a bicycle ./.
det(pumps-2, The-1)
nsubjpass(reprogrammed-5, pumps-2)
nsubj:xsubj(alter-9, pumps-2)
aux(reprogrammed-5, can-3)
auxpass(reprogrammed-5, be-4)
root(ROOT-0, reprogrammed-5)
case(telephone-7, by-6)
nmod:agent(reprogrammed-5, telephone-7)
mark(alter-9, to-8)
xcomp(reprogrammed-5, alter-9)
dobj(alter-9, dosages-10)
punct(reprogrammed-5, ,-11)
cc(reprogrammed-5, and-12)
nsubj(says-14, he-13)
conj:and(reprogrammed-5, says-14)
mark(resumed-22, that-15)
nsubj(resumed-22, one-16)
case(patients-20, of-17)
nmod:poss(patients-20, his-18)
amod(patients-20, young-19)
nmod:of(one-16, patients-20)
advmod(resumed-22, recently-21)
ccomp(says-14, resumed-22)
xcomp(resumed-22, riding-23)
det(bicycle-25, a-24)
dobj(riding-23, bicycle-25)
punct(reprogrammed-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: ride#bicycle

roll :: `` In this environment , it 's pretty easy to get the ball rolling ./.
punct(easy-9, ``-1)
case(environment-4, In-2)
det(environment-4, this-3)
nmod:in(easy-9, environment-4)
punct(easy-9, ,-5)
nsubj(easy-9, it-6)
nsubj:xsubj(get-11, it-6)
cop(easy-9, 's-7)
advmod(easy-9, pretty-8)
root(ROOT-0, easy-9)
mark(get-11, to-10)
xcomp(easy-9, get-11)
det(rolling-14, the-12)
compound(rolling-14, ball-13)
dobj(get-11, rolling-14)
punct(easy-9, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

roll :: Among Mr. Huffstutler 's prospective clients were attorneys suing American Motors in cases where Jeeps had rolled over ./.
case(clients-6, Among-1)
compound(Huffstutler-3, Mr.-2)
nmod:poss(clients-6, Huffstutler-3)
case(Huffstutler-3, 's-4)
amod(clients-6, prospective-5)
nmod:among(were-7, clients-6)
root(ROOT-0, were-7)
nsubj(were-7, attorneys-8)
acl(attorneys-8, suing-9)
compound(Motors-11, American-10)
dobj(suing-9, Motors-11)
case(cases-13, in-12)
nmod:in(suing-9, cases-13)
advmod(rolled-17, where-14)
nsubj(rolled-17, Jeeps-15)
aux(rolled-17, had-16)
acl:relcl(cases-13, rolled-17)
compound:prt(rolled-17, over-18)
punct(were-7, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#jeeps

roll :: A philosopher , preacher and politician rolled into one , the 67-year-old Mr. Treurnicht mesmerizes frightened whites with that message ./.
det(philosopher-2, A-1)
nsubj(rolled-7, philosopher-2)
punct(philosopher-2, ,-3)
conj:and(philosopher-2, preacher-4)
nsubj(rolled-7, preacher-4)
cc(philosopher-2, and-5)
conj:and(philosopher-2, politician-6)
nsubj(rolled-7, politician-6)
root(ROOT-0, rolled-7)
case(one-9, into-8)
nmod:into(rolled-7, one-9)
det(message-20, one-9)
punct(one-9, ,-10)
det(Treurnicht-14, the-11)
amod(Treurnicht-14, 67-year-old-12)
compound(Treurnicht-14, Mr.-13)
nsubj(mesmerizes-15, Treurnicht-14)
acl:relcl(one-9, mesmerizes-15)
amod(whites-17, frightened-16)
dobj(mesmerizes-15, whites-17)
case(message-20, with-18)
ref(one-9, that-19)
nmod:with(mesmerizes-15, message-20)
punct(rolled-7, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#philosopher

roll :: As the first issue was rolling off the press , Mr. McGovern threw a party in Moscow and eagerly leafed through the magazine ./.
mark(rolling-6, As-1)
det(issue-4, the-2)
amod(issue-4, first-3)
nsubj(rolling-6, issue-4)
aux(rolling-6, was-5)
advcl(threw-13, rolling-6)
compound:prt(rolling-6, off-7)
det(press-9, the-8)
dobj(rolling-6, press-9)
punct(threw-13, ,-10)
compound(McGovern-12, Mr.-11)
nsubj(threw-13, McGovern-12)
nsubj(leafed-20, McGovern-12)
root(ROOT-0, threw-13)
det(party-15, a-14)
dobj(threw-13, party-15)
case(Moscow-17, in-16)
nmod:in(threw-13, Moscow-17)
cc(threw-13, and-18)
advmod(leafed-20, eagerly-19)
conj:and(threw-13, leafed-20)
case(magazine-23, through-21)
det(magazine-23, the-22)
nmod:through(leafed-20, magazine-23)
punct(threw-13, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#press

roll :: He says manufacturers are increasingly rolling out questionable products that are n't fully researched , justified and tested ./.
nsubj(says-2, He-1)
root(ROOT-0, says-2)
nsubj(rolling-6, manufacturers-3)
aux(rolling-6, are-4)
advmod(rolling-6, increasingly-5)
ccomp(says-2, rolling-6)
compound:prt(rolling-6, out-7)
amod(products-9, questionable-8)
dobj(rolling-6, products-9)
nsubjpass(researched-14, products-9)
nsubj(justified-16, products-9)
nsubjpass(tested-18, products-9)
ref(products-9, that-10)
auxpass(researched-14, are-11)
neg(researched-14, n't-12)
advmod(researched-14, fully-13)
acl:relcl(products-9, researched-14)
punct(researched-14, ,-15)
acl:relcl(products-9, justified-16)
conj:and(researched-14, justified-16)
cc(researched-14, and-17)
acl:relcl(products-9, tested-18)
conj:and(researched-14, tested-18)
punct(says-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#products

roll :: More competition is on the way ; International Business Machines Corp. is expected to roll out a laptop soon to replace its PC Convertible , a near-total failure in the market ./.
amod(competition-2, More-1)
nsubj(way-6, competition-2)
cop(way-6, is-3)
case(way-6, on-4)
det(way-6, the-5)
root(ROOT-0, way-6)
punct(way-6, ;-7)
compound(Corp.-11, International-8)
compound(Corp.-11, Business-9)
compound(Corp.-11, Machines-10)
nsubjpass(expected-13, Corp.-11)
nsubj:xsubj(roll-15, Corp.-11)
auxpass(expected-13, is-12)
parataxis(way-6, expected-13)
mark(roll-15, to-14)
xcomp(expected-13, roll-15)
compound:prt(roll-15, out-16)
det(laptop-18, a-17)
dobj(roll-15, laptop-18)
advmod(roll-15, soon-19)
mark(replace-21, to-20)
advcl(roll-15, replace-21)
nmod:poss(Convertible-24, its-22)
compound(Convertible-24, PC-23)
dobj(replace-21, Convertible-24)
punct(Convertible-24, ,-25)
det(failure-28, a-26)
amod(failure-28, near-total-27)
appos(Convertible-24, failure-28)
case(market-31, in-29)
det(market-31, the-30)
nmod:in(failure-28, market-31)
punct(way-6, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#laptop

roll :: The plant , situated amid the rolling Bavarian countryside , lies on a specially constructed foundation to minimize vibration in the fabricating rooms ./.
det(plant-2, The-1)
nsubj(lies-11, plant-2)
punct(plant-2, ,-3)
acl(plant-2, situated-4)
case(countryside-9, amid-5)
det(countryside-9, the-6)
amod(countryside-9, rolling-7)
amod(countryside-9, Bavarian-8)
nmod:amid(situated-4, countryside-9)
punct(plant-2, ,-10)
root(ROOT-0, lies-11)
case(foundation-16, on-12)
det(foundation-16, a-13)
advmod(constructed-15, specially-14)
amod(foundation-16, constructed-15)
nmod:on(lies-11, foundation-16)
mark(minimize-18, to-17)
acl(foundation-16, minimize-18)
dobj(minimize-18, vibration-19)
case(rooms-23, in-20)
det(rooms-23, the-21)
compound(rooms-23, fabricating-22)
nmod:in(vibration-19, rooms-23)
punct(lies-11, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#countryside

roll :: And this year , more CDs are eligible to be rolled over than usual because skittish investors opted for one-year CDs after October 's stock market debacle ./.
cc(eligible-8, And-1)
det(year-3, this-2)
nmod:tmod(eligible-8, year-3)
punct(eligible-8, ,-4)
amod(CDs-6, more-5)
nsubj(eligible-8, CDs-6)
nsubjpass:xsubj(rolled-11, CDs-6)
cop(eligible-8, are-7)
root(ROOT-0, eligible-8)
mark(rolled-11, to-9)
auxpass(rolled-11, be-10)
xcomp(eligible-8, rolled-11)
compound:prt(rolled-11, over-12)
case(usual-14, than-13)
nmod:than(rolled-11, usual-14)
mark(opted-18, because-15)
amod(investors-17, skittish-16)
nsubj(opted-18, investors-17)
advcl(rolled-11, opted-18)
case(CDs-21, for-19)
amod(CDs-21, one-year-20)
nmod:for(opted-18, CDs-21)
case(debacle-27, after-22)
nmod:poss(debacle-27, October-23)
case(October-23, 's-24)
compound(debacle-27, stock-25)
compound(debacle-27, market-26)
nmod:after(opted-18, debacle-27)
punct(eligible-8, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#be

roll :: The questions are how many Hispanics will vote and how big a majority Gov. Dukakis can roll up ./.
det(questions-2, The-1)
nsubj(are-3, questions-2)
root(ROOT-0, are-3)
advmod(many-5, how-4)
amod(Hispanics-6, many-5)
nsubj(vote-8, Hispanics-6)
nsubj(big-11, Hispanics-6)
aux(vote-8, will-7)
ccomp(are-3, vote-8)
cc(vote-8, and-9)
advmod(big-11, how-10)
ccomp(are-3, big-11)
conj:and(vote-8, big-11)
det(majority-13, a-12)
dobj(big-11, majority-13)
compound(Dukakis-15, Gov.-14)
nsubj(roll-17, Dukakis-15)
aux(roll-17, can-16)
acl:relcl(majority-13, roll-17)
compound:prt(roll-17, up-18)
punct(are-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#dukakis

roll :: With parents now demanding improvements , the states obviously are n't waiting for the next presidential election to get the ball rolling in the right direction ./.
mark(demanding-4, With-1)
nsubj(demanding-4, parents-2)
advmod(demanding-4, now-3)
advcl(waiting-12, demanding-4)
dobj(demanding-4, improvements-5)
punct(waiting-12, ,-6)
det(states-8, the-7)
nsubj(waiting-12, states-8)
advmod(waiting-12, obviously-9)
aux(waiting-12, are-10)
neg(waiting-12, n't-11)
root(ROOT-0, waiting-12)
case(election-17, for-13)
det(election-17, the-14)
amod(election-17, next-15)
amod(election-17, presidential-16)
nmod:for(waiting-12, election-17)
mark(get-19, to-18)
acl(election-17, get-19)
det(rolling-22, the-20)
compound(rolling-22, ball-21)
dobj(get-19, rolling-22)
case(direction-26, in-23)
det(direction-26, the-24)
amod(direction-26, right-25)
nmod:in(get-19, direction-26)
punct(waiting-12, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

roll :: `` The trick is to capture assets so that when -LRB- investors are -RRB- ready to roll out of a CD , the money 's already here . ''/''
root(ROOT-0, ``-1)
det(trick-3, The-2)
nsubj(is-4, trick-3)
nsubj:xsubj(capture-6, trick-3)
root(``-1, is-4)
mark(capture-6, to-5)
xcomp(is-4, capture-6)
dobj(capture-6, assets-7)
mark(ready-15, so-8)
mwe(so-8, that-9)
advmod(ready-15, when-10)
punct(ready-15, -LRB--11)
nsubj(ready-15, investors-12)
nsubj:xsubj(roll-17, investors-12)
cop(ready-15, are-13)
punct(ready-15, -RRB--14)
advcl(capture-6, ready-15)
mark(roll-17, to-16)
xcomp(ready-15, roll-17)
case(CD-21, out-18)
mwe(out-18, of-19)
det(CD-21, a-20)
nmod:out_of(roll-17, CD-21)
punct(is-4, ,-22)
det(money-24, the-23)
root(,-22, money-24)
case(money-24, 's-25)
advmod(here-27, already-26)
amod(money-24, here-27)
punct(money-24, .-28)
punct(money-24, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: roll#investors

roll :: Sunbelt , which had $ 2.3 billion in assets , rolled up a $ 1.2 billion net loss in its fiscal fourth quarter , ended March 31 , that accounted for half the $ 2.4 billion loss in regulatory capital incurred by the nation 's federally insured thrifts during that period ./.
nsubj(had-4, Sunbelt-1)
nsubj(rolled-11, Sunbelt-1)
punct(Sunbelt-1, ,-2)
ref(Sunbelt-1, which-3)
acl:relcl(Sunbelt-1, had-4)
dobj(had-4, $-5)
compound(billion-7, 2.3-6)
nummod($-5, billion-7)
case(assets-9, in-8)
nmod:in($-5, assets-9)
punct(Sunbelt-1, ,-10)
root(ROOT-0, rolled-11)
compound:prt(rolled-11, up-12)
det(loss-18, a-13)
amod(loss-18, $-14)
compound(billion-16, 1.2-15)
nummod($-14, billion-16)
amod(loss-18, net-17)
dobj(rolled-11, loss-18)
case(quarter-23, in-19)
nmod:poss(quarter-23, its-20)
amod(quarter-23, fiscal-21)
amod(quarter-23, fourth-22)
nmod:in(loss-18, quarter-23)
punct(rolled-11, ,-24)
advcl(rolled-11, ended-25)
nmod:tmod(ended-25, March-26)
nummod(March-26, 31-27)
punct(rolled-11, ,-28)
nsubj(accounted-30, that-29)
dep(rolled-11, accounted-30)
case(loss-37, for-31)
det:predet(loss-37, half-32)
det(loss-37, the-33)
amod(loss-37, $-34)
compound(billion-36, 2.4-35)
nummod($-34, billion-36)
nmod:for(accounted-30, loss-37)
case(capital-40, in-38)
amod(capital-40, regulatory-39)
nmod:in(loss-37, capital-40)
acl(loss-37, incurred-41)
case(thrifts-48, by-42)
det(nation-44, the-43)
nmod:poss(thrifts-48, nation-44)
case(nation-44, 's-45)
advmod(insured-47, federally-46)
amod(thrifts-48, insured-47)
nmod:by(incurred-41, thrifts-48)
case(period-51, during-49)
det(period-51, that-50)
nmod:during(incurred-41, period-51)
punct(rolled-11, .-52)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#loss

roll :: Ms. Richards had them rolling in the aisles with her lacerating jibes at George Bush 's silver foot in the mouth , etc ./.
compound(Richards-2, Ms.-1)
nsubj(had-3, Richards-2)
root(ROOT-0, had-3)
nsubj(rolling-5, them-4)
ccomp(had-3, rolling-5)
case(aisles-8, in-6)
det(aisles-8, the-7)
nmod:in(rolling-5, aisles-8)
case(jibes-12, with-9)
nmod:poss(jibes-12, her-10)
amod(jibes-12, lacerating-11)
nmod:with(rolling-5, jibes-12)
case(foot-18, at-13)
compound(Bush-15, George-14)
nmod:poss(foot-18, Bush-15)
case(Bush-15, 's-16)
amod(foot-18, silver-17)
nmod:at(jibes-12, foot-18)
case(mouth-21, in-19)
det(mouth-21, the-20)
nmod:in(jibes-12, mouth-21)
punct(mouth-21, ,-22)
appos(mouth-21, etc-23)
punct(had-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#them

roll :: The potential for peace in many places today results in large part from the Reagan buildup in strategic and theater nuclear defenses , combined with the Reagan doctrine of rolling back communist conquest by backing indigenous guerrilla armies ./.
det(potential-2, The-1)
nsubj(results-9, potential-2)
case(peace-4, for-3)
nmod:for(potential-2, peace-4)
case(places-7, in-5)
amod(places-7, many-6)
nmod:in(potential-2, places-7)
nmod:tmod(potential-2, today-8)
root(ROOT-0, results-9)
case(part-12, in-10)
amod(part-12, large-11)
nmod:in(results-9, part-12)
case(buildup-16, from-13)
det(buildup-16, the-14)
compound(buildup-16, Reagan-15)
nmod:from(part-12, buildup-16)
case(defenses-22, in-17)
amod(defenses-22, strategic-18)
cc(strategic-18, and-19)
conj:and(strategic-18, theater-20)
amod(defenses-22, theater-20)
amod(defenses-22, nuclear-21)
nmod:in(buildup-16, defenses-22)
punct(results-9, ,-23)
dep(results-9, combined-24)
case(doctrine-28, with-25)
det(doctrine-28, the-26)
compound(doctrine-28, Reagan-27)
nmod:with(combined-24, doctrine-28)
mark(rolling-30, of-29)
acl(doctrine-28, rolling-30)
advmod(conquest-33, back-31)
amod(conquest-33, communist-32)
dobj(rolling-30, conquest-33)
mark(backing-35, by-34)
advcl(rolling-30, backing-35)
amod(armies-38, indigenous-36)
compound(armies-38, guerrilla-37)
dobj(backing-35, armies-38)
punct(results-9, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#conquest

roll :: The monitor on Megaquest 's bisexual line recently got the conversation rolling by discussing the relative merits of different gender combinations ./.
det(monitor-2, The-1)
nsubj(got-9, monitor-2)
case(line-7, on-3)
nmod:poss(line-7, Megaquest-4)
case(Megaquest-4, 's-5)
amod(line-7, bisexual-6)
nmod:on(monitor-2, line-7)
advmod(got-9, recently-8)
root(ROOT-0, got-9)
det(rolling-12, the-10)
compound(rolling-12, conversation-11)
dobj(got-9, rolling-12)
mark(discussing-14, by-13)
advcl(got-9, discussing-14)
det(merits-17, the-15)
amod(merits-17, relative-16)
dobj(discussing-14, merits-17)
case(combinations-21, of-18)
amod(combinations-21, different-19)
compound(combinations-21, gender-20)
nmod:of(merits-17, combinations-21)
punct(got-9, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

roll :: This has permitted fewer trips to the market to roll over maturing issues ./.
nsubj(permitted-3, This-1)
aux(permitted-3, has-2)
root(ROOT-0, permitted-3)
amod(trips-5, fewer-4)
dobj(permitted-3, trips-5)
case(market-8, to-6)
det(market-8, the-7)
nmod:to(trips-5, market-8)
mark(roll-10, to-9)
acl(trips-5, roll-10)
compound:prt(roll-10, over-11)
amod(issues-13, maturing-12)
dobj(roll-10, issues-13)
punct(permitted-3, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#issues

roll :: `` I 'm going to roll up my sleeves and make this work . ''/''
root(ROOT-0, ``-1)
nsubj(going-4, I-2)
nsubj:xsubj(roll-6, I-2)
aux(going-4, 'm-3)
root(``-1, going-4)
mark(roll-6, to-5)
xcomp(going-4, roll-6)
compound:prt(roll-6, up-7)
nmod:poss(sleeves-9, my-8)
dobj(roll-6, sleeves-9)
cc(roll-6, and-10)
xcomp(going-4, make-11)
conj:and(roll-6, make-11)
det(work-13, this-12)
dobj(make-11, work-13)
punct(going-4, .-14)
punct(going-4, ''-15)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: roll#sleeves

roll :: Boeing 's first 737-500 is expected to roll out next May ./.
nmod:poss(737-500-4, Boeing-1)
case(Boeing-1, 's-2)
amod(737-500-4, first-3)
nsubjpass(expected-6, 737-500-4)
nsubj:xsubj(roll-8, 737-500-4)
auxpass(expected-6, is-5)
root(ROOT-0, expected-6)
mark(roll-8, to-7)
xcomp(expected-6, roll-8)
compound:prt(roll-8, out-9)
amod(May-11, next-10)
nmod:tmod(roll-8, May-11)
punct(expected-6, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#737-500

roll :: Maybe he 'd roll over in his grave . ''/''
advmod(roll-4, Maybe-1)
nsubj(roll-4, he-2)
aux(roll-4, 'd-3)
root(ROOT-0, roll-4)
compound:prt(roll-4, over-5)
case(grave-8, in-6)
nmod:poss(grave-8, his-7)
nmod:in(roll-4, grave-8)
punct(roll-4, .-9)
punct(roll-4, ''-10)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: roll#he

roll :: In fact , though PAN embraces international investment , it is n't inclined to roll over for it ./.
case(fact-2, In-1)
nmod:in(inclined-13, fact-2)
punct(inclined-13, ,-3)
mark(embraces-6, though-4)
nsubj(embraces-6, PAN-5)
advcl(inclined-13, embraces-6)
amod(investment-8, international-7)
dobj(embraces-6, investment-8)
punct(inclined-13, ,-9)
nsubjpass(inclined-13, it-10)
nsubj:xsubj(roll-15, it-10)
auxpass(inclined-13, is-11)
neg(inclined-13, n't-12)
root(ROOT-0, inclined-13)
mark(roll-15, to-14)
xcomp(inclined-13, roll-15)
compound:prt(roll-15, over-16)
case(it-18, for-17)
nmod:for(roll-15, it-18)
punct(inclined-13, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#it

roll :: You may withdraw cash temporarily from an individual retirement account and escape a tax or penalty , if you roll it all over into another IRA in 60 days ./.
nsubj(withdraw-3, You-1)
nsubj(escape-12, You-1)
aux(withdraw-3, may-2)
root(ROOT-0, withdraw-3)
dobj(withdraw-3, cash-4)
advmod(withdraw-3, temporarily-5)
case(account-10, from-6)
det(account-10, an-7)
amod(account-10, individual-8)
compound(account-10, retirement-9)
nmod:from(withdraw-3, account-10)
cc(withdraw-3, and-11)
conj:and(withdraw-3, escape-12)
det(tax-14, a-13)
dobj(escape-12, tax-14)
cc(tax-14, or-15)
dobj(escape-12, penalty-16)
conj:or(tax-14, penalty-16)
punct(withdraw-3, ,-17)
mark(roll-20, if-18)
nsubj(roll-20, you-19)
advcl(withdraw-3, roll-20)
dobj(roll-20, it-21)
dep(over-23, all-22)
compound:prt(roll-20, over-23)
case(IRA-26, into-24)
det(IRA-26, another-25)
nmod:into(roll-20, IRA-26)
case(days-29, in-27)
nummod(days-29, 60-28)
nmod:in(roll-20, days-29)
punct(withdraw-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#it

roll :: But despite all , the economy keeps on rolling along ./.
cc(keeps-7, But-1)
case(all-3, despite-2)
nmod:despite(keeps-7, all-3)
punct(keeps-7, ,-4)
det(economy-6, the-5)
nsubj(keeps-7, economy-6)
root(ROOT-0, keeps-7)
mark(rolling-9, on-8)
advcl(keeps-7, rolling-9)
advmod(rolling-9, along-10)
punct(keeps-7, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

roll :: Who could have guessed that the expansion would be rolling relentlessly through a sixth straight year , with no end in sight ?/.
nsubj(guessed-4, Who-1)
aux(guessed-4, could-2)
aux(guessed-4, have-3)
root(ROOT-0, guessed-4)
mark(rolling-10, that-5)
det(expansion-7, the-6)
nsubj(rolling-10, expansion-7)
aux(rolling-10, would-8)
aux(rolling-10, be-9)
ccomp(guessed-4, rolling-10)
advmod(rolling-10, relentlessly-11)
case(year-16, through-12)
det(year-16, a-13)
amod(year-16, sixth-14)
amod(year-16, straight-15)
nmod:through(rolling-10, year-16)
punct(guessed-4, ,-17)
case(end-20, with-18)
neg(end-20, no-19)
nmod:with(guessed-4, end-20)
case(sight-22, in-21)
nmod:in(end-20, sight-22)
punct(guessed-4, ?-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#expansion

roll :: When he tries a curve he ca n't resist rolling his eyes skyward in open homage to the L.A. Dodgers ' Fernando Valenzuela ./.
advmod(tries-3, When-1)
nsubj(tries-3, he-2)
root(ROOT-0, tries-3)
det(curve-5, a-4)
dobj(tries-3, curve-5)
nsubj(resist-9, he-6)
aux(resist-9, ca-7)
neg(resist-9, n't-8)
acl:relcl(curve-5, resist-9)
xcomp(resist-9, rolling-10)
nmod:poss(eyes-12, his-11)
dobj(rolling-10, eyes-12)
advmod(rolling-10, skyward-13)
case(homage-16, in-14)
amod(homage-16, open-15)
nmod:in(rolling-10, homage-16)
case(Valenzuela-23, to-17)
det(Dodgers-20, the-18)
compound(Dodgers-20, L.A.-19)
nmod:poss(Valenzuela-23, Dodgers-20)
case(Dodgers-20, '-21)
compound(Valenzuela-23, Fernando-22)
nmod:to(homage-16, Valenzuela-23)
punct(tries-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#eyes

roll :: Tobacco may have run into its first legal setback and another public relations blow this week , but the cigarettes keep rolling off the line and their makers keep rolling in big profits ./.
nsubj(run-4, Tobacco-1)
aux(run-4, may-2)
aux(run-4, have-3)
root(ROOT-0, run-4)
case(setback-9, into-5)
nmod:poss(setback-9, its-6)
amod(setback-9, first-7)
amod(setback-9, legal-8)
nmod:into(run-4, setback-9)
cc(setback-9, and-10)
det(relations-13, another-11)
amod(relations-13, public-12)
nmod:into(run-4, relations-13)
conj:and(setback-9, relations-13)
dobj(run-4, blow-14)
det(week-16, this-15)
nmod:tmod(blow-14, week-16)
punct(run-4, ,-17)
cc(run-4, but-18)
det(cigarettes-20, the-19)
nsubj(keep-21, cigarettes-20)
nsubj:xsubj(rolling-30, cigarettes-20)
conj:but(run-4, keep-21)
csubj(rolling-30, rolling-22)
compound:prt(rolling-22, off-23)
det(line-25, the-24)
dobj(rolling-22, line-25)
cc(line-25, and-26)
nmod:poss(makers-28, their-27)
dobj(rolling-22, makers-28)
conj:and(line-25, makers-28)
aux(rolling-30, keep-29)
xcomp(keep-21, rolling-30)
case(profits-33, in-31)
amod(profits-33, big-32)
nmod:in(rolling-30, profits-33)
punct(run-4, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#line

roll :: `` It does n't look good , but nobody at First Boston seems to care as long as the fees keep rolling in . ''/''
punct(look-5, ``-1)
nsubj(look-5, It-2)
aux(look-5, does-3)
neg(look-5, n't-4)
root(ROOT-0, look-5)
xcomp(look-5, good-6)
punct(look-5, ,-7)
mark(seems-13, but-8)
nsubj(seems-13, nobody-9)
nsubj:xsubj(care-15, nobody-9)
case(Boston-12, at-10)
compound(Boston-12, First-11)
nmod:at(nobody-9, Boston-12)
advcl(look-5, seems-13)
mark(care-15, to-14)
xcomp(seems-13, care-15)
advmod(long-17, as-16)
advmod(care-15, long-17)
mark(keep-21, as-18)
det(fees-20, the-19)
nsubj(keep-21, fees-20)
advcl(long-17, keep-21)
xcomp(keep-21, rolling-22)
advmod(rolling-22, in-23)
punct(look-5, .-24)
punct(look-5, ''-25)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

roll :: Still , the buses roll on ./.
advmod(roll-5, Still-1)
punct(roll-5, ,-2)
det(buses-4, the-3)
nsubj(roll-5, buses-4)
root(ROOT-0, roll-5)
compound:prt(roll-5, on-6)
punct(roll-5, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#buses

roll :: Wayne Prospect , a Long Island legislator who favored a public takeover , said , `` We had a choice of either accepting economic blackmail or rolling the dice on Shoreham . ''/''
compound(Prospect-2, Wayne-1)
nsubj(said-14, Prospect-2)
punct(Prospect-2, ,-3)
det(legislator-7, a-4)
amod(legislator-7, Long-5)
compound(legislator-7, Island-6)
appos(Prospect-2, legislator-7)
nsubj(favored-9, legislator-7)
ref(legislator-7, who-8)
acl:relcl(legislator-7, favored-9)
det(takeover-12, a-10)
amod(takeover-12, public-11)
dobj(favored-9, takeover-12)
punct(Prospect-2, ,-13)
root(ROOT-0, said-14)
punct(said-14, ,-15)
punct(said-14, ``-16)
nsubj(had-18, We-17)
ccomp(said-14, had-18)
det(choice-20, a-19)
dobj(had-18, choice-20)
mark(accepting-23, of-21)
cc:preconj(accepting-23, either-22)
acl(choice-20, accepting-23)
amod(blackmail-25, economic-24)
dobj(accepting-23, blackmail-25)
cc(accepting-23, or-26)
acl(choice-20, rolling-27)
conj:or(accepting-23, rolling-27)
det(dice-29, the-28)
dobj(rolling-27, dice-29)
case(Shoreham-31, on-30)
nmod:on(rolling-27, Shoreham-31)
punct(said-14, .-32)
punct(said-14, ''-33)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: roll#dice

roll :: Company officials argue , too , that the maneuvers used could have caused any number of other vehicles -- including standard passenger cars -- to roll over ./.
compound(officials-2, Company-1)
nsubj(argue-3, officials-2)
root(ROOT-0, argue-3)
punct(argue-3, ,-4)
advmod(argue-3, too-5)
punct(argue-3, ,-6)
mark(caused-13, that-7)
det(maneuvers-9, the-8)
nsubj(caused-13, maneuvers-9)
acl(maneuvers-9, used-10)
aux(caused-13, could-11)
aux(caused-13, have-12)
ccomp(argue-3, caused-13)
det(number-15, any-14)
dobj(caused-13, number-15)
nsubj:xsubj(roll-26, number-15)
case(vehicles-18, of-16)
amod(vehicles-18, other-17)
nmod:of(number-15, vehicles-18)
punct(vehicles-18, ---19)
case(cars-23, including-20)
amod(cars-23, standard-21)
compound(cars-23, passenger-22)
nmod:including(vehicles-18, cars-23)
punct(vehicles-18, ---24)
mark(roll-26, to-25)
xcomp(caused-13, roll-26)
compound:prt(roll-26, over-27)
punct(argue-3, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#number

roll :: He hyped it by having a `` banker '' present to fondle the winner 's check while the bowlers rolled ./.
nsubj(hyped-2, He-1)
root(ROOT-0, hyped-2)
dobj(hyped-2, it-3)
mark(having-5, by-4)
advcl(hyped-2, having-5)
det(banker-8, a-6)
punct(banker-8, ``-7)
dobj(having-5, banker-8)
punct(banker-8, ''-9)
amod(banker-8, present-10)
mark(fondle-12, to-11)
xcomp(present-10, fondle-12)
det(winner-14, the-13)
nmod:poss(check-16, winner-14)
case(winner-14, 's-15)
dobj(fondle-12, check-16)
mark(rolled-20, while-17)
det(bowlers-19, the-18)
nsubj(rolled-20, bowlers-19)
advcl(having-5, rolled-20)
punct(hyped-2, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#bowlers

roll :: The class-action suit was brought by a New York investor who purchased several thousands of dollars of First RepublicBank debt last year only to watch his investment wither as Texas 's largest banking company rolled up a $ 656.8 million net loss for 1987 before seeking a bailout from the Federal Deposit Insurance Corp ./.
det(suit-3, The-1)
amod(suit-3, class-action-2)
nsubjpass(brought-5, suit-3)
auxpass(brought-5, was-4)
root(ROOT-0, brought-5)
case(investor-10, by-6)
det(investor-10, a-7)
compound(investor-10, New-8)
compound(investor-10, York-9)
nmod:agent(brought-5, investor-10)
nsubj(purchased-12, investor-10)
ref(investor-10, who-11)
acl:relcl(investor-10, purchased-12)
amod(thousands-14, several-13)
dobj(purchased-12, thousands-14)
case(dollars-16, of-15)
nmod:of(thousands-14, dollars-16)
case(debt-20, of-17)
amod(debt-20, First-18)
amod(debt-20, RepublicBank-19)
nmod:of(dollars-16, debt-20)
amod(year-22, last-21)
nmod:tmod(purchased-12, year-22)
advmod(watch-25, only-23)
mark(watch-25, to-24)
advcl(purchased-12, watch-25)
nmod:poss(investment-27, his-26)
nsubj(wither-28, investment-27)
ccomp(watch-25, wither-28)
mark(rolled-35, as-29)
nmod:poss(company-34, Texas-30)
case(Texas-30, 's-31)
amod(company-34, largest-32)
compound(company-34, banking-33)
nsubj(rolled-35, company-34)
advcl(wither-28, rolled-35)
compound:prt(rolled-35, up-36)
det(loss-42, a-37)
amod(loss-42, $-38)
compound(million-40, 656.8-39)
nummod($-38, million-40)
amod(loss-42, net-41)
dobj(rolled-35, loss-42)
case(1987-44, for-43)
nmod:for(loss-42, 1987-44)
mark(seeking-46, before-45)
advcl(rolled-35, seeking-46)
det(bailout-48, a-47)
dobj(seeking-46, bailout-48)
case(Corp-54, from-49)
det(Corp-54, the-50)
compound(Corp-54, Federal-51)
compound(Corp-54, Deposit-52)
compound(Corp-54, Insurance-53)
nmod:from(bailout-48, Corp-54)
punct(brought-5, .-55)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#loss

roll :: The good times for the Rev. Jesse Jackson may roll on -- and neither his rivals for the Democratic presidential nomination nor other party heavyweights have the temerity to try to break up the celebration ./.
det(times-3, The-1)
amod(times-3, good-2)
nsubj(roll-10, times-3)
case(Jackson-8, for-4)
det(Jackson-8, the-5)
compound(Jackson-8, Rev.-6)
compound(Jackson-8, Jesse-7)
nmod:for(times-3, Jackson-8)
aux(roll-10, may-9)
root(ROOT-0, roll-10)
compound:prt(roll-10, on-11)
punct(roll-10, ---12)
cc(roll-10, and-13)
cc:preconj(rivals-16, neither-14)
nmod:poss(rivals-16, his-15)
nsubj(have-26, rivals-16)
case(nomination-21, for-17)
det(nomination-21, the-18)
amod(nomination-21, Democratic-19)
amod(nomination-21, presidential-20)
nmod:for(rivals-16, nomination-21)
cc(nomination-21, nor-22)
amod(heavyweights-25, other-23)
compound(heavyweights-25, party-24)
nmod:for(rivals-16, heavyweights-25)
conj:nor(nomination-21, heavyweights-25)
conj:and(roll-10, have-26)
det(temerity-28, the-27)
dobj(have-26, temerity-28)
mark(try-30, to-29)
acl(temerity-28, try-30)
mark(break-32, to-31)
xcomp(try-30, break-32)
compound:prt(break-32, up-33)
det(celebration-35, the-34)
dobj(break-32, celebration-35)
punct(roll-10, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#times

roll :: One underwriter currently has six ready to roll ./.
nummod(underwriter-2, One-1)
nsubj(has-4, underwriter-2)
advmod(has-4, currently-3)
root(ROOT-0, has-4)
dobj(has-4, six-5)
amod(six-5, ready-6)
mark(roll-8, to-7)
xcomp(ready-6, roll-8)
punct(has-4, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

roll :: While American car-buyers still reflexively believe automobiles built in Japan are so good they roll on water , Honda in marketing the cars it is sending back home will boast that its Ohio-built Accords are American ./.
mark(believe-6, While-1)
amod(car-buyers-3, American-2)
nsubj(believe-6, car-buyers-3)
advmod(believe-6, still-4)
advmod(believe-6, reflexively-5)
root(ROOT-0, believe-6)
nsubj(good-13, automobiles-7)
acl(automobiles-7, built-8)
case(Japan-10, in-9)
nmod:in(built-8, Japan-10)
cop(good-13, are-11)
advmod(good-13, so-12)
ccomp(believe-6, good-13)
nsubj(roll-15, they-14)
ccomp(good-13, roll-15)
case(water-17, on-16)
nmod:on(roll-15, water-17)
punct(water-17, ,-18)
appos(water-17, Honda-19)
mark(marketing-21, in-20)
acl(water-17, marketing-21)
det(cars-23, the-22)
dobj(marketing-21, cars-23)
nsubj(sending-26, it-24)
aux(sending-26, is-25)
acl:relcl(cars-23, sending-26)
advmod(sending-26, back-27)
nsubj(boast-30, home-28)
aux(boast-30, will-29)
ccomp(roll-15, boast-30)
mark(American-36, that-31)
nmod:poss(Accords-34, its-32)
amod(Accords-34, Ohio-built-33)
nsubj(American-36, Accords-34)
cop(American-36, are-35)
ccomp(boast-30, American-36)
punct(believe-6, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#they

roll :: The telex requests banks to roll over loans falling due from tomorrow ./.
det(banks-4, The-1)
compound(banks-4, telex-2)
compound(banks-4, requests-3)
root(ROOT-0, banks-4)
mark(roll-6, to-5)
acl(banks-4, roll-6)
compound:prt(roll-6, over-7)
dobj(roll-6, loans-8)
acl(loans-8, falling-9)
xcomp(falling-9, due-10)
case(tomorrow-12, from-11)
nmod:from(due-10, tomorrow-12)
punct(banks-4, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#loans

roll :: When the TV cameramen motion for him to run closer to the water , Sen. Gore readily complies , the waves rolling up to his feet ./.
root(ROOT-0, When-1)
det(motion-5, the-2)
compound(motion-5, TV-3)
compound(motion-5, cameramen-4)
dep(When-1, motion-5)
mark(run-9, for-6)
nsubj(run-9, him-7)
mark(run-9, to-8)
acl(motion-5, run-9)
advmod(run-9, closer-10)
case(water-13, to-11)
det(water-13, the-12)
nmod:to(closer-10, water-13)
punct(motion-5, ,-14)
compound(Gore-16, Sen.-15)
nsubj(complies-18, Gore-16)
advmod(complies-18, readily-17)
acl:relcl(motion-5, complies-18)
punct(motion-5, ,-19)
det(waves-21, the-20)
appos(motion-5, waves-21)
acl(waves-21, rolling-22)
compound:prt(rolling-22, up-23)
case(feet-26, to-24)
nmod:poss(feet-26, his-25)
nmod:to(rolling-22, feet-26)
punct(When-1, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#feet

roll :: Most of the machinery in Toyota Motor Corp. 's $ 800 million auto plant in Georgetown , Ky . , came from Japan , for example , and Toyota spokesmen say that when the first cars roll off the assembly line this spring , 40 % of the total value will be imported ./.
root(ROOT-0, Most-1)
case(machinery-4, of-2)
det(machinery-4, the-3)
nmod:of(Most-1, machinery-4)
case(plant-14, in-5)
compound(Corp.-8, Toyota-6)
compound(Corp.-8, Motor-7)
nmod:poss(plant-14, Corp.-8)
case(Corp.-8, 's-9)
amod(plant-14, $-10)
compound(million-12, 800-11)
nummod($-10, million-12)
compound(plant-14, auto-13)
nmod:in(machinery-4, plant-14)
case(Georgetown-16, in-15)
nmod:in(plant-14, Georgetown-16)
punct(Georgetown-16, ,-17)
appos(Georgetown-16, Ky-18)
punct(Most-1, .-19)
root(ROOT-0, ,-1)
root(,-1, came-2)
case(Japan-4, from-3)
nmod:from(came-2, Japan-4)
punct(example-7, ,-5)
case(example-7, for-6)
nmod:for(came-2, example-7)
punct(example-7, ,-8)
cc(example-7, and-9)
compound(spokesmen-11, Toyota-10)
nsubj(say-12, spokesmen-11)
nmod:for(came-2, say-12)
conj:and(example-7, say-12)
mark(imported-34, that-13)
advmod(roll-18, when-14)
det(cars-17, the-15)
amod(cars-17, first-16)
nsubj(roll-18, cars-17)
advcl(imported-34, roll-18)
compound:prt(roll-18, off-19)
det(line-22, the-20)
compound(line-22, assembly-21)
dobj(roll-18, line-22)
det(spring-24, this-23)
nmod:tmod(roll-18, spring-24)
punct(imported-34, ,-25)
nummod(%-27, 40-26)
nsubjpass(imported-34, %-27)
case(value-31, of-28)
det(value-31, the-29)
amod(value-31, total-30)
nmod:of(%-27, value-31)
aux(imported-34, will-32)
auxpass(imported-34, be-33)
ccomp(say-12, imported-34)
punct(came-2, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#line

roll :: Some analysts say that if Burger King fails to turn around soon , heads will roll at the top ./.
det(analysts-2, Some-1)
nsubj(say-3, analysts-2)
root(ROOT-0, say-3)
mark(roll-16, that-4)
mark(fails-8, if-5)
compound(King-7, Burger-6)
nsubj(fails-8, King-7)
nsubj:xsubj(turn-10, King-7)
advcl(roll-16, fails-8)
mark(turn-10, to-9)
xcomp(fails-8, turn-10)
compound:prt(turn-10, around-11)
advmod(turn-10, soon-12)
punct(roll-16, ,-13)
nsubj(roll-16, heads-14)
aux(roll-16, will-15)
ccomp(say-3, roll-16)
case(top-19, at-17)
det(top-19, the-18)
nmod:at(roll-16, top-19)
punct(say-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#heads

roll :: As Judge Anthony Kennedy rolls on toward confirmation , the Bork fallout continues , not least in raising the issue of whether the organized bar has any special role to play in judicial selection ./.
case(rolls-5, As-1)
compound(rolls-5, Judge-2)
compound(rolls-5, Anthony-3)
compound(rolls-5, Kennedy-4)
nmod:as(continues-13, rolls-5)
case(confirmation-8, on-6)
case(confirmation-8, toward-7)
nmod:toward(rolls-5, confirmation-8)
punct(continues-13, ,-9)
det(fallout-12, the-10)
compound(fallout-12, Bork-11)
nsubj(continues-13, fallout-12)
root(ROOT-0, continues-13)
punct(continues-13, ,-14)
neg(least-16, not-15)
cc:preconj(raising-18, least-16)
mark(raising-18, in-17)
advcl(continues-13, raising-18)
det(issue-20, the-19)
dobj(raising-18, issue-20)
mark(has-26, of-21)
mark(has-26, whether-22)
det(bar-25, the-23)
amod(bar-25, organized-24)
nsubj(has-26, bar-25)
acl(issue-20, has-26)
det(role-29, any-27)
amod(role-29, special-28)
dobj(has-26, role-29)
mark(play-31, to-30)
acl(role-29, play-31)
case(selection-34, in-32)
amod(selection-34, judicial-33)
nmod:in(play-31, selection-34)
punct(continues-13, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#confirmation

roll :: She wanted to roll over his IRA into one in her own name , so she sought the IRS 's opinion ./.
nsubj(wanted-2, She-1)
nsubj:xsubj(roll-4, She-1)
root(ROOT-0, wanted-2)
mark(roll-4, to-3)
xcomp(wanted-2, roll-4)
compound:prt(roll-4, over-5)
nmod:poss(IRA-7, his-6)
dobj(roll-4, IRA-7)
case(one-9, into-8)
nmod:into(roll-4, one-9)
case(name-13, in-10)
nmod:poss(name-13, her-11)
amod(name-13, own-12)
nmod:in(one-9, name-13)
punct(wanted-2, ,-14)
dep(wanted-2, so-15)
nsubj(sought-17, she-16)
parataxis(wanted-2, sought-17)
det(IRS-19, the-18)
nmod:poss(opinion-21, IRS-19)
case(IRS-19, 's-20)
dobj(sought-17, opinion-21)
punct(wanted-2, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#ira

roll :: The senator , who 'd rolled up a 2-to-1 Dubuque County landslide six years earlier , barely edged Republican challenger Roger Jepsen this time -- and went on to lose the state in a stunning upset ./.
det(senator-2, The-1)
nsubj(rolled-6, senator-2)
nsubj(edged-18, senator-2)
nsubj(went-27, senator-2)
nsubj:xsubj(lose-30, senator-2)
punct(senator-2, ,-3)
ref(senator-2, who-4)
aux(rolled-6, 'd-5)
acl:relcl(senator-2, rolled-6)
compound:prt(rolled-6, up-7)
det(landslide-12, a-8)
amod(landslide-12, 2-to-1-9)
compound(landslide-12, Dubuque-10)
compound(landslide-12, County-11)
dobj(rolled-6, landslide-12)
nummod(years-14, six-13)
nmod:npmod(earlier-15, years-14)
advmod(rolled-6, earlier-15)
punct(senator-2, ,-16)
advmod(edged-18, barely-17)
root(ROOT-0, edged-18)
compound(Jepsen-22, Republican-19)
compound(Jepsen-22, challenger-20)
compound(Jepsen-22, Roger-21)
dobj(edged-18, Jepsen-22)
det(time-24, this-23)
nmod:tmod(edged-18, time-24)
punct(edged-18, ---25)
cc(edged-18, and-26)
conj:and(edged-18, went-27)
compound:prt(went-27, on-28)
mark(lose-30, to-29)
xcomp(went-27, lose-30)
det(state-32, the-31)
dobj(lose-30, state-32)
case(upset-36, in-33)
det(upset-36, a-34)
amod(upset-36, stunning-35)
nmod:in(lose-30, upset-36)
punct(edged-18, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#landslide

roll :: Fisher-Price Toys , a division of Quaker Oats Co . , rolled out a $ 225 kids ' camcorder this Christmas , a pricey departure from its mainstay line of preschool toys ./.
compound(Toys-2, Fisher-Price-1)
root(ROOT-0, Toys-2)
punct(Toys-2, ,-3)
det(division-5, a-4)
appos(Toys-2, division-5)
case(Co-9, of-6)
compound(Co-9, Quaker-7)
compound(Co-9, Oats-8)
nmod:of(division-5, Co-9)
punct(Toys-2, .-10)
punct(rolled-2, ,-1)
root(ROOT-0, rolled-2)
compound:prt(rolled-2, out-3)
det(kids-7, a-4)
amod(kids-7, $-5)
compound($-5, 225-6)
nmod:poss(camcorder-9, kids-7)
case(kids-7, '-8)
dobj(rolled-2, camcorder-9)
det(Christmas-11, this-10)
nmod:tmod(camcorder-9, Christmas-11)
punct(camcorder-9, ,-12)
det(departure-15, a-13)
amod(departure-15, pricey-14)
appos(camcorder-9, departure-15)
case(line-19, from-16)
nmod:poss(line-19, its-17)
compound(line-19, mainstay-18)
nmod:from(departure-15, line-19)
case(toys-22, of-20)
amod(toys-22, preschool-21)
nmod:of(line-19, toys-22)
punct(rolled-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#camcorder

roll :: For only $ 4.95 , it advises me to wrinkle up my nose , pucker my lips , grit my teeth -LRB- but not too tightly -RRB- , smile for a while , open my mouth wide , drop my jaw and roll my eyes around to relax ./.
case($-3, For-1)
advmod($-3, only-2)
nmod:for(advises-7, $-3)
nummod($-3, 4.95-4)
punct(advises-7, ,-5)
nsubj(advises-7, it-6)
root(ROOT-0, advises-7)
dobj(advises-7, me-8)
case(wrinkle-10, to-9)
nmod:to(advises-7, wrinkle-10)
case(nose-13, up-11)
nmod:poss(nose-13, my-12)
nmod:up(wrinkle-10, nose-13)
punct(advises-7, ,-14)
xcomp(advises-7, pucker-15)
nmod:poss(lips-17, my-16)
dobj(pucker-15, lips-17)
punct(advises-7, ,-18)
dobj(advises-7, grit-19)
nmod:poss(teeth-21, my-20)
nsubj(drop-39, teeth-21)
nsubj(roll-43, teeth-21)
punct(tightly-26, -LRB--22)
cc(tightly-26, but-23)
dep(tightly-26, not-24)
advmod(tightly-26, too-25)
dep(teeth-21, tightly-26)
punct(tightly-26, -RRB--27)
punct(teeth-21, ,-28)
appos(teeth-21, smile-29)
case(while-32, for-30)
det(while-32, a-31)
nmod:for(smile-29, while-32)
punct(teeth-21, ,-33)
amod(teeth-21, open-34)
nmod:poss(mouth-36, my-35)
dobj(open-34, mouth-36)
amod(mouth-36, wide-37)
punct(teeth-21, ,-38)
acl:relcl(grit-19, drop-39)
nmod:poss(jaw-41, my-40)
dobj(drop-39, jaw-41)
cc(drop-39, and-42)
acl:relcl(grit-19, roll-43)
conj:and(drop-39, roll-43)
nmod:poss(eyes-45, my-44)
dobj(roll-43, eyes-45)
advmod(roll-43, around-46)
mark(relax-48, to-47)
advcl(roll-43, relax-48)
punct(advises-7, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#eyes

roll :: The plant , the company 's second-largest , has annual slitting and rolling capacity of about 120 , 000 tons ./.
det(plant-2, The-1)
nsubj(has-9, plant-2)
punct(plant-2, ,-3)
det(company-5, the-4)
appos(plant-2, company-5)
case(company-5, 's-6)
amod(company-5, second-largest-7)
punct(plant-2, ,-8)
root(ROOT-0, has-9)
amod(slitting-11, annual-10)
dobj(has-9, slitting-11)
cc(slitting-11, and-12)
amod(capacity-14, rolling-13)
dobj(has-9, capacity-14)
conj:and(slitting-11, capacity-14)
case(120-17, of-15)
advmod(120-17, about-16)
nmod:of(slitting-11, 120-17)
punct(120-17, ,-18)
nummod(tons-20, 000-19)
appos(120-17, tons-20)
punct(has-9, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#capacity

roll :: Charity officials say they need trustees who are willing to roll up their sleeves and work for the organization and who will back up their commitment with donations ./.
compound(officials-2, Charity-1)
nsubj(say-3, officials-2)
root(ROOT-0, say-3)
nsubj(need-5, they-4)
ccomp(say-3, need-5)
dobj(need-5, trustees-6)
nsubj(willing-9, trustees-6)
nsubj:xsubj(roll-11, trustees-6)
ref(trustees-6, who-7)
cop(willing-9, are-8)
acl:relcl(trustees-6, willing-9)
mark(roll-11, to-10)
xcomp(willing-9, roll-11)
compound:prt(roll-11, up-12)
nmod:poss(sleeves-14, their-13)
dobj(roll-11, sleeves-14)
cc(sleeves-14, and-15)
dobj(roll-11, work-16)
conj:and(sleeves-14, work-16)
case(organization-19, for-17)
det(organization-19, the-18)
nmod:for(roll-11, organization-19)
cc(organization-19, and-20)
nsubj(back-23, who-21)
aux(back-23, will-22)
nmod:for(roll-11, back-23)
conj:and(organization-19, back-23)
compound:prt(back-23, up-24)
nmod:poss(commitment-26, their-25)
dobj(back-23, commitment-26)
case(donations-28, with-27)
nmod:with(commitment-26, donations-28)
punct(say-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#sleeves

roll :: Agreement was reached that an initiative to roll back and cap property taxes should be placed on the November ballot ./.
nsubjpass(reached-3, Agreement-1)
auxpass(reached-3, was-2)
root(ROOT-0, reached-3)
dobj(reached-3, that-4)
det(initiative-6, an-5)
dep(that-4, initiative-6)
mark(roll-8, to-7)
acl(initiative-6, roll-8)
advmod(roll-8, back-9)
cc(roll-8, and-10)
compound(taxes-13, cap-11)
compound(taxes-13, property-12)
nsubjpass(placed-16, taxes-13)
aux(placed-16, should-14)
auxpass(placed-16, be-15)
acl(initiative-6, placed-16)
conj:and(roll-8, placed-16)
case(ballot-20, on-17)
det(ballot-20, the-18)
compound(ballot-20, November-19)
nmod:on(placed-16, ballot-20)
punct(reached-3, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

roll :: But this is not to say that old expansions , even ones as sluggish and recession-ridden as this , will roll along indefinitely ./.
cc(say-6, But-1)
nsubj(say-6, this-2)
cop(say-6, is-3)
neg(say-6, not-4)
mark(say-6, to-5)
root(ROOT-0, say-6)
mark(roll-21, that-7)
amod(expansions-9, old-8)
nsubj(roll-21, expansions-9)
punct(expansions-9, ,-10)
advmod(ones-12, even-11)
appos(expansions-9, ones-12)
case(sluggish-14, as-13)
nmod:as(ones-12, sluggish-14)
cc(sluggish-14, and-15)
nmod:as(ones-12, recession-ridden-16)
conj:and(sluggish-14, recession-ridden-16)
case(this-18, as-17)
nmod:as(sluggish-14, this-18)
punct(expansions-9, ,-19)
aux(roll-21, will-20)
ccomp(say-6, roll-21)
compound:prt(roll-21, along-22)
advmod(roll-21, indefinitely-23)
punct(say-6, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#expansions

roll :: `` This gets the ball rolling . ''/''
root(ROOT-0, ``-1)
nsubj(gets-3, This-2)
root(``-1, gets-3)
det(rolling-6, the-4)
compound(rolling-6, ball-5)
dobj(gets-3, rolling-6)
punct(gets-3, .-7)
punct(gets-3, ''-8)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

roll :: In May , the Camden , N.J.-based soup maker will roll out a new line of 99-cent frozen budget breakfasts , as well as a microwaveable Belgian waffle that required a tricky technological feat to make it palatable ./.
case(May-2, In-1)
nmod:in(roll-11, May-2)
punct(roll-11, ,-3)
dep(roll-11, the-4)
dep(roll-11, Camden-5)
punct(roll-11, ,-6)
amod(maker-9, N.J.-based-7)
compound(maker-9, soup-8)
nsubj(roll-11, maker-9)
aux(roll-11, will-10)
root(ROOT-0, roll-11)
compound:prt(roll-11, out-12)
det(line-15, a-13)
amod(line-15, new-14)
dobj(roll-11, line-15)
case(breakfasts-20, of-16)
nummod(breakfasts-20, 99-cent-17)
amod(breakfasts-20, frozen-18)
compound(breakfasts-20, budget-19)
nmod:of(line-15, breakfasts-20)
punct(line-15, ,-21)
cc(line-15, as-22)
mwe(as-22, well-23)
mwe(as-22, as-24)
det(waffle-28, a-25)
amod(waffle-28, microwaveable-26)
amod(waffle-28, Belgian-27)
dobj(roll-11, waffle-28)
conj:and(line-15, waffle-28)
nsubj(required-30, waffle-28)
ref(waffle-28, that-29)
acl:relcl(waffle-28, required-30)
det(feat-34, a-31)
amod(feat-34, tricky-32)
amod(feat-34, technological-33)
dobj(required-30, feat-34)
nsubj:xsubj(make-36, feat-34)
mark(make-36, to-35)
xcomp(required-30, make-36)
nsubj(palatable-38, it-37)
xcomp(make-36, palatable-38)
punct(roll-11, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#breakfasts

roll :: At home , Arena could use its new majority status to block , or even roll back , land-reform programs , says Enrique Baloyra , associate dean of the University of Miami 's Graduate School of International Studies ./.
case(home-2, At-1)
nmod:at(use-6, home-2)
punct(use-6, ,-3)
nsubj(use-6, Arena-4)
aux(use-6, could-5)
root(ROOT-0, use-6)
nmod:poss(status-10, its-7)
amod(status-10, new-8)
compound(status-10, majority-9)
dobj(use-6, status-10)
mark(block-12, to-11)
advcl(use-6, block-12)
punct(block-12, ,-13)
cc(block-12, or-14)
advmod(roll-16, even-15)
advcl(use-6, roll-16)
conj:or(block-12, roll-16)
advmod(roll-16, back-17)
punct(block-12, ,-18)
amod(programs-20, land-reform-19)
advcl(use-6, programs-20)
conj:or(block-12, programs-20)
punct(block-12, ,-21)
advcl(use-6, says-22)
conj:or(block-12, says-22)
compound(Baloyra-24, Enrique-23)
nsubj(says-22, Baloyra-24)
punct(Baloyra-24, ,-25)
amod(dean-27, associate-26)
appos(Baloyra-24, dean-27)
case(University-30, of-28)
det(University-30, the-29)
nmod:of(dean-27, University-30)
case(School-35, of-31)
nmod:poss(School-35, Miami-32)
case(Miami-32, 's-33)
amod(School-35, Graduate-34)
nmod:of(University-30, School-35)
case(Studies-38, of-36)
amod(Studies-38, International-37)
nmod:of(School-35, Studies-38)
punct(use-6, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

roll :: Their eyes roll back into their heads . ''/''
nmod:poss(eyes-2, Their-1)
nsubj(roll-3, eyes-2)
root(ROOT-0, roll-3)
advmod(roll-3, back-4)
case(heads-7, into-5)
nmod:poss(heads-7, their-6)
nmod:into(roll-3, heads-7)
punct(roll-3, .-8)
punct(roll-3, ''-9)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: roll#eyes

roll :: The Bells have versions of many of these services ready to roll ./.
det(Bells-2, The-1)
nsubj(have-3, Bells-2)
root(ROOT-0, have-3)
nsubj(ready-10, versions-4)
nsubj:xsubj(roll-12, versions-4)
case(many-6, of-5)
nmod:of(versions-4, many-6)
case(services-9, of-7)
det(services-9, these-8)
nmod:of(many-6, services-9)
xcomp(have-3, ready-10)
mark(roll-12, to-11)
xcomp(ready-10, roll-12)
punct(have-3, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#versions

roll :: `` If it 's successful , we 'll roll out the concept elsewhere , '' said Craig Kirsch , General Nutrition 's chief financial officer ./.
punct(said-16, ``-1)
mark(successful-5, If-2)
nsubj(successful-5, it-3)
cop(successful-5, 's-4)
advcl(roll-9, successful-5)
punct(roll-9, ,-6)
nsubj(roll-9, we-7)
aux(roll-9, 'll-8)
ccomp(said-16, roll-9)
compound:prt(roll-9, out-10)
det(concept-12, the-11)
dobj(roll-9, concept-12)
advmod(roll-9, elsewhere-13)
punct(said-16, ,-14)
punct(said-16, ''-15)
root(ROOT-0, said-16)
compound(Kirsch-18, Craig-17)
nsubj(said-16, Kirsch-18)
punct(Kirsch-18, ,-19)
amod(Nutrition-21, General-20)
nmod:poss(officer-25, Nutrition-21)
case(Nutrition-21, 's-22)
amod(officer-25, chief-23)
amod(officer-25, financial-24)
appos(Kirsch-18, officer-25)
punct(said-16, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#concept

roll :: The `` victims '' had control of their lives while the good times rolled ./.
det(victims-3, The-1)
punct(victims-3, ``-2)
nsubj(had-5, victims-3)
punct(victims-3, ''-4)
root(ROOT-0, had-5)
dobj(had-5, control-6)
case(lives-9, of-7)
nmod:poss(lives-9, their-8)
nmod:of(control-6, lives-9)
mark(rolled-14, while-10)
det(times-13, the-11)
amod(times-13, good-12)
nsubj(rolled-14, times-13)
advcl(had-5, rolled-14)
punct(had-5, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#times

roll :: Once , in Missoula , Mont . , the behemoth had to be rolled over the back of the seats on plywood ./.
advmod(Mont-6, Once-1)
punct(Mont-6, ,-2)
case(Missoula-4, in-3)
nmod:in(Mont-6, Missoula-4)
punct(Mont-6, ,-5)
root(ROOT-0, Mont-6)
punct(Mont-6, .-7)
punct(had-4, ,-1)
det(behemoth-3, the-2)
nsubj(had-4, behemoth-3)
nsubjpass:xsubj(rolled-7, behemoth-3)
root(ROOT-0, had-4)
mark(rolled-7, to-5)
auxpass(rolled-7, be-6)
xcomp(had-4, rolled-7)
case(back-10, over-8)
det(back-10, the-9)
nmod:over(rolled-7, back-10)
case(seats-13, of-11)
det(seats-13, the-12)
nmod:of(back-10, seats-13)
case(plywood-15, on-14)
nmod:on(seats-13, plywood-15)
punct(had-4, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#be

roll :: Because eight of the GOP contests are winner-take-all by congressional district -LRB- and by statewide totals for at-large delegates -RRB- , Mr. Bush was on course to roll up a huge number of delegates for next summer 's national convention ./.
mark(winner-take-all-8, Because-1)
nsubj(winner-take-all-8, eight-2)
case(contests-6, of-3)
det(contests-6, the-4)
compound(contests-6, GOP-5)
nmod:of(eight-2, contests-6)
cop(winner-take-all-8, are-7)
root(ROOT-0, winner-take-all-8)
case(district-11, by-9)
amod(district-11, congressional-10)
nmod:by(winner-take-all-8, district-11)
punct(course-26, -LRB--12)
cc(course-26, and-13)
case(totals-16, by-14)
amod(totals-16, statewide-15)
nmod:by(course-26, totals-16)
case(delegates-19, for-17)
amod(delegates-19, at-large-18)
nmod:for(totals-16, delegates-19)
punct(totals-16, -RRB--20)
punct(course-26, ,-21)
compound(Bush-23, Mr.-22)
nsubj(course-26, Bush-23)
cop(course-26, was-24)
case(course-26, on-25)
dep(winner-take-all-8, course-26)
mark(roll-28, to-27)
acl(course-26, roll-28)
compound:prt(roll-28, up-29)
det(number-32, a-30)
amod(number-32, huge-31)
dobj(roll-28, number-32)
case(delegates-34, of-33)
nmod:of(number-32, delegates-34)
case(convention-40, for-35)
amod(summer-37, next-36)
nmod:poss(convention-40, summer-37)
case(summer-37, 's-38)
compound(convention-40, national-39)
nmod:for(roll-28, convention-40)
punct(winner-take-all-8, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#delegates

roll :: But he did say that `` there are no heads that are going to roll . ''/''
cc(say-4, But-1)
nsubj(say-4, he-2)
aux(say-4, did-3)
root(ROOT-0, say-4)
mark(are-8, that-5)
punct(are-8, ``-6)
expl(are-8, there-7)
ccomp(say-4, are-8)
neg(heads-10, no-9)
nsubj(are-8, heads-10)
nsubj(going-13, heads-10)
nsubj:xsubj(roll-15, heads-10)
ref(heads-10, that-11)
aux(going-13, are-12)
acl:relcl(heads-10, going-13)
mark(roll-15, to-14)
xcomp(going-13, roll-15)
punct(say-4, .-16)
punct(say-4, ''-17)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: roll#heads

roll :: Meanwhile , the Democrats roll into New Hampshire as a kind of troika -- Rep. Richard Gephardt of Missouri , the Iowa winner , and his two close pursuers , Gov. Michael Dukakis of Massachusetts and Sen. Paul Simon of Illinois ./.
advmod(roll-5, Meanwhile-1)
punct(roll-5, ,-2)
det(Democrats-4, the-3)
nsubj(roll-5, Democrats-4)
root(ROOT-0, roll-5)
case(Hampshire-8, into-6)
compound(Hampshire-8, New-7)
nmod:into(roll-5, Hampshire-8)
case(kind-11, as-9)
det(kind-11, a-10)
nmod:as(roll-5, kind-11)
case(troika-13, of-12)
nmod:of(kind-11, troika-13)
punct(roll-5, ---14)
compound(Gephardt-17, Rep.-15)
compound(Gephardt-17, Richard-16)
dobj(roll-5, Gephardt-17)
case(Missouri-19, of-18)
nmod:of(Gephardt-17, Missouri-19)
punct(Gephardt-17, ,-20)
det(winner-23, the-21)
compound(winner-23, Iowa-22)
appos(Gephardt-17, winner-23)
punct(Gephardt-17, ,-24)
cc(Gephardt-17, and-25)
nmod:poss(pursuers-29, his-26)
nummod(pursuers-29, two-27)
amod(pursuers-29, close-28)
dobj(roll-5, pursuers-29)
conj:and(Gephardt-17, pursuers-29)
punct(pursuers-29, ,-30)
compound(Dukakis-33, Gov.-31)
compound(Dukakis-33, Michael-32)
appos(pursuers-29, Dukakis-33)
case(Massachusetts-35, of-34)
nmod:of(Dukakis-33, Massachusetts-35)
cc(Dukakis-33, and-36)
compound(Simon-39, Sen.-37)
compound(Simon-39, Paul-38)
appos(pursuers-29, Simon-39)
conj:and(Dukakis-33, Simon-39)
case(Illinois-41, of-40)
nmod:of(Simon-39, Illinois-41)
punct(roll-5, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#missouri

roll :: For only $ 4.95 , it advises me to wrinkle up my nose , pucker my lips , grit my teeth -LRB- but not too tightly -RRB- , smile for a while , open my mouth wide , drop my jaw and roll my eyes around to relax ./.
case($-3, For-1)
advmod($-3, only-2)
nmod:for(advises-7, $-3)
nummod($-3, 4.95-4)
punct(advises-7, ,-5)
nsubj(advises-7, it-6)
root(ROOT-0, advises-7)
dobj(advises-7, me-8)
case(wrinkle-10, to-9)
nmod:to(advises-7, wrinkle-10)
case(nose-13, up-11)
nmod:poss(nose-13, my-12)
nmod:up(wrinkle-10, nose-13)
punct(advises-7, ,-14)
xcomp(advises-7, pucker-15)
nmod:poss(lips-17, my-16)
dobj(pucker-15, lips-17)
punct(advises-7, ,-18)
dobj(advises-7, grit-19)
nmod:poss(teeth-21, my-20)
nsubj(drop-39, teeth-21)
nsubj(roll-43, teeth-21)
punct(tightly-26, -LRB--22)
cc(tightly-26, but-23)
dep(tightly-26, not-24)
advmod(tightly-26, too-25)
dep(teeth-21, tightly-26)
punct(tightly-26, -RRB--27)
punct(teeth-21, ,-28)
appos(teeth-21, smile-29)
case(while-32, for-30)
det(while-32, a-31)
nmod:for(smile-29, while-32)
punct(teeth-21, ,-33)
amod(teeth-21, open-34)
nmod:poss(mouth-36, my-35)
dobj(open-34, mouth-36)
amod(mouth-36, wide-37)
punct(teeth-21, ,-38)
acl:relcl(grit-19, drop-39)
nmod:poss(jaw-41, my-40)
dobj(drop-39, jaw-41)
cc(drop-39, and-42)
acl:relcl(grit-19, roll-43)
conj:and(drop-39, roll-43)
nmod:poss(eyes-45, my-44)
dobj(roll-43, eyes-45)
advmod(roll-43, around-46)
mark(relax-48, to-47)
advcl(roll-43, relax-48)
punct(advises-7, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#eyes

roll :: After a little more than two months of deliberations , the Presidential Task Force on Market Mechanisms , also known as the Brady commission , has rolled out its proposals ./.
case(months-7, After-1)
det(months-7, a-2)
advmod(two-6, little-3)
advmod(two-6, more-4)
mwe(more-4, than-5)
nummod(months-7, two-6)
nmod:after(rolled-27, months-7)
case(deliberations-9, of-8)
nmod:of(months-7, deliberations-9)
punct(rolled-27, ,-10)
det(Force-14, the-11)
amod(Force-14, Presidential-12)
compound(Force-14, Task-13)
nsubj(rolled-27, Force-14)
case(Mechanisms-17, on-15)
compound(Mechanisms-17, Market-16)
nmod:on(Force-14, Mechanisms-17)
punct(Mechanisms-17, ,-18)
advmod(known-20, also-19)
acl(Mechanisms-17, known-20)
case(commission-24, as-21)
det(commission-24, the-22)
compound(commission-24, Brady-23)
nmod:as(known-20, commission-24)
punct(Mechanisms-17, ,-25)
aux(rolled-27, has-26)
root(ROOT-0, rolled-27)
compound:prt(rolled-27, out-28)
nmod:poss(proposals-30, its-29)
dobj(rolled-27, proposals-30)
punct(rolled-27, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#proposals

roll :: Mr. Groner touches down at the Orlando airport at 5:54 a.m . , and a dumpster-size container carrying our package is rolled onto a truck bound for a sorting center in Longwood , Fla ./.
compound(Groner-2, Mr.-1)
nsubj(touches-3, Groner-2)
root(ROOT-0, touches-3)
compound:prt(touches-3, down-4)
case(airport-8, at-5)
det(airport-8, the-6)
compound(airport-8, Orlando-7)
nmod:at(touches-3, airport-8)
case(5:54-10, at-9)
nmod:at(touches-3, 5:54-10)
advmod(5:54-10, a.m-11)
punct(touches-3, .-12)
punct(container-5, ,-1)
cc(container-5, and-2)
det(container-5, a-3)
amod(container-5, dumpster-size-4)
dep(rolled-10, container-5)
acl(container-5, carrying-6)
nmod:poss(package-8, our-7)
dobj(carrying-6, package-8)
auxpass(rolled-10, is-9)
root(ROOT-0, rolled-10)
case(truck-13, onto-11)
det(truck-13, a-12)
nmod:onto(rolled-10, truck-13)
acl(truck-13, bound-14)
case(center-18, for-15)
det(center-18, a-16)
amod(center-18, sorting-17)
nmod:for(bound-14, center-18)
case(Longwood-20, in-19)
nmod:in(center-18, Longwood-20)
punct(Longwood-20, ,-21)
appos(Longwood-20, Fla-22)
punct(rolled-10, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#is

roll :: The former official says that Fidelity trucks , often manned by temporary or part-time workers , would roll in with piles of unlabeled goods collected from multiple addresses ./.
det(official-3, The-1)
amod(official-3, former-2)
nsubj(says-4, official-3)
root(ROOT-0, says-4)
mark(roll-18, that-5)
compound(trucks-7, Fidelity-6)
nsubj(roll-18, trucks-7)
punct(trucks-7, ,-8)
advmod(manned-10, often-9)
acl(trucks-7, manned-10)
case(workers-15, by-11)
amod(workers-15, temporary-12)
cc(temporary-12, or-13)
conj:or(temporary-12, part-time-14)
amod(workers-15, part-time-14)
nmod:by(manned-10, workers-15)
punct(trucks-7, ,-16)
aux(roll-18, would-17)
ccomp(says-4, roll-18)
compound:prt(roll-18, in-19)
case(piles-21, with-20)
nmod:with(roll-18, piles-21)
case(goods-24, of-22)
amod(goods-24, unlabeled-23)
nmod:of(piles-21, goods-24)
acl(goods-24, collected-25)
case(addresses-28, from-26)
amod(addresses-28, multiple-27)
nmod:from(collected-25, addresses-28)
punct(says-4, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#trucks

roll :: And while RJR Nabisco Inc. has low-salt Ritz Bits crackers , Supermarkets General Corp. 's Pathmark is about to roll out its own no-salt version ./.
cc(about-18, And-1)
mark(has-6, while-2)
compound(Inc.-5, RJR-3)
compound(Inc.-5, Nabisco-4)
nsubj(has-6, Inc.-5)
advcl(about-18, has-6)
amod(crackers-10, low-salt-7)
compound(crackers-10, Ritz-8)
compound(crackers-10, Bits-9)
dobj(has-6, crackers-10)
punct(about-18, ,-11)
compound(Corp.-14, Supermarkets-12)
compound(Corp.-14, General-13)
nmod:poss(Pathmark-16, Corp.-14)
case(Corp.-14, 's-15)
nsubj(about-18, Pathmark-16)
nsubj:xsubj(roll-20, Pathmark-16)
aux(about-18, is-17)
root(ROOT-0, about-18)
mark(roll-20, to-19)
xcomp(about-18, roll-20)
compound:prt(roll-20, out-21)
nmod:poss(version-25, its-22)
amod(version-25, own-23)
compound(version-25, no-salt-24)
dobj(roll-20, version-25)
punct(about-18, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#version

roll :: Using another feed formula , Rosemary Farms in Santa Maria , Calif . , has started rolling out an egg that it says has 55 % less cholesterol than normal -LRB- though such claims are controversial -RRB- ./.
root(ROOT-0, Using-1)
det(formula-4, another-2)
compound(formula-4, feed-3)
dobj(Using-1, formula-4)
punct(Using-1, ,-5)
compound(Farms-7, Rosemary-6)
root(,-5, Farms-7)
case(Maria-10, in-8)
compound(Maria-10, Santa-9)
nmod:in(Farms-7, Maria-10)
punct(Maria-10, ,-11)
appos(Maria-10, Calif-12)
punct(Farms-7, .-13)
punct(started-3, ,-1)
aux(started-3, has-2)
root(ROOT-0, started-3)
xcomp(started-3, rolling-4)
compound:prt(rolling-4, out-5)
det(egg-7, an-6)
dobj(rolling-4, egg-7)
dobj(says-10, egg-7)
ref(egg-7, that-8)
nsubj(says-10, it-9)
acl:relcl(egg-7, says-10)
ccomp(says-10, has-11)
nummod(%-13, 55-12)
nmod:npmod(less-14, %-13)
amod(cholesterol-15, less-14)
dobj(has-11, cholesterol-15)
case(normal-17, than-16)
acl(cholesterol-15, normal-17)
punct(controversial-23, -LRB--18)
mark(controversial-23, though-19)
amod(claims-21, such-20)
nsubj(controversial-23, claims-21)
cop(controversial-23, are-22)
dep(has-11, controversial-23)
punct(controversial-23, -RRB--24)
punct(started-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#egg

roll :: Dropping from the sky like a truck with the motor running , the Hoosier Pride has thomped down in St. Louis and the 41-year-old Republican vice-presidential candidate is rolling away in a motorcade , past Taco Bell , Hardees , Schnuck 's and assorted body-repair shops , to arrive at Fox Senior High School in the little town of Arnold ./.
advcl(thomped-17, Dropping-1)
case(sky-4, from-2)
det(sky-4, the-3)
nmod:from(Dropping-1, sky-4)
case(truck-7, like-5)
det(truck-7, a-6)
nmod:like(Dropping-1, truck-7)
case(running-11, with-8)
det(running-11, the-9)
compound(running-11, motor-10)
nmod:with(truck-7, running-11)
punct(thomped-17, ,-12)
det(Pride-15, the-13)
compound(Pride-15, Hoosier-14)
nsubj(thomped-17, Pride-15)
aux(thomped-17, has-16)
csubj(rolling-29, thomped-17)
compound:prt(thomped-17, down-18)
case(Louis-21, in-19)
compound(Louis-21, St.-20)
nmod:in(thomped-17, Louis-21)
cc(Louis-21, and-22)
det(candidate-27, the-23)
amod(candidate-27, 41-year-old-24)
amod(candidate-27, Republican-25)
amod(candidate-27, vice-presidential-26)
nmod:in(thomped-17, candidate-27)
conj:and(Louis-21, candidate-27)
aux(rolling-29, is-28)
root(ROOT-0, rolling-29)
advmod(rolling-29, away-30)
case(motorcade-33, in-31)
det(motorcade-33, a-32)
nmod:in(rolling-29, motorcade-33)
punct(motorcade-33, ,-34)
compound(Bell-37, past-35)
compound(Bell-37, Taco-36)
appos(motorcade-33, Bell-37)
punct(Bell-37, ,-38)
appos(Bell-37, Hardees-39)
punct(Bell-37, ,-40)
appos(Bell-37, Schnuck-41)
case(Schnuck-41, 's-42)
cc(Schnuck-41, and-43)
amod(shops-46, assorted-44)
amod(shops-46, body-repair-45)
appos(Bell-37, shops-46)
conj:and(Schnuck-41, shops-46)
punct(Bell-37, ,-47)
mark(arrive-49, to-48)
acl(motorcade-33, arrive-49)
case(School-54, at-50)
compound(School-54, Fox-51)
amod(School-54, Senior-52)
amod(School-54, High-53)
nmod:at(arrive-49, School-54)
case(town-58, in-55)
det(town-58, the-56)
amod(town-58, little-57)
nmod:in(arrive-49, town-58)
case(Arnold-60, of-59)
nmod:of(town-58, Arnold-60)
punct(rolling-29, .-61)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#motorcade

roll :: I thought it happened during a Bush administration , but never mind , we 're ready to roll ./.
nsubj(thought-2, I-1)
root(ROOT-0, thought-2)
nsubj(happened-4, it-3)
ccomp(thought-2, happened-4)
case(administration-8, during-5)
det(administration-8, a-6)
compound(administration-8, Bush-7)
nmod:during(happened-4, administration-8)
punct(thought-2, ,-9)
cc(thought-2, but-10)
neg(mind-12, never-11)
advcl(ready-16, mind-12)
punct(ready-16, ,-13)
nsubj(ready-16, we-14)
nsubj:xsubj(roll-18, we-14)
cop(ready-16, 're-15)
conj:but(thought-2, ready-16)
mark(roll-18, to-17)
xcomp(ready-16, roll-18)
punct(thought-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#we

roll :: While American and Delta airlines have reputations as places `` where people really like to work , '' employees at Eastern and Continental `` roll their eyes '' when asked about their jobs , said Southern Illinois University associate professor David A. NewMyer ./.
mark(have-6, While-1)
compound(airlines-5, American-2)
cc(American-2, and-3)
conj:and(American-2, Delta-4)
compound(airlines-5, Delta-4)
nsubj(have-6, airlines-5)
advcl(roll-25, have-6)
dobj(have-6, reputations-7)
case(places-9, as-8)
nmod:as(have-6, places-9)
punct(places-9, ``-10)
advmod(like-14, where-11)
nsubj(like-14, people-12)
nsubj:xsubj(work-16, people-12)
advmod(like-14, really-13)
acl:relcl(places-9, like-14)
mark(work-16, to-15)
xcomp(like-14, work-16)
punct(roll-25, ,-17)
punct(roll-25, ''-18)
nsubj(roll-25, employees-19)
case(Eastern-21, at-20)
nmod:at(employees-19, Eastern-21)
cc(Eastern-21, and-22)
nmod:at(employees-19, Continental-23)
conj:and(Eastern-21, Continental-23)
punct(roll-25, ``-24)
ccomp(said-35, roll-25)
nmod:poss(eyes-27, their-26)
dobj(roll-25, eyes-27)
punct(eyes-27, ''-28)
advmod(asked-30, when-29)
advcl(roll-25, asked-30)
case(jobs-33, about-31)
nmod:poss(jobs-33, their-32)
nmod:about(asked-30, jobs-33)
punct(said-35, ,-34)
root(ROOT-0, said-35)
compound(NewMyer-43, Southern-36)
compound(NewMyer-43, Illinois-37)
compound(NewMyer-43, University-38)
amod(NewMyer-43, associate-39)
compound(NewMyer-43, professor-40)
compound(NewMyer-43, David-41)
compound(NewMyer-43, A.-42)
nsubj(said-35, NewMyer-43)
punct(said-35, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#eyes

roll :: `` We have n't successfully rolled back the frontiers of the state in Britain , '' she said in a recent speech , `` only to see them reimposed at a European level . ''/''
punct(said-18, ``-1)
nsubj(rolled-6, We-2)
aux(rolled-6, have-3)
neg(rolled-6, n't-4)
advmod(rolled-6, successfully-5)
ccomp(said-18, rolled-6)
compound:prt(rolled-6, back-7)
det(frontiers-9, the-8)
dobj(rolled-6, frontiers-9)
case(state-12, of-10)
det(state-12, the-11)
nmod:of(frontiers-9, state-12)
case(Britain-14, in-13)
nmod:in(rolled-6, Britain-14)
punct(said-18, ,-15)
punct(said-18, ''-16)
nsubj(said-18, she-17)
root(ROOT-0, said-18)
case(speech-22, in-19)
det(speech-22, a-20)
amod(speech-22, recent-21)
nmod:in(said-18, speech-22)
punct(said-18, ,-23)
punct(said-18, ``-24)
advmod(see-27, only-25)
mark(see-27, to-26)
ccomp(said-18, see-27)
nsubj(reimposed-29, them-28)
dep(see-27, reimposed-29)
case(level-33, at-30)
det(level-33, a-31)
amod(level-33, European-32)
nmod:at(reimposed-29, level-33)
punct(said-18, .-34)
punct(said-18, ''-35)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: roll#state

roll :: Golden Nugget Inc. announced ambitious plans to roll back into the New Jersey gambling scene by buying the Claridge Hotel-Casino , and Golden Nugget Chairman Steven A. Wynn may be betting on a novel marketing strategy to make his re-entry work ./.
compound(Inc.-3, Golden-1)
compound(Inc.-3, Nugget-2)
nsubj(announced-4, Inc.-3)
root(ROOT-0, announced-4)
amod(plans-6, ambitious-5)
dobj(announced-4, plans-6)
mark(roll-8, to-7)
acl(plans-6, roll-8)
advmod(roll-8, back-9)
case(scene-15, into-10)
det(scene-15, the-11)
compound(scene-15, New-12)
compound(scene-15, Jersey-13)
amod(scene-15, gambling-14)
nmod:into(roll-8, scene-15)
mark(buying-17, by-16)
advcl(roll-8, buying-17)
det(Hotel-Casino-20, the-18)
compound(Hotel-Casino-20, Claridge-19)
dobj(buying-17, Hotel-Casino-20)
punct(announced-4, ,-21)
cc(announced-4, and-22)
compound(Wynn-28, Golden-23)
compound(Wynn-28, Nugget-24)
compound(Wynn-28, Chairman-25)
compound(Wynn-28, Steven-26)
compound(Wynn-28, A.-27)
nsubj(betting-31, Wynn-28)
aux(betting-31, may-29)
aux(betting-31, be-30)
conj:and(announced-4, betting-31)
case(strategy-36, on-32)
det(strategy-36, a-33)
amod(strategy-36, novel-34)
compound(strategy-36, marketing-35)
nmod:on(betting-31, strategy-36)
mark(make-38, to-37)
acl(strategy-36, make-38)
nmod:poss(work-41, his-39)
compound(work-41, re-entry-40)
dobj(make-38, work-41)
punct(announced-4, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#scene

roll :: Many American industries suffer a comparative wage disadvantage vs. foreign competitors , but this single factor is hardly prima facie evidence that such companies should roll over and play dead ./.
amod(industries-3, Many-1)
compound(industries-3, American-2)
nsubj(suffer-4, industries-3)
root(ROOT-0, suffer-4)
det(disadvantage-8, a-5)
amod(disadvantage-8, comparative-6)
compound(disadvantage-8, wage-7)
dobj(suffer-4, disadvantage-8)
cc(disadvantage-8, vs.-9)
amod(competitors-11, foreign-10)
dobj(suffer-4, competitors-11)
conj:vs.(disadvantage-8, competitors-11)
punct(suffer-4, ,-12)
cc(suffer-4, but-13)
det(factor-16, this-14)
amod(factor-16, single-15)
nsubj(evidence-21, factor-16)
cop(evidence-21, is-17)
advmod(evidence-21, hardly-18)
compound(evidence-21, prima-19)
compound(evidence-21, facie-20)
conj:but(suffer-4, evidence-21)
mark(roll-26, that-22)
amod(companies-24, such-23)
nsubj(roll-26, companies-24)
nsubj(play-29, companies-24)
aux(roll-26, should-25)
ccomp(evidence-21, roll-26)
advmod(roll-26, over-27)
cc(roll-26, and-28)
ccomp(evidence-21, play-29)
conj:and(roll-26, play-29)
xcomp(play-29, dead-30)
punct(suffer-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#companies

roll :: Whatever , I got tired staring at it night after night , though I liked the eerie scene of shrouded , ghostly warriors standing silently on platforms that slowly roll them down the road into oblivion ./.
advmod(got-4, Whatever-1)
punct(got-4, ,-2)
nsubj(got-4, I-3)
root(ROOT-0, got-4)
xcomp(got-4, tired-5)
dep(tired-5, staring-6)
case(it-8, at-7)
nmod:at(staring-6, it-8)
advmod(staring-6, night-9)
case(night-11, after-10)
nmod:after(staring-6, night-11)
punct(got-4, ,-12)
mark(liked-15, though-13)
nsubj(liked-15, I-14)
advcl(got-4, liked-15)
det(scene-18, the-16)
amod(scene-18, eerie-17)
dobj(liked-15, scene-18)
case(shrouded-20, of-19)
nmod:of(scene-18, shrouded-20)
punct(shrouded-20, ,-21)
amod(warriors-23, ghostly-22)
appos(shrouded-20, warriors-23)
acl(warriors-23, standing-24)
advmod(standing-24, silently-25)
case(platforms-27, on-26)
nmod:on(standing-24, platforms-27)
nsubj(roll-30, platforms-27)
ref(platforms-27, that-28)
advmod(roll-30, slowly-29)
acl:relcl(platforms-27, roll-30)
dobj(roll-30, them-31)
compound:prt(roll-30, down-32)
det(road-34, the-33)
dobj(roll-30, road-34)
case(oblivion-36, into-35)
nmod:into(road-34, oblivion-36)
punct(got-4, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#them

roll :: He also indicates that he would roll back some of the deregulation pushed through during the Reagan years , particularly pledging tougher antitrust policies ./.
nsubj(indicates-3, He-1)
advmod(indicates-3, also-2)
root(ROOT-0, indicates-3)
mark(roll-7, that-4)
nsubj(roll-7, he-5)
aux(roll-7, would-6)
ccomp(indicates-3, roll-7)
advmod(roll-7, back-8)
dobj(roll-7, some-9)
case(deregulation-12, of-10)
det(deregulation-12, the-11)
nmod:of(some-9, deregulation-12)
acl(deregulation-12, pushed-13)
compound:prt(pushed-13, through-14)
case(years-18, during-15)
det(years-18, the-16)
compound(years-18, Reagan-17)
nmod:during(pushed-13, years-18)
punct(roll-7, ,-19)
advmod(pledging-21, particularly-20)
advcl(roll-7, pledging-21)
amod(policies-24, tougher-22)
amod(policies-24, antitrust-23)
dobj(pledging-21, policies-24)
punct(indicates-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#deregulation

roll :: To get some idea of how far back down the mountain American politics has rolled consider that the biggest individual political decision George Bush and Michael Dukakis have made so far in their runs for the presidency is selecting Dan Quayle and Lloyd Bentsen as their running mates ./.
mark(get-2, To-1)
csubj(rolled-15, get-2)
det(idea-4, some-3)
dobj(get-2, idea-4)
case(back-8, of-5)
advmod(far-7, how-6)
advmod(back-8, far-7)
nmod:of(idea-4, back-8)
case(politics-13, down-9)
det(politics-13, the-10)
compound(politics-13, mountain-11)
amod(politics-13, American-12)
nmod:down(back-8, politics-13)
aux(rolled-15, has-14)
csubj(selecting-39, rolled-15)
ccomp(rolled-15, consider-16)
mark(made-29, that-17)
det(Bush-24, the-18)
amod(Bush-24, biggest-19)
amod(Bush-24, individual-20)
amod(Bush-24, political-21)
compound(Bush-24, decision-22)
compound(Bush-24, George-23)
nsubj(made-29, Bush-24)
cc(Bush-24, and-25)
compound(Dukakis-27, Michael-26)
conj:and(Bush-24, Dukakis-27)
nsubj(made-29, Dukakis-27)
aux(made-29, have-28)
ccomp(consider-16, made-29)
advmod(far-31, so-30)
advmod(made-29, far-31)
case(runs-34, in-32)
nmod:poss(runs-34, their-33)
nmod:in(far-31, runs-34)
case(presidency-37, for-35)
det(presidency-37, the-36)
nmod:for(runs-34, presidency-37)
aux(selecting-39, is-38)
root(ROOT-0, selecting-39)
compound(Quayle-41, Dan-40)
dobj(selecting-39, Quayle-41)
cc(Quayle-41, and-42)
compound(Bentsen-44, Lloyd-43)
dobj(selecting-39, Bentsen-44)
conj:and(Quayle-41, Bentsen-44)
case(mates-48, as-45)
nmod:poss(mates-48, their-46)
amod(mates-48, running-47)
nmod:as(selecting-39, mates-48)
punct(selecting-39, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

roll :: `` The rumbling you hear . .. is the sound of Cadwalader , Wickersham and Taft rolling over in their graves at having the name of their firm identified '' in this kind of letter , says former Chief Justice Burger ./.
root(ROOT-0, ``-1)
det(rumbling-3, The-2)
root(``-1, rumbling-3)
nsubj(hear-5, you-4)
ccomp(rumbling-3, hear-5)
punct(hear-5, .-6)
punct(rumbling-3, .-7)
punct(rumbling-3, .-8)
cop(sound-3, is-1)
det(sound-3, the-2)
nsubj(identified-22, sound-3)
case(Cadwalader-5, of-4)
nmod:of(sound-3, Cadwalader-5)
punct(Cadwalader-5, ,-6)
nmod:of(sound-3, Wickersham-7)
conj:and(Cadwalader-5, Wickersham-7)
cc(Cadwalader-5, and-8)
compound(rolling-10, Taft-9)
nmod:of(sound-3, rolling-10)
conj:and(Cadwalader-5, rolling-10)
case(graves-14, over-11)
case(graves-14, in-12)
nmod:poss(graves-14, their-13)
nmod:in(sound-3, graves-14)
mark(having-16, at-15)
acl(sound-3, having-16)
det(name-18, the-17)
dobj(having-16, name-18)
case(firm-21, of-19)
nmod:poss(firm-21, their-20)
nmod:of(name-18, firm-21)
ccomp(says-30, identified-22)
punct(identified-22, ''-23)
case(kind-26, in-24)
det(kind-26, this-25)
nmod:in(identified-22, kind-26)
case(letter-28, of-27)
nmod:of(kind-26, letter-28)
punct(says-30, ,-29)
root(ROOT-0, says-30)
amod(Burger-34, former-31)
compound(Burger-34, Chief-32)
compound(Burger-34, Justice-33)
nsubj(says-30, Burger-34)
punct(says-30, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

roll :: Mr. Ruder has such a zeal to regulate that two of his commissioners are ready to roll him off the gangplank ./.
compound(Ruder-2, Mr.-1)
nsubj(has-3, Ruder-2)
root(ROOT-0, has-3)
det:predet(zeal-6, such-4)
det(zeal-6, a-5)
dobj(has-3, zeal-6)
mark(regulate-8, to-7)
acl(zeal-6, regulate-8)
mark(ready-15, that-9)
nsubj(ready-15, two-10)
nsubj:xsubj(roll-17, two-10)
case(commissioners-13, of-11)
nmod:poss(commissioners-13, his-12)
nmod:of(two-10, commissioners-13)
cop(ready-15, are-14)
ccomp(regulate-8, ready-15)
mark(roll-17, to-16)
xcomp(ready-15, roll-17)
dobj(roll-17, him-18)
case(gangplank-21, off-19)
det(gangplank-21, the-20)
nmod:off(roll-17, gangplank-21)
punct(has-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#him

roll :: Next month , A & P will roll out these jams and jellies , now sold only in New York , to its 986 stores in the U.S ./.
amod(month-2, Next-1)
nmod:tmod(roll-8, month-2)
punct(roll-8, ,-3)
nsubj(roll-8, A-4)
cc(A-4, &-5)
conj:&(A-4, P-6)
nsubj(roll-8, P-6)
aux(roll-8, will-7)
root(ROOT-0, roll-8)
compound:prt(roll-8, out-9)
det(jams-11, these-10)
dobj(roll-8, jams-11)
cc(jams-11, and-12)
dobj(roll-8, jellies-13)
conj:and(jams-11, jellies-13)
punct(roll-8, ,-14)
advmod(sold-16, now-15)
advcl(roll-8, sold-16)
advmod(York-20, only-17)
case(York-20, in-18)
compound(York-20, New-19)
nmod:in(sold-16, York-20)
punct(sold-16, ,-21)
case(stores-25, to-22)
nmod:poss(stores-25, its-23)
nummod(stores-25, 986-24)
nmod:to(sold-16, stores-25)
case(U.S-28, in-26)
det(U.S-28, the-27)
nmod:in(stores-25, U.S-28)
punct(roll-8, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#jams

roll :: The last Volkswagen made in North America has rolled off the assembly line , but it is n't for sale ./.
det(Volkswagen-3, The-1)
amod(Volkswagen-3, last-2)
nsubj(rolled-9, Volkswagen-3)
acl(Volkswagen-3, made-4)
case(America-7, in-5)
compound(America-7, North-6)
nmod:in(made-4, America-7)
aux(rolled-9, has-8)
root(ROOT-0, rolled-9)
compound:prt(rolled-9, off-10)
det(line-13, the-11)
compound(line-13, assembly-12)
dobj(rolled-9, line-13)
punct(rolled-9, ,-14)
cc(rolled-9, but-15)
nsubj(sale-20, it-16)
cop(sale-20, is-17)
neg(sale-20, n't-18)
case(sale-20, for-19)
conj:but(rolled-9, sale-20)
punct(rolled-9, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#line

roll :: The attorney general offices of Texas , New York , California , Massachusetts and Missouri asked American Suzuki Motor Corp. to counter allegations that the four-wheel-drive vehicle is prone to rolling over when taking sharp turns at fast speeds ./.
det(offices-4, The-1)
compound(offices-4, attorney-2)
amod(offices-4, general-3)
nsubj(asked-16, offices-4)
case(Texas-6, of-5)
nmod:of(offices-4, Texas-6)
punct(Texas-6, ,-7)
compound(York-9, New-8)
nmod:of(offices-4, York-9)
conj:and(Texas-6, York-9)
punct(Texas-6, ,-10)
nmod:of(offices-4, California-11)
conj:and(Texas-6, California-11)
punct(Texas-6, ,-12)
nmod:of(offices-4, Massachusetts-13)
conj:and(Texas-6, Massachusetts-13)
cc(Texas-6, and-14)
nmod:of(offices-4, Missouri-15)
conj:and(Texas-6, Missouri-15)
root(ROOT-0, asked-16)
compound(Corp.-20, American-17)
compound(Corp.-20, Suzuki-18)
compound(Corp.-20, Motor-19)
dobj(asked-16, Corp.-20)
nsubj:xsubj(counter-22, Corp.-20)
mark(counter-22, to-21)
xcomp(asked-16, counter-22)
dobj(counter-22, allegations-23)
mark(prone-29, that-24)
det(vehicle-27, the-25)
amod(vehicle-27, four-wheel-drive-26)
nsubj(prone-29, vehicle-27)
cop(prone-29, is-28)
ccomp(allegations-23, prone-29)
mark(rolling-31, to-30)
advcl(prone-29, rolling-31)
compound:prt(rolling-31, over-32)
advmod(taking-34, when-33)
advcl(rolling-31, taking-34)
amod(turns-36, sharp-35)
dobj(taking-34, turns-36)
case(speeds-39, at-37)
amod(speeds-39, fast-38)
nmod:at(taking-34, speeds-39)
punct(asked-16, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

roll :: The suit also charges that Suzuki fraudulently withheld information about alleged design defects that give the Samurai a propensity to roll over in certain abrupt maneuvers ./.
det(suit-2, The-1)
nsubj(charges-4, suit-2)
advmod(charges-4, also-3)
root(ROOT-0, charges-4)
mark(withheld-8, that-5)
nsubj(withheld-8, Suzuki-6)
advmod(withheld-8, fraudulently-7)
ccomp(charges-4, withheld-8)
dobj(withheld-8, information-9)
case(defects-13, about-10)
amod(defects-13, alleged-11)
compound(defects-13, design-12)
nmod:about(information-9, defects-13)
nsubj(give-15, defects-13)
ref(defects-13, that-14)
acl:relcl(defects-13, give-15)
det(Samurai-17, the-16)
iobj(give-15, Samurai-17)
det(propensity-19, a-18)
dobj(give-15, propensity-19)
mark(roll-21, to-20)
acl(propensity-19, roll-21)
compound:prt(roll-21, over-22)
case(maneuvers-26, in-23)
amod(maneuvers-26, certain-24)
amod(maneuvers-26, abrupt-25)
nmod:in(roll-21, maneuvers-26)
punct(charges-4, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#maneuvers

roll :: Mr. Hawking compares all this to roulette: `` At high energies -LRB- when the wheel is spun quickly -RRB- the ball behaves in essentially only one way -- it rolls round and round ./.
compound(Hawking-2, Mr.-1)
nsubj(compares-3, Hawking-2)
root(ROOT-0, compares-3)
det:predet(this-5, all-4)
dobj(compares-3, this-5)
case(roulette-7, to-6)
nmod:to(compares-3, roulette-7)
punct(compares-3, :-8)
punct(compares-3, ``-9)
case(energies-12, At-10)
amod(energies-12, high-11)
nmod:at(behaves-23, energies-12)
punct(spun-18, -LRB--13)
advmod(spun-18, when-14)
det(wheel-16, the-15)
nsubjpass(spun-18, wheel-16)
auxpass(spun-18, is-17)
dep(energies-12, spun-18)
advmod(spun-18, quickly-19)
punct(spun-18, -RRB--20)
det(ball-22, the-21)
nsubj(behaves-23, ball-22)
parataxis(compares-3, behaves-23)
case(way-28, in-24)
advmod(way-28, essentially-25)
advmod(one-27, only-26)
nummod(way-28, one-27)
nmod:in(behaves-23, way-28)
punct(behaves-23, ---29)
nsubj(rolls-31, it-30)
parataxis(behaves-23, rolls-31)
dobj(rolls-31, round-32)
cc(round-32, and-33)
dobj(rolls-31, round-34)
conj:and(round-32, round-34)
punct(compares-3, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#round

roll :: If the Russians had rolled over West Germany last week , it might have made Messrs ./.
mark(rolled-5, If-1)
det(Russians-3, the-2)
nsubj(rolled-5, Russians-3)
aux(rolled-5, had-4)
advcl(made-15, rolled-5)
case(Germany-8, over-6)
compound(Germany-8, West-7)
nmod:over(rolled-5, Germany-8)
amod(week-10, last-9)
nmod:tmod(rolled-5, week-10)
punct(made-15, ,-11)
nsubj(made-15, it-12)
aux(made-15, might-13)
aux(made-15, have-14)
root(ROOT-0, made-15)
dobj(made-15, Messrs-16)
punct(made-15, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#russians

roll :: THE DC-10 ROSE from a runway at Chicago 's O'Hare Airport , slowly rolled over onto its back and hit the ground , killing everyone aboard ./.
det(DC-10-2, THE-1)
nsubj(ROSE-3, DC-10-2)
nsubj(rolled-14, DC-10-2)
nsubj(hit-20, DC-10-2)
root(ROOT-0, ROSE-3)
case(runway-6, from-4)
det(runway-6, a-5)
nmod:from(ROSE-3, runway-6)
case(Airport-11, at-7)
nmod:poss(Airport-11, Chicago-8)
case(Chicago-8, 's-9)
compound(Airport-11, O'Hare-10)
nmod:at(runway-6, Airport-11)
punct(ROSE-3, ,-12)
advmod(rolled-14, slowly-13)
conj:and(ROSE-3, rolled-14)
compound:prt(rolled-14, over-15)
case(back-18, onto-16)
nmod:poss(back-18, its-17)
nmod:onto(rolled-14, back-18)
cc(ROSE-3, and-19)
conj:and(ROSE-3, hit-20)
det(ground-22, the-21)
dobj(hit-20, ground-22)
punct(ROSE-3, ,-23)
advcl(ROSE-3, killing-24)
dobj(killing-24, everyone-25)
advmod(everyone-25, aboard-26)
punct(ROSE-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#dc-10

roll :: A spokesman for the Georgia operations of Lockheed , where the last of 50 C-5Bs is scheduled to roll off the line early next year , said Lockheed has continued talking with a number of U.S. and foreign aircraft concerns about work for its huge plant here ./.
det(spokesman-2, A-1)
nsubj(said-27, spokesman-2)
case(operations-6, for-3)
det(operations-6, the-4)
compound(operations-6, Georgia-5)
nmod:for(spokesman-2, operations-6)
case(Lockheed-8, of-7)
nmod:of(operations-6, Lockheed-8)
punct(Lockheed-8, ,-9)
advmod(scheduled-17, where-10)
det(last-12, the-11)
nsubjpass(scheduled-17, last-12)
nsubj:xsubj(roll-19, last-12)
case(C-5Bs-15, of-13)
nummod(C-5Bs-15, 50-14)
nmod:of(last-12, C-5Bs-15)
auxpass(scheduled-17, is-16)
acl:relcl(Lockheed-8, scheduled-17)
mark(roll-19, to-18)
xcomp(scheduled-17, roll-19)
compound:prt(roll-19, off-20)
det(line-22, the-21)
dobj(roll-19, line-22)
advmod(year-25, early-23)
amod(year-25, next-24)
nmod:tmod(roll-19, year-25)
punct(Lockheed-8, ,-26)
root(ROOT-0, said-27)
nsubj(continued-30, Lockheed-28)
aux(continued-30, has-29)
ccomp(said-27, continued-30)
xcomp(continued-30, talking-31)
case(number-34, with-32)
det(number-34, a-33)
nmod:with(talking-31, number-34)
case(concerns-40, of-35)
compound(concerns-40, U.S.-36)
cc(U.S.-36, and-37)
conj:and(U.S.-36, foreign-38)
compound(concerns-40, foreign-38)
compound(concerns-40, aircraft-39)
nmod:of(number-34, concerns-40)
case(work-42, about-41)
nmod:about(concerns-40, work-42)
case(plant-46, for-43)
nmod:poss(plant-46, its-44)
amod(plant-46, huge-45)
nmod:for(work-42, plant-46)
advmod(plant-46, here-47)
punct(said-27, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#line

roll :: For a time , the OSHA news releases rolled off the presses with regularity ./.
case(time-3, For-1)
det(time-3, a-2)
nmod:for(rolled-9, time-3)
punct(rolled-9, ,-4)
det(releases-8, the-5)
compound(releases-8, OSHA-6)
compound(releases-8, news-7)
nsubj(rolled-9, releases-8)
root(ROOT-0, rolled-9)
compound:prt(rolled-9, off-10)
det(presses-12, the-11)
dobj(rolled-9, presses-12)
case(regularity-14, with-13)
nmod:with(rolled-9, regularity-14)
punct(rolled-9, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#presses

roll :: The last B-1B , the warplane built for the Air Force by Rockwell International Corp . , rolled off the production line last week ./.
det(B-1B-3, The-1)
amod(B-1B-3, last-2)
root(ROOT-0, B-1B-3)
punct(B-1B-3, ,-4)
det(warplane-6, the-5)
appos(B-1B-3, warplane-6)
acl(warplane-6, built-7)
case(Force-11, for-8)
det(Force-11, the-9)
compound(Force-11, Air-10)
nmod:for(built-7, Force-11)
case(Corp-15, by-12)
compound(Corp-15, Rockwell-13)
compound(Corp-15, International-14)
nmod:by(Force-11, Corp-15)
punct(B-1B-3, .-16)
punct(rolled-2, ,-1)
root(ROOT-0, rolled-2)
compound:prt(rolled-2, off-3)
det(line-6, the-4)
compound(line-6, production-5)
dobj(rolled-2, line-6)
amod(week-8, last-7)
nmod:tmod(rolled-2, week-8)
punct(rolled-2, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#line

roll :: Sitting on a sofa , his sleeves rolled up above his elbows , the white-haired cricket expert explains his theories on raising a contender ./.
advcl(rolled-8, Sitting-1)
case(sofa-4, on-2)
det(sofa-4, a-3)
nmod:on(Sitting-1, sofa-4)
punct(rolled-8, ,-5)
nmod:poss(sleeves-7, his-6)
nsubj(rolled-8, sleeves-7)
root(ROOT-0, rolled-8)
compound:prt(rolled-8, up-9)
case(elbows-12, above-10)
nmod:poss(elbows-12, his-11)
nmod:above(rolled-8, elbows-12)
punct(rolled-8, ,-13)
det(expert-17, the-14)
amod(expert-17, white-haired-15)
compound(expert-17, cricket-16)
nsubj(explains-18, expert-17)
ccomp(rolled-8, explains-18)
nmod:poss(theories-20, his-19)
dobj(explains-18, theories-20)
mark(raising-22, on-21)
advcl(explains-18, raising-22)
det(contender-24, a-23)
dobj(raising-22, contender-24)
punct(rolled-8, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#sleeves

roll :: Dave Hoover rolls his 400-pound minijet above the air-show crowd , swooping to within a dozen feet of the runway and popping his landing gear in and out ./.
compound(Hoover-2, Dave-1)
nsubj(rolls-3, Hoover-2)
root(ROOT-0, rolls-3)
nmod:poss(minijet-6, his-4)
amod(minijet-6, 400-pound-5)
dobj(rolls-3, minijet-6)
case(crowd-10, above-7)
det(crowd-10, the-8)
compound(crowd-10, air-show-9)
nmod:above(rolls-3, crowd-10)
punct(rolls-3, ,-11)
dep(rolls-3, swooping-12)
case(feet-17, to-13)
case(feet-17, within-14)
det(feet-17, a-15)
compound(feet-17, dozen-16)
nmod:within(swooping-12, feet-17)
case(runway-20, of-18)
det(runway-20, the-19)
nmod:of(feet-17, runway-20)
cc(swooping-12, and-21)
dep(rolls-3, popping-22)
conj:and(swooping-12, popping-22)
nmod:poss(gear-25, his-23)
compound(gear-25, landing-24)
dobj(popping-22, gear-25)
case(out-28, in-26)
cc(out-28, and-27)
nmod:in(popping-22, out-28)
punct(rolls-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#minijet

roll :: Two motorcycles , nine cars and vans , and two buses are rolling resolutely to the next stop , the Regency Shopping Mall next door to a muffler shop -- and , please , we already thought of the `` Midasize him ! `` line ./.
nummod(motorcycles-2, Two-1)
nsubj(rolling-13, motorcycles-2)
punct(motorcycles-2, ,-3)
nummod(cars-5, nine-4)
conj:and(motorcycles-2, cars-5)
nsubj(rolling-13, cars-5)
cc(motorcycles-2, and-6)
conj:and(motorcycles-2, vans-7)
nsubj(rolling-13, vans-7)
punct(motorcycles-2, ,-8)
cc(motorcycles-2, and-9)
nummod(buses-11, two-10)
conj:and(motorcycles-2, buses-11)
nsubj(rolling-13, buses-11)
aux(rolling-13, are-12)
root(ROOT-0, rolling-13)
advmod(rolling-13, resolutely-14)
case(stop-18, to-15)
det(stop-18, the-16)
amod(stop-18, next-17)
nmod:to(rolling-13, stop-18)
punct(rolling-13, ,-19)
det(Mall-23, the-20)
compound(Mall-23, Regency-21)
compound(Mall-23, Shopping-22)
root(,-19, Mall-23)
amod(door-25, next-24)
dep(Mall-23, door-25)
case(shop-29, to-26)
det(shop-29, a-27)
compound(shop-29, muffler-28)
nmod:to(door-25, shop-29)
punct(door-25, ---30)
cc(door-25, and-31)
punct(thought-37, ,-32)
discourse(thought-37, please-33)
punct(thought-37, ,-34)
nsubj(thought-37, we-35)
advmod(thought-37, already-36)
dep(Mall-23, thought-37)
conj:and(door-25, thought-37)
case(him-42, of-38)
det(him-42, the-39)
punct(him-42, ``-40)
amod(him-42, Midasize-41)
nmod:of(thought-37, him-42)
punct(Mall-23, !-43)
punct(line-2, ``-1)
root(ROOT-0, line-2)
punct(line-2, .-3)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#motorcycles

roll :: As of Thursday night , other Yanks besides Schultz remained in their respective gold-medal chases , including 1984 Olympic super-heavyweight champ Bruce Baumgartner , who rolled a notable East German on Thursday ; Nate Carr at 149.5 , and Kenny Monday at 163 ./.
case(night-4, As-1)
mwe(As-1, of-2)
compound(night-4, Thursday-3)
nmod:as_of(remained-10, night-4)
punct(remained-10, ,-5)
amod(Yanks-7, other-6)
nsubj(remained-10, Yanks-7)
case(Schultz-9, besides-8)
nmod:besides(Yanks-7, Schultz-9)
root(ROOT-0, remained-10)
case(gold-medal-14, in-11)
nmod:poss(gold-medal-14, their-12)
amod(gold-medal-14, respective-13)
nmod:in(remained-10, gold-medal-14)
dep(gold-medal-14, chases-15)
punct(remained-10, ,-16)
case(Baumgartner-23, including-17)
nummod(Baumgartner-23, 1984-18)
compound(Baumgartner-23, Olympic-19)
compound(Baumgartner-23, super-heavyweight-20)
compound(Baumgartner-23, champ-21)
compound(Baumgartner-23, Bruce-22)
nmod:including(remained-10, Baumgartner-23)
nsubj(rolled-26, Baumgartner-23)
punct(Baumgartner-23, ,-24)
ref(Baumgartner-23, who-25)
acl:relcl(Baumgartner-23, rolled-26)
det(German-30, a-27)
amod(German-30, notable-28)
amod(German-30, East-29)
dobj(rolled-26, German-30)
case(Thursday-32, on-31)
nmod:on(rolled-26, Thursday-32)
punct(Baumgartner-23, ;-33)
compound(Carr-35, Nate-34)
dep(Baumgartner-23, Carr-35)
case(149.5-37, at-36)
nmod:at(Carr-35, 149.5-37)
punct(Carr-35, ,-38)
cc(Carr-35, and-39)
compound(Monday-41, Kenny-40)
dep(Baumgartner-23, Monday-41)
conj:and(Carr-35, Monday-41)
case(163-43, at-42)
nmod:at(Monday-41, 163-43)
punct(remained-10, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#german

roll :: Josefina Pahilga , 38 years old , trained as a teacher , took a job as a maid abroad after she could not find a teaching post and ended up earning $ 100 a month rolling cigarettes in a tobacco factory ./.
compound(Pahilga-2, Josefina-1)
nsubj(trained-8, Pahilga-2)
punct(Pahilga-2, ,-3)
nummod(years-5, 38-4)
nmod:npmod(old-6, years-5)
amod(Pahilga-2, old-6)
punct(Pahilga-2, ,-7)
root(ROOT-0, trained-8)
case(teacher-11, as-9)
det(teacher-11, a-10)
nmod:as(trained-8, teacher-11)
punct(trained-8, ,-12)
dep(trained-8, took-13)
det(job-15, a-14)
dobj(took-13, job-15)
case(maid-18, as-16)
det(maid-18, a-17)
nmod:as(took-13, maid-18)
advmod(took-13, abroad-19)
mark(find-24, after-20)
nsubj(find-24, she-21)
nsubj(ended-29, she-21)
aux(find-24, could-22)
neg(find-24, not-23)
advcl(took-13, find-24)
det(post-27, a-25)
compound(post-27, teaching-26)
dobj(find-24, post-27)
cc(find-24, and-28)
advcl(took-13, ended-29)
conj:and(find-24, ended-29)
compound:prt(ended-29, up-30)
xcomp(ended-29, earning-31)
dep(100-33, $-32)
dobj(earning-31, 100-33)
det(month-35, a-34)
nmod:npmod(100-33, month-35)
amod(cigarettes-37, rolling-36)
dep(100-33, cigarettes-37)
case(factory-41, in-38)
det(factory-41, a-39)
compound(factory-41, tobacco-40)
nmod:in(cigarettes-37, factory-41)
punct(trained-8, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#cigarettes

roll :: `` But who 's going to roll the dice ? ''/''
punct(going-5, ``-1)
cc(going-5, But-2)
nsubj(going-5, who-3)
nsubj:xsubj(roll-7, who-3)
aux(going-5, 's-4)
root(ROOT-0, going-5)
mark(roll-7, to-6)
xcomp(going-5, roll-7)
det(dice-9, the-8)
dobj(roll-7, dice-9)
punct(going-5, ?-10)
punct(going-5, ''-11)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: roll#dice

roll :: Wean Industries Inc. said it received a $ 20 million subcontract from United Engineering Inc . , Pittsburgh , to supply equipment and components for a hot strip rolling mill to An Feng Steel Co. in Taiwan ./.
compound(Inc.-3, Wean-1)
compound(Inc.-3, Industries-2)
nsubj(said-4, Inc.-3)
root(ROOT-0, said-4)
nsubj(received-6, it-5)
ccomp(said-4, received-6)
det(subcontract-11, a-7)
amod(subcontract-11, $-8)
compound(million-10, 20-9)
nummod($-8, million-10)
dobj(received-6, subcontract-11)
case(Inc-15, from-12)
compound(Inc-15, United-13)
compound(Inc-15, Engineering-14)
nmod:from(received-6, Inc-15)
punct(said-4, .-16)
punct(supply-5, ,-1)
nsubj(supply-5, Pittsburgh-2)
punct(supply-5, ,-3)
mark(supply-5, to-4)
root(ROOT-0, supply-5)
dobj(supply-5, equipment-6)
cc(equipment-6, and-7)
dobj(supply-5, components-8)
conj:and(equipment-6, components-8)
case(strip-12, for-9)
det(strip-12, a-10)
amod(strip-12, hot-11)
nmod:for(supply-5, strip-12)
amod(mill-14, rolling-13)
dep(strip-12, mill-14)
case(Co.-19, to-15)
det(Co.-19, An-16)
compound(Co.-19, Feng-17)
compound(Co.-19, Steel-18)
nmod:to(mill-14, Co.-19)
case(Taiwan-21, in-20)
nmod:in(Co.-19, Taiwan-21)
punct(supply-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#mill

roll :: `` Jeez , '' you can just hear Joe Exec sighing , his shirt-sleeves rolled up , his arms buried deep in the trash , `` there must be something in here we can salvage . ''/''
root(ROOT-0, ``-1)
nsubj(hear-8, Jeez-2)
punct(hear-8, ,-3)
punct(hear-8, ''-4)
nsubj(hear-8, you-5)
aux(hear-8, can-6)
advmod(hear-8, just-7)
root(``-1, hear-8)
compound(sighing-11, Joe-9)
compound(sighing-11, Exec-10)
dobj(hear-8, sighing-11)
punct(sighing-11, ,-12)
nmod:poss(shirt-sleeves-14, his-13)
nsubj(rolled-15, shirt-sleeves-14)
acl:relcl(sighing-11, rolled-15)
compound:prt(rolled-15, up-16)
punct(sighing-11, ,-17)
nmod:poss(arms-19, his-18)
appos(sighing-11, arms-19)
acl(arms-19, buried-20)
advmod(buried-20, deep-21)
case(trash-24, in-22)
det(trash-24, the-23)
nmod:in(buried-20, trash-24)
punct(hear-8, ,-25)
punct(something-30, ``-26)
expl(something-30, there-27)
aux(something-30, must-28)
cop(something-30, be-29)
parataxis(hear-8, something-30)
case(here-32, in-31)
nmod:in(something-30, here-32)
nsubj(salvage-35, we-33)
aux(salvage-35, can-34)
acl:relcl(something-30, salvage-35)
punct(hear-8, .-36)
punct(hear-8, ''-37)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: roll#shirt-sleeves

roll :: Tears roll down Juana Lara 's cheeks when she recalls the family 's desperation a few years ago ./.
nsubj(roll-2, Tears-1)
root(ROOT-0, roll-2)
compound:prt(roll-2, down-3)
compound(Lara-5, Juana-4)
nmod:poss(cheeks-7, Lara-5)
case(Lara-5, 's-6)
dobj(roll-2, cheeks-7)
advmod(recalls-10, when-8)
nsubj(recalls-10, she-9)
advcl(roll-2, recalls-10)
det(family-12, the-11)
nmod:poss(desperation-14, family-12)
case(family-12, 's-13)
dobj(recalls-10, desperation-14)
det(years-17, a-15)
amod(years-17, few-16)
nmod:npmod(ago-18, years-17)
advmod(desperation-14, ago-18)
punct(roll-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#cheeks

roll :: Last fall , on the eve of his Twins 's World Series victory , the slightly stooped banker shed his white dress shirt on a downtown Minneapolis street as TV cameras rolled , to settle a bet ./.
amod(fall-2, Last-1)
nmod:tmod(shed-19, fall-2)
punct(shed-19, ,-3)
case(eve-6, on-4)
det(eve-6, the-5)
nmod:on(shed-19, eve-6)
case(victory-13, of-7)
nmod:poss(Twins-9, his-8)
nmod:poss(victory-13, Twins-9)
case(Twins-9, 's-10)
compound(victory-13, World-11)
compound(victory-13, Series-12)
nmod:of(eve-6, victory-13)
punct(shed-19, ,-14)
det(banker-18, the-15)
advmod(stooped-17, slightly-16)
amod(banker-18, stooped-17)
nsubj(shed-19, banker-18)
root(ROOT-0, shed-19)
nmod:poss(shirt-23, his-20)
amod(shirt-23, white-21)
compound(shirt-23, dress-22)
dobj(shed-19, shirt-23)
case(street-28, on-24)
det(street-28, a-25)
compound(street-28, downtown-26)
compound(street-28, Minneapolis-27)
nmod:on(shed-19, street-28)
mark(rolled-32, as-29)
compound(cameras-31, TV-30)
nsubj(rolled-32, cameras-31)
nsubj:xsubj(settle-35, cameras-31)
advcl(shed-19, rolled-32)
punct(rolled-32, ,-33)
mark(settle-35, to-34)
xcomp(rolled-32, settle-35)
det(bet-37, a-36)
dobj(settle-35, bet-37)
punct(shed-19, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#cameras

roll :: If Warsaw Pact tanks ever roll into Western Europe , the French have a simple plan for dealing with them ./.
mark(roll-6, If-1)
compound(tanks-4, Warsaw-2)
compound(tanks-4, Pact-3)
nsubj(roll-6, tanks-4)
advmod(roll-6, ever-5)
advcl(have-13, roll-6)
case(Europe-9, into-7)
amod(Europe-9, Western-8)
nmod:into(roll-6, Europe-9)
punct(have-13, ,-10)
det(French-12, the-11)
nsubj(have-13, French-12)
root(ROOT-0, have-13)
det(plan-16, a-14)
amod(plan-16, simple-15)
dobj(have-13, plan-16)
mark(dealing-18, for-17)
acl(plan-16, dealing-18)
case(them-20, with-19)
nmod:with(dealing-18, them-20)
punct(have-13, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#tanks

roll :: We groaned on cue as he rolled over , stood the airplane on its tail and hurtled straight up to a stall at 6 , 000 feet , white smoke trailing from smoke generators at his wingtips ./.
nsubj(groaned-2, We-1)
nsubj(stood-10, We-1)
nsubj(hurtled-17, We-1)
root(ROOT-0, groaned-2)
case(cue-4, on-3)
nmod:on(groaned-2, cue-4)
mark(rolled-7, as-5)
nsubj(rolled-7, he-6)
advcl(groaned-2, rolled-7)
compound:prt(rolled-7, over-8)
punct(groaned-2, ,-9)
conj:and(groaned-2, stood-10)
det(airplane-12, the-11)
dobj(stood-10, airplane-12)
case(tail-15, on-13)
nmod:poss(tail-15, its-14)
nmod:on(stood-10, tail-15)
cc(groaned-2, and-16)
conj:and(groaned-2, hurtled-17)
advmod(up-19, straight-18)
advmod(hurtled-17, up-19)
case(stall-22, to-20)
det(stall-22, a-21)
nmod:to(up-19, stall-22)
case(6-24, at-23)
nmod:at(stall-22, 6-24)
punct(stall-22, ,-25)
nummod(feet-27, 000-26)
appos(stall-22, feet-27)
punct(feet-27, ,-28)
amod(smoke-30, white-29)
appos(feet-27, smoke-30)
acl(smoke-30, trailing-31)
case(generators-34, from-32)
compound(generators-34, smoke-33)
nmod:from(trailing-31, generators-34)
case(wingtips-37, at-35)
nmod:poss(wingtips-37, his-36)
nmod:at(trailing-31, wingtips-37)
punct(groaned-2, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#he

roll :: This was obvious in the professional manner in which he rolled across the stadium floor after firing on his target , hoping to avoid being shot by Mr. Ozal 's bodyguards ./.
nsubj(obvious-3, This-1)
cop(obvious-3, was-2)
root(ROOT-0, obvious-3)
case(manner-7, in-4)
det(manner-7, the-5)
amod(manner-7, professional-6)
nmod:in(obvious-3, manner-7)
nmod:in(rolled-11, manner-7)
case(which-9, in-8)
ref(manner-7, which-9)
nsubj(rolled-11, he-10)
acl:relcl(manner-7, rolled-11)
case(floor-15, across-12)
det(floor-15, the-13)
compound(floor-15, stadium-14)
nmod:across(rolled-11, floor-15)
case(firing-17, after-16)
nmod:after(rolled-11, firing-17)
case(target-20, on-18)
nmod:poss(target-20, his-19)
nmod:on(firing-17, target-20)
punct(obvious-3, ,-21)
xcomp(obvious-3, hoping-22)
mark(avoid-24, to-23)
xcomp(hoping-22, avoid-24)
auxpass(shot-26, being-25)
xcomp(avoid-24, shot-26)
case(bodyguards-31, by-27)
compound(Ozal-29, Mr.-28)
nmod:poss(bodyguards-31, Ozal-29)
case(Ozal-29, 's-30)
nmod:agent(shot-26, bodyguards-31)
punct(obvious-3, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#he

roll :: No sooner had the plane taken off , however , than it began to roll too sharply to the left , crashing into the sea upside down moments later ./.
neg(sooner-2, No-1)
root(ROOT-0, sooner-2)
dep(sooner-2, had-3)
det(plane-5, the-4)
dobj(had-3, plane-5)
acl(plane-5, taken-6)
compound:prt(taken-6, off-7)
punct(taken-6, ,-8)
advmod(taken-6, however-9)
punct(taken-6, ,-10)
mark(began-13, than-11)
nsubj(began-13, it-12)
nsubj:xsubj(roll-15, it-12)
advcl(taken-6, began-13)
mark(roll-15, to-14)
xcomp(began-13, roll-15)
advmod(sharply-17, too-16)
advmod(roll-15, sharply-17)
case(left-20, to-18)
det(left-20, the-19)
nmod:to(roll-15, left-20)
punct(had-3, ,-21)
advcl(had-3, crashing-22)
case(sea-25, into-23)
det(sea-25, the-24)
nmod:into(crashing-22, sea-25)
advmod(down-27, upside-26)
advmod(crashing-22, down-27)
dobj(crashing-22, moments-28)
advmod(moments-28, later-29)
punct(sooner-2, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#it

roll :: When the baby drops a rattle , Mr. Prentnieks scoops it up and puts it in the baby 's fist -- still listening to Mr. Jackson 's speech with his camera rolling ./.
advmod(drops-4, When-1)
det(baby-3, the-2)
nsubj(drops-4, baby-3)
advcl(scoops-10, drops-4)
det(rattle-6, a-5)
dobj(drops-4, rattle-6)
punct(scoops-10, ,-7)
compound(Prentnieks-9, Mr.-8)
nsubj(scoops-10, Prentnieks-9)
nsubj(puts-14, Prentnieks-9)
root(ROOT-0, scoops-10)
dobj(scoops-10, it-11)
compound:prt(scoops-10, up-12)
cc(scoops-10, and-13)
conj:and(scoops-10, puts-14)
dobj(puts-14, it-15)
case(fist-20, in-16)
det(baby-18, the-17)
nmod:poss(fist-20, baby-18)
case(baby-18, 's-19)
nmod:in(puts-14, fist-20)
punct(scoops-10, ---21)
advmod(listening-23, still-22)
parataxis(scoops-10, listening-23)
case(speech-28, to-24)
compound(Jackson-26, Mr.-25)
nmod:poss(speech-28, Jackson-26)
case(Jackson-26, 's-27)
nmod:to(listening-23, speech-28)
case(rolling-32, with-29)
nmod:poss(rolling-32, his-30)
compound(rolling-32, camera-31)
nmod:with(speech-28, rolling-32)
punct(scoops-10, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#his

roll :: The brainchild of amateur inventor Craig Culver of Woodside , Calif . , the Isopoint is a sliding and rolling cylinder about the diameter of a cocktail straw that fits along the bottom of the keyboard 's spacebar ./.
det(brainchild-2, The-1)
root(ROOT-0, brainchild-2)
case(Culver-7, of-3)
amod(Culver-7, amateur-4)
compound(Culver-7, inventor-5)
compound(Culver-7, Craig-6)
nmod:of(brainchild-2, Culver-7)
case(Woodside-9, of-8)
nmod:of(Culver-7, Woodside-9)
punct(Woodside-9, ,-10)
appos(Woodside-9, Calif-11)
punct(brainchild-2, .-12)
punct(cylinder-9, ,-1)
det(Isopoint-3, the-2)
nsubj(cylinder-9, Isopoint-3)
cop(cylinder-9, is-4)
det(cylinder-9, a-5)
amod(cylinder-9, sliding-6)
cc(sliding-6, and-7)
conj:and(sliding-6, rolling-8)
amod(cylinder-9, rolling-8)
root(ROOT-0, cylinder-9)
case(diameter-12, about-10)
det(diameter-12, the-11)
nmod:about(cylinder-9, diameter-12)
case(straw-16, of-13)
det(straw-16, a-14)
compound(straw-16, cocktail-15)
nmod:of(diameter-12, straw-16)
nsubj(fits-18, straw-16)
ref(straw-16, that-17)
acl:relcl(straw-16, fits-18)
case(bottom-21, along-19)
det(bottom-21, the-20)
nmod:along(fits-18, bottom-21)
case(spacebar-26, of-22)
det(keyboard-24, the-23)
nmod:poss(spacebar-26, keyboard-24)
case(keyboard-24, 's-25)
nmod:of(bottom-21, spacebar-26)
punct(cylinder-9, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: roll#cylinder

sleep :: `` He ate and slept until he looked like he was going to break , '' recalls Kathleen Perry ./.
punct(recalls-17, ``-1)
nsubj(ate-3, He-2)
nsubj(slept-5, He-2)
ccomp(recalls-17, ate-3)
cc(ate-3, and-4)
conj:and(ate-3, slept-5)
ccomp(recalls-17, slept-5)
mark(looked-8, until-6)
nsubj(looked-8, he-7)
advcl(ate-3, looked-8)
mark(going-12, like-9)
nsubj(going-12, he-10)
nsubj:xsubj(break-14, he-10)
aux(going-12, was-11)
advcl(looked-8, going-12)
mark(break-14, to-13)
xcomp(going-12, break-14)
punct(recalls-17, ,-15)
punct(recalls-17, ''-16)
root(ROOT-0, recalls-17)
compound(Perry-19, Kathleen-18)
nsubj(recalls-17, Perry-19)
punct(recalls-17, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#he

sleep :: On a work visit to a small town , she elected to spend the night at the home of a friend 's father rather than sleep on the floor , commune-style , with her colleagues ./.
case(visit-4, On-1)
det(visit-4, a-2)
compound(visit-4, work-3)
nmod:on(elected-11, visit-4)
case(town-8, to-5)
det(town-8, a-6)
amod(town-8, small-7)
nmod:to(visit-4, town-8)
punct(elected-11, ,-9)
nsubj(elected-11, she-10)
nsubj:xsubj(spend-13, she-10)
root(ROOT-0, elected-11)
mark(spend-13, to-12)
xcomp(elected-11, spend-13)
det(night-15, the-14)
dobj(spend-13, night-15)
case(home-18, at-16)
det(home-18, the-17)
nmod:at(spend-13, home-18)
case(father-23, of-19)
det(friend-21, a-20)
nmod:poss(father-23, friend-21)
case(friend-21, 's-22)
nmod:of(home-18, father-23)
cc(spend-13, rather-24)
mwe(rather-24, than-25)
xcomp(elected-11, sleep-26)
conj:negcc(spend-13, sleep-26)
case(floor-29, on-27)
det(floor-29, the-28)
nmod:on(sleep-26, floor-29)
punct(spend-13, ,-30)
xcomp(elected-11, commune-style-31)
conj:negcc(spend-13, commune-style-31)
punct(spend-13, ,-32)
case(colleagues-35, with-33)
nmod:poss(colleagues-35, her-34)
nmod:with(spend-13, colleagues-35)
punct(elected-11, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#floor

sleep :: But many others constitute a sleeping giant best left unwakened ./.
cc(constitute-4, But-1)
amod(others-3, many-2)
nsubj(constitute-4, others-3)
root(ROOT-0, constitute-4)
det(giant-7, a-5)
amod(giant-7, sleeping-6)
dobj(constitute-4, giant-7)
advmod(left-9, best-8)
acl(giant-7, left-9)
xcomp(left-9, unwakened-10)
punct(constitute-4, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#giant

sleep :: She lost weight , could n't sleep , and did n't work again for six months ./.
nsubj(lost-2, She-1)
nsubj(sleep-7, She-1)
nsubj(work-12, She-1)
root(ROOT-0, lost-2)
dobj(lost-2, weight-3)
punct(lost-2, ,-4)
aux(sleep-7, could-5)
neg(sleep-7, n't-6)
conj:and(lost-2, sleep-7)
punct(lost-2, ,-8)
cc(lost-2, and-9)
aux(work-12, did-10)
neg(work-12, n't-11)
conj:and(lost-2, work-12)
advmod(work-12, again-13)
case(months-16, for-14)
nummod(months-16, six-15)
nmod:for(work-12, months-16)
punct(lost-2, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#she

sleep :: But most will think , ' Haven 't I got enough to worry about already? ' and fall right back to sleep . ''/''
cc(think-4, But-1)
nsubj(think-4, most-2)
aux(think-4, will-3)
root(ROOT-0, think-4)
punct(think-4, ,-5)
root(,-5, '-6)
nmod:poss(t-9, Haven-7)
case(Haven-7, '-8)
root('-6, t-9)
nsubj(got-11, I-10)
nsubj:xsubj(worry-14, I-10)
acl:relcl(t-9, got-11)
advmod(got-11, enough-12)
mark(worry-14, to-13)
xcomp(got-11, worry-14)
advmod(already-16, about-15)
advmod(worry-14, already-16)
punct(t-9, ?-17)
punct(t-9, '-18)
cc(fall-2, and-1)
root(ROOT-0, fall-2)
advmod(back-4, right-3)
advmod(fall-2, back-4)
mark(sleep-6, to-5)
xcomp(fall-2, sleep-6)
punct(fall-2, .-7)
punct(fall-2, ''-8)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

sleep :: The focus on takeover issues provided market players with a chance to `` keep the juices flowing without going to sleep , '' said Edward P. Nicoski , a market analyst at Piper Jaffray & Hopwood , Minneapolis ./.
det(focus-2, The-1)
nsubj(provided-6, focus-2)
case(issues-5, on-3)
compound(issues-5, takeover-4)
nmod:on(focus-2, issues-5)
ccomp(said-24, provided-6)
compound(players-8, market-7)
dobj(provided-6, players-8)
case(chance-11, with-9)
det(chance-11, a-10)
nmod:with(provided-6, chance-11)
mark(keep-14, to-12)
punct(keep-14, ``-13)
acl(chance-11, keep-14)
det(juices-16, the-15)
nsubj(flowing-17, juices-16)
dep(keep-14, flowing-17)
mark(going-19, without-18)
advcl(flowing-17, going-19)
mark(sleep-21, to-20)
xcomp(going-19, sleep-21)
punct(said-24, ,-22)
punct(said-24, ''-23)
root(ROOT-0, said-24)
compound(Nicoski-27, Edward-25)
compound(Nicoski-27, P.-26)
nsubj(said-24, Nicoski-27)
punct(Nicoski-27, ,-28)
det(analyst-31, a-29)
compound(analyst-31, market-30)
appos(Nicoski-27, analyst-31)
case(Jaffray-34, at-32)
compound(Jaffray-34, Piper-33)
nmod:at(analyst-31, Jaffray-34)
cc(Jaffray-34, &-35)
nmod:at(analyst-31, Hopwood-36)
conj:&(Jaffray-34, Hopwood-36)
punct(Jaffray-34, ,-37)
appos(Jaffray-34, Minneapolis-38)
punct(said-24, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

sleep :: Strike two is when I ca n't sleep ./.
csubj(is-3, Strike-1)
dobj(Strike-1, two-2)
root(ROOT-0, is-3)
advmod(sleep-8, when-4)
nsubj(sleep-8, I-5)
aux(sleep-8, ca-6)
neg(sleep-8, n't-7)
advcl(is-3, sleep-8)
punct(is-3, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#i

sleep :: As a consequence , many migrants in the Midwest are sleeping in emergency shelters or tents ./.
case(consequence-3, As-1)
det(consequence-3, a-2)
nmod:as(sleeping-11, consequence-3)
punct(sleeping-11, ,-4)
amod(migrants-6, many-5)
nsubj(sleeping-11, migrants-6)
case(Midwest-9, in-7)
det(Midwest-9, the-8)
nmod:in(migrants-6, Midwest-9)
aux(sleeping-11, are-10)
root(ROOT-0, sleeping-11)
case(shelters-14, in-12)
compound(shelters-14, emergency-13)
nmod:in(sleeping-11, shelters-14)
cc(shelters-14, or-15)
nmod:in(sleeping-11, tents-16)
conj:or(shelters-14, tents-16)
punct(sleeping-11, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#migrants

sleep :: Oh yes , you also get to pay $ 2 for a cup of coffee , around $ 35 for a cheeseburger lunch for two , and up to $ 1 , 500 a day for your place to sleep ./.
discourse(get-6, Oh-1)
discourse(get-6, yes-2)
punct(get-6, ,-3)
nsubj(get-6, you-4)
nsubj:xsubj(pay-8, you-4)
advmod(get-6, also-5)
root(ROOT-0, get-6)
mark(pay-8, to-7)
xcomp(get-6, pay-8)
dep(2-10, $-9)
dobj(pay-8, 2-10)
case(cup-13, for-11)
det(cup-13, a-12)
nmod:for(pay-8, cup-13)
case(coffee-15, of-14)
nmod:of(cup-13, coffee-15)
punct(pay-8, ,-16)
advmod($-18, around-17)
xcomp(get-6, $-18)
conj:and(pay-8, $-18)
nummod($-18, 35-19)
case(lunch-23, for-20)
det(lunch-23, a-21)
compound(lunch-23, cheeseburger-22)
nmod:for($-18, lunch-23)
case(two-25, for-24)
nmod:for($-18, two-25)
punct(pay-8, ,-26)
cc(pay-8, and-27)
xcomp(get-6, up-28)
conj:and(pay-8, up-28)
case(1-31, to-29)
dep(1-31, $-30)
nmod:to(up-28, 1-31)
punct(1-31, ,-32)
appos(1-31, 500-33)
det(day-35, a-34)
nmod:npmod(500-33, day-35)
case(place-38, for-36)
nmod:poss(place-38, your-37)
nmod:for(500-33, place-38)
mark(sleep-40, to-39)
acl(500-33, sleep-40)
punct(get-6, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

sleep :: As the wifely paragon sits , waiting and weaving , you nearly go to sleep the piece is so static ./.
mark(sits-5, As-1)
det(paragon-4, the-2)
amod(paragon-4, wifely-3)
nsubj(sits-5, paragon-4)
advcl(go-13, sits-5)
punct(sits-5, ,-6)
ccomp(sits-5, waiting-7)
cc(waiting-7, and-8)
ccomp(sits-5, weaving-9)
conj:and(waiting-7, weaving-9)
punct(go-13, ,-10)
nsubj(go-13, you-11)
nsubj:xsubj(sleep-15, you-11)
advmod(go-13, nearly-12)
csubj(static-20, go-13)
mark(sleep-15, to-14)
xcomp(go-13, sleep-15)
det(piece-17, the-16)
dobj(sleep-15, piece-17)
cop(static-20, is-18)
advmod(static-20, so-19)
root(ROOT-0, static-20)
punct(static-20, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#piece

sleep :: Since the spots ran last year , there have been a flood of requests for the `` room where Tom Bodett slept . ''/''
mark(ran-4, Since-1)
det(spots-3, the-2)
nsubj(ran-4, spots-3)
advcl(flood-12, ran-4)
amod(year-6, last-5)
nmod:tmod(ran-4, year-6)
punct(flood-12, ,-7)
expl(flood-12, there-8)
aux(flood-12, have-9)
cop(flood-12, been-10)
det(flood-12, a-11)
root(ROOT-0, flood-12)
case(requests-14, of-13)
nmod:of(flood-12, requests-14)
case(room-18, for-15)
det(room-18, the-16)
punct(room-18, ``-17)
nmod:for(requests-14, room-18)
advmod(slept-22, where-19)
compound(Bodett-21, Tom-20)
nsubj(slept-22, Bodett-21)
acl:relcl(room-18, slept-22)
punct(flood-12, .-23)
punct(flood-12, ''-24)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: sleep#bodett

sleep :: I have to tell you I 've been through many periods in my life where I have n't slept at night , where I had a very hard time sleeping at night ./.
nsubj(have-2, I-1)
nsubj:xsubj(tell-4, I-1)
root(ROOT-0, have-2)
mark(tell-4, to-3)
xcomp(have-2, tell-4)
dobj(tell-4, you-5)
nsubj(periods-11, I-6)
aux(periods-11, 've-7)
cop(periods-11, been-8)
case(periods-11, through-9)
amod(periods-11, many-10)
ccomp(tell-4, periods-11)
case(life-14, in-12)
nmod:poss(life-14, my-13)
nmod:in(periods-11, life-14)
advmod(slept-19, where-15)
nsubj(slept-19, I-16)
aux(slept-19, have-17)
neg(slept-19, n't-18)
acl:relcl(periods-11, slept-19)
case(night-21, at-20)
nmod:at(slept-19, night-21)
punct(night-21, ,-22)
advmod(had-25, where-23)
nsubj(had-25, I-24)
acl:relcl(night-21, had-25)
det(time-29, a-26)
advmod(hard-28, very-27)
amod(time-29, hard-28)
dobj(had-25, time-29)
acl(time-29, sleeping-30)
case(night-32, at-31)
nmod:at(sleeping-30, night-32)
punct(have-2, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#i

sleep :: At Bobby 's house she is forthright in saying she wants to sleep with him ; why is she then accused of being devious ?/.
case(house-4, At-1)
nmod:poss(house-4, Bobby-2)
case(Bobby-2, 's-3)
nmod:at(forthright-7, house-4)
nsubj(forthright-7, she-5)
cop(forthright-7, is-6)
root(ROOT-0, forthright-7)
mark(saying-9, in-8)
advcl(forthright-7, saying-9)
nsubj(wants-11, she-10)
nsubj:xsubj(sleep-13, she-10)
ccomp(saying-9, wants-11)
mark(sleep-13, to-12)
xcomp(wants-11, sleep-13)
case(him-15, with-14)
nmod:with(sleep-13, him-15)
punct(forthright-7, ;-16)
advmod(accused-21, why-17)
aux(accused-21, is-18)
nsubj(accused-21, she-19)
advmod(accused-21, then-20)
parataxis(forthright-7, accused-21)
mark(devious-24, of-22)
cop(devious-24, being-23)
advcl(accused-21, devious-24)
punct(forthright-7, ?-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#she

sleep :: `` But I was n't marrying them or sleeping with them , and it did n't mean I wanted to have dinner with them . ''/''
punct(marrying-6, ``-1)
cc(marrying-6, But-2)
nsubj(marrying-6, I-3)
nsubj(sleeping-9, I-3)
aux(marrying-6, was-4)
neg(marrying-6, n't-5)
root(ROOT-0, marrying-6)
dobj(marrying-6, them-7)
cc(marrying-6, or-8)
conj:or(marrying-6, sleeping-9)
case(them-11, with-10)
nmod:with(sleeping-9, them-11)
punct(marrying-6, ,-12)
cc(marrying-6, and-13)
nsubj(mean-17, it-14)
aux(mean-17, did-15)
neg(mean-17, n't-16)
conj:and(marrying-6, mean-17)
nsubj(wanted-19, I-18)
nsubj:xsubj(have-21, I-18)
ccomp(mean-17, wanted-19)
mark(have-21, to-20)
xcomp(wanted-19, have-21)
dobj(have-21, dinner-22)
case(them-24, with-23)
nmod:with(dinner-22, them-24)
punct(marrying-6, .-25)
punct(marrying-6, ''-26)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: sleep#i

sleep :: `` I found myself sleeping out on the steps in boot camp , '' he recalls ./.
punct(recalls-16, ``-1)
nsubj(found-3, I-2)
ccomp(recalls-16, found-3)
nsubj(sleeping-5, myself-4)
dep(found-3, sleeping-5)
compound:prt(sleeping-5, out-6)
case(steps-9, on-7)
det(steps-9, the-8)
nmod:on(sleeping-5, steps-9)
case(camp-12, in-10)
compound(camp-12, boot-11)
nmod:in(steps-9, camp-12)
punct(recalls-16, ,-13)
punct(recalls-16, ''-14)
nsubj(recalls-16, he-15)
root(ROOT-0, recalls-16)
punct(recalls-16, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#myself

sleep :: Now he relies on a rather uncomfortable machine to force air down his trachea , but he is sleeping better than ever , and so is Mrs. Ponce ./.
advmod(relies-3, Now-1)
nsubj(relies-3, he-2)
nsubj:xsubj(force-10, he-2)
root(ROOT-0, relies-3)
case(machine-8, on-4)
det(machine-8, a-5)
advmod(uncomfortable-7, rather-6)
amod(machine-8, uncomfortable-7)
nmod:on(relies-3, machine-8)
mark(force-10, to-9)
xcomp(relies-3, force-10)
dobj(force-10, air-11)
case(trachea-14, down-12)
nmod:poss(trachea-14, his-13)
nmod:down(force-10, trachea-14)
punct(relies-3, ,-15)
cc(relies-3, but-16)
nsubj(sleeping-19, he-17)
aux(sleeping-19, is-18)
conj:but(relies-3, sleeping-19)
advmod(sleeping-19, better-20)
case(ever-22, than-21)
advcl(better-20, ever-22)
punct(sleeping-19, ,-23)
cc(sleeping-19, and-24)
advmod(is-26, so-25)
conj:but(relies-3, is-26)
conj:and(sleeping-19, is-26)
compound(Ponce-28, Mrs.-27)
nsubj(is-26, Ponce-28)
punct(relies-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#he

sleep :: `` Last night I went to sleep in Detroit City , '' Bobby Bare crooned in a 1963 song celebrating this migration , `` and I dreamed about the cotton fields back home . ''/''
punct(went-5, ``-1)
amod(night-3, Last-2)
nmod:tmod(went-5, night-3)
nsubj(went-5, I-4)
nsubj:xsubj(sleep-7, I-4)
dep(crooned-15, went-5)
mark(sleep-7, to-6)
xcomp(went-5, sleep-7)
case(City-10, in-8)
compound(City-10, Detroit-9)
nmod:in(sleep-7, City-10)
punct(went-5, ,-11)
punct(went-5, ''-12)
compound(Bare-14, Bobby-13)
nsubj(crooned-15, Bare-14)
root(ROOT-0, crooned-15)
case(song-19, in-16)
det(song-19, a-17)
nummod(song-19, 1963-18)
nmod:in(crooned-15, song-19)
acl(song-19, celebrating-20)
det(migration-22, this-21)
dobj(celebrating-20, migration-22)
punct(crooned-15, ,-23)
punct(crooned-15, ``-24)
cc(crooned-15, and-25)
nsubj(dreamed-27, I-26)
conj:and(crooned-15, dreamed-27)
case(fields-31, about-28)
det(fields-31, the-29)
compound(fields-31, cotton-30)
nmod:about(dreamed-27, fields-31)
advmod(home-33, back-32)
advmod(fields-31, home-33)
punct(crooned-15, .-34)
punct(crooned-15, ''-35)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: sleep#i

sleep :: That is , they taught me how to get up in the morning when I wanted to sleep another few hours ./.
nsubj(is-2, That-1)
root(ROOT-0, is-2)
punct(taught-5, ,-3)
nsubj(taught-5, they-4)
ccomp(is-2, taught-5)
dobj(taught-5, me-6)
nsubj:xsubj(get-9, me-6)
advmod(get-9, how-7)
mark(get-9, to-8)
xcomp(taught-5, get-9)
compound:prt(get-9, up-10)
case(morning-13, in-11)
det(morning-13, the-12)
nmod:in(get-9, morning-13)
advmod(wanted-16, when-14)
nsubj(wanted-16, I-15)
nsubj:xsubj(sleep-18, I-15)
advcl(get-9, wanted-16)
mark(sleep-18, to-17)
xcomp(wanted-16, sleep-18)
det(hours-21, another-19)
amod(hours-21, few-20)
dobj(sleep-18, hours-21)
punct(is-2, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#hours

sleep :: I have slept through Minsk and past Smolensk ./.
nsubj(slept-3, I-1)
aux(slept-3, have-2)
root(ROOT-0, slept-3)
case(Minsk-5, through-4)
nmod:through(slept-3, Minsk-5)
cc(Minsk-5, and-6)
amod(Smolensk-8, past-7)
nmod:through(slept-3, Smolensk-8)
conj:and(Minsk-5, Smolensk-8)
punct(slept-3, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#i

sleep :: One broker , whose business failed after the crash , began abusing drugs -- mainly sleeping pills -- and contemplated divorce and suicide , says Mari Terzaghi , a clinical psychologist who treats many Wall Street professionals ./.
nummod(broker-2, One-1)
nmod:poss(business-5, broker-2)
nsubj(began-11, broker-2)
punct(broker-2, ,-3)
ref(broker-2, whose-4)
nsubj(failed-6, business-5)
acl:relcl(broker-2, failed-6)
case(crash-9, after-7)
det(crash-9, the-8)
nmod:after(failed-6, crash-9)
punct(broker-2, ,-10)
ccomp(says-25, began-11)
xcomp(began-11, abusing-12)
dobj(abusing-12, drugs-13)
punct(abusing-12, ---14)
advmod(sleeping-16, mainly-15)
dep(abusing-12, sleeping-16)
dobj(sleeping-16, pills-17)
punct(abusing-12, ---18)
cc(abusing-12, and-19)
amod(divorce-21, contemplated-20)
xcomp(began-11, divorce-21)
conj:and(abusing-12, divorce-21)
cc(divorce-21, and-22)
conj:and(abusing-12, suicide-23)
conj:and(divorce-21, suicide-23)
punct(says-25, ,-24)
root(ROOT-0, says-25)
compound(Terzaghi-27, Mari-26)
nsubj(says-25, Terzaghi-27)
punct(Terzaghi-27, ,-28)
det(psychologist-31, a-29)
amod(psychologist-31, clinical-30)
appos(Terzaghi-27, psychologist-31)
nsubj(treats-33, psychologist-31)
ref(psychologist-31, who-32)
acl:relcl(psychologist-31, treats-33)
amod(professionals-37, many-34)
compound(professionals-37, Wall-35)
compound(professionals-37, Street-36)
dobj(treats-33, professionals-37)
punct(says-25, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#pills

sleep :: As a child , the 28-year-old Mr. Hellman spent three years sleeping in an underground bunker as rockets screamed overhead ./.
case(child-3, As-1)
det(child-3, a-2)
nmod:as(spent-9, child-3)
punct(spent-9, ,-4)
det(Hellman-8, the-5)
amod(Hellman-8, 28-year-old-6)
compound(Hellman-8, Mr.-7)
nsubj(spent-9, Hellman-8)
root(ROOT-0, spent-9)
nummod(years-11, three-10)
nmod:npmod(sleeping-12, years-11)
advmod(spent-9, sleeping-12)
case(bunker-16, in-13)
det(bunker-16, an-14)
amod(bunker-16, underground-15)
nmod:in(spent-9, bunker-16)
mark(screamed-19, as-17)
nsubj(screamed-19, rockets-18)
advcl(spent-9, screamed-19)
dobj(screamed-19, overhead-20)
punct(spent-9, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#years

sleep :: She was up all night in a tent ; the next morning , she plopped into the raft , feeling nauseated and trying to sleep as she bounced over rapids ./.
nsubj(night-5, She-1)
cop(night-5, was-2)
case(night-5, up-3)
det(night-5, all-4)
root(ROOT-0, night-5)
case(tent-8, in-6)
det(tent-8, a-7)
nmod:in(night-5, tent-8)
punct(night-5, ;-9)
det(morning-12, the-10)
amod(morning-12, next-11)
nmod:tmod(plopped-15, morning-12)
punct(plopped-15, ,-13)
nsubj(plopped-15, she-14)
parataxis(night-5, plopped-15)
case(raft-18, into-16)
det(raft-18, the-17)
nmod:into(plopped-15, raft-18)
punct(plopped-15, ,-19)
ccomp(plopped-15, feeling-20)
xcomp(feeling-20, nauseated-21)
cc(feeling-20, and-22)
ccomp(plopped-15, trying-23)
conj:and(feeling-20, trying-23)
mark(sleep-25, to-24)
xcomp(trying-23, sleep-25)
mark(bounced-28, as-26)
nsubj(bounced-28, she-27)
advcl(sleep-25, bounced-28)
compound:prt(bounced-28, over-29)
dobj(bounced-28, rapids-30)
punct(night-5, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

sleep :: He can no longer sleep , he says , nor even concentrate long enough to take in a newspaper article without reading it several times ./.
nsubj(sleep-5, He-1)
nsubj(concentrate-12, He-1)
nsubj:xsubj(take-16, He-1)
aux(sleep-5, can-2)
neg(longer-4, no-3)
advmod(sleep-5, longer-4)
root(ROOT-0, sleep-5)
punct(says-8, ,-6)
nsubj(says-8, he-7)
dep(sleep-5, says-8)
punct(says-8, ,-9)
cc(sleep-5, nor-10)
advmod(concentrate-12, even-11)
conj:nor(sleep-5, concentrate-12)
advmod(enough-14, long-13)
advmod(concentrate-12, enough-14)
mark(take-16, to-15)
xcomp(concentrate-12, take-16)
compound:prt(take-16, in-17)
det(article-20, a-18)
compound(article-20, newspaper-19)
dobj(take-16, article-20)
mark(reading-22, without-21)
advcl(take-16, reading-22)
dobj(reading-22, it-23)
amod(times-25, several-24)
nmod:tmod(reading-22, times-25)
punct(sleep-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#he

sleep :: `` Let sleeping authors lie , '' says Ms. Cade ./.
punct(Let-2, ``-1)
dep(says-8, Let-2)
amod(authors-4, sleeping-3)
nsubj(lie-5, authors-4)
ccomp(Let-2, lie-5)
punct(Let-2, ,-6)
punct(Let-2, ''-7)
root(ROOT-0, says-8)
compound(Cade-10, Ms.-9)
nsubj(says-8, Cade-10)
punct(says-8, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#authors

sleep :: `` Every day I come into Manhattan , I see people sleeping in boxes , '' he says ./.
punct(see-10, ``-1)
det(day-3, Every-2)
nsubj(come-5, day-3)
nummod(day-3, I-4)
ccomp(see-10, come-5)
case(Manhattan-7, into-6)
nmod:into(come-5, Manhattan-7)
punct(see-10, ,-8)
nsubj(see-10, I-9)
dep(says-18, see-10)
nsubj(sleeping-12, people-11)
dep(see-10, sleeping-12)
case(boxes-14, in-13)
nmod:in(sleeping-12, boxes-14)
punct(see-10, ,-15)
punct(see-10, ''-16)
nsubj(says-18, he-17)
root(ROOT-0, says-18)
punct(says-18, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#people

sleep :: Her daughter demanded that she keep silent , telling her , `` You wo n't have a home to sleep in if you say anything about this . ''/''
nmod:poss(daughter-2, Her-1)
nsubj(demanded-3, daughter-2)
root(ROOT-0, demanded-3)
mark(keep-6, that-4)
nsubj(keep-6, she-5)
ccomp(demanded-3, keep-6)
xcomp(keep-6, silent-7)
punct(demanded-3, ,-8)
xcomp(demanded-3, telling-9)
dobj(telling-9, her-10)
punct(telling-9, ,-11)
punct(telling-9, ``-12)
nsubj(have-16, You-13)
aux(have-16, wo-14)
neg(have-16, n't-15)
ccomp(telling-9, have-16)
det(home-18, a-17)
dobj(have-16, home-18)
mark(sleep-20, to-19)
acl(home-18, sleep-20)
compound:prt(sleep-20, in-21)
mark(say-24, if-22)
nsubj(say-24, you-23)
advcl(sleep-20, say-24)
dobj(say-24, anything-25)
case(this-27, about-26)
nmod:about(anything-25, this-27)
punct(demanded-3, .-28)
punct(demanded-3, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

sleep :: `` That makes it easy to sleep at night . ''/''
punct(makes-3, ``-1)
nsubj(makes-3, That-2)
root(ROOT-0, makes-3)
nsubj(sleep-7, it-4)
dep(sleep-7, easy-5)
mark(sleep-7, to-6)
xcomp(makes-3, sleep-7)
case(night-9, at-8)
nmod:at(sleep-7, night-9)
punct(makes-3, .-10)
punct(makes-3, ''-11)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: sleep#it

sleep :: A cot in the studio , coupled with the play of entire compact disks , provides him with the opportunity to sleep ; his longest snooze so far is 15 minutes ./.
det(cot-2, A-1)
nsubj(provides-16, cot-2)
case(studio-5, in-3)
det(studio-5, the-4)
nmod:in(cot-2, studio-5)
punct(cot-2, ,-6)
acl(cot-2, coupled-7)
case(play-10, with-8)
det(play-10, the-9)
nmod:with(coupled-7, play-10)
case(disks-14, of-11)
amod(disks-14, entire-12)
amod(disks-14, compact-13)
nmod:of(play-10, disks-14)
punct(cot-2, ,-15)
root(ROOT-0, provides-16)
dobj(provides-16, him-17)
case(opportunity-20, with-18)
det(opportunity-20, the-19)
nmod:with(provides-16, opportunity-20)
mark(sleep-22, to-21)
acl(opportunity-20, sleep-22)
punct(provides-16, ;-23)
nmod:poss(snooze-26, his-24)
amod(snooze-26, longest-25)
nsubj(minutes-31, snooze-26)
advmod(far-28, so-27)
advmod(minutes-31, far-28)
cop(minutes-31, is-29)
nummod(minutes-31, 15-30)
parataxis(provides-16, minutes-31)
punct(provides-16, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

sleep :: They slept one night in my house ./.
nsubj(slept-2, They-1)
root(ROOT-0, slept-2)
nummod(night-4, one-3)
nmod:tmod(slept-2, night-4)
case(house-7, in-5)
nmod:poss(house-7, my-6)
nmod:in(slept-2, house-7)
punct(slept-2, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#they

sleep :: `` It 's not very romantic to find out that the wonderful man you married is too noisy to sleep with , '' says Miss Van Buren , the columnist ./.
punct(says-24, ``-1)
nsubj(romantic-6, It-2)
nsubj:xsubj(find-8, It-2)
cop(romantic-6, 's-3)
neg(romantic-6, not-4)
advmod(romantic-6, very-5)
ccomp(says-24, romantic-6)
mark(find-8, to-7)
xcomp(romantic-6, find-8)
compound:prt(find-8, out-9)
mark(noisy-18, that-10)
det(man-13, the-11)
amod(man-13, wonderful-12)
nsubj(noisy-18, man-13)
nsubj:xsubj(sleep-20, man-13)
nsubj(married-15, you-14)
acl:relcl(man-13, married-15)
cop(noisy-18, is-16)
advmod(noisy-18, too-17)
ccomp(find-8, noisy-18)
mark(sleep-20, to-19)
xcomp(noisy-18, sleep-20)
nmod(sleep-20, with-21)
punct(says-24, ,-22)
punct(says-24, ''-23)
root(ROOT-0, says-24)
compound(Buren-27, Miss-25)
compound(Buren-27, Van-26)
nsubj(says-24, Buren-27)
punct(Buren-27, ,-28)
det(columnist-30, the-29)
appos(Buren-27, columnist-30)
punct(says-24, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#man

sleep :: Everyone was sleeping with Noriega ./.
nsubj(sleeping-3, Everyone-1)
aux(sleeping-3, was-2)
root(ROOT-0, sleeping-3)
case(Noriega-5, with-4)
nmod:with(sleeping-3, Noriega-5)
punct(sleeping-3, .-6)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#everyone

sleep :: One broker , whose business failed after the crash , began abusing drugs -- mainly sleeping pills -- and contemplated divorce and suicide , says Mari Terzaghi , a clinical psychologist who treats many Wall Street professionals ./.
nummod(broker-2, One-1)
nmod:poss(business-5, broker-2)
nsubj(began-11, broker-2)
punct(broker-2, ,-3)
ref(broker-2, whose-4)
nsubj(failed-6, business-5)
acl:relcl(broker-2, failed-6)
case(crash-9, after-7)
det(crash-9, the-8)
nmod:after(failed-6, crash-9)
punct(broker-2, ,-10)
ccomp(says-25, began-11)
xcomp(began-11, abusing-12)
dobj(abusing-12, drugs-13)
punct(abusing-12, ---14)
advmod(sleeping-16, mainly-15)
dep(abusing-12, sleeping-16)
dobj(sleeping-16, pills-17)
punct(abusing-12, ---18)
cc(abusing-12, and-19)
amod(divorce-21, contemplated-20)
xcomp(began-11, divorce-21)
conj:and(abusing-12, divorce-21)
cc(divorce-21, and-22)
conj:and(abusing-12, suicide-23)
conj:and(divorce-21, suicide-23)
punct(says-25, ,-24)
root(ROOT-0, says-25)
compound(Terzaghi-27, Mari-26)
nsubj(says-25, Terzaghi-27)
punct(Terzaghi-27, ,-28)
det(psychologist-31, a-29)
amod(psychologist-31, clinical-30)
appos(Terzaghi-27, psychologist-31)
nsubj(treats-33, psychologist-31)
ref(psychologist-31, who-32)
acl:relcl(psychologist-31, treats-33)
amod(professionals-37, many-34)
compound(professionals-37, Wall-35)
compound(professionals-37, Street-36)
dobj(treats-33, professionals-37)
punct(says-25, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#pills

sleep :: `` One of the clues that it was n't really a crash was that she said everyone else slept through it , '' he says ./.
punct(says-25, ``-1)
nsubj(was-13, One-2)
case(clues-5, of-3)
det(clues-5, the-4)
nmod:of(One-2, clues-5)
mark(crash-12, that-6)
nsubj(crash-12, it-7)
cop(crash-12, was-8)
neg(crash-12, n't-9)
advmod(crash-12, really-10)
det(crash-12, a-11)
ccomp(clues-5, crash-12)
ccomp(says-25, was-13)
mark(said-16, that-14)
nsubj(said-16, she-15)
ccomp(was-13, said-16)
nsubj(slept-19, everyone-17)
amod(everyone-17, else-18)
ccomp(said-16, slept-19)
case(it-21, through-20)
nmod:through(slept-19, it-21)
punct(says-25, ,-22)
punct(says-25, ''-23)
nsubj(says-25, he-24)
root(ROOT-0, says-25)
punct(says-25, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#everyone

sleep :: But then , when they sleep together for the first time , he wakes up in the morning with her lying next to him and he knows something strange is happening to him ./.
cc(wakes-14, But-1)
advmod(wakes-14, then-2)
punct(wakes-14, ,-3)
advmod(sleep-6, when-4)
nsubj(sleep-6, they-5)
advcl(wakes-14, sleep-6)
advmod(sleep-6, together-7)
case(time-11, for-8)
det(time-11, the-9)
amod(time-11, first-10)
nmod:for(sleep-6, time-11)
punct(wakes-14, ,-12)
nsubj(wakes-14, he-13)
root(ROOT-0, wakes-14)
compound:prt(wakes-14, up-15)
case(morning-18, in-16)
det(morning-18, the-17)
nmod:in(wakes-14, morning-18)
mark(lying-21, with-19)
nsubj(lying-21, her-20)
advcl(wakes-14, lying-21)
case(him-24, next-22)
mwe(next-22, to-23)
nmod:next_to(lying-21, him-24)
cc(lying-21, and-25)
nsubj(knows-27, he-26)
advcl(wakes-14, knows-27)
conj:and(lying-21, knows-27)
dobj(knows-27, something-28)
amod(something-28, strange-29)
aux(happening-31, is-30)
dep(knows-27, happening-31)
case(him-33, to-32)
nmod:to(happening-31, him-33)
punct(wakes-14, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#they

sleep :: Her daughter demanded that she keep silent , telling her , `` You wo n't have a home to sleep in if you say anything about this . ''/''
nmod:poss(daughter-2, Her-1)
nsubj(demanded-3, daughter-2)
root(ROOT-0, demanded-3)
mark(keep-6, that-4)
nsubj(keep-6, she-5)
ccomp(demanded-3, keep-6)
xcomp(keep-6, silent-7)
punct(demanded-3, ,-8)
xcomp(demanded-3, telling-9)
dobj(telling-9, her-10)
punct(telling-9, ,-11)
punct(telling-9, ``-12)
nsubj(have-16, You-13)
aux(have-16, wo-14)
neg(have-16, n't-15)
ccomp(telling-9, have-16)
det(home-18, a-17)
dobj(have-16, home-18)
mark(sleep-20, to-19)
acl(home-18, sleep-20)
compound:prt(sleep-20, in-21)
mark(say-24, if-22)
nsubj(say-24, you-23)
advcl(sleep-20, say-24)
dobj(say-24, anything-25)
case(this-27, about-26)
nmod:about(anything-25, this-27)
punct(demanded-3, .-28)
punct(demanded-3, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

sleep :: Their camels sleep tied to nearby posts , under blankets on a raked spit of sand ./.
nmod:poss(camels-2, Their-1)
nsubj(sleep-3, camels-2)
root(ROOT-0, sleep-3)
xcomp(sleep-3, tied-4)
case(posts-7, to-5)
amod(posts-7, nearby-6)
nmod:to(tied-4, posts-7)
punct(tied-4, ,-8)
case(blankets-10, under-9)
nmod:under(tied-4, blankets-10)
case(spit-14, on-11)
det(spit-14, a-12)
amod(spit-14, raked-13)
nmod:on(blankets-10, spit-14)
case(sand-16, of-15)
nmod:of(spit-14, sand-16)
punct(sleep-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#camels

sleep :: The Washington Redskins ' Joe Gibbs is one of those football coaches who sleeps in his office , so he is n't always up on current events ./.
det(Redskins-3, The-1)
compound(Redskins-3, Washington-2)
nmod:poss(Gibbs-6, Redskins-3)
case(Redskins-3, '-4)
compound(Gibbs-6, Joe-5)
nsubj(one-8, Gibbs-6)
cop(one-8, is-7)
root(ROOT-0, one-8)
case(coaches-12, of-9)
det(coaches-12, those-10)
compound(coaches-12, football-11)
nmod:of(one-8, coaches-12)
nsubj(sleeps-14, coaches-12)
ref(coaches-12, who-13)
acl:relcl(coaches-12, sleeps-14)
case(office-17, in-15)
nmod:poss(office-17, his-16)
nmod:in(sleeps-14, office-17)
punct(one-8, ,-18)
mark(up-24, so-19)
nsubj(up-24, he-20)
cop(up-24, is-21)
neg(up-24, n't-22)
advmod(up-24, always-23)
advcl(one-8, up-24)
case(events-27, on-25)
amod(events-27, current-26)
nmod:on(up-24, events-27)
punct(one-8, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#coaches

sleep :: `` One night he was walking by at 2 or 3 in the morning -- because he did n't sleep -- and he noticed that one of the palm trees had died ./.
punct(walking-6, ``-1)
nummod(night-3, One-2)
nmod:tmod(walking-6, night-3)
nsubj(walking-6, he-4)
aux(walking-6, was-5)
root(ROOT-0, walking-6)
case(2-9, by-7)
case(2-9, at-8)
nmod:at(walking-6, 2-9)
cc(2-9, or-10)
nmod:at(walking-6, 3-11)
conj:or(2-9, 3-11)
case(morning-14, in-12)
det(morning-14, the-13)
nmod:in(walking-6, morning-14)
punct(walking-6, ---15)
mark(sleep-20, because-16)
nsubj(sleep-20, he-17)
aux(sleep-20, did-18)
neg(sleep-20, n't-19)
advcl(walking-6, sleep-20)
punct(sleep-20, ---21)
cc(sleep-20, and-22)
nsubj(noticed-24, he-23)
advcl(walking-6, noticed-24)
conj:and(sleep-20, noticed-24)
mark(died-32, that-25)
nsubj(died-32, one-26)
case(trees-30, of-27)
det(trees-30, the-28)
compound(trees-30, palm-29)
nmod:of(one-26, trees-30)
aux(died-32, had-31)
ccomp(noticed-24, died-32)
punct(walking-6, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#he

sleep :: Perhaps the Logan regulators have made themselves a bed they can not sleep in , suggests Mr. Smith: `` An ideology of radical egalitarianism that sees people as uniform blocks of mud is what gives you the idea that 200 scouts are better than two CEOs . ''/''
advmod(made-6, Perhaps-1)
det(regulators-4, the-2)
compound(regulators-4, Logan-3)
nsubj(made-6, regulators-4)
aux(made-6, have-5)
advcl(suggests-16, made-6)
nsubj(bed-9, themselves-7)
det(bed-9, a-8)
xcomp(made-6, bed-9)
nsubj(sleep-13, they-10)
aux(sleep-13, can-11)
neg(sleep-13, not-12)
acl:relcl(bed-9, sleep-13)
nmod(sleep-13, in-14)
punct(suggests-16, ,-15)
root(ROOT-0, suggests-16)
compound(Smith-18, Mr.-17)
dobj(suggests-16, Smith-18)
punct(Smith-18, :-19)
punct(Smith-18, ``-20)
det(ideology-22, An-21)
nsubj(sees-27, ideology-22)
nsubj(is-34, ideology-22)
case(egalitarianism-25, of-23)
amod(egalitarianism-25, radical-24)
nmod:of(ideology-22, egalitarianism-25)
ref(ideology-22, that-26)
acl:relcl(ideology-22, sees-27)
dobj(sees-27, people-28)
case(blocks-31, as-29)
compound(blocks-31, uniform-30)
nmod:as(sees-27, blocks-31)
case(mud-33, of-32)
nmod:of(blocks-31, mud-33)
dep(Smith-18, is-34)
nsubj(gives-36, what-35)
ccomp(is-34, gives-36)
iobj(gives-36, you-37)
det(idea-39, the-38)
dobj(gives-36, idea-39)
mark(better-44, that-40)
nummod(scouts-42, 200-41)
nsubj(better-44, scouts-42)
cop(better-44, are-43)
ccomp(idea-39, better-44)
case(CEOs-47, than-45)
nummod(CEOs-47, two-46)
nmod:than(better-44, CEOs-47)
punct(suggests-16, .-48)
punct(suggests-16, ''-49)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: sleep#they

sleep :: Reports from Afghanistan described experimental Soviet chemical or biological agents that put people to sleep without their knowing what was happening ./.
nsubj(described-4, Reports-1)
case(Afghanistan-3, from-2)
nmod:from(Reports-1, Afghanistan-3)
root(ROOT-0, described-4)
amod(chemical-7, experimental-5)
amod(chemical-7, Soviet-6)
dobj(described-4, chemical-7)
nsubj(put-12, chemical-7)
cc(chemical-7, or-8)
amod(agents-10, biological-9)
dobj(described-4, agents-10)
conj:or(chemical-7, agents-10)
nsubj(put-12, agents-10)
ref(chemical-7, that-11)
acl:relcl(chemical-7, put-12)
dobj(put-12, people-13)
nsubj:xsubj(sleep-15, people-13)
mark(sleep-15, to-14)
xcomp(put-12, sleep-15)
mark(knowing-18, without-16)
nsubj(knowing-18, their-17)
advcl(sleep-15, knowing-18)
nsubj(happening-21, what-19)
aux(happening-21, was-20)
ccomp(knowing-18, happening-21)
punct(described-4, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#people

sleep :: This weapon could be extremely powerful , perhaps ideal for the European battlefield -- simply put attacking troops to sleep ./.
det(weapon-2, This-1)
nsubj(powerful-6, weapon-2)
aux(powerful-6, could-3)
cop(powerful-6, be-4)
advmod(powerful-6, extremely-5)
root(ROOT-0, powerful-6)
punct(powerful-6, ,-7)
advmod(ideal-9, perhaps-8)
dep(powerful-6, ideal-9)
case(battlefield-13, for-10)
det(battlefield-13, the-11)
amod(battlefield-13, European-12)
nmod:for(ideal-9, battlefield-13)
punct(powerful-6, ---14)
advmod(put-16, simply-15)
parataxis(powerful-6, put-16)
xcomp(put-16, attacking-17)
dobj(attacking-17, troops-18)
nsubj:xsubj(sleep-20, troops-18)
mark(sleep-20, to-19)
xcomp(attacking-17, sleep-20)
punct(powerful-6, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#troops

sleep :: Not only did this technique let sleeping elephants lie , as the `` Peaceable Kingdom '' exhibit demonstrates , it resulted in some very striking images ./.
neg(only-2, Not-1)
dep(let-6, only-2)
aux(let-6, did-3)
det(technique-5, this-4)
nsubj(let-6, technique-5)
ccomp(resulted-21, let-6)
amod(elephants-8, sleeping-7)
nsubj(lie-9, elephants-8)
ccomp(let-6, lie-9)
punct(lie-9, ,-10)
mark(demonstrates-18, as-11)
det(exhibit-17, the-12)
punct(exhibit-17, ``-13)
amod(exhibit-17, Peaceable-14)
compound(exhibit-17, Kingdom-15)
punct(exhibit-17, ''-16)
nsubj(demonstrates-18, exhibit-17)
advcl(lie-9, demonstrates-18)
punct(resulted-21, ,-19)
nsubj(resulted-21, it-20)
root(ROOT-0, resulted-21)
case(images-26, in-22)
det(images-26, some-23)
advmod(striking-25, very-24)
amod(images-26, striking-25)
nmod:in(resulted-21, images-26)
punct(resulted-21, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#elephants

sleep :: As Eliot wrote: `` In a warm haze , the sultry light is absorbed , not refracted , by grey stone . . . . '' and flowers do indeed `` sleep in empty silence . ''/''
mark(wrote-3, As-1)
nsubj(wrote-3, Eliot-2)
root(ROOT-0, wrote-3)
punct(wrote-3, :-4)
punct(wrote-3, ``-5)
case(haze-9, In-6)
det(haze-9, a-7)
amod(haze-9, warm-8)
nmod:in(absorbed-15, haze-9)
punct(absorbed-15, ,-10)
det(light-13, the-11)
amod(light-13, sultry-12)
nsubjpass(absorbed-15, light-13)
auxpass(absorbed-15, is-14)
parataxis(wrote-3, absorbed-15)
punct(absorbed-15, ,-16)
neg(refracted-18, not-17)
conj(absorbed-15, refracted-18)
punct(absorbed-15, ,-19)
case(stone-22, by-20)
compound(stone-22, grey-21)
nmod:by(sleep-30, stone-22)
punct(stone-22, ...-23)
punct(stone-22, ''-24)
cc(stone-22, and-25)
conj:and(stone-22, flowers-26)
nmod:by(sleep-30, flowers-26)
aux(sleep-30, do-27)
advmod(sleep-30, indeed-28)
punct(sleep-30, ``-29)
parataxis(absorbed-15, sleep-30)
case(silence-33, in-31)
amod(silence-33, empty-32)
nmod:in(sleep-30, silence-33)
punct(wrote-3, .-34)
punct(wrote-3, ''-35)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: sleep#stone

sleep :: I would sleep better knowing Dan Quayle was in the National Guard than on the national ticket ./.
nsubj(sleep-3, I-1)
aux(sleep-3, would-2)
root(ROOT-0, sleep-3)
advmod(sleep-3, better-4)
xcomp(sleep-3, knowing-5)
compound(Quayle-7, Dan-6)
nsubj(Guard-12, Quayle-7)
cop(Guard-12, was-8)
case(Guard-12, in-9)
det(Guard-12, the-10)
compound(Guard-12, National-11)
ccomp(knowing-5, Guard-12)
case(ticket-17, than-13)
case(ticket-17, on-14)
det(ticket-17, the-15)
amod(ticket-17, national-16)
nmod:on(Guard-12, ticket-17)
punct(sleep-3, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#i

sleep :: `` If I had 10 patients at the hospital , I 'd sleep over . ''/''
punct(sleep-13, ``-1)
mark(had-4, If-2)
nsubj(had-4, I-3)
advcl(sleep-13, had-4)
nummod(patients-6, 10-5)
dobj(had-4, patients-6)
case(hospital-9, at-7)
det(hospital-9, the-8)
nmod:at(had-4, hospital-9)
punct(sleep-13, ,-10)
nsubj(sleep-13, I-11)
aux(sleep-13, 'd-12)
root(ROOT-0, sleep-13)
advmod(sleep-13, over-14)
punct(sleep-13, .-15)
punct(sleep-13, ''-16)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: sleep#i

sleep :: He takes a sip of brandy and adds an afterthought: `` America should go to sleep for 50 years so we can catch up . ''/''
nsubj(takes-2, He-1)
nsubj(adds-8, He-1)
root(ROOT-0, takes-2)
det(sip-4, a-3)
dobj(takes-2, sip-4)
case(brandy-6, of-5)
nmod:of(sip-4, brandy-6)
cc(takes-2, and-7)
conj:and(takes-2, adds-8)
det(afterthought-10, an-9)
dobj(adds-8, afterthought-10)
punct(afterthought-10, :-11)
punct(afterthought-10, ``-12)
nsubj(go-15, America-13)
nsubj:xsubj(sleep-17, America-13)
aux(go-15, should-14)
dep(afterthought-10, go-15)
mark(sleep-17, to-16)
xcomp(go-15, sleep-17)
case(years-20, for-18)
nummod(years-20, 50-19)
nmod:for(sleep-17, years-20)
mark(catch-24, so-21)
nsubj(catch-24, we-22)
aux(catch-24, can-23)
advcl(sleep-17, catch-24)
compound:prt(catch-24, up-25)
punct(takes-2, .-26)
punct(takes-2, ''-27)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: sleep#america

sleep :: Earlier , he explains to his girlfriend why , on a bet , he slept with a woman he did n't care about: `` A guy lays down a dare you got ta take it . ''/''
advmod(explains-4, Earlier-1)
punct(explains-4, ,-2)
nsubj(explains-4, he-3)
root(ROOT-0, explains-4)
case(girlfriend-7, to-5)
nmod:poss(girlfriend-7, his-6)
nmod:to(explains-4, girlfriend-7)
advmod(slept-15, why-8)
punct(slept-15, ,-9)
case(bet-12, on-10)
det(bet-12, a-11)
nmod:on(slept-15, bet-12)
punct(slept-15, ,-13)
nsubj(slept-15, he-14)
advcl(explains-4, slept-15)
case(woman-18, with-16)
det(woman-18, a-17)
nmod:with(slept-15, woman-18)
nsubj(care-22, he-19)
aux(care-22, did-20)
neg(care-22, n't-21)
acl:relcl(woman-18, care-22)
nmod(care-22, about-23)
punct(explains-4, :-24)
punct(explains-4, ``-25)
det(guy-27, A-26)
nsubj(lays-28, guy-27)
ccomp(explains-4, lays-28)
compound:prt(lays-28, down-29)
det(dare-31, a-30)
dobj(lays-28, dare-31)
nsubj(got-33, you-32)
ccomp(dare-31, got-33)
nsubj(take-35, ta-34)
ccomp(got-33, take-35)
dobj(take-35, it-36)
punct(explains-4, .-37)
punct(explains-4, ''-38)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: sleep#he

sleep :: `` We 're not sleeping anymore , '' says Hans Decker , president of New York-based Siemens Capital Corp ./.
punct(says-9, ``-1)
nsubj(sleeping-5, We-2)
aux(sleeping-5, 're-3)
neg(sleeping-5, not-4)
ccomp(says-9, sleeping-5)
advmod(sleeping-5, anymore-6)
punct(says-9, ,-7)
punct(says-9, ''-8)
root(ROOT-0, says-9)
compound(Decker-11, Hans-10)
nsubj(says-9, Decker-11)
punct(Decker-11, ,-12)
appos(Decker-11, president-13)
case(Corp-19, of-14)
amod(York-based-16, New-15)
amod(Corp-19, York-based-16)
compound(Corp-19, Siemens-17)
compound(Corp-19, Capital-18)
nmod:of(president-13, Corp-19)
punct(says-9, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#we

sleep :: After Charlie gets Karen to admit that she slept with Bobby to get him to choose her `` worthwhile '' project , Bobby reverts to type: He and his buddy will make the prison film after all and become rich , rich , rich ./.
mark(gets-3, After-1)
nsubj(gets-3, Charlie-2)
advcl(reverts-24, gets-3)
dobj(gets-3, Karen-4)
nsubj:xsubj(admit-6, Karen-4)
mark(admit-6, to-5)
xcomp(gets-3, admit-6)
mark(slept-9, that-7)
nsubj(slept-9, she-8)
nsubj:xsubj(get-13, she-8)
ccomp(admit-6, slept-9)
case(Bobby-11, with-10)
nmod:with(slept-9, Bobby-11)
mark(get-13, to-12)
xcomp(slept-9, get-13)
dobj(get-13, him-14)
nsubj:xsubj(choose-16, him-14)
mark(choose-16, to-15)
xcomp(get-13, choose-16)
nmod:poss(project-21, her-17)
punct(project-21, ``-18)
amod(project-21, worthwhile-19)
punct(project-21, ''-20)
dobj(choose-16, project-21)
punct(reverts-24, ,-22)
nsubj(reverts-24, Bobby-23)
root(ROOT-0, reverts-24)
case(type-26, to-25)
nmod:to(reverts-24, type-26)
punct(reverts-24, :-27)
nsubj(make-33, He-28)
cc(He-28, and-29)
nmod:poss(buddy-31, his-30)
conj:and(He-28, buddy-31)
nsubj(make-33, buddy-31)
aux(make-33, will-32)
parataxis(reverts-24, make-33)
det(film-36, the-34)
compound(film-36, prison-35)
dobj(make-33, film-36)
case(rich-45, after-37)
dep(rich-45, all-38)
cc(all-38, and-39)
conj:and(all-38, become-40)
dep(rich-45, become-40)
amod(rich-45, rich-41)
punct(rich-45, ,-42)
amod(rich-45, rich-43)
punct(rich-45, ,-44)
nmod:after(make-33, rich-45)
punct(reverts-24, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#she

sleep :: Customers should n't `` sleep too easily , '' because regulatory gaps remain , such as not requiring disclosure of charges , warns Helena Wiesner , research manager at Britain 's Consumers Association ./.
nsubj(sleep-5, Customers-1)
aux(sleep-5, should-2)
neg(sleep-5, n't-3)
punct(sleep-5, ``-4)
ccomp(warns-23, sleep-5)
advmod(easily-7, too-6)
advmod(sleep-5, easily-7)
punct(sleep-5, ,-8)
punct(sleep-5, ''-9)
mark(remain-13, because-10)
amod(gaps-12, regulatory-11)
nsubj(remain-13, gaps-12)
nsubj:xsubj(requiring-18, gaps-12)
advcl(sleep-5, remain-13)
punct(remain-13, ,-14)
mark(requiring-18, such-15)
mwe(such-15, as-16)
neg(requiring-18, not-17)
xcomp(remain-13, requiring-18)
dobj(requiring-18, disclosure-19)
case(charges-21, of-20)
nmod:of(disclosure-19, charges-21)
punct(warns-23, ,-22)
root(ROOT-0, warns-23)
compound(Wiesner-25, Helena-24)
nsubj(warns-23, Wiesner-25)
punct(Wiesner-25, ,-26)
compound(manager-28, research-27)
appos(Wiesner-25, manager-28)
case(Association-33, at-29)
nmod:poss(Association-33, Britain-30)
case(Britain-30, 's-31)
compound(Association-33, Consumers-32)
nmod:at(manager-28, Association-33)
punct(warns-23, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#customers

sleep :: He has tried to convince the public his company is n't , in his words , `` a nice building on the park with everybody sleeping inside . ''/''
nsubj(tried-3, He-1)
nsubj:xsubj(convince-5, He-1)
aux(tried-3, has-2)
csubj(building-20, tried-3)
mark(convince-5, to-4)
xcomp(tried-3, convince-5)
det(company-9, the-6)
amod(company-9, public-7)
nmod:poss(company-9, his-8)
dobj(convince-5, company-9)
cop(building-20, is-10)
neg(building-20, n't-11)
punct(building-20, ,-12)
case(words-15, in-13)
nmod:poss(words-15, his-14)
nmod:in(building-20, words-15)
punct(building-20, ,-16)
punct(building-20, ``-17)
det(building-20, a-18)
amod(building-20, nice-19)
root(ROOT-0, building-20)
case(park-23, on-21)
det(park-23, the-22)
nmod:on(building-20, park-23)
mark(sleeping-26, with-24)
nsubj(sleeping-26, everybody-25)
acl(park-23, sleeping-26)
advmod(sleeping-26, inside-27)
punct(building-20, .-28)
punct(building-20, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: sleep#everybody

sleep :: The daughter of actress Tippi Hedren -LRB- the former model who became Alfred Hitchcock 's leading lady in `` The Birds , '' but whose career reputedly was dashed when she refused to sleep with him -RRB- , Ms. Griffith grew up in Hollywood 's fast lane ./.
det(daughter-2, The-1)
root(ROOT-0, daughter-2)
case(Hedren-6, of-3)
compound(Hedren-6, actress-4)
compound(Hedren-6, Tippi-5)
nmod:of(daughter-2, Hedren-6)
punct(model-10, -LRB--7)
det(model-10, the-8)
amod(model-10, former-9)
dep(Hedren-6, model-10)
nsubj(became-12, model-10)
ref(model-10, who-11)
acl:relcl(model-10, became-12)
compound(Hitchcock-14, Alfred-13)
nmod:poss(lady-17, Hitchcock-14)
case(Hitchcock-14, 's-15)
amod(lady-17, leading-16)
xcomp(became-12, lady-17)
case(Birds-21, in-18)
punct(Birds-21, ``-19)
det(Birds-21, The-20)
nmod:in(lady-17, Birds-21)
punct(Birds-21, ,-22)
punct(Birds-21, ''-23)
cc(Birds-21, but-24)
nmod:poss(reputedly-27, whose-25)
compound(reputedly-27, career-26)
nsubjpass(dashed-29, reputedly-27)
auxpass(dashed-29, was-28)
nmod:in(lady-17, dashed-29)
conj:but(Birds-21, dashed-29)
advmod(refused-32, when-30)
nsubj(refused-32, she-31)
nsubj:xsubj(sleep-34, she-31)
advcl(dashed-29, refused-32)
mark(sleep-34, to-33)
xcomp(refused-32, sleep-34)
case(him-36, with-35)
nmod:with(sleep-34, him-36)
punct(Birds-21, -RRB--37)
punct(model-10, ,-38)
compound(Griffith-40, Ms.-39)
nsubj(grew-41, Griffith-40)
acl:relcl(model-10, grew-41)
compound:prt(grew-41, up-42)
case(lane-47, in-43)
nmod:poss(lane-47, Hollywood-44)
case(Hollywood-44, 's-45)
amod(lane-47, fast-46)
nmod:in(grew-41, lane-47)
punct(daughter-2, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#she

sleep :: As simple as that sounds , Joseph Duffy , the assistant U.S. attorney in charge of the case , will have a tough time proving the charges to a federal court jury without also putting the panel to sleep ./.
advmod(simple-2, As-1)
advcl(have-21, simple-2)
mark(sounds-5, as-3)
nsubj(sounds-5, that-4)
advcl(simple-2, sounds-5)
punct(have-21, ,-6)
compound(Duffy-8, Joseph-7)
nsubj(have-21, Duffy-8)
punct(Duffy-8, ,-9)
det(attorney-13, the-10)
amod(attorney-13, assistant-11)
compound(attorney-13, U.S.-12)
appos(Duffy-8, attorney-13)
case(charge-15, in-14)
nmod:in(attorney-13, charge-15)
case(case-18, of-16)
det(case-18, the-17)
nmod:of(charge-15, case-18)
punct(Duffy-8, ,-19)
aux(have-21, will-20)
root(ROOT-0, have-21)
det(time-24, a-22)
amod(time-24, tough-23)
dobj(have-21, time-24)
dep(time-24, proving-25)
det(charges-27, the-26)
dobj(proving-25, charges-27)
case(jury-32, to-28)
det(jury-32, a-29)
amod(jury-32, federal-30)
compound(jury-32, court-31)
nmod:to(charges-27, jury-32)
mark(putting-35, without-33)
advmod(putting-35, also-34)
advcl(proving-25, putting-35)
det(panel-37, the-36)
dobj(putting-35, panel-37)
mark(sleep-39, to-38)
advcl(putting-35, sleep-39)
punct(have-21, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

sleep :: The second ad says Mr. Weicker was n't always sleeping ./.
det(ad-3, The-1)
amod(ad-3, second-2)
nsubj(says-4, ad-3)
root(ROOT-0, says-4)
compound(Weicker-6, Mr.-5)
nsubj(sleeping-10, Weicker-6)
aux(sleeping-10, was-7)
neg(sleeping-10, n't-8)
advmod(sleeping-10, always-9)
ccomp(says-4, sleeping-10)
punct(says-4, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#weicker

sleep :: The plant in Delta , Pa . , about 45 miles down the Susquehanna River from Three Mile Island , was ordered to be closed after some of Peach Bottom 's reactor operators were found playing video games and others were caught sleeping at the controls ./.
det(plant-2, The-1)
root(ROOT-0, plant-2)
case(Delta-4, in-3)
nmod:in(plant-2, Delta-4)
punct(Delta-4, ,-5)
appos(Delta-4, Pa-6)
punct(plant-2, .-7)
punct(ordered-15, ,-1)
advmod(45-3, about-2)
nummod(miles-4, 45-3)
nsubjpass(ordered-15, miles-4)
nsubjpass:xsubj(closed-18, miles-4)
case(miles-4, down-5)
det(River-8, the-6)
compound(River-8, Susquehanna-7)
dep(miles-4, River-8)
case(Island-12, from-9)
nummod(Island-12, Three-10)
compound(Island-12, Mile-11)
nmod:from(miles-4, Island-12)
punct(ordered-15, ,-13)
auxpass(ordered-15, was-14)
csubjpass(found-28, ordered-15)
mark(closed-18, to-16)
auxpass(closed-18, be-17)
xcomp(ordered-15, closed-18)
case(some-20, after-19)
nmod:after(closed-18, some-20)
case(operators-26, of-21)
compound(Bottom-23, Peach-22)
nmod:poss(operators-26, Bottom-23)
case(Bottom-23, 's-24)
compound(operators-26, reactor-25)
nmod:of(some-20, operators-26)
auxpass(found-28, were-27)
csubjpass(caught-35, found-28)
xcomp(found-28, playing-29)
amod(games-31, video-30)
dobj(playing-29, games-31)
cc(games-31, and-32)
dobj(playing-29, others-33)
conj:and(games-31, others-33)
auxpass(caught-35, were-34)
root(ROOT-0, caught-35)
xcomp(caught-35, sleeping-36)
case(controls-39, at-37)
det(controls-39, the-38)
nmod:at(sleeping-36, controls-39)
punct(caught-35, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#controls

sleep :: He then delivered a treatise on hypoxia and decompression sickness , noting that at 16 , 000 to 20 , 000 feet , people `` feel extreme fatigue , a great desire to sleep , severe headache , difficulty in breathing and chest pain , exactly as stated by the Ayat . ''/''
nsubj(delivered-3, He-1)
advmod(delivered-3, then-2)
root(ROOT-0, delivered-3)
det(treatise-5, a-4)
dobj(delivered-3, treatise-5)
case(hypoxia-7, on-6)
nmod:on(treatise-5, hypoxia-7)
cc(hypoxia-7, and-8)
compound(sickness-10, decompression-9)
nmod:on(treatise-5, sickness-10)
conj:and(hypoxia-7, sickness-10)
punct(delivered-3, ,-11)
advcl(delivered-3, noting-12)
mark(feel-26, that-13)
case(16-15, at-14)
nmod:at(feel-26, 16-15)
punct(feel-26, ,-16)
compound(20-19, 000-17)
dep(20-19, to-18)
advcl(feel-26, 20-19)
punct(20-19, ,-20)
nummod(feet-22, 000-21)
appos(20-19, feet-22)
punct(20-19, ,-23)
nsubj(feel-26, people-24)
punct(feel-26, ``-25)
ccomp(noting-12, feel-26)
amod(fatigue-28, extreme-27)
dobj(feel-26, fatigue-28)
punct(fatigue-28, ,-29)
det(desire-32, a-30)
amod(desire-32, great-31)
appos(fatigue-28, desire-32)
mark(sleep-34, to-33)
acl(desire-32, sleep-34)
punct(sleep-34, ,-35)
amod(headache-37, severe-36)
conj(sleep-34, headache-37)
punct(sleep-34, ,-38)
conj(sleep-34, difficulty-39)
case(breathing-41, in-40)
nmod:in(difficulty-39, breathing-41)
cc(breathing-41, and-42)
compound(pain-44, chest-43)
nmod:in(difficulty-39, pain-44)
conj:and(breathing-41, pain-44)
punct(sleep-34, ,-45)
advmod(stated-48, exactly-46)
mark(stated-48, as-47)
advcl(sleep-34, stated-48)
case(Ayat-51, by-49)
det(Ayat-51, the-50)
nmod:by(stated-48, Ayat-51)
punct(delivered-3, .-52)
punct(delivered-3, ''-53)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

sleep :: Koversada , maybe humanity 's greatest undraped conurbation , sleeps more than 100 , 000 ./.
nsubj(sleeps-10, Koversada-1)
punct(Koversada-1, ,-2)
advmod(conurbation-8, maybe-3)
nmod:poss(conurbation-8, humanity-4)
case(humanity-4, 's-5)
amod(conurbation-8, greatest-6)
amod(conurbation-8, undraped-7)
appos(Koversada-1, conurbation-8)
punct(Koversada-1, ,-9)
root(ROOT-0, sleeps-10)
advmod(100-13, more-11)
mwe(more-11, than-12)
dobj(sleeps-10, 100-13)
punct(100-13, ,-14)
appos(100-13, 000-15)
punct(sleeps-10, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#100

sleep :: I sleep better when I compete . ''/''
nsubj(sleep-2, I-1)
root(ROOT-0, sleep-2)
xcomp(sleep-2, better-3)
advmod(compete-6, when-4)
nsubj(compete-6, I-5)
advcl(sleep-2, compete-6)
punct(sleep-2, .-7)
punct(sleep-2, ''-8)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: sleep#i

sleep :: At the core of the company 's problem is its Peach Bottom nuclear power facility , which the Nuclear Regulatory Commission ordered shut in March 1987 when control-room operators were discovered playing video games and sleeping on the job ./.
case(core-3, At-1)
det(core-3, the-2)
nmod:at(is-9, core-3)
case(problem-8, of-4)
det(company-6, the-5)
nmod:poss(problem-8, company-6)
case(company-6, 's-7)
nmod:of(core-3, problem-8)
root(ROOT-0, is-9)
nmod:poss(facility-15, its-10)
compound(facility-15, Peach-11)
compound(facility-15, Bottom-12)
amod(facility-15, nuclear-13)
compound(facility-15, power-14)
nsubj(is-9, facility-15)
dobj(ordered-22, facility-15)
punct(facility-15, ,-16)
ref(facility-15, which-17)
det(Commission-21, the-18)
amod(Commission-21, Nuclear-19)
amod(Commission-21, Regulatory-20)
nsubj(ordered-22, Commission-21)
acl:relcl(facility-15, ordered-22)
xcomp(ordered-22, shut-23)
case(March-25, in-24)
nmod:in(shut-23, March-25)
nummod(March-25, 1987-26)
advmod(discovered-31, when-27)
compound(operators-29, control-room-28)
nsubjpass(discovered-31, operators-29)
auxpass(discovered-31, were-30)
advcl(shut-23, discovered-31)
xcomp(discovered-31, playing-32)
amod(games-34, video-33)
dobj(playing-32, games-34)
cc(playing-32, and-35)
xcomp(discovered-31, sleeping-36)
conj:and(playing-32, sleeping-36)
case(job-39, on-37)
det(job-39, the-38)
nmod:on(sleeping-36, job-39)
punct(is-9, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#job

sleep :: When he ca n't sleep , he says , `` I just sit back in a chair and get myself into a catatonic Zen state . ''/''
advmod(sleep-5, When-1)
nsubj(sleep-5, he-2)
aux(sleep-5, ca-3)
neg(sleep-5, n't-4)
advcl(sit-13, sleep-5)
punct(says-8, ,-6)
nsubj(says-8, he-7)
parataxis(sit-13, says-8)
punct(says-8, ,-9)
punct(sit-13, ``-10)
nsubj(sit-13, I-11)
nsubj(get-19, I-11)
advmod(sit-13, just-12)
root(ROOT-0, sit-13)
advmod(sit-13, back-14)
case(chair-17, in-15)
det(chair-17, a-16)
nmod:in(sit-13, chair-17)
cc(sit-13, and-18)
conj:and(sit-13, get-19)
dobj(get-19, myself-20)
case(state-25, into-21)
det(state-25, a-22)
amod(state-25, catatonic-23)
compound(state-25, Zen-24)
nmod:into(get-19, state-25)
punct(sit-13, .-26)
punct(sit-13, ''-27)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: sleep#he

sleep :: Next door , two rifle-toting guards patrol outside the shack where Mr. Ngxobongwana is sleeping ./.
amod(door-2, Next-1)
root(ROOT-0, door-2)
punct(door-2, ,-3)
nummod(patrol-7, two-4)
amod(patrol-7, rifle-toting-5)
compound(patrol-7, guards-6)
root(,-3, patrol-7)
case(shack-10, outside-8)
det(shack-10, the-9)
nmod:outside(patrol-7, shack-10)
advmod(sleeping-15, where-11)
compound(Ngxobongwana-13, Mr.-12)
nsubj(sleeping-15, Ngxobongwana-13)
aux(sleeping-15, is-14)
acl:relcl(shack-10, sleeping-15)
punct(patrol-7, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#ngxobongwana

sleep :: `` I have long suspected that more people are sleeping apart because of snoring than are sleeping together for all other reasons combined . ''/''
root(ROOT-0, ``-1)
nsubj(suspected-5, I-2)
aux(suspected-5, have-3)
advmod(suspected-5, long-4)
root(``-1, suspected-5)
mark(sleeping-10, that-6)
amod(people-8, more-7)
nsubj(sleeping-10, people-8)
aux(sleeping-10, are-9)
ccomp(suspected-5, sleeping-10)
advmod(sleeping-10, apart-11)
case(snoring-14, because-12)
mwe(because-12, of-13)
nmod:because_of(sleeping-10, snoring-14)
mark(sleeping-17, than-15)
aux(sleeping-17, are-16)
advcl(sleeping-10, sleeping-17)
advmod(sleeping-17, together-18)
case(reasons-22, for-19)
det(reasons-22, all-20)
amod(reasons-22, other-21)
nmod:for(sleeping-17, reasons-22)
acl(reasons-22, combined-23)
punct(suspected-5, .-24)
punct(suspected-5, ''-25)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: sleep#people

sleep :: You 'll sleep in tents , dine on dried food and endure temperatures of 40 below , all for $ 69 , 500 ./.
nsubj(sleep-3, You-1)
nsubj(dine-7, You-1)
nsubj(endure-12, You-1)
aux(sleep-3, 'll-2)
root(ROOT-0, sleep-3)
case(tents-5, in-4)
nmod:in(sleep-3, tents-5)
punct(sleep-3, ,-6)
conj:and(sleep-3, dine-7)
case(food-10, on-8)
amod(food-10, dried-9)
nmod:on(dine-7, food-10)
cc(sleep-3, and-11)
conj:and(sleep-3, endure-12)
dobj(endure-12, temperatures-13)
case(40-15, of-14)
nmod:of(temperatures-13, 40-15)
advmod(endure-12, below-16)
punct(sleep-3, ,-17)
conj:and(sleep-3, all-18)
case(69-21, for-19)
dep(69-21, $-20)
nmod:for(all-18, 69-21)
punct(69-21, ,-22)
appos(69-21, 500-23)
punct(sleep-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#you

sleep :: On the show , he has threatened to broadcast the home phone numbers of port commissioners so that residents who ca n't sleep Sunday night can call them up and keep the officials awake ./.
case(show-3, On-1)
det(show-3, the-2)
nmod:on(threatened-7, show-3)
punct(threatened-7, ,-4)
nsubj(threatened-7, he-5)
nsubj:xsubj(broadcast-9, he-5)
aux(threatened-7, has-6)
root(ROOT-0, threatened-7)
mark(broadcast-9, to-8)
xcomp(threatened-7, broadcast-9)
det(numbers-13, the-10)
compound(numbers-13, home-11)
compound(numbers-13, phone-12)
dobj(broadcast-9, numbers-13)
case(commissioners-16, of-14)
amod(commissioners-16, port-15)
nmod:of(numbers-13, commissioners-16)
mark(call-27, so-17)
mwe(so-17, that-18)
nsubj(sleep-23, residents-19)
nsubj(call-27, residents-19)
nsubj(keep-31, residents-19)
ref(residents-19, who-20)
aux(sleep-23, ca-21)
neg(sleep-23, n't-22)
acl:relcl(residents-19, sleep-23)
compound(night-25, Sunday-24)
nmod:tmod(sleep-23, night-25)
aux(call-27, can-26)
advcl(broadcast-9, call-27)
dobj(call-27, them-28)
compound:prt(call-27, up-29)
cc(call-27, and-30)
advcl(broadcast-9, keep-31)
conj:and(call-27, keep-31)
det(officials-33, the-32)
dobj(keep-31, officials-33)
advmod(keep-31, awake-34)
punct(threatened-7, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#residents

sleep :: Without spoiling too many surprises -- this play never stops surprising you -- I can say that the husband Rachel leaves behind on Christmas Eve will reappear , and so will both of the children who sleep peacefully through her escape ./.
mark(spoiling-2, Without-1)
advcl(say-16, spoiling-2)
advmod(many-4, too-3)
amod(surprises-5, many-4)
dobj(spoiling-2, surprises-5)
punct(stops-10, ---6)
det(play-8, this-7)
nsubj(stops-10, play-8)
neg(stops-10, never-9)
dep(spoiling-2, stops-10)
amod(you-12, surprising-11)
dobj(stops-10, you-12)
punct(stops-10, ---13)
nsubj(say-16, I-14)
aux(say-16, can-15)
root(ROOT-0, say-16)
mark(leaves-21, that-17)
det(Rachel-20, the-18)
compound(Rachel-20, husband-19)
nsubj(leaves-21, Rachel-20)
ccomp(say-16, leaves-21)
case(Eve-25, behind-22)
case(Eve-25, on-23)
compound(Eve-25, Christmas-24)
nmod:on(leaves-21, Eve-25)
aux(reappear-27, will-26)
dep(leaves-21, reappear-27)
punct(reappear-27, ,-28)
cc(reappear-27, and-29)
advmod(will-31, so-30)
dep(leaves-21, will-31)
conj:and(reappear-27, will-31)
nsubj(will-31, both-32)
case(children-35, of-33)
det(children-35, the-34)
nmod:of(both-32, children-35)
nsubj(sleep-37, children-35)
ref(children-35, who-36)
acl:relcl(children-35, sleep-37)
advmod(sleep-37, peacefully-38)
case(escape-41, through-39)
nmod:poss(escape-41, her-40)
nmod:through(sleep-37, escape-41)
punct(say-16, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#children

sleep :: It could even store some first-class sleeping berths , says Mr. Newkirk ./.
nsubj(store-4, It-1)
aux(store-4, could-2)
advmod(store-4, even-3)
ccomp(says-10, store-4)
det(berths-8, some-5)
amod(berths-8, first-class-6)
amod(berths-8, sleeping-7)
dobj(store-4, berths-8)
punct(says-10, ,-9)
root(ROOT-0, says-10)
compound(Newkirk-12, Mr.-11)
nsubj(says-10, Newkirk-12)
punct(says-10, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#berths

sleep :: Friends and analysts predict it will be very difficult for the hard-driving entrepreneur to let go of his company that , early on , succeeded in coming up with a highly successful device to monitor sleeping infants ./.
nsubj(predict-4, Friends-1)
cc(Friends-1, and-2)
conj:and(Friends-1, analysts-3)
nsubj(predict-4, analysts-3)
root(ROOT-0, predict-4)
nsubj(difficult-9, it-5)
aux(difficult-9, will-6)
cop(difficult-9, be-7)
advmod(difficult-9, very-8)
ccomp(predict-4, difficult-9)
mark(let-15, for-10)
det(entrepreneur-13, the-11)
amod(entrepreneur-13, hard-driving-12)
nsubj(let-15, entrepreneur-13)
mark(let-15, to-14)
advcl(difficult-9, let-15)
ccomp(let-15, go-16)
case(company-19, of-17)
nmod:poss(company-19, his-18)
nmod:of(go-16, company-19)
mark(succeeded-25, that-20)
punct(succeeded-25, ,-21)
advmod(on-23, early-22)
advmod(succeeded-25, on-23)
punct(succeeded-25, ,-24)
ccomp(go-16, succeeded-25)
mark(coming-27, in-26)
advcl(succeeded-25, coming-27)
compound:prt(coming-27, up-28)
case(device-33, with-29)
det(device-33, a-30)
advmod(successful-32, highly-31)
amod(device-33, successful-32)
nmod:with(coming-27, device-33)
mark(monitor-35, to-34)
acl(device-33, monitor-35)
xcomp(monitor-35, sleeping-36)
dobj(sleeping-36, infants-37)
punct(predict-4, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#infants

sleep :: In separate incidents in the past few weeks , Israelis are being held in connection with the burning to death of three Palestinian laborers as they slept near a building site near Tel Aviv ./.
case(incidents-3, In-1)
amod(incidents-3, separate-2)
nmod:in(held-13, incidents-3)
case(weeks-8, in-4)
det(weeks-8, the-5)
amod(weeks-8, past-6)
amod(weeks-8, few-7)
nmod:in(incidents-3, weeks-8)
punct(held-13, ,-9)
nsubjpass(held-13, Israelis-10)
aux(held-13, are-11)
auxpass(held-13, being-12)
root(ROOT-0, held-13)
case(connection-15, in-14)
nmod:in(held-13, connection-15)
case(burning-18, with-16)
det(burning-18, the-17)
nmod:with(connection-15, burning-18)
case(death-20, to-19)
nmod:to(connection-15, death-20)
case(laborers-24, of-21)
nummod(laborers-24, three-22)
amod(laborers-24, Palestinian-23)
nmod:of(death-20, laborers-24)
mark(slept-27, as-25)
nsubj(slept-27, they-26)
advcl(held-13, slept-27)
case(site-31, near-28)
det(site-31, a-29)
compound(site-31, building-30)
nmod:near(slept-27, site-31)
case(Aviv-34, near-32)
compound(Aviv-34, Tel-33)
nmod:near(site-31, Aviv-34)
punct(held-13, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#they

sleep :: Medic-Light already is working on `` second-generation '' products , including a computerized light system that , by simulating the gradual light changes of dawn and dusk , is designed to serve as `` a natural clock '' to wake people up and lull them to sleep , says Mr. Hughes ./.
nsubj(working-4, Medic-Light-1)
advmod(working-4, already-2)
aux(working-4, is-3)
ccomp(says-49, working-4)
case(products-9, on-5)
punct(products-9, ``-6)
amod(products-9, second-generation-7)
punct(products-9, ''-8)
nmod:on(working-4, products-9)
punct(products-9, ,-10)
case(system-15, including-11)
det(system-15, a-12)
amod(system-15, computerized-13)
compound(system-15, light-14)
nmod:including(products-9, system-15)
nsubjpass(designed-30, system-15)
nsubj:xsubj(serve-32, system-15)
ref(system-15, that-16)
punct(designed-30, ,-17)
mark(simulating-19, by-18)
advcl(designed-30, simulating-19)
det(changes-23, the-20)
amod(changes-23, gradual-21)
amod(changes-23, light-22)
dobj(simulating-19, changes-23)
case(dawn-25, of-24)
nmod:of(changes-23, dawn-25)
cc(dawn-25, and-26)
nmod:of(changes-23, dusk-27)
conj:and(dawn-25, dusk-27)
punct(designed-30, ,-28)
auxpass(designed-30, is-29)
acl:relcl(system-15, designed-30)
mark(serve-32, to-31)
xcomp(designed-30, serve-32)
case(clock-37, as-33)
punct(clock-37, ``-34)
det(clock-37, a-35)
amod(clock-37, natural-36)
nmod:as(serve-32, clock-37)
punct(clock-37, ''-38)
mark(wake-40, to-39)
dep(serve-32, wake-40)
dobj(wake-40, people-41)
compound:prt(wake-40, up-42)
cc(wake-40, and-43)
dep(serve-32, lull-44)
conj:and(wake-40, lull-44)
dobj(lull-44, them-45)
mark(sleep-47, to-46)
advcl(lull-44, sleep-47)
punct(says-49, ,-48)
root(ROOT-0, says-49)
compound(Hughes-51, Mr.-50)
nsubj(says-49, Hughes-51)
punct(says-49, .-52)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

sleep :: One simply ca n't prevent rural Africans from moving , with their ravenous cattle , onto lands too poor to support heavy grazing once the threat of bovine sleeping sickness is removed ./.
nsubj(prevent-5, One-1)
advmod(prevent-5, simply-2)
aux(prevent-5, ca-3)
neg(prevent-5, n't-4)
csubjpass(removed-32, prevent-5)
amod(Africans-7, rural-6)
dobj(prevent-5, Africans-7)
mark(moving-9, from-8)
advcl(prevent-5, moving-9)
punct(prevent-5, ,-10)
case(cattle-14, with-11)
nmod:poss(cattle-14, their-12)
amod(cattle-14, ravenous-13)
nmod:with(prevent-5, cattle-14)
punct(prevent-5, ,-15)
case(lands-17, onto-16)
nmod:onto(prevent-5, lands-17)
advmod(poor-19, too-18)
amod(lands-17, poor-19)
mark(support-21, to-20)
xcomp(poor-19, support-21)
amod(grazing-23, heavy-22)
dobj(support-21, grazing-23)
case(threat-26, once-24)
det(threat-26, the-25)
nmod:once(support-21, threat-26)
case(sickness-30, of-27)
amod(sickness-30, bovine-28)
amod(sickness-30, sleeping-29)
nmod:of(threat-26, sickness-30)
auxpass(removed-32, is-31)
root(ROOT-0, removed-32)
punct(removed-32, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#sickness

sleep :: They subsist on freeze-dried foods , patch their own wounds and sleep on the ground ./.
nsubj(subsist-2, They-1)
root(ROOT-0, subsist-2)
case(foods-5, on-3)
amod(foods-5, freeze-dried-4)
nmod:on(subsist-2, foods-5)
punct(foods-5, ,-6)
nmod:on(subsist-2, patch-7)
conj:and(foods-5, patch-7)
nmod:poss(wounds-10, their-8)
amod(wounds-10, own-9)
dobj(patch-7, wounds-10)
cc(foods-5, and-11)
nmod:on(subsist-2, sleep-12)
conj:and(foods-5, sleep-12)
case(ground-15, on-13)
det(ground-15, the-14)
nmod:on(sleep-12, ground-15)
punct(subsist-2, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#ground

sleep :: But the would-be happy warrior has become a disillusioned , despairing survivor: `` Although I was tired to death , I could not sleep , so removing my tin hat and ruffling my hair I stood up and looked over the front of my hole ./.
cc(become-7, But-1)
det(warrior-5, the-2)
amod(warrior-5, would-be-3)
amod(warrior-5, happy-4)
nsubj(become-7, warrior-5)
aux(become-7, has-6)
root(ROOT-0, become-7)
det(survivor-12, a-8)
amod(survivor-12, disillusioned-9)
punct(survivor-12, ,-10)
amod(survivor-12, despairing-11)
xcomp(become-7, survivor-12)
punct(become-7, :-13)
punct(become-7, ``-14)
mark(tired-18, Although-15)
nsubj(tired-18, I-16)
cop(tired-18, was-17)
advcl(sleep-25, tired-18)
case(death-20, to-19)
nmod:to(tired-18, death-20)
punct(sleep-25, ,-21)
nsubj(sleep-25, I-22)
aux(sleep-25, could-23)
neg(sleep-25, not-24)
ccomp(become-7, sleep-25)
punct(sleep-25, ,-26)
advmod(removing-28, so-27)
ccomp(sleep-25, removing-28)
nmod:poss(hat-31, my-29)
compound(hat-31, tin-30)
dobj(removing-28, hat-31)
cc(removing-28, and-32)
ccomp(sleep-25, ruffling-33)
conj:and(removing-28, ruffling-33)
nmod:poss(hair-35, my-34)
dobj(ruffling-33, hair-35)
nsubj(stood-37, I-36)
nsubj(looked-40, I-36)
acl:relcl(hair-35, stood-37)
compound:prt(stood-37, up-38)
cc(stood-37, and-39)
acl:relcl(hair-35, looked-40)
conj:and(stood-37, looked-40)
case(front-43, over-41)
det(front-43, the-42)
nmod:over(looked-40, front-43)
case(hole-46, of-44)
nmod:poss(hole-46, my-45)
nmod:of(front-43, hole-46)
punct(become-7, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#i

sleep :: On the road , she sleeps like a fireman , fully dressed in a sweatsuit , her eyeglasses and keys handy in case a fire alarm goes off . -LRB- She 's been rousted by false alarms four times in the past year. -RRB-/-RRB-
case(road-3, On-1)
det(road-3, the-2)
nmod:on(sleeps-6, road-3)
punct(sleeps-6, ,-4)
nsubj(sleeps-6, she-5)
root(ROOT-0, sleeps-6)
case(fireman-9, like-7)
det(fireman-9, a-8)
nmod:like(sleeps-6, fireman-9)
punct(fireman-9, ,-10)
advmod(dressed-12, fully-11)
acl(fireman-9, dressed-12)
case(sweatsuit-15, in-13)
det(sweatsuit-15, a-14)
nmod:in(dressed-12, sweatsuit-15)
punct(fireman-9, ,-16)
nmod:poss(eyeglasses-18, her-17)
nmod:like(sleeps-6, eyeglasses-18)
conj:and(fireman-9, eyeglasses-18)
cc(fireman-9, and-19)
nsubj(goes-27, keys-20)
advmod(goes-27, handy-21)
case(case-23, in-22)
nmod:in(goes-27, case-23)
det(alarm-26, a-24)
compound(alarm-26, fire-25)
nsubj(goes-27, alarm-26)
nmod:like(sleeps-6, goes-27)
conj:and(fireman-9, goes-27)
advmod(goes-27, off-28)
punct(sleeps-6, .-29)
punct(rousted-5, -LRB--1)
nsubjpass(rousted-5, She-2)
auxpass(rousted-5, 's-3)
auxpass(rousted-5, been-4)
root(ROOT-0, rousted-5)
case(alarms-8, by-6)
amod(alarms-8, false-7)
nmod:agent(rousted-5, alarms-8)
nummod(times-10, four-9)
nmod:tmod(rousted-5, times-10)
case(year-14, in-11)
det(year-14, the-12)
amod(year-14, past-13)
nmod:in(times-10, year-14)
punct(rousted-5, .-15)
punct(rousted-5, -RRB--16)
root(ROOT-0, /-1)
punct(/-1, -RRB--2)
Return str :: sleep#she

sleep :: To keep the puffed-up style looking puffy , it was advisable to sleep with the hair wrapped in toilet paper and to forget about using shampoo ./.
mark(keep-2, To-1)
advcl(advisable-11, keep-2)
det(style-5, the-3)
amod(style-5, puffed-up-4)
nsubj(looking-6, style-5)
dep(keep-2, looking-6)
xcomp(looking-6, puffy-7)
punct(advisable-11, ,-8)
nsubj(advisable-11, it-9)
cop(advisable-11, was-10)
root(ROOT-0, advisable-11)
mark(sleep-13, to-12)
ccomp(advisable-11, sleep-13)
case(hair-16, with-14)
det(hair-16, the-15)
nmod:with(sleep-13, hair-16)
acl(hair-16, wrapped-17)
case(paper-20, in-18)
compound(paper-20, toilet-19)
nmod:in(wrapped-17, paper-20)
cc(sleep-13, and-21)
mark(forget-23, to-22)
ccomp(advisable-11, forget-23)
conj:and(sleep-13, forget-23)
mark(using-25, about-24)
advcl(forget-23, using-25)
dobj(using-25, shampoo-26)
punct(advisable-11, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#hair

sleep :: History slept soundly in Teenie Harris 's stale-smelling brick basement -- 70 , 000 photographic negatives , tucked inside a bunch of old metal cabinets and cobweb-covered cardboard boxes , lost for 50 years ./.
nsubj(slept-2, History-1)
root(ROOT-0, slept-2)
advmod(slept-2, soundly-3)
case(basement-10, in-4)
compound(Harris-6, Teenie-5)
nmod:poss(basement-10, Harris-6)
case(Harris-6, 's-7)
amod(basement-10, stale-smelling-8)
compound(basement-10, brick-9)
nmod:in(slept-2, basement-10)
punct(basement-10, ---11)
nsubj(tucked-18, 70-12)
punct(70-12, ,-13)
nummod(negatives-16, 000-14)
amod(negatives-16, photographic-15)
appos(70-12, negatives-16)
punct(70-12, ,-17)
dep(basement-10, tucked-18)
case(bunch-21, inside-19)
det(bunch-21, a-20)
nmod:inside(tucked-18, bunch-21)
case(cabinets-25, of-22)
amod(cabinets-25, old-23)
compound(cabinets-25, metal-24)
nmod:of(bunch-21, cabinets-25)
cc(cabinets-25, and-26)
amod(boxes-29, cobweb-covered-27)
compound(boxes-29, cardboard-28)
nmod:of(bunch-21, boxes-29)
conj:and(cabinets-25, boxes-29)
punct(tucked-18, ,-30)
dep(tucked-18, lost-31)
case(years-34, for-32)
nummod(years-34, 50-33)
nmod:for(lost-31, years-34)
punct(slept-2, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#history

sleep :: Smokers are more likely than non-smokers to sleep less than six hours daily , skip breakfast , be physically inactive and be heavier drinkers , according to the National Center for Health Statistics ./.
nsubj(likely-4, Smokers-1)
cop(likely-4, are-2)
advmod(likely-4, more-3)
root(ROOT-0, likely-4)
case(non-smokers-6, than-5)
nmod:than(likely-4, non-smokers-6)
mark(sleep-8, to-7)
acl(non-smokers-6, sleep-8)
advmod(six-11, less-9)
mwe(less-9, than-10)
nummod(hours-12, six-11)
nmod:npmod(daily-13, hours-12)
advmod(sleep-8, daily-13)
punct(likely-4, ,-14)
ccomp(likely-4, skip-15)
dobj(skip-15, breakfast-16)
punct(skip-15, ,-17)
cop(inactive-20, be-18)
advmod(inactive-20, physically-19)
ccomp(likely-4, inactive-20)
conj:and(skip-15, inactive-20)
cc(skip-15, and-21)
cop(drinkers-24, be-22)
amod(drinkers-24, heavier-23)
ccomp(likely-4, drinkers-24)
conj:and(skip-15, drinkers-24)
punct(likely-4, ,-25)
case(Center-30, according-26)
mwe(according-26, to-27)
det(Center-30, the-28)
compound(Center-30, National-29)
nmod:according_to(likely-4, Center-30)
case(Statistics-33, for-31)
compound(Statistics-33, Health-32)
nmod:for(Center-30, Statistics-33)
punct(likely-4, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

sleep :: Almost one-third of the heavy smokers sleep less than six hours ./.
advmod(one-third-2, Almost-1)
nsubj(sleep-7, one-third-2)
case(smokers-6, of-3)
det(smokers-6, the-4)
amod(smokers-6, heavy-5)
nmod:of(one-third-2, smokers-6)
root(ROOT-0, sleep-7)
advmod(six-10, less-8)
mwe(less-8, than-9)
nummod(hours-11, six-10)
dobj(sleep-7, hours-11)
punct(sleep-7, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#hours

sleep :: For $ 12 , Dr. Cartwright sells T-shirts with four little pockets sewn in to hold tennis balls that make it uncomfortable to sleep on the back ./.
case(12-3, For-1)
dep(12-3, $-2)
nmod:for(sells-7, 12-3)
punct(sells-7, ,-4)
compound(Cartwright-6, Dr.-5)
nsubj(sells-7, Cartwright-6)
root(ROOT-0, sells-7)
dobj(sells-7, T-shirts-8)
case(pockets-12, with-9)
nummod(pockets-12, four-10)
amod(pockets-12, little-11)
nmod:with(sells-7, pockets-12)
acl(pockets-12, sewn-13)
compound:prt(sewn-13, in-14)
mark(hold-16, to-15)
xcomp(sewn-13, hold-16)
compound(balls-18, tennis-17)
dobj(hold-16, balls-18)
nsubj(make-20, balls-18)
ref(balls-18, that-19)
acl:relcl(balls-18, make-20)
nsubj(sleep-24, it-21)
dep(sleep-24, uncomfortable-22)
mark(sleep-24, to-23)
xcomp(make-20, sleep-24)
case(back-27, on-25)
det(back-27, the-26)
nmod:on(sleep-24, back-27)
punct(sells-7, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#it

sleep :: Men , women and children are crammed into barracks painted institution-yellow inside and sleep two to a four-by-six-foot bunk , arranged in triple tiers ./.
nsubjpass(crammed-7, Men-1)
punct(Men-1, ,-2)
conj:and(Men-1, women-3)
nsubjpass(crammed-7, women-3)
cc(Men-1, and-4)
conj:and(Men-1, children-5)
nsubjpass(crammed-7, children-5)
auxpass(crammed-7, are-6)
root(ROOT-0, crammed-7)
case(barracks-9, into-8)
nmod:into(crammed-7, barracks-9)
amod(institution-yellow-11, painted-10)
dep(barracks-9, institution-yellow-11)
amod(institution-yellow-11, inside-12)
cc(inside-12, and-13)
amod(institution-yellow-11, sleep-14)
conj:and(inside-12, sleep-14)
dep(inside-12, two-15)
case(bunk-19, to-16)
det(bunk-19, a-17)
amod(bunk-19, four-by-six-foot-18)
nmod:to(two-15, bunk-19)
punct(two-15, ,-20)
acl(two-15, arranged-21)
case(tiers-24, in-22)
amod(tiers-24, triple-23)
nmod:in(arranged-21, tiers-24)
punct(crammed-7, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: sleep#institution-yellow

smooth :: James Gatward , Television South 's chief executive , said his friendship with MTM chief executive officer , Arthur Price , helped smooth the way for a linkup with the small British company rather than a larger European partner ./.
compound(Gatward-2, James-1)
nsubj(said-10, Gatward-2)
punct(Gatward-2, ,-3)
compound(South-5, Television-4)
nmod:poss(executive-8, South-5)
case(South-5, 's-6)
amod(executive-8, chief-7)
appos(Gatward-2, executive-8)
punct(Gatward-2, ,-9)
root(ROOT-0, said-10)
nmod:poss(friendship-12, his-11)
nsubj(helped-22, friendship-12)
case(officer-17, with-13)
compound(officer-17, MTM-14)
compound(officer-17, chief-15)
amod(officer-17, executive-16)
nmod:with(friendship-12, officer-17)
punct(officer-17, ,-18)
compound(Price-20, Arthur-19)
appos(officer-17, Price-20)
punct(officer-17, ,-21)
ccomp(said-10, helped-22)
ccomp(helped-22, smooth-23)
det(way-25, the-24)
dobj(smooth-23, way-25)
case(linkup-28, for-26)
det(linkup-28, a-27)
nmod:for(way-25, linkup-28)
case(company-33, with-29)
det(company-33, the-30)
amod(company-33, small-31)
amod(company-33, British-32)
nmod:with(linkup-28, company-33)
cc(linkup-28, rather-34)
mwe(rather-34, than-35)
det(partner-39, a-36)
amod(partner-39, larger-37)
amod(partner-39, European-38)
nmod:for(way-25, partner-39)
conj:negcc(linkup-28, partner-39)
punct(said-10, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#way

smooth :: Mr. Campeau has promised to name a Federated team to lead the new Federated-Allied unit , which could smooth much of the anxiety ./.
compound(Campeau-2, Mr.-1)
nsubj(promised-4, Campeau-2)
nsubj:xsubj(name-6, Campeau-2)
aux(promised-4, has-3)
root(ROOT-0, promised-4)
mark(name-6, to-5)
xcomp(promised-4, name-6)
det(team-9, a-7)
compound(team-9, Federated-8)
dobj(name-6, team-9)
mark(lead-11, to-10)
acl(team-9, lead-11)
det(unit-15, the-12)
amod(unit-15, new-13)
amod(unit-15, Federated-Allied-14)
dobj(lead-11, unit-15)
nsubj(smooth-19, unit-15)
punct(unit-15, ,-16)
ref(unit-15, which-17)
aux(smooth-19, could-18)
acl:relcl(unit-15, smooth-19)
dobj(smooth-19, much-20)
case(anxiety-23, of-21)
det(anxiety-23, the-22)
nmod:of(much-20, anxiety-23)
punct(promised-4, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#anxiety

smooth :: U.S. defense analysts say the draft would create a mechanism to smooth out conflicts over design or work-sharing ./.
compound(analysts-3, U.S.-1)
compound(analysts-3, defense-2)
nsubj(say-4, analysts-3)
root(ROOT-0, say-4)
det(draft-6, the-5)
nsubj(create-8, draft-6)
aux(create-8, would-7)
ccomp(say-4, create-8)
det(mechanism-10, a-9)
dobj(create-8, mechanism-10)
mark(smooth-12, to-11)
acl(mechanism-10, smooth-12)
compound:prt(smooth-12, out-13)
dobj(smooth-12, conflicts-14)
case(design-16, over-15)
nmod:over(conflicts-14, design-16)
cc(design-16, or-17)
nmod:over(conflicts-14, work-sharing-18)
conj:or(design-16, work-sharing-18)
punct(say-4, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#conflicts

smooth :: There was market speculation yesterday that senior officials of Olympia & York may have met secretly with Michael D. Dingman , chairman and chief executive officer of Henley , in an effort to smooth over a rift between the two one-time suitors for Santa Fe , a Chicago-based railroad and energy concern ./.
expl(was-2, There-1)
root(ROOT-0, was-2)
compound(speculation-4, market-3)
nsubj(was-2, speculation-4)
nmod:tmod(was-2, yesterday-5)
mark(met-15, that-6)
amod(officials-8, senior-7)
nsubj(met-15, officials-8)
case(Olympia-10, of-9)
nmod:of(officials-8, Olympia-10)
cc(Olympia-10, &-11)
nmod:of(officials-8, York-12)
conj:&(Olympia-10, York-12)
aux(met-15, may-13)
aux(met-15, have-14)
ccomp(was-2, met-15)
advmod(met-15, secretly-16)
case(Dingman-20, with-17)
compound(Dingman-20, Michael-18)
compound(Dingman-20, D.-19)
nmod:with(met-15, Dingman-20)
punct(Dingman-20, ,-21)
appos(Dingman-20, chairman-22)
cc(chairman-22, and-23)
amod(officer-26, chief-24)
amod(officer-26, executive-25)
appos(Dingman-20, officer-26)
conj:and(chairman-22, officer-26)
case(Henley-28, of-27)
nmod:of(chairman-22, Henley-28)
punct(Dingman-20, ,-29)
case(effort-32, in-30)
det(effort-32, an-31)
nmod:in(met-15, effort-32)
mark(smooth-34, to-33)
acl(effort-32, smooth-34)
case(rift-37, over-35)
det(rift-37, a-36)
nmod:over(smooth-34, rift-37)
case(suitors-42, between-38)
det(suitors-42, the-39)
nummod(suitors-42, two-40)
amod(suitors-42, one-time-41)
nmod:between(rift-37, suitors-42)
case(Fe-45, for-43)
compound(Fe-45, Santa-44)
nmod:for(suitors-42, Fe-45)
punct(Fe-45, ,-46)
det(railroad-49, a-47)
amod(railroad-49, Chicago-based-48)
appos(Fe-45, railroad-49)
cc(railroad-49, and-50)
compound(concern-52, energy-51)
appos(Fe-45, concern-52)
conj:and(railroad-49, concern-52)
punct(was-2, .-53)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#rift

smooth :: Another factor that should smooth the process is simply the diminishing importance of the national contract ./.
det(factor-2, Another-1)
nsubj(smooth-5, factor-2)
nsubj(importance-12, factor-2)
ref(factor-2, that-3)
aux(smooth-5, should-4)
acl:relcl(factor-2, smooth-5)
det(process-7, the-6)
dobj(smooth-5, process-7)
cop(importance-12, is-8)
advmod(importance-12, simply-9)
det(importance-12, the-10)
amod(importance-12, diminishing-11)
root(ROOT-0, importance-12)
case(contract-16, of-13)
det(contract-16, the-14)
amod(contract-16, national-15)
nmod:of(importance-12, contract-16)
punct(importance-12, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#process

smooth :: There was market speculation yesterday that senior officials of Olympia & York may have met secretly with Michael D. Dingman , chairman and chief executive officer of Henley , in an effort to smooth over a rift between the two one-time suitors for Santa Fe , a Chicago-based railroad and energy concern ./.
expl(was-2, There-1)
root(ROOT-0, was-2)
compound(speculation-4, market-3)
nsubj(was-2, speculation-4)
nmod:tmod(was-2, yesterday-5)
mark(met-15, that-6)
amod(officials-8, senior-7)
nsubj(met-15, officials-8)
case(Olympia-10, of-9)
nmod:of(officials-8, Olympia-10)
cc(Olympia-10, &-11)
nmod:of(officials-8, York-12)
conj:&(Olympia-10, York-12)
aux(met-15, may-13)
aux(met-15, have-14)
ccomp(was-2, met-15)
advmod(met-15, secretly-16)
case(Dingman-20, with-17)
compound(Dingman-20, Michael-18)
compound(Dingman-20, D.-19)
nmod:with(met-15, Dingman-20)
punct(Dingman-20, ,-21)
appos(Dingman-20, chairman-22)
cc(chairman-22, and-23)
amod(officer-26, chief-24)
amod(officer-26, executive-25)
appos(Dingman-20, officer-26)
conj:and(chairman-22, officer-26)
case(Henley-28, of-27)
nmod:of(chairman-22, Henley-28)
punct(Dingman-20, ,-29)
case(effort-32, in-30)
det(effort-32, an-31)
nmod:in(met-15, effort-32)
mark(smooth-34, to-33)
acl(effort-32, smooth-34)
case(rift-37, over-35)
det(rift-37, a-36)
nmod:over(smooth-34, rift-37)
case(suitors-42, between-38)
det(suitors-42, the-39)
nummod(suitors-42, two-40)
amod(suitors-42, one-time-41)
nmod:between(rift-37, suitors-42)
case(Fe-45, for-43)
compound(Fe-45, Santa-44)
nmod:for(suitors-42, Fe-45)
punct(Fe-45, ,-46)
det(railroad-49, a-47)
amod(railroad-49, Chicago-based-48)
appos(Fe-45, railroad-49)
cc(railroad-49, and-50)
compound(concern-52, energy-51)
appos(Fe-45, concern-52)
conj:and(railroad-49, concern-52)
punct(was-2, .-53)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#rift

smooth :: International Business Machines Corp. will announce tomorrow a slew of telecommunications products that will smooth over some of the problems with large computer networks , industry sources said ./.
compound(Corp.-4, International-1)
compound(Corp.-4, Business-2)
compound(Corp.-4, Machines-3)
nsubj(announce-6, Corp.-4)
aux(announce-6, will-5)
root(ROOT-0, announce-6)
nmod:tmod(announce-6, tomorrow-7)
det(slew-9, a-8)
nsubj(smooth-15, slew-9)
nsubj(said-28, slew-9)
case(products-12, of-10)
compound(products-12, telecommunications-11)
nmod:of(slew-9, products-12)
ref(slew-9, that-13)
aux(smooth-15, will-14)
acl:relcl(slew-9, smooth-15)
case(some-17, over-16)
nmod:over(smooth-15, some-17)
case(problems-20, of-18)
det(problems-20, the-19)
nmod:of(some-17, problems-20)
case(networks-24, with-21)
amod(networks-24, large-22)
compound(networks-24, computer-23)
nmod:with(problems-20, networks-24)
punct(networks-24, ,-25)
compound(sources-27, industry-26)
appos(networks-24, sources-27)
ccomp(announce-6, said-28)
punct(announce-6, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#slew

smooth :: And Bank of Japan Governor Satoshi Sumita said the central bank would `` act appropriately and flexibly '' if needed to smooth currency and price movements ./.
cc(said-8, And-1)
dep(Sumita-7, Bank-2)
case(Japan-4, of-3)
nmod:of(Bank-2, Japan-4)
compound(Sumita-7, Governor-5)
compound(Sumita-7, Satoshi-6)
nsubj(said-8, Sumita-7)
root(ROOT-0, said-8)
det(bank-11, the-9)
amod(bank-11, central-10)
nsubj(act-14, bank-11)
nsubj(needed-20, bank-11)
nsubj:xsubj(smooth-22, bank-11)
aux(act-14, would-12)
punct(act-14, ``-13)
ccomp(said-8, act-14)
advmod(act-14, appropriately-15)
cc(act-14, and-16)
advmod(needed-20, flexibly-17)
punct(flexibly-17, ''-18)
mark(needed-20, if-19)
ccomp(said-8, needed-20)
conj:and(act-14, needed-20)
mark(smooth-22, to-21)
xcomp(needed-20, smooth-22)
compound(movements-26, currency-23)
cc(currency-23, and-24)
conj:and(currency-23, price-25)
compound(movements-26, price-25)
dobj(smooth-22, movements-26)
punct(said-8, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#movements

smooth :: But the launch was n't completely smooth ./.
cc(smooth-7, But-1)
det(launch-3, the-2)
nsubj(smooth-7, launch-3)
aux(smooth-7, was-4)
neg(smooth-7, n't-5)
advmod(smooth-7, completely-6)
root(ROOT-0, smooth-7)
punct(smooth-7, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#launch

smooth :: Taking over a business from a parent is n't always smooth sailing ./.
csubj(smooth-11, Taking-1)
compound:prt(Taking-1, over-2)
det(business-4, a-3)
dobj(Taking-1, business-4)
case(parent-7, from-5)
det(parent-7, a-6)
nmod:from(Taking-1, parent-7)
aux(smooth-11, is-8)
neg(smooth-11, n't-9)
advmod(smooth-11, always-10)
root(ROOT-0, smooth-11)
dobj(smooth-11, sailing-12)
punct(smooth-11, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#sailing

smooth :: They said the amounts were small and the action was interpreted as more an attempt to smooth volatility and slow the dollar 's ascent than to stop it ./.
nsubj(said-2, They-1)
root(ROOT-0, said-2)
det(amounts-4, the-3)
nsubj(small-6, amounts-4)
cop(small-6, were-5)
ccomp(said-2, small-6)
cc(small-6, and-7)
det(action-9, the-8)
nsubjpass(interpreted-11, action-9)
auxpass(interpreted-11, was-10)
ccomp(said-2, interpreted-11)
conj:and(small-6, interpreted-11)
case(attempt-15, as-12)
advmod(attempt-15, more-13)
det(attempt-15, an-14)
nmod:as(interpreted-11, attempt-15)
mark(smooth-17, to-16)
acl(attempt-15, smooth-17)
dobj(smooth-17, volatility-18)
cc(smooth-17, and-19)
acl(attempt-15, slow-20)
conj:and(smooth-17, slow-20)
det(dollar-22, the-21)
nmod:poss(ascent-24, dollar-22)
case(dollar-22, 's-23)
dobj(slow-20, ascent-24)
mark(stop-27, than-25)
mark(stop-27, to-26)
advcl(slow-20, stop-27)
dobj(stop-27, it-28)
punct(said-2, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#volatility

smooth :: The oil deals were smoothed by Mr. Chatichai 's close personal ties with then-Saudi Oil Minister Ahmed Zaki Yamani , who was a former neighbor in Switzerland , and whose son used to spend holidays with Mr. Chatichai 's family ./.
det(deals-3, The-1)
compound(deals-3, oil-2)
nsubjpass(smoothed-5, deals-3)
auxpass(smoothed-5, were-4)
root(ROOT-0, smoothed-5)
case(ties-12, by-6)
compound(Chatichai-8, Mr.-7)
nmod:poss(ties-12, Chatichai-8)
case(Chatichai-8, 's-9)
amod(ties-12, close-10)
amod(ties-12, personal-11)
nmod:agent(smoothed-5, ties-12)
case(Yamani-19, with-13)
amod(Yamani-19, then-Saudi-14)
compound(Yamani-19, Oil-15)
compound(Yamani-19, Minister-16)
compound(Yamani-19, Ahmed-17)
compound(Yamani-19, Zaki-18)
nmod:with(ties-12, Yamani-19)
nsubj(neighbor-25, Yamani-19)
punct(Yamani-19, ,-20)
ref(Yamani-19, who-21)
cop(neighbor-25, was-22)
det(neighbor-25, a-23)
amod(neighbor-25, former-24)
acl:relcl(Yamani-19, neighbor-25)
case(Switzerland-27, in-26)
nmod:in(neighbor-25, Switzerland-27)
punct(Yamani-19, ,-28)
cc(Yamani-19, and-29)
nmod:poss(son-31, whose-30)
nsubj(used-32, son-31)
nsubj:xsubj(spend-34, son-31)
nmod:with(ties-12, used-32)
conj:and(Yamani-19, used-32)
nsubj(neighbor-25, used-32)
mark(spend-34, to-33)
xcomp(used-32, spend-34)
dobj(spend-34, holidays-35)
case(family-40, with-36)
compound(Chatichai-38, Mr.-37)
nmod:poss(family-40, Chatichai-38)
case(Chatichai-38, 's-39)
nmod:with(spend-34, family-40)
punct(smoothed-5, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#deals

smooth :: The statesmen finally smoothed out the project by deciding to raise an additional billion dollars with a tax on natural gas ./.
det(statesmen-2, The-1)
nsubj(smoothed-4, statesmen-2)
advmod(smoothed-4, finally-3)
root(ROOT-0, smoothed-4)
case(project-7, out-5)
det(project-7, the-6)
nmod:out(smoothed-4, project-7)
mark(deciding-9, by-8)
advcl(smoothed-4, deciding-9)
mark(raise-11, to-10)
xcomp(deciding-9, raise-11)
det(dollars-15, an-12)
amod(dollars-15, additional-13)
nummod(dollars-15, billion-14)
dobj(raise-11, dollars-15)
case(tax-18, with-16)
det(tax-18, a-17)
nmod:with(raise-11, tax-18)
case(gas-21, on-19)
amod(gas-21, natural-20)
nmod:on(tax-18, gas-21)
punct(smoothed-4, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#statesmen

smooth :: Noting that the market remains wary of the central banks , Jack Kessler , head of New York foreign-exchange operations for Chase Manhattan Bank , said: `` The key question is: Have the central banks been in to push the dollar down or smooth trading out ? ''/''
advcl(said-26, Noting-1)
mark(remains-5, that-2)
det(market-4, the-3)
nsubj(remains-5, market-4)
ccomp(Noting-1, remains-5)
xcomp(remains-5, wary-6)
case(banks-10, of-7)
det(banks-10, the-8)
amod(banks-10, central-9)
nmod:of(wary-6, banks-10)
punct(said-26, ,-11)
compound(Kessler-13, Jack-12)
nsubj(said-26, Kessler-13)
punct(Kessler-13, ,-14)
appos(Kessler-13, head-15)
case(operations-20, of-16)
compound(operations-20, New-17)
compound(operations-20, York-18)
compound(operations-20, foreign-exchange-19)
nmod:of(head-15, operations-20)
case(Bank-24, for-21)
compound(Bank-24, Chase-22)
compound(Bank-24, Manhattan-23)
nmod:for(head-15, Bank-24)
punct(Kessler-13, ,-25)
root(ROOT-0, said-26)
punct(said-26, :-27)
punct(said-26, ``-28)
det(question-31, The-29)
amod(question-31, key-30)
nsubj(is-32, question-31)
xcomp(said-26, is-32)
punct(is-32, :-33)
aux(push-41, Have-34)
det(banks-37, the-35)
amod(banks-37, central-36)
nsubj(push-41, banks-37)
cop(push-41, been-38)
mark(push-41, in-39)
mark(push-41, to-40)
parataxis(is-32, push-41)
det(dollar-43, the-42)
dobj(push-41, dollar-43)
advmod(push-41, down-44)
cc(down-44, or-45)
amod(trading-47, smooth-46)
advmod(push-41, trading-47)
conj:or(down-44, trading-47)
advmod(down-44, out-48)
punct(push-41, ?-49)
punct(said-26, ''-50)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: smooth#trading

smooth :: Even if the return to seasonals helps smooth month-to-month carry-overs from numbers that slipped through the cracks or were in error , there are still plenty of other items to complicate the trade series ./.
advmod(helps-7, Even-1)
mark(helps-7, if-2)
det(return-4, the-3)
nsubj(helps-7, return-4)
case(seasonals-6, to-5)
nmod:to(return-4, seasonals-6)
advcl(are-24, helps-7)
xcomp(helps-7, smooth-8)
amod(carry-overs-10, month-to-month-9)
dobj(smooth-8, carry-overs-10)
case(numbers-12, from-11)
nmod:from(smooth-8, numbers-12)
nsubj(slipped-14, numbers-12)
ref(numbers-12, that-13)
acl:relcl(numbers-12, slipped-14)
case(cracks-17, through-15)
det(cracks-17, the-16)
nmod:through(slipped-14, cracks-17)
cc(slipped-14, or-18)
cop(error-21, were-19)
case(error-21, in-20)
acl:relcl(numbers-12, error-21)
conj:or(slipped-14, error-21)
punct(are-24, ,-22)
expl(are-24, there-23)
root(ROOT-0, are-24)
advmod(plenty-26, still-25)
xcomp(are-24, plenty-26)
case(items-29, of-27)
amod(items-29, other-28)
nmod:of(plenty-26, items-29)
mark(complicate-31, to-30)
xcomp(plenty-26, complicate-31)
det(series-34, the-32)
compound(series-34, trade-33)
dobj(complicate-31, series-34)
punct(are-24, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#carry-overs

smooth :: Some traders said that the West German central bank was divesting itself of some of its U.S. government securities as a means of reducing its foreign reserves , swollen by more than two years of periodic interventions to smooth out the dollar 's decline ./.
det(traders-2, Some-1)
nsubj(said-3, traders-2)
root(ROOT-0, said-3)
mark(divesting-11, that-4)
det(bank-9, the-5)
amod(German-7, West-6)
amod(bank-9, German-7)
amod(bank-9, central-8)
nsubj(divesting-11, bank-9)
aux(divesting-11, was-10)
ccomp(said-3, divesting-11)
dobj(divesting-11, itself-12)
case(some-14, of-13)
nmod:of(divesting-11, some-14)
case(securities-19, of-15)
nmod:poss(securities-19, its-16)
compound(securities-19, U.S.-17)
compound(securities-19, government-18)
nmod:of(some-14, securities-19)
case(means-22, as-20)
det(means-22, a-21)
nmod:as(divesting-11, means-22)
mark(reducing-24, of-23)
acl(means-22, reducing-24)
nmod:poss(reserves-27, its-25)
amod(reserves-27, foreign-26)
dobj(reducing-24, reserves-27)
punct(divesting-11, ,-28)
xcomp(divesting-11, swollen-29)
case(years-34, by-30)
advmod(two-33, more-31)
mwe(more-31, than-32)
nummod(years-34, two-33)
nmod:by(swollen-29, years-34)
case(interventions-37, of-35)
amod(interventions-37, periodic-36)
nmod:of(years-34, interventions-37)
mark(smooth-39, to-38)
acl(interventions-37, smooth-39)
compound:prt(smooth-39, out-40)
det(dollar-42, the-41)
nmod:poss(decline-44, dollar-42)
case(dollar-42, 's-43)
dobj(smooth-39, decline-44)
punct(said-3, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#decline

smooth :: The two firms retained management consultant Bradford Hildebrandt to analyze the compatibility of the firms and smooth the transition ./.
det(firms-3, The-1)
nummod(firms-3, two-2)
nsubj(retained-4, firms-3)
root(ROOT-0, retained-4)
compound(Hildebrandt-8, management-5)
compound(Hildebrandt-8, consultant-6)
compound(Hildebrandt-8, Bradford-7)
dobj(retained-4, Hildebrandt-8)
nsubj:xsubj(analyze-10, Hildebrandt-8)
mark(analyze-10, to-9)
xcomp(retained-4, analyze-10)
det(compatibility-12, the-11)
dobj(analyze-10, compatibility-12)
case(firms-15, of-13)
det(firms-15, the-14)
nmod:of(compatibility-12, firms-15)
cc(analyze-10, and-16)
xcomp(retained-4, smooth-17)
conj:and(analyze-10, smooth-17)
det(transition-19, the-18)
dobj(smooth-17, transition-19)
punct(retained-4, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#transition

smooth :: Dealers reported that the Bank of England intervened to smooth the pound 's rise as it hit an intraday high of $ 1.8850 ./.
nsubj(reported-2, Dealers-1)
root(ROOT-0, reported-2)
mark(intervened-8, that-3)
det(Bank-5, the-4)
nsubj(intervened-8, Bank-5)
nsubj:xsubj(smooth-10, Bank-5)
case(England-7, of-6)
nmod:of(Bank-5, England-7)
ccomp(reported-2, intervened-8)
mark(smooth-10, to-9)
xcomp(intervened-8, smooth-10)
det(pound-12, the-11)
nmod:poss(rise-14, pound-12)
case(pound-12, 's-13)
dobj(smooth-10, rise-14)
mark(hit-17, as-15)
nsubj(hit-17, it-16)
advcl(smooth-10, hit-17)
det(intraday-19, an-18)
dobj(hit-17, intraday-19)
amod(intraday-19, high-20)
case(1.8850-23, of-21)
dep(1.8850-23, $-22)
nmod:of(high-20, 1.8850-23)
punct(reported-2, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#rise

smooth :: What many French voters hope is that they will be electing a moderate president whose wilder tendencies have been smoothed by two uncomfortable years of rubbing shoulders with Mr. Chirac and the free market ./.
dobj(hope-5, What-1)
amod(voters-4, many-2)
amod(voters-4, French-3)
nsubj(hope-5, voters-4)
csubj(is-6, hope-5)
root(ROOT-0, is-6)
mark(electing-11, that-7)
nsubj(electing-11, they-8)
aux(electing-11, will-9)
aux(electing-11, be-10)
ccomp(is-6, electing-11)
det(president-14, a-12)
amod(president-14, moderate-13)
dobj(electing-11, president-14)
nmod:poss(tendencies-17, president-14)
ref(president-14, whose-15)
compound(tendencies-17, wilder-16)
nsubjpass(smoothed-20, tendencies-17)
aux(smoothed-20, have-18)
auxpass(smoothed-20, been-19)
acl:relcl(president-14, smoothed-20)
case(years-24, by-21)
nummod(years-24, two-22)
amod(years-24, uncomfortable-23)
nmod:agent(smoothed-20, years-24)
mark(rubbing-26, of-25)
acl(years-24, rubbing-26)
dobj(rubbing-26, shoulders-27)
case(Chirac-30, with-28)
compound(Chirac-30, Mr.-29)
nmod:with(rubbing-26, Chirac-30)
cc(Chirac-30, and-31)
det(market-34, the-32)
amod(market-34, free-33)
nmod:with(rubbing-26, market-34)
conj:and(Chirac-30, market-34)
punct(is-6, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#tendencies

smooth :: In Popular Front Hollywood it smoothed one 's career to evince a diffuse `` progressivism . ''/''
case(Hollywood-4, In-1)
amod(Hollywood-4, Popular-2)
amod(Hollywood-4, Front-3)
nmod:in(smoothed-6, Hollywood-4)
nsubj(smoothed-6, it-5)
root(ROOT-0, smoothed-6)
nmod:poss(career-9, one-7)
case(one-7, 's-8)
dobj(smoothed-6, career-9)
mark(evince-11, to-10)
advcl(smoothed-6, evince-11)
det(progressivism-15, a-12)
amod(progressivism-15, diffuse-13)
punct(progressivism-15, ``-14)
dobj(evince-11, progressivism-15)
punct(smoothed-6, .-16)
punct(smoothed-6, ''-17)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: smooth#career

smooth :: Typically , he says , a company that discovers irregularities asks the offending executive to resign without a pension or severance pay , and the affair is quietly smoothed over ./.
advmod(asks-11, Typically-1)
punct(says-4, ,-2)
nsubj(says-4, he-3)
parataxis(asks-11, says-4)
punct(says-4, ,-5)
det(company-7, a-6)
nsubj(discovers-9, company-7)
nsubj(asks-11, company-7)
ref(company-7, that-8)
acl:relcl(company-7, discovers-9)
dobj(discovers-9, irregularities-10)
root(ROOT-0, asks-11)
det(executive-14, the-12)
amod(executive-14, offending-13)
dobj(asks-11, executive-14)
nsubj:xsubj(resign-16, executive-14)
mark(resign-16, to-15)
xcomp(asks-11, resign-16)
case(pension-19, without-17)
det(pension-19, a-18)
nmod:without(resign-16, pension-19)
cc(pension-19, or-20)
compound(pay-22, severance-21)
nmod:without(resign-16, pay-22)
conj:or(pension-19, pay-22)
punct(asks-11, ,-23)
cc(asks-11, and-24)
det(affair-26, the-25)
nsubjpass(smoothed-29, affair-26)
auxpass(smoothed-29, is-27)
advmod(smoothed-29, quietly-28)
conj:and(asks-11, smoothed-29)
compound:prt(smoothed-29, over-30)
punct(asks-11, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#affair

smooth :: One option being considered: Hire a clinic doctor as the company 's medical director in Wenatchee , partly to smooth relations ./.
nummod(option-2, One-1)
nsubjpass(considered-4, option-2)
auxpass(considered-4, being-3)
root(ROOT-0, considered-4)
punct(considered-4, :-5)
parataxis(considered-4, Hire-6)
det(doctor-9, a-7)
compound(doctor-9, clinic-8)
dobj(Hire-6, doctor-9)
nsubj:xsubj(smooth-21, doctor-9)
case(director-15, as-10)
det(company-12, the-11)
nmod:poss(director-15, company-12)
case(company-12, 's-13)
amod(director-15, medical-14)
nmod:as(Hire-6, director-15)
case(Wenatchee-17, in-16)
nmod:in(director-15, Wenatchee-17)
punct(Hire-6, ,-18)
advmod(smooth-21, partly-19)
mark(smooth-21, to-20)
xcomp(Hire-6, smooth-21)
dobj(smooth-21, relations-22)
punct(considered-4, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#relations

smooth :: And at Mellon Bank Corp . , a followership workshop helped smooth a major restructuring in the corporate banking department ./.
cc(Corp-5, And-1)
case(Corp-5, at-2)
compound(Corp-5, Mellon-3)
compound(Corp-5, Bank-4)
root(ROOT-0, Corp-5)
punct(Corp-5, .-6)
punct(helped-5, ,-1)
det(workshop-4, a-2)
compound(workshop-4, followership-3)
nsubj(helped-5, workshop-4)
root(ROOT-0, helped-5)
ccomp(helped-5, smooth-6)
det(restructuring-9, a-7)
amod(restructuring-9, major-8)
dobj(smooth-6, restructuring-9)
case(department-14, in-10)
det(department-14, the-11)
amod(department-14, corporate-12)
compound(department-14, banking-13)
nmod:in(restructuring-9, department-14)
punct(helped-5, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#restructuring

smooth :: Edouard Balladur , finance minister of France , who in the adjoining columns today sets out his thoughts on smoothing the recent disruptions in the world economic system -LRB- see: `` Rebuilding an International Monetary System -- - Three Possible Approaches '' -- WSJ Feb. 23 , 1988 -RRB- ./.
compound(Balladur-2, Edouard-1)
root(ROOT-0, Balladur-2)
nsubj(sets-15, Balladur-2)
punct(Balladur-2, ,-3)
compound(minister-5, finance-4)
appos(Balladur-2, minister-5)
case(France-7, of-6)
nmod:of(minister-5, France-7)
punct(Balladur-2, ,-8)
ref(Balladur-2, who-9)
case(columns-13, in-10)
det(columns-13, the-11)
amod(columns-13, adjoining-12)
nmod:in(sets-15, columns-13)
nmod:tmod(sets-15, today-14)
acl:relcl(Balladur-2, sets-15)
compound:prt(sets-15, out-16)
nmod:poss(thoughts-18, his-17)
dobj(sets-15, thoughts-18)
mark(smoothing-20, on-19)
advcl(sets-15, smoothing-20)
det(disruptions-23, the-21)
amod(disruptions-23, recent-22)
dobj(smoothing-20, disruptions-23)
case(system-28, in-24)
det(system-28, the-25)
compound(system-28, world-26)
amod(system-28, economic-27)
nmod:in(disruptions-23, system-28)
punct(see-30, -LRB--29)
dep(Balladur-2, see-30)
punct(see-30, :-31)
punct(see-30, ``-32)
dep(see-30, Rebuilding-33)
det(System-37, an-34)
amod(System-37, International-35)
amod(System-37, Monetary-36)
dobj(Rebuilding-33, System-37)
punct(System-37, ---38)
punct(Approaches-42, --39)
nummod(Approaches-42, Three-40)
amod(Approaches-42, Possible-41)
dep(System-37, Approaches-42)
punct(Approaches-42, ''-43)
punct(Approaches-42, ---44)
compound(Feb.-46, WSJ-45)
dep(Approaches-42, Feb.-46)
nummod(Feb.-46, 23-47)
punct(Feb.-46, ,-48)
nummod(Feb.-46, 1988-49)
punct(Approaches-42, -RRB--50)
punct(see-30, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#disruptions

smooth :: Though all the rough spots have n't been smoothed yet , the city 's already had sufficient success to serve as a model for Liverpool , Newcastle and those other northerners rich in little but the past ./.
mark(smoothed-9, Though-1)
det:predet(spots-5, all-2)
det(spots-5, the-3)
amod(spots-5, rough-4)
nsubjpass(smoothed-9, spots-5)
aux(smoothed-9, have-6)
neg(smoothed-9, n't-7)
auxpass(smoothed-9, been-8)
advcl(had-16, smoothed-9)
advmod(smoothed-9, yet-10)
punct(had-16, ,-11)
det(city-13, the-12)
nsubj(had-16, city-13)
case(city-13, 's-14)
advmod(had-16, already-15)
root(ROOT-0, had-16)
amod(success-18, sufficient-17)
dobj(had-16, success-18)
mark(serve-20, to-19)
acl(success-18, serve-20)
case(model-23, as-21)
det(model-23, a-22)
nmod:as(serve-20, model-23)
case(Liverpool-25, for-24)
nmod:for(model-23, Liverpool-25)
punct(Liverpool-25, ,-26)
nmod:for(model-23, Newcastle-27)
conj:and(Liverpool-25, Newcastle-27)
cc(Liverpool-25, and-28)
det(northerners-31, those-29)
amod(northerners-31, other-30)
nmod:for(model-23, northerners-31)
conj:and(Liverpool-25, northerners-31)
amod(northerners-31, rich-32)
case(little-34, in-33)
nmod:in(rich-32, little-34)
cc(had-16, but-35)
det(past-37, the-36)
conj:but(had-16, past-37)
punct(had-16, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#spots

smooth :: Vice Chairman William J. McDonough , a former State Department official and now the peacekeeper between First Chicago 's two executive camps , smooths it all over this way: `` A traumatic decision in 1986 became a no-brainer in 1987 . ''/''
compound(McDonough-5, Vice-1)
compound(McDonough-5, Chairman-2)
compound(McDonough-5, William-3)
compound(McDonough-5, J.-4)
nsubj(smooths-24, McDonough-5)
punct(McDonough-5, ,-6)
det(official-11, a-7)
amod(official-11, former-8)
compound(official-11, State-9)
compound(official-11, Department-10)
appos(McDonough-5, official-11)
cc(official-11, and-12)
advmod(peacekeeper-15, now-13)
det(peacekeeper-15, the-14)
appos(McDonough-5, peacekeeper-15)
conj:and(official-11, peacekeeper-15)
case(camps-22, between-16)
amod(Chicago-18, First-17)
nmod:poss(camps-22, Chicago-18)
case(Chicago-18, 's-19)
nummod(camps-22, two-20)
amod(camps-22, executive-21)
nmod:between(peacekeeper-15, camps-22)
punct(McDonough-5, ,-23)
root(ROOT-0, smooths-24)
dobj(smooths-24, it-25)
dep(way-29, all-26)
case(way-29, over-27)
det(way-29, this-28)
nmod:over(smooths-24, way-29)
punct(way-29, :-30)
punct(way-29, ``-31)
det(decision-34, A-32)
amod(decision-34, traumatic-33)
nsubj(became-37, decision-34)
case(1986-36, in-35)
nmod:in(decision-34, 1986-36)
dep(way-29, became-37)
det(no-brainer-39, a-38)
xcomp(became-37, no-brainer-39)
case(1987-41, in-40)
nmod:in(became-37, 1987-41)
punct(smooths-24, .-42)
punct(smooths-24, ''-43)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: smooth#it

smooth :: In effect , the deficit has helped smooth out the wide swings in U.S. demand ./.
case(effect-2, In-1)
nmod:in(helped-7, effect-2)
punct(helped-7, ,-3)
det(deficit-5, the-4)
nsubj(helped-7, deficit-5)
aux(helped-7, has-6)
root(ROOT-0, helped-7)
ccomp(helped-7, smooth-8)
compound:prt(smooth-8, out-9)
det(swings-12, the-10)
amod(swings-12, wide-11)
dobj(smooth-8, swings-12)
case(demand-15, in-13)
compound(demand-15, U.S.-14)
nmod:in(swings-12, demand-15)
punct(helped-7, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#swings

smooth :: That 's partly because Iowa counties compute assessed valuation on a five-year rolling average that smoothes out peaks and valleys ./.
root(ROOT-0, That-1)
acl(That-1, 's-2)
advmod(compute-7, partly-3)
mark(compute-7, because-4)
compound(counties-6, Iowa-5)
nsubj(compute-7, counties-6)
advcl('s-2, compute-7)
amod(valuation-9, assessed-8)
dobj(compute-7, valuation-9)
case(average-14, on-10)
det(average-14, a-11)
amod(average-14, five-year-12)
amod(average-14, rolling-13)
nmod:on(compute-7, average-14)
nsubj(smoothes-16, average-14)
ref(average-14, that-15)
acl:relcl(average-14, smoothes-16)
compound:prt(smoothes-16, out-17)
dobj(smoothes-16, peaks-18)
cc(peaks-18, and-19)
dobj(smoothes-16, valleys-20)
conj:and(peaks-18, valleys-20)
punct(That-1, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#peaks

smooth :: At the same time , Coleco 's diversification plan -- which industry analysts approve of as a way to smooth out the company 's ups and down of the past -- has been disappointing so far ./.
case(time-4, At-1)
det(time-4, the-2)
amod(time-4, same-3)
nmod:at(disappointing-34, time-4)
punct(disappointing-34, ,-5)
nmod:poss(plan-9, Coleco-6)
case(Coleco-6, 's-7)
compound(plan-9, diversification-8)
dobj(approve-14, plan-9)
nsubj(disappointing-34, plan-9)
punct(plan-9, ---10)
ref(plan-9, which-11)
compound(analysts-13, industry-12)
nsubj(approve-14, analysts-13)
acl:relcl(plan-9, approve-14)
case(way-18, of-15)
case(way-18, as-16)
det(way-18, a-17)
nmod:of(approve-14, way-18)
mark(smooth-20, to-19)
acl(way-18, smooth-20)
compound:prt(smooth-20, out-21)
det(company-23, the-22)
nmod:poss(ups-25, company-23)
case(company-23, 's-24)
dobj(smooth-20, ups-25)
cc(approve-14, and-26)
acl:relcl(plan-9, down-27)
conj:and(approve-14, down-27)
case(past-30, of-28)
det(past-30, the-29)
nmod:of(down-27, past-30)
punct(plan-9, ---31)
aux(disappointing-34, has-32)
cop(disappointing-34, been-33)
root(ROOT-0, disappointing-34)
advmod(far-36, so-35)
advmod(disappointing-34, far-36)
punct(disappointing-34, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#ups

smooth :: Settlement of the dispute will smooth out a troublesome source of friction in U.S.-Canadian trade ./.
nsubj(smooth-6, Settlement-1)
case(dispute-4, of-2)
det(dispute-4, the-3)
nmod:of(Settlement-1, dispute-4)
aux(smooth-6, will-5)
root(ROOT-0, smooth-6)
compound:prt(smooth-6, out-7)
det(source-10, a-8)
amod(source-10, troublesome-9)
dobj(smooth-6, source-10)
case(friction-12, of-11)
nmod:of(source-10, friction-12)
case(trade-15, in-13)
amod(trade-15, U.S.-Canadian-14)
nmod:in(source-10, trade-15)
punct(smooth-6, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#friction

smooth :: An Ortho spokeswoman said that since January -- when the Journal of the American Medical Association suggested Retin-A , on the market 17 years to treat acne , could help smooth wrinkles -- sales of the 0.05 % Retin-A have risen 40 % in the U.S ./.
det(spokeswoman-3, An-1)
compound(spokeswoman-3, Ortho-2)
nsubj(said-4, spokeswoman-3)
root(ROOT-0, said-4)
mark(help-30, that-5)
case(January-7, since-6)
nmod:since(help-30, January-7)
punct(suggested-17, ---8)
advmod(suggested-17, when-9)
det(Journal-11, the-10)
nsubj(suggested-17, Journal-11)
case(Association-16, of-12)
det(Association-16, the-13)
compound(Association-16, American-14)
compound(Association-16, Medical-15)
nmod:of(Journal-11, Association-16)
parataxis(help-30, suggested-17)
dobj(suggested-17, Retin-A-18)
punct(suggested-17, ,-19)
case(market-22, on-20)
det(market-22, the-21)
nmod:on(suggested-17, market-22)
nummod(years-24, 17-23)
nmod:tmod(market-22, years-24)
mark(treat-26, to-25)
acl(years-24, treat-26)
dobj(treat-26, acne-27)
punct(suggested-17, ,-28)
aux(help-30, could-29)
ccomp(said-4, help-30)
ccomp(help-30, smooth-31)
dobj(smooth-31, wrinkles-32)
punct(wrinkles-32, ---33)
nsubj(risen-41, sales-34)
case(Retin-A-39, of-35)
det(Retin-A-39, the-36)
compound(%-38, 0.05-37)
amod(Retin-A-39, %-38)
nmod:of(sales-34, Retin-A-39)
aux(risen-41, have-40)
dep(wrinkles-32, risen-41)
nummod(%-43, 40-42)
dobj(risen-41, %-43)
case(U.S-46, in-44)
det(U.S-46, the-45)
nmod:in(risen-41, U.S-46)
punct(said-4, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#wrinkles

smooth :: While Abideen reminisces , Abegi 's son smooths the sand to make a table and serves the simple , traditional meal that is all their hard life affords: a flat cake of mixed grains and a drink made of crumbled goat cheese , crushed dates and water ./.
mark(smooths-8, While-1)
compound(reminisces-3, Abideen-2)
nsubj(smooths-8, reminisces-3)
nsubj(serves-16, reminisces-3)
punct(reminisces-3, ,-4)
nmod:poss(son-7, Abegi-5)
case(Abegi-5, 's-6)
appos(reminisces-3, son-7)
root(ROOT-0, smooths-8)
det(sand-10, the-9)
dobj(smooths-8, sand-10)
mark(make-12, to-11)
advcl(smooths-8, make-12)
det(table-14, a-13)
dobj(make-12, table-14)
cc(smooths-8, and-15)
conj:and(smooths-8, serves-16)
det(meal-21, the-17)
amod(meal-21, simple-18)
punct(meal-21, ,-19)
amod(meal-21, traditional-20)
nsubj(life-27, meal-21)
nsubj(affords-28, meal-21)
ref(meal-21, that-22)
cop(life-27, is-23)
det:predet(life-27, all-24)
nmod:poss(life-27, their-25)
amod(life-27, hard-26)
acl:relcl(meal-21, life-27)
ccomp(serves-16, affords-28)
punct(affords-28, :-29)
det(cake-32, a-30)
amod(cake-32, flat-31)
dobj(affords-28, cake-32)
case(grains-35, of-33)
amod(grains-35, mixed-34)
nmod:of(cake-32, grains-35)
cc(cake-32, and-36)
det(drink-38, a-37)
dobj(affords-28, drink-38)
conj:and(cake-32, drink-38)
acl(drink-38, made-39)
case(cheese-43, of-40)
amod(cheese-43, crumbled-41)
compound(cheese-43, goat-42)
nmod:of(made-39, cheese-43)
punct(cake-32, ,-44)
amod(dates-46, crushed-45)
dobj(affords-28, dates-46)
conj:and(cake-32, dates-46)
cc(cake-32, and-47)
dobj(affords-28, water-48)
conj:and(cake-32, water-48)
punct(smooths-8, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#sand

smooth :: Its path can be changed or its speed accelerated by players energetically sweeping in front of it , smoothing the ice ./.
nmod:poss(path-2, Its-1)
nsubjpass(changed-5, path-2)
aux(changed-5, can-3)
auxpass(changed-5, be-4)
root(ROOT-0, changed-5)
cc(changed-5, or-6)
nmod:poss(speed-8, its-7)
conj:or(changed-5, speed-8)
acl(speed-8, accelerated-9)
case(players-11, by-10)
nmod:by(accelerated-9, players-11)
advmod(sweeping-13, energetically-12)
acl(players-11, sweeping-13)
case(it-17, in-14)
mwe(in-14, front-15)
mwe(in-14, of-16)
nmod:in_front_of(sweeping-13, it-17)
punct(changed-5, ,-18)
advcl(changed-5, smoothing-19)
det(ice-21, the-20)
dobj(smoothing-19, ice-21)
punct(changed-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#ice

smooth :: But however microscopically small the particle size and smooth the consistency , this product is still 100 % egg white or milk protein ./.
cc(white-20, But-1)
advmod(small-4, however-2)
advmod(small-4, microscopically-3)
amod(size-7, small-4)
det(size-7, the-5)
compound(size-7, particle-6)
dep(white-20, size-7)
cc(size-7, and-8)
conj:and(size-7, smooth-9)
dep(white-20, smooth-9)
det(consistency-11, the-10)
dobj(smooth-9, consistency-11)
punct(white-20, ,-12)
det(product-14, this-13)
nsubj(white-20, product-14)
cop(white-20, is-15)
advmod(white-20, still-16)
compound(%-18, 100-17)
dep(white-20, %-18)
nmod:npmod(white-20, egg-19)
root(ROOT-0, white-20)
cc(white-20, or-21)
compound(protein-23, milk-22)
conj:or(white-20, protein-23)
punct(white-20, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#consistency

smooth :: Last month , a report in the Journal of the American Medical Association suggested that Johnson & Johnson 's potent prescription cream , long used to treat teen-age acne , could help smooth sun-aged skin ./.
amod(month-2, Last-1)
nmod:tmod(suggested-14, month-2)
punct(suggested-14, ,-3)
det(report-5, a-4)
nsubj(suggested-14, report-5)
case(Journal-8, in-6)
det(Journal-8, the-7)
nmod:in(report-5, Journal-8)
case(Association-13, of-9)
det(Association-13, the-10)
compound(Association-13, American-11)
compound(Association-13, Medical-12)
nmod:of(Journal-8, Association-13)
root(ROOT-0, suggested-14)
mark(help-32, that-15)
nmod:poss(cream-22, Johnson-16)
cc(Johnson-16, &-17)
conj:&(Johnson-16, Johnson-18)
nmod:poss(cream-22, Johnson-18)
case(Johnson-16, 's-19)
amod(cream-22, potent-20)
compound(cream-22, prescription-21)
nsubj(help-32, cream-22)
punct(cream-22, ,-23)
advmod(used-25, long-24)
acl(cream-22, used-25)
mark(treat-27, to-26)
xcomp(used-25, treat-27)
amod(acne-29, teen-age-28)
dobj(treat-27, acne-29)
punct(cream-22, ,-30)
aux(help-32, could-31)
ccomp(suggested-14, help-32)
ccomp(help-32, smooth-33)
amod(skin-35, sun-aged-34)
dobj(smooth-33, skin-35)
punct(suggested-14, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: smooth#skin

step :: Olivetti , the Italian electronics concern , stepped in and rescued the company by acquiring 79 % of the stock ./.
nsubj(stepped-8, Olivetti-1)
nsubj(rescued-11, Olivetti-1)
punct(Olivetti-1, ,-2)
det(concern-6, the-3)
amod(concern-6, Italian-4)
compound(concern-6, electronics-5)
appos(Olivetti-1, concern-6)
punct(Olivetti-1, ,-7)
root(ROOT-0, stepped-8)
nmod(stepped-8, in-9)
cc(stepped-8, and-10)
conj:and(stepped-8, rescued-11)
det(company-13, the-12)
dobj(rescued-11, company-13)
mark(acquiring-15, by-14)
advcl(rescued-11, acquiring-15)
nummod(%-17, 79-16)
dobj(acquiring-15, %-17)
case(stock-20, of-18)
det(stock-20, the-19)
nmod:of(%-17, stock-20)
punct(stepped-8, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#olivetti

step :: Who will now step into this maw is a question the company does n't have much time to puzzle over ./.
nsubj(step-4, Who-1)
aux(step-4, will-2)
advmod(step-4, now-3)
csubj(question-10, step-4)
case(maw-7, into-5)
det(maw-7, this-6)
nmod:into(step-4, maw-7)
cop(question-10, is-8)
det(question-10, a-9)
root(ROOT-0, question-10)
det(company-12, the-11)
nsubj(have-15, company-12)
aux(have-15, does-13)
neg(have-15, n't-14)
acl:relcl(question-10, have-15)
amod(time-17, much-16)
dobj(have-15, time-17)
mark(puzzle-19, to-18)
acl(time-17, puzzle-19)
compound:prt(puzzle-19, over-20)
punct(question-10, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#who

step :: Attorneys said the creditors recently voted 12-0 , with one abstention , to ask Mr. Toren to step down , but Mr. Toren said his decision was strictly his idea ./.
nsubj(said-2, Attorneys-1)
root(ROOT-0, said-2)
det(creditors-4, the-3)
nsubj(voted-6, creditors-4)
advmod(voted-6, recently-5)
ccomp(said-2, voted-6)
dobj(voted-6, 12-0-7)
nsubj:xsubj(ask-14, 12-0-7)
punct(voted-6, ,-8)
case(abstention-11, with-9)
nummod(abstention-11, one-10)
nmod:with(voted-6, abstention-11)
punct(voted-6, ,-12)
mark(ask-14, to-13)
xcomp(voted-6, ask-14)
compound(Toren-16, Mr.-15)
dobj(ask-14, Toren-16)
nsubj:xsubj(step-18, Toren-16)
mark(step-18, to-17)
xcomp(ask-14, step-18)
compound:prt(step-18, down-19)
punct(voted-6, ,-20)
cc(voted-6, but-21)
compound(Toren-23, Mr.-22)
nsubj(said-24, Toren-23)
ccomp(said-2, said-24)
conj:but(voted-6, said-24)
nmod:poss(decision-26, his-25)
nsubj(idea-30, decision-26)
cop(idea-30, was-27)
advmod(idea-30, strictly-28)
nmod:poss(idea-30, his-29)
ccomp(said-24, idea-30)
punct(said-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#toren

step :: We told you the truth and we stepped up to those issues . ''/''
nsubj(told-2, We-1)
root(ROOT-0, told-2)
dobj(told-2, you-3)
det(truth-5, the-4)
dobj(told-2, truth-5)
cc(truth-5, and-6)
nsubj(stepped-8, we-7)
dobj(told-2, stepped-8)
conj:and(truth-5, stepped-8)
advmod(stepped-8, up-9)
case(issues-12, to-10)
det(issues-12, those-11)
nmod:to(up-9, issues-12)
punct(told-2, .-13)
punct(told-2, ''-14)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: step#we

step :: West Point-Pepperell Inc. stepped up its attack on suitor William Farley with a lawsuit that seeks to block him from taking over the company ./.
compound(Inc.-3, West-1)
compound(Inc.-3, Point-Pepperell-2)
nsubj(stepped-4, Inc.-3)
root(ROOT-0, stepped-4)
compound:prt(stepped-4, up-5)
nmod:poss(attack-7, its-6)
dobj(stepped-4, attack-7)
case(Farley-11, on-8)
compound(Farley-11, suitor-9)
compound(Farley-11, William-10)
nmod:on(attack-7, Farley-11)
case(lawsuit-14, with-12)
det(lawsuit-14, a-13)
nmod:with(stepped-4, lawsuit-14)
nsubj(seeks-16, lawsuit-14)
nsubj:xsubj(block-18, lawsuit-14)
ref(lawsuit-14, that-15)
acl:relcl(lawsuit-14, seeks-16)
mark(block-18, to-17)
xcomp(seeks-16, block-18)
dobj(block-18, him-19)
mark(taking-21, from-20)
advcl(block-18, taking-21)
compound:prt(taking-21, over-22)
det(company-24, the-23)
dobj(taking-21, company-24)
punct(stepped-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#attack

step :: The management group backed by Reliance is led by J. Livingston Kosberg , the company 's former chairman , who stepped down this week to concentrate on the proposed recapitalization ./.
det(group-3, The-1)
compound(group-3, management-2)
nsubjpass(led-8, group-3)
acl(group-3, backed-4)
case(Reliance-6, by-5)
nmod:by(backed-4, Reliance-6)
auxpass(led-8, is-7)
root(ROOT-0, led-8)
case(Kosberg-12, by-9)
compound(Kosberg-12, J.-10)
compound(Kosberg-12, Livingston-11)
nmod:agent(led-8, Kosberg-12)
nsubj(stepped-21, Kosberg-12)
nsubj:xsubj(concentrate-26, Kosberg-12)
punct(Kosberg-12, ,-13)
det(company-15, the-14)
nmod:poss(chairman-18, company-15)
case(company-15, 's-16)
amod(chairman-18, former-17)
appos(Kosberg-12, chairman-18)
punct(Kosberg-12, ,-19)
ref(Kosberg-12, who-20)
acl:relcl(Kosberg-12, stepped-21)
compound:prt(stepped-21, down-22)
det(week-24, this-23)
nmod:tmod(stepped-21, week-24)
mark(concentrate-26, to-25)
xcomp(stepped-21, concentrate-26)
case(recapitalization-30, on-27)
det(recapitalization-30, the-28)
amod(recapitalization-30, proposed-29)
nmod:on(concentrate-26, recapitalization-30)
punct(led-8, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#kosberg

step :: PS of New Hampshire stepped in after efforts by others to negotiate an agreement with MMWEC failed ./.
nsubj(stepped-5, PS-1)
case(Hampshire-4, of-2)
compound(Hampshire-4, New-3)
nmod:of(PS-1, Hampshire-4)
root(ROOT-0, stepped-5)
compound:prt(stepped-5, in-6)
case(efforts-8, after-7)
nmod:after(stepped-5, efforts-8)
case(others-10, by-9)
nmod:by(efforts-8, others-10)
mark(negotiate-12, to-11)
acl(efforts-8, negotiate-12)
det(agreement-14, an-13)
dobj(negotiate-12, agreement-14)
case(MMWEC-16, with-15)
nmod:with(agreement-14, MMWEC-16)
dep(stepped-5, failed-17)
punct(stepped-5, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#ps

step :: Mr. Kessler said: `` The market was so nervous and so short dollars that a panic set in and everybody started stepping over each other to buy their dollars back . ''/''
compound(Kessler-2, Mr.-1)
nsubj(said-3, Kessler-2)
root(ROOT-0, said-3)
punct(said-3, :-4)
punct(said-3, ``-5)
det(market-7, The-6)
nsubj(nervous-10, market-7)
cop(nervous-10, was-8)
advmod(nervous-10, so-9)
ccomp(said-3, nervous-10)
cc(nervous-10, and-11)
advmod(short-13, so-12)
amod(dollars-14, short-13)
ccomp(said-3, dollars-14)
conj:and(nervous-10, dollars-14)
dep(dollars-14, that-15)
det(panic-17, a-16)
dep(that-15, panic-17)
dep(panic-17, set-18)
compound:prt(set-18, in-19)
cc(set-18, and-20)
nsubj(started-22, everybody-21)
dep(panic-17, started-22)
conj:and(set-18, started-22)
xcomp(started-22, stepping-23)
case(other-26, over-24)
det(other-26, each-25)
nmod:over(stepping-23, other-26)
mark(buy-28, to-27)
xcomp(stepping-23, buy-28)
nmod:poss(dollars-30, their-29)
dobj(buy-28, dollars-30)
compound:prt(buy-28, back-31)
punct(said-3, .-32)
punct(said-3, ''-33)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: step#other

step :: Since Judge Feinberg was in office when the change was made , he was not covered by the restriction and could have remained chief judge until he reached age 70 , when chief judges are required to step down ./.
mark(office-6, Since-1)
compound(Feinberg-3, Judge-2)
nsubj(office-6, Feinberg-3)
cop(office-6, was-4)
case(office-6, in-5)
advcl(covered-16, office-6)
advmod(made-11, when-7)
det(change-9, the-8)
nsubjpass(made-11, change-9)
auxpass(made-11, was-10)
advcl(office-6, made-11)
punct(covered-16, ,-12)
nsubjpass(covered-16, he-13)
nsubjpass(remained-23, he-13)
auxpass(covered-16, was-14)
neg(covered-16, not-15)
root(ROOT-0, covered-16)
case(restriction-19, by-17)
det(restriction-19, the-18)
nmod:agent(covered-16, restriction-19)
cc(covered-16, and-20)
aux(remained-23, could-21)
aux(remained-23, have-22)
conj:and(covered-16, remained-23)
amod(judge-25, chief-24)
xcomp(remained-23, judge-25)
mark(reached-28, until-26)
nsubj(reached-28, he-27)
advcl(remained-23, reached-28)
dobj(reached-28, age-29)
nummod(age-29, 70-30)
punct(reached-28, ,-31)
advmod(required-36, when-32)
amod(judges-34, chief-33)
nsubjpass(required-36, judges-34)
nsubj:xsubj(step-38, judges-34)
auxpass(required-36, are-35)
advcl(reached-28, required-36)
mark(step-38, to-37)
xcomp(required-36, step-38)
compound:prt(step-38, down-39)
punct(covered-16, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#judges

step :: Last month , Judge Aguilar rejected a request by attorneys for Apple that he step aside because of his Hewlett-Packard connection ./.
amod(month-2, Last-1)
nmod:tmod(rejected-6, month-2)
punct(rejected-6, ,-3)
compound(Aguilar-5, Judge-4)
nsubj(rejected-6, Aguilar-5)
root(ROOT-0, rejected-6)
det(request-8, a-7)
dobj(rejected-6, request-8)
case(attorneys-10, by-9)
nmod:by(request-8, attorneys-10)
case(Apple-12, for-11)
nmod:for(request-8, Apple-12)
mark(step-15, that-13)
nsubj(step-15, he-14)
ccomp(request-8, step-15)
advmod(step-15, aside-16)
case(connection-21, because-17)
mwe(because-17, of-18)
nmod:poss(connection-21, his-19)
compound(connection-21, Hewlett-Packard-20)
nmod:because_of(step-15, connection-21)
punct(rejected-6, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#he

step :: The Democratic contender will step up attacks on Bush 's proposal to cut capital-gains taxes ./.
det(contender-3, The-1)
amod(contender-3, Democratic-2)
nsubj(step-5, contender-3)
aux(step-5, will-4)
root(ROOT-0, step-5)
compound:prt(step-5, up-6)
dobj(step-5, attacks-7)
case(proposal-11, on-8)
nmod:poss(proposal-11, Bush-9)
case(Bush-9, 's-10)
nmod:on(attacks-7, proposal-11)
mark(cut-13, to-12)
acl(proposal-11, cut-13)
amod(taxes-15, capital-gains-14)
dobj(cut-13, taxes-15)
punct(step-5, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#attacks

step :: My mission is to save the country , to establish a durable , irreversible democracy and to step down . ''/''
nmod:poss(mission-2, My-1)
nsubj(is-3, mission-2)
nsubj:xsubj(save-5, mission-2)
nsubj:xsubj(establish-10, mission-2)
nsubj:xsubj(step-18, mission-2)
root(ROOT-0, is-3)
mark(save-5, to-4)
xcomp(is-3, save-5)
det(country-7, the-6)
dobj(save-5, country-7)
punct(save-5, ,-8)
mark(establish-10, to-9)
xcomp(is-3, establish-10)
conj:and(save-5, establish-10)
det(democracy-15, a-11)
amod(democracy-15, durable-12)
punct(democracy-15, ,-13)
amod(democracy-15, irreversible-14)
dobj(establish-10, democracy-15)
cc(save-5, and-16)
mark(step-18, to-17)
xcomp(is-3, step-18)
conj:and(save-5, step-18)
compound:prt(step-18, down-19)
punct(is-3, .-20)
punct(is-3, ''-21)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: step#mission

step :: `` Compaq has stepped into the market and is arguably the leader in performance and functions for the price ./.
root(ROOT-0, ``-1)
nsubj(stepped-4, Compaq-2)
aux(stepped-4, has-3)
root(``-1, stepped-4)
case(market-7, into-5)
det(market-7, the-6)
nmod:into(stepped-4, market-7)
cc(stepped-4, and-8)
cop(leader-12, is-9)
advmod(leader-12, arguably-10)
det(leader-12, the-11)
root(``-1, leader-12)
conj:and(stepped-4, leader-12)
case(performance-14, in-13)
nmod:in(leader-12, performance-14)
cc(performance-14, and-15)
nmod:in(leader-12, functions-16)
conj:and(performance-14, functions-16)
case(price-19, for-17)
det(price-19, the-18)
nmod:for(leader-12, price-19)
punct(stepped-4, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#compaq

step :: Francis Bouygues plans to step down tomorrow as chairman of the television station TF1 but will remain at the helm of Bouygues S.A . , the construction company he founded that controls the station , sources said ./.
compound(Bouygues-2, Francis-1)
nsubj(plans-3, Bouygues-2)
nsubj:xsubj(step-5, Bouygues-2)
nsubj(remain-17, Bouygues-2)
root(ROOT-0, plans-3)
mark(step-5, to-4)
xcomp(plans-3, step-5)
compound:prt(step-5, down-6)
nmod:tmod(step-5, tomorrow-7)
case(chairman-9, as-8)
nmod:as(step-5, chairman-9)
case(TF1-14, of-10)
det(TF1-14, the-11)
compound(TF1-14, television-12)
compound(TF1-14, station-13)
nmod:of(chairman-9, TF1-14)
cc(plans-3, but-15)
aux(remain-17, will-16)
conj:but(plans-3, remain-17)
case(helm-20, at-18)
det(helm-20, the-19)
nmod:at(remain-17, helm-20)
case(S.A-23, of-21)
compound(S.A-23, Bouygues-22)
nmod:of(helm-20, S.A-23)
punct(plans-3, .-24)
punct(said-13, ,-1)
det(company-4, the-2)
compound(company-4, construction-3)
nsubj(controls-8, company-4)
nsubj(said-13, company-4)
nsubj(founded-6, he-5)
acl:relcl(company-4, founded-6)
ref(company-4, that-7)
ccomp(founded-6, controls-8)
det(station-10, the-9)
dobj(controls-8, station-10)
punct(said-13, ,-11)
nsubj(said-13, sources-12)
root(ROOT-0, said-13)
punct(said-13, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#bouygues

step :: He also refused both domestic and U.S. calls to step aside for a compromise plebiscite candidate , who might have benefited from Chile 's economic boom while escaping the stigma of the Pinochet regime 's appalling humanrights record ./.
nsubj(refused-3, He-1)
advmod(refused-3, also-2)
root(ROOT-0, refused-3)
cc:preconj(domestic-5, both-4)
nsubj(calls-8, domestic-5)
nsubj:xsubj(step-10, domestic-5)
cc(domestic-5, and-6)
conj:and(domestic-5, U.S.-7)
nsubj(calls-8, U.S.-7)
nsubj:xsubj(step-10, U.S.-7)
ccomp(refused-3, calls-8)
mark(step-10, to-9)
xcomp(calls-8, step-10)
advmod(step-10, aside-11)
case(candidate-16, for-12)
det(candidate-16, a-13)
compound(candidate-16, compromise-14)
compound(candidate-16, plebiscite-15)
nmod:for(step-10, candidate-16)
nsubj(benefited-21, candidate-16)
punct(candidate-16, ,-17)
ref(candidate-16, who-18)
aux(benefited-21, might-19)
aux(benefited-21, have-20)
acl:relcl(candidate-16, benefited-21)
case(boom-26, from-22)
nmod:poss(boom-26, Chile-23)
case(Chile-23, 's-24)
amod(boom-26, economic-25)
nmod:from(benefited-21, boom-26)
mark(escaping-28, while-27)
advcl(benefited-21, escaping-28)
det(stigma-30, the-29)
dobj(escaping-28, stigma-30)
case(record-38, of-31)
det(regime-34, the-32)
compound(regime-34, Pinochet-33)
nmod:poss(record-38, regime-34)
case(regime-34, 's-35)
amod(record-38, appalling-36)
compound(record-38, humanrights-37)
nmod:of(stigma-30, record-38)
punct(refused-3, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#domestic

step :: All the publicity caused the canine officer who had overlooked the dynamite to step forward ./.
det:predet(publicity-3, All-1)
det(publicity-3, the-2)
nsubj(caused-4, publicity-3)
root(ROOT-0, caused-4)
det(officer-7, the-5)
amod(officer-7, canine-6)
dobj(caused-4, officer-7)
nsubj(overlooked-10, officer-7)
ref(officer-7, who-8)
aux(overlooked-10, had-9)
acl:relcl(officer-7, overlooked-10)
det(dynamite-12, the-11)
dobj(overlooked-10, dynamite-12)
mark(step-14, to-13)
advcl(overlooked-10, step-14)
advmod(step-14, forward-15)
punct(caused-4, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

step :: And as the DeRance account 's losses mounted , he stepped up the pace of his trading ./.
cc(stepped-11, And-1)
mark(mounted-8, as-2)
det(account-5, the-3)
compound(account-5, DeRance-4)
nmod:poss(losses-7, account-5)
case(account-5, 's-6)
nsubj(mounted-8, losses-7)
advcl(stepped-11, mounted-8)
punct(stepped-11, ,-9)
nsubj(stepped-11, he-10)
root(ROOT-0, stepped-11)
compound:prt(stepped-11, up-12)
det(pace-14, the-13)
dobj(stepped-11, pace-14)
case(trading-17, of-15)
nmod:poss(trading-17, his-16)
nmod:of(pace-14, trading-17)
punct(stepped-11, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#trading

step :: Mr. Bumps steps down and , with a colleague , resumes building the wall the old-fashioned way -- no mortar , no cement , nothing to hold the stones together except the stones themselves ./.
compound(Bumps-2, Mr.-1)
nsubj(steps-3, Bumps-2)
root(ROOT-0, steps-3)
advmod(steps-3, down-4)
cc(steps-3, and-5)
punct(steps-3, ,-6)
case(colleague-9, with-7)
det(colleague-9, a-8)
nmod:with(steps-3, colleague-9)
punct(colleague-9, ,-10)
acl(colleague-9, resumes-11)
xcomp(resumes-11, building-12)
det(wall-14, the-13)
nsubj(way-17, wall-14)
det(way-17, the-15)
amod(way-17, old-fashioned-16)
dobj(building-12, way-17)
punct(way-17, ---18)
neg(mortar-20, no-19)
dep(way-17, mortar-20)
punct(mortar-20, ,-21)
neg(cement-23, no-22)
appos(mortar-20, cement-23)
punct(mortar-20, ,-24)
appos(mortar-20, nothing-25)
mark(hold-27, to-26)
acl(nothing-25, hold-27)
det(stones-29, the-28)
dobj(hold-27, stones-29)
advmod(hold-27, together-30)
case(stones-33, except-31)
det(stones-33, the-32)
nmod:except(hold-27, stones-33)
nmod:npmod(stones-33, themselves-34)
punct(steps-3, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#bumps

step :: The stock has risen more than 17 % in less than two weeks on stepped up volume ./.
det(stock-2, The-1)
nsubj(risen-4, stock-2)
aux(risen-4, has-3)
root(ROOT-0, risen-4)
advmod(17-7, more-5)
mwe(more-5, than-6)
nummod(%-8, 17-7)
dobj(risen-4, %-8)
case(weeks-13, in-9)
advmod(two-12, less-10)
mwe(less-10, than-11)
nummod(weeks-13, two-12)
nmod:in(risen-4, weeks-13)
mark(stepped-15, on-14)
advcl(risen-4, stepped-15)
compound:prt(stepped-15, up-16)
dobj(stepped-15, volume-17)
punct(risen-4, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#volume

step :: Israel 's army has stepped up training for poison-gas attacks ; troops now carry antidotes and gas masks that can be fitted with prescription lenses ./.
nmod:poss(army-3, Israel-1)
case(Israel-1, 's-2)
nsubj(stepped-5, army-3)
aux(stepped-5, has-4)
root(ROOT-0, stepped-5)
compound:prt(stepped-5, up-6)
dobj(stepped-5, training-7)
case(attacks-10, for-8)
compound(attacks-10, poison-gas-9)
nmod:for(training-7, attacks-10)
punct(stepped-5, ;-11)
nsubj(carry-14, troops-12)
advmod(carry-14, now-13)
parataxis(stepped-5, carry-14)
dobj(carry-14, antidotes-15)
nsubjpass(fitted-22, antidotes-15)
cc(antidotes-15, and-16)
compound(masks-18, gas-17)
dobj(carry-14, masks-18)
conj:and(antidotes-15, masks-18)
nsubjpass(fitted-22, masks-18)
ref(antidotes-15, that-19)
aux(fitted-22, can-20)
auxpass(fitted-22, be-21)
acl:relcl(antidotes-15, fitted-22)
case(lenses-25, with-23)
compound(lenses-25, prescription-24)
nmod:with(fitted-22, lenses-25)
punct(stepped-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#training

step :: On Wednesday , the Central Bank of the Philippines stepped into the foreign exchange market to sell $ 500 , 000 for pesos , pushing the dollar down to 21.293 pesos ./.
case(Wednesday-2, On-1)
nmod:on(stepped-10, Wednesday-2)
punct(stepped-10, ,-3)
det(Bank-6, the-4)
amod(Bank-6, Central-5)
nsubj(stepped-10, Bank-6)
nsubj:xsubj(sell-17, Bank-6)
case(Philippines-9, of-7)
det(Philippines-9, the-8)
nmod:of(Bank-6, Philippines-9)
root(ROOT-0, stepped-10)
case(market-15, into-11)
det(market-15, the-12)
amod(market-15, foreign-13)
compound(market-15, exchange-14)
nmod:into(stepped-10, market-15)
mark(sell-17, to-16)
xcomp(stepped-10, sell-17)
dep(500-19, $-18)
dobj(sell-17, 500-19)
punct(500-19, ,-20)
amod(500-19, 000-21)
case(pesos-23, for-22)
nmod:for(000-21, pesos-23)
punct(500-19, ,-24)
xcomp(sell-17, pushing-25)
det(dollar-27, the-26)
dobj(pushing-25, dollar-27)
advmod(pushing-25, down-28)
case(pesos-31, to-29)
nummod(pesos-31, 21.293-30)
nmod:to(down-28, pesos-31)
punct(stepped-10, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#bank

step :: `` People who are willing to step into the marketplace are really looking for an extra special premium , '' he said ./.
punct(said-22, ``-1)
nsubj(willing-5, People-2)
nsubj:xsubj(step-7, People-2)
nsubj(looking-13, People-2)
ref(People-2, who-3)
cop(willing-5, are-4)
acl:relcl(People-2, willing-5)
mark(step-7, to-6)
xcomp(willing-5, step-7)
case(marketplace-10, into-8)
det(marketplace-10, the-9)
nmod:into(step-7, marketplace-10)
aux(looking-13, are-11)
advmod(looking-13, really-12)
ccomp(said-22, looking-13)
case(premium-18, for-14)
det(premium-18, an-15)
amod(premium-18, extra-16)
amod(premium-18, special-17)
nmod:for(looking-13, premium-18)
punct(said-22, ,-19)
punct(said-22, ''-20)
nsubj(said-22, he-21)
root(ROOT-0, said-22)
punct(said-22, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#people

step :: To help make room , two members representing Newmont would step down ./.
mark(help-2, To-1)
advcl(step-11, help-2)
ccomp(help-2, make-3)
dobj(make-3, room-4)
punct(step-11, ,-5)
nummod(members-7, two-6)
nsubj(step-11, members-7)
acl(members-7, representing-8)
dobj(representing-8, Newmont-9)
aux(step-11, would-10)
root(ROOT-0, step-11)
advmod(step-11, down-12)
punct(step-11, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#members

step :: `` We 've got a party here that 's prepared to withdraw , to step down , '' says Andrej Novak , a Slovene journalist and publisher ./.
punct(says-19, ``-1)
nsubj(got-4, We-2)
aux(got-4, 've-3)
ccomp(says-19, got-4)
det(party-6, a-5)
dobj(got-4, party-6)
nsubjpass(prepared-10, party-6)
nsubj:xsubj(withdraw-12, party-6)
advmod(party-6, here-7)
ref(party-6, that-8)
auxpass(prepared-10, 's-9)
acl:relcl(party-6, prepared-10)
mark(withdraw-12, to-11)
xcomp(prepared-10, withdraw-12)
punct(withdraw-12, ,-13)
mark(step-15, to-14)
xcomp(withdraw-12, step-15)
compound:prt(step-15, down-16)
punct(says-19, ,-17)
punct(says-19, ''-18)
root(ROOT-0, says-19)
compound(Novak-21, Andrej-20)
nsubj(says-19, Novak-21)
punct(Novak-21, ,-22)
det(journalist-25, a-23)
amod(journalist-25, Slovene-24)
appos(Novak-21, journalist-25)
cc(journalist-25, and-26)
appos(Novak-21, publisher-27)
conj:and(journalist-25, publisher-27)
punct(says-19, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

step :: But his uncle tells the story: When the family arrived , the boy went out exploring near the abandoned base and stepped on a mine ./.
cc(tells-4, But-1)
nmod:poss(uncle-3, his-2)
nsubj(tells-4, uncle-3)
root(ROOT-0, tells-4)
det(story-6, the-5)
dobj(tells-4, story-6)
punct(tells-4, :-7)
advmod(arrived-11, When-8)
det(family-10, the-9)
nsubj(arrived-11, family-10)
advcl(went-15, arrived-11)
punct(went-15, ,-12)
det(boy-14, the-13)
nsubj(went-15, boy-14)
nsubj(stepped-23, boy-14)
parataxis(tells-4, went-15)
compound:prt(went-15, out-16)
xcomp(went-15, exploring-17)
case(base-21, near-18)
det(base-21, the-19)
amod(base-21, abandoned-20)
nmod:near(exploring-17, base-21)
cc(went-15, and-22)
parataxis(tells-4, stepped-23)
conj:and(went-15, stepped-23)
case(mine-26, on-24)
det(mine-26, a-25)
nmod:on(stepped-23, mine-26)
punct(tells-4, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#boy

step :: The Bank Board has been running Bell since it stepped in to take over the insolvent thrift in July 1985 ./.
det(Board-3, The-1)
compound(Board-3, Bank-2)
nsubj(running-6, Board-3)
aux(running-6, has-4)
aux(running-6, been-5)
root(ROOT-0, running-6)
dobj(running-6, Bell-7)
mark(stepped-10, since-8)
nsubj(stepped-10, it-9)
nsubj:xsubj(take-13, it-9)
advcl(running-6, stepped-10)
compound:prt(stepped-10, in-11)
mark(take-13, to-12)
xcomp(stepped-10, take-13)
compound:prt(take-13, over-14)
det(thrift-17, the-15)
amod(thrift-17, insolvent-16)
dobj(take-13, thrift-17)
case(July-19, in-18)
nmod:in(take-13, July-19)
nummod(July-19, 1985-20)
punct(running-6, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#it

step :: It is to correct for such gaps in market operations -LRB- or `` externalities , '' as economists call them -RRB- that governments have a responsibility to step in and lend a helping hand ./.
nsubj(is-2, It-1)
nsubj:xsubj(correct-4, It-1)
root(ROOT-0, is-2)
mark(correct-4, to-3)
xcomp(is-2, correct-4)
case(gaps-7, for-5)
amod(gaps-7, such-6)
nmod:for(correct-4, gaps-7)
mark(have-24, gaps-7)
case(operations-10, in-8)
compound(operations-10, market-9)
nmod:in(gaps-7, operations-10)
punct(externalities-14, -LRB--11)
cc(externalities-14, or-12)
punct(externalities-14, ``-13)
dep(operations-10, externalities-14)
punct(externalities-14, ,-15)
punct(externalities-14, ''-16)
mark(call-19, as-17)
nsubj(call-19, economists-18)
advcl(externalities-14, call-19)
dobj(call-19, them-20)
punct(externalities-14, -RRB--21)
ref(gaps-7, that-22)
nsubj(have-24, governments-23)
acl:relcl(gaps-7, have-24)
det(responsibility-26, a-25)
dobj(have-24, responsibility-26)
mark(step-28, to-27)
acl(responsibility-26, step-28)
advmod(step-28, in-29)
cc(step-28, and-30)
acl(responsibility-26, lend-31)
conj:and(step-28, lend-31)
det(hand-34, a-32)
amod(hand-34, helping-33)
dobj(lend-31, hand-34)
punct(is-2, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

step :: Another area is management succession , which is looming large at GM. Vice Chairman Donald J. Atwood , who oversees GM 's high-tech subsidiaries , retires next year , and Chairman Smith is scheduled to step down in July 1990 ./.
det(area-2, Another-1)
nsubj(succession-5, area-2)
cop(succession-5, is-3)
compound(succession-5, management-4)
root(ROOT-0, succession-5)
nsubj(looming-9, succession-5)
punct(succession-5, ,-6)
ref(succession-5, which-7)
aux(looming-9, is-8)
acl:relcl(succession-5, looming-9)
xcomp(looming-9, large-10)
case(GM-12, at-11)
nmod:at(looming-9, GM-12)
punct(succession-5, .-13)
compound(Atwood-5, Vice-1)
compound(Atwood-5, Chairman-2)
compound(Atwood-5, Donald-3)
compound(Atwood-5, J.-4)
nsubj(oversees-8, Atwood-5)
nsubj(retires-14, Atwood-5)
punct(Atwood-5, ,-6)
ref(Atwood-5, who-7)
acl:relcl(Atwood-5, oversees-8)
nmod:poss(subsidiaries-12, GM-9)
case(GM-9, 's-10)
amod(subsidiaries-12, high-tech-11)
dobj(oversees-8, subsidiaries-12)
punct(Atwood-5, ,-13)
root(ROOT-0, retires-14)
amod(year-16, next-15)
nmod:tmod(retires-14, year-16)
punct(retires-14, ,-17)
cc(retires-14, and-18)
compound(Smith-20, Chairman-19)
nsubjpass(scheduled-22, Smith-20)
nsubj:xsubj(step-24, Smith-20)
auxpass(scheduled-22, is-21)
conj:and(retires-14, scheduled-22)
mark(step-24, to-23)
xcomp(scheduled-22, step-24)
compound:prt(step-24, down-25)
case(July-27, in-26)
nmod:in(step-24, July-27)
nummod(July-27, 1990-28)
punct(retires-14, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#smith

step :: In Washington , former Treasury Secretary James A. Baker and former Federal Reserve Board Chairman Paul A. Volcker , architects of the present flagging international debt strategy , have both stepped down ./.
case(Washington-2, In-1)
nmod:in(have-29, Washington-2)
punct(have-29, ,-3)
amod(Baker-9, former-4)
compound(Baker-9, Treasury-5)
compound(Baker-9, Secretary-6)
compound(Baker-9, James-7)
compound(Baker-9, A.-8)
nsubj(have-29, Baker-9)
cc(Baker-9, and-10)
amod(Volcker-18, former-11)
compound(Volcker-18, Federal-12)
compound(Volcker-18, Reserve-13)
compound(Volcker-18, Board-14)
compound(Volcker-18, Chairman-15)
compound(Volcker-18, Paul-16)
compound(Volcker-18, A.-17)
conj:and(Baker-9, Volcker-18)
nsubj(have-29, Volcker-18)
punct(Baker-9, ,-19)
appos(Baker-9, architects-20)
case(strategy-27, of-21)
det(strategy-27, the-22)
amod(strategy-27, present-23)
amod(strategy-27, flagging-24)
amod(strategy-27, international-25)
compound(strategy-27, debt-26)
nmod:of(architects-20, strategy-27)
punct(Baker-9, ,-28)
root(ROOT-0, have-29)
nsubj(stepped-31, both-30)
ccomp(have-29, stepped-31)
advmod(stepped-31, down-32)
punct(have-29, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#both

step :: Mr. Instone , 64 years old , stepped down in February from his posts as president and chief executive officer ./.
compound(Instone-2, Mr.-1)
nsubj(stepped-8, Instone-2)
punct(Instone-2, ,-3)
nummod(years-5, 64-4)
nmod:npmod(old-6, years-5)
amod(Instone-2, old-6)
punct(Instone-2, ,-7)
root(ROOT-0, stepped-8)
advmod(stepped-8, down-9)
case(February-11, in-10)
nmod:in(stepped-8, February-11)
case(posts-14, from-12)
nmod:poss(posts-14, his-13)
nmod:from(stepped-8, posts-14)
case(president-16, as-15)
nmod:as(stepped-8, president-16)
cc(president-16, and-17)
amod(officer-20, chief-18)
compound(officer-20, executive-19)
nmod:as(stepped-8, officer-20)
conj:and(president-16, officer-20)
punct(stepped-8, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#instone

step :: Mr. Damore , who covered the incident for the Cape Cod News , is a disciplined and relentless writer who makes his case more devastating because he never steps back and editorializes ./.
compound(Damore-2, Mr.-1)
nsubj(covered-5, Damore-2)
nsubj(writer-19, Damore-2)
punct(Damore-2, ,-3)
ref(Damore-2, who-4)
acl:relcl(Damore-2, covered-5)
det(incident-7, the-6)
dobj(covered-5, incident-7)
case(News-12, for-8)
det(News-12, the-9)
compound(News-12, Cape-10)
compound(News-12, Cod-11)
nmod:for(incident-7, News-12)
punct(Damore-2, ,-13)
cop(writer-19, is-14)
det(writer-19, a-15)
amod(writer-19, disciplined-16)
cc(disciplined-16, and-17)
conj:and(disciplined-16, relentless-18)
amod(writer-19, relentless-18)
root(ROOT-0, writer-19)
nsubj(makes-21, writer-19)
ref(writer-19, who-20)
acl:relcl(writer-19, makes-21)
nmod:poss(case-23, his-22)
nsubj(devastating-25, case-23)
advmod(devastating-25, more-24)
xcomp(makes-21, devastating-25)
mark(steps-29, because-26)
nsubj(steps-29, he-27)
nsubj(editorializes-32, he-27)
neg(steps-29, never-28)
advcl(makes-21, steps-29)
advmod(steps-29, back-30)
cc(steps-29, and-31)
advcl(makes-21, editorializes-32)
conj:and(steps-29, editorializes-32)
punct(writer-19, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#he

step :: The Nasdaq Composite Index slumped to a 2 1 2-month low of 374.07 , down 4.88 , in quiet trading that underscored the simple problem of over-the-counter stock market: no one 's stepping up to the counter ./.
det(Index-4, The-1)
compound(Index-4, Nasdaq-2)
compound(Index-4, Composite-3)
nsubj(slumped-5, Index-4)
root(ROOT-0, slumped-5)
case(low-11, to-6)
det(low-11, a-7)
nummod(low-11, 2-8)
nummod(low-11, 1-9)
compound(low-11, 2-month-10)
nmod:to(slumped-5, low-11)
case(374.07-13, of-12)
nmod:of(low-11, 374.07-13)
punct(low-11, ,-14)
advmod(low-11, down-15)
nmod:npmod(down-15, 4.88-16)
punct(low-11, ,-17)
case(trading-20, in-18)
amod(trading-20, quiet-19)
nmod:in(low-11, trading-20)
nsubj(underscored-22, trading-20)
ref(trading-20, that-21)
acl:relcl(trading-20, underscored-22)
det(problem-25, the-23)
amod(problem-25, simple-24)
dobj(underscored-22, problem-25)
case(market-29, of-26)
amod(market-29, over-the-counter-27)
compound(market-29, stock-28)
nmod:of(problem-25, market-29)
punct(slumped-5, :-30)
neg(one-32, no-31)
nsubj(stepping-34, one-32)
aux(stepping-34, 's-33)
parataxis(slumped-5, stepping-34)
advmod(stepping-34, up-35)
case(counter-38, to-36)
det(counter-38, the-37)
nmod:to(stepping-34, counter-38)
punct(slumped-5, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#one

step :: Mr. Smith , 44 years old , succeeds Gary W. Rhodes , 40 , who has stepped down to chief financial officer for `` purely personal and family reasons , '' according to the company ./.
compound(Smith-2, Mr.-1)
nsubj(succeeds-8, Smith-2)
punct(Smith-2, ,-3)
nummod(years-5, 44-4)
nmod:npmod(old-6, years-5)
amod(Smith-2, old-6)
punct(Smith-2, ,-7)
root(ROOT-0, succeeds-8)
compound(Rhodes-11, Gary-9)
compound(Rhodes-11, W.-10)
dobj(succeeds-8, Rhodes-11)
nsubj(stepped-17, Rhodes-11)
punct(Rhodes-11, ,-12)
amod(Rhodes-11, 40-13)
punct(Rhodes-11, ,-14)
ref(Rhodes-11, who-15)
aux(stepped-17, has-16)
acl:relcl(Rhodes-11, stepped-17)
advmod(stepped-17, down-18)
case(officer-22, to-19)
amod(officer-22, chief-20)
amod(officer-22, financial-21)
nmod:to(down-18, officer-22)
case(reasons-29, for-23)
punct(reasons-29, ``-24)
advmod(personal-26, purely-25)
amod(reasons-29, personal-26)
cc(personal-26, and-27)
conj:and(personal-26, family-28)
amod(reasons-29, family-28)
nmod:for(stepped-17, reasons-29)
punct(succeeds-8, ,-30)
punct(succeeds-8, ''-31)
case(company-35, according-32)
mwe(according-32, to-33)
det(company-35, the-34)
nmod:according_to(succeeds-8, company-35)
punct(succeeds-8, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#rhodes

step :: But concern about inflation stepped up Friday when the Labor Department announced that employment increased strongly in July and that hourly earnings rose at a 6 % annual pace ./.
cc(stepped-5, But-1)
nsubj(stepped-5, concern-2)
case(inflation-4, about-3)
nmod:about(concern-2, inflation-4)
root(ROOT-0, stepped-5)
compound:prt(stepped-5, up-6)
nmod:tmod(stepped-5, Friday-7)
advmod(announced-12, when-8)
det(Department-11, the-9)
compound(Department-11, Labor-10)
nsubj(announced-12, Department-11)
advcl(stepped-5, announced-12)
mark(increased-15, that-13)
nsubj(increased-15, employment-14)
ccomp(announced-12, increased-15)
advmod(increased-15, strongly-16)
case(July-18, in-17)
nmod:in(increased-15, July-18)
cc(increased-15, and-19)
mark(rose-23, that-20)
amod(earnings-22, hourly-21)
nsubj(rose-23, earnings-22)
ccomp(announced-12, rose-23)
conj:and(increased-15, rose-23)
case(pace-29, at-24)
det(pace-29, a-25)
compound(%-27, 6-26)
amod(pace-29, %-27)
amod(pace-29, annual-28)
nmod:at(rose-23, pace-29)
punct(stepped-5, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#concern

step :: After making several major acquisitions , including American Motors Corp . , in 1986 and 1987 , Chrysler has spent this year trying to integrate those operations with its existing ones , and stepping up spending on technology to develop new products ./.
mark(making-2, After-1)
root(ROOT-0, making-2)
amod(acquisitions-5, several-3)
amod(acquisitions-5, major-4)
dobj(making-2, acquisitions-5)
punct(acquisitions-5, ,-6)
case(Corp-10, including-7)
compound(Corp-10, American-8)
compound(Corp-10, Motors-9)
nmod:including(acquisitions-5, Corp-10)
punct(making-2, .-11)
punct(spent-9, ,-1)
case(1986-3, in-2)
nmod:in(spent-9, 1986-3)
cc(1986-3, and-4)
conj:and(1986-3, 1987-5)
nmod:in(spent-9, 1987-5)
punct(spent-9, ,-6)
nsubj(spent-9, Chrysler-7)
nsubj(stepping-23, Chrysler-7)
aux(spent-9, has-8)
root(ROOT-0, spent-9)
det(year-11, this-10)
nmod:tmod(spent-9, year-11)
xcomp(spent-9, trying-12)
mark(integrate-14, to-13)
xcomp(trying-12, integrate-14)
det(operations-16, those-15)
dobj(integrate-14, operations-16)
case(ones-20, with-17)
nmod:poss(ones-20, its-18)
amod(ones-20, existing-19)
nmod:with(integrate-14, ones-20)
punct(spent-9, ,-21)
cc(spent-9, and-22)
conj:and(spent-9, stepping-23)
compound:prt(stepping-23, up-24)
dobj(stepping-23, spending-25)
case(technology-27, on-26)
nmod:on(spending-25, technology-27)
mark(develop-29, to-28)
advcl(stepping-23, develop-29)
amod(products-31, new-30)
dobj(develop-29, products-31)
punct(spent-9, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#spending

step :: Thrift liquidations may be stepped up through payouts to depositors , Bank Board Chairman Danny Wall said ./.
compound(liquidations-2, Thrift-1)
nsubjpass(stepped-5, liquidations-2)
aux(stepped-5, may-3)
auxpass(stepped-5, be-4)
ccomp(said-17, stepped-5)
compound:prt(stepped-5, up-6)
case(payouts-8, through-7)
nmod:through(stepped-5, payouts-8)
case(depositors-10, to-9)
nmod:to(payouts-8, depositors-10)
punct(said-17, ,-11)
compound(Wall-16, Bank-12)
compound(Wall-16, Board-13)
compound(Wall-16, Chairman-14)
compound(Wall-16, Danny-15)
nsubj(said-17, Wall-16)
root(ROOT-0, said-17)
punct(said-17, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#liquidations

step :: After his third cup of tea , Abideen reluctantly rises to go , readjusting his veil before stepping from the hut ./.
case(cup-4, After-1)
nmod:poss(cup-4, his-2)
amod(cup-4, third-3)
nmod:after(rises-10, cup-4)
case(tea-6, of-5)
nmod:of(cup-4, tea-6)
punct(rises-10, ,-7)
nsubj(rises-10, Abideen-8)
nsubj:xsubj(go-12, Abideen-8)
advmod(rises-10, reluctantly-9)
root(ROOT-0, rises-10)
mark(go-12, to-11)
xcomp(rises-10, go-12)
punct(go-12, ,-13)
xcomp(go-12, readjusting-14)
nmod:poss(veil-16, his-15)
dobj(readjusting-14, veil-16)
mark(stepping-18, before-17)
advcl(readjusting-14, stepping-18)
case(hut-21, from-19)
det(hut-21, the-20)
nmod:from(stepping-18, hut-21)
punct(rises-10, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#hut

step :: Amstrad is one of the last major personal-computer makers to sign such an accord with IBM. IBM has stepped up efforts to enforce its patent rights since launching its new line of PS 2 models in April 1987 ./.
nsubj(one-3, Amstrad-1)
cop(one-3, is-2)
root(ROOT-0, one-3)
case(makers-9, of-4)
det(makers-9, the-5)
amod(makers-9, last-6)
amod(makers-9, major-7)
compound(makers-9, personal-computer-8)
nmod:of(one-3, makers-9)
mark(sign-11, to-10)
acl(makers-9, sign-11)
det:predet(accord-14, such-12)
det(accord-14, an-13)
dobj(sign-11, accord-14)
case(IBM-16, with-15)
nmod:with(accord-14, IBM-16)
punct(one-3, .-17)
nsubj(stepped-3, IBM-1)
aux(stepped-3, has-2)
root(ROOT-0, stepped-3)
compound:prt(stepped-3, up-4)
dobj(stepped-3, efforts-5)
mark(enforce-7, to-6)
acl(efforts-5, enforce-7)
nmod:poss(rights-10, its-8)
compound(rights-10, patent-9)
dobj(enforce-7, rights-10)
mark(launching-12, since-11)
advcl(stepped-3, launching-12)
nmod:poss(line-15, its-13)
amod(line-15, new-14)
dobj(launching-12, line-15)
case(models-19, of-16)
compound(models-19, PS-17)
nummod(models-19, 2-18)
nmod:of(line-15, models-19)
case(April-21, in-20)
nmod:in(launching-12, April-21)
nummod(April-21, 1987-22)
punct(stepped-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#efforts

step :: While the answer is n't clear , it is clear that Mr. Cristiani , who has headed Arena since Mr. D'Aubuisson stepped aside for him in 1986 , has altered the tone of its campaigning ./.
mark(clear-6, While-1)
det(answer-3, the-2)
nsubj(clear-6, answer-3)
cop(clear-6, is-4)
neg(clear-6, n't-5)
advcl(clear-10, clear-6)
punct(clear-10, ,-7)
nsubj(clear-10, it-8)
cop(clear-10, is-9)
root(ROOT-0, clear-10)
mark(altered-30, that-11)
compound(Cristiani-13, Mr.-12)
nsubj(headed-17, Cristiani-13)
nsubj(altered-30, Cristiani-13)
punct(Cristiani-13, ,-14)
ref(Cristiani-13, who-15)
aux(headed-17, has-16)
acl:relcl(Cristiani-13, headed-17)
dobj(headed-17, Arena-18)
mark(stepped-22, since-19)
compound(D'Aubuisson-21, Mr.-20)
nsubj(stepped-22, D'Aubuisson-21)
advcl(headed-17, stepped-22)
advmod(stepped-22, aside-23)
case(him-25, for-24)
nmod:for(stepped-22, him-25)
case(1986-27, in-26)
nmod:in(stepped-22, 1986-27)
punct(Cristiani-13, ,-28)
aux(altered-30, has-29)
ccomp(clear-10, altered-30)
det(tone-32, the-31)
dobj(altered-30, tone-32)
case(campaigning-35, of-33)
nmod:poss(campaigning-35, its-34)
nmod:of(tone-32, campaigning-35)
punct(clear-10, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#d'aubuisson

step :: The Bundesbank stepped in when the dollar was trading around 1.8440 marks , which was up from its levels late Friday , and continued selling dollars throughout the morning , dealers said ./.
det(Bundesbank-2, The-1)
nsubj(stepped-3, Bundesbank-2)
ccomp(said-32, stepped-3)
mark(trading-9, in-4)
advmod(trading-9, when-5)
det(dollar-7, the-6)
nsubj(trading-9, dollar-7)
nsubj(continued-24, dollar-7)
aux(trading-9, was-8)
advcl(stepped-3, trading-9)
case(marks-12, around-10)
nummod(marks-12, 1.8440-11)
nmod:around(trading-9, marks-12)
nsubj(was-15, marks-12)
punct(marks-12, ,-13)
ref(marks-12, which-14)
acl:relcl(marks-12, was-15)
advmod(was-15, up-16)
case(levels-19, from-17)
nmod:poss(levels-19, its-18)
nmod:from(up-16, levels-19)
advmod(Friday-21, late-20)
nmod:tmod(levels-19, Friday-21)
punct(marks-12, ,-22)
cc(trading-9, and-23)
advcl(stepped-3, continued-24)
conj:and(trading-9, continued-24)
xcomp(continued-24, selling-25)
dobj(selling-25, dollars-26)
case(morning-29, throughout-27)
det(morning-29, the-28)
nmod:throughout(selling-25, morning-29)
punct(said-32, ,-30)
nsubj(said-32, dealers-31)
root(ROOT-0, said-32)
punct(said-32, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#bundesbank

step :: Deluxe balked and a competitor stepped in to accept the contract , startling investors ./.
nsubj(balked-2, Deluxe-1)
ccomp(investors-14, balked-2)
cc(balked-2, and-3)
det(competitor-5, a-4)
nsubj(stepped-6, competitor-5)
nsubj:xsubj(accept-9, competitor-5)
conj:and(balked-2, stepped-6)
ccomp(investors-14, stepped-6)
compound:prt(stepped-6, in-7)
mark(accept-9, to-8)
xcomp(stepped-6, accept-9)
det(contract-11, the-10)
dobj(accept-9, contract-11)
punct(investors-14, ,-12)
amod(investors-14, startling-13)
root(ROOT-0, investors-14)
punct(investors-14, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#competitor

step :: Many are expected to step down to make way for a new generation of leaders more sensitive to public opinion in Taiwan ./.
nsubjpass(expected-3, Many-1)
nsubj:xsubj(step-5, Many-1)
auxpass(expected-3, are-2)
root(ROOT-0, expected-3)
mark(step-5, to-4)
xcomp(expected-3, step-5)
compound:prt(step-5, down-6)
mark(make-8, to-7)
xcomp(step-5, make-8)
dobj(make-8, way-9)
case(generation-13, for-10)
det(generation-13, a-11)
amod(generation-13, new-12)
nmod:for(way-9, generation-13)
case(leaders-15, of-14)
nmod:of(generation-13, leaders-15)
advmod(sensitive-17, more-16)
amod(generation-13, sensitive-17)
case(opinion-20, to-18)
amod(opinion-20, public-19)
nmod:to(sensitive-17, opinion-20)
case(Taiwan-22, in-21)
nmod:in(opinion-20, Taiwan-22)
punct(expected-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#many

step :: At the time the investors stepped in , Atlantic National Bank of Florida was in foreclosure proceedings , and a court had ruled that Rep. Chappell and his partner , William W. Austin , were personally obligated to repay about $ 172 , 000 , according to an attorney for the bank ./.
case(time-3, At-1)
det(time-3, the-2)
nmod:at(proceedings-17, time-3)
det(investors-5, the-4)
nsubj(stepped-6, investors-5)
acl:relcl(time-3, stepped-6)
advmod(stepped-6, in-7)
punct(proceedings-17, ,-8)
compound(Bank-11, Atlantic-9)
compound(Bank-11, National-10)
nsubj(proceedings-17, Bank-11)
case(Florida-13, of-12)
nmod:of(Bank-11, Florida-13)
cop(proceedings-17, was-14)
case(proceedings-17, in-15)
compound(proceedings-17, foreclosure-16)
root(ROOT-0, proceedings-17)
punct(proceedings-17, ,-18)
cc(proceedings-17, and-19)
det(court-21, a-20)
nsubj(ruled-23, court-21)
aux(ruled-23, had-22)
conj:and(proceedings-17, ruled-23)
mark(obligated-37, that-24)
compound(Chappell-26, Rep.-25)
nsubjpass(obligated-37, Chappell-26)
nsubj:xsubj(repay-39, Chappell-26)
cc(Chappell-26, and-27)
nmod:poss(partner-29, his-28)
conj:and(Chappell-26, partner-29)
nsubjpass(obligated-37, partner-29)
nsubj:xsubj(repay-39, partner-29)
punct(partner-29, ,-30)
compound(Austin-33, William-31)
compound(Austin-33, W.-32)
appos(partner-29, Austin-33)
punct(partner-29, ,-34)
auxpass(obligated-37, were-35)
advmod(obligated-37, personally-36)
ccomp(ruled-23, obligated-37)
mark(repay-39, to-38)
xcomp(obligated-37, repay-39)
advmod($-41, about-40)
dobj(repay-39, $-41)
nummod($-41, 172-42)
punct($-41, ,-43)
nummod($-41, 000-44)
punct(proceedings-17, ,-45)
case(attorney-49, according-46)
mwe(according-46, to-47)
det(attorney-49, an-48)
nmod:according_to(proceedings-17, attorney-49)
case(bank-52, for-50)
det(bank-52, the-51)
nmod:for(attorney-49, bank-52)
punct(proceedings-17, .-53)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#investors

step :: What they are pushing is elimination or weakening of cost-of-living clauses , greater links between compensation and corporate performance , and more emphasis on lump-sum payments that do n't step up the wage base ./.
dobj(pushing-4, What-1)
nsubj(pushing-4, they-2)
aux(pushing-4, are-3)
csubj(elimination-6, pushing-4)
cop(elimination-6, is-5)
root(ROOT-0, elimination-6)
cc(elimination-6, or-7)
conj:or(elimination-6, weakening-8)
case(clauses-11, of-9)
amod(clauses-11, cost-of-living-10)
nmod:of(elimination-6, clauses-11)
punct(clauses-11, ,-12)
amod(links-14, greater-13)
nmod:of(elimination-6, links-14)
conj:and(clauses-11, links-14)
case(compensation-16, between-15)
nmod:between(links-14, compensation-16)
cc(compensation-16, and-17)
amod(performance-19, corporate-18)
nmod:between(links-14, performance-19)
conj:and(compensation-16, performance-19)
punct(clauses-11, ,-20)
cc(clauses-11, and-21)
amod(emphasis-23, more-22)
nmod:of(elimination-6, emphasis-23)
conj:and(clauses-11, emphasis-23)
case(payments-26, on-24)
amod(payments-26, lump-sum-25)
nmod:on(emphasis-23, payments-26)
nsubj(step-30, payments-26)
ref(payments-26, that-27)
aux(step-30, do-28)
neg(step-30, n't-29)
acl:relcl(payments-26, step-30)
compound:prt(step-30, up-31)
det(base-34, the-32)
compound(base-34, wage-33)
dobj(step-30, base-34)
punct(elimination-6, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#base

step :: Byrd is expected to take the post next year when he steps down as Senate leader ./.
nsubjpass(expected-3, Byrd-1)
nsubj:xsubj(take-5, Byrd-1)
auxpass(expected-3, is-2)
root(ROOT-0, expected-3)
mark(take-5, to-4)
xcomp(expected-3, take-5)
det(post-7, the-6)
dobj(take-5, post-7)
amod(year-9, next-8)
nmod:tmod(take-5, year-9)
advmod(steps-12, when-10)
nsubj(steps-12, he-11)
advcl(take-5, steps-12)
advmod(steps-12, down-13)
advmod(leader-16, as-14)
compound(leader-16, Senate-15)
dobj(steps-12, leader-16)
punct(expected-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#leader

step :: Moreover , the latest resignations are bound to boost continuing efforts by White House intimates , Republican Party officials , aides to Vice President George Bush and others trying to convince President Reagan that Mr. Meese has become a major political liability and should step down ./.
advmod(bound-7, Moreover-1)
punct(bound-7, ,-2)
det(resignations-5, the-3)
amod(resignations-5, latest-4)
nsubjpass(bound-7, resignations-5)
nsubj:xsubj(boost-9, resignations-5)
auxpass(bound-7, are-6)
root(ROOT-0, bound-7)
mark(boost-9, to-8)
xcomp(bound-7, boost-9)
amod(efforts-11, continuing-10)
dobj(boost-9, efforts-11)
case(intimates-15, by-12)
compound(intimates-15, White-13)
compound(intimates-15, House-14)
nmod:by(efforts-11, intimates-15)
punct(intimates-15, ,-16)
compound(officials-19, Republican-17)
compound(officials-19, Party-18)
conj(intimates-15, officials-19)
punct(intimates-15, ,-20)
appos(intimates-15, aides-21)
case(Bush-26, to-22)
compound(Bush-26, Vice-23)
compound(Bush-26, President-24)
compound(Bush-26, George-25)
nmod:to(aides-21, Bush-26)
cc(Bush-26, and-27)
nmod:to(aides-21, others-28)
conj:and(Bush-26, others-28)
acl(aides-21, trying-29)
mark(convince-31, to-30)
xcomp(trying-29, convince-31)
compound(Reagan-33, President-32)
dobj(convince-31, Reagan-33)
mark(become-38, that-34)
compound(Meese-36, Mr.-35)
nsubj(become-38, Meese-36)
nsubj(step-45, Meese-36)
aux(become-38, has-37)
ccomp(convince-31, become-38)
det(liability-42, a-39)
amod(liability-42, major-40)
amod(liability-42, political-41)
xcomp(become-38, liability-42)
cc(become-38, and-43)
aux(step-45, should-44)
ccomp(convince-31, step-45)
conj:and(become-38, step-45)
compound:prt(step-45, down-46)
punct(bound-7, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#meese

step :: Traders said foreign investors were active sellers Wednesday , while domestic market operators were stepping in and out of the market following the action from overseas ./.
nsubj(said-2, Traders-1)
root(ROOT-0, said-2)
amod(investors-4, foreign-3)
nsubj(sellers-7, investors-4)
cop(sellers-7, were-5)
amod(sellers-7, active-6)
ccomp(said-2, sellers-7)
nmod:tmod(sellers-7, Wednesday-8)
punct(sellers-7, ,-9)
mark(stepping-15, while-10)
amod(operators-13, domestic-11)
compound(operators-13, market-12)
nsubj(stepping-15, operators-13)
aux(stepping-15, were-14)
advcl(sellers-7, stepping-15)
nmod(market-21, in-16)
cc(market-21, and-17)
case(of-19, out-18)
nmod(stepping-15, of-19)
conj:and(market-21, of-19)
det(market-21, the-20)
nmod(stepping-15, market-21)
case(action-24, following-22)
det(action-24, the-23)
nmod:following(stepping-15, action-24)
case(overseas-26, from-25)
nmod:from(action-24, overseas-26)
punct(said-2, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#operators

step :: The suit , filed against the unions representing pilots and machinists , stepped up the war over Eastern 's labor costs that has raged through the company , the Congress and the courts for more than a year ./.
det(suit-2, The-1)
nsubj(stepped-13, suit-2)
punct(suit-2, ,-3)
acl(suit-2, filed-4)
case(unions-7, against-5)
det(unions-7, the-6)
nmod:against(filed-4, unions-7)
acl(unions-7, representing-8)
dobj(representing-8, pilots-9)
cc(pilots-9, and-10)
dobj(representing-8, machinists-11)
conj:and(pilots-9, machinists-11)
punct(suit-2, ,-12)
root(ROOT-0, stepped-13)
compound:prt(stepped-13, up-14)
det(war-16, the-15)
dobj(stepped-13, war-16)
case(costs-21, over-17)
nmod:poss(costs-21, Eastern-18)
case(Eastern-18, 's-19)
compound(costs-21, labor-20)
nmod:over(war-16, costs-21)
nsubj(raged-24, costs-21)
ref(costs-21, that-22)
aux(raged-24, has-23)
acl:relcl(costs-21, raged-24)
case(company-27, through-25)
det(company-27, the-26)
nmod:through(raged-24, company-27)
punct(stepped-13, ,-28)
det(Congress-30, the-29)
root(,-28, Congress-30)
cc(Congress-30, and-31)
det(courts-33, the-32)
root(,-28, courts-33)
conj:and(Congress-30, courts-33)
case(year-38, for-34)
advmod(a-37, more-35)
mwe(more-35, than-36)
nummod(year-38, a-37)
nmod:for(Congress-30, year-38)
punct(Congress-30, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#war

step :: The date would give two breweries , which now produce beer for export only , time to step up production , the bill said ./.
det(date-2, The-1)
nsubj(give-4, date-2)
aux(give-4, would-3)
ccomp(said-24, give-4)
nummod(breweries-6, two-5)
dobj(give-4, breweries-6)
nsubj(produce-10, breweries-6)
punct(breweries-6, ,-7)
ref(breweries-6, which-8)
advmod(produce-10, now-9)
acl:relcl(breweries-6, produce-10)
dobj(produce-10, beer-11)
case(export-13, for-12)
nmod:for(produce-10, export-13)
advmod(produce-10, only-14)
punct(breweries-6, ,-15)
appos(breweries-6, time-16)
mark(step-18, to-17)
acl(time-16, step-18)
compound:prt(step-18, up-19)
dobj(step-18, production-20)
punct(said-24, ,-21)
det(bill-23, the-22)
nsubj(said-24, bill-23)
root(ROOT-0, said-24)
punct(said-24, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#production

step :: The KGB , he says , stepped in on his behalf , but all it could offer was an apartment , where he now lives , in a defense ministry complex ./.
det(KGB-2, The-1)
nsubj(stepped-7, KGB-2)
punct(says-5, ,-3)
nsubj(says-5, he-4)
parataxis(stepped-7, says-5)
punct(says-5, ,-6)
root(ROOT-0, stepped-7)
compound:prt(stepped-7, in-8)
case(behalf-11, on-9)
nmod:poss(behalf-11, his-10)
nmod:on(stepped-7, behalf-11)
punct(stepped-7, ,-12)
cc(stepped-7, but-13)
nsubj(apartment-20, all-14)
nsubj(offer-17, it-15)
aux(offer-17, could-16)
acl:relcl(all-14, offer-17)
cop(apartment-20, was-18)
det(apartment-20, an-19)
conj:but(stepped-7, apartment-20)
punct(apartment-20, ,-21)
advmod(lives-25, where-22)
nsubj(lives-25, he-23)
advmod(lives-25, now-24)
acl:relcl(apartment-20, lives-25)
punct(lives-25, ,-26)
case(complex-31, in-27)
det(complex-31, a-28)
compound(complex-31, defense-29)
compound(complex-31, ministry-30)
nmod:in(lives-25, complex-31)
punct(stepped-7, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#kgb

step :: Mr. Liedtke , Pennzoil 's founder , stepped down as chief executive at the meeting ./.
compound(Liedtke-2, Mr.-1)
nsubj(stepped-8, Liedtke-2)
punct(Liedtke-2, ,-3)
nmod:poss(founder-6, Pennzoil-4)
case(Pennzoil-4, 's-5)
appos(Liedtke-2, founder-6)
punct(Liedtke-2, ,-7)
root(ROOT-0, stepped-8)
advmod(stepped-8, down-9)
advmod(executive-12, as-10)
amod(executive-12, chief-11)
nmod(stepped-8, executive-12)
case(meeting-15, at-13)
det(meeting-15, the-14)
nmod:at(stepped-8, meeting-15)
punct(stepped-8, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#liedtke

step :: Traders said only in the final hour did a few noticeable buyers step into the market ./.
nsubj(said-2, Traders-1)
root(ROOT-0, said-2)
advmod(hour-7, only-3)
case(hour-7, in-4)
det(hour-7, the-5)
amod(hour-7, final-6)
nmod:in(step-13, hour-7)
aux(step-13, did-8)
det(buyers-12, a-9)
amod(buyers-12, few-10)
amod(buyers-12, noticeable-11)
nsubj(step-13, buyers-12)
ccomp(said-2, step-13)
case(market-16, into-14)
det(market-16, the-15)
nmod:into(step-13, market-16)
punct(said-2, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#buyers

step :: But Mr. Burns , the former deputy , resigned last week in unison with William Weld , an assistant attorney general , in an effort to force Mr. Meese to step down ./.
cc(resigned-9, But-1)
compound(Burns-3, Mr.-2)
nsubj(resigned-9, Burns-3)
punct(Burns-3, ,-4)
det(deputy-7, the-5)
amod(deputy-7, former-6)
appos(Burns-3, deputy-7)
punct(Burns-3, ,-8)
root(ROOT-0, resigned-9)
amod(week-11, last-10)
nmod:tmod(resigned-9, week-11)
case(unison-13, in-12)
nmod:in(resigned-9, unison-13)
case(Weld-16, with-14)
compound(Weld-16, William-15)
nmod:with(unison-13, Weld-16)
punct(Weld-16, ,-17)
det(general-21, an-18)
amod(general-21, assistant-19)
compound(general-21, attorney-20)
appos(Weld-16, general-21)
punct(Weld-16, ,-22)
case(effort-25, in-23)
det(effort-25, an-24)
nmod:in(resigned-9, effort-25)
mark(force-27, to-26)
acl(effort-25, force-27)
compound(Meese-29, Mr.-28)
dobj(force-27, Meese-29)
nsubj:xsubj(step-31, Meese-29)
mark(step-31, to-30)
xcomp(force-27, step-31)
compound:prt(step-31, down-32)
punct(resigned-9, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#meese

step :: But others -- including Pennsylvania 's two senators , Republicans Arlen Specter and John Heinz , Rep. Joseph McDade -LRB- R . , Pa. -RRB- and Rep. John Murtha -LRB- D . , Pa. -RRB- -- stepped in ./.
root(ROOT-0, But-1)
nsubj(But-1, others-2)
punct(others-2, ---3)
case(senators-8, including-4)
nmod:poss(senators-8, Pennsylvania-5)
case(Pennsylvania-5, 's-6)
nummod(senators-8, two-7)
nmod:including(others-2, senators-8)
punct(senators-8, ,-9)
compound(Specter-12, Republicans-10)
compound(Specter-12, Arlen-11)
nmod:including(others-2, Specter-12)
conj:and(senators-8, Specter-12)
cc(senators-8, and-13)
compound(Heinz-15, John-14)
nmod:including(others-2, Heinz-15)
conj:and(senators-8, Heinz-15)
punct(Heinz-15, ,-16)
compound(McDade-19, Rep.-17)
compound(McDade-19, Joseph-18)
appos(Heinz-15, McDade-19)
punct(R-21, -LRB--20)
appos(McDade-19, R-21)
punct(R-21, .-22)
punct(Pa.-2, ,-1)
root(ROOT-0, Pa.-2)
punct(Pa.-2, -RRB--3)
cc(Pa.-2, and-4)
compound(Murtha-7, Rep.-5)
compound(Murtha-7, John-6)
conj:and(Pa.-2, Murtha-7)
punct(D-9, -LRB--8)
appos(Murtha-7, D-9)
punct(D-9, .-10)
root(ROOT-0, ,-1)
root(,-1, Pa.-2)
punct(Pa.-2, -RRB--3)
punct(stepped-5, ---4)
dep(Pa.-2, stepped-5)
compound:prt(stepped-5, in-6)
punct(Pa.-2, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

step :: Mr. Brown recently stepped down as president of the University of South Florida ./.
compound(Brown-2, Mr.-1)
nsubj(stepped-4, Brown-2)
advmod(stepped-4, recently-3)
root(ROOT-0, stepped-4)
compound:prt(stepped-4, down-5)
case(president-7, as-6)
nmod:as(stepped-4, president-7)
case(University-10, of-8)
det(University-10, the-9)
nmod:of(president-7, University-10)
case(Florida-13, of-11)
compound(Florida-13, South-12)
nmod:of(University-10, Florida-13)
punct(stepped-4, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#brown

step :: It also is likely to lead to an escalation in the clash between the church and the state , which has been raging since last month when several churches , including the Roman Catholic Church , stepped up their criticism of apartheid ./.
nsubj(likely-4, It-1)
nsubj:xsubj(lead-6, It-1)
advmod(likely-4, also-2)
cop(likely-4, is-3)
root(ROOT-0, likely-4)
mark(lead-6, to-5)
xcomp(likely-4, lead-6)
case(escalation-9, to-7)
det(escalation-9, an-8)
nmod:to(lead-6, escalation-9)
case(clash-12, in-10)
det(clash-12, the-11)
nmod:in(escalation-9, clash-12)
case(church-15, between-13)
det(church-15, the-14)
nmod:between(clash-12, church-15)
cc(church-15, and-16)
det(state-18, the-17)
nmod:between(clash-12, state-18)
conj:and(church-15, state-18)
nsubj(raging-23, state-18)
punct(state-18, ,-19)
ref(state-18, which-20)
aux(raging-23, has-21)
aux(raging-23, been-22)
acl:relcl(state-18, raging-23)
case(month-26, since-24)
amod(month-26, last-25)
nmod:since(raging-23, month-26)
advmod(stepped-37, when-27)
amod(churches-29, several-28)
nsubj(stepped-37, churches-29)
punct(churches-29, ,-30)
case(Church-35, including-31)
det(Church-35, the-32)
amod(Church-35, Roman-33)
amod(Church-35, Catholic-34)
nmod:including(churches-29, Church-35)
punct(churches-29, ,-36)
acl:relcl(month-26, stepped-37)
compound:prt(stepped-37, up-38)
nmod:poss(criticism-40, their-39)
dobj(stepped-37, criticism-40)
case(apartheid-42, of-41)
nmod:of(criticism-40, apartheid-42)
punct(likely-4, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#apartheid

step :: So lawmakers themselves are stepping into the void and drafting new aid packages ./.
advmod(stepping-5, So-1)
nsubj(stepping-5, lawmakers-2)
nsubj(drafting-10, lawmakers-2)
nmod:npmod(lawmakers-2, themselves-3)
aux(stepping-5, are-4)
root(ROOT-0, stepping-5)
case(void-8, into-6)
det(void-8, the-7)
nmod:into(stepping-5, void-8)
cc(stepping-5, and-9)
conj:and(stepping-5, drafting-10)
amod(packages-13, new-11)
compound(packages-13, aid-12)
dobj(drafting-10, packages-13)
punct(stepping-5, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#lawmakers

step :: After a week of quiet climbing , Sears stepped in and Western Auto leapt 8 5 8 to 18 5 8 ./.
case(week-3, After-1)
det(week-3, a-2)
nmod:after(stepped-9, week-3)
case(climbing-6, of-4)
amod(climbing-6, quiet-5)
nmod:of(week-3, climbing-6)
punct(stepped-9, ,-7)
nsubj(stepped-9, Sears-8)
nsubj(stepped-9', Sears-8)
root(ROOT-0, stepped-9)
conj:and(stepped-9, stepped-9')
case(Auto-13, in-10)
cc(in-10, and-11)
conj:and(in-10, Western-12)
nmod:in(stepped-9, Auto-13)
nmod:western(stepped-9', Auto-13)
ccomp(stepped-9, leapt-14)
compound(5-16, 8-15)
nummod(8-17, 5-16)
dobj(leapt-14, 8-17)
case(8-21, to-18)
compound(5-20, 18-19)
nummod(8-21, 5-20)
nmod:to(leapt-14, 8-21)
punct(stepped-9, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#sears

step :: Up stepped Cabbage Patch Kids , the industry 's biggest hit ever ./.
case(Kids-5, Up-1)
amod(Kids-5, stepped-2)
compound(Kids-5, Cabbage-3)
compound(Kids-5, Patch-4)
root(ROOT-0, Kids-5)
punct(Kids-5, ,-6)
det(industry-8, the-7)
nmod:poss(hit-11, industry-8)
case(industry-8, 's-9)
amod(hit-11, biggest-10)
root(,-6, hit-11)
advmod(hit-11, ever-12)
punct(hit-11, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#kids

step :: By joining the hostile bid , Shearson stepped over the line investment banks have long considered but rarely , if ever , crossed ./.
mark(joining-2, By-1)
advcl(stepped-8, joining-2)
det(bid-5, the-3)
amod(bid-5, hostile-4)
dobj(joining-2, bid-5)
punct(stepped-8, ,-6)
nsubj(stepped-8, Shearson-7)
root(ROOT-0, stepped-8)
case(banks-13, over-9)
det(banks-13, the-10)
compound(banks-13, line-11)
compound(banks-13, investment-12)
nmod:over(stepped-8, banks-13)
aux(considered-16, have-14)
advmod(considered-16, long-15)
dep(stepped-8, considered-16)
cc(considered-16, but-17)
advmod(crossed-23, rarely-18)
punct(crossed-23, ,-19)
mark(ever-21, if-20)
dep(crossed-23, ever-21)
punct(crossed-23, ,-22)
dep(stepped-8, crossed-23)
conj:but(considered-16, crossed-23)
punct(stepped-8, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#shearson

step :: The nation 's two major opposition leaders , Kim Dae Jung and Kim Young Sam , stepped up their challenge to Mr. Roh Friday by announcing their intention to form a united party ./.
det(nation-2, The-1)
nmod:poss(leaders-7, nation-2)
case(nation-2, 's-3)
nummod(leaders-7, two-4)
amod(leaders-7, major-5)
compound(leaders-7, opposition-6)
nsubj(stepped-17, leaders-7)
punct(leaders-7, ,-8)
compound(Jung-11, Kim-9)
compound(Jung-11, Dae-10)
appos(leaders-7, Jung-11)
cc(Jung-11, and-12)
compound(Sam-15, Kim-13)
compound(Sam-15, Young-14)
appos(leaders-7, Sam-15)
conj:and(Jung-11, Sam-15)
punct(leaders-7, ,-16)
root(ROOT-0, stepped-17)
compound:prt(stepped-17, up-18)
nmod:poss(challenge-20, their-19)
dobj(stepped-17, challenge-20)
case(Roh-23, to-21)
compound(Roh-23, Mr.-22)
nmod:to(challenge-20, Roh-23)
nmod:tmod(stepped-17, Friday-24)
mark(announcing-26, by-25)
advcl(stepped-17, announcing-26)
nmod:poss(intention-28, their-27)
dobj(announcing-26, intention-28)
mark(form-30, to-29)
acl(intention-28, form-30)
det(party-33, a-31)
compound(party-33, united-32)
dobj(form-30, party-33)
punct(stepped-17, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#challenge

step :: Those progressive cities now building or planning transit systems for the next century are not viewing the scene from an ivory tower but realize , in a practical sense , that better transit is vital not only for the millions of Americans who currently step onto a transit bus or train over 8.3 billion times each year , but also to their future citizens as well ./.
det(cities-3, Those-1)
amod(cities-3, progressive-2)
nsubj(viewing-16, cities-3)
nsubj(realize-24, cities-3)
advmod(building-5, now-4)
acl(cities-3, building-5)
cc(building-5, or-6)
acl(cities-3, planning-7)
conj:or(building-5, planning-7)
compound(systems-9, transit-8)
dobj(building-5, systems-9)
case(century-13, for-10)
det(century-13, the-11)
amod(century-13, next-12)
nmod:for(building-5, century-13)
aux(viewing-16, are-14)
neg(viewing-16, not-15)
root(ROOT-0, viewing-16)
det(scene-18, the-17)
dobj(viewing-16, scene-18)
case(tower-22, from-19)
det(tower-22, an-20)
compound(tower-22, ivory-21)
nmod:from(viewing-16, tower-22)
cc(viewing-16, but-23)
conj:but(viewing-16, realize-24)
punct(realize-24, ,-25)
case(sense-29, in-26)
det(sense-29, a-27)
amod(sense-29, practical-28)
nmod:in(realize-24, sense-29)
punct(realize-24, ,-30)
mark(vital-35, that-31)
amod(transit-33, better-32)
nsubj(vital-35, transit-33)
nsubj(vital-35', transit-33)
cop(vital-35, is-34)
ccomp(realize-24, vital-35)
ccomp(realize-24, vital-35')
conj:and(vital-35, vital-35')
neg(only-37, not-36)
cc:preconj(millions-40, only-37)
case(millions-40, for-38)
det(millions-40, the-39)
nmod:for(vital-35, millions-40)
case(Americans-42, of-41)
nmod:of(millions-40, Americans-42)
nsubj(step-45, Americans-42)
ref(Americans-42, who-43)
advmod(step-45, currently-44)
acl:relcl(Americans-42, step-45)
case(bus-49, onto-46)
det(bus-49, a-47)
compound(bus-49, transit-48)
nmod:onto(step-45, bus-49)
cc(bus-49, or-50)
nmod:onto(step-45, train-51)
conj:or(bus-49, train-51)
case(times-55, over-52)
compound(billion-54, 8.3-53)
nummod(times-55, billion-54)
nmod:over(step-45, times-55)
det(year-57, each-56)
nmod:npmod(times-55, year-57)
punct(millions-40, ,-58)
cc(vital-35, but-59)
advmod(citizens-64, also-60)
case(citizens-64, to-61)
nmod:poss(citizens-64, their-62)
amod(citizens-64, future-63)
nmod:to(vital-35', citizens-64)
advmod(citizens-64, as-65)
mwe(as-65, well-66)
punct(viewing-16, .-67)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#americans

step :: A Campeau spokeswoman said First Boston stepped in with bridge financing at the last moment yesterday because Security Pacific has n't completed reviewing details of Campeau 's latest offer ./.
det(spokeswoman-3, A-1)
compound(spokeswoman-3, Campeau-2)
nsubj(said-4, spokeswoman-3)
root(ROOT-0, said-4)
compound(Boston-6, First-5)
nsubj(stepped-7, Boston-6)
ccomp(said-4, stepped-7)
compound:prt(stepped-7, in-8)
case(financing-11, with-9)
compound(financing-11, bridge-10)
nmod:with(stepped-7, financing-11)
case(moment-15, at-12)
det(moment-15, the-13)
amod(moment-15, last-14)
nmod:at(stepped-7, moment-15)
nmod:tmod(stepped-7, yesterday-16)
mark(completed-22, because-17)
compound(Pacific-19, Security-18)
nsubj(completed-22, Pacific-19)
aux(completed-22, has-20)
neg(completed-22, n't-21)
advcl(stepped-7, completed-22)
xcomp(completed-22, reviewing-23)
dobj(reviewing-23, details-24)
case(offer-29, of-25)
nmod:poss(offer-29, Campeau-26)
case(Campeau-26, 's-27)
amod(offer-29, latest-28)
nmod:of(details-24, offer-29)
punct(said-4, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#boston

step :: He and others also figure Midwesterners are more likely than other citizens to step up and buy houses and durables if the manufacturing trend holds ./.
nsubj(figure-5, He-1)
cc(He-1, and-2)
conj:and(He-1, others-3)
nsubj(figure-5, others-3)
advmod(figure-5, also-4)
root(ROOT-0, figure-5)
nsubj(likely-9, Midwesterners-6)
nsubj:xsubj(step-14, Midwesterners-6)
cop(likely-9, are-7)
advmod(likely-9, more-8)
ccomp(figure-5, likely-9)
case(citizens-12, than-10)
amod(citizens-12, other-11)
nmod:than(likely-9, citizens-12)
mark(step-14, to-13)
xcomp(likely-9, step-14)
compound:prt(step-14, up-15)
cc(step-14, and-16)
xcomp(likely-9, buy-17)
conj:and(step-14, buy-17)
dobj(step-14, houses-18)
cc(houses-18, and-19)
dobj(step-14, durables-20)
conj:and(houses-18, durables-20)
mark(holds-25, if-21)
det(trend-24, the-22)
compound(trend-24, manufacturing-23)
nsubj(holds-25, trend-24)
advcl(step-14, holds-25)
punct(figure-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#houses

step :: Mr. Dill , 48 years old , succeeds Donald K. Thostenson , 53 , who stepped down for health reasons ./.
compound(Dill-2, Mr.-1)
nsubj(succeeds-8, Dill-2)
punct(Dill-2, ,-3)
nummod(years-5, 48-4)
nmod:npmod(old-6, years-5)
amod(Dill-2, old-6)
punct(Dill-2, ,-7)
root(ROOT-0, succeeds-8)
compound(Thostenson-11, Donald-9)
compound(Thostenson-11, K.-10)
dobj(succeeds-8, Thostenson-11)
nsubj(stepped-16, Thostenson-11)
punct(Thostenson-11, ,-12)
amod(Thostenson-11, 53-13)
punct(Thostenson-11, ,-14)
ref(Thostenson-11, who-15)
acl:relcl(Thostenson-11, stepped-16)
compound:prt(stepped-16, down-17)
case(reasons-20, for-18)
compound(reasons-20, health-19)
nmod:for(stepped-16, reasons-20)
punct(succeeds-8, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#thostenson

step :: Its chairman , Bruce Judge , stepped down as chief executive of Ariadne in favor of Mr. Cafiero ./.
nmod:poss(chairman-2, Its-1)
nsubj(stepped-7, chairman-2)
punct(chairman-2, ,-3)
compound(Judge-5, Bruce-4)
appos(chairman-2, Judge-5)
punct(chairman-2, ,-6)
root(ROOT-0, stepped-7)
advmod(stepped-7, down-8)
advmod(executive-11, as-9)
amod(executive-11, chief-10)
dobj(stepped-7, executive-11)
case(Ariadne-13, of-12)
nmod:of(executive-11, Ariadne-13)
case(favor-15, in-14)
nmod:in(stepped-7, favor-15)
case(Cafiero-18, of-16)
compound(Cafiero-18, Mr.-17)
nmod:of(favor-15, Cafiero-18)
punct(stepped-7, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#ariadne

step :: But when Sun became larger and `` decision making slowed , '' Mr. Khosla recalled , he stepped back from day-to-day management ./.
cc(recalled-15, But-1)
advmod(became-4, when-2)
nsubj(became-4, Sun-3)
dep(recalled-15, became-4)
xcomp(became-4, larger-5)
cc(became-4, and-6)
punct(slowed-10, ``-7)
compound(making-9, decision-8)
nsubj(slowed-10, making-9)
conj:and(became-4, slowed-10)
dep(recalled-15, slowed-10)
punct(recalled-15, ,-11)
punct(recalled-15, ''-12)
compound(Khosla-14, Mr.-13)
nsubj(recalled-15, Khosla-14)
root(ROOT-0, recalled-15)
punct(recalled-15, ,-16)
nsubj(stepped-18, he-17)
ccomp(recalled-15, stepped-18)
advmod(stepped-18, back-19)
case(management-22, from-20)
amod(management-22, day-to-day-21)
nmod:from(stepped-18, management-22)
punct(recalled-15, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#he

step :: If a lot of order-takers are drumming their fingers , the hostess can step up her spiel or drop the price ./.
mark(drumming-7, If-1)
det(lot-3, a-2)
nsubj(drumming-7, lot-3)
case(order-takers-5, of-4)
nmod:of(lot-3, order-takers-5)
aux(drumming-7, are-6)
advcl(step-14, drumming-7)
nmod:poss(fingers-9, their-8)
dobj(drumming-7, fingers-9)
punct(step-14, ,-10)
det(hostess-12, the-11)
nsubj(step-14, hostess-12)
nsubj(drop-19, hostess-12)
aux(step-14, can-13)
root(ROOT-0, step-14)
compound:prt(step-14, up-15)
nmod:poss(spiel-17, her-16)
dobj(step-14, spiel-17)
cc(step-14, or-18)
conj:or(step-14, drop-19)
det(price-21, the-20)
dobj(drop-19, price-21)
punct(step-14, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#spiel

step :: By taking full control of AEG , Daimler can step up implementation of its strategy of integrating AEG 's electronics business into its automotive and technology lines and reducing AEG 's former emphasis in consumer appliances ./.
mark(taking-2, By-1)
advcl(step-10, taking-2)
amod(control-4, full-3)
dobj(taking-2, control-4)
case(AEG-6, of-5)
nmod:of(control-4, AEG-6)
punct(step-10, ,-7)
nsubj(step-10, Daimler-8)
aux(step-10, can-9)
root(ROOT-0, step-10)
compound:prt(step-10, up-11)
dobj(step-10, implementation-12)
case(strategy-15, of-13)
nmod:poss(strategy-15, its-14)
nmod:of(implementation-12, strategy-15)
mark(integrating-17, of-16)
acl(strategy-15, integrating-17)
nmod:poss(business-21, AEG-18)
case(AEG-18, 's-19)
compound(business-21, electronics-20)
dobj(integrating-17, business-21)
case(lines-27, into-22)
nmod:poss(lines-27, its-23)
amod(lines-27, automotive-24)
cc(automotive-24, and-25)
conj:and(automotive-24, technology-26)
amod(lines-27, technology-26)
nmod:into(integrating-17, lines-27)
cc(integrating-17, and-28)
acl(strategy-15, reducing-29)
conj:and(integrating-17, reducing-29)
nmod:poss(emphasis-33, AEG-30)
case(AEG-30, 's-31)
amod(emphasis-33, former-32)
dobj(reducing-29, emphasis-33)
case(appliances-36, in-34)
compound(appliances-36, consumer-35)
nmod:in(emphasis-33, appliances-36)
punct(step-10, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#strategy

step :: -- In January , Carter-Anne Nadonley of Bethesda , Md . , watched a 1979 Lincoln she had just stepped out of start backing up and then circle backward for three hours , until a tow-truck operator corraled it ./.
root(ROOT-0, ---1)
case(January-3, In-2)
root(---1, January-3)
punct(January-3, ,-4)
compound(Nadonley-6, Carter-Anne-5)
root(,-4, Nadonley-6)
case(Bethesda-8, of-7)
nmod:of(Nadonley-6, Bethesda-8)
punct(Bethesda-8, ,-9)
appos(Bethesda-8, Md-10)
punct(Nadonley-6, .-11)
punct(watched-2, ,-1)
root(ROOT-0, watched-2)
det(Lincoln-5, a-3)
nummod(Lincoln-5, 1979-4)
nsubj(backing-13, Lincoln-5)
nsubj(stepped-9, she-6)
aux(stepped-9, had-7)
advmod(stepped-9, just-8)
acl:relcl(Lincoln-5, stepped-9)
case(start-12, out-10)
mwe(out-10, of-11)
nmod:out_of(stepped-9, start-12)
dep(watched-2, backing-13)
compound:prt(backing-13, up-14)
cc(backing-13, and-15)
advmod(circle-17, then-16)
dep(watched-2, circle-17)
conj:and(backing-13, circle-17)
advmod(circle-17, backward-18)
case(hours-21, for-19)
nummod(hours-21, three-20)
nmod:for(circle-17, hours-21)
punct(watched-2, ,-22)
mark(corraled-27, until-23)
det(operator-26, a-24)
compound(operator-26, tow-truck-25)
nsubj(corraled-27, operator-26)
advcl(watched-2, corraled-27)
dobj(corraled-27, it-28)
punct(watched-2, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#she

step :: And everywhere Mr. Bush traveled last week , reporters demanded to know if the vice president believes Attorney General Edwin Meese should step down ./.
cc(traveled-5, And-1)
advmod(traveled-5, everywhere-2)
compound(Bush-4, Mr.-3)
nsubj(traveled-5, Bush-4)
root(ROOT-0, traveled-5)
amod(week-7, last-6)
nmod:tmod(traveled-5, week-7)
punct(traveled-5, ,-8)
nsubj(demanded-10, reporters-9)
nsubj:xsubj(know-12, reporters-9)
parataxis(traveled-5, demanded-10)
mark(know-12, to-11)
xcomp(demanded-10, know-12)
mark(believes-17, if-13)
det(president-16, the-14)
compound(president-16, vice-15)
nsubj(believes-17, president-16)
advcl(know-12, believes-17)
compound(Meese-21, Attorney-18)
amod(Meese-21, General-19)
compound(Meese-21, Edwin-20)
nsubj(step-23, Meese-21)
aux(step-23, should-22)
ccomp(believes-17, step-23)
compound:prt(step-23, down-24)
punct(traveled-5, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#meese

step :: Mr. Owen , who has been with the company since it was awarded to him and others in a court battle in 1976 , said he is stepping down because `` I 've got a number of other projects I want to work on , and I 'm getting married ./.
compound(Owen-2, Mr.-1)
nsubj(company-9, Owen-2)
nsubj(said-25, Owen-2)
punct(Owen-2, ,-3)
ref(Owen-2, who-4)
aux(company-9, has-5)
cop(company-9, been-6)
case(company-9, with-7)
det(company-9, the-8)
acl:relcl(Owen-2, company-9)
mark(awarded-13, since-10)
nsubjpass(awarded-13, it-11)
auxpass(awarded-13, was-12)
advcl(company-9, awarded-13)
case(him-15, to-14)
nmod:to(awarded-13, him-15)
cc(him-15, and-16)
nmod:to(awarded-13, others-17)
conj:and(him-15, others-17)
case(battle-21, in-18)
det(battle-21, a-19)
compound(battle-21, court-20)
nmod:in(awarded-13, battle-21)
case(1976-23, in-22)
nmod:in(battle-21, 1976-23)
punct(Owen-2, ,-24)
root(ROOT-0, said-25)
nsubj(stepping-28, he-26)
aux(stepping-28, is-27)
ccomp(said-25, stepping-28)
compound:prt(stepping-28, down-29)
mark(got-34, because-30)
punct(got-34, ``-31)
nsubj(got-34, I-32)
aux(got-34, 've-33)
advcl(stepping-28, got-34)
det(number-36, a-35)
dobj(got-34, number-36)
case(projects-39, of-37)
amod(projects-39, other-38)
nmod:of(number-36, projects-39)
nsubj(want-41, I-40)
nsubj:xsubj(work-43, I-40)
acl:relcl(projects-39, want-41)
mark(work-43, to-42)
xcomp(want-41, work-43)
compound:prt(work-43, on-44)
punct(stepping-28, ,-45)
cc(stepping-28, and-46)
nsubjpass(married-50, I-47)
aux(married-50, 'm-48)
auxpass(married-50, getting-49)
ccomp(said-25, married-50)
conj:and(stepping-28, married-50)
punct(said-25, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#he

step :: Gillette Co. stepped up its attack on Coniston Partners , a New York investment group seeking four seats on Gillette 's board , saying Coniston acts on behalf of `` a web of as yet unidentified and undisclosed investors , '' including foreigners ./.
compound(Co.-2, Gillette-1)
nsubj(stepped-3, Co.-2)
root(ROOT-0, stepped-3)
compound:prt(stepped-3, up-4)
nmod:poss(attack-6, its-5)
dobj(stepped-3, attack-6)
case(Partners-9, on-7)
compound(Partners-9, Coniston-8)
nmod:on(attack-6, Partners-9)
punct(Partners-9, ,-10)
det(group-15, a-11)
compound(group-15, New-12)
compound(group-15, York-13)
compound(group-15, investment-14)
appos(Partners-9, group-15)
acl(group-15, seeking-16)
nummod(seats-18, four-17)
dobj(seeking-16, seats-18)
case(board-22, on-19)
nmod:poss(board-22, Gillette-20)
case(Gillette-20, 's-21)
nmod:on(seats-18, board-22)
punct(stepped-3, ,-23)
advcl(stepped-3, saying-24)
nsubj(acts-26, Coniston-25)
ccomp(saying-24, acts-26)
case(web-32, on-27)
mwe(on-27, behalf-28)
mwe(on-27, of-29)
punct(web-32, ``-30)
det(web-32, a-31)
nmod:on_behalf_of(acts-26, web-32)
case(investors-39, of-33)
advmod(yet-35, as-34)
advmod(unidentified-36, yet-35)
amod(investors-39, unidentified-36)
cc(unidentified-36, and-37)
conj:and(unidentified-36, undisclosed-38)
amod(investors-39, undisclosed-38)
nmod:of(web-32, investors-39)
punct(web-32, ,-40)
punct(web-32, ''-41)
case(foreigners-43, including-42)
nmod:including(web-32, foreigners-43)
punct(stepped-3, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#attack

step :: Southdown Inc . , stepping up its efforts to take over Moore McCormack Resources Inc . , said it began soliciting consents to have Moore McCormack cancel its poison pill ./.
compound(Inc-2, Southdown-1)
root(ROOT-0, Inc-2)
punct(Inc-2, .-3)
root(ROOT-0, ,-1)
root(,-1, stepping-2)
compound:prt(stepping-2, up-3)
nmod:poss(efforts-5, its-4)
dobj(stepping-2, efforts-5)
mark(take-7, to-6)
acl(efforts-5, take-7)
compound:prt(take-7, over-8)
compound(Inc-12, Moore-9)
compound(Inc-12, McCormack-10)
compound(Inc-12, Resources-11)
dobj(take-7, Inc-12)
punct(stepping-2, .-13)
punct(said-2, ,-1)
root(ROOT-0, said-2)
nsubj(began-4, it-3)
ccomp(said-2, began-4)
xcomp(began-4, soliciting-5)
dobj(soliciting-5, consents-6)
nsubj:xsubj(have-8, consents-6)
mark(have-8, to-7)
xcomp(soliciting-5, have-8)
compound(McCormack-10, Moore-9)
nsubj(cancel-11, McCormack-10)
ccomp(have-8, cancel-11)
nmod:poss(pill-14, its-12)
compound(pill-14, poison-13)
dobj(cancel-11, pill-14)
punct(said-2, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#efforts

step :: He rejects the suggestion that Gen. Noriega might have to step down ./.
nsubj(rejects-2, He-1)
root(ROOT-0, rejects-2)
det(suggestion-4, the-3)
dobj(rejects-2, suggestion-4)
mark(have-9, that-5)
compound(Noriega-7, Gen.-6)
nsubj(have-9, Noriega-7)
nsubj:xsubj(step-11, Noriega-7)
aux(have-9, might-8)
ccomp(suggestion-4, have-9)
mark(step-11, to-10)
xcomp(have-9, step-11)
compound:prt(step-11, down-12)
punct(rejects-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#noriega

step :: As previously reported , First RepublicBank Dallas had an unusually steep $ 600 million drop in average deposits one week last month after a rating service downgraded its deposit quality and reports that federal regulators stepped up scrutiny of the ailing banking concern ./.
mark(reported-3, As-1)
advmod(reported-3, previously-2)
advcl(had-8, reported-3)
punct(had-8, ,-4)
advmod(Dallas-7, First-5)
amod(Dallas-7, RepublicBank-6)
nsubj(had-8, Dallas-7)
root(ROOT-0, had-8)
det(drop-15, an-9)
advmod(steep-11, unusually-10)
amod(drop-15, steep-11)
amod(drop-15, $-12)
compound(million-14, 600-13)
nummod($-12, million-14)
dobj(had-8, drop-15)
case(deposits-18, in-16)
amod(deposits-18, average-17)
nmod:in(drop-15, deposits-18)
nummod(week-20, one-19)
nmod:tmod(drop-15, week-20)
amod(month-22, last-21)
dep(week-20, month-22)
mark(downgraded-27, after-23)
det(service-26, a-24)
compound(service-26, rating-25)
nsubj(downgraded-27, service-26)
advcl(drop-15, downgraded-27)
nmod:poss(quality-30, its-28)
compound(quality-30, deposit-29)
dobj(downgraded-27, quality-30)
cc(downgraded-27, and-31)
advcl(drop-15, reports-32)
conj:and(downgraded-27, reports-32)
mark(stepped-36, that-33)
amod(regulators-35, federal-34)
nsubj(stepped-36, regulators-35)
ccomp(reports-32, stepped-36)
compound:prt(stepped-36, up-37)
dobj(stepped-36, scrutiny-38)
case(concern-43, of-39)
det(concern-43, the-40)
amod(concern-43, ailing-41)
compound(concern-43, banking-42)
nmod:of(scrutiny-38, concern-43)
punct(had-8, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#concern

step :: On Oct. 20 , when the financial system was on the brink of a standstill because of potential defaults , the Federal Reserve stepped in to nip the crisis in the bud ./.
case(Oct.-2, On-1)
nmod:on(stepped-24, Oct.-2)
nummod(Oct.-2, 20-3)
punct(Oct.-2, ,-4)
advmod(brink-12, when-5)
det(system-8, the-6)
amod(system-8, financial-7)
nsubj(brink-12, system-8)
cop(brink-12, was-9)
case(brink-12, on-10)
det(brink-12, the-11)
acl:relcl(Oct.-2, brink-12)
case(standstill-15, of-13)
det(standstill-15, a-14)
nmod:of(brink-12, standstill-15)
case(defaults-19, because-16)
mwe(because-16, of-17)
amod(defaults-19, potential-18)
nmod:because_of(brink-12, defaults-19)
punct(stepped-24, ,-20)
det(Reserve-23, the-21)
compound(Reserve-23, Federal-22)
nsubj(stepped-24, Reserve-23)
root(ROOT-0, stepped-24)
advmod(stepped-24, in-25)
case(nip-27, to-26)
nmod:to(stepped-24, nip-27)
det(crisis-29, the-28)
dobj(stepped-24, crisis-29)
case(bud-32, in-30)
det(bud-32, the-31)
nmod:in(crisis-29, bud-32)
punct(stepped-24, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#crisis

step :: `` Meese 's pudgy shape and face give him no advantage at all , '' but `` Baker looks like someone who has just stepped out of Gentlemen 's Quarterly . ''/''
punct(looks-19, ``-1)
nmod:poss(shape-5, Meese-2)
case(Meese-2, 's-3)
amod(shape-5, pudgy-4)
nsubj(give-8, shape-5)
cc(shape-5, and-6)
conj:and(shape-5, face-7)
nsubj(give-8, face-7)
ccomp(looks-19, give-8)
iobj(give-8, him-9)
neg(advantage-11, no-10)
dobj(give-8, advantage-11)
case(all-13, at-12)
nmod:at(advantage-11, all-13)
punct(looks-19, ,-14)
punct(looks-19, ''-15)
cc(looks-19, but-16)
punct(looks-19, ``-17)
nsubj(looks-19, Baker-18)
root(ROOT-0, looks-19)
case(someone-21, like-20)
nmod:like(looks-19, someone-21)
nsubj(stepped-25, someone-21)
ref(someone-21, who-22)
aux(stepped-25, has-23)
advmod(stepped-25, just-24)
acl:relcl(someone-21, stepped-25)
case(Quarterly-30, out-26)
mwe(out-26, of-27)
nmod:poss(Quarterly-30, Gentlemen-28)
case(Gentlemen-28, 's-29)
nmod:out_of(stepped-25, Quarterly-30)
punct(looks-19, .-31)
punct(looks-19, ''-32)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: step#someone

step :: FIAT S.P.A . , the Italian auto maker , said it agreed to step up its collaboration with CIA. TELEFONICA NACIONAL DE ESPANA S.A. of Spain in the manufacturing of telecommunications equipment ./.
compound(S.P.A-2, FIAT-1)
root(ROOT-0, S.P.A-2)
punct(S.P.A-2, .-3)
punct(said-7, ,-1)
det(maker-5, the-2)
amod(maker-5, Italian-3)
compound(maker-5, auto-4)
nsubj(said-7, maker-5)
punct(said-7, ,-6)
root(ROOT-0, said-7)
nsubj(agreed-9, it-8)
nsubj:xsubj(step-11, it-8)
ccomp(said-7, agreed-9)
mark(step-11, to-10)
xcomp(agreed-9, step-11)
compound:prt(step-11, up-12)
nmod:poss(collaboration-14, its-13)
dobj(step-11, collaboration-14)
case(CIA-16, with-15)
nmod:with(collaboration-14, CIA-16)
punct(said-7, .-17)
compound(NACIONAL-2, TELEFONICA-1)
root(ROOT-0, NACIONAL-2)
case(S.A.-5, DE-3)
compound(S.A.-5, ESPANA-4)
nmod:de(NACIONAL-2, S.A.-5)
case(Spain-7, of-6)
nmod:of(S.A.-5, Spain-7)
case(manufacturing-10, in-8)
det(manufacturing-10, the-9)
nmod:in(NACIONAL-2, manufacturing-10)
case(equipment-13, of-11)
compound(equipment-13, telecommunications-12)
nmod:of(manufacturing-10, equipment-13)
punct(NACIONAL-2, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#collaboration

step :: Black & Decker Corp. stepped up pressure on American Standard Inc . , indicating that it might further sweeten its $ 65-a-share bid if financial information supports a higher figure ./.
compound(Corp.-4, Black-1)
cc(Black-1, &-2)
conj:&(Black-1, Decker-3)
compound(Corp.-4, Decker-3)
nsubj(stepped-5, Corp.-4)
root(ROOT-0, stepped-5)
compound:prt(stepped-5, up-6)
dobj(stepped-5, pressure-7)
case(Inc-11, on-8)
compound(Inc-11, American-9)
compound(Inc-11, Standard-10)
nmod:on(pressure-7, Inc-11)
punct(stepped-5, .-12)
root(ROOT-0, ,-1)
root(,-1, indicating-2)
mark(sweeten-7, that-3)
nsubj(sweeten-7, it-4)
aux(sweeten-7, might-5)
advmod(sweeten-7, further-6)
ccomp(indicating-2, sweeten-7)
nmod:poss(bid-11, its-8)
amod(bid-11, $-9)
dep($-9, 65-a-share-10)
dobj(sweeten-7, bid-11)
mark(supports-15, if-12)
amod(information-14, financial-13)
nsubj(supports-15, information-14)
advcl(sweeten-7, supports-15)
det(figure-18, a-16)
amod(figure-18, higher-17)
dobj(supports-15, figure-18)
punct(indicating-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#pressure

step :: `` There is a weak-minded view that competitors have a moral obligation to step back '' and allow an official sponsor to reap all the benefits from a special event , says Jerry Welsh , former vice president for marketing at E.F. Hutton Group Inc . , who claims to have coined the phrase `` ambush marketing . ''/''
punct(says-32, ``-1)
expl(is-3, There-2)
ccomp(says-32, is-3)
det(view-6, a-4)
amod(view-6, weak-minded-5)
nsubj(is-3, view-6)
mark(have-9, that-7)
nsubj(have-9, competitors-8)
ccomp(view-6, have-9)
det(obligation-12, a-10)
amod(obligation-12, moral-11)
dobj(have-9, obligation-12)
mark(step-14, to-13)
acl(obligation-12, step-14)
advmod(step-14, back-15)
punct(step-14, ''-16)
cc(step-14, and-17)
acl(obligation-12, allow-18)
conj:and(step-14, allow-18)
det(sponsor-21, an-19)
amod(sponsor-21, official-20)
dobj(allow-18, sponsor-21)
nsubj:xsubj(reap-23, sponsor-21)
mark(reap-23, to-22)
xcomp(allow-18, reap-23)
det:predet(benefits-26, all-24)
det(benefits-26, the-25)
dobj(reap-23, benefits-26)
case(event-30, from-27)
det(event-30, a-28)
amod(event-30, special-29)
nmod:from(reap-23, event-30)
punct(says-32, ,-31)
root(ROOT-0, says-32)
compound(Welsh-34, Jerry-33)
nsubj(says-32, Welsh-34)
punct(Welsh-34, ,-35)
amod(president-38, former-36)
compound(president-38, vice-37)
appos(Welsh-34, president-38)
case(marketing-40, for-39)
nmod:for(president-38, marketing-40)
case(Inc-45, at-41)
compound(Inc-45, E.F.-42)
compound(Inc-45, Hutton-43)
compound(Inc-45, Group-44)
nmod:at(president-38, Inc-45)
punct(says-32, .-46)
punct(claims-3, ,-1)
nsubj(claims-3, who-2)
nsubj:xsubj(coined-6, who-2)
root(ROOT-0, claims-3)
mark(coined-6, to-4)
aux(coined-6, have-5)
xcomp(claims-3, coined-6)
det(marketing-11, the-7)
compound(marketing-11, phrase-8)
punct(marketing-11, ``-9)
compound(marketing-11, ambush-10)
dobj(coined-6, marketing-11)
punct(claims-3, .-12)
punct(claims-3, ''-13)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

step :: But Philips said it would step up efforts to restructure its medical division so that it could be competitive on its own ./.
cc(said-3, But-1)
nsubj(said-3, Philips-2)
root(ROOT-0, said-3)
nsubj(step-6, it-4)
aux(step-6, would-5)
ccomp(said-3, step-6)
compound:prt(step-6, up-7)
dobj(step-6, efforts-8)
mark(restructure-10, to-9)
acl(efforts-8, restructure-10)
nmod:poss(division-13, its-11)
amod(division-13, medical-12)
dobj(restructure-10, division-13)
mark(competitive-19, so-14)
mwe(so-14, that-15)
nsubj(competitive-19, it-16)
aux(competitive-19, could-17)
cop(competitive-19, be-18)
advcl(step-6, competitive-19)
case(own-22, on-20)
nmod:poss(own-22, its-21)
nmod:on(competitive-19, own-22)
punct(said-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#efforts

step :: The Reagan administration is pushing for Noriega to step down and permit free elections ./.
det(administration-3, The-1)
compound(administration-3, Reagan-2)
nsubj(pushing-5, administration-3)
aux(pushing-5, is-4)
root(ROOT-0, pushing-5)
mark(step-9, for-6)
nsubj(step-9, Noriega-7)
nsubj(permit-12, Noriega-7)
mark(step-9, to-8)
advcl(pushing-5, step-9)
advmod(step-9, down-10)
cc(step-9, and-11)
advcl(pushing-5, permit-12)
conj:and(step-9, permit-12)
amod(elections-14, free-13)
dobj(permit-12, elections-14)
punct(pushing-5, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#noriega

step :: Generale de Belgique 's president , Rene Lamy , conceded that he could be forced to resign as a result of the demands that would be made by the new shareholders , but said he would step down willingly if it would ensure that the company would remain in Belgian hands ./.
compound(Belgique-3, Generale-1)
compound(Belgique-3, de-2)
nmod:poss(president-5, Belgique-3)
case(Belgique-3, 's-4)
nsubj(conceded-10, president-5)
nsubj(said-34, president-5)
punct(president-5, ,-6)
compound(Lamy-8, Rene-7)
appos(president-5, Lamy-8)
punct(president-5, ,-9)
root(ROOT-0, conceded-10)
mark(forced-15, that-11)
nsubjpass(forced-15, he-12)
nsubj:xsubj(resign-17, he-12)
aux(forced-15, could-13)
auxpass(forced-15, be-14)
ccomp(conceded-10, forced-15)
mark(resign-17, to-16)
xcomp(forced-15, resign-17)
case(result-20, as-18)
det(result-20, a-19)
nmod:as(resign-17, result-20)
case(demands-23, of-21)
det(demands-23, the-22)
nmod:of(result-20, demands-23)
nsubjpass(made-27, demands-23)
ref(demands-23, that-24)
aux(made-27, would-25)
auxpass(made-27, be-26)
acl:relcl(demands-23, made-27)
case(shareholders-31, by-28)
det(shareholders-31, the-29)
amod(shareholders-31, new-30)
nmod:agent(made-27, shareholders-31)
punct(conceded-10, ,-32)
cc(conceded-10, but-33)
conj:but(conceded-10, said-34)
nsubj(step-37, he-35)
aux(step-37, would-36)
ccomp(said-34, step-37)
compound:prt(step-37, down-38)
advmod(step-37, willingly-39)
mark(ensure-43, if-40)
nsubj(ensure-43, it-41)
aux(ensure-43, would-42)
advcl(step-37, ensure-43)
mark(remain-48, that-44)
det(company-46, the-45)
nsubj(remain-48, company-46)
aux(remain-48, would-47)
ccomp(ensure-43, remain-48)
case(hands-51, in-49)
amod(hands-51, Belgian-50)
nmod:in(remain-48, hands-51)
punct(conceded-10, .-52)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#he

step :: It 's not that Mr. Ferri is n't trying to step aside ./.
nsubj('s-2, It-1)
root(ROOT-0, 's-2)
neg('s-2, not-3)
mark(trying-9, that-4)
compound(Ferri-6, Mr.-5)
nsubj(trying-9, Ferri-6)
nsubj:xsubj(step-11, Ferri-6)
aux(trying-9, is-7)
neg(trying-9, n't-8)
ccomp('s-2, trying-9)
mark(step-11, to-10)
xcomp(trying-9, step-11)
advmod(step-11, aside-12)
punct('s-2, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#ferri

step :: Eastern Airlines Inc. is stepping up its marketing war in the busy , competitive Northeast shuttle-service market , offering discounts of as much as 30 % for passengers buying tickets in bulk ./.
compound(Inc.-3, Eastern-1)
compound(Inc.-3, Airlines-2)
nsubj(stepping-5, Inc.-3)
aux(stepping-5, is-4)
root(ROOT-0, stepping-5)
compound:prt(stepping-5, up-6)
nmod:poss(war-9, its-7)
compound(war-9, marketing-8)
dobj(stepping-5, war-9)
case(market-17, in-10)
det(market-17, the-11)
amod(market-17, busy-12)
punct(market-17, ,-13)
amod(market-17, competitive-14)
compound(market-17, Northeast-15)
compound(market-17, shuttle-service-16)
nmod:in(war-9, market-17)
punct(stepping-5, ,-18)
advcl(stepping-5, offering-19)
dobj(offering-19, discounts-20)
case(%-26, of-21)
advmod(30-25, as-22)
advmod(30-25, much-23)
advmod(30-25, as-24)
nummod(%-26, 30-25)
nmod:of(discounts-20, %-26)
case(passengers-28, for-27)
nmod:for(discounts-20, passengers-28)
acl(passengers-28, buying-29)
dobj(buying-29, tickets-30)
case(bulk-32, in-31)
nmod:in(buying-29, bulk-32)
punct(stepping-5, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#war

step :: But in recent weeks , it has stepped up criticism of the Aquino government and attracted a cross-section of old-time politicians ./.
cc(stepped-8, But-1)
case(weeks-4, in-2)
amod(weeks-4, recent-3)
nmod:in(stepped-8, weeks-4)
punct(stepped-8, ,-5)
nsubj(stepped-8, it-6)
nsubj(attracted-16, it-6)
aux(stepped-8, has-7)
root(ROOT-0, stepped-8)
compound:prt(stepped-8, up-9)
dobj(stepped-8, criticism-10)
case(government-14, of-11)
det(government-14, the-12)
compound(government-14, Aquino-13)
nmod:of(criticism-10, government-14)
cc(stepped-8, and-15)
conj:and(stepped-8, attracted-16)
det(cross-section-18, a-17)
dobj(attracted-16, cross-section-18)
case(politicians-21, of-19)
amod(politicians-21, old-time-20)
nmod:of(cross-section-18, politicians-21)
punct(stepped-8, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#government

step :: When meetings are winding down , one software developer sometimes steps into the hall and tells his driver to be ready to pick him up ./.
advmod(winding-4, When-1)
nsubj(winding-4, meetings-2)
aux(winding-4, are-3)
advcl(steps-11, winding-4)
advmod(winding-4, down-5)
punct(steps-11, ,-6)
nummod(developer-9, one-7)
compound(developer-9, software-8)
nsubj(steps-11, developer-9)
nsubj(tells-16, developer-9)
advmod(steps-11, sometimes-10)
root(ROOT-0, steps-11)
case(hall-14, into-12)
det(hall-14, the-13)
nmod:into(steps-11, hall-14)
cc(steps-11, and-15)
conj:and(steps-11, tells-16)
nmod:poss(driver-18, his-17)
dobj(tells-16, driver-18)
nsubj:xsubj(ready-21, driver-18)
mark(ready-21, to-19)
cop(ready-21, be-20)
xcomp(tells-16, ready-21)
mark(pick-23, to-22)
xcomp(ready-21, pick-23)
dobj(pick-23, him-24)
compound:prt(pick-23, up-25)
punct(steps-11, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#developer

step :: When he steps into BG 's shoes on Saturday , it will be in a Carnegie Hall vastly different from the one Mr. Goodman first scaled in 1938 ./.
advmod(steps-3, When-1)
nsubj(steps-3, he-2)
advcl(Hall-17, steps-3)
case(shoes-7, into-4)
nmod:poss(shoes-7, BG-5)
case(BG-5, 's-6)
nmod:into(steps-3, shoes-7)
case(Saturday-9, on-8)
nmod:on(steps-3, Saturday-9)
punct(Hall-17, ,-10)
nsubj(Hall-17, it-11)
aux(Hall-17, will-12)
cop(Hall-17, be-13)
case(Hall-17, in-14)
det(Hall-17, a-15)
compound(Hall-17, Carnegie-16)
root(ROOT-0, Hall-17)
advmod(different-19, vastly-18)
dep(scaled-26, different-19)
case(first-25, from-20)
det(first-25, the-21)
nummod(first-25, one-22)
compound(first-25, Mr.-23)
compound(first-25, Goodman-24)
nmod:from(different-19, first-25)
dep(Hall-17, scaled-26)
case(1938-28, in-27)
nmod:in(scaled-26, 1938-28)
punct(Hall-17, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#he

step :: Both the government and private industry have stepped up efforts to recruit back to Korea scientists who were trained and then stayed abroad ./.
cc:preconj(government-3, Both-1)
det(government-3, the-2)
nsubj(stepped-8, government-3)
cc(government-3, and-4)
amod(industry-6, private-5)
conj:and(government-3, industry-6)
nsubj(stepped-8, industry-6)
aux(stepped-8, have-7)
root(ROOT-0, stepped-8)
compound:prt(stepped-8, up-9)
dobj(stepped-8, efforts-10)
mark(recruit-12, to-11)
acl(efforts-10, recruit-12)
advmod(recruit-12, back-13)
case(scientists-16, to-14)
compound(scientists-16, Korea-15)
nmod:to(back-13, scientists-16)
nsubjpass(trained-19, scientists-16)
nsubjpass(stayed-22, scientists-16)
ref(scientists-16, who-17)
auxpass(trained-19, were-18)
acl:relcl(scientists-16, trained-19)
cc(trained-19, and-20)
advmod(stayed-22, then-21)
acl:relcl(scientists-16, stayed-22)
conj:and(trained-19, stayed-22)
advmod(stayed-22, abroad-23)
punct(stepped-8, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#efforts

step :: That group maintains Forstmann Little had agreed to step aside if it did n't join in the management-Shearson bid ./.
det(group-2, That-1)
nsubj(maintains-3, group-2)
root(ROOT-0, maintains-3)
compound(Little-5, Forstmann-4)
nsubj(agreed-7, Little-5)
nsubj:xsubj(step-9, Little-5)
aux(agreed-7, had-6)
ccomp(maintains-3, agreed-7)
mark(step-9, to-8)
xcomp(agreed-7, step-9)
advmod(step-9, aside-10)
mark(join-15, if-11)
nsubj(join-15, it-12)
aux(join-15, did-13)
neg(join-15, n't-14)
advcl(agreed-7, join-15)
case(bid-19, in-16)
det(bid-19, the-17)
compound(bid-19, management-Shearson-18)
nmod:in(join-15, bid-19)
punct(maintains-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#little

step :: Two former TWA executives are also said to be interested in making an offer for TWA. Mr. Corr , who will step down as president at the end of the month , has in the past sought financial backing for such an offer ./.
nummod(executives-4, Two-1)
amod(executives-4, former-2)
compound(executives-4, TWA-3)
nsubjpass(said-7, executives-4)
nsubj:xsubj(interested-10, executives-4)
auxpass(said-7, are-5)
advmod(said-7, also-6)
root(ROOT-0, said-7)
mark(interested-10, to-8)
cop(interested-10, be-9)
xcomp(said-7, interested-10)
mark(making-12, in-11)
advcl(interested-10, making-12)
det(offer-14, an-13)
dobj(making-12, offer-14)
case(TWA-16, for-15)
nmod:for(offer-14, TWA-16)
punct(said-7, .-17)
compound(Corr-2, Mr.-1)
nsubj(step-6, Corr-2)
nsubj(has-17, Corr-2)
punct(Corr-2, ,-3)
ref(Corr-2, who-4)
aux(step-6, will-5)
acl:relcl(Corr-2, step-6)
compound:prt(step-6, down-7)
case(president-9, as-8)
nmod:as(step-6, president-9)
case(end-12, at-10)
det(end-12, the-11)
nmod:at(step-6, end-12)
case(month-15, of-13)
det(month-15, the-14)
nmod:of(end-12, month-15)
punct(Corr-2, ,-16)
root(ROOT-0, has-17)
case(backing-23, in-18)
det(backing-23, the-19)
amod(backing-23, past-20)
amod(backing-23, sought-21)
amod(backing-23, financial-22)
nmod:in(has-17, backing-23)
case(offer-27, for-24)
amod(offer-27, such-25)
det(offer-27, an-26)
nmod:for(backing-23, offer-27)
punct(has-17, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#corr

step :: The central banks may have to step up their efforts to support the dollar if new U.S. employment figures disappoint strongly bearish players this week ./.
det(banks-3, The-1)
amod(banks-3, central-2)
nsubj(have-5, banks-3)
nsubj:xsubj(step-7, banks-3)
aux(have-5, may-4)
root(ROOT-0, have-5)
mark(step-7, to-6)
xcomp(have-5, step-7)
compound:prt(step-7, up-8)
nmod:poss(efforts-10, their-9)
dobj(step-7, efforts-10)
mark(support-12, to-11)
acl(efforts-10, support-12)
det(dollar-14, the-13)
dobj(support-12, dollar-14)
mark(disappoint-20, if-15)
amod(figures-19, new-16)
compound(figures-19, U.S.-17)
compound(figures-19, employment-18)
nsubj(disappoint-20, figures-19)
advcl(support-12, disappoint-20)
advmod(bearish-22, strongly-21)
amod(players-23, bearish-22)
dobj(disappoint-20, players-23)
det(week-25, this-24)
nmod:tmod(disappoint-20, week-25)
punct(have-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#efforts

step :: Tyson Foods Inc. stepped up its pursuit of Holly Farms Corp . , launching a hostile $ 52-a-share tender offer to acquire the chicken producer for about $ 941 million ./.
compound(Inc.-3, Tyson-1)
compound(Inc.-3, Foods-2)
nsubj(stepped-4, Inc.-3)
root(ROOT-0, stepped-4)
compound:prt(stepped-4, up-5)
nmod:poss(pursuit-7, its-6)
dobj(stepped-4, pursuit-7)
case(Corp-11, of-8)
compound(Corp-11, Holly-9)
compound(Corp-11, Farms-10)
nmod:of(pursuit-7, Corp-11)
punct(stepped-4, .-12)
root(ROOT-0, ,-1)
root(,-1, launching-2)
det(offer-8, a-3)
amod(offer-8, hostile-4)
amod(offer-8, $-5)
dep($-5, 52-a-share-6)
compound(offer-8, tender-7)
dobj(launching-2, offer-8)
mark(acquire-10, to-9)
acl(offer-8, acquire-10)
det(producer-13, the-11)
compound(producer-13, chicken-12)
dobj(acquire-10, producer-13)
case($-16, for-14)
advmod($-16, about-15)
nmod:for(acquire-10, $-16)
compound(million-18, 941-17)
nummod($-16, million-18)
punct(launching-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#corp

step :: Judge Pollack 's refusal to step aside voluntarily sets the stage for a new round of legal battles between defense attorneys and the judge ./.
compound(Pollack-2, Judge-1)
nmod:poss(refusal-4, Pollack-2)
case(Pollack-2, 's-3)
root(ROOT-0, refusal-4)
mark(step-6, to-5)
acl(refusal-4, step-6)
advmod(step-6, aside-7)
advmod(sets-9, voluntarily-8)
dep(step-6, sets-9)
det(stage-11, the-10)
dobj(sets-9, stage-11)
case(round-15, for-12)
det(round-15, a-13)
amod(round-15, new-14)
nmod:for(sets-9, round-15)
case(battles-18, of-16)
amod(battles-18, legal-17)
nmod:of(round-15, battles-18)
case(attorneys-21, between-19)
compound(attorneys-21, defense-20)
nmod:between(battles-18, attorneys-21)
cc(attorneys-21, and-22)
det(judge-24, the-23)
nmod:between(battles-18, judge-24)
conj:and(attorneys-21, judge-24)
punct(refusal-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

step :: The candidates will step up and swing at the fast ones , pitchouts and curves tossed by Ann Compton of ABC News , Andrea Mitchell of NBC News and Margaret Warner of Newsweek ./.
det(candidates-2, The-1)
nsubj(step-4, candidates-2)
nsubj(swing-7, candidates-2)
aux(step-4, will-3)
root(ROOT-0, step-4)
advmod(step-4, up-5)
cc(step-4, and-6)
conj:and(step-4, swing-7)
case(ones-11, at-8)
det(ones-11, the-9)
amod(ones-11, fast-10)
nmod:at(swing-7, ones-11)
punct(ones-11, ,-12)
nmod:at(swing-7, pitchouts-13)
conj:and(ones-11, pitchouts-13)
cc(ones-11, and-14)
nmod:at(swing-7, curves-15)
conj:and(ones-11, curves-15)
acl(curves-15, tossed-16)
case(Compton-19, by-17)
compound(Compton-19, Ann-18)
nmod:by(tossed-16, Compton-19)
case(News-22, of-20)
compound(News-22, ABC-21)
nmod:of(Compton-19, News-22)
punct(Compton-19, ,-23)
compound(Mitchell-25, Andrea-24)
appos(Compton-19, Mitchell-25)
case(News-28, of-26)
compound(News-28, NBC-27)
nmod:of(Mitchell-25, News-28)
cc(News-28, and-29)
compound(Warner-31, Margaret-30)
nmod:of(Mitchell-25, Warner-31)
conj:and(News-28, Warner-31)
case(Newsweek-33, of-32)
nmod:of(Warner-31, Newsweek-33)
punct(step-4, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#candidates

step :: International Business Machines Corp . , Siemens AG , and Bell Atlantic Corp. have stepped up their cooperative drive for a slice of the emerging European market for computerized telephone services ./.
compound(Corp-4, International-1)
compound(Corp-4, Business-2)
compound(Corp-4, Machines-3)
root(ROOT-0, Corp-4)
punct(Corp-4, .-5)
punct(stepped-10, ,-1)
compound(AG-3, Siemens-2)
nsubj(stepped-10, AG-3)
punct(AG-3, ,-4)
cc(AG-3, and-5)
compound(Corp.-8, Bell-6)
compound(Corp.-8, Atlantic-7)
conj:and(AG-3, Corp.-8)
nsubj(stepped-10, Corp.-8)
aux(stepped-10, have-9)
root(ROOT-0, stepped-10)
compound:prt(stepped-10, up-11)
nmod:poss(drive-14, their-12)
amod(drive-14, cooperative-13)
dobj(stepped-10, drive-14)
case(slice-17, for-15)
det(slice-17, a-16)
nmod:for(drive-14, slice-17)
case(market-22, of-18)
det(market-22, the-19)
amod(market-22, emerging-20)
amod(market-22, European-21)
nmod:of(slice-17, market-22)
case(services-26, for-23)
amod(services-26, computerized-24)
compound(services-26, telephone-25)
nmod:for(slice-17, services-26)
punct(stepped-10, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#drive

step :: Like Mr. Bush , Mr. Dukakis wants to step up the use of `` clean '' natural gas by eliminating legal and regulatory barriers that block big gas users from bargaining directly with producers ./.
case(Bush-3, Like-1)
compound(Bush-3, Mr.-2)
nmod:like(wants-7, Bush-3)
punct(wants-7, ,-4)
compound(Dukakis-6, Mr.-5)
nsubj(wants-7, Dukakis-6)
nsubj:xsubj(step-9, Dukakis-6)
root(ROOT-0, wants-7)
mark(step-9, to-8)
xcomp(wants-7, step-9)
compound:prt(step-9, up-10)
det(use-12, the-11)
dobj(step-9, use-12)
case(gas-18, of-13)
punct(gas-18, ``-14)
amod(gas-18, clean-15)
punct(gas-18, ''-16)
amod(gas-18, natural-17)
nmod:of(use-12, gas-18)
mark(eliminating-20, by-19)
advcl(step-9, eliminating-20)
amod(barriers-24, legal-21)
cc(legal-21, and-22)
conj:and(legal-21, regulatory-23)
amod(barriers-24, regulatory-23)
dobj(eliminating-20, barriers-24)
nsubj(block-26, barriers-24)
ref(barriers-24, that-25)
acl:relcl(barriers-24, block-26)
amod(users-29, big-27)
compound(users-29, gas-28)
dobj(block-26, users-29)
case(bargaining-31, from-30)
nmod:from(block-26, bargaining-31)
advmod(bargaining-31, directly-32)
case(producers-34, with-33)
nmod:with(bargaining-31, producers-34)
punct(wants-7, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#gas

step :: But the World Bank effectively is stepping into the breach left by a recalcitrant IMF. Ironically , in an apparent attempt to challenge the U.S.-dominated international debt strategy , Mr. Camdessus -- who usually takes a soft line toward heavily indebted countries -- seems to have put the squabble with the U.S. before Argentina 's interests ./.
cc(stepping-7, But-1)
det(Bank-4, the-2)
compound(Bank-4, World-3)
nsubj(stepping-7, Bank-4)
advmod(stepping-7, effectively-5)
aux(stepping-7, is-6)
root(ROOT-0, stepping-7)
case(breach-10, into-8)
det(breach-10, the-9)
nmod:into(stepping-7, breach-10)
acl(breach-10, left-11)
case(IMF-15, by-12)
det(IMF-15, a-13)
amod(IMF-15, recalcitrant-14)
nmod:by(left-11, IMF-15)
punct(stepping-7, .-16)
nsubj(seems-29, Ironically-1)
nsubj:xsubj(put-32, Ironically-1)
punct(seems-29, ,-2)
case(attempt-6, in-3)
det(attempt-6, an-4)
amod(attempt-6, apparent-5)
nmod:in(seems-29, attempt-6)
mark(challenge-8, to-7)
acl(attempt-6, challenge-8)
det(strategy-13, the-9)
amod(strategy-13, U.S.-dominated-10)
amod(strategy-13, international-11)
compound(strategy-13, debt-12)
dobj(challenge-8, strategy-13)
punct(seems-29, ,-14)
compound(Camdessus-16, Mr.-15)
nsubj(seems-29, Camdessus-16)
nsubj:xsubj(put-32, Camdessus-16)
punct(takes-20, ---17)
nsubj(takes-20, who-18)
advmod(takes-20, usually-19)
dep(Camdessus-16, takes-20)
det(line-23, a-21)
amod(line-23, soft-22)
dobj(takes-20, line-23)
case(countries-27, toward-24)
advmod(indebted-26, heavily-25)
amod(countries-27, indebted-26)
nmod:toward(line-23, countries-27)
punct(takes-20, ---28)
root(ROOT-0, seems-29)
mark(put-32, to-30)
aux(put-32, have-31)
xcomp(seems-29, put-32)
det(squabble-34, the-33)
dobj(put-32, squabble-34)
case(U.S.-37, with-35)
det(U.S.-37, the-36)
nmod:with(put-32, U.S.-37)
case(interests-41, before-38)
nmod:poss(interests-41, Argentina-39)
case(Argentina-39, 's-40)
nmod:before(put-32, interests-41)
punct(seems-29, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#bank

step :: The four anchors `` are stepping over one another ./.
det(anchors-3, The-1)
nummod(anchors-3, four-2)
nsubj(stepping-6, anchors-3)
punct(stepping-6, ``-4)
aux(stepping-6, are-5)
root(ROOT-0, stepping-6)
case(another-9, over-7)
nummod(another-9, one-8)
nmod:over(stepping-6, another-9)
punct(stepping-6, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#anchors

step :: I was about to step forth on a dare from my editor when a spaced-out blonde weaved out of the crowd ./.
nsubj(about-3, I-1)
nsubj:xsubj(step-5, I-1)
aux(about-3, was-2)
root(ROOT-0, about-3)
mark(step-5, to-4)
xcomp(about-3, step-5)
advmod(step-5, forth-6)
case(dare-9, on-7)
det(dare-9, a-8)
nmod:on(step-5, dare-9)
case(editor-12, from-10)
nmod:poss(editor-12, my-11)
nmod:from(dare-9, editor-12)
advmod(weaved-17, when-13)
det(blonde-16, a-14)
amod(blonde-16, spaced-out-15)
nsubj(weaved-17, blonde-16)
advcl(about-3, weaved-17)
case(crowd-21, out-18)
mwe(out-18, of-19)
det(crowd-21, the-20)
nmod:out_of(weaved-17, crowd-21)
punct(about-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#i

step :: Mr. Questrom 's appointment comes two months after he stepped down as vice chairman of Federated Department Stores , following its takeover by Campeau Corp. Acclaimed by analysts , Mr. Questrom is lauded for the revival of two ailing Federated divisions: Rich 's Department Stores in Atlanta and Bullock 's Bullock 's Wilshire in Los Angeles ./.
compound(Questrom-2, Mr.-1)
nmod:poss(appointment-4, Questrom-2)
case(Questrom-2, 's-3)
nsubj(comes-5, appointment-4)
root(ROOT-0, comes-5)
nummod(months-7, two-6)
dep(stepped-10, months-7)
mark(stepped-10, after-8)
nsubj(stepped-10, he-9)
advcl(comes-5, stepped-10)
compound:prt(stepped-10, down-11)
case(chairman-14, as-12)
compound(chairman-14, vice-13)
nmod:as(stepped-10, chairman-14)
case(Stores-18, of-15)
compound(Stores-18, Federated-16)
compound(Stores-18, Department-17)
nmod:of(chairman-14, Stores-18)
punct(stepped-10, ,-19)
case(takeover-22, following-20)
nmod:poss(takeover-22, its-21)
nmod:following(stepped-10, takeover-22)
case(Corp.-25, by-23)
compound(Corp.-25, Campeau-24)
nmod:by(takeover-22, Corp.-25)
punct(comes-5, .-26)
dep(lauded-8, Acclaimed-1)
case(analysts-3, by-2)
nmod:by(Acclaimed-1, analysts-3)
punct(lauded-8, ,-4)
compound(Questrom-6, Mr.-5)
nsubjpass(lauded-8, Questrom-6)
auxpass(lauded-8, is-7)
root(ROOT-0, lauded-8)
case(revival-11, for-9)
det(revival-11, the-10)
nmod:for(lauded-8, revival-11)
case(divisions-16, of-12)
nummod(divisions-16, two-13)
amod(divisions-16, ailing-14)
compound(divisions-16, Federated-15)
nmod:of(revival-11, divisions-16)
punct(divisions-16, :-17)
nmod:poss(Stores-21, Rich-18)
case(Rich-18, 's-19)
compound(Stores-21, Department-20)
dep(divisions-16, Stores-21)
case(Atlanta-23, in-22)
nmod:in(Stores-21, Atlanta-23)
cc(Atlanta-23, and-24)
nmod:poss(Bullock-27, Bullock-25)
case(Bullock-25, 's-26)
nmod:poss(Wilshire-29, Bullock-27)
case(Bullock-27, 's-28)
nmod:in(Stores-21, Wilshire-29)
conj:and(Atlanta-23, Wilshire-29)
case(Angeles-32, in-30)
compound(Angeles-32, Los-31)
nmod:in(Wilshire-29, Angeles-32)
punct(lauded-8, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#he

step :: In Tokyo , prices were lower in moderate trading as investors stepped aside before the release of U.S. trade figures and after an early buying spree concentrated in electricals ./.
case(Tokyo-2, In-1)
nmod:in(lower-6, Tokyo-2)
punct(lower-6, ,-3)
nsubj(lower-6, prices-4)
cop(lower-6, were-5)
root(ROOT-0, lower-6)
case(trading-9, in-7)
amod(trading-9, moderate-8)
nmod:in(lower-6, trading-9)
mark(stepped-12, as-10)
nsubj(stepped-12, investors-11)
advcl(lower-6, stepped-12)
advmod(stepped-12, aside-13)
case(release-16, before-14)
det(release-16, the-15)
nmod:before(stepped-12, release-16)
case(figures-20, of-17)
compound(figures-20, U.S.-18)
compound(figures-20, trade-19)
nmod:of(release-16, figures-20)
cc(stepped-12, and-21)
mark(concentrated-27, after-22)
det(spree-26, an-23)
amod(spree-26, early-24)
compound(spree-26, buying-25)
nsubj(concentrated-27, spree-26)
advcl(lower-6, concentrated-27)
conj:and(stepped-12, concentrated-27)
case(electricals-29, in-28)
nmod:in(concentrated-27, electricals-29)
punct(lower-6, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#investors

step :: Such checks are bound to step up -- in the North Sea and elsewhere , industry officials said ./.
amod(checks-2, Such-1)
nsubjpass(bound-4, checks-2)
nsubj:xsubj(step-6, checks-2)
auxpass(bound-4, are-3)
root(ROOT-0, bound-4)
mark(step-6, to-5)
xcomp(bound-4, step-6)
compound:prt(step-6, up-7)
punct(step-6, ---8)
case(Sea-12, in-9)
det(Sea-12, the-10)
compound(Sea-12, North-11)
nmod:in(said-18, Sea-12)
cc(Sea-12, and-13)
conj:and(Sea-12, elsewhere-14)
nmod:in(said-18, elsewhere-14)
punct(said-18, ,-15)
compound(officials-17, industry-16)
nsubj(said-18, officials-17)
parataxis(step-6, said-18)
punct(bound-4, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#checks

step :: Ansaldo , which until last year got about 20 % of its sales from building nuclear power plants , is trying to step up its role in transportation following Italy 's ban last year on further nuclear plant construction ./.
nsubj(got-7, Ansaldo-1)
nsubj(trying-21, Ansaldo-1)
nsubj:xsubj(step-23, Ansaldo-1)
punct(Ansaldo-1, ,-2)
ref(Ansaldo-1, which-3)
case(year-6, until-4)
amod(year-6, last-5)
nmod:until(got-7, year-6)
acl:relcl(Ansaldo-1, got-7)
advmod(20-9, about-8)
nummod(%-10, 20-9)
dobj(got-7, %-10)
case(sales-13, of-11)
nmod:poss(sales-13, its-12)
nmod:of(%-10, sales-13)
mark(building-15, from-14)
advcl(got-7, building-15)
amod(plants-18, nuclear-16)
compound(plants-18, power-17)
dobj(building-15, plants-18)
punct(Ansaldo-1, ,-19)
aux(trying-21, is-20)
root(ROOT-0, trying-21)
mark(step-23, to-22)
xcomp(trying-21, step-23)
compound:prt(step-23, up-24)
nmod:poss(role-26, its-25)
dobj(step-23, role-26)
case(transportation-28, in-27)
nmod:in(role-26, transportation-28)
case(ban-32, following-29)
nmod:poss(ban-32, Italy-30)
case(Italy-30, 's-31)
nmod:following(step-23, ban-32)
amod(year-34, last-33)
nmod:tmod(ban-32, year-34)
case(construction-39, on-35)
amod(construction-39, further-36)
amod(construction-39, nuclear-37)
compound(construction-39, plant-38)
nmod:on(ban-32, construction-39)
punct(trying-21, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#role

step :: `` If we do n't settle our disputes soon , '' he warns , `` the foreign companies may step in and dominate . ''/''
punct(step-20, ``-1)
mark(settle-6, If-2)
nsubj(settle-6, we-3)
aux(settle-6, do-4)
neg(settle-6, n't-5)
advcl(step-20, settle-6)
nmod:poss(disputes-8, our-7)
dobj(settle-6, disputes-8)
advmod(settle-6, soon-9)
punct(warns-13, ,-10)
punct(warns-13, ''-11)
nsubj(warns-13, he-12)
parataxis(step-20, warns-13)
punct(warns-13, ,-14)
punct(step-20, ``-15)
det(companies-18, the-16)
amod(companies-18, foreign-17)
nsubj(step-20, companies-18)
nsubj(dominate-23, companies-18)
aux(step-20, may-19)
root(ROOT-0, step-20)
advmod(step-20, in-21)
cc(step-20, and-22)
conj:and(step-20, dominate-23)
punct(step-20, .-24)
punct(step-20, ''-25)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: step#companies

step :: Government investigators said they are stepping up efforts to gain the cooperation of numerous figures in the Pentagon bribery-and-fraud scandal and hope to obtain the assistance of dozens of key witnesses within two months ./.
compound(investigators-2, Government-1)
nsubj(said-3, investigators-2)
root(ROOT-0, said-3)
nsubj(stepping-6, they-4)
aux(stepping-6, are-5)
ccomp(said-3, stepping-6)
compound:prt(stepping-6, up-7)
dobj(stepping-6, efforts-8)
mark(gain-10, to-9)
acl(efforts-8, gain-10)
det(cooperation-12, the-11)
dobj(gain-10, cooperation-12)
case(figures-15, of-13)
amod(figures-15, numerous-14)
nmod:of(cooperation-12, figures-15)
case(scandal-20, in-16)
det(scandal-20, the-17)
compound(scandal-20, Pentagon-18)
amod(scandal-20, bribery-and-fraud-19)
nmod:in(figures-15, scandal-20)
cc(scandal-20, and-21)
nmod:in(figures-15, hope-22)
conj:and(scandal-20, hope-22)
mark(obtain-24, to-23)
advcl(gain-10, obtain-24)
det(assistance-26, the-25)
dobj(obtain-24, assistance-26)
case(dozens-28, of-27)
nmod:of(assistance-26, dozens-28)
case(witnesses-31, of-29)
amod(witnesses-31, key-30)
nmod:of(dozens-28, witnesses-31)
case(months-34, within-32)
nummod(months-34, two-33)
nmod:within(obtain-24, months-34)
punct(said-3, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#efforts

step :: The tacky Formica kiosks from behind which East Berlin border guards stare down at entering visitors , the tinny board-game feel of East German currency , and the vanilla-white paint on the trams combine to make the visitor feel he 's stepped back in time to a hungrier , postwar Germany ./.
det(kiosks-4, The-1)
amod(kiosks-4, tacky-2)
compound(kiosks-4, Formica-3)
nsubj(combine-34, kiosks-4)
nsubj:xsubj(make-36, kiosks-4)
mark(stare-12, from-5)
mark(stare-12, behind-6)
det(guards-11, which-7)
compound(guards-11, East-8)
compound(guards-11, Berlin-9)
compound(guards-11, border-10)
nsubj(stare-12, guards-11)
acl(kiosks-4, stare-12)
compound:prt(stare-12, down-13)
mark(entering-15, at-14)
advcl(stare-12, entering-15)
dobj(entering-15, visitors-16)
punct(kiosks-4, ,-17)
det(feel-21, the-18)
amod(feel-21, tinny-19)
amod(feel-21, board-game-20)
conj:and(kiosks-4, feel-21)
nsubj(combine-34, feel-21)
nsubj:xsubj(make-36, feel-21)
case(currency-25, of-22)
amod(currency-25, East-23)
amod(currency-25, German-24)
nmod:of(feel-21, currency-25)
punct(kiosks-4, ,-26)
cc(kiosks-4, and-27)
det(paint-30, the-28)
amod(paint-30, vanilla-white-29)
conj:and(kiosks-4, paint-30)
nsubj(combine-34, paint-30)
nsubj:xsubj(make-36, paint-30)
case(trams-33, on-31)
det(trams-33, the-32)
nmod:on(paint-30, trams-33)
root(ROOT-0, combine-34)
mark(make-36, to-35)
xcomp(combine-34, make-36)
det(visitor-38, the-37)
nsubj(feel-39, visitor-38)
ccomp(make-36, feel-39)
nsubjpass(stepped-42, he-40)
auxpass(stepped-42, 's-41)
ccomp(feel-39, stepped-42)
advmod(stepped-42, back-43)
case(time-45, in-44)
nmod:in(stepped-42, time-45)
case(Germany-51, to-46)
det(Germany-51, a-47)
amod(Germany-51, hungrier-48)
punct(Germany-51, ,-49)
amod(Germany-51, postwar-50)
nmod:to(stepped-42, Germany-51)
punct(combine-34, .-52)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#he

step :: While many analysts debate how last October 's stock market crash compares with the 1929 debacle , Martin J. Pring is stepping further back in time -- to Black Friday , 1869 ./.
mark(debate-4, While-1)
amod(analysts-3, many-2)
nsubj(debate-4, analysts-3)
advcl(stepping-22, debate-4)
advmod(compares-12, how-5)
amod(October-7, last-6)
nmod:poss(crash-11, October-7)
case(October-7, 's-8)
compound(crash-11, stock-9)
compound(crash-11, market-10)
nsubj(compares-12, crash-11)
ccomp(debate-4, compares-12)
case(debacle-16, with-13)
det(debacle-16, the-14)
nummod(debacle-16, 1929-15)
nmod:with(compares-12, debacle-16)
punct(stepping-22, ,-17)
compound(Pring-20, Martin-18)
compound(Pring-20, J.-19)
nsubj(stepping-22, Pring-20)
aux(stepping-22, is-21)
root(ROOT-0, stepping-22)
advmod(stepping-22, further-23)
advmod(stepping-22, back-24)
case(time-26, in-25)
nmod:in(stepping-22, time-26)
punct(stepping-22, ---27)
case(Friday-30, to-28)
amod(Friday-30, Black-29)
nmod:to(stepping-22, Friday-30)
punct(Friday-30, ,-31)
amod(Friday-30, 1869-32)
punct(stepping-22, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#pring

step :: He confirmed that the U.S. is negotiating to persuade Noriega to step down , but refused to confirm he has approved a deal involving the dropping of U.S. drug charges ./.
nsubj(confirmed-2, He-1)
nsubj(refused-16, He-1)
nsubj:xsubj(confirm-18, He-1)
root(ROOT-0, confirmed-2)
mark(negotiating-7, that-3)
det(U.S.-5, the-4)
nsubj(negotiating-7, U.S.-5)
nsubj:xsubj(persuade-9, U.S.-5)
aux(negotiating-7, is-6)
ccomp(confirmed-2, negotiating-7)
mark(persuade-9, to-8)
xcomp(negotiating-7, persuade-9)
dobj(persuade-9, Noriega-10)
nsubj:xsubj(step-12, Noriega-10)
mark(step-12, to-11)
xcomp(persuade-9, step-12)
compound:prt(step-12, down-13)
punct(confirmed-2, ,-14)
cc(confirmed-2, but-15)
conj:but(confirmed-2, refused-16)
mark(confirm-18, to-17)
xcomp(refused-16, confirm-18)
nsubj(approved-21, he-19)
aux(approved-21, has-20)
ccomp(confirm-18, approved-21)
det(deal-23, a-22)
dobj(approved-21, deal-23)
acl(deal-23, involving-24)
det(dropping-26, the-25)
dobj(involving-24, dropping-26)
case(charges-30, of-27)
compound(charges-30, U.S.-28)
compound(charges-30, drug-29)
nmod:of(dropping-26, charges-30)
punct(confirmed-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#noriega

step :: President Reagan stepped up the volume of this chorus this year by attacking such purportedly porky projects as a $ 900 , 000 catfish aquaculture facility in Stutgart , Ark . ; a $ 2.4 million grant for the `` tailored clothing industry , '' and a $ 5 million gondola transportation system at an Idaho resort area ./.
compound(Reagan-2, President-1)
nsubj(stepped-3, Reagan-2)
root(ROOT-0, stepped-3)
compound:prt(stepped-3, up-4)
det(volume-6, the-5)
dobj(stepped-3, volume-6)
case(chorus-9, of-7)
det(chorus-9, this-8)
nmod:of(volume-6, chorus-9)
det(year-11, this-10)
nmod:tmod(stepped-3, year-11)
mark(attacking-13, by-12)
advcl(stepped-3, attacking-13)
amod(projects-17, such-14)
advmod(porky-16, purportedly-15)
amod(projects-17, porky-16)
dobj(attacking-13, projects-17)
case(900-21, as-18)
det(900-21, a-19)
dep(900-21, $-20)
nmod:as(projects-17, 900-21)
punct(900-21, ,-22)
nummod(facility-26, 000-23)
compound(facility-26, catfish-24)
compound(facility-26, aquaculture-25)
appos(900-21, facility-26)
case(Stutgart-28, in-27)
nmod:in(facility-26, Stutgart-28)
punct(Stutgart-28, ,-29)
appos(Stutgart-28, Ark-30)
punct(stepped-3, .-31)
root(ROOT-0, ;-1)
det(grant-6, a-2)
amod(grant-6, $-3)
compound(million-5, 2.4-4)
nummod($-3, million-5)
root(;-1, grant-6)
case(industry-12, for-7)
det(industry-12, the-8)
punct(industry-12, ``-9)
amod(industry-12, tailored-10)
compound(industry-12, clothing-11)
nmod:for(grant-6, industry-12)
punct(grant-6, ,-13)
punct(grant-6, ''-14)
cc(grant-6, and-15)
det(system-22, a-16)
amod(system-22, $-17)
compound(million-19, 5-18)
nummod($-17, million-19)
compound(system-22, gondola-20)
compound(system-22, transportation-21)
root(;-1, system-22)
conj:and(grant-6, system-22)
case(area-27, at-23)
det(area-27, an-24)
compound(area-27, Idaho-25)
compound(area-27, resort-26)
nmod:at(system-22, area-27)
punct(grant-6, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#chorus

step :: Many insurers , including Cigna Corp . , Metropolitan Life Insurance Co . , and Prudential Insurance Co. of America , are stepping up pressure on companies to shed the traditional free-choice indemnity plans that reimburse employees for most of their medical costs while giving them total control over selecting a doctor ./.
amod(insurers-2, Many-1)
root(ROOT-0, insurers-2)
punct(insurers-2, ,-3)
case(Corp-6, including-4)
compound(Corp-6, Cigna-5)
nmod:including(insurers-2, Corp-6)
punct(insurers-2, .-7)
punct(Co-5, ,-1)
compound(Co-5, Metropolitan-2)
compound(Co-5, Life-3)
compound(Co-5, Insurance-4)
root(ROOT-0, Co-5)
punct(Co-5, .-6)
punct(Co.-5, ,-1)
cc(Co.-5, and-2)
compound(Co.-5, Prudential-3)
compound(Co.-5, Insurance-4)
nsubj(stepping-10, Co.-5)
case(America-7, of-6)
nmod:of(Co.-5, America-7)
punct(Co.-5, ,-8)
aux(stepping-10, are-9)
root(ROOT-0, stepping-10)
compound:prt(stepping-10, up-11)
dobj(stepping-10, pressure-12)
case(companies-14, on-13)
nmod:on(pressure-12, companies-14)
mark(shed-16, to-15)
acl(pressure-12, shed-16)
det(plans-21, the-17)
amod(plans-21, traditional-18)
amod(plans-21, free-choice-19)
compound(plans-21, indemnity-20)
dobj(shed-16, plans-21)
nsubj(reimburse-23, plans-21)
ref(plans-21, that-22)
acl:relcl(plans-21, reimburse-23)
dobj(reimburse-23, employees-24)
case(most-26, for-25)
nmod:for(reimburse-23, most-26)
case(costs-30, of-27)
nmod:poss(costs-30, their-28)
amod(costs-30, medical-29)
nmod:of(most-26, costs-30)
mark(giving-32, while-31)
advcl(reimburse-23, giving-32)
iobj(giving-32, them-33)
amod(control-35, total-34)
dobj(giving-32, control-35)
mark(selecting-37, over-36)
acl(control-35, selecting-37)
det(doctor-39, a-38)
dobj(selecting-37, doctor-39)
punct(stepping-10, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#pressure

step :: The Duracell sale seems certain to step up pressure on management to sustain recent improvements in profit performance ./.
det(sale-3, The-1)
compound(sale-3, Duracell-2)
nsubj(seems-4, sale-3)
root(ROOT-0, seems-4)
xcomp(seems-4, certain-5)
mark(step-7, to-6)
xcomp(certain-5, step-7)
compound:prt(step-7, up-8)
dobj(step-7, pressure-9)
case(management-11, on-10)
nmod:on(pressure-9, management-11)
mark(sustain-13, to-12)
acl(pressure-9, sustain-13)
amod(improvements-15, recent-14)
dobj(sustain-13, improvements-15)
case(performance-18, in-16)
compound(performance-18, profit-17)
nmod:in(improvements-15, performance-18)
punct(seems-4, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#pressure

step :: Separately , the FAA expanded a directive to all airlines to step up their inspections of older Boeing 737 planes for possible metal fatigue , cracks and corrosion in the wake of the Aloha accident ./.
advmod(expanded-5, Separately-1)
punct(expanded-5, ,-2)
det(FAA-4, the-3)
nsubj(expanded-5, FAA-4)
root(ROOT-0, expanded-5)
det(directive-7, a-6)
dobj(expanded-5, directive-7)
case(airlines-10, to-8)
det(airlines-10, all-9)
nmod:to(expanded-5, airlines-10)
mark(step-12, to-11)
advcl(expanded-5, step-12)
compound:prt(step-12, up-13)
nmod:poss(inspections-15, their-14)
dobj(step-12, inspections-15)
case(planes-20, of-16)
amod(planes-20, older-17)
compound(planes-20, Boeing-18)
nummod(planes-20, 737-19)
nmod:of(inspections-15, planes-20)
case(fatigue-24, for-21)
amod(fatigue-24, possible-22)
compound(fatigue-24, metal-23)
nmod:for(step-12, fatigue-24)
punct(fatigue-24, ,-25)
nmod:for(step-12, cracks-26)
conj:and(fatigue-24, cracks-26)
cc(fatigue-24, and-27)
nmod:for(step-12, corrosion-28)
conj:and(fatigue-24, corrosion-28)
case(wake-31, in-29)
det(wake-31, the-30)
nmod:in(fatigue-24, wake-31)
case(accident-35, of-32)
det(accident-35, the-33)
compound(accident-35, Aloha-34)
nmod:of(wake-31, accident-35)
punct(expanded-5, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#planes

step :: Jaime Rosenthal said he was stepping down as President Azcona 's economic adviser , but staying on as vice president ./.
compound(Rosenthal-2, Jaime-1)
nsubj(said-3, Rosenthal-2)
root(ROOT-0, said-3)
nsubj(stepping-6, he-4)
nsubj(staying-16, he-4)
aux(stepping-6, was-5)
ccomp(said-3, stepping-6)
compound:prt(stepping-6, down-7)
case(adviser-13, as-8)
compound(Azcona-10, President-9)
nmod:poss(adviser-13, Azcona-10)
case(Azcona-10, 's-11)
amod(adviser-13, economic-12)
nmod:as(stepping-6, adviser-13)
punct(stepping-6, ,-14)
cc(stepping-6, but-15)
ccomp(said-3, staying-16)
conj:but(stepping-6, staying-16)
compound:prt(staying-16, on-17)
case(president-20, as-18)
compound(president-20, vice-19)
nmod:as(staying-16, president-20)
punct(said-3, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#he

step :: Publications , which always have had the option of using private instead of second-class delivery , are now stepping up their own alternative delivery plans ./.
nsubj(had-6, Publications-1)
nsubj(stepping-19, Publications-1)
punct(Publications-1, ,-2)
ref(Publications-1, which-3)
advmod(had-6, always-4)
aux(had-6, have-5)
acl:relcl(Publications-1, had-6)
det(option-8, the-7)
dobj(had-6, option-8)
mark(using-10, of-9)
acl(option-8, using-10)
dobj(using-10, private-11)
case(delivery-15, instead-12)
mwe(instead-12, of-13)
amod(delivery-15, second-class-14)
nmod:instead_of(private-11, delivery-15)
punct(Publications-1, ,-16)
aux(stepping-19, are-17)
advmod(stepping-19, now-18)
root(ROOT-0, stepping-19)
compound:prt(stepping-19, up-20)
nmod:poss(plans-25, their-21)
amod(plans-25, own-22)
amod(plans-25, alternative-23)
compound(plans-25, delivery-24)
dobj(stepping-19, plans-25)
punct(stepping-19, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#plans

step :: Some police forces , for example , have stepped up use of a 20-year-old system called Vascar -LRB- Vehicle and Speed Computed and Recorded -RRB- ./.
det(forces-3, Some-1)
compound(forces-3, police-2)
nsubj(stepped-9, forces-3)
punct(stepped-9, ,-4)
case(example-6, for-5)
nmod:for(stepped-9, example-6)
punct(stepped-9, ,-7)
aux(stepped-9, have-8)
root(ROOT-0, stepped-9)
compound:prt(stepped-9, up-10)
dobj(stepped-9, use-11)
case(system-15, of-12)
det(system-15, a-13)
amod(system-15, 20-year-old-14)
nmod:of(use-11, system-15)
acl(system-15, called-16)
xcomp(called-16, Vascar-17)
punct(Vehicle-19, -LRB--18)
appos(Vascar-17, Vehicle-19)
cc(Vehicle-19, and-20)
appos(Vascar-17, Speed-21)
conj:and(Vehicle-19, Speed-21)
dep(Vehicle-19, Computed-22)
cc(Computed-22, and-23)
dep(Vehicle-19, Recorded-24)
conj:and(Computed-22, Recorded-24)
punct(Vehicle-19, -RRB--25)
punct(stepped-9, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#system

step :: `` This is a place to come for a better life , '' she says , as her troupe of tiny vendors surrounds tourists stepping off a bus ./.
punct(says-15, ``-1)
nsubj(place-5, This-2)
cop(place-5, is-3)
det(place-5, a-4)
ccomp(says-15, place-5)
mark(come-7, to-6)
acl(place-5, come-7)
case(life-11, for-8)
det(life-11, a-9)
amod(life-11, better-10)
nmod:for(come-7, life-11)
punct(says-15, ,-12)
punct(says-15, ''-13)
nsubj(says-15, she-14)
root(ROOT-0, says-15)
punct(says-15, ,-16)
case(troupe-19, as-17)
nmod:poss(troupe-19, her-18)
nmod:as(says-15, troupe-19)
case(vendors-22, of-20)
amod(vendors-22, tiny-21)
nmod:of(troupe-19, vendors-22)
dep(says-15, surrounds-23)
dobj(surrounds-23, tourists-24)
acl(tourists-24, stepping-25)
compound:prt(stepping-25, off-26)
det(bus-28, a-27)
dobj(stepping-25, bus-28)
punct(says-15, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#bus

step :: He maintains , `` It 's only a matter of time before these groups step over the line . `` They may begin rousting others they dislike -- people `` who are not the right skin color or the right religious persuasion , '' he says ./.
nsubj(maintains-2, He-1)
root(ROOT-0, maintains-2)
punct(maintains-2, ,-3)
punct(maintains-2, ``-4)
nsubj(matter-9, It-5)
cop(matter-9, 's-6)
advmod(matter-9, only-7)
det(matter-9, a-8)
ccomp(maintains-2, matter-9)
case(time-11, of-10)
nmod:of(matter-9, time-11)
mark(step-15, before-12)
det(groups-14, these-13)
nsubj(step-15, groups-14)
advcl(matter-9, step-15)
case(line-18, over-16)
det(line-18, the-17)
nmod:over(step-15, line-18)
punct(maintains-2, .-19)
punct(says-27, ``-1)
nsubj(begin-4, They-2)
aux(begin-4, may-3)
ccomp(says-27, begin-4)
xcomp(begin-4, rousting-5)
dobj(rousting-5, others-6)
nsubj(dislike-8, they-7)
acl:relcl(others-6, dislike-8)
punct(color-18, ---9)
dep(color-18, people-10)
punct(color-18, ``-11)
nsubj(color-18, who-12)
cop(color-18, are-13)
neg(color-18, not-14)
det(color-18, the-15)
amod(color-18, right-16)
compound(color-18, skin-17)
dep(says-27, color-18)
cc(color-18, or-19)
det(persuasion-23, the-20)
amod(persuasion-23, right-21)
amod(persuasion-23, religious-22)
conj:or(color-18, persuasion-23)
dep(says-27, persuasion-23)
punct(color-18, ,-24)
punct(color-18, ''-25)
nsubj(says-27, he-26)
root(ROOT-0, says-27)
punct(says-27, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#groups

step :: He is stepping down this month to write a book , but Bill Bennett is more interesting even at political twilight than most cabinet officers are at high noon ./.
nsubj(stepping-3, He-1)
nsubj:xsubj(write-8, He-1)
aux(stepping-3, is-2)
root(ROOT-0, stepping-3)
compound:prt(stepping-3, down-4)
det(month-6, this-5)
nmod:tmod(stepping-3, month-6)
mark(write-8, to-7)
xcomp(stepping-3, write-8)
det(book-10, a-9)
dobj(write-8, book-10)
punct(stepping-3, ,-11)
cc(stepping-3, but-12)
compound(Bennett-14, Bill-13)
nsubj(interesting-17, Bennett-14)
cop(interesting-17, is-15)
advmod(interesting-17, more-16)
conj:but(stepping-3, interesting-17)
advmod(twilight-21, even-18)
case(twilight-21, at-19)
amod(twilight-21, political-20)
nmod:at(interesting-17, twilight-21)
mark(noon-29, than-22)
amod(officers-25, most-23)
compound(officers-25, cabinet-24)
nsubj(noon-29, officers-25)
cop(noon-29, are-26)
case(noon-29, at-27)
amod(noon-29, high-28)
advcl(interesting-17, noon-29)
punct(stepping-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#he

step :: Even before Mr. de la Madrid stepped to the speaker 's platform to deliver his address , a left-wing deputy attempted to make a speech of his own ./.
advmod(stepped-7, Even-1)
mark(stepped-7, before-2)
compound(Madrid-6, Mr.-3)
compound(Madrid-6, de-4)
compound(Madrid-6, la-5)
nsubj(stepped-7, Madrid-6)
nsubj:xsubj(deliver-14, Madrid-6)
root(ROOT-0, stepped-7)
case(platform-12, to-8)
det(speaker-10, the-9)
nmod:poss(platform-12, speaker-10)
case(speaker-10, 's-11)
nmod:to(stepped-7, platform-12)
mark(deliver-14, to-13)
xcomp(stepped-7, deliver-14)
nmod:poss(address-16, his-15)
dobj(deliver-14, address-16)
punct(address-16, ,-17)
det(deputy-20, a-18)
amod(deputy-20, left-wing-19)
appos(address-16, deputy-20)
acl(deputy-20, attempted-21)
mark(make-23, to-22)
xcomp(attempted-21, make-23)
det(speech-25, a-24)
dobj(make-23, speech-25)
case(own-28, of-26)
nmod:poss(own-28, his-27)
nmod:of(speech-25, own-28)
punct(stepped-7, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#madrid

step :: And no longer will spouses of nursing-home residents be forced into poverty paying for their loved ones ' care before Medicaid will step in ./.
cc(forced-10, And-1)
neg(longer-3, no-2)
advmod(forced-10, longer-3)
aux(forced-10, will-4)
nsubjpass(forced-10, spouses-5)
case(residents-8, of-6)
compound(residents-8, nursing-home-7)
nmod:of(spouses-5, residents-8)
auxpass(forced-10, be-9)
root(ROOT-0, forced-10)
case(poverty-12, into-11)
nmod:into(forced-10, poverty-12)
acl(poverty-12, paying-13)
case(care-19, for-14)
nmod:poss(ones-17, their-15)
amod(ones-17, loved-16)
nmod:poss(care-19, ones-17)
case(ones-17, '-18)
nmod:for(paying-13, care-19)
mark(step-23, before-20)
nsubj(step-23, Medicaid-21)
aux(step-23, will-22)
advcl(paying-13, step-23)
compound:prt(step-23, in-24)
punct(forced-10, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#medicaid

step :: In the Reagan years , the federal government stepped aside , cutting aid to state and local government by a third -LRB- after inflation -RRB- , pushing deregulation and halting creation of new domestic programs ./.
case(years-4, In-1)
det(years-4, the-2)
compound(years-4, Reagan-3)
nmod:in(stepped-9, years-4)
punct(stepped-9, ,-5)
det(government-8, the-6)
amod(government-8, federal-7)
nsubj(stepped-9, government-8)
root(ROOT-0, stepped-9)
advmod(stepped-9, aside-10)
punct(stepped-9, ,-11)
ccomp(stepped-9, cutting-12)
dobj(cutting-12, aid-13)
case(government-18, to-14)
compound(government-18, state-15)
cc(state-15, and-16)
conj:and(state-15, local-17)
compound(government-18, local-17)
nmod:to(cutting-12, government-18)
case(third-21, by-19)
det(third-21, a-20)
nmod:by(cutting-12, third-21)
punct(inflation-24, -LRB--22)
case(inflation-24, after-23)
nmod:after(third-21, inflation-24)
punct(inflation-24, -RRB--25)
punct(cutting-12, ,-26)
dep(cutting-12, pushing-27)
dobj(pushing-27, deregulation-28)
cc(pushing-27, and-29)
dep(cutting-12, halting-30)
conj:and(pushing-27, halting-30)
dobj(halting-30, creation-31)
case(programs-35, of-32)
amod(programs-35, new-33)
amod(programs-35, domestic-34)
nmod:of(creation-31, programs-35)
punct(stepped-9, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#government

step :: After helping a co-worker inspect rudder-control pedals , Mr. Hudak stepped from the cramped , tool-scattered cockpit into the first-class section ./.
mark(helping-2, After-1)
advcl(stepped-11, helping-2)
det(co-worker-4, a-3)
nsubj(inspect-5, co-worker-4)
ccomp(helping-2, inspect-5)
amod(pedals-7, rudder-control-6)
dobj(inspect-5, pedals-7)
punct(stepped-11, ,-8)
compound(Hudak-10, Mr.-9)
nsubj(stepped-11, Hudak-10)
root(ROOT-0, stepped-11)
case(cockpit-17, from-12)
det(cockpit-17, the-13)
amod(cockpit-17, cramped-14)
punct(cockpit-17, ,-15)
amod(cockpit-17, tool-scattered-16)
nmod:from(stepped-11, cockpit-17)
case(section-21, into-18)
det(section-21, the-19)
amod(section-21, first-class-20)
nmod:into(stepped-11, section-21)
punct(stepped-11, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#hudak

step :: Iowa farmers were just as demanding as candidates approached that state 's contest 10 weeks ago , but those voters were stepping out of a portrait of American Gothic ./.
compound(farmers-2, Iowa-1)
nsubj(demanding-6, farmers-2)
aux(demanding-6, were-3)
advmod(demanding-6, just-4)
advmod(demanding-6, as-5)
root(ROOT-0, demanding-6)
mark(approached-9, as-7)
nsubj(approached-9, candidates-8)
advcl(demanding-6, approached-9)
mark(stepping-22, that-10)
nmod:poss(contest-13, state-11)
case(state-11, 's-12)
nsubj(stepping-22, contest-13)
nummod(weeks-15, 10-14)
nmod:npmod(ago-16, weeks-15)
advmod(contest-13, ago-16)
punct(contest-13, ,-17)
cc(contest-13, but-18)
det(voters-20, those-19)
conj:but(contest-13, voters-20)
nsubj(stepping-22, voters-20)
aux(stepping-22, were-21)
ccomp(approached-9, stepping-22)
case(portrait-26, out-23)
mwe(out-23, of-24)
det(portrait-26, a-25)
nmod:out_of(stepping-22, portrait-26)
case(Gothic-29, of-27)
amod(Gothic-29, American-28)
nmod:of(portrait-26, Gothic-29)
punct(demanding-6, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#contest

step :: The exception was Mr. Takeshita 's predecessor , Yasuhiro Nakasone , who stepped down in October after five years ./.
det(exception-2, The-1)
nsubj(predecessor-7, exception-2)
cop(predecessor-7, was-3)
compound(Takeshita-5, Mr.-4)
nmod:poss(predecessor-7, Takeshita-5)
case(Takeshita-5, 's-6)
root(ROOT-0, predecessor-7)
nsubj(stepped-13, predecessor-7)
punct(predecessor-7, ,-8)
compound(Nakasone-10, Yasuhiro-9)
appos(predecessor-7, Nakasone-10)
punct(predecessor-7, ,-11)
ref(predecessor-7, who-12)
acl:relcl(predecessor-7, stepped-13)
compound:prt(stepped-13, down-14)
case(October-16, in-15)
nmod:in(stepped-13, October-16)
case(years-19, after-17)
nummod(years-19, five-18)
nmod:after(stepped-13, years-19)
punct(predecessor-7, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#predecessor

step :: Cows still step on unexploded mines , but after 17 years of de facto peace , Mr. Hellman finds the river border odd ./.
nsubj(step-3, Cows-1)
advmod(step-3, still-2)
root(ROOT-0, step-3)
case(mines-6, on-4)
amod(mines-6, unexploded-5)
nmod:on(step-3, mines-6)
punct(step-3, ,-7)
cc(step-3, but-8)
case(years-11, after-9)
nummod(years-11, 17-10)
nmod:after(finds-19, years-11)
case(peace-15, of-12)
compound(peace-15, de-13)
compound(peace-15, facto-14)
nmod:of(years-11, peace-15)
punct(finds-19, ,-16)
compound(Hellman-18, Mr.-17)
nsubj(finds-19, Hellman-18)
conj:but(step-3, finds-19)
det(border-22, the-20)
compound(border-22, river-21)
nsubj(odd-23, border-22)
xcomp(finds-19, odd-23)
punct(step-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#cows

step :: Some GOP insiders predict Treasury Secretary Baker will step in to direct the fall campaign ./.
det(insiders-3, Some-1)
compound(insiders-3, GOP-2)
nsubj(predict-4, insiders-3)
root(ROOT-0, predict-4)
compound(Baker-7, Treasury-5)
compound(Baker-7, Secretary-6)
nsubj(step-9, Baker-7)
nsubj:xsubj(direct-12, Baker-7)
aux(step-9, will-8)
ccomp(predict-4, step-9)
advmod(step-9, in-10)
mark(direct-12, to-11)
xcomp(step-9, direct-12)
det(campaign-15, the-13)
compound(campaign-15, fall-14)
dobj(direct-12, campaign-15)
punct(predict-4, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#baker

step :: `` It 's no scarier than stepping out my door at home , '' says Davoru Sperling , a Torah student from the West Bank ./.
punct(says-15, ``-1)
nsubj(scarier-5, It-2)
cop(scarier-5, 's-3)
neg(scarier-5, no-4)
ccomp(says-15, scarier-5)
mark(stepping-7, than-6)
advcl(scarier-5, stepping-7)
compound:prt(stepping-7, out-8)
nmod:poss(door-10, my-9)
dobj(stepping-7, door-10)
case(home-12, at-11)
nmod:at(door-10, home-12)
punct(says-15, ,-13)
punct(says-15, ''-14)
root(ROOT-0, says-15)
compound(Sperling-17, Davoru-16)
nsubj(says-15, Sperling-17)
punct(Sperling-17, ,-18)
det(student-21, a-19)
compound(student-21, Torah-20)
appos(Sperling-17, student-21)
case(Bank-25, from-22)
det(Bank-25, the-23)
compound(Bank-25, West-24)
nmod:from(student-21, Bank-25)
punct(says-15, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#door

step :: `` This is stepping further than we have before , but it 's the same concept as a bridge loan , helping out a client , '' said Stephen Waters , co-head of mergers with Mr. Hill ./.
punct(said-28, ``-1)
nsubj(stepping-4, This-2)
aux(stepping-4, is-3)
ccomp(said-28, stepping-4)
advmod(stepping-4, further-5)
mark(have-8, than-6)
nsubj(have-8, we-7)
advcl(further-5, have-8)
advmod(have-8, before-9)
punct(stepping-4, ,-10)
cc(stepping-4, but-11)
nsubj(concept-16, it-12)
cop(concept-16, 's-13)
det(concept-16, the-14)
amod(concept-16, same-15)
conj:but(stepping-4, concept-16)
ccomp(said-28, concept-16)
case(loan-20, as-17)
det(loan-20, a-18)
compound(loan-20, bridge-19)
nmod:as(concept-16, loan-20)
punct(concept-16, ,-21)
advcl(concept-16, helping-22)
compound:prt(helping-22, out-23)
det(client-25, a-24)
dobj(helping-22, client-25)
punct(said-28, ,-26)
punct(said-28, ''-27)
root(ROOT-0, said-28)
compound(Waters-30, Stephen-29)
nsubj(said-28, Waters-30)
punct(Waters-30, ,-31)
appos(Waters-30, co-head-32)
case(mergers-34, of-33)
nmod:of(co-head-32, mergers-34)
case(Hill-37, with-35)
compound(Hill-37, Mr.-36)
nmod:with(co-head-32, Hill-37)
punct(said-28, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#this

step :: When Egyptian President Hosni Mubarak steps off his plane at Andrews Air Force Base tomorrow to begin a visit to Washington , he will be a changed man ./.
advmod(steps-6, When-1)
amod(Mubarak-5, Egyptian-2)
compound(Mubarak-5, President-3)
compound(Mubarak-5, Hosni-4)
nsubj(steps-6, Mubarak-5)
advcl(man-28, steps-6)
compound:prt(steps-6, off-7)
nmod:poss(plane-9, his-8)
dobj(steps-6, plane-9)
case(Base-14, at-10)
compound(Base-14, Andrews-11)
compound(Base-14, Air-12)
compound(Base-14, Force-13)
nmod:at(plane-9, Base-14)
nmod:tmod(steps-6, tomorrow-15)
mark(begin-17, to-16)
advcl(steps-6, begin-17)
det(visit-19, a-18)
dobj(begin-17, visit-19)
case(Washington-21, to-20)
nmod:to(visit-19, Washington-21)
punct(man-28, ,-22)
nsubj(man-28, he-23)
aux(man-28, will-24)
cop(man-28, be-25)
det(man-28, a-26)
amod(man-28, changed-27)
root(ROOT-0, man-28)
punct(man-28, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#plane

step :: A senior Afghan official said President Najibullah would n't step down to satisfy rebel conditions for joining the government as part of a year-old national reconciliation initiative ./.
det(official-4, A-1)
amod(official-4, senior-2)
compound(official-4, Afghan-3)
nsubj(said-5, official-4)
root(ROOT-0, said-5)
compound(Najibullah-7, President-6)
nsubj(step-10, Najibullah-7)
nsubj:xsubj(satisfy-13, Najibullah-7)
aux(step-10, would-8)
neg(step-10, n't-9)
ccomp(said-5, step-10)
compound:prt(step-10, down-11)
mark(satisfy-13, to-12)
xcomp(step-10, satisfy-13)
compound(conditions-15, rebel-14)
dobj(satisfy-13, conditions-15)
mark(joining-17, for-16)
advcl(satisfy-13, joining-17)
det(government-19, the-18)
dobj(joining-17, government-19)
case(part-21, as-20)
nmod:as(joining-17, part-21)
case(initiative-27, of-22)
det(initiative-27, a-23)
amod(initiative-27, year-old-24)
amod(initiative-27, national-25)
compound(initiative-27, reconciliation-26)
nmod:of(part-21, initiative-27)
punct(said-5, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#najibullah

step :: With the pace of the campaign now heating up , the two leaders will be stepping up their appearances: At least four more debates are scheduled between now and March ./.
case(pace-3, With-1)
det(pace-3, the-2)
nmod:with(stepping-16, pace-3)
case(campaign-6, of-4)
det(campaign-6, the-5)
nmod:of(pace-3, campaign-6)
advmod(heating-8, now-7)
acl(pace-3, heating-8)
compound:prt(heating-8, up-9)
punct(stepping-16, ,-10)
det(leaders-13, the-11)
nummod(leaders-13, two-12)
nsubj(stepping-16, leaders-13)
aux(stepping-16, will-14)
aux(stepping-16, be-15)
root(ROOT-0, stepping-16)
compound:prt(stepping-16, up-17)
nmod:poss(appearances-19, their-18)
dobj(stepping-16, appearances-19)
punct(stepping-16, :-20)
case(least-22, At-21)
nmod:npmod(four-23, least-22)
nummod(debates-25, four-23)
advmod(four-23, more-24)
nsubjpass(scheduled-27, debates-25)
auxpass(scheduled-27, are-26)
parataxis(stepping-16, scheduled-27)
case(now-29, between-28)
nmod:between(scheduled-27, now-29)
cc(now-29, and-30)
nmod:between(scheduled-27, March-31)
conj:and(now-29, March-31)
punct(stepping-16, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#appearances

step :: Mr. Morales , excited , asks me to step outside a moment ./.
compound(Morales-2, Mr.-1)
nsubj(asks-6, Morales-2)
punct(Morales-2, ,-3)
acl(Morales-2, excited-4)
punct(Morales-2, ,-5)
root(ROOT-0, asks-6)
dobj(asks-6, me-7)
nsubj:xsubj(step-9, me-7)
mark(step-9, to-8)
xcomp(asks-6, step-9)
case(moment-12, outside-10)
det(moment-12, a-11)
nmod:outside(step-9, moment-12)
punct(asks-6, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#me

step :: Evidence in the New Jersey trial showed the driver had stepped on both pedals ./.
nsubj(showed-7, Evidence-1)
case(trial-6, in-2)
det(trial-6, the-3)
compound(trial-6, New-4)
compound(trial-6, Jersey-5)
nmod:in(Evidence-1, trial-6)
root(ROOT-0, showed-7)
det(driver-9, the-8)
nsubj(stepped-11, driver-9)
aux(stepped-11, had-10)
ccomp(showed-7, stepped-11)
case(pedals-14, on-12)
det(pedals-14, both-13)
nmod:on(stepped-11, pedals-14)
punct(showed-7, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#driver

step :: What steps in this direction are they overlooking ?/.
det(steps-2, What-1)
dobj(are-6, steps-2)
case(direction-5, in-3)
det(direction-5, this-4)
nmod:in(steps-2, direction-5)
root(ROOT-0, are-6)
nsubj(overlooking-8, they-7)
dep(are-6, overlooking-8)
punct(are-6, ?-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: step#direction

stick :: We 're stuck with stagnant real income and competitiveness problems in international markets unless productivity improves . ''/''
nsubjpass(stuck-3, We-1)
auxpass(stuck-3, 're-2)
root(ROOT-0, stuck-3)
case(income-7, with-4)
amod(income-7, stagnant-5)
amod(income-7, real-6)
nmod:with(stuck-3, income-7)
cc(income-7, and-8)
compound(problems-10, competitiveness-9)
nmod:with(stuck-3, problems-10)
conj:and(income-7, problems-10)
case(markets-13, in-11)
amod(markets-13, international-12)
nmod:in(income-7, markets-13)
mark(improves-16, unless-14)
nsubj(improves-16, productivity-15)
advcl(stuck-3, improves-16)
punct(stuck-3, .-17)
punct(stuck-3, ''-18)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: stick#we

stick :: Unless Medicare wants to come up with the resources to fund competent inspection it looks as if we are going to be stuck with the work of the hacks currently doing the job ./.
mark(wants-3, Unless-1)
nsubj(wants-3, Medicare-2)
nsubj:xsubj(come-5, Medicare-2)
root(ROOT-0, wants-3)
mark(come-5, to-4)
xcomp(wants-3, come-5)
compound:prt(come-5, up-6)
case(resources-9, with-7)
det(resources-9, the-8)
nmod:with(come-5, resources-9)
mark(fund-11, to-10)
xcomp(come-5, fund-11)
amod(inspection-13, competent-12)
dobj(fund-11, inspection-13)
nsubj(looks-15, it-14)
acl:relcl(inspection-13, looks-15)
mark(going-20, as-16)
mwe(as-16, if-17)
nsubj(going-20, we-18)
nsubjpass:xsubj(stuck-23, we-18)
aux(going-20, are-19)
advcl(looks-15, going-20)
mark(stuck-23, to-21)
auxpass(stuck-23, be-22)
xcomp(going-20, stuck-23)
case(work-26, with-24)
det(work-26, the-25)
nmod:with(stuck-23, work-26)
case(hacks-29, of-27)
det(hacks-29, the-28)
nmod:of(work-26, hacks-29)
advmod(doing-31, currently-30)
acl(hacks-29, doing-31)
det(job-33, the-32)
dobj(doing-31, job-33)
punct(wants-3, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#be

stick :: Mississippi 's penchant for sticking with a senator , once elected , magnifies the importance of this campaign ./.
nmod:poss(penchant-3, Mississippi-1)
case(Mississippi-1, 's-2)
nsubj(magnifies-13, penchant-3)
mark(sticking-5, for-4)
acl(penchant-3, sticking-5)
case(senator-8, with-6)
det(senator-8, a-7)
nmod:with(sticking-5, senator-8)
punct(magnifies-13, ,-9)
advmod(elected-11, once-10)
advcl(magnifies-13, elected-11)
punct(magnifies-13, ,-12)
root(ROOT-0, magnifies-13)
det(importance-15, the-14)
dobj(magnifies-13, importance-15)
case(campaign-18, of-16)
det(campaign-18, this-17)
nmod:of(importance-15, campaign-18)
punct(magnifies-13, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#senator

stick :: But rock-bottom discounters who stick to that philosophy limit themselves , he says , because `` We 'll always be a niche player for a certain type of client ./.
root(ROOT-0, But-1)
compound(discounters-3, rock-bottom-2)
dep(But-1, discounters-3)
nsubj(stick-5, discounters-3)
ref(discounters-3, who-4)
acl:relcl(discounters-3, stick-5)
case(limit-9, to-6)
det(limit-9, that-7)
compound(limit-9, philosophy-8)
nmod:to(stick-5, limit-9)
nmod:npmod(limit-9, themselves-10)
punct(says-13, ,-11)
nsubj(says-13, he-12)
dep(discounters-3, says-13)
punct(says-13, ,-14)
mark(player-23, because-15)
punct(player-23, ``-16)
nsubj(player-23, We-17)
aux(player-23, 'll-18)
advmod(player-23, always-19)
cop(player-23, be-20)
det(player-23, a-21)
compound(player-23, niche-22)
advcl(says-13, player-23)
case(type-27, for-24)
det(type-27, a-25)
amod(type-27, certain-26)
nmod:for(player-23, type-27)
case(client-29, of-28)
nmod:of(type-27, client-29)
punct(But-1, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#discounters

stick :: MISSED CONNECTIONS: If you 're bound for Denver but get stuck in Detroit for the night because of a missed connection , do n't expect the airline to help ./.
amod(CONNECTIONS-2, MISSED-1)
root(ROOT-0, CONNECTIONS-2)
punct(CONNECTIONS-2, :-3)
mark(bound-7, If-4)
nsubjpass(bound-7, you-5)
nsubjpass(stuck-12, you-5)
nsubj(expect-26, you-5)
auxpass(bound-7, 're-6)
dep(CONNECTIONS-2, bound-7)
case(Denver-9, for-8)
nmod:for(bound-7, Denver-9)
cc(bound-7, but-10)
auxpass(stuck-12, get-11)
dep(CONNECTIONS-2, stuck-12)
conj:but(bound-7, stuck-12)
case(Detroit-14, in-13)
nmod:in(stuck-12, Detroit-14)
case(night-17, for-15)
det(night-17, the-16)
nmod:for(stuck-12, night-17)
case(connection-22, because-18)
mwe(because-18, of-19)
det(connection-22, a-20)
amod(connection-22, missed-21)
nmod:because_of(stuck-12, connection-22)
punct(bound-7, ,-23)
aux(expect-26, do-24)
neg(expect-26, n't-25)
dep(CONNECTIONS-2, expect-26)
conj:but(bound-7, expect-26)
det(airline-28, the-27)
dobj(expect-26, airline-28)
nsubj:xsubj(help-30, airline-28)
mark(help-30, to-29)
xcomp(expect-26, help-30)
punct(CONNECTIONS-2, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#you

stick :: The Nasdaq composite index , stuck in a narrow range since the beginning of September , slipped 0.28 to 384.20 ./.
det(index-4, The-1)
compound(index-4, Nasdaq-2)
compound(index-4, composite-3)
nsubj(stuck-6, index-4)
punct(stuck-6, ,-5)
root(ROOT-0, stuck-6)
case(range-10, in-7)
det(range-10, a-8)
amod(range-10, narrow-9)
nmod:in(stuck-6, range-10)
case(beginning-13, since-11)
det(beginning-13, the-12)
nmod:since(stuck-6, beginning-13)
case(September-15, of-14)
nmod:of(beginning-13, September-15)
punct(stuck-6, ,-16)
advcl(stuck-6, slipped-17)
dobj(slipped-17, 0.28-18)
case(384.20-20, to-19)
nmod:to(slipped-17, 384.20-20)
punct(stuck-6, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#index

stick :: Instead of playing the distance runners ' dreary game of sticking with the pack until the last lap or two , he ran off by himself early and dared the boys to catch him ./.
mark(playing-3, Instead-1)
mwe(Instead-1, of-2)
advcl(ran-23, playing-3)
det(runners-6, the-4)
compound(runners-6, distance-5)
nmod:poss(game-9, runners-6)
case(runners-6, '-7)
amod(game-9, dreary-8)
dobj(playing-3, game-9)
mark(sticking-11, of-10)
acl(game-9, sticking-11)
case(pack-14, with-12)
det(pack-14, the-13)
nmod:with(sticking-11, pack-14)
case(lap-18, until-15)
det(lap-18, the-16)
amod(lap-18, last-17)
nmod:until(sticking-11, lap-18)
cc(lap-18, or-19)
nmod:until(sticking-11, two-20)
conj:or(lap-18, two-20)
punct(ran-23, ,-21)
nsubj(ran-23, he-22)
nsubj(dared-29, he-22)
root(ROOT-0, ran-23)
compound:prt(ran-23, off-24)
case(himself-26, by-25)
nmod:by(ran-23, himself-26)
advmod(ran-23, early-27)
cc(ran-23, and-28)
conj:and(ran-23, dared-29)
det(boys-31, the-30)
dobj(dared-29, boys-31)
mark(catch-33, to-32)
advcl(dared-29, catch-33)
dobj(catch-33, him-34)
punct(ran-23, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#pack

stick :: David Seiders , chief economist for the National Association of Home Builders , is sticking to his forecast of mortgage rates of between 11 % and 11.5 % by year end ./.
compound(Seiders-2, David-1)
nsubj(sticking-15, Seiders-2)
punct(Seiders-2, ,-3)
amod(economist-5, chief-4)
appos(Seiders-2, economist-5)
case(Association-9, for-6)
det(Association-9, the-7)
compound(Association-9, National-8)
nmod:for(economist-5, Association-9)
case(Builders-12, of-10)
compound(Builders-12, Home-11)
nmod:of(Association-9, Builders-12)
punct(Seiders-2, ,-13)
aux(sticking-15, is-14)
root(ROOT-0, sticking-15)
case(forecast-18, to-16)
nmod:poss(forecast-18, his-17)
nmod:to(sticking-15, forecast-18)
case(rates-21, of-19)
compound(rates-21, mortgage-20)
nmod:of(forecast-18, rates-21)
case(%-25, of-22)
amod(%-25, between-23)
nummod(%-25, 11-24)
nmod:of(rates-21, %-25)
cc(%-25, and-26)
nummod(%-28, 11.5-27)
nmod:of(rates-21, %-28)
conj:and(%-25, %-28)
case(end-31, by-29)
compound(end-31, year-30)
nmod:by(sticking-15, end-31)
punct(sticking-15, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#seiders

stick :: The Agriculture Department stuck by last month 's estimates of drought damage to 1988 crop yields , predicting once again a 37 % plunge in the nation 's corn harvest and a 23 % drop in soybean production ./.
det(Department-3, The-1)
compound(Department-3, Agriculture-2)
nsubj(stuck-4, Department-3)
root(ROOT-0, stuck-4)
case(estimates-9, by-5)
amod(month-7, last-6)
nmod:poss(estimates-9, month-7)
case(month-7, 's-8)
nmod:by(stuck-4, estimates-9)
case(damage-12, of-10)
compound(damage-12, drought-11)
nmod:of(estimates-9, damage-12)
case(yields-16, to-13)
nummod(yields-16, 1988-14)
compound(yields-16, crop-15)
nmod:to(damage-12, yields-16)
punct(stuck-4, ,-17)
xcomp(stuck-4, predicting-18)
advmod(again-20, once-19)
advmod(predicting-18, again-20)
det(plunge-24, a-21)
compound(%-23, 37-22)
amod(plunge-24, %-23)
dobj(predicting-18, plunge-24)
case(harvest-30, in-25)
det(nation-27, the-26)
nmod:poss(harvest-30, nation-27)
case(nation-27, 's-28)
compound(harvest-30, corn-29)
nmod:in(plunge-24, harvest-30)
cc(plunge-24, and-31)
det(drop-35, a-32)
compound(%-34, 23-33)
amod(drop-35, %-34)
dobj(predicting-18, drop-35)
conj:and(plunge-24, drop-35)
case(production-38, in-36)
compound(production-38, soybean-37)
nmod:in(drop-35, production-38)
punct(stuck-4, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#department

stick :: Yesterday 's bond and yen sell-off in Japan occurred after central bank officials told local reporters the bank was sticking to that position ./.
nmod:poss(bond-3, Yesterday-1)
case(Yesterday-1, 's-2)
nsubj(occurred-9, bond-3)
cc(bond-3, and-4)
compound(sell-off-6, yen-5)
conj:and(bond-3, sell-off-6)
nsubj(occurred-9, sell-off-6)
case(Japan-8, in-7)
nmod:in(bond-3, Japan-8)
root(ROOT-0, occurred-9)
mark(told-14, after-10)
amod(officials-13, central-11)
compound(officials-13, bank-12)
nsubj(told-14, officials-13)
advcl(occurred-9, told-14)
amod(reporters-16, local-15)
dobj(told-14, reporters-16)
det(bank-18, the-17)
nsubj(sticking-20, bank-18)
aux(sticking-20, was-19)
ccomp(told-14, sticking-20)
case(position-23, to-21)
det(position-23, that-22)
nmod:to(sticking-20, position-23)
punct(occurred-9, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#bank

stick :: `` They just wo n't stick , '' predicts Mr. Frent , the dealer ./.
punct(predicts-9, ``-1)
nsubj(stick-6, They-2)
advmod(stick-6, just-3)
aux(stick-6, wo-4)
neg(stick-6, n't-5)
ccomp(predicts-9, stick-6)
punct(predicts-9, ,-7)
punct(predicts-9, ''-8)
root(ROOT-0, predicts-9)
compound(Frent-11, Mr.-10)
nsubj(predicts-9, Frent-11)
punct(Frent-11, ,-12)
det(dealer-14, the-13)
appos(Frent-11, dealer-14)
punct(predicts-9, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#they

stick :: `` To me there is absolutely no fun being stuck within the same four walls every day , '' she says ./.
punct(is-5, ``-1)
case(me-3, To-2)
nmod:to(is-5, me-3)
expl(is-5, there-4)
dep(says-21, is-5)
advmod(fun-8, absolutely-6)
neg(fun-8, no-7)
nsubjpass(stuck-10, fun-8)
auxpass(stuck-10, being-9)
ccomp(is-5, stuck-10)
case(walls-15, within-11)
det(walls-15, the-12)
amod(walls-15, same-13)
nummod(walls-15, four-14)
nmod:within(stuck-10, walls-15)
det(day-17, every-16)
nmod:tmod(stuck-10, day-17)
punct(is-5, ,-18)
punct(is-5, ''-19)
nsubj(says-21, she-20)
root(ROOT-0, says-21)
punct(says-21, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#fun

stick :: The Republican campaign is sticking to its story of not releasing Mr. Bush 's vice-presidential selection until Thursday ./.
det(campaign-3, The-1)
compound(campaign-3, Republican-2)
nsubj(sticking-5, campaign-3)
aux(sticking-5, is-4)
root(ROOT-0, sticking-5)
case(story-8, to-6)
nmod:poss(story-8, its-7)
nmod:to(sticking-5, story-8)
mark(releasing-11, of-9)
neg(releasing-11, not-10)
acl(story-8, releasing-11)
compound(Bush-13, Mr.-12)
nmod:poss(selection-16, Bush-13)
case(Bush-13, 's-14)
amod(selection-16, vice-presidential-15)
dobj(releasing-11, selection-16)
case(Thursday-18, until-17)
nmod:until(releasing-11, Thursday-18)
punct(sticking-5, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#campaign

stick :: Over-the-counter stocks , stuck in doldrums lately , managed a second consecutive advance yesterday as trading desks came to life for one of the few times this month ./.
amod(stocks-2, Over-the-counter-1)
nsubj(stuck-4, stocks-2)
punct(stuck-4, ,-3)
root(ROOT-0, stuck-4)
case(doldrums-6, in-5)
nmod:in(stuck-4, doldrums-6)
advmod(stuck-4, lately-7)
punct(stuck-4, ,-8)
xcomp(stuck-4, managed-9)
det(advance-13, a-10)
amod(advance-13, second-11)
amod(advance-13, consecutive-12)
dobj(managed-9, advance-13)
nmod:tmod(managed-9, yesterday-14)
mark(came-18, as-15)
compound(desks-17, trading-16)
nsubj(came-18, desks-17)
advcl(managed-9, came-18)
case(life-20, to-19)
nmod:to(came-18, life-20)
case(one-22, for-21)
nmod:for(came-18, one-22)
case(times-26, of-23)
det(times-26, the-24)
amod(times-26, few-25)
nmod:of(one-22, times-26)
det(month-28, this-27)
nmod:tmod(times-26, month-28)
punct(stuck-4, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#stocks

stick :: One of the company 's managing directors , Seymour M. Lotsoff , said he is sticking to short-maturity bonds because `` I 'm not optimistic about interest rates . ''/''
nsubj(said-13, One-1)
case(directors-7, of-2)
det(company-4, the-3)
nmod:poss(directors-7, company-4)
case(company-4, 's-5)
compound(directors-7, managing-6)
nmod:of(One-1, directors-7)
punct(One-1, ,-8)
compound(Lotsoff-11, Seymour-9)
compound(Lotsoff-11, M.-10)
appos(One-1, Lotsoff-11)
punct(One-1, ,-12)
root(ROOT-0, said-13)
nsubj(sticking-16, he-14)
aux(sticking-16, is-15)
ccomp(said-13, sticking-16)
case(bonds-19, to-17)
amod(bonds-19, short-maturity-18)
nmod:to(sticking-16, bonds-19)
mark(optimistic-25, because-20)
punct(optimistic-25, ``-21)
nsubj(optimistic-25, I-22)
cop(optimistic-25, 'm-23)
neg(optimistic-25, not-24)
advcl(sticking-16, optimistic-25)
case(rates-28, about-26)
compound(rates-28, interest-27)
nmod:about(optimistic-25, rates-28)
punct(said-13, .-29)
punct(said-13, ''-30)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: stick#he

stick :: In early adulthood , she stuck with the Democratic Party , joining the protests for civil rights in the South ./.
case(adulthood-3, In-1)
amod(adulthood-3, early-2)
nmod:in(stuck-6, adulthood-3)
punct(stuck-6, ,-4)
nsubj(stuck-6, she-5)
root(ROOT-0, stuck-6)
case(Party-10, with-7)
det(Party-10, the-8)
amod(Party-10, Democratic-9)
nmod:with(stuck-6, Party-10)
punct(stuck-6, ,-11)
xcomp(stuck-6, joining-12)
det(protests-14, the-13)
dobj(joining-12, protests-14)
case(rights-17, for-15)
amod(rights-17, civil-16)
nmod:for(joining-12, rights-17)
case(South-20, in-18)
det(South-20, the-19)
nmod:in(rights-17, South-20)
punct(stuck-6, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#she

stick :: When mixed with the blood of infected people , CBre3 sticks to the antibodies , causing a visually observable reaction ./.
advmod(mixed-2, When-1)
advcl(sticks-11, mixed-2)
case(blood-5, with-3)
det(blood-5, the-4)
nmod:with(mixed-2, blood-5)
case(people-8, of-6)
amod(people-8, infected-7)
nmod:of(blood-5, people-8)
punct(sticks-11, ,-9)
nsubj(sticks-11, CBre3-10)
root(ROOT-0, sticks-11)
case(antibodies-14, to-12)
det(antibodies-14, the-13)
nmod:to(sticks-11, antibodies-14)
punct(sticks-11, ,-15)
xcomp(sticks-11, causing-16)
det(reaction-20, a-17)
advmod(observable-19, visually-18)
amod(reaction-20, observable-19)
dobj(causing-16, reaction-20)
punct(sticks-11, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#cbre3

stick :: Economists are sticking with predictions that Britain 's gross domestic product , or output of goods and services minus foreign income , will rise just 2 % or 3 % next year after rising about 4 % this year ./.
nsubj(sticking-3, Economists-1)
aux(sticking-3, are-2)
root(ROOT-0, sticking-3)
case(predictions-5, with-4)
nmod:with(sticking-3, predictions-5)
mark(rise-24, that-6)
nmod:poss(product-11, Britain-7)
case(Britain-7, 's-8)
amod(product-11, gross-9)
amod(product-11, domestic-10)
nsubj(rise-24, product-11)
punct(product-11, ,-12)
cc(product-11, or-13)
conj:or(product-11, output-14)
nsubj(rise-24, output-14)
case(goods-16, of-15)
nmod:of(output-14, goods-16)
cc(goods-16, and-17)
nmod:of(output-14, services-18)
conj:and(goods-16, services-18)
cc(output-14, minus-19)
amod(income-21, foreign-20)
conj:or(product-11, income-21)
conj:minus(output-14, income-21)
punct(product-11, ,-22)
aux(rise-24, will-23)
ccomp(predictions-5, rise-24)
advmod(%-27, just-25)
nummod(%-27, 2-26)
dobj(rise-24, %-27)
cc(%-27, or-28)
nummod(%-30, 3-29)
dobj(rise-24, %-30)
conj:or(%-27, %-30)
amod(year-32, next-31)
nmod:tmod(rise-24, year-32)
mark(rising-34, after-33)
advcl(rise-24, rising-34)
advmod(4-36, about-35)
nummod(%-37, 4-36)
dobj(rising-34, %-37)
det(year-39, this-38)
nmod:tmod(rising-34, year-39)
punct(sticking-3, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#economists

stick :: He preferred to stick to instant photography . ''/''
nsubj(preferred-2, He-1)
nsubj:xsubj(stick-4, He-1)
root(ROOT-0, preferred-2)
mark(stick-4, to-3)
xcomp(preferred-2, stick-4)
case(photography-7, to-5)
compound(photography-7, instant-6)
nmod:to(stick-4, photography-7)
punct(preferred-2, .-8)
punct(preferred-2, ''-9)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: stick#he

stick :: She 's been able to stick to this policy , largely because of the nature of her music ./.
nsubjpass(able-4, She-1)
nsubj:xsubj(stick-6, She-1)
auxpass(able-4, 's-2)
cop(able-4, been-3)
root(ROOT-0, able-4)
mark(stick-6, to-5)
xcomp(able-4, stick-6)
case(policy-9, to-7)
det(policy-9, this-8)
nmod:to(stick-6, policy-9)
punct(able-4, ,-10)
advmod(nature-15, largely-11)
case(nature-15, because-12)
mwe(because-12, of-13)
det(nature-15, the-14)
nmod:because_of(able-4, nature-15)
case(music-18, of-16)
nmod:poss(music-18, her-17)
nmod:of(nature-15, music-18)
punct(able-4, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#she

stick :: The Soviet Germans generally are simple people with little education -- like America 's Pennsylvania Dutch , they 've stuck together in small Protestant communities and speak an antiquated German ./.
det(Germans-3, The-1)
amod(Germans-3, Soviet-2)
nsubj(people-7, Germans-3)
advmod(people-7, generally-4)
cop(people-7, are-5)
amod(people-7, simple-6)
root(ROOT-0, people-7)
case(education-10, with-8)
amod(education-10, little-9)
nmod:with(people-7, education-10)
punct(people-7, ---11)
case(Dutch-16, like-12)
nmod:poss(Dutch-16, America-13)
case(America-13, 's-14)
compound(Dutch-16, Pennsylvania-15)
nmod:like(people-7, Dutch-16)
punct(Dutch-16, ,-17)
nsubj(stuck-20, they-18)
nsubj(speak-27, they-18)
aux(stuck-20, 've-19)
acl:relcl(Dutch-16, stuck-20)
advmod(stuck-20, together-21)
case(communities-25, in-22)
amod(communities-25, small-23)
amod(communities-25, Protestant-24)
nmod:in(stuck-20, communities-25)
cc(stuck-20, and-26)
acl:relcl(Dutch-16, speak-27)
conj:and(stuck-20, speak-27)
det(German-30, an-28)
amod(German-30, antiquated-29)
dobj(speak-27, German-30)
punct(people-7, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#they

stick :: The confirmation of the money target did n't come as a surprise to the markets , especially after Bundesbank Vice President Helmut Schlesinger indicated last week that the central bank wants to stick to this goal ./.
det(confirmation-2, The-1)
nsubj(come-9, confirmation-2)
case(target-6, of-3)
det(target-6, the-4)
compound(target-6, money-5)
nmod:of(confirmation-2, target-6)
aux(come-9, did-7)
neg(come-9, n't-8)
root(ROOT-0, come-9)
case(surprise-12, as-10)
det(surprise-12, a-11)
nmod:as(come-9, surprise-12)
case(markets-15, to-13)
det(markets-15, the-14)
nmod:to(surprise-12, markets-15)
punct(come-9, ,-16)
advmod(indicated-24, especially-17)
mark(indicated-24, after-18)
compound(Schlesinger-23, Bundesbank-19)
compound(Schlesinger-23, Vice-20)
compound(Schlesinger-23, President-21)
compound(Schlesinger-23, Helmut-22)
nsubj(indicated-24, Schlesinger-23)
advcl(come-9, indicated-24)
amod(week-26, last-25)
nmod:tmod(indicated-24, week-26)
mark(wants-31, that-27)
det(bank-30, the-28)
amod(bank-30, central-29)
nsubj(wants-31, bank-30)
nsubj:xsubj(stick-33, bank-30)
ccomp(indicated-24, wants-31)
mark(stick-33, to-32)
xcomp(wants-31, stick-33)
case(goal-36, to-34)
det(goal-36, this-35)
nmod:to(stick-33, goal-36)
punct(come-9, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#bank

stick :: One rival said he presumed that USX had made a strategic decision to reach certain profit levels and , in an effort to exert market leadership , stuck to it ./.
nummod(rival-2, One-1)
nsubj(said-3, rival-2)
root(ROOT-0, said-3)
nsubj(presumed-5, he-4)
ccomp(said-3, presumed-5)
mark(made-9, that-6)
nsubj(made-9, USX-7)
nsubj(stuck-28, USX-7)
aux(made-9, had-8)
ccomp(presumed-5, made-9)
det(decision-12, a-10)
amod(decision-12, strategic-11)
dobj(made-9, decision-12)
mark(reach-14, to-13)
acl(decision-12, reach-14)
amod(levels-17, certain-15)
compound(levels-17, profit-16)
dobj(reach-14, levels-17)
cc(made-9, and-18)
punct(stuck-28, ,-19)
case(effort-22, in-20)
det(effort-22, an-21)
nmod:in(stuck-28, effort-22)
mark(exert-24, to-23)
acl(effort-22, exert-24)
compound(leadership-26, market-25)
dobj(exert-24, leadership-26)
punct(stuck-28, ,-27)
ccomp(presumed-5, stuck-28)
conj:and(made-9, stuck-28)
case(it-30, to-29)
nmod:to(stuck-28, it-30)
punct(said-3, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#usx

stick :: In Louisiana , CIT was stuck with repossessed ships that had supplied drilling platforms in the Gulf of Mexico ./.
case(Louisiana-2, In-1)
nmod:in(stuck-6, Louisiana-2)
punct(stuck-6, ,-3)
nsubjpass(stuck-6, CIT-4)
auxpass(stuck-6, was-5)
root(ROOT-0, stuck-6)
case(ships-9, with-7)
amod(ships-9, repossessed-8)
nmod:with(stuck-6, ships-9)
nsubj(supplied-12, ships-9)
ref(ships-9, that-10)
aux(supplied-12, had-11)
acl:relcl(ships-9, supplied-12)
compound(platforms-14, drilling-13)
dobj(supplied-12, platforms-14)
case(Gulf-17, in-15)
det(Gulf-17, the-16)
nmod:in(supplied-12, Gulf-17)
case(Mexico-19, of-18)
nmod:of(Gulf-17, Mexico-19)
punct(stuck-6, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#cit

stick :: Pop music did get stuck in the 1970s , as evidenced in the second film , `` The Gospel According to Al Green . ''/''
compound(music-2, Pop-1)
nsubjpass(stuck-5, music-2)
aux(stuck-5, did-3)
auxpass(stuck-5, get-4)
root(ROOT-0, stuck-5)
case(1970s-8, in-6)
det(1970s-8, the-7)
nmod:in(stuck-5, 1970s-8)
punct(stuck-5, ,-9)
mark(evidenced-11, as-10)
advcl(stuck-5, evidenced-11)
case(film-15, in-12)
det(film-15, the-13)
amod(film-15, second-14)
nmod:in(evidenced-11, film-15)
punct(stuck-5, ,-16)
punct(stuck-5, ``-17)
det(Gospel-19, The-18)
dobj(stuck-5, Gospel-19)
case(Green-23, According-20)
mwe(According-20, to-21)
compound(Green-23, Al-22)
nmod:according_to(Gospel-19, Green-23)
punct(stuck-5, .-24)
punct(stuck-5, ''-25)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: stick#gospel

stick :: `` The question is , how many times does Congress have to stick its hands in the meat grinder before it notices it hurts ? ''/''
root(ROOT-0, ``-1)
det(question-3, The-2)
nsubj(is-4, question-3)
root(``-1, is-4)
punct(is-4, ,-5)
advmod(many-7, how-6)
amod(times-8, many-7)
dep(have-11, times-8)
aux(have-11, does-9)
nsubj(have-11, Congress-10)
nsubj:xsubj(stick-13, Congress-10)
ccomp(is-4, have-11)
mark(stick-13, to-12)
xcomp(have-11, stick-13)
nmod:poss(hands-15, its-14)
dobj(stick-13, hands-15)
case(grinder-19, in-16)
det(grinder-19, the-17)
compound(grinder-19, meat-18)
nmod:in(stick-13, grinder-19)
mark(notices-22, before-20)
nsubj(notices-22, it-21)
advcl(stick-13, notices-22)
nsubj(hurts-24, it-23)
ccomp(notices-22, hurts-24)
punct(is-4, ?-25)
punct(is-4, ''-26)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: stick#hands

stick :: Macmillan advisers said the company plans to stick with its proposal ./.
compound(advisers-2, Macmillan-1)
nsubj(said-3, advisers-2)
root(ROOT-0, said-3)
det(company-5, the-4)
nsubj(plans-6, company-5)
nsubj:xsubj(stick-8, company-5)
ccomp(said-3, plans-6)
mark(stick-8, to-7)
xcomp(plans-6, stick-8)
case(proposal-11, with-9)
nmod:poss(proposal-11, its-10)
nmod:with(stick-8, proposal-11)
punct(said-3, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#company

stick :: `` It has taken a long time because there 's this inertia to stick with traditional media advertising and coupons . ''/''
root(ROOT-0, ``-1)
nsubj(taken-4, It-2)
aux(taken-4, has-3)
root(``-1, taken-4)
det(time-7, a-5)
amod(time-7, long-6)
dobj(taken-4, time-7)
mark('s-10, because-8)
expl('s-10, there-9)
advcl(taken-4, 's-10)
det(inertia-12, this-11)
nsubj('s-10, inertia-12)
mark(stick-14, to-13)
acl(inertia-12, stick-14)
case(advertising-18, with-15)
amod(advertising-18, traditional-16)
compound(advertising-18, media-17)
nmod:with(stick-14, advertising-18)
cc(advertising-18, and-19)
nmod:with(stick-14, coupons-20)
conj:and(advertising-18, coupons-20)
punct(taken-4, .-21)
punct(taken-4, ''-22)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: stick#advertising

stick :: And before long , he had made up his mind to stick it to Bic ./.
cc(made-7, And-1)
advmod(long-3, before-2)
advmod(made-7, long-3)
punct(made-7, ,-4)
nsubj(made-7, he-5)
aux(made-7, had-6)
root(ROOT-0, made-7)
compound:prt(made-7, up-8)
nmod:poss(mind-10, his-9)
dobj(made-7, mind-10)
mark(stick-12, to-11)
advcl(made-7, stick-12)
dobj(stick-12, it-13)
case(Bic-15, to-14)
nmod:to(stick-12, Bic-15)
punct(made-7, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#it

stick :: Despite many gains , the sad truth is that most of Mr. Eastland 's time was spent sticking his finger in the dike of politically motivated attacks on Mr. Meese ./.
case(gains-3, Despite-1)
amod(gains-3, many-2)
nmod:despite(is-8, gains-3)
punct(is-8, ,-4)
det(truth-7, the-5)
amod(truth-7, sad-6)
nsubj(is-8, truth-7)
root(ROOT-0, is-8)
mark(spent-17, that-9)
nsubjpass(spent-17, most-10)
case(time-15, of-11)
compound(Eastland-13, Mr.-12)
nmod:poss(time-15, Eastland-13)
case(Eastland-13, 's-14)
nmod:of(most-10, time-15)
auxpass(spent-17, was-16)
ccomp(is-8, spent-17)
xcomp(spent-17, sticking-18)
nmod:poss(finger-20, his-19)
dobj(sticking-18, finger-20)
case(dike-23, in-21)
det(dike-23, the-22)
nmod:in(sticking-18, dike-23)
case(attacks-27, of-24)
advmod(motivated-26, politically-25)
amod(attacks-27, motivated-26)
nmod:of(dike-23, attacks-27)
case(Meese-30, on-28)
compound(Meese-30, Mr.-29)
nmod:on(attacks-27, Meese-30)
punct(is-8, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#finger

stick :: `` If the insurance industry gets stuck with even a quarter of the estimated cleanup costs , '' says Andre Maisonpierre , president of the Reinsurance Association of America , it will cause `` major insolvencies . ''/''
punct(says-19, ``-1)
mark(stuck-7, If-2)
det(industry-5, the-3)
compound(industry-5, insurance-4)
nsubjpass(stuck-7, industry-5)
auxpass(stuck-7, gets-6)
ccomp(says-19, stuck-7)
case(quarter-11, with-8)
advmod(quarter-11, even-9)
det(quarter-11, a-10)
nmod:with(stuck-7, quarter-11)
case(costs-16, of-12)
det(costs-16, the-13)
amod(costs-16, estimated-14)
compound(costs-16, cleanup-15)
nmod:of(quarter-11, costs-16)
punct(says-19, ,-17)
punct(says-19, ''-18)
root(ROOT-0, says-19)
compound(Maisonpierre-21, Andre-20)
nsubj(says-19, Maisonpierre-21)
punct(Maisonpierre-21, ,-22)
appos(Maisonpierre-21, president-23)
case(Association-27, of-24)
det(Association-27, the-25)
compound(Association-27, Reinsurance-26)
nmod:of(president-23, Association-27)
case(America-29, of-28)
nmod:of(Association-27, America-29)
punct(says-19, ,-30)
nsubj(cause-33, it-31)
aux(cause-33, will-32)
ccomp(says-19, cause-33)
punct(cause-33, ``-34)
amod(insolvencies-36, major-35)
dobj(cause-33, insolvencies-36)
punct(says-19, .-37)
punct(says-19, ''-38)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: stick#industry

stick :: But yesterday Mr. Lawson said it would be `` pretty good anti-inflationary discipline '' if the pound `` can stick close '' to a level against the West German currency ./.
cc(said-5, But-1)
nmod:tmod(said-5, yesterday-2)
compound(Lawson-4, Mr.-3)
nsubj(said-5, Lawson-4)
root(ROOT-0, said-5)
nsubj(discipline-13, it-6)
aux(discipline-13, would-7)
cop(discipline-13, be-8)
punct(discipline-13, ``-9)
advmod(good-11, pretty-10)
amod(discipline-13, good-11)
amod(discipline-13, anti-inflationary-12)
ccomp(said-5, discipline-13)
punct(discipline-13, ''-14)
mark(stick-20, if-15)
det(pound-17, the-16)
nsubj(stick-20, pound-17)
punct(stick-20, ``-18)
aux(stick-20, can-19)
advcl(discipline-13, stick-20)
xcomp(stick-20, close-21)
punct(close-21, ''-22)
case(level-25, to-23)
det(level-25, a-24)
nmod:to(close-21, level-25)
case(currency-30, against-26)
det(currency-30, the-27)
amod(German-29, West-28)
amod(currency-30, German-29)
nmod:against(level-25, currency-30)
punct(said-5, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#pound

stick :: Some say that his absolute conviction in his own hunches may ultimately prove his undoing , that he could rapidly get stuck with multimillion-dollar losses if the market moves sharply against him and he refuses to admit that he is wrong ./.
nsubj(say-2, Some-1)
root(ROOT-0, say-2)
mark(prove-13, that-3)
nmod:poss(conviction-6, his-4)
amod(conviction-6, absolute-5)
nsubj(prove-13, conviction-6)
case(hunches-10, in-7)
nmod:poss(hunches-10, his-8)
amod(hunches-10, own-9)
nmod:in(conviction-6, hunches-10)
aux(prove-13, may-11)
advmod(prove-13, ultimately-12)
ccomp(say-2, prove-13)
nmod:poss(undoing-15, his-14)
dobj(prove-13, undoing-15)
punct(prove-13, ,-16)
mark(get-21, that-17)
nsubj(get-21, he-18)
aux(get-21, could-19)
advmod(get-21, rapidly-20)
ccomp(prove-13, get-21)
xcomp(get-21, stuck-22)
case(losses-25, with-23)
amod(losses-25, multimillion-dollar-24)
nmod:with(stuck-22, losses-25)
mark(moves-29, if-26)
det(market-28, the-27)
nsubj(moves-29, market-28)
advcl(get-21, moves-29)
advmod(moves-29, sharply-30)
case(him-32, against-31)
nmod:against(moves-29, him-32)
cc(moves-29, and-33)
nsubj(refuses-35, he-34)
nsubj:xsubj(admit-37, he-34)
advcl(get-21, refuses-35)
conj:and(moves-29, refuses-35)
mark(admit-37, to-36)
xcomp(refuses-35, admit-37)
mark(wrong-41, that-38)
nsubj(wrong-41, he-39)
cop(wrong-41, is-40)
ccomp(admit-37, wrong-41)
punct(say-2, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#losses

stick :: While earnings from exploration and production were lackluster , the companies nonetheless stuck with plans to sharply increase spending in those areas ./.
mark(lackluster-8, While-1)
nsubj(lackluster-8, earnings-2)
case(exploration-4, from-3)
nmod:from(earnings-2, exploration-4)
cc(exploration-4, and-5)
nmod:from(earnings-2, production-6)
conj:and(exploration-4, production-6)
cop(lackluster-8, were-7)
advcl(stuck-13, lackluster-8)
punct(stuck-13, ,-9)
det(companies-11, the-10)
nsubj(stuck-13, companies-11)
advmod(stuck-13, nonetheless-12)
root(ROOT-0, stuck-13)
case(plans-15, with-14)
nmod:with(stuck-13, plans-15)
mark(increase-18, to-16)
advmod(increase-18, sharply-17)
acl(plans-15, increase-18)
dobj(increase-18, spending-19)
case(areas-22, in-20)
det(areas-22, those-21)
nmod:in(spending-19, areas-22)
punct(stuck-13, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#companies

stick :: If the charges stick , it could suggest that some concepts of freedom are a bit too broad ./.
mark(stick-4, If-1)
det(charges-3, the-2)
nsubj(stick-4, charges-3)
advcl(suggest-8, stick-4)
punct(suggest-8, ,-5)
nsubj(suggest-8, it-6)
aux(suggest-8, could-7)
root(ROOT-0, suggest-8)
mark(bit-16, that-9)
det(concepts-11, some-10)
nsubj(bit-16, concepts-11)
case(freedom-13, of-12)
nmod:of(concepts-11, freedom-13)
cop(bit-16, are-14)
det(bit-16, a-15)
ccomp(suggest-8, bit-16)
advmod(broad-18, too-17)
advmod(bit-16, broad-18)
punct(suggest-8, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#charges

stick :: Unfortunately , they wo n't work in the harbor tunnel where business travelers sometimes get stuck on the way in from the airport . . . ./.
advmod(work-6, Unfortunately-1)
punct(work-6, ,-2)
nsubj(work-6, they-3)
aux(work-6, wo-4)
neg(work-6, n't-5)
root(ROOT-0, work-6)
case(tunnel-10, in-7)
det(tunnel-10, the-8)
compound(tunnel-10, harbor-9)
nmod:in(work-6, tunnel-10)
advmod(stuck-16, where-11)
compound(travelers-13, business-12)
nsubjpass(stuck-16, travelers-13)
advmod(stuck-16, sometimes-14)
auxpass(stuck-16, get-15)
acl:relcl(tunnel-10, stuck-16)
case(way-19, on-17)
det(way-19, the-18)
nmod:on(stuck-16, way-19)
case(airport-23, in-20)
case(airport-23, from-21)
det(airport-23, the-22)
nmod:from(way-19, airport-23)
punct(work-6, ...-24)
punct(work-6, /-25)
punct(work-6, .-26)
Return str :: stick#travelers

stick :: Mr. Manzi said Lotus 's strategy of designing compatible versions of 1-2-3 for many different computers besides International Business Machines Corp.-compatible personal computers is convincing more corporate buyers to stick with Lotus ./.
compound(Manzi-2, Mr.-1)
nsubj(said-3, Manzi-2)
root(ROOT-0, said-3)
nmod:poss(strategy-6, Lotus-4)
case(Lotus-4, 's-5)
dobj(said-3, strategy-6)
mark(designing-8, of-7)
acl(strategy-6, designing-8)
amod(versions-10, compatible-9)
dobj(designing-8, versions-10)
case(1-2-3-12, of-11)
nmod:of(versions-10, 1-2-3-12)
case(computers-16, for-13)
amod(computers-16, many-14)
amod(computers-16, different-15)
nmod:for(convincing-25, computers-16)
case(Machines-20, besides-17)
amod(Machines-20, International-18)
compound(Machines-20, Business-19)
nmod:besides(convincing-25, Machines-20)
amod(computers-23, Corp.-compatible-21)
amod(computers-23, personal-22)
nsubj(convincing-25, computers-23)
aux(convincing-25, is-24)
xcomp(designing-8, convincing-25)
amod(buyers-28, more-26)
amod(buyers-28, corporate-27)
dobj(convincing-25, buyers-28)
nsubj:xsubj(stick-30, buyers-28)
mark(stick-30, to-29)
xcomp(convincing-25, stick-30)
case(Lotus-32, with-31)
nmod:with(stick-30, Lotus-32)
punct(said-3, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#buyers

stick :: Since 1977 , fund manager Peter Lynch has stuck to the same basic strategy: buy any attractive stock , no matter what size or sector , or what the market is doing ./.
case(1977-2, Since-1)
nmod:since(stuck-9, 1977-2)
punct(stuck-9, ,-3)
compound(Lynch-7, fund-4)
compound(Lynch-7, manager-5)
compound(Lynch-7, Peter-6)
nsubj(stuck-9, Lynch-7)
aux(stuck-9, has-8)
root(ROOT-0, stuck-9)
case(strategy-14, to-10)
det(strategy-14, the-11)
amod(strategy-14, same-12)
amod(strategy-14, basic-13)
nmod:to(stuck-9, strategy-14)
punct(stuck-9, :-15)
parataxis(stuck-9, buy-16)
det(stock-19, any-17)
amod(stock-19, attractive-18)
dobj(buy-16, stock-19)
punct(buy-16, ,-20)
neg(matter-22, no-21)
dep(buy-16, matter-22)
det(size-24, what-23)
dep(matter-22, size-24)
cc(size-24, or-25)
dep(matter-22, sector-26)
conj:or(size-24, sector-26)
punct(size-24, ,-27)
cc(size-24, or-28)
dobj(doing-33, what-29)
det(market-31, the-30)
nsubj(doing-33, market-31)
aux(doing-33, is-32)
dep(matter-22, doing-33)
conj:or(size-24, doing-33)
punct(stuck-9, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#lynch

stick :: There are a host of reasons why the January price increase should be sticking and why prices might go up another few cents in July , when by tradition the industry will reset them ./.
expl(are-2, There-1)
root(ROOT-0, are-2)
det(host-4, a-3)
nsubj(are-2, host-4)
case(reasons-6, of-5)
nmod:of(host-4, reasons-6)
advmod(sticking-14, why-7)
det(increase-11, the-8)
compound(increase-11, January-9)
compound(increase-11, price-10)
nsubj(sticking-14, increase-11)
aux(sticking-14, should-12)
aux(sticking-14, be-13)
acl:relcl(host-4, sticking-14)
cc(sticking-14, and-15)
advmod(go-19, why-16)
nsubj(go-19, prices-17)
aux(go-19, might-18)
acl:relcl(host-4, go-19)
conj:and(sticking-14, go-19)
compound:prt(go-19, up-20)
det(cents-23, another-21)
amod(cents-23, few-22)
dobj(go-19, cents-23)
case(July-25, in-24)
nmod:in(go-19, July-25)
punct(July-25, ,-26)
advmod(reset-33, when-27)
case(tradition-29, by-28)
nmod:by(reset-33, tradition-29)
det(industry-31, the-30)
nsubj(reset-33, industry-31)
aux(reset-33, will-32)
acl:relcl(July-25, reset-33)
dobj(reset-33, them-34)
punct(are-2, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#increase

stick :: Pressure mounted on Pakistan to sign an accord aimed at securing the withdrawal of about 115 , 000 Soviet troops from neighboring Afghanistan , but Islamabad appeared to be sticking to its demand for a new government in Kabul to oversee the pullout ./.
nsubj(mounted-2, Pressure-1)
nsubj:xsubj(sign-6, Pressure-1)
root(ROOT-0, mounted-2)
case(Pakistan-4, on-3)
nmod:on(mounted-2, Pakistan-4)
mark(sign-6, to-5)
xcomp(mounted-2, sign-6)
det(accord-8, an-7)
dobj(sign-6, accord-8)
acl(accord-8, aimed-9)
mark(securing-11, at-10)
advcl(aimed-9, securing-11)
det(withdrawal-13, the-12)
dobj(securing-11, withdrawal-13)
case(115-16, of-14)
advmod(115-16, about-15)
nmod:of(withdrawal-13, 115-16)
punct(115-16, ,-17)
nummod(troops-20, 000-18)
amod(troops-20, Soviet-19)
appos(115-16, troops-20)
case(Afghanistan-23, from-21)
amod(Afghanistan-23, neighboring-22)
nmod:from(troops-20, Afghanistan-23)
punct(mounted-2, ,-24)
cc(mounted-2, but-25)
nsubj(appeared-27, Islamabad-26)
nsubj:xsubj(sticking-30, Islamabad-26)
conj:but(mounted-2, appeared-27)
mark(sticking-30, to-28)
aux(sticking-30, be-29)
xcomp(appeared-27, sticking-30)
case(demand-33, to-31)
nmod:poss(demand-33, its-32)
nmod:to(sticking-30, demand-33)
case(government-37, for-34)
det(government-37, a-35)
amod(government-37, new-36)
nmod:for(demand-33, government-37)
case(Kabul-39, in-38)
nmod:in(government-37, Kabul-39)
mark(oversee-41, to-40)
acl(demand-33, oversee-41)
det(pullout-43, the-42)
dobj(oversee-41, pullout-43)
punct(mounted-2, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#islamabad

stick :: `` When I saw all the stories , I figured I better sell or I might get stuck , '' said one portfolio manager , who last week unloaded some shares of medium-sized OTC stocks rather than risk not being able to sell off the thinly traded shares if prices started to plunge ./.
punct(said-21, ``-1)
advmod(saw-4, When-2)
nsubj(saw-4, I-3)
advcl(figured-10, saw-4)
det:predet(stories-7, all-5)
det(stories-7, the-6)
dobj(saw-4, stories-7)
punct(figured-10, ,-8)
nsubj(figured-10, I-9)
ccomp(said-21, figured-10)
nsubj(sell-13, I-11)
advmod(sell-13, better-12)
ccomp(figured-10, sell-13)
cc(sell-13, or-14)
nsubjpass(stuck-18, I-15)
aux(stuck-18, might-16)
auxpass(stuck-18, get-17)
ccomp(figured-10, stuck-18)
conj:or(sell-13, stuck-18)
punct(said-21, ,-19)
punct(said-21, ''-20)
root(ROOT-0, said-21)
nummod(manager-24, one-22)
compound(manager-24, portfolio-23)
nsubj(said-21, manager-24)
nsubj(unloaded-29, manager-24)
nsubj(risk-38, manager-24)
punct(manager-24, ,-25)
ref(manager-24, who-26)
amod(week-28, last-27)
dep(unloaded-29, week-28)
acl:relcl(manager-24, unloaded-29)
det(shares-31, some-30)
dobj(unloaded-29, shares-31)
case(stocks-35, of-32)
amod(stocks-35, medium-sized-33)
compound(stocks-35, OTC-34)
nmod:of(shares-31, stocks-35)
cc(unloaded-29, rather-36)
mwe(rather-36, than-37)
acl:relcl(manager-24, risk-38)
conj:negcc(unloaded-29, risk-38)
neg(able-41, not-39)
cop(able-41, being-40)
xcomp(risk-38, able-41)
mark(sell-43, to-42)
xcomp(able-41, sell-43)
compound:prt(sell-43, off-44)
det(shares-48, the-45)
advmod(traded-47, thinly-46)
amod(shares-48, traded-47)
dobj(sell-43, shares-48)
mark(started-51, if-49)
nsubj(started-51, prices-50)
advcl(sell-43, started-51)
case(plunge-53, to-52)
nmod:to(started-51, plunge-53)
punct(said-21, .-54)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#i

stick :: Mr. Barakat of Smith Barney said the fact that Saudi Arabia production has jumped along with the other 12 OPEC members is a `` really negative '' sign because the kingdom had been a great proponent of sticking to quotas ./.
compound(Barakat-2, Mr.-1)
nsubj(said-6, Barakat-2)
case(Barney-5, of-3)
compound(Barney-5, Smith-4)
nmod:of(Barakat-2, Barney-5)
root(ROOT-0, said-6)
det(fact-8, the-7)
nsubj(sign-28, fact-8)
mark(jumped-14, that-9)
compound(production-12, Saudi-10)
compound(production-12, Arabia-11)
nsubj(jumped-14, production-12)
aux(jumped-14, has-13)
ccomp(fact-8, jumped-14)
advmod(jumped-14, along-15)
case(members-21, with-16)
det(members-21, the-17)
amod(members-21, other-18)
nummod(members-21, 12-19)
compound(members-21, OPEC-20)
nmod:with(along-15, members-21)
cop(sign-28, is-22)
det(sign-28, a-23)
punct(sign-28, ``-24)
advmod(negative-26, really-25)
amod(sign-28, negative-26)
punct(sign-28, ''-27)
ccomp(said-6, sign-28)
mark(proponent-36, because-29)
det(kingdom-31, the-30)
nsubj(proponent-36, kingdom-31)
aux(proponent-36, had-32)
cop(proponent-36, been-33)
det(proponent-36, a-34)
amod(proponent-36, great-35)
advcl(sign-28, proponent-36)
mark(sticking-38, of-37)
acl(proponent-36, sticking-38)
case(quotas-40, to-39)
nmod:to(sticking-38, quotas-40)
punct(said-6, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#quotas

stick :: Steelworkers , mineworkers , millworkers , and the like know that what they get they get only by sticking together and winning it at the bargaining table ./.
root(ROOT-0, Steelworkers-1)
punct(Steelworkers-1, ,-2)
conj:and(Steelworkers-1, mineworkers-3)
punct(Steelworkers-1, ,-4)
conj:and(Steelworkers-1, millworkers-5)
punct(Steelworkers-1, ,-6)
cc(Steelworkers-1, and-7)
det(like-9, the-8)
nsubj(know-10, like-9)
conj:and(Steelworkers-1, know-10)
xcomp(know-10, that-11)
dobj(get-14, what-12)
nsubj(get-14, they-13)
ccomp(that-11, get-14)
nsubj(get-16, they-15)
ccomp(get-14, get-16)
advmod(sticking-19, only-17)
mark(sticking-19, by-18)
advcl(get-16, sticking-19)
advmod(sticking-19, together-20)
cc(sticking-19, and-21)
advcl(get-16, winning-22)
conj:and(sticking-19, winning-22)
dobj(winning-22, it-23)
case(table-27, at-24)
det(table-27, the-25)
compound(table-27, bargaining-26)
nmod:at(winning-22, table-27)
punct(Steelworkers-1, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

stick :: `` There 's a lot of engagements I did n't get , '' Mr. Meredith told the Roanoke Times and World-News , because `` I do n't stick to the white-liberal , black-bourgeoisie line-cussin ' Reagan , affirmative action and all that . ''/''
punct(told-16, ``-1)
expl('s-3, There-2)
ccomp(told-16, 's-3)
det(lot-5, a-4)
nsubj('s-3, lot-5)
case(engagements-7, of-6)
nmod:of(lot-5, engagements-7)
nsubj(get-11, I-8)
aux(get-11, did-9)
neg(get-11, n't-10)
acl:relcl(lot-5, get-11)
punct(told-16, ,-12)
punct(told-16, ''-13)
compound(Meredith-15, Mr.-14)
nsubj(told-16, Meredith-15)
root(ROOT-0, told-16)
det(Times-19, the-17)
compound(Times-19, Roanoke-18)
dobj(told-16, Times-19)
cc(Times-19, and-20)
dobj(told-16, World-News-21)
conj:and(Times-19, World-News-21)
punct(told-16, ,-22)
mark(stick-28, because-23)
punct(stick-28, ``-24)
nsubj(stick-28, I-25)
aux(stick-28, do-26)
neg(stick-28, n't-27)
advcl(told-16, stick-28)
case(the-30, to-29)
nmod:to(stick-28, the-30)
amod(Reagan-36, white-liberal-31)
punct(Reagan-36, ,-32)
amod(Reagan-36, black-bourgeoisie-33)
compound(Reagan-36, line-cussin-34)
punct(Reagan-36, '-35)
root(the-30, Reagan-36)
punct(Reagan-36, ,-37)
amod(action-39, affirmative-38)
root(the-30, action-39)
conj:and(Reagan-36, action-39)
cc(Reagan-36, and-40)
det:predet(that-42, all-41)
root(the-30, that-42)
conj:and(Reagan-36, that-42)
punct(Reagan-36, .-43)
punct(Reagan-36, ''-44)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: stick#i

stick :: To avoid being stuck with an outdated backlog , many are waiting until they run out before reordering ./.
mark(avoid-2, To-1)
advcl(waiting-12, avoid-2)
auxpass(stuck-4, being-3)
xcomp(avoid-2, stuck-4)
case(backlog-8, with-5)
det(backlog-8, an-6)
amod(backlog-8, outdated-7)
nmod:with(stuck-4, backlog-8)
punct(waiting-12, ,-9)
nsubj(waiting-12, many-10)
aux(waiting-12, are-11)
root(ROOT-0, waiting-12)
mark(run-15, until-13)
nsubj(run-15, they-14)
advcl(waiting-12, run-15)
compound:prt(run-15, out-16)
case(reordering-18, before-17)
nmod:before(run-15, reordering-18)
punct(waiting-12, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#being

stick :: Economists are sticking to predictions of slow going for the economy in the first half ./.
nsubj(sticking-3, Economists-1)
aux(sticking-3, are-2)
root(ROOT-0, sticking-3)
case(predictions-5, to-4)
nmod:to(sticking-3, predictions-5)
case(slow-7, of-6)
nmod:of(predictions-5, slow-7)
acl(slow-7, going-8)
case(economy-11, for-9)
det(economy-11, the-10)
nmod:for(going-8, economy-11)
case(half-15, in-12)
det(half-15, the-13)
amod(half-15, first-14)
nmod:in(going-8, half-15)
punct(sticking-3, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#economists

stick :: Wordsworth called him the `` marvellous boy '' and the phrase stuck in literary memory like a Homeric tag line ./.
nsubj(called-2, Wordsworth-1)
root(ROOT-0, called-2)
nsubj(boy-7, him-3)
det(boy-7, the-4)
punct(boy-7, ``-5)
amod(boy-7, marvellous-6)
xcomp(called-2, boy-7)
punct(boy-7, ''-8)
cc(boy-7, and-9)
det(phrase-11, the-10)
nsubj(stuck-12, phrase-11)
xcomp(called-2, stuck-12)
conj:and(boy-7, stuck-12)
case(memory-15, in-13)
amod(memory-15, literary-14)
nmod:in(stuck-12, memory-15)
case(line-20, like-16)
det(line-20, a-17)
amod(line-20, Homeric-18)
compound(line-20, tag-19)
nmod:like(stuck-12, line-20)
punct(called-2, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#phrase

stick :: Big money and big media are the stuff of the Washington that Sen. Williams did n't stick around for ./.
amod(money-2, Big-1)
nsubj(stuff-8, money-2)
cc(money-2, and-3)
amod(media-5, big-4)
conj:and(money-2, media-5)
nsubj(stuff-8, media-5)
cop(stuff-8, are-6)
det(stuff-8, the-7)
root(ROOT-0, stuff-8)
dobj(stick-17, stuff-8)
case(Washington-11, of-9)
det(Washington-11, the-10)
nmod:of(stuff-8, Washington-11)
ref(stuff-8, that-12)
compound(Williams-14, Sen.-13)
nsubj(stick-17, Williams-14)
aux(stick-17, did-15)
neg(stick-17, n't-16)
acl:relcl(stuff-8, stick-17)
compound:prt(stick-17, around-18)
advcl(stick-17, for-19)
punct(stuff-8, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#washington

stick :: But if all sides discover self-interest in moving toward effective control of the toxics problem , instead of sticking grimly to their familiar trenches , the results will be as remarkable as the law itself ./.
cc(remarkable-31, But-1)
mark(discover-5, if-2)
det(sides-4, all-3)
nsubj(discover-5, sides-4)
advcl(remarkable-31, discover-5)
dobj(discover-5, self-interest-6)
mark(moving-8, in-7)
advcl(discover-5, moving-8)
case(control-11, toward-9)
amod(control-11, effective-10)
nmod:toward(moving-8, control-11)
case(problem-15, of-12)
det(problem-15, the-13)
compound(problem-15, toxics-14)
nmod:of(control-11, problem-15)
punct(remarkable-31, ,-16)
mark(sticking-19, instead-17)
mwe(instead-17, of-18)
advcl(remarkable-31, sticking-19)
advmod(sticking-19, grimly-20)
case(trenches-24, to-21)
nmod:poss(trenches-24, their-22)
amod(trenches-24, familiar-23)
nmod:to(sticking-19, trenches-24)
punct(remarkable-31, ,-25)
det(results-27, the-26)
nsubj(remarkable-31, results-27)
aux(remarkable-31, will-28)
cop(remarkable-31, be-29)
advmod(remarkable-31, as-30)
root(ROOT-0, remarkable-31)
case(law-34, as-32)
det(law-34, the-33)
nmod:as(remarkable-31, law-34)
nmod:npmod(law-34, itself-35)
punct(remarkable-31, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#trenches

stick :: Unfortunately , they wo n't work in the harbor tunnel where business travelers sometimes get stuck on the way in from the airport . . . ./.
advmod(work-6, Unfortunately-1)
punct(work-6, ,-2)
nsubj(work-6, they-3)
aux(work-6, wo-4)
neg(work-6, n't-5)
root(ROOT-0, work-6)
case(tunnel-10, in-7)
det(tunnel-10, the-8)
compound(tunnel-10, harbor-9)
nmod:in(work-6, tunnel-10)
advmod(stuck-16, where-11)
compound(travelers-13, business-12)
nsubjpass(stuck-16, travelers-13)
advmod(stuck-16, sometimes-14)
auxpass(stuck-16, get-15)
acl:relcl(tunnel-10, stuck-16)
case(way-19, on-17)
det(way-19, the-18)
nmod:on(stuck-16, way-19)
case(airport-23, in-20)
case(airport-23, from-21)
det(airport-23, the-22)
nmod:from(way-19, airport-23)
punct(work-6, ...-24)
punct(work-6, /-25)
punct(work-6, .-26)
Return str :: stick#travelers

stick :: `` Not having him -- or her -- that 's where we 're stuck , '' he said ./.
punct(said-18, ``-1)
neg(having-3, Not-2)
ccomp(said-18, having-3)
dobj(having-3, him-4)
punct(her-7, ---5)
cc(her-7, or-6)
dep(having-3, her-7)
punct(her-7, ---8)
nsubj('s-10, that-9)
ccomp(having-3, 's-10)
advmod(stuck-14, where-11)
nsubjpass(stuck-14, we-12)
auxpass(stuck-14, 're-13)
advcl('s-10, stuck-14)
punct(said-18, ,-15)
punct(said-18, ''-16)
nsubj(said-18, he-17)
root(ROOT-0, said-18)
punct(said-18, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#we

stick :: For his part , Mr. Jacobs , the Minneapolis investor who last summer is said to have held about 1.5 million shares , did n't stick around to find out ./.
case(part-3, For-1)
nmod:poss(part-3, his-2)
nmod:for(stick-26, part-3)
punct(stick-26, ,-4)
compound(Jacobs-6, Mr.-5)
nsubj(stick-26, Jacobs-6)
nsubj:xsubj(find-29, Jacobs-6)
punct(Jacobs-6, ,-7)
det(investor-10, the-8)
compound(investor-10, Minneapolis-9)
appos(Jacobs-6, investor-10)
dobj(said-15, investor-10)
nsubj:xsubj(held-18, investor-10)
ref(investor-10, who-11)
amod(summer-13, last-12)
nmod:tmod(said-15, summer-13)
auxpass(said-15, is-14)
acl:relcl(investor-10, said-15)
mark(held-18, to-16)
aux(held-18, have-17)
xcomp(said-15, held-18)
advmod(million-21, about-19)
compound(million-21, 1.5-20)
nummod(shares-22, million-21)
dobj(held-18, shares-22)
punct(Jacobs-6, ,-23)
aux(stick-26, did-24)
neg(stick-26, n't-25)
root(ROOT-0, stick-26)
compound:prt(stick-26, around-27)
mark(find-29, to-28)
xcomp(stick-26, find-29)
compound:prt(find-29, out-30)
punct(stick-26, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#jacobs

stick :: If that figure sticks , the Air Force might be able to avoid further contract adjustments , sources say ./.
mark(sticks-4, If-1)
det(figure-3, that-2)
nsubj(sticks-4, figure-3)
advcl(able-11, sticks-4)
punct(able-11, ,-5)
det(Force-8, the-6)
compound(Force-8, Air-7)
nsubj(able-11, Force-8)
nsubj:xsubj(avoid-13, Force-8)
aux(able-11, might-9)
cop(able-11, be-10)
ccomp(say-19, able-11)
mark(avoid-13, to-12)
xcomp(able-11, avoid-13)
amod(adjustments-16, further-14)
compound(adjustments-16, contract-15)
dobj(avoid-13, adjustments-16)
punct(say-19, ,-17)
nsubj(say-19, sources-18)
root(ROOT-0, say-19)
punct(say-19, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#figure

stick :: The FDIC chairman stuck by his stance that it is too soon to estimate the likely costs of a First RepublicBank solution ./.
det(chairman-3, The-1)
compound(chairman-3, FDIC-2)
root(ROOT-0, chairman-3)
dobj(is-10, chairman-3)
acl(chairman-3, stuck-4)
case(stance-7, by-5)
nmod:poss(stance-7, his-6)
nmod:by(stuck-4, stance-7)
ref(chairman-3, that-8)
nsubj(is-10, it-9)
acl:relcl(chairman-3, is-10)
advmod(soon-12, too-11)
advmod(is-10, soon-12)
mark(estimate-14, to-13)
dep(soon-12, estimate-14)
det(costs-17, the-15)
amod(costs-17, likely-16)
dobj(estimate-14, costs-17)
case(solution-22, of-18)
det(solution-22, a-19)
amod(solution-22, First-20)
compound(solution-22, RepublicBank-21)
nmod:of(costs-17, solution-22)
punct(chairman-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#stance

stick :: Until now , major manufacturers have stuck to old-fashioned toaster waffles because they could n't come up with a way to prevent microwaved ones from drying out ./.
case(now-2, Until-1)
nmod:until(stuck-7, now-2)
punct(stuck-7, ,-3)
amod(manufacturers-5, major-4)
nsubj(stuck-7, manufacturers-5)
aux(stuck-7, have-6)
root(ROOT-0, stuck-7)
case(waffles-11, to-8)
amod(waffles-11, old-fashioned-9)
compound(waffles-11, toaster-10)
nmod:to(stuck-7, waffles-11)
mark(come-16, because-12)
nsubj(come-16, they-13)
aux(come-16, could-14)
neg(come-16, n't-15)
advcl(stuck-7, come-16)
compound:prt(come-16, up-17)
case(way-20, with-18)
det(way-20, a-19)
nmod:with(come-16, way-20)
mark(prevent-22, to-21)
acl(way-20, prevent-22)
amod(ones-24, microwaved-23)
dobj(prevent-22, ones-24)
mark(drying-26, from-25)
advcl(prevent-22, drying-26)
compound:prt(drying-26, out-27)
punct(stuck-7, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#manufacturers

stick :: Richard Barnett , chairman of the CFC Alliance , says equipment manufacturers wo n't retool their plants until they can know with certainty which CFC substitutes the producers will stick with ./.
compound(Barnett-2, Richard-1)
nsubj(says-10, Barnett-2)
punct(Barnett-2, ,-3)
appos(Barnett-2, chairman-4)
case(Alliance-8, of-5)
det(Alliance-8, the-6)
compound(Alliance-8, CFC-7)
nmod:of(chairman-4, Alliance-8)
punct(Barnett-2, ,-9)
root(ROOT-0, says-10)
compound(manufacturers-12, equipment-11)
nsubj(retool-15, manufacturers-12)
aux(retool-15, wo-13)
neg(retool-15, n't-14)
ccomp(says-10, retool-15)
nmod:poss(plants-17, their-16)
dobj(retool-15, plants-17)
mark(know-21, until-18)
nsubj(know-21, they-19)
aux(know-21, can-20)
advcl(retool-15, know-21)
case(certainty-23, with-22)
nmod:with(know-21, certainty-23)
dobj(substitutes-26, certainty-23)
ref(certainty-23, which-24)
nsubj(substitutes-26, CFC-25)
acl:relcl(certainty-23, substitutes-26)
det(producers-28, the-27)
nsubj(stick-30, producers-28)
aux(stick-30, will-29)
ccomp(substitutes-26, stick-30)
nmod(stick-30, with-31)
punct(says-10, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#producers

stick :: Parents who might like to move away to protect their children , or to where jobs are more plentiful , are virtually stuck ./.
nsubj(like-4, Parents-1)
nsubj:xsubj(move-6, Parents-1)
nsubjpass(stuck-23, Parents-1)
ref(Parents-1, who-2)
aux(like-4, might-3)
acl:relcl(Parents-1, like-4)
mark(move-6, to-5)
xcomp(like-4, move-6)
advmod(move-6, away-7)
mark(protect-9, to-8)
xcomp(move-6, protect-9)
nmod:poss(children-11, their-10)
dobj(protect-9, children-11)
punct(Parents-1, ,-12)
cc(Parents-1, or-13)
mark(plentiful-19, to-14)
advmod(plentiful-19, where-15)
nsubj(plentiful-19, jobs-16)
cop(plentiful-19, are-17)
advmod(plentiful-19, more-18)
conj:or(Parents-1, plentiful-19)
nsubj(like-4, plentiful-19)
nsubj:xsubj(move-6, plentiful-19)
nsubjpass(stuck-23, plentiful-19)
punct(Parents-1, ,-20)
auxpass(stuck-23, are-21)
advmod(stuck-23, virtually-22)
root(ROOT-0, stuck-23)
punct(stuck-23, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#parents

stick :: Beazer PLC said it was `` prepared immediately to negotiate a merger agreement '' with Koppers Co. for $ 60 a share , while stressing that it was formally sticking to its $ 56-a-share tender offer ./.
compound(PLC-2, Beazer-1)
nsubj(said-3, PLC-2)
root(ROOT-0, said-3)
nsubj(prepared-7, it-4)
nsubj:xsubj(negotiate-10, it-4)
cop(prepared-7, was-5)
punct(prepared-7, ``-6)
ccomp(said-3, prepared-7)
advmod(prepared-7, immediately-8)
mark(negotiate-10, to-9)
xcomp(prepared-7, negotiate-10)
det(agreement-13, a-11)
compound(agreement-13, merger-12)
dobj(negotiate-10, agreement-13)
punct(agreement-13, ''-14)
case(Co.-17, with-15)
compound(Co.-17, Koppers-16)
nmod:with(agreement-13, Co.-17)
case(60-20, for-18)
dep(60-20, $-19)
nmod:for(agreement-13, 60-20)
det(share-22, a-21)
nmod:npmod(60-20, share-22)
punct(prepared-7, ,-23)
mark(stressing-25, while-24)
advcl(prepared-7, stressing-25)
mark(sticking-30, that-26)
nsubj(sticking-30, it-27)
aux(sticking-30, was-28)
advmod(sticking-30, formally-29)
ccomp(stressing-25, sticking-30)
case(offer-36, to-31)
nmod:poss(offer-36, its-32)
amod(offer-36, $-33)
dep($-33, 56-a-share-34)
compound(offer-36, tender-35)
nmod:to(sticking-30, offer-36)
punct(said-3, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#it

stick :: Pressure mounted on Pakistan to sign an accord aimed at securing the withdrawal of about 115 , 000 Soviet troops from neighboring Afghanistan , but Islamabad appeared to be sticking to its demand for a new government in Kabul to oversee the pullout ./.
nsubj(mounted-2, Pressure-1)
nsubj:xsubj(sign-6, Pressure-1)
root(ROOT-0, mounted-2)
case(Pakistan-4, on-3)
nmod:on(mounted-2, Pakistan-4)
mark(sign-6, to-5)
xcomp(mounted-2, sign-6)
det(accord-8, an-7)
dobj(sign-6, accord-8)
acl(accord-8, aimed-9)
mark(securing-11, at-10)
advcl(aimed-9, securing-11)
det(withdrawal-13, the-12)
dobj(securing-11, withdrawal-13)
case(115-16, of-14)
advmod(115-16, about-15)
nmod:of(withdrawal-13, 115-16)
punct(115-16, ,-17)
nummod(troops-20, 000-18)
amod(troops-20, Soviet-19)
appos(115-16, troops-20)
case(Afghanistan-23, from-21)
amod(Afghanistan-23, neighboring-22)
nmod:from(troops-20, Afghanistan-23)
punct(mounted-2, ,-24)
cc(mounted-2, but-25)
nsubj(appeared-27, Islamabad-26)
nsubj:xsubj(sticking-30, Islamabad-26)
conj:but(mounted-2, appeared-27)
mark(sticking-30, to-28)
aux(sticking-30, be-29)
xcomp(appeared-27, sticking-30)
case(demand-33, to-31)
nmod:poss(demand-33, its-32)
nmod:to(sticking-30, demand-33)
case(government-37, for-34)
det(government-37, a-35)
amod(government-37, new-36)
nmod:for(demand-33, government-37)
case(Kabul-39, in-38)
nmod:in(government-37, Kabul-39)
mark(oversee-41, to-40)
acl(demand-33, oversee-41)
det(pullout-43, the-42)
dobj(oversee-41, pullout-43)
punct(mounted-2, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#islamabad

stick :: Charles Maikish , the Port Authority 's director of ferry transportation , recalls that , to boost support for the tunnel , one government agency had produced a film showing Hudson River ferries stuck in ice , lost in fog and delayed by river traffic ./.
compound(Maikish-2, Charles-1)
nsubj(recalls-13, Maikish-2)
punct(Maikish-2, ,-3)
det(Authority-6, the-4)
amod(Authority-6, Port-5)
nmod:poss(director-8, Authority-6)
case(Authority-6, 's-7)
appos(Maikish-2, director-8)
case(transportation-11, of-9)
compound(transportation-11, ferry-10)
nmod:of(director-8, transportation-11)
punct(Maikish-2, ,-12)
root(ROOT-0, recalls-13)
mark(produced-27, that-14)
punct(produced-27, ,-15)
mark(boost-17, to-16)
advcl(produced-27, boost-17)
dobj(boost-17, support-18)
case(tunnel-21, for-19)
det(tunnel-21, the-20)
nmod:for(support-18, tunnel-21)
punct(produced-27, ,-22)
nummod(agency-25, one-23)
compound(agency-25, government-24)
nsubj(produced-27, agency-25)
aux(produced-27, had-26)
ccomp(recalls-13, produced-27)
det(film-29, a-28)
nsubj(stuck-34, film-29)
acl(film-29, showing-30)
compound(ferries-33, Hudson-31)
compound(ferries-33, River-32)
dobj(showing-30, ferries-33)
ccomp(produced-27, stuck-34)
case(ice-36, in-35)
nmod:in(stuck-34, ice-36)
punct(stuck-34, ,-37)
dep(stuck-34, lost-38)
case(fog-40, in-39)
nmod:in(lost-38, fog-40)
cc(lost-38, and-41)
dep(stuck-34, delayed-42)
conj:and(lost-38, delayed-42)
case(traffic-45, by-43)
compound(traffic-45, river-44)
nmod:by(delayed-42, traffic-45)
punct(recalls-13, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#film

stick :: `` He gave me the job and stuck with me , even though I really was n't very good at first ./.
root(ROOT-0, ``-1)
nsubj(gave-3, He-2)
nsubj(stuck-8, He-2)
root(``-1, gave-3)
iobj(gave-3, me-4)
det(job-6, the-5)
dobj(gave-3, job-6)
cc(gave-3, and-7)
root(``-1, stuck-8)
conj:and(gave-3, stuck-8)
case(me-10, with-9)
nmod:with(stuck-8, me-10)
punct(stuck-8, ,-11)
advmod(good-19, even-12)
mark(good-19, though-13)
nsubj(good-19, I-14)
advmod(good-19, really-15)
cop(good-19, was-16)
neg(good-19, n't-17)
advmod(good-19, very-18)
advcl(stuck-8, good-19)
case(first-21, at-20)
advcl(good-19, first-21)
punct(gave-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#he

stick :: Ms. Davis had recommended SafeCard at various points during a spectacular runup from a split-adjusted 1 5 8 in 1984 , but she stuck with it too long in 1987 ./.
compound(Davis-2, Ms.-1)
nsubj(recommended-4, Davis-2)
aux(recommended-4, had-3)
root(ROOT-0, recommended-4)
dobj(recommended-4, SafeCard-5)
case(points-8, at-6)
amod(points-8, various-7)
nmod:at(recommended-4, points-8)
case(runup-12, during-9)
det(runup-12, a-10)
amod(runup-12, spectacular-11)
nmod:during(recommended-4, runup-12)
case(8-18, from-13)
det(8-18, a-14)
amod(8-18, split-adjusted-15)
compound(5-17, 1-16)
nummod(8-18, 5-17)
nmod:from(runup-12, 8-18)
case(1984-20, in-19)
nmod:in(8-18, 1984-20)
punct(recommended-4, ,-21)
cc(recommended-4, but-22)
nsubj(stuck-24, she-23)
conj:but(recommended-4, stuck-24)
case(it-26, with-25)
nmod:with(stuck-24, it-26)
advmod(long-28, too-27)
advmod(stuck-24, long-28)
case(1987-30, in-29)
nmod:in(stuck-24, 1987-30)
punct(recommended-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#she

stick :: People close to Black & Decker , which had raised its bid two weeks ago from its initial $ 56-a-share offer , said the company will probably stick to its latest offer ./.
nsubj(said-23, People-1)
case(Black-4, close-2)
mwe(close-2, to-3)
nmod:close_to(People-1, Black-4)
nsubj(raised-10, Black-4)
cc(Black-4, &-5)
nmod:close_to(People-1, Decker-6)
conj:&(Black-4, Decker-6)
nsubj(raised-10, Decker-6)
punct(Black-4, ,-7)
ref(Black-4, which-8)
aux(raised-10, had-9)
acl:relcl(Black-4, raised-10)
nmod:poss(bid-12, its-11)
dobj(raised-10, bid-12)
nummod(weeks-14, two-13)
nmod:npmod(ago-15, weeks-14)
advmod(raised-10, ago-15)
case(offer-21, from-16)
nmod:poss(offer-21, its-17)
amod(offer-21, initial-18)
amod(offer-21, $-19)
dep($-19, 56-a-share-20)
nmod:from(raised-10, offer-21)
punct(said-23, ,-22)
root(ROOT-0, said-23)
det(company-25, the-24)
nsubj(stick-28, company-25)
aux(stick-28, will-26)
advmod(stick-28, probably-27)
ccomp(said-23, stick-28)
case(offer-32, to-29)
nmod:poss(offer-32, its-30)
amod(offer-32, latest-31)
nmod:to(stick-28, offer-32)
punct(said-23, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#company

stick :: `` The resale values in the Southwest are generally below what people paid for their homes , so people without the money do n't see the point in continuing and Pulte is stuck trying to sell in a dead market , '' says Barbara K. Allen , a housing analyst with Prudential-Bache Research ./.
punct(says-43, ``-1)
det(values-4, The-2)
compound(values-4, resale-3)
nsubj(paid-13, values-4)
case(Southwest-7, in-5)
det(Southwest-7, the-6)
nmod:in(values-4, Southwest-7)
cop(paid-13, are-8)
advmod(paid-13, generally-9)
mark(paid-13, below-10)
det(people-12, what-11)
nsubj(paid-13, people-12)
ccomp(says-43, paid-13)
case(homes-16, for-14)
nmod:poss(homes-16, their-15)
nmod:for(paid-13, homes-16)
punct(paid-13, ,-17)
case(people-19, so-18)
nmod:so(see-25, people-19)
case(money-22, without-20)
det(money-22, the-21)
nmod:without(people-19, money-22)
aux(see-25, do-23)
neg(see-25, n't-24)
parataxis(paid-13, see-25)
det(point-27, the-26)
nsubjpass(stuck-33, point-27)
case(continuing-29, in-28)
nmod:in(point-27, continuing-29)
cc(continuing-29, and-30)
nmod:in(point-27, Pulte-31)
conj:and(continuing-29, Pulte-31)
auxpass(stuck-33, is-32)
ccomp(see-25, stuck-33)
xcomp(stuck-33, trying-34)
mark(sell-36, to-35)
xcomp(trying-34, sell-36)
case(market-40, in-37)
det(market-40, a-38)
amod(market-40, dead-39)
nmod:in(sell-36, market-40)
punct(says-43, ,-41)
punct(says-43, ''-42)
root(ROOT-0, says-43)
compound(Allen-46, Barbara-44)
compound(Allen-46, K.-45)
nsubj(says-43, Allen-46)
punct(Allen-46, ,-47)
det(analyst-50, a-48)
compound(analyst-50, housing-49)
appos(Allen-46, analyst-50)
case(Research-53, with-51)
compound(Research-53, Prudential-Bache-52)
nmod:with(analyst-50, Research-53)
punct(says-43, .-54)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#point

stick :: But GM is stuck with more than a 200-day supply of Novas , far above the 60-day to 65-day supply considered normal ./.
cc(stuck-4, But-1)
nsubjpass(stuck-4, GM-2)
auxpass(stuck-4, is-3)
root(ROOT-0, stuck-4)
case(supply-10, with-5)
advmod(supply-10, more-6)
mwe(more-6, than-7)
det(supply-10, a-8)
amod(supply-10, 200-day-9)
nmod:with(stuck-4, supply-10)
case(Novas-12, of-11)
nmod:of(supply-10, Novas-12)
punct(supply-10, ,-13)
advmod(60-day-17, far-14)
case(60-day-17, above-15)
det(60-day-17, the-16)
nmod:above(supply-10, 60-day-17)
case(supply-20, to-18)
amod(supply-20, 65-day-19)
nmod:to(60-day-17, supply-20)
acl(supply-20, considered-21)
xcomp(considered-21, normal-22)
punct(stuck-4, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#gm

stick :: `` Too many people found themselves stuck with long dollar positions , '' said a trader in New York ./.
punct(said-14, ``-1)
advmod(many-3, Too-2)
amod(people-4, many-3)
ccomp(said-14, people-4)
acl(people-4, found-5)
nsubj(stuck-7, themselves-6)
ccomp(found-5, stuck-7)
case(positions-11, with-8)
amod(positions-11, long-9)
compound(positions-11, dollar-10)
nmod:with(stuck-7, positions-11)
punct(said-14, ,-12)
punct(said-14, ''-13)
root(ROOT-0, said-14)
det(trader-16, a-15)
nsubj(said-14, trader-16)
case(York-19, in-17)
compound(York-19, New-18)
nmod:in(trader-16, York-19)
punct(said-14, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#themselves

stick :: But until now the cabinet has stuck to what could be called the East German approach to state medicine: Advisers speak of better management , not of free enterprise ./.
cc(stuck-7, But-1)
case(now-3, until-2)
nmod:until(stuck-7, now-3)
det(cabinet-5, the-4)
nsubj(stuck-7, cabinet-5)
aux(stuck-7, has-6)
root(ROOT-0, stuck-7)
mark(called-12, to-8)
nsubjpass(called-12, what-9)
aux(called-12, could-10)
auxpass(called-12, be-11)
advcl(stuck-7, called-12)
det(approach-16, the-13)
amod(German-15, East-14)
amod(approach-16, German-15)
dobj(called-12, approach-16)
case(medicine-19, to-17)
compound(medicine-19, state-18)
nmod:to(approach-16, medicine-19)
punct(approach-16, :-20)
compound(speak-22, Advisers-21)
dep(approach-16, speak-22)
case(management-25, of-23)
compound(management-25, better-24)
nmod:of(speak-22, management-25)
punct(management-25, ,-26)
neg(enterprise-30, not-27)
case(enterprise-30, of-28)
amod(enterprise-30, free-29)
nmod:of(management-25, enterprise-30)
punct(stuck-7, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#cabinet

stick :: If all OPEC members stick to the rules , Saudi Arabia would be willing to permit its production to slide even though the others are producing up to their quotas -- but only for a short period ./.
mark(stick-5, If-1)
det(members-4, all-2)
compound(members-4, OPEC-3)
nsubj(stick-5, members-4)
advcl(willing-14, stick-5)
case(rules-8, to-6)
det(rules-8, the-7)
nmod:to(stick-5, rules-8)
punct(willing-14, ,-9)
compound(Arabia-11, Saudi-10)
nsubj(willing-14, Arabia-11)
nsubj:xsubj(permit-16, Arabia-11)
aux(willing-14, would-12)
cop(willing-14, be-13)
root(ROOT-0, willing-14)
mark(permit-16, to-15)
xcomp(willing-14, permit-16)
nmod:poss(production-18, its-17)
dobj(permit-16, production-18)
nsubj:xsubj(slide-20, production-18)
mark(slide-20, to-19)
xcomp(permit-16, slide-20)
advmod(producing-26, even-21)
mark(producing-26, though-22)
det(others-24, the-23)
nsubj(producing-26, others-24)
aux(producing-26, are-25)
advcl(slide-20, producing-26)
compound:prt(producing-26, up-27)
case(quotas-30, to-28)
nmod:poss(quotas-30, their-29)
nmod:to(producing-26, quotas-30)
punct(willing-14, ---31)
cc(willing-14, but-32)
advmod(period-37, only-33)
case(period-37, for-34)
det(period-37, a-35)
amod(period-37, short-36)
conj:but(willing-14, period-37)
punct(willing-14, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#members

stick :: GM also is sticking with its plan to export some Chevrolets to Japan -- a feat made possible partly by a weak dollar ./.
nsubj(sticking-4, GM-1)
advmod(sticking-4, also-2)
aux(sticking-4, is-3)
root(ROOT-0, sticking-4)
case(plan-7, with-5)
nmod:poss(plan-7, its-6)
nmod:with(sticking-4, plan-7)
mark(export-9, to-8)
acl(plan-7, export-9)
det(Chevrolets-11, some-10)
dobj(export-9, Chevrolets-11)
case(Japan-13, to-12)
nmod:to(export-9, Japan-13)
punct(export-9, ---14)
det(feat-16, a-15)
dobj(export-9, feat-16)
acl(feat-16, made-17)
xcomp(made-17, possible-18)
advmod(dollar-23, partly-19)
case(dollar-23, by-20)
det(dollar-23, a-21)
amod(dollar-23, weak-22)
nmod:by(feat-16, dollar-23)
punct(sticking-4, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#gm

stick :: In a news conference on their first day in office , the executives said they plan `` to stick closely '' to the strategic direction of Mr. Marous 's predecessor , Douglas D. Danforth , who retired ./.
case(conference-4, In-1)
det(conference-4, a-2)
compound(conference-4, news-3)
nmod:in(said-14, conference-4)
case(day-8, on-5)
nmod:poss(day-8, their-6)
amod(day-8, first-7)
nmod:on(conference-4, day-8)
case(office-10, in-9)
nmod:in(day-8, office-10)
punct(said-14, ,-11)
det(executives-13, the-12)
nsubj(said-14, executives-13)
root(ROOT-0, said-14)
nsubj(plan-16, they-15)
nsubj:xsubj(stick-19, they-15)
ccomp(said-14, plan-16)
punct(plan-16, ``-17)
mark(stick-19, to-18)
xcomp(plan-16, stick-19)
advmod(stick-19, closely-20)
punct(stick-19, ''-21)
case(direction-25, to-22)
det(direction-25, the-23)
amod(direction-25, strategic-24)
nmod:to(stick-19, direction-25)
case(predecessor-30, of-26)
compound(Marous-28, Mr.-27)
nmod:poss(predecessor-30, Marous-28)
case(Marous-28, 's-29)
nmod:of(direction-25, predecessor-30)
nsubj(retired-37, predecessor-30)
punct(predecessor-30, ,-31)
compound(Danforth-34, Douglas-32)
compound(Danforth-34, D.-33)
appos(predecessor-30, Danforth-34)
punct(predecessor-30, ,-35)
ref(predecessor-30, who-36)
acl:relcl(predecessor-30, retired-37)
punct(said-14, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#they

stick :: But what sticks in the mind of most corporate finance officials at the end of a hair-raising final quarter is n't the complex financing structures ./.
cc(structures-25, But-1)
nsubj(sticks-3, what-2)
csubj(structures-25, sticks-3)
case(mind-6, in-4)
det(mind-6, the-5)
nmod:in(sticks-3, mind-6)
case(officials-11, of-7)
amod(officials-11, most-8)
amod(officials-11, corporate-9)
compound(officials-11, finance-10)
nmod:of(mind-6, officials-11)
case(end-14, at-12)
det(end-14, the-13)
nmod:at(sticks-3, end-14)
case(quarter-19, of-15)
det(quarter-19, a-16)
amod(quarter-19, hair-raising-17)
amod(quarter-19, final-18)
nmod:of(end-14, quarter-19)
cop(structures-25, is-20)
neg(structures-25, n't-21)
det(structures-25, the-22)
compound(structures-25, complex-23)
compound(structures-25, financing-24)
root(ROOT-0, structures-25)
punct(structures-25, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#what

stick :: Change will come slowly , because Japanese society still has a strong tendency to hammer down any nail that sticks up ./.
nsubj(come-3, Change-1)
aux(come-3, will-2)
root(ROOT-0, come-3)
advmod(come-3, slowly-4)
punct(come-3, ,-5)
mark(has-10, because-6)
amod(society-8, Japanese-7)
nsubj(has-10, society-8)
advmod(has-10, still-9)
advcl(come-3, has-10)
det(tendency-13, a-11)
amod(tendency-13, strong-12)
dobj(has-10, tendency-13)
mark(hammer-15, to-14)
acl(tendency-13, hammer-15)
compound:prt(hammer-15, down-16)
det(nail-18, any-17)
dobj(hammer-15, nail-18)
nsubj(sticks-20, nail-18)
ref(nail-18, that-19)
acl:relcl(nail-18, sticks-20)
compound:prt(sticks-20, up-21)
punct(come-3, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#nail

stick :: And it 's far from certain that the latest increases on business fares will stick -- already , the airlines have postponed the move for seven days , and some smaller carriers such as Midway Airlines say they wo n't match the increases ./.
cc(certain-6, And-1)
nsubj(certain-6, it-2)
cop(certain-6, 's-3)
case(certain-6, far-4)
mwe(far-4, from-5)
ccomp(postponed-22, certain-6)
mark(stick-15, that-7)
det(increases-10, the-8)
amod(increases-10, latest-9)
nsubj(stick-15, increases-10)
case(fares-13, on-11)
compound(fares-13, business-12)
nmod:on(increases-10, fares-13)
aux(stick-15, will-14)
ccomp(certain-6, stick-15)
punct(stick-15, ---16)
advmod(stick-15, already-17)
punct(postponed-22, ,-18)
det(airlines-20, the-19)
nsubj(postponed-22, airlines-20)
aux(postponed-22, have-21)
root(ROOT-0, postponed-22)
det(move-24, the-23)
dobj(postponed-22, move-24)
case(days-27, for-25)
nummod(days-27, seven-26)
nmod:for(postponed-22, days-27)
punct(postponed-22, ,-28)
cc(postponed-22, and-29)
det(carriers-32, some-30)
amod(carriers-32, smaller-31)
nsubj(say-37, carriers-32)
case(Airlines-36, such-33)
mwe(such-33, as-34)
compound(Airlines-36, Midway-35)
nmod:such_as(carriers-32, Airlines-36)
conj:and(postponed-22, say-37)
nsubj(match-41, they-38)
aux(match-41, wo-39)
neg(match-41, n't-40)
ccomp(say-37, match-41)
det(increases-43, the-42)
dobj(match-41, increases-43)
punct(postponed-22, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#increases

stick :: Nevertheless , the debacle caused by the RJR buy-out proposal and other megadeals `` may well be the circumstance that galvanizes investors to make covenants stick , '' Mr. Welling says ./.
advmod(circumstance-19, Nevertheless-1)
punct(circumstance-19, ,-2)
det(debacle-4, the-3)
nsubj(circumstance-19, debacle-4)
acl(debacle-4, caused-5)
case(proposal-10, by-6)
det(proposal-10, the-7)
compound(proposal-10, RJR-8)
compound(proposal-10, buy-out-9)
nmod:by(caused-5, proposal-10)
cc(proposal-10, and-11)
amod(megadeals-13, other-12)
nmod:by(caused-5, megadeals-13)
conj:and(proposal-10, megadeals-13)
punct(circumstance-19, ``-14)
aux(circumstance-19, may-15)
advmod(circumstance-19, well-16)
cop(circumstance-19, be-17)
det(circumstance-19, the-18)
nsubj(galvanizes-21, circumstance-19)
ccomp(says-31, circumstance-19)
ref(circumstance-19, that-20)
acl:relcl(circumstance-19, galvanizes-21)
dobj(galvanizes-21, investors-22)
nsubj:xsubj(make-24, investors-22)
mark(make-24, to-23)
xcomp(galvanizes-21, make-24)
nsubj(stick-26, covenants-25)
ccomp(make-24, stick-26)
punct(says-31, ,-27)
punct(says-31, ''-28)
compound(Welling-30, Mr.-29)
nsubj(says-31, Welling-30)
root(ROOT-0, says-31)
punct(says-31, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#covenants

stick :: Mr. Weicker , breakfasting with his third wife , Claudia , at a local diner on Coca-Cola , rice pudding , scrambled eggs and hash browns , says the race is close because Mr. Lieberman has been `` slinging the {expletive deleted} in TV commercials for four months , and some of it started to stick . ''/''
compound(Weicker-2, Mr.-1)
nsubj(scrambled-22, Weicker-2)
nsubj(hash-25, Weicker-2)
nsubj(says-28, Weicker-2)
punct(scrambled-22, ,-3)
csubj(scrambled-22, breakfasting-4)
case(wife-8, with-5)
nmod:poss(wife-8, his-6)
amod(wife-8, third-7)
nmod:with(breakfasting-4, wife-8)
punct(wife-8, ,-9)
appos(wife-8, Claudia-10)
punct(wife-8, ,-11)
case(diner-15, at-12)
det(diner-15, a-13)
amod(diner-15, local-14)
nmod:at(breakfasting-4, diner-15)
case(Coca-Cola-17, on-16)
nmod:on(diner-15, Coca-Cola-17)
punct(Coca-Cola-17, ,-18)
compound(pudding-20, rice-19)
appos(Coca-Cola-17, pudding-20)
punct(Coca-Cola-17, ,-21)
root(ROOT-0, scrambled-22)
dobj(scrambled-22, eggs-23)
cc(scrambled-22, and-24)
conj:and(scrambled-22, hash-25)
dobj(hash-25, browns-26)
punct(scrambled-22, ,-27)
conj:and(scrambled-22, says-28)
det(race-30, the-29)
nsubj(close-32, race-30)
cop(close-32, is-31)
ccomp(says-28, close-32)
mark(slinging-39, because-33)
compound(Lieberman-35, Mr.-34)
nsubj(slinging-39, Lieberman-35)
aux(slinging-39, has-36)
aux(slinging-39, been-37)
punct(slinging-39, ``-38)
advcl(close-32, slinging-39)
det(expletive-42, the-40)
punct(expletive-42, -LCB--41)
dobj(slinging-39, expletive-42)
acl(expletive-42, deleted-43)
punct(deleted-43, -RCB--44)
case(commercials-47, in-45)
compound(commercials-47, TV-46)
nmod:in(deleted-43, commercials-47)
case(months-50, for-48)
nummod(months-50, four-49)
nmod:for(deleted-43, months-50)
punct(close-32, ,-51)
cc(close-32, and-52)
nsubj(started-56, some-53)
nsubj:xsubj(stick-58, some-53)
case(it-55, of-54)
nmod:of(some-53, it-55)
ccomp(says-28, started-56)
conj:and(close-32, started-56)
mark(stick-58, to-57)
xcomp(started-56, stick-58)
punct(scrambled-22, .-59)
punct(scrambled-22, ''-60)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: stick#some

stick :: Some burn out nearly overnight , leaving someone stuck with lots of unmovable inventory ./.
nsubj(burn-2, Some-1)
root(ROOT-0, burn-2)
compound:prt(burn-2, out-3)
advmod(overnight-5, nearly-4)
advmod(burn-2, overnight-5)
punct(burn-2, ,-6)
xcomp(burn-2, leaving-7)
nsubj(stuck-9, someone-8)
ccomp(leaving-7, stuck-9)
case(lots-11, with-10)
nmod:with(stuck-9, lots-11)
case(inventory-14, of-12)
amod(inventory-14, unmovable-13)
nmod:of(lots-11, inventory-14)
punct(burn-2, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#someone

stick :: Unlike Charming Shoppes Inc. or U.S. Shoe Corp. 's Casual Corner stores , for example -- which got stuck with stockrooms of casual sportswear just as its popularity was dying -- Limited maintained tight inventory levels , enabling it to control markdowns ./.
case(Inc.-4, Unlike-1)
amod(Inc.-4, Charming-2)
compound(Inc.-4, Shoppes-3)
root(ROOT-0, Inc.-4)
cc(Inc.-4, or-5)
compound(Corp.-8, U.S.-6)
compound(Corp.-8, Shoe-7)
nmod:poss(stores-12, Corp.-8)
case(Corp.-8, 's-9)
amod(stores-12, Casual-10)
compound(stores-12, Corner-11)
conj:or(Inc.-4, stores-12)
punct(Inc.-4, ,-13)
case(example-15, for-14)
root(,-13, example-15)
punct(stuck-19, ---16)
nsubjpass(stuck-19, which-17)
auxpass(stuck-19, got-18)
dep(example-15, stuck-19)
case(stockrooms-21, with-20)
nmod:with(stuck-19, stockrooms-21)
case(sportswear-24, of-22)
amod(sportswear-24, casual-23)
nmod:of(stockrooms-21, sportswear-24)
advmod(dying-30, just-25)
mark(dying-30, as-26)
nmod:poss(popularity-28, its-27)
nsubj(dying-30, popularity-28)
aux(dying-30, was-29)
advcl(stuck-19, dying-30)
punct(stuck-19, ---31)
amod(levels-36, Limited-32)
amod(levels-36, maintained-33)
amod(levels-36, tight-34)
compound(levels-36, inventory-35)
dep(example-15, levels-36)
punct(levels-36, ,-37)
acl(levels-36, enabling-38)
dobj(enabling-38, it-39)
nsubj:xsubj(control-41, it-39)
mark(control-41, to-40)
xcomp(enabling-38, control-41)
dobj(control-41, markdowns-42)
punct(example-15, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#which

stick :: Most of them stuck around for Gibson 's blast , too , but that game was close so they had an excuse ./.
nsubj(stuck-4, Most-1)
case(them-3, of-2)
nmod:of(Most-1, them-3)
root(ROOT-0, stuck-4)
compound:prt(stuck-4, around-5)
case(blast-9, for-6)
nmod:poss(blast-9, Gibson-7)
case(Gibson-7, 's-8)
nmod:for(stuck-4, blast-9)
punct(stuck-4, ,-10)
advmod(stuck-4, too-11)
punct(stuck-4, ,-12)
cc(stuck-4, but-13)
det(game-15, that-14)
nsubj(had-20, game-15)
cop(had-20, was-16)
advmod(had-20, close-17)
mark(had-20, so-18)
nsubj(had-20, they-19)
conj:but(stuck-4, had-20)
det(excuse-22, an-21)
dobj(had-20, excuse-22)
punct(stuck-4, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#most

stick :: Although Warner stuck with the original cover in the hardback edition , the paperback cover conveys a much stronger feeling of a thriller about Soviet espionage ; it shows dog tags emblazoned with a hammer and sickle and includes some blurbs calling it `` chilling , compelling . . ./.
mark(stuck-3, Although-1)
nsubj(stuck-3, Warner-2)
advcl(conveys-16, stuck-3)
case(cover-7, with-4)
det(cover-7, the-5)
amod(cover-7, original-6)
nmod:with(stuck-3, cover-7)
case(edition-11, in-8)
det(edition-11, the-9)
compound(edition-11, hardback-10)
nmod:in(cover-7, edition-11)
punct(conveys-16, ,-12)
det(cover-15, the-13)
compound(cover-15, paperback-14)
nsubj(conveys-16, cover-15)
root(ROOT-0, conveys-16)
det(feeling-20, a-17)
advmod(stronger-19, much-18)
amod(feeling-20, stronger-19)
dobj(conveys-16, feeling-20)
case(thriller-23, of-21)
det(thriller-23, a-22)
nmod:of(feeling-20, thriller-23)
case(espionage-26, about-24)
amod(espionage-26, Soviet-25)
nmod:about(thriller-23, espionage-26)
punct(conveys-16, ;-27)
nsubj(shows-29, it-28)
nsubj(includes-39, it-28)
parataxis(conveys-16, shows-29)
compound(tags-31, dog-30)
dobj(shows-29, tags-31)
acl(tags-31, emblazoned-32)
case(hammer-35, with-33)
det(hammer-35, a-34)
nmod:with(emblazoned-32, hammer-35)
cc(hammer-35, and-36)
nmod:with(emblazoned-32, sickle-37)
conj:and(hammer-35, sickle-37)
cc(shows-29, and-38)
parataxis(conveys-16, includes-39)
conj:and(shows-29, includes-39)
det(blurbs-41, some-40)
dobj(includes-39, blurbs-41)
acl(blurbs-41, calling-42)
nsubj(chilling-45, it-43)
punct(chilling-45, ``-44)
dep(calling-42, chilling-45)
punct(chilling-45, ,-46)
dep(chilling-45, compelling-47)
punct(chilling-45, ...-48)
punct(chilling-45, /-49)
punct(conveys-16, .-50)
Return str :: stick#warner

stick :: He did n't stick around to explain why , but the Soviet vaulters later complained of tricky winds , and Bubka blamed them for his passing on the 20-foot barrier ./.
nsubj(stick-4, He-1)
nsubj:xsubj(explain-7, He-1)
aux(stick-4, did-2)
neg(stick-4, n't-3)
root(ROOT-0, stick-4)
compound:prt(stick-4, around-5)
mark(explain-7, to-6)
xcomp(stick-4, explain-7)
dep(explain-7, why-8)
punct(complained-15, ,-9)
cc(complained-15, but-10)
det(vaulters-13, the-11)
amod(vaulters-13, Soviet-12)
nsubj(complained-15, vaulters-13)
advmod(complained-15, later-14)
root(why-8, complained-15)
case(winds-18, of-16)
amod(winds-18, tricky-17)
nmod:of(complained-15, winds-18)
punct(complained-15, ,-19)
cc(complained-15, and-20)
nsubj(blamed-22, Bubka-21)
root(why-8, blamed-22)
conj:but(complained-15, blamed-22)
dobj(blamed-22, them-23)
case(passing-26, for-24)
nmod:poss(passing-26, his-25)
nmod:for(blamed-22, passing-26)
case(barrier-30, on-27)
det(barrier-30, the-28)
amod(barrier-30, 20-foot-29)
nmod:on(passing-26, barrier-30)
punct(complained-15, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#he

stick :: Thankfully , none of it stuck ./.
advmod(stuck-6, Thankfully-1)
punct(stuck-6, ,-2)
nsubj(stuck-6, none-3)
case(it-5, of-4)
nmod:of(none-3, it-5)
root(ROOT-0, stuck-6)
punct(stuck-6, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#none

stick :: A rigorously contrarian approach in switching sectors can boost portfolio performance somewhat , his work shows , but only if the investor has the stomach to stick with it for very long periods ./.
det(approach-4, A-1)
advmod(contrarian-3, rigorously-2)
amod(approach-4, contrarian-3)
nsubj(boost-9, approach-4)
case(sectors-7, in-5)
compound(sectors-7, switching-6)
nmod:in(approach-4, sectors-7)
aux(boost-9, can-8)
root(ROOT-0, boost-9)
compound(performance-11, portfolio-10)
dobj(boost-9, performance-11)
advmod(boost-9, somewhat-12)
punct(boost-9, ,-13)
nmod:poss(shows-16, his-14)
compound(shows-16, work-15)
root(,-13, shows-16)
punct(shows-16, ,-17)
cc(shows-16, but-18)
advmod(has-23, only-19)
mark(has-23, if-20)
det(investor-22, the-21)
nsubj(has-23, investor-22)
root(,-13, has-23)
conj:but(shows-16, has-23)
det(stomach-25, the-24)
dobj(has-23, stomach-25)
mark(stick-27, to-26)
acl(stomach-25, stick-27)
case(it-29, with-28)
nmod:with(stick-27, it-29)
case(periods-33, for-30)
advmod(long-32, very-31)
amod(periods-33, long-32)
nmod:for(stick-27, periods-33)
punct(shows-16, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#it

stick :: The company thinks many smokers will be drawn enough by the decreased tar and decreased offense to non-smokers that they will stick with Premier and learn to like it ./.
det(company-2, The-1)
nsubj(thinks-3, company-2)
root(ROOT-0, thinks-3)
amod(smokers-5, many-4)
nsubjpass(drawn-8, smokers-5)
aux(drawn-8, will-6)
auxpass(drawn-8, be-7)
ccomp(thinks-3, drawn-8)
advmod(drawn-8, enough-9)
case(tar-13, by-10)
det(tar-13, the-11)
amod(tar-13, decreased-12)
nmod:agent(drawn-8, tar-13)
cc(drawn-8, and-14)
amod(offense-16, decreased-15)
ccomp(thinks-3, offense-16)
conj:and(drawn-8, offense-16)
dobj(stick-22, offense-16)
case(non-smokers-18, to-17)
nmod:to(offense-16, non-smokers-18)
ref(offense-16, that-19)
nsubj(stick-22, they-20)
nsubj(learn-26, they-20)
nsubj:xsubj(like-28, they-20)
aux(stick-22, will-21)
acl:relcl(offense-16, stick-22)
case(Premier-24, with-23)
nmod:with(stick-22, Premier-24)
cc(stick-22, and-25)
acl:relcl(offense-16, learn-26)
conj:and(stick-22, learn-26)
mark(like-28, to-27)
xcomp(learn-26, like-28)
dobj(like-28, it-29)
punct(thinks-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#offense

stick :: If the `` draft-dodger '' label had stuck , Sen. Quayle might well have taken Mr. Bush down with him ./.
mark(stuck-8, If-1)
det(label-6, the-2)
punct(label-6, ``-3)
compound(label-6, draft-dodger-4)
punct(label-6, ''-5)
nsubj(stuck-8, label-6)
aux(stuck-8, had-7)
advcl(taken-15, stuck-8)
punct(taken-15, ,-9)
compound(Quayle-11, Sen.-10)
nsubj(taken-15, Quayle-11)
aux(taken-15, might-12)
advmod(taken-15, well-13)
aux(taken-15, have-14)
root(ROOT-0, taken-15)
compound(Bush-17, Mr.-16)
dobj(taken-15, Bush-17)
advmod(taken-15, down-18)
case(him-20, with-19)
nmod:with(down-18, him-20)
punct(taken-15, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#label

stick :: Nevertheless , scientists are sticking to plans to trap and kill wild colonies in the BRZ and flood the area with European males ./.
advmod(sticking-5, Nevertheless-1)
punct(sticking-5, ,-2)
nsubj(sticking-5, scientists-3)
aux(sticking-5, are-4)
root(ROOT-0, sticking-5)
case(plans-7, to-6)
nmod:to(sticking-5, plans-7)
mark(trap-9, to-8)
acl(plans-7, trap-9)
cc(trap-9, and-10)
acl(plans-7, kill-11)
conj:and(trap-9, kill-11)
amod(colonies-13, wild-12)
dobj(trap-9, colonies-13)
case(BRZ-16, in-14)
det(BRZ-16, the-15)
nmod:in(trap-9, BRZ-16)
cc(BRZ-16, and-17)
nmod:in(trap-9, flood-18)
conj:and(BRZ-16, flood-18)
det(area-20, the-19)
dep(BRZ-16, area-20)
case(males-23, with-21)
amod(males-23, European-22)
nmod:with(area-20, males-23)
punct(sticking-5, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#scientists

stick :: Peace in the Persian Gulf , if it sticks , may elevate Iraq as the new petroleum powerhouse , keeping a lid on oil prices in the short term and possibly reshaping political alliances in the Arab bloc over the long term ./.
nsubj(elevate-12, Peace-1)
case(Gulf-5, in-2)
det(Gulf-5, the-3)
compound(Gulf-5, Persian-4)
nmod:in(Peace-1, Gulf-5)
punct(elevate-12, ,-6)
mark(sticks-9, if-7)
nsubj(sticks-9, it-8)
advcl(elevate-12, sticks-9)
punct(elevate-12, ,-10)
aux(elevate-12, may-11)
root(ROOT-0, elevate-12)
dobj(elevate-12, Iraq-13)
case(powerhouse-18, as-14)
det(powerhouse-18, the-15)
amod(powerhouse-18, new-16)
compound(powerhouse-18, petroleum-17)
nmod:as(elevate-12, powerhouse-18)
punct(elevate-12, ,-19)
ccomp(elevate-12, keeping-20)
det(lid-22, a-21)
dobj(keeping-20, lid-22)
case(prices-25, on-23)
compound(prices-25, oil-24)
nmod:on(lid-22, prices-25)
case(term-29, in-26)
det(term-29, the-27)
amod(term-29, short-28)
nmod:in(keeping-20, term-29)
cc(keeping-20, and-30)
advmod(reshaping-32, possibly-31)
ccomp(elevate-12, reshaping-32)
conj:and(keeping-20, reshaping-32)
amod(alliances-34, political-33)
dobj(reshaping-32, alliances-34)
case(bloc-38, in-35)
det(bloc-38, the-36)
compound(bloc-38, Arab-37)
nmod:in(alliances-34, bloc-38)
case(term-42, over-39)
det(term-42, the-40)
amod(term-42, long-41)
nmod:over(reshaping-32, term-42)
punct(elevate-12, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#it

stick :: German companies are sticking with what they have ./.
amod(companies-2, German-1)
nsubj(sticking-4, companies-2)
aux(sticking-4, are-3)
root(ROOT-0, sticking-4)
mark(have-8, with-5)
dobj(have-8, what-6)
nsubj(have-8, they-7)
advcl(sticking-4, have-8)
punct(sticking-4, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#companies

stick :: Next time he should produce his own movie , as he has here , so that if it becomes a blockbuster he is n't stuck with his director 's salary of a paltry million or two ./.
amod(time-2, Next-1)
nmod:tmod(produce-5, time-2)
nsubj(produce-5, he-3)
aux(produce-5, should-4)
root(ROOT-0, produce-5)
nmod:poss(movie-8, his-6)
amod(movie-8, own-7)
dobj(produce-5, movie-8)
punct(produce-5, ,-9)
mark(has-12, as-10)
nsubj(has-12, he-11)
advcl(produce-5, has-12)
advmod(has-12, here-13)
punct(produce-5, ,-14)
mark(becomes-19, so-15)
mwe(so-15, that-16)
mark(becomes-19, if-17)
nsubj(becomes-19, it-18)
advcl(produce-5, becomes-19)
det(blockbuster-21, a-20)
xcomp(becomes-19, blockbuster-21)
nsubjpass(stuck-25, he-22)
auxpass(stuck-25, is-23)
neg(stuck-25, n't-24)
acl:relcl(blockbuster-21, stuck-25)
case(salary-30, with-26)
nmod:poss(director-28, his-27)
nmod:poss(salary-30, director-28)
case(director-28, 's-29)
nmod:with(stuck-25, salary-30)
case(million-34, of-31)
det(million-34, a-32)
amod(million-34, paltry-33)
nmod:of(salary-30, million-34)
cc(million-34, or-35)
nmod:of(salary-30, two-36)
conj:or(million-34, two-36)
punct(produce-5, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#he

stick :: His absence stuck out , as Raymond Chandler wrote in a different context , like `` a tarantula on a slice of angel food . ''/''
nmod:poss(absence-2, His-1)
nsubj(stuck-3, absence-2)
root(ROOT-0, stuck-3)
compound:prt(stuck-3, out-4)
punct(stuck-3, ,-5)
mark(wrote-9, as-6)
compound(Chandler-8, Raymond-7)
nsubj(wrote-9, Chandler-8)
advcl(stuck-3, wrote-9)
case(context-13, in-10)
det(context-13, a-11)
amod(context-13, different-12)
nmod:in(wrote-9, context-13)
punct(wrote-9, ,-14)
case(tarantula-18, like-15)
punct(tarantula-18, ``-16)
det(tarantula-18, a-17)
nmod:like(wrote-9, tarantula-18)
case(slice-21, on-19)
det(slice-21, a-20)
nmod:on(tarantula-18, slice-21)
case(food-24, of-22)
compound(food-24, angel-23)
nmod:of(slice-21, food-24)
punct(stuck-3, .-25)
punct(stuck-3, ''-26)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: stick#absence

stick :: Intel and Motorola have sought to undo the reputation they got for haughtiness here during chip shortages in 1984 , when Japanese customers were often stuck at the end of their delivery lists ./.
nsubj(sought-5, Intel-1)
nsubj:xsubj(undo-7, Intel-1)
cc(Intel-1, and-2)
conj:and(Intel-1, Motorola-3)
nsubj(sought-5, Motorola-3)
nsubj:xsubj(undo-7, Motorola-3)
aux(sought-5, have-4)
root(ROOT-0, sought-5)
mark(undo-7, to-6)
xcomp(sought-5, undo-7)
det(reputation-9, the-8)
dobj(undo-7, reputation-9)
nsubj(got-11, they-10)
acl:relcl(reputation-9, got-11)
case(haughtiness-13, for-12)
nmod:for(got-11, haughtiness-13)
advmod(haughtiness-13, here-14)
case(shortages-17, during-15)
compound(shortages-17, chip-16)
nmod:during(got-11, shortages-17)
case(1984-19, in-18)
nmod:in(got-11, 1984-19)
punct(1984-19, ,-20)
advmod(stuck-26, when-21)
amod(customers-23, Japanese-22)
nsubjpass(stuck-26, customers-23)
auxpass(stuck-26, were-24)
advmod(stuck-26, often-25)
acl:relcl(1984-19, stuck-26)
case(end-29, at-27)
det(end-29, the-28)
nmod:at(stuck-26, end-29)
case(lists-33, of-30)
nmod:poss(lists-33, their-31)
compound(lists-33, delivery-32)
nmod:of(end-29, lists-33)
punct(sought-5, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#customers

stick :: `` Now , we 're sticking with horse-related attractions , '' Mr. Seigenfeld says , noting that Belmont put on a combination rodeo-horse show this month that attracted new customers of all ages ./.
punct(says-14, ``-1)
advmod(sticking-6, Now-2)
punct(sticking-6, ,-3)
nsubj(sticking-6, we-4)
aux(sticking-6, 're-5)
ccomp(says-14, sticking-6)
case(attractions-9, with-7)
amod(attractions-9, horse-related-8)
nmod:with(sticking-6, attractions-9)
punct(says-14, ,-10)
punct(says-14, ''-11)
compound(Seigenfeld-13, Mr.-12)
nsubj(says-14, Seigenfeld-13)
root(ROOT-0, says-14)
punct(says-14, ,-15)
xcomp(says-14, noting-16)
mark(put-19, that-17)
nsubj(put-19, Belmont-18)
ccomp(noting-16, put-19)
compound:prt(put-19, on-20)
det(show-24, a-21)
compound(show-24, combination-22)
amod(show-24, rodeo-horse-23)
dobj(put-19, show-24)
det(month-26, this-25)
nmod:tmod(put-19, month-26)
nsubj(attracted-28, that-27)
dep(put-19, attracted-28)
amod(customers-30, new-29)
dobj(attracted-28, customers-30)
case(ages-33, of-31)
det(ages-33, all-32)
nmod:of(customers-30, ages-33)
punct(says-14, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#we

stick :: Now that Koppers looks ready to give in , with the employee-benefits perhaps a main factor , some of the politicians who stuck their necks out undoubtedly are peeved ./.
advmod(looks-4, Now-1)
mark(looks-4, that-2)
nsubj(looks-4, Koppers-3)
root(ROOT-0, looks-4)
xcomp(looks-4, ready-5)
mark(give-7, to-6)
xcomp(ready-5, give-7)
compound:prt(give-7, in-8)
punct(looks-4, ,-9)
case(employee-benefits-12, with-10)
det(employee-benefits-12, the-11)
nmod:with(peeved-29, employee-benefits-12)
advmod(factor-16, perhaps-13)
det(factor-16, a-14)
amod(factor-16, main-15)
nsubjpass(peeved-29, factor-16)
punct(factor-16, ,-17)
appos(factor-16, some-18)
case(politicians-21, of-19)
det(politicians-21, the-20)
nmod:of(some-18, politicians-21)
nsubj(stuck-23, politicians-21)
ref(politicians-21, who-22)
acl:relcl(politicians-21, stuck-23)
nmod:poss(necks-25, their-24)
dobj(stuck-23, necks-25)
compound:prt(stuck-23, out-26)
advmod(stuck-23, undoubtedly-27)
auxpass(peeved-29, are-28)
parataxis(looks-4, peeved-29)
punct(looks-4, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#necks

stick :: While many collegiate groups stick to rah-rah alumni songs and occasionally stretch to a Broadway show tune , Wayne State 's repertoire ranges from Stravinsky 's `` Oedipus Rex '' to resonant arrangements of American Negro spirituals ./.
mark(stick-5, While-1)
amod(groups-4, many-2)
amod(groups-4, collegiate-3)
nsubj(stick-5, groups-4)
advcl(ranges-23, stick-5)
case(songs-9, to-6)
amod(songs-9, rah-rah-7)
compound(songs-9, alumni-8)
nmod:to(stick-5, songs-9)
cc(songs-9, and-10)
advmod(stretch-12, occasionally-11)
nmod:to(stick-5, stretch-12)
conj:and(songs-9, stretch-12)
case(tune-17, to-13)
det(tune-17, a-14)
compound(tune-17, Broadway-15)
compound(tune-17, show-16)
nmod:to(stretch-12, tune-17)
punct(ranges-23, ,-18)
compound(State-20, Wayne-19)
nmod:poss(repertoire-22, State-20)
case(State-20, 's-21)
nsubj(ranges-23, repertoire-22)
root(ROOT-0, ranges-23)
case(Rex-29, from-24)
nmod:poss(Rex-29, Stravinsky-25)
case(Stravinsky-25, 's-26)
punct(Rex-29, ``-27)
compound(Rex-29, Oedipus-28)
nmod:from(ranges-23, Rex-29)
punct(Rex-29, ''-30)
case(arrangements-33, to-31)
amod(arrangements-33, resonant-32)
nmod:to(Rex-29, arrangements-33)
case(spirituals-37, of-34)
amod(spirituals-37, American-35)
compound(spirituals-37, Negro-36)
nmod:of(arrangements-33, spirituals-37)
punct(ranges-23, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#groups

stick :: The trick is to focus narrowly on the bonds among guys who have been through hell together and will stick together unto death , without bothering with their attitudes toward the cause for which they are fighting ./.
det(trick-2, The-1)
nsubj(is-3, trick-2)
nsubj:xsubj(focus-5, trick-2)
root(ROOT-0, is-3)
mark(focus-5, to-4)
xcomp(is-3, focus-5)
advmod(focus-5, narrowly-6)
case(bonds-9, on-7)
det(bonds-9, the-8)
nmod:on(focus-5, bonds-9)
case(guys-11, among-10)
nmod:among(bonds-9, guys-11)
nsubj(hell-16, guys-11)
nsubj(stick-20, guys-11)
ref(guys-11, who-12)
aux(hell-16, have-13)
cop(hell-16, been-14)
case(hell-16, through-15)
acl:relcl(guys-11, hell-16)
advmod(hell-16, together-17)
cc(hell-16, and-18)
aux(stick-20, will-19)
acl:relcl(guys-11, stick-20)
conj:and(hell-16, stick-20)
advmod(stick-20, together-21)
amod(death-23, unto-22)
dobj(stick-20, death-23)
punct(focus-5, ,-24)
mark(bothering-26, without-25)
advcl(focus-5, bothering-26)
case(attitudes-29, with-27)
nmod:poss(attitudes-29, their-28)
nmod:with(bothering-26, attitudes-29)
case(cause-32, toward-30)
det(cause-32, the-31)
nmod:toward(bothering-26, cause-32)
nmod:for(fighting-37, cause-32)
case(which-34, for-33)
ref(cause-32, which-34)
nsubj(fighting-37, they-35)
aux(fighting-37, are-36)
acl:relcl(cause-32, fighting-37)
punct(is-3, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#death

stick :: Astrophysicist Fang Lizhi , China 's most outspoken dissident , made a provocative appearance at Beijing University , calling for less Communist Party control and rejecting demands that he stick to science and not delve into social issues ./.
compound(Lizhi-3, Astrophysicist-1)
compound(Lizhi-3, Fang-2)
nsubj(made-11, Lizhi-3)
punct(Lizhi-3, ,-4)
nmod:poss(dissident-9, China-5)
case(China-5, 's-6)
amod(dissident-9, most-7)
amod(dissident-9, outspoken-8)
appos(Lizhi-3, dissident-9)
punct(Lizhi-3, ,-10)
root(ROOT-0, made-11)
det(appearance-14, a-12)
amod(appearance-14, provocative-13)
dobj(made-11, appearance-14)
case(University-17, at-15)
compound(University-17, Beijing-16)
nmod:at(made-11, University-17)
punct(made-11, ,-18)
advcl(made-11, calling-19)
case(control-24, for-20)
amod(control-24, less-21)
amod(control-24, Communist-22)
compound(control-24, Party-23)
nmod:for(calling-19, control-24)
cc(control-24, and-25)
nmod:for(calling-19, rejecting-26)
conj:and(control-24, rejecting-26)
dobj(rejecting-26, demands-27)
dobj(stick-30, demands-27)
ref(demands-27, that-28)
nsubj(stick-30, he-29)
nsubj(delve-35, he-29)
acl:relcl(demands-27, stick-30)
case(science-32, to-31)
nmod:to(stick-30, science-32)
cc(stick-30, and-33)
neg(delve-35, not-34)
acl:relcl(demands-27, delve-35)
conj:and(stick-30, delve-35)
case(issues-38, into-36)
amod(issues-38, social-37)
nmod:into(delve-35, issues-38)
punct(made-11, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#demands

stick :: In the market , he sticks with winning positions no longer than three or four days and tries to bail out of losers in minutes -- hours at most ./.
case(market-3, In-1)
det(market-3, the-2)
nmod:in(sticks-6, market-3)
punct(sticks-6, ,-4)
nsubj(sticks-6, he-5)
root(ROOT-0, sticks-6)
mark(winning-8, with-7)
advcl(sticks-6, winning-8)
dobj(winning-8, positions-9)
neg(longer-11, no-10)
advmod(winning-8, longer-11)
case(days-16, than-12)
nummod(days-16, three-13)
cc(three-13, or-14)
conj:or(three-13, four-15)
nummod(days-16, four-15)
nmod:than(longer-11, days-16)
cc(winning-8, and-17)
advcl(sticks-6, tries-18)
conj:and(winning-8, tries-18)
mark(bail-20, to-19)
xcomp(tries-18, bail-20)
case(losers-23, out-21)
mwe(out-21, of-22)
nmod:out_of(bail-20, losers-23)
case(minutes-25, in-24)
nmod:in(bail-20, minutes-25)
punct(bail-20, ---26)
dobj(bail-20, hours-27)
case(most-29, at-28)
nmod:at(hours-27, most-29)
punct(sticks-6, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#he

stick :: `` Most of the time , all they do is stick needles in you and take blood . ''/''
punct(needles-12, ``-1)
dep(needles-12, Most-2)
case(time-5, of-3)
det(time-5, the-4)
nmod:of(Most-2, time-5)
punct(needles-12, ,-6)
nsubj(needles-12, all-7)
nsubj(take-16, all-7)
nsubj(do-9, they-8)
acl:relcl(all-7, do-9)
cop(needles-12, is-10)
compound(needles-12, stick-11)
root(ROOT-0, needles-12)
case(you-14, in-13)
nmod:in(needles-12, you-14)
cc(needles-12, and-15)
conj:and(needles-12, take-16)
dobj(take-16, blood-17)
punct(needles-12, .-18)
punct(needles-12, ''-19)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

stick :: You 're stuck with it ./.
nsubjpass(stuck-3, You-1)
auxpass(stuck-3, 're-2)
root(ROOT-0, stuck-3)
case(it-5, with-4)
nmod:with(stuck-3, it-5)
punct(stuck-3, .-6)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#you

stick :: Mr. Hauke says he discovered that in Philadelphia when he smelled glue in a car and later found fresh glue and fibers sticking to his pants ./.
compound(Hauke-2, Mr.-1)
nsubj(says-3, Hauke-2)
root(ROOT-0, says-3)
nsubj(discovered-5, he-4)
ccomp(says-3, discovered-5)
dobj(discovered-5, that-6)
case(Philadelphia-8, in-7)
nmod:in(that-6, Philadelphia-8)
advmod(smelled-11, when-9)
nsubj(smelled-11, he-10)
nsubj(found-18, he-10)
acl:relcl(Philadelphia-8, smelled-11)
dobj(smelled-11, glue-12)
case(car-15, in-13)
det(car-15, a-14)
nmod:in(smelled-11, car-15)
cc(smelled-11, and-16)
advmod(found-18, later-17)
acl:relcl(Philadelphia-8, found-18)
conj:and(smelled-11, found-18)
amod(glue-20, fresh-19)
dobj(found-18, glue-20)
cc(glue-20, and-21)
dobj(found-18, fibers-22)
conj:and(glue-20, fibers-22)
acl(glue-20, sticking-23)
case(pants-26, to-24)
nmod:poss(pants-26, his-25)
nmod:to(sticking-23, pants-26)
punct(says-3, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#pants

stick :: Such probes , which are pieces of DNA that stick to the DNA in a sample , have provided crucial evidence in more than a dozen murder and rape cases during the past year and are increasingly used in paternity testing ./.
amod(probes-2, Such-1)
nsubj(pieces-6, probes-2)
nsubj(provided-19, probes-2)
nsubjpass(used-38, probes-2)
punct(probes-2, ,-3)
ref(probes-2, which-4)
cop(pieces-6, are-5)
acl:relcl(probes-2, pieces-6)
nsubj(stick-10, pieces-6)
case(DNA-8, of-7)
nmod:of(pieces-6, DNA-8)
ref(pieces-6, that-9)
acl:relcl(pieces-6, stick-10)
case(DNA-13, to-11)
det(DNA-13, the-12)
nmod:to(stick-10, DNA-13)
case(sample-16, in-14)
det(sample-16, a-15)
nmod:in(stick-10, sample-16)
punct(probes-2, ,-17)
aux(provided-19, have-18)
root(ROOT-0, provided-19)
amod(evidence-21, crucial-20)
dobj(provided-19, evidence-21)
case(murder-27, in-22)
advmod(dozen-26, more-23)
mwe(more-23, than-24)
advmod(dozen-26, a-25)
nummod(murder-27, dozen-26)
nmod:in(provided-19, murder-27)
cc(murder-27, and-28)
compound(cases-30, rape-29)
nmod:in(provided-19, cases-30)
conj:and(murder-27, cases-30)
case(year-34, during-31)
det(year-34, the-32)
amod(year-34, past-33)
nmod:during(provided-19, year-34)
cc(provided-19, and-35)
auxpass(used-38, are-36)
advmod(used-38, increasingly-37)
conj:and(provided-19, used-38)
case(testing-41, in-39)
compound(testing-41, paternity-40)
nmod:in(used-38, testing-41)
punct(provided-19, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#pieces

stick :: Taking a long loaf of fresh bread , Henri Caudron sticks in a menacing-looking plastic sword , squeezes a trigger and voila ! blanquette de veau , dubbed a `` real meal in a sandwich '' for 18 francs -LRB- $ 3.15 -RRB- ./.
advcl(sticks-11, Taking-1)
det(loaf-4, a-2)
amod(loaf-4, long-3)
dobj(Taking-1, loaf-4)
case(bread-7, of-5)
amod(bread-7, fresh-6)
nmod:of(loaf-4, bread-7)
punct(sticks-11, ,-8)
compound(Caudron-10, Henri-9)
nsubj(sticks-11, Caudron-10)
root(ROOT-0, sticks-11)
case(sword-16, in-12)
det(sword-16, a-13)
amod(sword-16, menacing-looking-14)
compound(sword-16, plastic-15)
nmod:in(sticks-11, sword-16)
punct(sticks-11, ,-17)
dep(sticks-11, squeezes-18)
det(trigger-20, a-19)
dobj(squeezes-18, trigger-20)
cc(trigger-20, and-21)
dobj(squeezes-18, voila-22)
conj:and(trigger-20, voila-22)
punct(sticks-11, !-23)
compound(veau-3, blanquette-1)
compound(veau-3, de-2)
root(ROOT-0, veau-3)
punct(veau-3, ,-4)
acl(veau-3, dubbed-5)
det(meal-9, a-6)
punct(meal-9, ``-7)
amod(meal-9, real-8)
dobj(dubbed-5, meal-9)
case(sandwich-12, in-10)
det(sandwich-12, a-11)
nmod:in(meal-9, sandwich-12)
punct(meal-9, ''-13)
case(francs-16, for-14)
nummod(francs-16, 18-15)
nmod:for(meal-9, francs-16)
punct(3.15-19, -LRB--17)
dep(3.15-19, $-18)
appos(francs-16, 3.15-19)
punct(3.15-19, -RRB--20)
punct(veau-3, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#caudron

stick :: He sees many cars every day , and the Reatta clearly sticks out on first sight ./.
nsubj(sees-2, He-1)
root(ROOT-0, sees-2)
amod(cars-4, many-3)
dobj(sees-2, cars-4)
det(day-6, every-5)
nmod:tmod(sees-2, day-6)
punct(sees-2, ,-7)
cc(sees-2, and-8)
det(Reatta-10, the-9)
nsubj(sticks-12, Reatta-10)
advmod(sticks-12, clearly-11)
conj:and(sees-2, sticks-12)
compound:prt(sticks-12, out-13)
case(sight-16, on-14)
amod(sight-16, first-15)
nmod:on(sticks-12, sight-16)
punct(sees-2, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#reatta

stick :: Ford , Chrysler and GM are responding with strategies of their own , and all essentially incorporate the same truth: A lot of headaches can be prevented by planning ahead , sticking to decisions and working as a team ./.
nsubj(responding-7, Ford-1)
nsubj(incorporate-17, Ford-1)
punct(Ford-1, ,-2)
conj:and(Ford-1, Chrysler-3)
nsubj(responding-7, Chrysler-3)
cc(Ford-1, and-4)
conj:and(Ford-1, GM-5)
nsubj(responding-7, GM-5)
aux(responding-7, are-6)
root(ROOT-0, responding-7)
case(strategies-9, with-8)
nmod:with(responding-7, strategies-9)
case(own-12, of-10)
nmod:poss(own-12, their-11)
nmod:of(strategies-9, own-12)
punct(responding-7, ,-13)
cc(responding-7, and-14)
advmod(incorporate-17, all-15)
advmod(incorporate-17, essentially-16)
conj:and(responding-7, incorporate-17)
det(truth-20, the-18)
amod(truth-20, same-19)
dobj(incorporate-17, truth-20)
punct(responding-7, :-21)
det(lot-23, A-22)
nsubjpass(prevented-28, lot-23)
case(headaches-25, of-24)
nmod:of(lot-23, headaches-25)
aux(prevented-28, can-26)
auxpass(prevented-28, be-27)
parataxis(responding-7, prevented-28)
mark(planning-30, by-29)
advcl(prevented-28, planning-30)
advmod(planning-30, ahead-31)
punct(prevented-28, ,-32)
dep(prevented-28, sticking-33)
case(decisions-35, to-34)
nmod:to(sticking-33, decisions-35)
cc(sticking-33, and-36)
dep(prevented-28, working-37)
conj:and(sticking-33, working-37)
case(team-40, as-38)
det(team-40, a-39)
nmod:as(working-37, team-40)
punct(responding-7, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#decisions

stick :: `` They 've stuck to the real nuts and bolts of their business . ''/''
root(ROOT-0, ``-1)
nsubj(stuck-4, They-2)
aux(stuck-4, 've-3)
root(``-1, stuck-4)
case(nuts-8, to-5)
det(nuts-8, the-6)
amod(nuts-8, real-7)
nmod:to(stuck-4, nuts-8)
cc(nuts-8, and-9)
nmod:to(stuck-4, bolts-10)
conj:and(nuts-8, bolts-10)
case(business-13, of-11)
nmod:poss(business-13, their-12)
nmod:of(nuts-8, business-13)
punct(stuck-4, .-14)
punct(stuck-4, ''-15)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: stick#they

stick :: To use the $ 20 test , dentists stick pieces of paper between the patient 's teeth and gums , then send the paper to BioTechnica for analysis ./.
mark(use-2, To-1)
advcl(stick-9, use-2)
det(test-6, the-3)
amod(test-6, $-4)
compound($-4, 20-5)
dobj(use-2, test-6)
punct(stick-9, ,-7)
nsubj(stick-9, dentists-8)
root(ROOT-0, stick-9)
dobj(stick-9, pieces-10)
case(paper-12, of-11)
nmod:of(pieces-10, paper-12)
case(teeth-17, between-13)
det(patient-15, the-14)
nmod:poss(teeth-17, patient-15)
case(patient-15, 's-16)
nmod:between(stick-9, teeth-17)
cc(teeth-17, and-18)
nmod:between(stick-9, gums-19)
conj:and(teeth-17, gums-19)
punct(stick-9, ,-20)
advmod(send-22, then-21)
dep(stick-9, send-22)
det(paper-24, the-23)
dobj(send-22, paper-24)
case(BioTechnica-26, to-25)
nmod:to(send-22, BioTechnica-26)
case(analysis-28, for-27)
nmod:for(send-22, analysis-28)
punct(stick-9, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#pieces

stick :: As usual , consumers will be stuck with the tab: higher prices and less choice ./.
case(usual-2, As-1)
nmod:as(stuck-7, usual-2)
punct(stuck-7, ,-3)
nsubjpass(stuck-7, consumers-4)
aux(stuck-7, will-5)
auxpass(stuck-7, be-6)
root(ROOT-0, stuck-7)
case(tab-10, with-8)
det(tab-10, the-9)
nmod:with(stuck-7, tab-10)
punct(stuck-7, :-11)
amod(prices-13, higher-12)
dep(stuck-7, prices-13)
cc(prices-13, and-14)
amod(choice-16, less-15)
dep(stuck-7, choice-16)
conj:and(prices-13, choice-16)
punct(stuck-7, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#consumers

stick :: Another ad for a toilet-bowl cleaner is shot from inside the toilet so you can watch a wife urge her husband to stick his head inside the bowl to see how clean she got it ./.
det(ad-2, Another-1)
nsubjpass(shot-8, ad-2)
case(cleaner-6, for-3)
det(cleaner-6, a-4)
amod(cleaner-6, toilet-bowl-5)
nmod:for(ad-2, cleaner-6)
auxpass(shot-8, is-7)
root(ROOT-0, shot-8)
case(toilet-12, from-9)
case(toilet-12, inside-10)
det(toilet-12, the-11)
nmod:inside(shot-8, toilet-12)
mark(watch-16, so-13)
nsubj(watch-16, you-14)
aux(watch-16, can-15)
advcl(shot-8, watch-16)
det(wife-18, a-17)
nsubj(urge-19, wife-18)
ccomp(watch-16, urge-19)
nmod:poss(husband-21, her-20)
dobj(urge-19, husband-21)
nsubj:xsubj(stick-23, husband-21)
mark(stick-23, to-22)
xcomp(urge-19, stick-23)
nmod:poss(head-25, his-24)
dobj(stick-23, head-25)
case(bowl-28, inside-26)
det(bowl-28, the-27)
nmod:inside(stick-23, bowl-28)
mark(see-30, to-29)
advcl(stick-23, see-30)
advmod(clean-32, how-31)
advmod(got-34, clean-32)
nsubj(got-34, she-33)
ccomp(see-30, got-34)
dobj(got-34, it-35)
punct(shot-8, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#head

stick :: He tried again , and his next ball stuck firmly in the net twine for an unlikely -- and maybe unprecedented -- double fault ./.
nsubj(tried-2, He-1)
nsubj(unprecedented-21, He-1)
root(ROOT-0, tried-2)
advmod(tried-2, again-3)
punct(tried-2, ,-4)
cc(tried-2, and-5)
nmod:poss(ball-8, his-6)
amod(ball-8, next-7)
nsubj(stuck-9, ball-8)
conj:and(tried-2, stuck-9)
advmod(stuck-9, firmly-10)
case(twine-14, in-11)
det(twine-14, the-12)
amod(twine-14, net-13)
nmod:in(stuck-9, twine-14)
case(unlikely-17, for-15)
det(unlikely-17, an-16)
nmod:for(stuck-9, unlikely-17)
punct(tried-2, ---18)
cc(tried-2, and-19)
advmod(unprecedented-21, maybe-20)
conj:and(tried-2, unprecedented-21)
punct(unprecedented-21, ---22)
amod(fault-24, double-23)
dep(unprecedented-21, fault-24)
punct(tried-2, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#ball

stick :: When these components , known as antigens , are added to infected blood , they stick to antibodies in the blood , causing an easily detectable reaction ./.
advmod(added-10, When-1)
det(components-3, these-2)
nsubjpass(added-10, components-3)
punct(components-3, ,-4)
acl(components-3, known-5)
case(antigens-7, as-6)
nmod:as(known-5, antigens-7)
punct(components-3, ,-8)
auxpass(added-10, are-9)
advcl(stick-16, added-10)
case(blood-13, to-11)
amod(blood-13, infected-12)
nmod:to(added-10, blood-13)
punct(stick-16, ,-14)
nsubj(stick-16, they-15)
root(ROOT-0, stick-16)
case(antibodies-18, to-17)
nmod:to(stick-16, antibodies-18)
case(blood-21, in-19)
det(blood-21, the-20)
nmod:in(stick-16, blood-21)
punct(stick-16, ,-22)
xcomp(stick-16, causing-23)
det(reaction-27, an-24)
advmod(detectable-26, easily-25)
amod(reaction-27, detectable-26)
dobj(causing-23, reaction-27)
punct(stick-16, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#they

stick :: Or marvelously grisly -LRB- like Trotsky careening around with his assassin 's pickax stuck in his head ; or the male hustler brutally bludgeoning Latin heartthrob Ramon Novarro -RRB- ./.
cc(grisly-3, Or-1)
advmod(grisly-3, marvelously-2)
root(ROOT-0, grisly-3)
punct(Trotsky-6, -LRB--4)
case(Trotsky-6, like-5)
dep(grisly-3, Trotsky-6)
acl(Trotsky-6, careening-7)
compound:prt(careening-7, around-8)
case(pickax-13, with-9)
nmod:poss(assassin-11, his-10)
nmod:poss(pickax-13, assassin-11)
case(assassin-11, 's-12)
nmod:with(careening-7, pickax-13)
acl(Trotsky-6, stuck-14)
case(head-17, in-15)
nmod:poss(head-17, his-16)
nmod:in(stuck-14, head-17)
punct(Trotsky-6, ;-18)
cc(Trotsky-6, or-19)
det(hustler-22, the-20)
amod(hustler-22, male-21)
dep(grisly-3, hustler-22)
conj:or(Trotsky-6, hustler-22)
advmod(bludgeoning-24, brutally-23)
acl(hustler-22, bludgeoning-24)
amod(Novarro-28, Latin-25)
compound(Novarro-28, heartthrob-26)
compound(Novarro-28, Ramon-27)
dobj(bludgeoning-24, Novarro-28)
punct(Trotsky-6, -RRB--29)
punct(grisly-3, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#head

stick :: What 's more , the trucks he is pushing have a checkered history: Early versions broke down , got stuck in the mud and languished in fields waiting to be fixed ./.
nsubj(more-3, What-1)
cop(more-3, 's-2)
advcl(have-10, more-3)
punct(have-10, ,-4)
det(trucks-6, the-5)
nsubj(have-10, trucks-6)
nsubj(pushing-9, he-7)
aux(pushing-9, is-8)
acl:relcl(trucks-6, pushing-9)
root(ROOT-0, have-10)
det(history-13, a-11)
amod(history-13, checkered-12)
dobj(have-10, history-13)
punct(history-13, :-14)
amod(versions-16, Early-15)
nsubj(broke-17, versions-16)
nsubjpass(stuck-21, versions-16)
nsubj(languished-26, versions-16)
dep(history-13, broke-17)
advmod(broke-17, down-18)
punct(broke-17, ,-19)
auxpass(stuck-21, got-20)
dep(history-13, stuck-21)
conj:and(broke-17, stuck-21)
case(mud-24, in-22)
det(mud-24, the-23)
nmod:in(stuck-21, mud-24)
cc(broke-17, and-25)
dep(history-13, languished-26)
conj:and(broke-17, languished-26)
case(fields-28, in-27)
nmod:in(languished-26, fields-28)
acl(fields-28, waiting-29)
mark(fixed-32, to-30)
auxpass(fixed-32, be-31)
xcomp(waiting-29, fixed-32)
punct(have-10, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stick#versions

strike :: Lightning has n't struck twice: The best of his last three films was the documentary `` Chuck Berry: Hail !/.
nsubj(struck-4, Lightning-1)
aux(struck-4, has-2)
neg(struck-4, n't-3)
root(ROOT-0, struck-4)
advmod(struck-4, twice-5)
punct(struck-4, :-6)
det(best-8, The-7)
nsubj(Berry-19, best-8)
case(films-13, of-9)
nmod:poss(films-13, his-10)
amod(films-13, last-11)
nummod(films-13, three-12)
nmod:of(best-8, films-13)
cop(Berry-19, was-14)
det(Berry-19, the-15)
compound(Berry-19, documentary-16)
punct(Berry-19, ``-17)
compound(Berry-19, Chuck-18)
parataxis(struck-4, Berry-19)
punct(Berry-19, :-20)
dep(Berry-19, Hail-21)
punct(struck-4, !-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#lightning

strike :: Born and raised in India and educated at Harvard , the young documentary maker visited Bombay and was struck by the numbers of children living in the street ./.
advcl(visited-15, Born-1)
cc(Born-1, and-2)
conj:and(Born-1, raised-3)
advcl(visited-15, raised-3)
case(India-5, in-4)
nmod:in(Born-1, India-5)
cc(Born-1, and-6)
conj:and(Born-1, educated-7)
advcl(visited-15, educated-7)
case(Harvard-9, at-8)
nmod:at(educated-7, Harvard-9)
punct(visited-15, ,-10)
det(maker-14, the-11)
amod(maker-14, young-12)
compound(maker-14, documentary-13)
nsubj(visited-15, maker-14)
nsubjpass(struck-19, maker-14)
root(ROOT-0, visited-15)
dobj(visited-15, Bombay-16)
cc(visited-15, and-17)
auxpass(struck-19, was-18)
conj:and(visited-15, struck-19)
case(numbers-22, by-20)
det(numbers-22, the-21)
nmod:agent(struck-19, numbers-22)
case(children-24, of-23)
nmod:of(numbers-22, children-24)
acl(children-24, living-25)
case(street-28, in-26)
det(street-28, the-27)
nmod:in(living-25, street-28)
punct(visited-15, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#maker

strike :: Triple mileage has struck another blow to the coupon market ./.
amod(mileage-2, Triple-1)
nsubj(struck-4, mileage-2)
aux(struck-4, has-3)
root(ROOT-0, struck-4)
det(blow-6, another-5)
dobj(struck-4, blow-6)
case(market-10, to-7)
det(market-10, the-8)
compound(market-10, coupon-9)
nmod:to(struck-4, market-10)
punct(struck-4, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#blow

strike :: Even if Najibullah ca n't hang onto power , he may now be able to strike a better arrangement for a coalition government with a more compromising Pakistan ./.
advmod(hang-6, Even-1)
mark(hang-6, if-2)
nsubj(hang-6, Najibullah-3)
aux(hang-6, ca-4)
neg(hang-6, n't-5)
advcl(able-14, hang-6)
case(power-8, onto-7)
nmod:onto(hang-6, power-8)
punct(able-14, ,-9)
nsubj(able-14, he-10)
nsubj:xsubj(strike-16, he-10)
aux(able-14, may-11)
advmod(able-14, now-12)
cop(able-14, be-13)
root(ROOT-0, able-14)
mark(strike-16, to-15)
xcomp(able-14, strike-16)
det(arrangement-19, a-17)
amod(arrangement-19, better-18)
dobj(strike-16, arrangement-19)
case(government-23, for-20)
det(government-23, a-21)
compound(government-23, coalition-22)
nmod:for(arrangement-19, government-23)
case(Pakistan-28, with-24)
det(Pakistan-28, a-25)
advmod(compromising-27, more-26)
amod(Pakistan-28, compromising-27)
nmod:with(strike-16, Pakistan-28)
punct(able-14, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#arrangement

strike :: Donald Kessler , a project scientist at NASA 's Johnson Space Center , told an international conference on space pollution that a particle could strike and damage a spacecraft ./.
compound(Kessler-2, Donald-1)
nsubj(told-14, Kessler-2)
punct(Kessler-2, ,-3)
det(scientist-6, a-4)
compound(scientist-6, project-5)
appos(Kessler-2, scientist-6)
case(Center-12, at-7)
nmod:poss(Center-12, NASA-8)
case(NASA-8, 's-9)
compound(Center-12, Johnson-10)
compound(Center-12, Space-11)
nmod:at(scientist-6, Center-12)
punct(Kessler-2, ,-13)
root(ROOT-0, told-14)
det(conference-17, an-15)
amod(conference-17, international-16)
dobj(told-14, conference-17)
case(pollution-20, on-18)
compound(pollution-20, space-19)
nmod:on(conference-17, pollution-20)
mark(strike-25, that-21)
det(particle-23, a-22)
nsubj(strike-25, particle-23)
nsubj(damage-27, particle-23)
aux(strike-25, could-24)
ccomp(told-14, strike-25)
cc(strike-25, and-26)
ccomp(told-14, damage-27)
conj:and(strike-25, damage-27)
det(spacecraft-29, a-28)
dobj(damage-27, spacecraft-29)
punct(told-14, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#particle

strike :: The whole , rotting campaign-law edifice -- excepting the required disclosure of contributors -- should be struck down before it further damages the political process ./.
det(whole-2, The-1)
nsubjpass(struck-17, whole-2)
punct(whole-2, ,-3)
amod(edifice-6, rotting-4)
compound(edifice-6, campaign-law-5)
appos(whole-2, edifice-6)
punct(whole-2, ---7)
acl(whole-2, excepting-8)
det(disclosure-11, the-9)
amod(disclosure-11, required-10)
dobj(excepting-8, disclosure-11)
case(contributors-13, of-12)
nmod:of(disclosure-11, contributors-13)
punct(whole-2, ---14)
aux(struck-17, should-15)
auxpass(struck-17, be-16)
root(ROOT-0, struck-17)
compound:prt(struck-17, down-18)
mark(damages-22, before-19)
nsubj(damages-22, it-20)
advmod(damages-22, further-21)
advcl(struck-17, damages-22)
det(process-25, the-23)
amod(process-25, political-24)
dobj(damages-22, process-25)
punct(struck-17, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#whole

strike :: The telephone companies generally have been restrained from striking out against such services because of First Amendment concerns and because , as public utilities and monopolies , telephone companies have a duty to offer services without discrimination ./.
det(companies-3, The-1)
compound(companies-3, telephone-2)
nsubjpass(restrained-7, companies-3)
advmod(restrained-7, generally-4)
aux(restrained-7, have-5)
auxpass(restrained-7, been-6)
root(ROOT-0, restrained-7)
mark(striking-9, from-8)
advcl(restrained-7, striking-9)
compound:prt(striking-9, out-10)
case(services-13, against-11)
amod(services-13, such-12)
nmod:against(striking-9, services-13)
case(concerns-18, because-14)
mwe(because-14, of-15)
compound(concerns-18, First-16)
compound(concerns-18, Amendment-17)
nmod:because_of(restrained-7, concerns-18)
cc(restrained-7, and-19)
advmod(have-30, because-20)
punct(have-30, ,-21)
case(utilities-24, as-22)
amod(utilities-24, public-23)
nmod:as(have-30, utilities-24)
cc(utilities-24, and-25)
conj:and(utilities-24, monopolies-26)
nmod:as(have-30, monopolies-26)
punct(have-30, ,-27)
compound(companies-29, telephone-28)
nsubj(have-30, companies-29)
conj:and(restrained-7, have-30)
det(duty-32, a-31)
dobj(have-30, duty-32)
mark(offer-34, to-33)
acl(duty-32, offer-34)
dobj(offer-34, services-35)
case(discrimination-37, without-36)
nmod:without(offer-34, discrimination-37)
punct(restrained-7, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#services

strike :: `` A sequester does n't strike me as something that the administration would want to do right before the election , '' he said ./.
punct(said-24, ``-1)
det(sequester-3, A-2)
nsubj(strike-6, sequester-3)
aux(strike-6, does-4)
neg(strike-6, n't-5)
ccomp(said-24, strike-6)
dobj(strike-6, me-7)
case(something-9, as-8)
nmod:as(strike-6, something-9)
mark(want-14, that-10)
det(administration-12, the-11)
nsubj(want-14, administration-12)
nsubj:xsubj(do-16, administration-12)
aux(want-14, would-13)
ccomp(something-9, want-14)
mark(do-16, to-15)
xcomp(want-14, do-16)
advmod(do-16, right-17)
case(election-20, before-18)
det(election-20, the-19)
nmod:before(do-16, election-20)
punct(said-24, ,-21)
punct(said-24, ''-22)
nsubj(said-24, he-23)
root(ROOT-0, said-24)
punct(said-24, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#me

strike :: When the chairman of Santa Fe Southern Pacific Corp. flew into town a few months ago in the corporate jet , a small group of trainmen here knew they had struck a raw nerve ./.
advmod(flew-10, When-1)
det(chairman-3, the-2)
nsubj(flew-10, chairman-3)
case(Corp.-9, of-4)
compound(Corp.-9, Santa-5)
compound(Corp.-9, Fe-6)
compound(Corp.-9, Southern-7)
compound(Corp.-9, Pacific-8)
nmod:of(chairman-3, Corp.-9)
advcl(knew-28, flew-10)
case(town-12, into-11)
nmod:into(flew-10, town-12)
det(months-15, a-13)
amod(months-15, few-14)
nmod:npmod(ago-16, months-15)
advmod(flew-10, ago-16)
case(jet-20, in-17)
det(jet-20, the-18)
amod(jet-20, corporate-19)
nmod:in(flew-10, jet-20)
punct(knew-28, ,-21)
det(group-24, a-22)
amod(group-24, small-23)
nsubj(knew-28, group-24)
case(trainmen-26, of-25)
nmod:of(group-24, trainmen-26)
advmod(knew-28, here-27)
root(ROOT-0, knew-28)
nsubj(struck-31, they-29)
aux(struck-31, had-30)
ccomp(knew-28, struck-31)
det(nerve-34, a-32)
amod(nerve-34, raw-33)
dobj(struck-31, nerve-34)
punct(knew-28, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#nerve

strike :: The black plague will have struck ./.
det(plague-3, The-1)
amod(plague-3, black-2)
nsubj(struck-6, plague-3)
aux(struck-6, will-4)
aux(struck-6, have-5)
root(ROOT-0, struck-6)
punct(struck-6, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#plague

strike :: Thomas McGreevy , president of the New York fathers ' rights group , adds that men do n't consider being struck as spouse abuse ./.
compound(McGreevy-2, Thomas-1)
nsubj(adds-14, McGreevy-2)
punct(McGreevy-2, ,-3)
appos(McGreevy-2, president-4)
case(group-12, of-5)
det(fathers-9, the-6)
compound(fathers-9, New-7)
compound(fathers-9, York-8)
nmod:poss(group-12, fathers-9)
case(fathers-9, '-10)
compound(group-12, rights-11)
nmod:of(president-4, group-12)
punct(McGreevy-2, ,-13)
root(ROOT-0, adds-14)
mark(consider-19, that-15)
nsubj(consider-19, men-16)
aux(consider-19, do-17)
neg(consider-19, n't-18)
ccomp(adds-14, consider-19)
auxpass(struck-21, being-20)
xcomp(consider-19, struck-21)
case(abuse-24, as-22)
compound(abuse-24, spouse-23)
nmod:as(struck-21, abuse-24)
punct(adds-14, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#being

strike :: Some securities analysts speculated that Pepperell and an ally , NTC Group Inc . , would strike a deal with Odyssey , enabling the three companies to share the spoils without forcing the buy-out price any higher ./.
det(analysts-3, Some-1)
compound(analysts-3, securities-2)
nsubj(speculated-4, analysts-3)
root(ROOT-0, speculated-4)
dobj(speculated-4, that-5)
root(that-5, Pepperell-6)
cc(Pepperell-6, and-7)
det(ally-9, an-8)
root(that-5, ally-9)
conj:and(Pepperell-6, ally-9)
punct(Pepperell-6, ,-10)
compound(Inc-13, NTC-11)
compound(Inc-13, Group-12)
root(that-5, Inc-13)
conj:and(Pepperell-6, Inc-13)
punct(Pepperell-6, .-14)
punct(strike-3, ,-1)
aux(strike-3, would-2)
root(ROOT-0, strike-3)
det(deal-5, a-4)
dobj(strike-3, deal-5)
case(Odyssey-7, with-6)
nmod:with(strike-3, Odyssey-7)
punct(strike-3, ,-8)
advcl(strike-3, enabling-9)
det(companies-12, the-10)
nummod(companies-12, three-11)
dobj(enabling-9, companies-12)
nsubj:xsubj(share-14, companies-12)
mark(share-14, to-13)
xcomp(enabling-9, share-14)
det(spoils-16, the-15)
dobj(share-14, spoils-16)
mark(forcing-18, without-17)
advcl(share-14, forcing-18)
det(price-21, the-19)
compound(price-21, buy-out-20)
dobj(forcing-18, price-21)
dep(higher-23, any-22)
advmod(forcing-18, higher-23)
punct(strike-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#deal

strike :: But as we survey a world that is about to commemorate Good Friday , Passover and Easter , we are struck by religion 's large presence in the political affairs of secular life ./.
cc(struck-21, But-1)
mark(survey-4, as-2)
nsubj(survey-4, we-3)
advcl(struck-21, survey-4)
det(world-6, a-5)
dobj(survey-4, world-6)
nsubj(about-9, world-6)
nsubj:xsubj(commemorate-11, world-6)
ref(world-6, that-7)
aux(about-9, is-8)
acl:relcl(world-6, about-9)
mark(commemorate-11, to-10)
xcomp(about-9, commemorate-11)
amod(Friday-13, Good-12)
nmod:tmod(commemorate-11, Friday-13)
punct(Friday-13, ,-14)
nmod:tmod(commemorate-11, Passover-15)
conj:and(Friday-13, Passover-15)
cc(Friday-13, and-16)
nmod:tmod(commemorate-11, Easter-17)
conj:and(Friday-13, Easter-17)
punct(struck-21, ,-18)
nsubjpass(struck-21, we-19)
auxpass(struck-21, are-20)
root(ROOT-0, struck-21)
case(presence-26, by-22)
nmod:poss(presence-26, religion-23)
case(religion-23, 's-24)
amod(presence-26, large-25)
nmod:agent(struck-21, presence-26)
case(affairs-30, in-27)
det(affairs-30, the-28)
amod(affairs-30, political-29)
nmod:in(presence-26, affairs-30)
case(life-33, of-31)
amod(life-33, secular-32)
nmod:of(affairs-30, life-33)
punct(struck-21, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#we

strike :: But while Lucky and Campeau have n't struck a deal for Ralph 's , Wall Street investment bankers say Macy may have: The New York retailer is said to have pre-sold Ralph 's to an unidentified leveraged buyout concern for more than $ 1 billion ./.
cc(said-29, But-1)
mark(struck-8, while-2)
nsubj(struck-8, Lucky-3)
cc(Lucky-3, and-4)
conj:and(Lucky-3, Campeau-5)
nsubj(struck-8, Campeau-5)
aux(struck-8, have-6)
neg(struck-8, n't-7)
advcl(said-29, struck-8)
det(deal-10, a-9)
dobj(struck-8, deal-10)
case(Ralph-12, for-11)
nmod:'s(deal-10, Ralph-12)
case(Ralph-12, 's-13)
punct(Ralph-12, ,-14)
compound(bankers-18, Wall-15)
compound(bankers-18, Street-16)
compound(bankers-18, investment-17)
nsubj(say-19, bankers-18)
acl:relcl(Ralph-12, say-19)
nsubj(have-22, Macy-20)
aux(have-22, may-21)
ccomp(say-19, have-22)
punct(said-29, :-23)
det(retailer-27, The-24)
compound(retailer-27, New-25)
compound(retailer-27, York-26)
nsubjpass(said-29, retailer-27)
nsubj:xsubj(have-31, retailer-27)
auxpass(said-29, is-28)
root(ROOT-0, said-29)
mark(have-31, to-30)
xcomp(said-29, have-31)
amod(Ralph-33, pre-sold-32)
dobj(have-31, Ralph-33)
case(Ralph-33, 's-34)
case(concern-40, to-35)
det(concern-40, an-36)
amod(concern-40, unidentified-37)
amod(concern-40, leveraged-38)
compound(concern-40, buyout-39)
nmod:to(Ralph-33, concern-40)
case($-44, for-41)
advmod($-44, more-42)
mwe(more-42, than-43)
nmod:for(concern-40, $-44)
compound(billion-46, 1-45)
nummod($-44, billion-46)
punct(said-29, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#deal

strike :: In addition , the eight-warhead missiles carry guidance systems allowing them to strike Soviet targets precisely ./.
case(addition-2, In-1)
nmod:in(carry-7, addition-2)
punct(carry-7, ,-3)
det(missiles-6, the-4)
amod(missiles-6, eight-warhead-5)
nsubj(carry-7, missiles-6)
root(ROOT-0, carry-7)
compound(systems-9, guidance-8)
dobj(carry-7, systems-9)
acl(systems-9, allowing-10)
dobj(allowing-10, them-11)
nsubj:xsubj(strike-13, them-11)
mark(strike-13, to-12)
xcomp(allowing-10, strike-13)
amod(targets-15, Soviet-14)
dobj(strike-13, targets-15)
advmod(strike-13, precisely-16)
punct(carry-7, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#targets

strike :: Texaco made the scene with a pair of investment bankers who would later send shock waves of another sort through Wall Street: Bruce Wasserstein and Joseph Perella , who recently shook First Boston Corp. by quitting that firm and striking out on their own ./.
nsubj(made-2, Texaco-1)
root(ROOT-0, made-2)
det(scene-4, the-3)
dobj(made-2, scene-4)
case(pair-7, with-5)
det(pair-7, a-6)
nmod:with(made-2, pair-7)
case(bankers-10, of-8)
compound(bankers-10, investment-9)
nmod:of(pair-7, bankers-10)
nsubj(send-14, bankers-10)
ref(bankers-10, who-11)
aux(send-14, would-12)
advmod(send-14, later-13)
acl:relcl(bankers-10, send-14)
compound(waves-16, shock-15)
dobj(send-14, waves-16)
case(sort-19, of-17)
det(sort-19, another-18)
nmod:of(waves-16, sort-19)
case(Street-22, through-20)
compound(Street-22, Wall-21)
nmod:through(send-14, Street-22)
punct(made-2, :-23)
compound(Wasserstein-25, Bruce-24)
dobj(made-2, Wasserstein-25)
nsubj(shook-32, Wasserstein-25)
cc(Wasserstein-25, and-26)
compound(Perella-28, Joseph-27)
dobj(made-2, Perella-28)
conj:and(Wasserstein-25, Perella-28)
nsubj(shook-32, Perella-28)
punct(Wasserstein-25, ,-29)
ref(Wasserstein-25, who-30)
advmod(shook-32, recently-31)
acl:relcl(Wasserstein-25, shook-32)
compound(Corp.-35, First-33)
compound(Corp.-35, Boston-34)
dobj(shook-32, Corp.-35)
mark(quitting-37, by-36)
advcl(shook-32, quitting-37)
dobj(quitting-37, that-38)
dep(that-38, firm-39)
cc(firm-39, and-40)
dep(that-38, striking-41)
conj:and(firm-39, striking-41)
compound:prt(striking-41, out-42)
case(own-45, on-43)
nmod:poss(own-45, their-44)
nmod:on(striking-41, own-45)
punct(made-2, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#own

strike :: It took a year and two trips to the Soviet Union to strike a deal with a literary house ./.
nsubj(took-2, It-1)
root(ROOT-0, took-2)
det(year-4, a-3)
dobj(took-2, year-4)
cc(year-4, and-5)
nummod(trips-7, two-6)
dobj(took-2, trips-7)
conj:and(year-4, trips-7)
case(Union-11, to-8)
det(Union-11, the-9)
compound(Union-11, Soviet-10)
nmod:to(took-2, Union-11)
mark(strike-13, to-12)
advcl(took-2, strike-13)
det(deal-15, a-14)
dobj(strike-13, deal-15)
case(house-19, with-16)
det(house-19, a-17)
amod(house-19, literary-18)
nmod:with(strike-13, house-19)
punct(took-2, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#deal

strike :: The idea of having one child has struck a deeper root and less people are punished for violating the birth control plan . . . ./.
det(idea-2, The-1)
nsubj(struck-8, idea-2)
mark(having-4, of-3)
acl(idea-2, having-4)
nummod(child-6, one-5)
dobj(having-4, child-6)
aux(struck-8, has-7)
root(ROOT-0, struck-8)
det(root-11, a-9)
amod(root-11, deeper-10)
nsubjpass(punished-16, root-11)
cc(root-11, and-12)
amod(people-14, less-13)
conj:and(root-11, people-14)
nsubjpass(punished-16, people-14)
auxpass(punished-16, are-15)
ccomp(struck-8, punished-16)
mark(violating-18, for-17)
advcl(punished-16, violating-18)
det(plan-22, the-19)
compound(plan-22, birth-20)
compound(plan-22, control-21)
dobj(violating-18, plan-22)
punct(struck-8, ...-23)
punct(struck-8, /-24)
punct(struck-8, .-25)
Return str :: strike#idea

strike :: Also , suggestions that the Saudis are intent on rebuilding a once-huge offshore stockpile tended to `` strike some fear in some of the participants in this market , '' said Stephen W. Platt , a Chicagobased analyst for Dean Witter Reynolds Inc ./.
advmod(tended-15, Also-1)
punct(tended-15, ,-2)
nsubj(tended-15, suggestions-3)
nsubj:xsubj(strike-18, suggestions-3)
mark(intent-8, that-4)
det(Saudis-6, the-5)
nsubj(intent-8, Saudis-6)
cop(intent-8, are-7)
ccomp(suggestions-3, intent-8)
mark(rebuilding-10, on-9)
advcl(intent-8, rebuilding-10)
det(stockpile-14, a-11)
amod(stockpile-14, once-huge-12)
amod(stockpile-14, offshore-13)
dobj(rebuilding-10, stockpile-14)
ccomp(said-31, tended-15)
mark(strike-18, to-16)
punct(strike-18, ``-17)
xcomp(tended-15, strike-18)
det(fear-20, some-19)
dobj(strike-18, fear-20)
case(some-22, in-21)
nmod:in(strike-18, some-22)
case(participants-25, of-23)
det(participants-25, the-24)
nmod:of(some-22, participants-25)
case(market-28, in-26)
det(market-28, this-27)
nmod:in(participants-25, market-28)
punct(said-31, ,-29)
punct(said-31, ''-30)
root(ROOT-0, said-31)
compound(Platt-34, Stephen-32)
compound(Platt-34, W.-33)
nsubj(said-31, Platt-34)
punct(Platt-34, ,-35)
det(analyst-38, a-36)
amod(analyst-38, Chicagobased-37)
appos(Platt-34, analyst-38)
case(Inc-43, for-39)
compound(Inc-43, Dean-40)
compound(Inc-43, Witter-41)
compound(Inc-43, Reynolds-42)
nmod:for(analyst-38, Inc-43)
punct(said-31, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#fear

strike :: It strikes me as close to impossible to read Chaucer and not come away liking the poet ./.
nsubj(strikes-2, It-1)
root(ROOT-0, strikes-2)
dobj(strikes-2, me-3)
advmod(strikes-2, as-4)
case(impossible-7, close-5)
mwe(close-5, to-6)
nmod:close_to(as-4, impossible-7)
mark(read-9, to-8)
ccomp(impossible-7, read-9)
dobj(read-9, Chaucer-10)
cc(read-9, and-11)
neg(come-13, not-12)
ccomp(impossible-7, come-13)
conj:and(read-9, come-13)
advmod(come-13, away-14)
xcomp(come-13, liking-15)
det(poet-17, the-16)
dobj(liking-15, poet-17)
punct(strikes-2, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#me

strike :: The move struck some analysts as an interim one because of Mr. Thomas 's age and background ./.
det(move-2, The-1)
nsubj(struck-3, move-2)
root(ROOT-0, struck-3)
det(analysts-5, some-4)
dobj(struck-3, analysts-5)
case(one-9, as-6)
det(one-9, an-7)
amod(one-9, interim-8)
nmod:as(struck-3, one-9)
case(age-15, because-10)
mwe(because-10, of-11)
compound(Thomas-13, Mr.-12)
nmod:poss(age-15, Thomas-13)
case(Thomas-13, 's-14)
nmod:because_of(struck-3, age-15)
cc(age-15, and-16)
nmod:because_of(struck-3, background-17)
conj:and(age-15, background-17)
punct(struck-3, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#analysts

strike :: If she had not been struck , as a woman , by the grotesque exudations streaming from the temporal glands and four-foot , S-shaped penises of certain adult male elephants , would she have been led to identify this `` disease '' as musth , the sexual frenzy of male estrus never before documented in African elephants ?/.
mark(struck-6, If-1)
nsubjpass(struck-6, she-2)
aux(struck-6, had-3)
neg(struck-6, not-4)
auxpass(struck-6, been-5)
advcl(led-36, struck-6)
punct(woman-10, ,-7)
case(woman-10, as-8)
det(woman-10, a-9)
nmod:as(struck-6, woman-10)
punct(woman-10, ,-11)
case(exudations-15, by-12)
det(exudations-15, the-13)
amod(exudations-15, grotesque-14)
nmod:agent(struck-6, exudations-15)
dep(exudations-15, streaming-16)
case(glands-20, from-17)
det(glands-20, the-18)
amod(glands-20, temporal-19)
nmod:from(exudations-15, glands-20)
cc(glands-20, and-21)
amod(penises-25, four-foot-22)
punct(penises-25, ,-23)
amod(penises-25, S-shaped-24)
nmod:from(exudations-15, penises-25)
conj:and(glands-20, penises-25)
case(elephants-30, of-26)
amod(elephants-30, certain-27)
amod(elephants-30, adult-28)
amod(elephants-30, male-29)
nmod:of(penises-25, elephants-30)
punct(led-36, ,-31)
aux(led-36, would-32)
nsubjpass(led-36, she-33)
nsubj:xsubj(identify-38, she-33)
aux(led-36, have-34)
auxpass(led-36, been-35)
root(ROOT-0, led-36)
mark(identify-38, to-37)
xcomp(led-36, identify-38)
det(disease-41, this-39)
punct(disease-41, ``-40)
dobj(identify-38, disease-41)
punct(disease-41, ''-42)
case(musth-44, as-43)
nmod:as(identify-38, musth-44)
punct(musth-44, ,-45)
det(frenzy-48, the-46)
amod(frenzy-48, sexual-47)
appos(musth-44, frenzy-48)
case(estrus-51, of-49)
amod(estrus-51, male-50)
nmod:of(frenzy-48, estrus-51)
neg(documented-54, never-52)
mark(documented-54, before-53)
acl(frenzy-48, documented-54)
case(elephants-57, in-55)
amod(elephants-57, African-56)
nmod:in(documented-54, elephants-57)
punct(led-36, ?-58)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#she

strike :: A survey of U.K. institutional fund managers found most expect London stocks to be flat after the fiscal 1989 budget is announced , as Chancellor of the Exchequer Nigel Lawson strikes a careful balance between cutting taxes and not overstimulating the economy ./.
det(survey-2, A-1)
nsubj(found-8, survey-2)
case(managers-7, of-3)
compound(managers-7, U.K.-4)
amod(managers-7, institutional-5)
compound(managers-7, fund-6)
nmod:of(survey-2, managers-7)
root(ROOT-0, found-8)
advmod(expect-10, most-9)
ccomp(found-8, expect-10)
compound(stocks-12, London-11)
dobj(expect-10, stocks-12)
nsubj:xsubj(flat-15, stocks-12)
mark(flat-15, to-13)
cop(flat-15, be-14)
xcomp(expect-10, flat-15)
mark(announced-22, after-16)
det(budget-20, the-17)
amod(budget-20, fiscal-18)
nummod(budget-20, 1989-19)
nsubjpass(announced-22, budget-20)
auxpass(announced-22, is-21)
advcl(flat-15, announced-22)
punct(expect-10, ,-23)
mark(strikes-31, as-24)
dep(Lawson-30, Chancellor-25)
case(Exchequer-28, of-26)
det(Exchequer-28, the-27)
nmod:of(Chancellor-25, Exchequer-28)
compound(Lawson-30, Nigel-29)
nsubj(strikes-31, Lawson-30)
advcl(expect-10, strikes-31)
det(balance-34, a-32)
amod(balance-34, careful-33)
dobj(strikes-31, balance-34)
mark(cutting-36, between-35)
acl(balance-34, cutting-36)
dobj(cutting-36, taxes-37)
cc(cutting-36, and-38)
neg(overstimulating-40, not-39)
acl(balance-34, overstimulating-40)
conj:and(cutting-36, overstimulating-40)
det(economy-42, the-41)
dobj(overstimulating-40, economy-42)
punct(found-8, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#balance

strike :: The item veto strikes me as a good idea whose time has come , along with others common in our state constitutions ./.
det(veto-3, The-1)
compound(veto-3, item-2)
nsubj(strikes-4, veto-3)
root(ROOT-0, strikes-4)
dobj(strikes-4, me-5)
case(idea-9, as-6)
det(idea-9, a-7)
amod(idea-9, good-8)
nmod:as(strikes-4, idea-9)
nmod:poss(time-11, idea-9)
ref(idea-9, whose-10)
nsubj(come-13, time-11)
aux(come-13, has-12)
acl:relcl(idea-9, come-13)
punct(come-13, ,-14)
advmod(come-13, along-15)
case(others-17, with-16)
nmod:with(along-15, others-17)
amod(others-17, common-18)
case(constitutions-22, in-19)
nmod:poss(constitutions-22, our-20)
compound(constitutions-22, state-21)
nmod:in(common-18, constitutions-22)
punct(strikes-4, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#me

strike :: The idea of having one child has struck a deeper root and less people are punished for violating the birth control plan . . . ./.
det(idea-2, The-1)
nsubj(struck-8, idea-2)
mark(having-4, of-3)
acl(idea-2, having-4)
nummod(child-6, one-5)
dobj(having-4, child-6)
aux(struck-8, has-7)
root(ROOT-0, struck-8)
det(root-11, a-9)
amod(root-11, deeper-10)
nsubjpass(punished-16, root-11)
cc(root-11, and-12)
amod(people-14, less-13)
conj:and(root-11, people-14)
nsubjpass(punished-16, people-14)
auxpass(punished-16, are-15)
ccomp(struck-8, punished-16)
mark(violating-18, for-17)
advcl(punished-16, violating-18)
det(plan-22, the-19)
compound(plan-22, birth-20)
compound(plan-22, control-21)
dobj(violating-18, plan-22)
punct(struck-8, ...-23)
punct(struck-8, /-24)
punct(struck-8, .-25)
Return str :: strike#idea

strike :: In other words , Mr. Pavarotti 's gorgeous tenor did n't seem to strike anyone listening as anything but gorgeous ; no one in Beijing seemed to wonder whether he was being mugged ./.
case(words-3, In-1)
amod(words-3, other-2)
nmod:in(seem-12, words-3)
punct(seem-12, ,-4)
compound(Pavarotti-6, Mr.-5)
nmod:poss(tenor-9, Pavarotti-6)
case(Pavarotti-6, 's-7)
amod(tenor-9, gorgeous-8)
nsubj(seem-12, tenor-9)
nsubj:xsubj(strike-14, tenor-9)
aux(seem-12, did-10)
neg(seem-12, n't-11)
root(ROOT-0, seem-12)
mark(strike-14, to-13)
xcomp(seem-12, strike-14)
nsubj(listening-16, anyone-15)
ccomp(strike-14, listening-16)
case(anything-18, as-17)
nmod:as(listening-16, anything-18)
cc(anything-18, but-19)
nmod:as(listening-16, gorgeous-20)
conj:but(anything-18, gorgeous-20)
punct(seem-12, ;-21)
neg(one-23, no-22)
nsubj(seemed-26, one-23)
nsubj:xsubj(wonder-28, one-23)
case(Beijing-25, in-24)
nmod:in(one-23, Beijing-25)
parataxis(seem-12, seemed-26)
mark(wonder-28, to-27)
xcomp(seemed-26, wonder-28)
mark(mugged-33, whether-29)
nsubjpass(mugged-33, he-30)
aux(mugged-33, was-31)
auxpass(mugged-33, being-32)
ccomp(wonder-28, mugged-33)
punct(seem-12, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#tenor

strike :: The insurance industry , facing mounting competition on several fronts , is undergoing a personnel and cost retrenchment such as those that have struck the securities and banking industries ./.
det(industry-3, The-1)
compound(industry-3, insurance-2)
nsubj(undergoing-13, industry-3)
punct(undergoing-13, ,-4)
advcl(undergoing-13, facing-5)
amod(competition-7, mounting-6)
dobj(facing-5, competition-7)
case(fronts-10, on-8)
amod(fronts-10, several-9)
nmod:on(competition-7, fronts-10)
punct(undergoing-13, ,-11)
aux(undergoing-13, is-12)
root(ROOT-0, undergoing-13)
det(personnel-15, a-14)
dobj(undergoing-13, personnel-15)
cc(personnel-15, and-16)
compound(retrenchment-18, cost-17)
dobj(undergoing-13, retrenchment-18)
conj:and(personnel-15, retrenchment-18)
case(those-21, such-19)
mwe(such-19, as-20)
nmod:such_as(personnel-15, those-21)
nsubj(struck-24, those-21)
ref(those-21, that-22)
aux(struck-24, have-23)
acl:relcl(those-21, struck-24)
det(securities-26, the-25)
dobj(struck-24, securities-26)
cc(securities-26, and-27)
compound(industries-29, banking-28)
dobj(struck-24, industries-29)
conj:and(securities-26, industries-29)
punct(undergoing-13, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#securities

strike :: `` We still have the 'highly confident ' letter , '' he says , alluding to the letters from Drexel once brandished by corporate raiders to strike fear in the hearts of incumbent managements ./.
punct(says-14, ``-1)
nsubj(have-4, We-2)
advmod(have-4, still-3)
ccomp(says-14, have-4)
det(letter-10, the-5)
punct(letter-10, `-6)
advmod(confident-8, highly-7)
amod(letter-10, confident-8)
punct(letter-10, '-9)
dobj(have-4, letter-10)
punct(says-14, ,-11)
punct(says-14, ''-12)
nsubj(says-14, he-13)
root(ROOT-0, says-14)
punct(says-14, ,-15)
xcomp(says-14, alluding-16)
case(letters-19, to-17)
det(letters-19, the-18)
nmod:to(alluding-16, letters-19)
case(Drexel-21, from-20)
nmod:from(letters-19, Drexel-21)
advmod(brandished-23, once-22)
dep(alluding-16, brandished-23)
case(raiders-26, by-24)
amod(raiders-26, corporate-25)
nmod:by(brandished-23, raiders-26)
mark(strike-28, to-27)
xcomp(brandished-23, strike-28)
dobj(strike-28, fear-29)
case(hearts-32, in-30)
det(hearts-32, the-31)
nmod:in(strike-28, hearts-32)
case(managements-35, of-33)
amod(managements-35, incumbent-34)
nmod:of(hearts-32, managements-35)
punct(says-14, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#fear

strike :: And with just one sibling , he has been struck by the contrast between his own small , far-flung family and the large , close-knit Arab households ./.
cc(struck-10, And-1)
case(sibling-5, with-2)
advmod(one-4, just-3)
nummod(sibling-5, one-4)
nmod:with(struck-10, sibling-5)
punct(struck-10, ,-6)
nsubjpass(struck-10, he-7)
aux(struck-10, has-8)
auxpass(struck-10, been-9)
root(ROOT-0, struck-10)
case(contrast-13, by-11)
det(contrast-13, the-12)
nmod:agent(struck-10, contrast-13)
case(family-20, between-14)
nmod:poss(family-20, his-15)
amod(family-20, own-16)
amod(family-20, small-17)
punct(family-20, ,-18)
amod(family-20, far-flung-19)
nmod:between(contrast-13, family-20)
cc(family-20, and-21)
det(households-27, the-22)
amod(households-27, large-23)
punct(households-27, ,-24)
amod(households-27, close-knit-25)
compound(households-27, Arab-26)
nmod:between(contrast-13, households-27)
conj:and(family-20, households-27)
punct(struck-10, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#he

strike :: She had been struck with an iron skillet ./.
nsubjpass(struck-4, She-1)
aux(struck-4, had-2)
auxpass(struck-4, been-3)
root(ROOT-0, struck-4)
case(skillet-8, with-5)
det(skillet-8, an-6)
compound(skillet-8, iron-7)
nmod:with(struck-4, skillet-8)
punct(struck-4, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#she

strike :: Four new studies strongly suggest that heart disease can strike individuals with especially low amounts of high-density lipoproteins , or HDL -- the body 's so-called good cholesterol -- even if their total cholesterol level is below 200 milligrams per deciliter , an amount doctors currently think is safe ./.
nummod(studies-3, Four-1)
amod(studies-3, new-2)
nsubj(suggest-5, studies-3)
advmod(suggest-5, strongly-4)
root(ROOT-0, suggest-5)
mark(strike-10, that-6)
compound(disease-8, heart-7)
nsubj(strike-10, disease-8)
aux(strike-10, can-9)
ccomp(suggest-5, strike-10)
dobj(strike-10, individuals-11)
case(amounts-15, with-12)
advmod(low-14, especially-13)
amod(amounts-15, low-14)
nmod:with(strike-10, amounts-15)
case(lipoproteins-18, of-16)
amod(lipoproteins-18, high-density-17)
nmod:of(amounts-15, lipoproteins-18)
punct(lipoproteins-18, ,-19)
cc(lipoproteins-18, or-20)
nmod:of(amounts-15, HDL-21)
conj:or(lipoproteins-18, HDL-21)
punct(strike-10, ---22)
det(body-24, the-23)
nmod:poss(cholesterol-28, body-24)
case(body-24, 's-25)
amod(cholesterol-28, so-called-26)
amod(cholesterol-28, good-27)
dobj(strike-10, cholesterol-28)
punct(cholesterol-28, ---29)
advmod(milligrams-39, even-30)
mark(milligrams-39, if-31)
nmod:poss(level-35, their-32)
amod(level-35, total-33)
compound(level-35, cholesterol-34)
nsubj(milligrams-39, level-35)
cop(milligrams-39, is-36)
case(milligrams-39, below-37)
nummod(milligrams-39, 200-38)
dep(cholesterol-28, milligrams-39)
case(deciliter-41, per-40)
nmod:per(milligrams-39, deciliter-41)
punct(milligrams-39, ,-42)
det(amount-44, an-43)
nsubj(safe-49, amount-44)
nsubj(think-47, doctors-45)
advmod(think-47, currently-46)
acl:relcl(amount-44, think-47)
cop(safe-49, is-48)
ccomp(milligrams-39, safe-49)
punct(suggest-5, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#individuals

strike :: Scientists in their labs when the virus struck called reinforcements for help ./.
root(ROOT-0, Scientists-1)
case(labs-4, in-2)
nmod:poss(labs-4, their-3)
nmod:in(Scientists-1, labs-4)
advmod(struck-8, when-5)
det(virus-7, the-6)
nsubj(struck-8, virus-7)
acl:relcl(Scientists-1, struck-8)
xcomp(struck-8, called-9)
xcomp(called-9, reinforcements-10)
case(help-12, for-11)
nmod:for(reinforcements-10, help-12)
punct(Scientists-1, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#virus

strike :: They have had to learn through the press about the sweet terms he had struck for himself and his small management group ./.
nsubj(had-3, They-1)
nsubj:xsubj(learn-5, They-1)
aux(had-3, have-2)
root(ROOT-0, had-3)
mark(learn-5, to-4)
xcomp(had-3, learn-5)
case(press-8, through-6)
det(press-8, the-7)
nmod:through(learn-5, press-8)
case(terms-12, about-9)
det(terms-12, the-10)
amod(terms-12, sweet-11)
nmod:about(learn-5, terms-12)
nsubj(struck-15, he-13)
aux(struck-15, had-14)
acl:relcl(terms-12, struck-15)
case(himself-17, for-16)
nmod:for(struck-15, himself-17)
cc(himself-17, and-18)
nmod:poss(group-22, his-19)
amod(group-22, small-20)
compound(group-22, management-21)
nmod:for(struck-15, group-22)
conj:and(himself-17, group-22)
punct(had-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#he

strike :: He did , however , get McGwire to pop out with two out and the bases loaded in the eighth , and he struck out the mighty Jose Canseco on a 3-2 count with a man on in the ninth ./.
nsubj(did-2, He-1)
nsubj(get-6, He-1)
root(ROOT-0, did-2)
punct(did-2, ,-3)
advmod(did-2, however-4)
punct(did-2, ,-5)
conj:and(did-2, get-6)
dobj(get-6, McGwire-7)
nsubj:xsubj(pop-9, McGwire-7)
mark(pop-9, to-8)
xcomp(get-6, pop-9)
compound:prt(pop-9, out-10)
case(out-13, with-11)
nummod(out-13, two-12)
nmod:with(pop-9, out-13)
cc(out-13, and-14)
det(bases-16, the-15)
nsubj(loaded-17, bases-16)
nmod:with(pop-9, loaded-17)
conj:and(out-13, loaded-17)
case(eighth-20, in-18)
det(eighth-20, the-19)
nmod:in(pop-9, eighth-20)
punct(did-2, ,-21)
cc(did-2, and-22)
nsubj(struck-24, he-23)
conj:and(did-2, struck-24)
compound:prt(struck-24, out-25)
det(Canseco-29, the-26)
amod(Canseco-29, mighty-27)
compound(Canseco-29, Jose-28)
dobj(struck-24, Canseco-29)
case(count-33, on-30)
det(count-33, a-31)
nummod(count-33, 3-2-32)
nmod:on(struck-24, count-33)
case(man-36, with-34)
det(man-36, a-35)
nmod:with(count-33, man-36)
case(ninth-40, on-37)
case(ninth-40, in-38)
det(ninth-40, the-39)
nmod:in(man-36, ninth-40)
punct(did-2, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#canseco

strike :: Not long ago Byte editors wandering through Bix were struck by insightful comments on telecommunications from a subscriber in San Diego ./.
neg(wandering-6, Not-1)
advmod(wandering-6, long-2)
advmod(wandering-6, ago-3)
compound(editors-5, Byte-4)
nsubj(wandering-6, editors-5)
csubjpass(struck-10, wandering-6)
case(Bix-8, through-7)
nmod:through(wandering-6, Bix-8)
auxpass(struck-10, were-9)
root(ROOT-0, struck-10)
case(comments-13, by-11)
amod(comments-13, insightful-12)
nmod:agent(struck-10, comments-13)
case(telecommunications-15, on-14)
nmod:on(comments-13, telecommunications-15)
case(subscriber-18, from-16)
det(subscriber-18, a-17)
nmod:from(comments-13, subscriber-18)
case(Diego-21, in-19)
compound(Diego-21, San-20)
nmod:in(subscriber-18, Diego-21)
punct(struck-10, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#were

strike :: According to Mr. Bellrose , the decline is due to a two-fisted villain that has struck the ducks where they 're the most vulnerable -- on the prairies of the Dakotas and southern Canada ./.
case(Bellrose-4, According-1)
mwe(According-1, to-2)
compound(Bellrose-4, Mr.-3)
nmod:according_to(due-9, Bellrose-4)
punct(due-9, ,-5)
det(decline-7, the-6)
nsubj(due-9, decline-7)
cop(due-9, is-8)
root(ROOT-0, due-9)
case(villain-13, to-10)
det(villain-13, a-11)
amod(villain-13, two-fisted-12)
nmod:to(due-9, villain-13)
nsubj(struck-16, villain-13)
ref(villain-13, that-14)
aux(struck-16, has-15)
acl:relcl(villain-13, struck-16)
det(ducks-18, the-17)
dobj(struck-16, ducks-18)
advmod(vulnerable-24, where-19)
nsubj(vulnerable-24, they-20)
cop(vulnerable-24, 're-21)
det(vulnerable-24, the-22)
advmod(vulnerable-24, most-23)
acl:relcl(ducks-18, vulnerable-24)
punct(villain-13, ---25)
case(prairies-28, on-26)
det(prairies-28, the-27)
nmod:on(villain-13, prairies-28)
case(Dakotas-31, of-29)
det(Dakotas-31, the-30)
nmod:of(prairies-28, Dakotas-31)
cc(Dakotas-31, and-32)
compound(Canada-34, southern-33)
nmod:of(prairies-28, Canada-34)
conj:and(Dakotas-31, Canada-34)
punct(due-9, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#ducks

strike :: Electronic Data Systems President Alberthal struck back at the firm 's founder , H. Ross Perot , saying the Texas billionaire 's verbal and business attacks hurt the company ./.
compound(Alberthal-5, Electronic-1)
compound(Alberthal-5, Data-2)
compound(Alberthal-5, Systems-3)
compound(Alberthal-5, President-4)
nsubj(struck-6, Alberthal-5)
root(ROOT-0, struck-6)
advmod(struck-6, back-7)
case(founder-12, at-8)
det(firm-10, the-9)
nmod:poss(founder-12, firm-10)
case(firm-10, 's-11)
nmod:at(struck-6, founder-12)
punct(founder-12, ,-13)
compound(Perot-16, H.-14)
compound(Perot-16, Ross-15)
appos(founder-12, Perot-16)
punct(founder-12, ,-17)
acl(founder-12, saying-18)
det(billionaire-21, the-19)
compound(billionaire-21, Texas-20)
nmod:poss(attacks-26, billionaire-21)
case(billionaire-21, 's-22)
amod(attacks-26, verbal-23)
cc(verbal-23, and-24)
conj:and(verbal-23, business-25)
amod(attacks-26, business-25)
nsubj(hurt-27, attacks-26)
ccomp(saying-18, hurt-27)
det(company-29, the-28)
dobj(hurt-27, company-29)
punct(struck-6, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#alberthal

strike :: Mr. Harris says the free-trade agreement gives Canadian steel producers more secure access to the huge U.S. market and reduces the threat of U.S. quotas , which he said almost struck his company four years ago ./.
compound(Harris-2, Mr.-1)
nsubj(says-3, Harris-2)
root(ROOT-0, says-3)
det(agreement-6, the-4)
amod(agreement-6, free-trade-5)
nsubj(gives-7, agreement-6)
nsubj(reduces-20, agreement-6)
ccomp(says-3, gives-7)
amod(producers-10, Canadian-8)
compound(producers-10, steel-9)
iobj(gives-7, producers-10)
advmod(secure-12, more-11)
amod(access-13, secure-12)
dobj(gives-7, access-13)
case(market-18, to-14)
det(market-18, the-15)
amod(market-18, huge-16)
compound(market-18, U.S.-17)
nmod:to(access-13, market-18)
cc(gives-7, and-19)
ccomp(says-3, reduces-20)
conj:and(gives-7, reduces-20)
det(threat-22, the-21)
dobj(reduces-20, threat-22)
dobj(said-29, threat-22)
case(quotas-25, of-23)
compound(quotas-25, U.S.-24)
nmod:of(threat-22, quotas-25)
punct(threat-22, ,-26)
ref(threat-22, which-27)
nsubj(said-29, he-28)
acl:relcl(threat-22, said-29)
advmod(struck-31, almost-30)
ccomp(said-29, struck-31)
nmod:poss(company-33, his-32)
dobj(struck-31, company-33)
nummod(years-35, four-34)
nmod:npmod(ago-36, years-35)
advmod(struck-31, ago-36)
punct(says-3, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#company

strike :: Such a powerful institution would strike at the heart of national sovereignty , ending the control by governments or their central banks over monetary policy and overseeing the substitution of purely national currencies with a European unit of exchange ./.
amod(institution-4, Such-1)
det(institution-4, a-2)
amod(institution-4, powerful-3)
nsubj(strike-6, institution-4)
aux(strike-6, would-5)
root(ROOT-0, strike-6)
case(heart-9, at-7)
det(heart-9, the-8)
nmod:at(strike-6, heart-9)
case(sovereignty-12, of-10)
amod(sovereignty-12, national-11)
nmod:of(heart-9, sovereignty-12)
punct(strike-6, ,-13)
dep(strike-6, ending-14)
det(control-16, the-15)
dobj(ending-14, control-16)
case(governments-18, by-17)
nmod:by(control-16, governments-18)
cc(governments-18, or-19)
nmod:poss(banks-22, their-20)
amod(banks-22, central-21)
nmod:by(control-16, banks-22)
conj:or(governments-18, banks-22)
case(policy-25, over-23)
amod(policy-25, monetary-24)
nmod:over(control-16, policy-25)
cc(ending-14, and-26)
dep(strike-6, overseeing-27)
conj:and(ending-14, overseeing-27)
det(substitution-29, the-28)
dobj(overseeing-27, substitution-29)
case(currencies-33, of-30)
advmod(national-32, purely-31)
amod(currencies-33, national-32)
nmod:of(substitution-29, currencies-33)
case(unit-37, with-34)
det(unit-37, a-35)
amod(unit-37, European-36)
nmod:with(substitution-29, unit-37)
case(exchange-39, of-38)
nmod:of(unit-37, exchange-39)
punct(strike-6, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#institution

strike :: Mr. Bush avoided making any serious gaffes , while striking at his opponent in spirited fashion ./.
compound(Bush-2, Mr.-1)
nsubj(avoided-3, Bush-2)
root(ROOT-0, avoided-3)
xcomp(avoided-3, making-4)
det(gaffes-7, any-5)
amod(gaffes-7, serious-6)
dobj(making-4, gaffes-7)
punct(avoided-3, ,-8)
mark(striking-10, while-9)
advcl(avoided-3, striking-10)
case(opponent-13, at-11)
nmod:poss(opponent-13, his-12)
nmod:at(striking-10, opponent-13)
case(fashion-16, in-14)
amod(fashion-16, spirited-15)
nmod:in(opponent-13, fashion-16)
punct(avoided-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#opponent

strike :: That deal , like the Minnesota Mining acquisition , was struck for purely strategic reasons ; it gave Hughes 40 % of the British market for military flight simulators ./.
det(deal-2, That-1)
nsubjpass(struck-11, deal-2)
punct(deal-2, ,-3)
case(acquisition-8, like-4)
det(acquisition-8, the-5)
compound(acquisition-8, Minnesota-6)
compound(acquisition-8, Mining-7)
nmod:like(deal-2, acquisition-8)
punct(deal-2, ,-9)
auxpass(struck-11, was-10)
root(ROOT-0, struck-11)
case(reasons-15, for-12)
advmod(strategic-14, purely-13)
amod(reasons-15, strategic-14)
nmod:for(struck-11, reasons-15)
punct(struck-11, ;-16)
nsubj(gave-18, it-17)
parataxis(struck-11, gave-18)
iobj(gave-18, Hughes-19)
nummod(%-21, 40-20)
dobj(gave-18, %-21)
case(market-25, of-22)
det(market-25, the-23)
amod(market-25, British-24)
nmod:of(%-21, market-25)
case(simulators-29, for-26)
amod(simulators-29, military-27)
compound(simulators-29, flight-28)
nmod:for(gave-18, simulators-29)
punct(struck-11, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#deal

strike :: The ad struck a nerve in a public made more jittery by the obsessed mob that , in Sen. Goldwater 's name , hooted and jeered former President Eisenhower at the Republican National Convention that summer ./.
det(ad-2, The-1)
nsubj(struck-3, ad-2)
root(ROOT-0, struck-3)
det(nerve-5, a-4)
dobj(struck-3, nerve-5)
case(public-8, in-6)
det(public-8, a-7)
nmod:in(struck-3, public-8)
acl(public-8, made-9)
advmod(jittery-11, more-10)
xcomp(made-9, jittery-11)
case(mob-15, by-12)
det(mob-15, the-13)
amod(mob-15, obsessed-14)
nmod:by(jittery-11, mob-15)
mark(hooted-24, that-16)
punct(hooted-24, ,-17)
case(name-22, in-18)
compound(Goldwater-20, Sen.-19)
nmod:poss(name-22, Goldwater-20)
case(Goldwater-20, 's-21)
nmod:in(hooted-24, name-22)
punct(hooted-24, ,-23)
ccomp(mob-15, hooted-24)
cc(hooted-24, and-25)
ccomp(mob-15, jeered-26)
conj:and(hooted-24, jeered-26)
amod(Eisenhower-29, former-27)
compound(Eisenhower-29, President-28)
dobj(hooted-24, Eisenhower-29)
case(Convention-34, at-30)
det(Convention-34, the-31)
compound(Convention-34, Republican-32)
compound(Convention-34, National-33)
nmod:at(hooted-24, Convention-34)
det(summer-36, that-35)
dep(Convention-34, summer-36)
punct(struck-3, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#nerve

strike :: Ideas may strike it but they just bounce off ./.
nsubj(strike-3, Ideas-1)
aux(strike-3, may-2)
root(ROOT-0, strike-3)
dobj(strike-3, it-4)
cc(strike-3, but-5)
nsubj(bounce-8, they-6)
advmod(bounce-8, just-7)
conj:but(strike-3, bounce-8)
compound:prt(bounce-8, off-9)
punct(strike-3, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#it

strike :: His selection now evokes memories of the Boston-Austin axis struck when Mr. Dukakis 's political hero , John Kennedy , picked Sen. Lyndon Johnson as his running mate in 1960 ./.
nmod:poss(selection-2, His-1)
nsubj(evokes-4, selection-2)
advmod(evokes-4, now-3)
root(ROOT-0, evokes-4)
nsubj(struck-10, memories-5)
case(axis-9, of-6)
det(axis-9, the-7)
amod(axis-9, Boston-Austin-8)
nmod:of(memories-5, axis-9)
ccomp(evokes-4, struck-10)
advmod(picked-21, when-11)
compound(Dukakis-13, Mr.-12)
nmod:poss(hero-16, Dukakis-13)
case(Dukakis-13, 's-14)
amod(hero-16, political-15)
nsubj(picked-21, hero-16)
punct(hero-16, ,-17)
compound(Kennedy-19, John-18)
appos(hero-16, Kennedy-19)
punct(hero-16, ,-20)
advcl(struck-10, picked-21)
compound(Johnson-24, Sen.-22)
compound(Johnson-24, Lyndon-23)
dobj(picked-21, Johnson-24)
case(mate-28, as-25)
nmod:poss(mate-28, his-26)
amod(mate-28, running-27)
nmod:as(picked-21, mate-28)
case(1960-30, in-29)
nmod:in(picked-21, 1960-30)
punct(evokes-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#memories

strike :: If a deal is struck , the 767s will replace aging Soviet-made Ilyushins on LOT 's Warsaw-New York and Warsaw-Chicago routes ./.
mark(struck-5, If-1)
det(deal-3, a-2)
nsubjpass(struck-5, deal-3)
auxpass(struck-5, is-4)
advcl(replace-10, struck-5)
punct(replace-10, ,-6)
det(767s-8, the-7)
nsubj(replace-10, 767s-8)
aux(replace-10, will-9)
root(ROOT-0, replace-10)
amod(Ilyushins-13, aging-11)
amod(Ilyushins-13, Soviet-made-12)
dobj(replace-10, Ilyushins-13)
case(York-18, on-14)
nmod:poss(York-18, LOT-15)
case(LOT-15, 's-16)
compound(York-18, Warsaw-New-17)
nmod:on(Ilyushins-13, York-18)
cc(York-18, and-19)
compound(routes-21, Warsaw-Chicago-20)
nmod:on(Ilyushins-13, routes-21)
conj:and(York-18, routes-21)
punct(replace-10, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#deal

strike :: While he won only about 12 % of the white vote in the Democratic primaries , according to New York Times-CBS News polls , he still did far better than in 1984 , and clearly struck a chord with many whites ./.
mark(won-3, While-1)
nsubj(won-3, he-2)
advcl(did-27, won-3)
advmod(12-6, only-4)
advmod(12-6, about-5)
nummod(%-7, 12-6)
dobj(won-3, %-7)
case(vote-11, of-8)
det(vote-11, the-9)
amod(vote-11, white-10)
nmod:of(%-7, vote-11)
case(primaries-15, in-12)
det(primaries-15, the-13)
amod(primaries-15, Democratic-14)
nmod:in(vote-11, primaries-15)
punct(won-3, ,-16)
case(polls-23, according-17)
mwe(according-17, to-18)
compound(polls-23, New-19)
compound(polls-23, York-20)
compound(polls-23, Times-CBS-21)
compound(polls-23, News-22)
nmod:according_to(won-3, polls-23)
punct(did-27, ,-24)
nsubj(did-27, he-25)
nsubj(struck-36, he-25)
advmod(did-27, still-26)
root(ROOT-0, did-27)
advmod(better-29, far-28)
advmod(did-27, better-29)
case(1984-32, than-30)
case(1984-32, in-31)
nmod:in(better-29, 1984-32)
punct(did-27, ,-33)
cc(did-27, and-34)
advmod(struck-36, clearly-35)
conj:and(did-27, struck-36)
det(chord-38, a-37)
dobj(struck-36, chord-38)
case(whites-41, with-39)
amod(whites-41, many-40)
nmod:with(struck-36, whites-41)
punct(did-27, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#chord

strike :: And Michigan Gov. James Blanchard is appointing a commission to `` look at how you strike the balance '' between the warring factions , the governor 's spokesman says ./.
cc(appointing-7, And-1)
compound(Blanchard-5, Michigan-2)
compound(Blanchard-5, Gov.-3)
compound(Blanchard-5, James-4)
nsubj(appointing-7, Blanchard-5)
aux(appointing-7, is-6)
root(ROOT-0, appointing-7)
det(commission-9, a-8)
dobj(appointing-7, commission-9)
nsubj:xsubj(look-12, commission-9)
mark(look-12, to-10)
punct(look-12, ``-11)
xcomp(appointing-7, look-12)
mark(strike-16, at-13)
advmod(strike-16, how-14)
nsubj(strike-16, you-15)
advcl(look-12, strike-16)
det(balance-18, the-17)
dobj(strike-16, balance-18)
punct(look-12, ''-19)
case(factions-23, between-20)
det(factions-23, the-21)
amod(factions-23, warring-22)
nmod:between(look-12, factions-23)
punct(look-12, ,-24)
det(governor-26, the-25)
nmod:poss(spokesman-28, governor-26)
case(governor-26, 's-27)
nsubj(says-29, spokesman-28)
parataxis(look-12, says-29)
punct(appointing-7, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#balance

strike :: But now that early sales are in , it appears that while GM has n't struck out , the once-formidable slugger so far has only a solid single to show for its efforts ./.
cc(appears-10, But-1)
advmod(appears-10, now-2)
mark(in-7, that-3)
amod(sales-5, early-4)
nsubj(in-7, sales-5)
cop(in-7, are-6)
advcl(appears-10, in-7)
punct(appears-10, ,-8)
nsubj(appears-10, it-9)
root(ROOT-0, appears-10)
mark(has-24, that-11)
mark(struck-16, while-12)
nsubj(struck-16, GM-13)
aux(struck-16, has-14)
neg(struck-16, n't-15)
advcl(has-24, struck-16)
compound:prt(struck-16, out-17)
punct(has-24, ,-18)
det(slugger-21, the-19)
amod(slugger-21, once-formidable-20)
nsubj(has-24, slugger-21)
advmod(far-23, so-22)
advmod(has-24, far-23)
ccomp(appears-10, has-24)
advmod(single-28, only-25)
det(single-28, a-26)
amod(single-28, solid-27)
dobj(has-24, single-28)
mark(show-30, to-29)
acl(single-28, show-30)
case(efforts-33, for-31)
nmod:poss(efforts-33, its-32)
nmod:for(show-30, efforts-33)
punct(appears-10, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#gm

strike :: But if a recession strikes next year , as many economists predict , other highly leveraged companies could unravel ./.
cc(unravel-19, But-1)
mark(strikes-5, if-2)
det(recession-4, a-3)
nsubj(strikes-5, recession-4)
advcl(unravel-19, strikes-5)
amod(year-7, next-6)
nmod:tmod(strikes-5, year-7)
punct(unravel-19, ,-8)
mark(predict-12, as-9)
amod(economists-11, many-10)
nsubj(predict-12, economists-11)
advcl(unravel-19, predict-12)
punct(unravel-19, ,-13)
amod(companies-17, other-14)
advmod(leveraged-16, highly-15)
amod(companies-17, leveraged-16)
nsubj(unravel-19, companies-17)
aux(unravel-19, could-18)
root(ROOT-0, unravel-19)
punct(unravel-19, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#recession

strike :: But even though the Sox are off to a typically lousy start this season , plenty of Chicagoans do n't want to see them strike out for Florida ./.
cc(want-21, But-1)
advmod(start-12, even-2)
mark(start-12, though-3)
det(Sox-5, the-4)
nsubj(start-12, Sox-5)
cop(start-12, are-6)
case(start-12, off-7)
case(start-12, to-8)
det(start-12, a-9)
advmod(lousy-11, typically-10)
amod(start-12, lousy-11)
advcl(want-21, start-12)
det(season-14, this-13)
nmod:tmod(start-12, season-14)
punct(want-21, ,-15)
nsubj(want-21, plenty-16)
nsubj:xsubj(see-23, plenty-16)
case(Chicagoans-18, of-17)
nmod:of(plenty-16, Chicagoans-18)
aux(want-21, do-19)
neg(want-21, n't-20)
root(ROOT-0, want-21)
mark(see-23, to-22)
xcomp(want-21, see-23)
nsubj(strike-25, them-24)
ccomp(see-23, strike-25)
compound:prt(strike-25, out-26)
case(Florida-28, for-27)
nmod:for(strike-25, Florida-28)
punct(want-21, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#them

strike :: MORE FIRED MANAGERS strike out on their own , but many just strike out ./.
advmod(MANAGERS-3, MORE-1)
amod(MANAGERS-3, FIRED-2)
nsubj(strike-4, MANAGERS-3)
root(ROOT-0, strike-4)
compound:prt(strike-4, out-5)
case(own-8, on-6)
nmod:poss(own-8, their-7)
nmod:on(strike-4, own-8)
punct(strike-4, ,-9)
cc(strike-4, but-10)
nsubj(strike-13, many-11)
advmod(strike-13, just-12)
conj:but(strike-4, strike-13)
compound:prt(strike-13, out-14)
punct(strike-4, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#managers

strike :: In short , a completely effective SDI would give the Soviets what they do not now have: the ability to strike the U.S. without fear of retaliation ./.
case(short-2, In-1)
nmod:in(give-9, short-2)
punct(give-9, ,-3)
det(SDI-7, a-4)
advmod(effective-6, completely-5)
amod(SDI-7, effective-6)
nsubj(give-9, SDI-7)
aux(give-9, would-8)
root(ROOT-0, give-9)
det(Soviets-11, the-10)
iobj(give-9, Soviets-11)
dobj(have-17, what-12)
nsubj(have-17, they-13)
aux(have-17, do-14)
neg(have-17, not-15)
advmod(have-17, now-16)
ccomp(give-9, have-17)
punct(have-17, :-18)
det(ability-20, the-19)
dobj(have-17, ability-20)
mark(strike-22, to-21)
acl(ability-20, strike-22)
det(U.S.-24, the-23)
dobj(strike-22, U.S.-24)
case(fear-26, without-25)
nmod:without(strike-22, fear-26)
case(retaliation-28, of-27)
nmod:of(fear-26, retaliation-28)
punct(give-9, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#u.s.

strike :: In striking down the machinists ' covenant , Judge Zagel cleared at least one hurdle to the pilots ' proposed acquisition , which is pending ./.
mark(striking-2, In-1)
advcl(cleared-11, striking-2)
compound:prt(striking-2, down-3)
det(machinists-5, the-4)
nmod:poss(covenant-7, machinists-5)
case(machinists-5, '-6)
dobj(striking-2, covenant-7)
punct(cleared-11, ,-8)
compound(Zagel-10, Judge-9)
nsubj(cleared-11, Zagel-10)
root(ROOT-0, cleared-11)
case(least-13, at-12)
nmod:npmod(one-14, least-13)
nummod(hurdle-15, one-14)
dobj(cleared-11, hurdle-15)
case(acquisition-21, to-16)
det(pilots-18, the-17)
nmod:poss(acquisition-21, pilots-18)
case(pilots-18, '-19)
amod(acquisition-21, proposed-20)
nmod:to(cleared-11, acquisition-21)
nsubj(pending-25, acquisition-21)
punct(acquisition-21, ,-22)
ref(acquisition-21, which-23)
cop(pending-25, is-24)
acl:relcl(acquisition-21, pending-25)
punct(cleared-11, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#covenant

strike :: Omnicom 's Tracy-Locke unit in Texas recently struck a deal to buy back 20 % of its stock from the parent ./.
nmod:poss(unit-4, Omnicom-1)
case(Omnicom-1, 's-2)
compound(unit-4, Tracy-Locke-3)
nsubj(struck-8, unit-4)
case(Texas-6, in-5)
nmod:in(unit-4, Texas-6)
advmod(struck-8, recently-7)
root(ROOT-0, struck-8)
det(deal-10, a-9)
dobj(struck-8, deal-10)
mark(buy-12, to-11)
acl(deal-10, buy-12)
advmod(buy-12, back-13)
nummod(%-15, 20-14)
dobj(buy-12, %-15)
case(stock-18, of-16)
nmod:poss(stock-18, its-17)
nmod:of(%-15, stock-18)
case(parent-21, from-19)
det(parent-21, the-20)
nmod:from(buy-12, parent-21)
punct(struck-8, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#deal

strike :: The study notes that some machines weigh half a ton when fully loaded and can strike the ground with a force of almost 1 , 000 pounds ./.
det(study-2, The-1)
nsubj(notes-3, study-2)
root(ROOT-0, notes-3)
mark(weigh-7, that-4)
det(machines-6, some-5)
nsubj(weigh-7, machines-6)
nsubj(strike-16, machines-6)
ccomp(notes-3, weigh-7)
det:predet(ton-10, half-8)
det(ton-10, a-9)
dobj(weigh-7, ton-10)
advmod(loaded-13, when-11)
advmod(loaded-13, fully-12)
advcl(weigh-7, loaded-13)
cc(weigh-7, and-14)
aux(strike-16, can-15)
ccomp(notes-3, strike-16)
conj:and(weigh-7, strike-16)
det(ground-18, the-17)
dobj(strike-16, ground-18)
case(force-21, with-19)
det(force-21, a-20)
nmod:with(strike-16, force-21)
case(pounds-27, of-22)
advmod(1-24, almost-23)
nummod(pounds-27, 1-24)
punct(pounds-27, ,-25)
nummod(pounds-27, 000-26)
nmod:of(force-21, pounds-27)
punct(notes-3, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#ground

strike :: One is particularly struck by the austere but strongly felt eroticism of many of these works , and by the extraordinary poetry with which Poussin imbues the timeless themes of love and death ./.
nsubjpass(struck-4, One-1)
nsubjpass(felt-10, One-1)
auxpass(struck-4, is-2)
advmod(struck-4, particularly-3)
root(ROOT-0, struck-4)
case(austere-7, by-5)
det(austere-7, the-6)
nmod:agent(struck-4, austere-7)
cc(struck-4, but-8)
advmod(felt-10, strongly-9)
conj:but(struck-4, felt-10)
dobj(felt-10, eroticism-11)
case(many-13, of-12)
nmod:of(eroticism-11, many-13)
case(works-16, of-14)
det(works-16, these-15)
nmod:of(many-13, works-16)
punct(struck-4, ,-17)
cc(struck-4, and-18)
case(poetry-22, by-19)
det(poetry-22, the-20)
amod(poetry-22, extraordinary-21)
conj:but(struck-4, poetry-22)
nmod:with(imbues-26, poetry-22)
case(which-24, with-23)
ref(poetry-22, which-24)
nsubj(imbues-26, Poussin-25)
acl:relcl(poetry-22, imbues-26)
det(themes-29, the-27)
amod(themes-29, timeless-28)
dobj(imbues-26, themes-29)
case(love-31, of-30)
nmod:of(themes-29, love-31)
cc(love-31, and-32)
nmod:of(themes-29, death-33)
conj:and(love-31, death-33)
punct(struck-4, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#one

strike :: The fast-paced , slapstick nature of the commercials for Goodyear 's automotive service centers contrasts sharply with previous campaigns that subtly stressed the safety of Goodyear tires while also striking an emotional chord with viewers ./.
det(nature-5, The-1)
amod(nature-5, fast-paced-2)
punct(nature-5, ,-3)
amod(nature-5, slapstick-4)
nsubj(contrasts-15, nature-5)
case(commercials-8, of-6)
det(commercials-8, the-7)
nmod:of(nature-5, commercials-8)
case(centers-14, for-9)
nmod:poss(centers-14, Goodyear-10)
case(Goodyear-10, 's-11)
amod(centers-14, automotive-12)
compound(centers-14, service-13)
nmod:for(commercials-8, centers-14)
root(ROOT-0, contrasts-15)
advmod(contrasts-15, sharply-16)
case(campaigns-19, with-17)
amod(campaigns-19, previous-18)
nmod:with(contrasts-15, campaigns-19)
nsubj(stressed-22, campaigns-19)
ref(campaigns-19, that-20)
advmod(stressed-22, subtly-21)
acl:relcl(campaigns-19, stressed-22)
det(safety-24, the-23)
dobj(stressed-22, safety-24)
case(tires-27, of-25)
compound(tires-27, Goodyear-26)
nmod:of(safety-24, tires-27)
mark(striking-30, while-28)
advmod(striking-30, also-29)
advcl(stressed-22, striking-30)
det(chord-33, an-31)
amod(chord-33, emotional-32)
dobj(striking-30, chord-33)
case(viewers-35, with-34)
nmod:with(striking-30, viewers-35)
punct(contrasts-15, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#chord

strike :: The merits of that defense are to be argued today in Delaware Chancery Court , the same court that earlier this week struck down Interco Inc. 's poison pill ./.
det(merits-2, The-1)
nsubj(are-6, merits-2)
nsubjpass:xsubj(argued-9, merits-2)
case(defense-5, of-3)
det(defense-5, that-4)
nmod:of(merits-2, defense-5)
root(ROOT-0, are-6)
mark(argued-9, to-7)
auxpass(argued-9, be-8)
xcomp(are-6, argued-9)
nmod:tmod(argued-9, today-10)
case(Court-14, in-11)
compound(Court-14, Delaware-12)
compound(Court-14, Chancery-13)
nmod:in(argued-9, Court-14)
punct(Court-14, ,-15)
det(court-18, the-16)
amod(court-18, same-17)
appos(Court-14, court-18)
nsubj(struck-23, court-18)
ref(court-18, that-19)
advmod(week-22, earlier-20)
det(week-22, this-21)
dep(struck-23, week-22)
acl:relcl(court-18, struck-23)
compound:prt(struck-23, down-24)
compound(Inc.-26, Interco-25)
nmod:poss(pill-29, Inc.-26)
case(Inc.-26, 's-27)
compound(pill-29, poison-28)
dobj(struck-23, pill-29)
punct(are-6, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#pill

strike :: Adds George Gallup Jr . , the pollster: `` He 's really striking a responsive chord in the populace . ''/''
root(ROOT-0, Adds-1)
compound(Jr-4, George-2)
compound(Jr-4, Gallup-3)
nsubj(Adds-1, Jr-4)
punct(Adds-1, .-5)
root(ROOT-0, ,-1)
det(pollster-3, the-2)
root(,-1, pollster-3)
punct(pollster-3, :-4)
punct(pollster-3, ``-5)
nsubj(striking-9, He-6)
aux(striking-9, 's-7)
advmod(striking-9, really-8)
dep(pollster-3, striking-9)
det(chord-12, a-10)
amod(chord-12, responsive-11)
dobj(striking-9, chord-12)
case(populace-15, in-13)
det(populace-15, the-14)
nmod:in(chord-12, populace-15)
punct(pollster-3, .-16)
punct(pollster-3, ''-17)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: strike#chord

strike :: He also brought his will to throw bats , batting helmets and anything else handy when he strikes out , but it 's part of the same package ./.
nsubj(brought-3, He-1)
advmod(brought-3, also-2)
root(ROOT-0, brought-3)
nmod:poss(will-5, his-4)
dobj(brought-3, will-5)
nsubj:xsubj(throw-7, will-5)
mark(throw-7, to-6)
xcomp(brought-3, throw-7)
dobj(throw-7, bats-8)
punct(brought-3, ,-9)
compound(helmets-11, batting-10)
dobj(brought-3, helmets-11)
nsubj:xsubj(throw-7, helmets-11)
cc(helmets-11, and-12)
dep(handy-15, anything-13)
advmod(handy-15, else-14)
dobj(brought-3, handy-15)
nsubj:xsubj(throw-7, handy-15)
conj:and(helmets-11, handy-15)
advmod(strikes-18, when-16)
nsubj(strikes-18, he-17)
advcl(brought-3, strikes-18)
compound:prt(strikes-18, out-19)
punct(brought-3, ,-20)
cc(brought-3, but-21)
nsubj(part-24, it-22)
cop(part-24, 's-23)
conj:but(brought-3, part-24)
case(package-28, of-25)
det(package-28, the-26)
amod(package-28, same-27)
nmod:of(part-24, package-28)
punct(brought-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#he

strike :: At hearing this morning before a Delaware chancery court judge , Doskocil is expected to ask the court to strike down Wilson 's `` poison pill '' anti-takeover measures , saying an auction for the company has continued for a sufficient time to allow all bidders to emerge ./.
mark(hearing-2, At-1)
advcl(expected-14, hearing-2)
det(morning-4, this-3)
nmod:tmod(hearing-2, morning-4)
case(judge-10, before-5)
det(judge-10, a-6)
compound(judge-10, Delaware-7)
compound(judge-10, chancery-8)
compound(judge-10, court-9)
nmod:before(hearing-2, judge-10)
punct(expected-14, ,-11)
nsubjpass(expected-14, Doskocil-12)
nsubj:xsubj(ask-16, Doskocil-12)
auxpass(expected-14, is-13)
root(ROOT-0, expected-14)
mark(ask-16, to-15)
xcomp(expected-14, ask-16)
det(court-18, the-17)
dobj(ask-16, court-18)
nsubj:xsubj(strike-20, court-18)
mark(strike-20, to-19)
xcomp(ask-16, strike-20)
compound:prt(strike-20, down-21)
nmod:poss(pill-26, Wilson-22)
case(Wilson-22, 's-23)
punct(pill-26, ``-24)
compound(pill-26, poison-25)
dobj(strike-20, pill-26)
punct(pill-26, ''-27)
amod(measures-29, anti-takeover-28)
dobj(pill-26, measures-29)
punct(expected-14, ,-30)
xcomp(expected-14, saying-31)
det(auction-33, an-32)
nsubj(continued-38, auction-33)
case(company-36, for-34)
det(company-36, the-35)
nmod:for(auction-33, company-36)
aux(continued-38, has-37)
ccomp(saying-31, continued-38)
case(time-42, for-39)
det(time-42, a-40)
amod(time-42, sufficient-41)
nmod:for(continued-38, time-42)
mark(allow-44, to-43)
acl(time-42, allow-44)
det(bidders-46, all-45)
dobj(allow-44, bidders-46)
nsubj:xsubj(emerge-48, bidders-46)
mark(emerge-48, to-47)
xcomp(allow-44, emerge-48)
punct(expected-14, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#pill

strike :: In one illustrative case , they voted to strike down a state statute denying public funds for abortions under a provision they found `` implicit '' in the Massachusetts constitution ./.
case(case-4, In-1)
nummod(case-4, one-2)
amod(case-4, illustrative-3)
nmod:in(voted-7, case-4)
punct(voted-7, ,-5)
nsubj(voted-7, they-6)
nsubj:xsubj(strike-9, they-6)
root(ROOT-0, voted-7)
mark(strike-9, to-8)
xcomp(voted-7, strike-9)
compound:prt(strike-9, down-10)
det(statute-13, a-11)
compound(statute-13, state-12)
dobj(strike-9, statute-13)
acl(statute-13, denying-14)
amod(funds-16, public-15)
dobj(denying-14, funds-16)
case(abortions-18, for-17)
nmod:for(funds-16, abortions-18)
case(provision-21, under-19)
det(provision-21, a-20)
nmod:under(denying-14, provision-21)
nsubj(found-23, they-22)
acl:relcl(provision-21, found-23)
punct(found-23, ``-24)
xcomp(found-23, implicit-25)
punct(found-23, ''-26)
case(constitution-30, in-27)
det(constitution-30, the-28)
compound(constitution-30, Massachusetts-29)
nmod:in(found-23, constitution-30)
punct(voted-7, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#statute

strike :: Like a regretful compulsive thief , Judge Neely begs to be stopped before he strikes again ./.
case(thief-5, Like-1)
det(thief-5, a-2)
amod(thief-5, regretful-3)
amod(thief-5, compulsive-4)
nmod:like(begs-9, thief-5)
punct(begs-9, ,-6)
compound(Neely-8, Judge-7)
nsubj(begs-9, Neely-8)
nsubjpass:xsubj(stopped-12, Neely-8)
root(ROOT-0, begs-9)
mark(stopped-12, to-10)
auxpass(stopped-12, be-11)
xcomp(begs-9, stopped-12)
mark(strikes-15, before-13)
nsubj(strikes-15, he-14)
advcl(stopped-12, strikes-15)
advmod(strikes-15, again-16)
punct(begs-9, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#he

strike :: While workers struck three plants , the company locked out about 1 , 200 workers at a fourth plant , in Mobile , Ala ./.
mark(struck-3, While-1)
nsubj(struck-3, workers-2)
advcl(locked-9, struck-3)
nummod(plants-5, three-4)
dobj(struck-3, plants-5)
punct(locked-9, ,-6)
det(company-8, the-7)
nsubj(locked-9, company-8)
root(ROOT-0, locked-9)
compound:prt(locked-9, out-10)
advmod(1-12, about-11)
dobj(locked-9, 1-12)
punct(1-12, ,-13)
nummod(workers-15, 200-14)
appos(1-12, workers-15)
case(plant-19, at-16)
det(plant-19, a-17)
amod(plant-19, fourth-18)
nmod:at(workers-15, plant-19)
punct(1-12, ,-20)
case(Mobile-22, in-21)
nmod:in(locked-9, Mobile-22)
punct(Mobile-22, ,-23)
appos(Mobile-22, Ala-24)
punct(locked-9, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#plants

strike :: Specifically , they contend the Soviet leadership would be less likely to risk an all-out war if their most protected command posts could be struck ./.
advmod(contend-4, Specifically-1)
punct(contend-4, ,-2)
nsubj(contend-4, they-3)
root(ROOT-0, contend-4)
det(leadership-7, the-5)
amod(leadership-7, Soviet-6)
nsubj(likely-11, leadership-7)
nsubj:xsubj(risk-13, leadership-7)
aux(likely-11, would-8)
cop(likely-11, be-9)
advmod(likely-11, less-10)
ccomp(contend-4, likely-11)
mark(risk-13, to-12)
xcomp(likely-11, risk-13)
det(war-16, an-14)
amod(war-16, all-out-15)
dobj(risk-13, war-16)
mark(struck-25, if-17)
nmod:poss(posts-22, their-18)
advmod(protected-20, most-19)
amod(posts-22, protected-20)
compound(posts-22, command-21)
nsubjpass(struck-25, posts-22)
aux(struck-25, could-23)
auxpass(struck-25, be-24)
advcl(likely-11, struck-25)
punct(contend-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#posts

strike :: Where will he strike next ?/.
advmod(strike-4, Where-1)
aux(strike-4, will-2)
nsubj(strike-4, he-3)
root(ROOT-0, strike-4)
advmod(strike-4, next-5)
punct(strike-4, ?-6)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#he

strike :: It cuts the workweek to 44 hours from 48 , guarantees a 50 % bonus for all overtime , grants unlimited right to strike , introduces maternity leave of 120 days , suggests paternity leave of five days , and provides new legal protection against arbitrary dismissal ./.
nsubj(cuts-2, It-1)
nsubj(guarantees-11, It-1)
nsubj(introduces-26, It-1)
nsubj(suggests-33, It-1)
nsubj(provides-41, It-1)
root(ROOT-0, cuts-2)
det(workweek-4, the-3)
dobj(cuts-2, workweek-4)
case(hours-7, to-5)
nummod(hours-7, 44-6)
nmod:to(cuts-2, hours-7)
case(48-9, from-8)
nmod:from(cuts-2, 48-9)
punct(cuts-2, ,-10)
conj:and(cuts-2, guarantees-11)
det(bonus-15, a-12)
compound(%-14, 50-13)
amod(bonus-15, %-14)
dobj(guarantees-11, bonus-15)
case(overtime-18, for-16)
det(overtime-18, all-17)
nmod:for(guarantees-11, overtime-18)
punct(cuts-2, ,-19)
conj:and(cuts-2, grants-20)
amod(right-22, unlimited-21)
dobj(grants-20, right-22)
mark(strike-24, to-23)
acl(right-22, strike-24)
punct(cuts-2, ,-25)
conj:and(cuts-2, introduces-26)
compound(leave-28, maternity-27)
dobj(introduces-26, leave-28)
case(days-31, of-29)
nummod(days-31, 120-30)
nmod:of(leave-28, days-31)
punct(cuts-2, ,-32)
conj:and(cuts-2, suggests-33)
compound(leave-35, paternity-34)
dobj(suggests-33, leave-35)
case(days-38, of-36)
nummod(days-38, five-37)
nmod:of(leave-35, days-38)
punct(cuts-2, ,-39)
cc(cuts-2, and-40)
conj:and(cuts-2, provides-41)
amod(protection-44, new-42)
amod(protection-44, legal-43)
dobj(provides-41, protection-44)
case(dismissal-47, against-45)
amod(dismissal-47, arbitrary-46)
nmod:against(protection-44, dismissal-47)
punct(cuts-2, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

strike :: The agreement between the Bank Board and Bass group also represents a defeat for Ford Motor Co . , which has for more than a year been trying to strike a deal with the Bank Board to acquire American Savings ./.
det(agreement-2, The-1)
nsubj(represents-11, agreement-2)
case(Board-6, between-3)
det(Board-6, the-4)
compound(Board-6, Bank-5)
nmod:between(agreement-2, Board-6)
cc(Board-6, and-7)
compound(group-9, Bass-8)
nmod:between(agreement-2, group-9)
conj:and(Board-6, group-9)
advmod(represents-11, also-10)
root(ROOT-0, represents-11)
det(defeat-13, a-12)
dobj(represents-11, defeat-13)
case(Co-17, for-14)
compound(Co-17, Ford-15)
compound(Co-17, Motor-16)
nmod:for(defeat-13, Co-17)
punct(represents-11, .-18)
punct(has-3, ,-1)
nsubj(has-3, which-2)
root(ROOT-0, has-3)
case(year-8, for-4)
advmod(a-7, more-5)
mwe(more-5, than-6)
nummod(year-8, a-7)
nmod:for(trying-10, year-8)
aux(trying-10, been-9)
ccomp(has-3, trying-10)
mark(strike-12, to-11)
xcomp(trying-10, strike-12)
det(deal-14, a-13)
dobj(strike-12, deal-14)
case(Board-18, with-15)
det(Board-18, the-16)
compound(Board-18, Bank-17)
nmod:with(strike-12, Board-18)
mark(acquire-20, to-19)
advcl(strike-12, acquire-20)
compound(Savings-22, American-21)
dobj(acquire-20, Savings-22)
punct(has-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#deal

strike :: `` Activity will pick up a little bit more once investors become a little bit more confident that we 've struck a trading range bottom , which I believe we have done . ''/''
root(ROOT-0, ``-1)
nsubj(pick-4, Activity-2)
aux(pick-4, will-3)
root(``-1, pick-4)
compound:prt(pick-4, up-5)
det(bit-8, a-6)
amod(bit-8, little-7)
nmod:npmod(more-9, bit-8)
advmod(become-12, more-9)
mark(become-12, once-10)
nsubj(become-12, investors-11)
advcl(pick-4, become-12)
det(bit-15, a-13)
amod(bit-15, little-14)
dep(confident-17, bit-15)
advmod(confident-17, more-16)
xcomp(become-12, confident-17)
mark(struck-21, that-18)
nsubj(struck-21, we-19)
aux(struck-21, 've-20)
ccomp(confident-17, struck-21)
det(bottom-25, a-22)
compound(bottom-25, trading-23)
compound(bottom-25, range-24)
dobj(struck-21, bottom-25)
dobj(believe-29, bottom-25)
punct(bottom-25, ,-26)
ref(bottom-25, which-27)
nsubj(believe-29, I-28)
acl:relcl(bottom-25, believe-29)
nsubj(done-32, we-30)
aux(done-32, have-31)
ccomp(believe-29, done-32)
punct(pick-4, .-33)
punct(pick-4, ''-34)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: strike#bottom

strike :: It struck down the comptroller 's conclusion that the Bank Holding Company Act did n't apply ./.
nsubj(struck-2, It-1)
root(ROOT-0, struck-2)
compound:prt(struck-2, down-3)
det(comptroller-5, the-4)
nmod:poss(conclusion-7, comptroller-5)
case(comptroller-5, 's-6)
dobj(struck-2, conclusion-7)
mark(apply-16, that-8)
det(Act-13, the-9)
compound(Act-13, Bank-10)
amod(Act-13, Holding-11)
compound(Act-13, Company-12)
nsubj(apply-16, Act-13)
aux(apply-16, did-14)
neg(apply-16, n't-15)
ccomp(conclusion-7, apply-16)
punct(struck-2, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#conclusion

strike :: French entrepreneurs dish out pretty much the same fare that their U.S. counterparts provide: `` gab '' lines that dozens of people can dial to converse in language as off-color as strikes their fancy ; private lines for one-on-one dirty talking ; and prerecorded sex chatter ./.
amod(entrepreneurs-2, French-1)
nsubj(dish-3, entrepreneurs-2)
root(ROOT-0, dish-3)
compound:prt(dish-3, out-4)
advmod(much-6, pretty-5)
advmod(fare-9, much-6)
det(fare-9, the-7)
amod(fare-9, same-8)
dobj(dish-3, fare-9)
dobj(provide-14, fare-9)
ref(fare-9, that-10)
nmod:poss(counterparts-13, their-11)
compound(counterparts-13, U.S.-12)
nsubj(provide-14, counterparts-13)
acl:relcl(fare-9, provide-14)
punct(fare-9, :-15)
punct(lines-19, ``-16)
compound(lines-19, gab-17)
punct(lines-19, ''-18)
dep(fare-9, lines-19)
dobj(dial-25, lines-19)
nsubj:xsubj(converse-27, lines-19)
ref(lines-19, that-20)
nsubj(dial-25, dozens-21)
case(people-23, of-22)
nmod:of(dozens-21, people-23)
aux(dial-25, can-24)
acl:relcl(lines-19, dial-25)
mark(converse-27, to-26)
xcomp(dial-25, converse-27)
case(language-29, in-28)
nmod:in(converse-27, language-29)
advmod(off-color-31, as-30)
nmod(converse-27, off-color-31)
case(strikes-33, as-32)
nmod:as(off-color-31, strikes-33)
nmod:poss(fancy-35, their-34)
dep(strikes-33, fancy-35)
punct(off-color-31, ;-36)
amod(lines-38, private-37)
nmod(converse-27, lines-38)
conj:and(off-color-31, lines-38)
case(talking-42, for-39)
amod(talking-42, one-on-one-40)
amod(talking-42, dirty-41)
nmod:for(lines-38, talking-42)
punct(off-color-31, ;-43)
cc(off-color-31, and-44)
amod(chatter-47, prerecorded-45)
compound(chatter-47, sex-46)
nmod(converse-27, chatter-47)
conj:and(off-color-31, chatter-47)
punct(dish-3, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

strike :: Sometimes it struck without warning ./.
advmod(struck-3, Sometimes-1)
nsubj(struck-3, it-2)
root(ROOT-0, struck-3)
case(warning-5, without-4)
nmod:without(struck-3, warning-5)
punct(struck-3, .-6)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#it

strike :: They claim that colon cancer , which strikes more than 100 , 000 Americans a year , occurs only in people who inherit a particular gene from their parents that predisposes them to the cancer ./.
nsubj(claim-2, They-1)
root(ROOT-0, claim-2)
mark(occurs-18, that-3)
compound(cancer-5, colon-4)
nsubj(strikes-8, cancer-5)
nsubj(occurs-18, cancer-5)
punct(cancer-5, ,-6)
ref(cancer-5, which-7)
acl:relcl(cancer-5, strikes-8)
advmod(100-11, more-9)
mwe(more-9, than-10)
dobj(strikes-8, 100-11)
punct(100-11, ,-12)
nummod(Americans-14, 000-13)
appos(100-11, Americans-14)
det(year-16, a-15)
nmod:npmod(Americans-14, year-16)
punct(100-11, ,-17)
ccomp(claim-2, occurs-18)
advmod(people-21, only-19)
case(people-21, in-20)
nmod:in(occurs-18, people-21)
nsubj(inherit-23, people-21)
ref(people-21, who-22)
acl:relcl(people-21, inherit-23)
det(gene-26, a-24)
amod(gene-26, particular-25)
dobj(inherit-23, gene-26)
case(parents-29, from-27)
nmod:poss(parents-29, their-28)
nmod:from(inherit-23, parents-29)
nsubj(predisposes-31, parents-29)
ref(parents-29, that-30)
acl:relcl(parents-29, predisposes-31)
dobj(predisposes-31, them-32)
case(cancer-35, to-33)
det(cancer-35, the-34)
nmod:to(predisposes-31, cancer-35)
punct(claim-2, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#100

strike :: The union struck car haulers over a 1985 contract , but locals do n't want to strike this time , largely because the action is seen as having little clout while auto makers are closed for model changeover ./.
det(union-2, The-1)
nsubj(struck-3, union-2)
root(ROOT-0, struck-3)
compound(haulers-5, car-4)
dobj(struck-3, haulers-5)
case(contract-9, over-6)
det(contract-9, a-7)
nummod(contract-9, 1985-8)
nmod:over(struck-3, contract-9)
punct(struck-3, ,-10)
cc(struck-3, but-11)
nsubj(want-15, locals-12)
nsubj:xsubj(strike-17, locals-12)
aux(want-15, do-13)
neg(want-15, n't-14)
conj:but(struck-3, want-15)
mark(strike-17, to-16)
xcomp(want-15, strike-17)
det(time-19, this-18)
nmod:tmod(strike-17, time-19)
punct(want-15, ,-20)
advmod(seen-26, largely-21)
mark(seen-26, because-22)
det(action-24, the-23)
nsubjpass(seen-26, action-24)
auxpass(seen-26, is-25)
advcl(want-15, seen-26)
mark(having-28, as-27)
advcl(seen-26, having-28)
amod(clout-30, little-29)
dobj(having-28, clout-30)
mark(closed-35, while-31)
compound(makers-33, auto-32)
nsubjpass(closed-35, makers-33)
auxpass(closed-35, are-34)
advcl(having-28, closed-35)
case(changeover-38, for-36)
compound(changeover-38, model-37)
nmod:for(closed-35, changeover-38)
punct(struck-3, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#haulers

strike :: In reading these profiles one is struck by how often associates and political supporters of the Governor express ambivalent or even negative attitudes toward him personally ./.
mark(reading-2, In-1)
root(ROOT-0, reading-2)
det(profiles-4, these-3)
dobj(reading-2, profiles-4)
nsubjpass(struck-7, one-5)
auxpass(struck-7, is-6)
ccomp(reading-2, struck-7)
mark(express-18, by-8)
advmod(often-10, how-9)
advmod(express-18, often-10)
nsubj(express-18, associates-11)
cc(associates-11, and-12)
amod(supporters-14, political-13)
conj:and(associates-11, supporters-14)
nsubj(express-18, supporters-14)
case(Governor-17, of-15)
det(Governor-17, the-16)
nmod:of(associates-11, Governor-17)
advcl(struck-7, express-18)
amod(attitudes-23, ambivalent-19)
cc(ambivalent-19, or-20)
advmod(negative-22, even-21)
conj:or(ambivalent-19, negative-22)
amod(attitudes-23, negative-22)
dobj(express-18, attitudes-23)
case(him-25, toward-24)
nmod:toward(attitudes-23, him-25)
advmod(express-18, personally-26)
punct(reading-2, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#one

strike :: In the end , Mr. Dukakis 's cool reserve may strike some voters as a kind of necessary political toughness or as a liability for such high office ./.
case(end-3, In-1)
det(end-3, the-2)
nmod:in(strike-11, end-3)
punct(strike-11, ,-4)
compound(Dukakis-6, Mr.-5)
nmod:poss(reserve-9, Dukakis-6)
case(Dukakis-6, 's-7)
amod(reserve-9, cool-8)
nsubj(strike-11, reserve-9)
nsubj(strike-11', reserve-9)
aux(strike-11, may-10)
root(ROOT-0, strike-11)
conj:or(strike-11, strike-11')
det(voters-13, some-12)
dobj(strike-11, voters-13)
case(kind-16, as-14)
det(kind-16, a-15)
nmod:as(strike-11, kind-16)
case(toughness-20, of-17)
amod(toughness-20, necessary-18)
amod(toughness-20, political-19)
nmod:of(kind-16, toughness-20)
cc(strike-11, or-21)
case(liability-24, as-22)
det(liability-24, a-23)
nmod:as(strike-11', liability-24)
case(office-28, for-25)
amod(office-28, such-26)
amod(office-28, high-27)
nmod:for(liability-24, office-28)
punct(strike-11, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#voters

strike :: In the letter , Tom Matthews , Eastern 's senior vice president of human resources , asked the mediation board to begin a 30-day countdown after which the machinists union would be free to strike -- and Eastern free to impose unilaterally the cost -- saving contract that it wants ./.
case(letter-3, In-1)
det(letter-3, the-2)
nmod:in(asked-17, letter-3)
punct(asked-17, ,-4)
compound(Matthews-6, Tom-5)
nsubj(asked-17, Matthews-6)
punct(Matthews-6, ,-7)
nmod:poss(president-12, Eastern-8)
case(Eastern-8, 's-9)
amod(president-12, senior-10)
compound(president-12, vice-11)
appos(Matthews-6, president-12)
case(resources-15, of-13)
amod(resources-15, human-14)
nmod:of(president-12, resources-15)
punct(Matthews-6, ,-16)
root(ROOT-0, asked-17)
det(board-20, the-18)
compound(board-20, mediation-19)
dobj(asked-17, board-20)
nsubj:xsubj(begin-22, board-20)
mark(begin-22, to-21)
xcomp(asked-17, begin-22)
det(countdown-25, a-23)
amod(countdown-25, 30-day-24)
dobj(begin-22, countdown-25)
nmod:after(free-33, countdown-25)
case(which-27, after-26)
ref(countdown-25, which-27)
det(union-30, the-28)
compound(union-30, machinists-29)
nsubj(free-33, union-30)
nsubj:xsubj(strike-35, union-30)
aux(free-33, would-31)
cop(free-33, be-32)
acl:relcl(countdown-25, free-33)
mark(strike-35, to-34)
xcomp(free-33, strike-35)
punct(countdown-25, ---36)
cc(countdown-25, and-37)
compound(free-39, Eastern-38)
dobj(begin-22, free-39)
conj:and(countdown-25, free-39)
nmod:after(free-33, free-39)
mark(impose-41, to-40)
acl(free-39, impose-41)
advmod(impose-41, unilaterally-42)
det(cost-44, the-43)
dobj(impose-41, cost-44)
punct(begin-22, ---45)
advcl(begin-22, saving-46)
dobj(saving-46, contract-47)
dobj(wants-50, contract-47)
ref(contract-47, that-48)
nsubj(wants-50, it-49)
acl:relcl(contract-47, wants-50)
punct(asked-17, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#union

strike :: Grosz and Ceausescu paper over their differences , the U.S. and Romania patching up their trade dispute , or Bucharest succeeding , as Budapest has , in striking a commercial bargain with the European Community ./.
compound(paper-4, Grosz-1)
cc(Grosz-1, and-2)
conj:and(Grosz-1, Ceausescu-3)
compound(paper-4, Ceausescu-3)
root(ROOT-0, paper-4)
case(differences-7, over-5)
nmod:poss(differences-7, their-6)
nmod:over(paper-4, differences-7)
punct(paper-4, ,-8)
det(U.S.-10, the-9)
nsubj(patching-13, U.S.-10)
cc(U.S.-10, and-11)
conj:and(U.S.-10, Romania-12)
nsubj(patching-13, Romania-12)
acl:relcl(paper-4, patching-13)
compound:prt(patching-13, up-14)
nmod:poss(dispute-17, their-15)
compound(dispute-17, trade-16)
dobj(patching-13, dispute-17)
punct(patching-13, ,-18)
cc(patching-13, or-19)
nsubj(succeeding-21, Bucharest-20)
acl:relcl(paper-4, succeeding-21)
conj:or(patching-13, succeeding-21)
punct(succeeding-21, ,-22)
mark(has-25, as-23)
nsubj(has-25, Budapest-24)
advcl(succeeding-21, has-25)
punct(has-25, ,-26)
mark(striking-28, in-27)
advcl(has-25, striking-28)
det(bargain-31, a-29)
amod(bargain-31, commercial-30)
dobj(striking-28, bargain-31)
case(Community-35, with-32)
det(Community-35, the-33)
compound(Community-35, European-34)
nmod:with(striking-28, Community-35)
punct(paper-4, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#bargain

strike :: Over the years , however , South Africa 's presence in Angola became an integral part of its strategy to repel the total onslaught by keeping communism at bay in Angola and striking at the nests of the ANC , which does much of its military training there ./.
case(years-3, Over-1)
det(years-3, the-2)
nmod:over(became-13, years-3)
punct(became-13, ,-4)
advmod(became-13, however-5)
punct(became-13, ,-6)
compound(Africa-8, South-7)
nmod:poss(presence-10, Africa-8)
case(Africa-8, 's-9)
nsubj(became-13, presence-10)
case(Angola-12, in-11)
nmod:in(presence-10, Angola-12)
root(ROOT-0, became-13)
det(part-16, an-14)
amod(part-16, integral-15)
xcomp(became-13, part-16)
case(strategy-19, of-17)
nmod:poss(strategy-19, its-18)
nmod:of(part-16, strategy-19)
mark(repel-21, to-20)
acl(strategy-19, repel-21)
det(onslaught-24, the-22)
amod(onslaught-24, total-23)
dobj(repel-21, onslaught-24)
mark(keeping-26, by-25)
advcl(repel-21, keeping-26)
dobj(keeping-26, communism-27)
case(bay-29, at-28)
nmod:at(keeping-26, bay-29)
case(Angola-31, in-30)
nmod:in(keeping-26, Angola-31)
cc(Angola-31, and-32)
nmod:in(keeping-26, striking-33)
conj:and(Angola-31, striking-33)
case(nests-36, at-34)
det(nests-36, the-35)
nmod:at(keeping-26, nests-36)
case(ANC-39, of-37)
det(ANC-39, the-38)
nmod:of(nests-36, ANC-39)
nsubj(does-42, ANC-39)
punct(ANC-39, ,-40)
ref(ANC-39, which-41)
acl:relcl(ANC-39, does-42)
dobj(does-42, much-43)
case(training-47, of-44)
nmod:poss(training-47, its-45)
amod(training-47, military-46)
nmod:of(much-43, training-47)
advmod(does-42, there-48)
punct(became-13, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

strike :: Yesterday its planes struck a nuclear-power plant and industrial targets near the Persian Gulf coast city of Bushehr and raided Khuzestan ./.
nmod:tmod(struck-4, Yesterday-1)
nmod:poss(planes-3, its-2)
nsubj(struck-4, planes-3)
nsubj(raided-20, planes-3)
root(ROOT-0, struck-4)
det(plant-7, a-5)
amod(plant-7, nuclear-power-6)
dobj(struck-4, plant-7)
cc(plant-7, and-8)
amod(targets-10, industrial-9)
dobj(struck-4, targets-10)
conj:and(plant-7, targets-10)
case(city-16, near-11)
det(city-16, the-12)
compound(city-16, Persian-13)
compound(city-16, Gulf-14)
compound(city-16, coast-15)
nmod:near(plant-7, city-16)
case(Bushehr-18, of-17)
nmod:of(city-16, Bushehr-18)
cc(struck-4, and-19)
conj:and(struck-4, raided-20)
dobj(raided-20, Khuzestan-21)
punct(struck-4, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#plant

strike :: But they did say the coins would be struck in four sizes: one ounce , one-half ounce , one-quarter ounce and one-tenth of an ounce ./.
cc(say-4, But-1)
nsubj(say-4, they-2)
aux(say-4, did-3)
root(ROOT-0, say-4)
det(coins-6, the-5)
nsubjpass(struck-9, coins-6)
aux(struck-9, would-7)
auxpass(struck-9, be-8)
ccomp(say-4, struck-9)
case(sizes-12, in-10)
nummod(sizes-12, four-11)
nmod:in(struck-9, sizes-12)
punct(say-4, :-13)
nummod(ounce-15, one-14)
dep(say-4, ounce-15)
punct(ounce-15, ,-16)
compound(ounce-18, one-half-17)
dep(say-4, ounce-18)
conj:and(ounce-15, ounce-18)
punct(ounce-15, ,-19)
compound(ounce-21, one-quarter-20)
dep(say-4, ounce-21)
conj:and(ounce-15, ounce-21)
cc(ounce-15, and-22)
dep(say-4, one-tenth-23)
conj:and(ounce-15, one-tenth-23)
case(ounce-26, of-24)
det(ounce-26, an-25)
nmod:of(one-tenth-23, ounce-26)
punct(say-4, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#coins

strike :: The company said in mid-June that about 2 , 000 workers were striking six distribution centers in a dispute over wages and benefits ./.
det(company-2, The-1)
nsubj(said-3, company-2)
root(ROOT-0, said-3)
case(mid-June-5, in-4)
nmod:in(said-3, mid-June-5)
mark(striking-13, that-6)
advmod(2-8, about-7)
nmod(striking-13, 2-8)
punct(striking-13, ,-9)
nummod(workers-11, 000-10)
nsubj(striking-13, workers-11)
cop(striking-13, were-12)
ccomp(said-3, striking-13)
nummod(centers-16, six-14)
compound(centers-16, distribution-15)
dobj(striking-13, centers-16)
case(dispute-19, in-17)
det(dispute-19, a-18)
nmod:in(centers-16, dispute-19)
case(wages-21, over-20)
nmod:over(dispute-19, wages-21)
cc(wages-21, and-22)
nmod:over(dispute-19, benefits-23)
conj:and(wages-21, benefits-23)
punct(said-3, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#centers

strike :: The `` no '' vote plan struck pay dirt because it provided an opportunity for a massive , secret protest vote against Gen. Pinochet , especially from Chile 's sizable and disaffected middle class ./.
det(plan-6, The-1)
punct(plan-6, ``-2)
neg(plan-6, no-3)
punct(plan-6, ''-4)
compound(plan-6, vote-5)
nsubj(struck-7, plan-6)
root(ROOT-0, struck-7)
compound(dirt-9, pay-8)
dobj(struck-7, dirt-9)
mark(provided-12, because-10)
nsubj(provided-12, it-11)
advcl(struck-7, provided-12)
det(opportunity-14, an-13)
dobj(provided-12, opportunity-14)
case(vote-21, for-15)
det(vote-21, a-16)
amod(vote-21, massive-17)
punct(vote-21, ,-18)
amod(vote-21, secret-19)
compound(vote-21, protest-20)
nmod:for(opportunity-14, vote-21)
case(Pinochet-24, against-22)
compound(Pinochet-24, Gen.-23)
nmod:against(vote-21, Pinochet-24)
punct(vote-21, ,-25)
advmod(class-34, especially-26)
case(class-34, from-27)
nmod:poss(class-34, Chile-28)
case(Chile-28, 's-29)
amod(class-34, sizable-30)
cc(sizable-30, and-31)
conj:and(sizable-30, disaffected-32)
amod(class-34, disaffected-32)
amod(class-34, middle-33)
nmod:from(vote-21, class-34)
punct(struck-7, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#dirt

strike :: If Intelsat Director General Dean Burch ca n't strike a deal with Ford Aerospace and its major partners , Alcatel Espace of France and Mitsubishi Electric Co. of Japan , he will negotiate with a French aerospace company , Matra , an Intelsat spokesman said ./.
mark(strike-9, If-1)
compound(Burch-6, Intelsat-2)
compound(Burch-6, Director-3)
compound(Burch-6, General-4)
compound(Burch-6, Dean-5)
nsubj(strike-9, Burch-6)
aux(strike-9, ca-7)
neg(strike-9, n't-8)
advcl(negotiate-33, strike-9)
det(deal-11, a-10)
dobj(strike-9, deal-11)
case(Aerospace-14, with-12)
compound(Aerospace-14, Ford-13)
nmod:with(strike-9, Aerospace-14)
cc(Aerospace-14, and-15)
nmod:poss(partners-18, its-16)
amod(partners-18, major-17)
nmod:with(strike-9, partners-18)
conj:and(Aerospace-14, partners-18)
punct(partners-18, ,-19)
compound(Espace-21, Alcatel-20)
appos(partners-18, Espace-21)
case(France-23, of-22)
nmod:of(Espace-21, France-23)
cc(Espace-21, and-24)
compound(Co.-27, Mitsubishi-25)
compound(Co.-27, Electric-26)
appos(partners-18, Co.-27)
conj:and(Espace-21, Co.-27)
case(Japan-29, of-28)
nmod:of(Co.-27, Japan-29)
punct(partners-18, ,-30)
nsubj(negotiate-33, he-31)
aux(negotiate-33, will-32)
root(ROOT-0, negotiate-33)
case(company-38, with-34)
det(company-38, a-35)
amod(company-38, French-36)
compound(company-38, aerospace-37)
nmod:with(negotiate-33, company-38)
punct(company-38, ,-39)
appos(company-38, Matra-40)
punct(company-38, ,-41)
det(spokesman-44, an-42)
compound(spokesman-44, Intelsat-43)
nsubj(said-45, spokesman-44)
acl:relcl(company-38, said-45)
punct(negotiate-33, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#deal

strike :: A steep falloff in U.S. oats production `` strikes terror in our hearts , '' says a commodity buyer for Quaker Oats Co ./.
det(falloff-3, A-1)
amod(falloff-3, steep-2)
nsubj(strikes-9, falloff-3)
case(production-7, in-4)
compound(production-7, U.S.-5)
compound(production-7, oats-6)
nmod:in(falloff-3, production-7)
punct(strikes-9, ``-8)
ccomp(says-16, strikes-9)
dobj(strikes-9, terror-10)
case(hearts-13, in-11)
nmod:poss(hearts-13, our-12)
nmod:in(strikes-9, hearts-13)
punct(says-16, ,-14)
punct(says-16, ''-15)
root(ROOT-0, says-16)
det(buyer-19, a-17)
compound(buyer-19, commodity-18)
nsubj(says-16, buyer-19)
case(Co-23, for-20)
compound(Co-23, Quaker-21)
compound(Co-23, Oats-22)
nmod:for(buyer-19, Co-23)
punct(says-16, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#terror

strike :: Phalanx can be overwhelmed when a ship is attacked by several missiles at once -LRB- the Stark was struck by two Exocets -RRB- ./.
nsubjpass(overwhelmed-4, Phalanx-1)
aux(overwhelmed-4, can-2)
auxpass(overwhelmed-4, be-3)
root(ROOT-0, overwhelmed-4)
advmod(attacked-9, when-5)
det(ship-7, a-6)
nsubjpass(attacked-9, ship-7)
auxpass(attacked-9, is-8)
advcl(overwhelmed-4, attacked-9)
case(missiles-12, by-10)
amod(missiles-12, several-11)
nmod:agent(attacked-9, missiles-12)
case(once-14, at-13)
nmod:at(attacked-9, once-14)
punct(struck-19, -LRB--15)
det(Stark-17, the-16)
nsubjpass(struck-19, Stark-17)
auxpass(struck-19, was-18)
dep(once-14, struck-19)
case(Exocets-22, by-20)
nummod(Exocets-22, two-21)
nmod:agent(struck-19, Exocets-22)
punct(struck-19, -RRB--23)
punct(overwhelmed-4, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#stark

strike :: But far from being cowed , Palestinians are using what little leverage they have to strike back ./.
cc(using-9, But-1)
advmod(using-9, far-2)
mark(cowed-5, from-3)
auxpass(cowed-5, being-4)
advcl(far-2, cowed-5)
punct(using-9, ,-6)
nsubj(using-9, Palestinians-7)
aux(using-9, are-8)
root(ROOT-0, using-9)
det(leverage-12, what-10)
amod(leverage-12, little-11)
dobj(have-14, leverage-12)
nsubj:xsubj(strike-16, leverage-12)
nsubj(have-14, they-13)
ccomp(using-9, have-14)
mark(strike-16, to-15)
xcomp(have-14, strike-16)
advmod(strike-16, back-17)
punct(using-9, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#leverage

strike :: In 1925 , Congress said that the Supreme Court has discretion to refuse to hear cases , except when a state supreme court strikes down a federal law or upholds a state law that was challenged as violating the Constitution , or when a federal appeals court strikes down a state law or a federal appeals or district court strikes down a federal law , all on constitutional grounds ./.
case(1925-2, In-1)
nmod:in(said-5, 1925-2)
punct(said-5, ,-3)
nsubj(said-5, Congress-4)
root(ROOT-0, said-5)
mark(has-10, that-6)
det(Court-9, the-7)
compound(Court-9, Supreme-8)
nsubj(has-10, Court-9)
ccomp(said-5, has-10)
dobj(has-10, discretion-11)
mark(refuse-13, to-12)
acl(discretion-11, refuse-13)
mark(hear-15, to-14)
xcomp(refuse-13, hear-15)
dobj(hear-15, cases-16)
punct(has-10, ,-17)
mark(strikes-24, except-18)
advmod(strikes-24, when-19)
det(court-23, a-20)
compound(court-23, state-21)
compound(court-23, supreme-22)
nsubj(strikes-24, court-23)
nsubj(upholds-30, court-23)
advcl(has-10, strikes-24)
compound:prt(strikes-24, down-25)
det(law-28, a-26)
amod(law-28, federal-27)
dobj(strikes-24, law-28)
cc(strikes-24, or-29)
advcl(has-10, upholds-30)
conj:or(strikes-24, upholds-30)
det(law-33, a-31)
compound(law-33, state-32)
dobj(upholds-30, law-33)
nsubjpass(challenged-36, law-33)
ref(law-33, that-34)
auxpass(challenged-36, was-35)
acl:relcl(law-33, challenged-36)
mark(violating-38, as-37)
advcl(challenged-36, violating-38)
det(Constitution-40, the-39)
dobj(violating-38, Constitution-40)
punct(has-10, ,-41)
cc(has-10, or-42)
advmod(strikes-48, when-43)
det(court-47, a-44)
amod(court-47, federal-45)
compound(court-47, appeals-46)
nsubj(strikes-48, court-47)
advcl(grounds-69, strikes-48)
compound:prt(strikes-48, down-49)
det(law-52, a-50)
compound(law-52, state-51)
nsubj(strikes-60, law-52)
cc(law-52, or-53)
det(appeals-56, a-54)
amod(appeals-56, federal-55)
conj:or(law-52, appeals-56)
nsubj(strikes-60, appeals-56)
cc(appeals-56, or-57)
compound(court-59, district-58)
conj:or(law-52, court-59)
conj:or(appeals-56, court-59)
ccomp(strikes-48, strikes-60)
compound:prt(strikes-60, down-61)
det(law-64, a-62)
amod(law-64, federal-63)
dobj(strikes-60, law-64)
punct(grounds-69, ,-65)
dep(grounds-69, all-66)
case(grounds-69, on-67)
amod(grounds-69, constitutional-68)
ccomp(said-5, grounds-69)
conj:or(has-10, grounds-69)
punct(said-5, .-70)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#law

strike :: A mergers and acquisitions expert close to the fight said that Bank of New York might have been able to strike a deal with Irving had it not rebuffed Irving 's recent overtures to come to the bargaining table ./.
det(mergers-2, A-1)
nsubj(said-10, mergers-2)
cc(mergers-2, and-3)
compound(expert-5, acquisitions-4)
conj:and(mergers-2, expert-5)
nsubj(said-10, expert-5)
case(fight-9, close-6)
mwe(close-6, to-7)
det(fight-9, the-8)
nmod:close_to(mergers-2, fight-9)
root(ROOT-0, said-10)
mark(able-19, that-11)
nsubj(able-19, Bank-12)
nsubj:xsubj(strike-21, Bank-12)
case(York-15, of-13)
compound(York-15, New-14)
nmod:of(Bank-12, York-15)
aux(able-19, might-16)
aux(able-19, have-17)
cop(able-19, been-18)
ccomp(said-10, able-19)
mark(strike-21, to-20)
xcomp(able-19, strike-21)
det(deal-23, a-22)
dobj(strike-21, deal-23)
case(Irving-25, with-24)
nmod:with(strike-21, Irving-25)
aux(rebuffed-29, had-26)
nsubj(rebuffed-29, it-27)
neg(rebuffed-29, not-28)
dep(able-19, rebuffed-29)
nmod:poss(overtures-33, Irving-30)
case(Irving-30, 's-31)
amod(overtures-33, recent-32)
dobj(rebuffed-29, overtures-33)
mark(come-35, to-34)
advcl(rebuffed-29, come-35)
case(table-39, to-36)
det(table-39, the-37)
compound(table-39, bargaining-38)
nmod:to(come-35, table-39)
punct(said-10, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#deal

strike :: What struck me most about the interview with Dr. Murphy was his challenge to Dr. Paul Leber , the FDA 's director of neuropharmalogical products , to look an Alzheimer 's patient in the eye and tell him that in his lifetime there will never be a cure ./.
nsubj(struck-2, What-1)
csubj(challenge-13, struck-2)
dobj(struck-2, me-3)
advmod(interview-7, most-4)
case(interview-7, about-5)
det(interview-7, the-6)
nmod:about(struck-2, interview-7)
case(Murphy-10, with-8)
compound(Murphy-10, Dr.-9)
nmod:with(interview-7, Murphy-10)
cop(challenge-13, was-11)
nmod:poss(challenge-13, his-12)
root(ROOT-0, challenge-13)
case(Leber-17, to-14)
compound(Leber-17, Dr.-15)
compound(Leber-17, Paul-16)
nmod:to(challenge-13, Leber-17)
punct(Leber-17, ,-18)
det(FDA-20, the-19)
nmod:poss(director-22, FDA-20)
case(FDA-20, 's-21)
appos(Leber-17, director-22)
case(products-25, of-23)
amod(products-25, neuropharmalogical-24)
nmod:of(director-22, products-25)
punct(Leber-17, ,-26)
mark(look-28, to-27)
acl(challenge-13, look-28)
det(Alzheimer-30, an-29)
nmod:poss(patient-32, Alzheimer-30)
case(Alzheimer-30, 's-31)
dobj(look-28, patient-32)
case(eye-35, in-33)
det(eye-35, the-34)
nmod:in(patient-32, eye-35)
cc(look-28, and-36)
acl(challenge-13, tell-37)
conj:and(look-28, tell-37)
dobj(tell-37, him-38)
mark(cure-48, that-39)
case(lifetime-42, in-40)
nmod:poss(lifetime-42, his-41)
nmod:in(cure-48, lifetime-42)
advmod(cure-48, there-43)
aux(cure-48, will-44)
neg(cure-48, never-45)
cop(cure-48, be-46)
det(cure-48, a-47)
ccomp(tell-37, cure-48)
punct(challenge-13, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#me

strike :: The labor pact with large trucking firms met a storm of protests from local leaders and the rank and file when it was tentatively struck last month ./.
det(pact-3, The-1)
compound(pact-3, labor-2)
nsubj(met-8, pact-3)
case(firms-7, with-4)
amod(firms-7, large-5)
compound(firms-7, trucking-6)
nmod:with(pact-3, firms-7)
root(ROOT-0, met-8)
det(storm-10, a-9)
dobj(met-8, storm-10)
case(protests-12, of-11)
nmod:of(storm-10, protests-12)
case(leaders-15, from-13)
amod(leaders-15, local-14)
nmod:from(protests-12, leaders-15)
cc(storm-10, and-16)
det(rank-18, the-17)
dobj(met-8, rank-18)
conj:and(storm-10, rank-18)
cc(rank-18, and-19)
conj:and(storm-10, file-20)
conj:and(rank-18, file-20)
advmod(struck-25, when-21)
nsubjpass(struck-25, it-22)
auxpass(struck-25, was-23)
advmod(struck-25, tentatively-24)
acl:relcl(rank-18, struck-25)
amod(month-27, last-26)
nmod:tmod(struck-25, month-27)
punct(met-8, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#it

strike :: Last year , its news writers division struck for six weeks ./.
amod(year-2, Last-1)
nmod:tmod(struck-8, year-2)
punct(struck-8, ,-3)
nmod:poss(division-7, its-4)
compound(division-7, news-5)
compound(division-7, writers-6)
nsubj(struck-8, division-7)
root(ROOT-0, struck-8)
case(weeks-11, for-9)
nummod(weeks-11, six-10)
nmod:for(struck-8, weeks-11)
punct(struck-8, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#division

strike :: POLISH LABOR UNREST SPREAD as thousands struck for higher wages ./.
amod(SPREAD-4, POLISH-1)
compound(SPREAD-4, LABOR-2)
compound(SPREAD-4, UNREST-3)
root(ROOT-0, SPREAD-4)
mark(struck-7, as-5)
nsubj(struck-7, thousands-6)
dep(SPREAD-4, struck-7)
case(wages-10, for-8)
amod(wages-10, higher-9)
nmod:for(struck-7, wages-10)
punct(SPREAD-4, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#thousands

strike :: His native caution strikes a responsive chord with the average German ./.
nmod:poss(caution-3, His-1)
amod(caution-3, native-2)
nsubj(strikes-4, caution-3)
root(ROOT-0, strikes-4)
det(chord-7, a-5)
amod(chord-7, responsive-6)
dobj(strikes-4, chord-7)
case(German-11, with-8)
det(German-11, the-9)
amod(German-11, average-10)
nmod:with(strikes-4, German-11)
punct(strikes-4, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#chord

strike :: But striking a compromise will be tough because lawmakers fiercely disagree about what should be done ./.
cc(tough-7, But-1)
csubj(tough-7, striking-2)
det(compromise-4, a-3)
dobj(striking-2, compromise-4)
aux(tough-7, will-5)
cop(tough-7, be-6)
root(ROOT-0, tough-7)
mark(disagree-11, because-8)
nsubj(disagree-11, lawmakers-9)
advmod(disagree-11, fiercely-10)
advcl(tough-7, disagree-11)
mark(done-16, about-12)
nsubjpass(done-16, what-13)
aux(done-16, should-14)
auxpass(done-16, be-15)
advcl(disagree-11, done-16)
punct(tough-7, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#compromise

strike :: The federal judge , while backing the pill last week , has left open the possibility he might strike it down at a later date under different conditions ./.
det(judge-3, The-1)
amod(judge-3, federal-2)
nsubj(left-13, judge-3)
punct(left-13, ,-4)
mark(backing-6, while-5)
advcl(left-13, backing-6)
det(pill-8, the-7)
dobj(backing-6, pill-8)
amod(week-10, last-9)
nmod:tmod(backing-6, week-10)
punct(left-13, ,-11)
aux(left-13, has-12)
root(ROOT-0, left-13)
compound:prt(left-13, open-14)
det(possibility-16, the-15)
dobj(left-13, possibility-16)
nsubj(strike-19, he-17)
aux(strike-19, might-18)
acl:relcl(possibility-16, strike-19)
dobj(strike-19, it-20)
compound:prt(strike-19, down-21)
case(date-25, at-22)
det(date-25, a-23)
amod(date-25, later-24)
nmod:at(strike-19, date-25)
case(conditions-28, under-26)
amod(conditions-28, different-27)
nmod:under(strike-19, conditions-28)
punct(left-13, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#it

strike :: Wolverine Exploration Co. said a Lea County , N.M . , well in which it has an interest struck oil ./.
compound(Co.-3, Wolverine-1)
compound(Co.-3, Exploration-2)
nsubj(said-4, Co.-3)
root(ROOT-0, said-4)
det(County-7, a-5)
compound(County-7, Lea-6)
dobj(said-4, County-7)
punct(County-7, ,-8)
appos(County-7, N.M-9)
punct(said-4, .-10)
root(ROOT-0, ,-1)
advmod(has-6, well-2)
case(which-4, in-3)
nmod:in(has-6, which-4)
nsubj(has-6, it-5)
root(,-1, has-6)
det(interest-8, an-7)
nsubj(struck-9, interest-8)
ccomp(has-6, struck-9)
dobj(struck-9, oil-10)
punct(has-6, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#oil

strike :: President Reagan issued a list of 107 examples of `` wasteful '' spending approved by Congress last December , but backed away from his earlier vow to formally ask Congress to strike them from the fiscal 1988 budget ./.
compound(Reagan-2, President-1)
nsubj(issued-3, Reagan-2)
nsubj(backed-21, Reagan-2)
nsubj:xsubj(ask-29, Reagan-2)
root(ROOT-0, issued-3)
det(list-5, a-4)
dobj(issued-3, list-5)
case(examples-8, of-6)
nummod(examples-8, 107-7)
nmod:of(list-5, examples-8)
case(spending-13, of-9)
punct(spending-13, ``-10)
amod(spending-13, wasteful-11)
punct(spending-13, ''-12)
nmod:of(examples-8, spending-13)
acl(spending-13, approved-14)
case(Congress-16, by-15)
nmod:by(approved-14, Congress-16)
amod(December-18, last-17)
nmod:tmod(approved-14, December-18)
punct(issued-3, ,-19)
cc(issued-3, but-20)
conj:but(issued-3, backed-21)
case(vow-26, away-22)
mwe(away-22, from-23)
nmod:poss(vow-26, his-24)
amod(vow-26, earlier-25)
nmod:away_from(backed-21, vow-26)
mark(ask-29, to-27)
advmod(ask-29, formally-28)
xcomp(backed-21, ask-29)
dobj(ask-29, Congress-30)
nsubj:xsubj(strike-32, Congress-30)
mark(strike-32, to-31)
xcomp(ask-29, strike-32)
dobj(strike-32, them-33)
case(budget-38, from-34)
det(budget-38, the-35)
amod(budget-38, fiscal-36)
nummod(budget-38, 1988-37)
nmod:from(strike-32, budget-38)
punct(issued-3, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#them

strike :: Leaders of six unions representing GM 's U.K. manual and salaried workers recommended earlier this month that workers strike from Monday after talks with the company over improvements in pensions broke down ./.
nsubj(broke-31, Leaders-1)
case(unions-4, of-2)
nummod(unions-4, six-3)
nmod:of(Leaders-1, unions-4)
acl(unions-4, representing-5)
nmod:poss(manual-9, GM-6)
case(GM-6, 's-7)
compound(manual-9, U.K.-8)
dobj(representing-5, manual-9)
dobj(strike-19, manual-9)
cc(manual-9, and-10)
amod(workers-12, salaried-11)
dobj(representing-5, workers-12)
conj:and(manual-9, workers-12)
dobj(strike-19, workers-12)
acl(manual-9, recommended-13)
advmod(month-16, earlier-14)
det(month-16, this-15)
nmod:tmod(recommended-13, month-16)
ref(manual-9, that-17)
nsubj(strike-19, workers-18)
acl:relcl(manual-9, strike-19)
case(Monday-21, from-20)
nmod:from(strike-19, Monday-21)
case(talks-23, after-22)
nmod:after(strike-19, talks-23)
case(company-26, with-24)
det(company-26, the-25)
nmod:with(talks-23, company-26)
case(improvements-28, over-27)
nmod:over(talks-23, improvements-28)
case(pensions-30, in-29)
nmod:in(improvements-28, pensions-30)
root(ROOT-0, broke-31)
compound:prt(broke-31, down-32)
punct(broke-31, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#manual

strike :: Union locals were preparing to strike , citing health and safety grievances at about nine plants , including Chrysler 's Sterling Heights , Mich . , stamping plant ./.
compound(locals-2, Union-1)
nsubj(preparing-4, locals-2)
nsubj:xsubj(strike-6, locals-2)
aux(preparing-4, were-3)
root(ROOT-0, preparing-4)
mark(strike-6, to-5)
xcomp(preparing-4, strike-6)
punct(strike-6, ,-7)
xcomp(strike-6, citing-8)
compound(grievances-12, health-9)
cc(health-9, and-10)
conj:and(health-9, safety-11)
compound(grievances-12, safety-11)
dobj(citing-8, grievances-12)
case(plants-16, at-13)
advmod(nine-15, about-14)
nummod(plants-16, nine-15)
nmod:at(citing-8, plants-16)
punct(plants-16, ,-17)
case(Heights-22, including-18)
nmod:poss(Heights-22, Chrysler-19)
case(Chrysler-19, 's-20)
compound(Heights-22, Sterling-21)
nmod:including(plants-16, Heights-22)
punct(Heights-22, ,-23)
appos(Heights-22, Mich-24)
punct(preparing-4, .-25)
root(ROOT-0, ,-1)
root(,-1, stamping-2)
dobj(stamping-2, plant-3)
punct(stamping-2, .-4)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#locals

strike :: Iran retaliated by firing two missiles that struck Baghdad , killing or injuring an unspecified number of people ./.
nsubj(retaliated-2, Iran-1)
root(ROOT-0, retaliated-2)
case(missiles-6, by-3)
compound(missiles-6, firing-4)
nummod(missiles-6, two-5)
nmod:by(retaliated-2, missiles-6)
nsubj(struck-8, missiles-6)
ref(missiles-6, that-7)
acl:relcl(missiles-6, struck-8)
dobj(struck-8, Baghdad-9)
punct(retaliated-2, ,-10)
advcl(retaliated-2, killing-11)
cc(killing-11, or-12)
advcl(retaliated-2, injuring-13)
conj:or(killing-11, injuring-13)
det(number-16, an-14)
amod(number-16, unspecified-15)
dobj(killing-11, number-16)
case(people-18, of-17)
nmod:of(number-16, people-18)
punct(retaliated-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#baghdad

strike :: Nearly every local union either voted to strike or planned to since the Acustar issue flared up , and while most of those possible walkouts will likely never take place , about three plants are still seriously pursuing grievances , a union official said ./.
advmod(union-4, Nearly-1)
det(union-4, every-2)
amod(union-4, local-3)
nsubj(voted-6, union-4)
nsubj:xsubj(strike-8, union-4)
advmod(voted-6, either-5)
root(ROOT-0, voted-6)
mark(strike-8, to-7)
xcomp(voted-6, strike-8)
cc(strike-8, or-9)
xcomp(voted-6, planned-10)
conj:or(strike-8, planned-10)
mark(flared-16, to-11)
mark(flared-16, since-12)
det(issue-15, the-13)
compound(issue-15, Acustar-14)
nsubj(flared-16, issue-15)
advcl(strike-8, flared-16)
compound:prt(flared-16, up-17)
punct(flared-16, ,-18)
cc(flared-16, and-19)
mark(take-29, while-20)
nsubj(take-29, most-21)
case(walkouts-25, of-22)
det(walkouts-25, those-23)
amod(walkouts-25, possible-24)
nmod:of(most-21, walkouts-25)
aux(take-29, will-26)
advmod(take-29, likely-27)
neg(take-29, never-28)
advcl(strike-8, take-29)
conj:and(flared-16, take-29)
dobj(take-29, place-30)
punct(take-29, ,-31)
advmod(three-33, about-32)
nummod(plants-34, three-33)
nsubj(pursuing-38, plants-34)
aux(pursuing-38, are-35)
advmod(pursuing-38, still-36)
advmod(pursuing-38, seriously-37)
dep(take-29, pursuing-38)
dobj(pursuing-38, grievances-39)
punct(grievances-39, ,-40)
det(official-43, a-41)
compound(official-43, union-42)
nsubj(said-44, official-43)
acl:relcl(grievances-39, said-44)
punct(voted-6, .-45)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#union

strike :: Campeau said it plans to sue to strike down the agreement to pay $ 45 million to Macy ./.
nsubj(said-2, Campeau-1)
root(ROOT-0, said-2)
nsubj(plans-4, it-3)
nsubj:xsubj(sue-6, it-3)
ccomp(said-2, plans-4)
mark(sue-6, to-5)
xcomp(plans-4, sue-6)
mark(strike-8, to-7)
xcomp(sue-6, strike-8)
compound:prt(strike-8, down-9)
det(agreement-11, the-10)
dobj(strike-8, agreement-11)
mark(pay-13, to-12)
acl(agreement-11, pay-13)
dobj(pay-13, $-14)
compound(million-16, 45-15)
nummod($-14, million-16)
case(Macy-18, to-17)
nmod:to(pay-13, Macy-18)
punct(said-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#agreement

strike :: Together they strike back , forming a company to produce clothes for the senior-citizen set ./.
advmod(strike-3, Together-1)
nsubj(strike-3, they-2)
root(ROOT-0, strike-3)
advmod(strike-3, back-4)
punct(strike-3, ,-5)
xcomp(strike-3, forming-6)
det(company-8, a-7)
dobj(forming-6, company-8)
mark(produce-10, to-9)
acl(company-8, produce-10)
dobj(produce-10, clothes-11)
case(set-15, for-12)
det(set-15, the-13)
amod(set-15, senior-citizen-14)
nmod:for(produce-10, set-15)
punct(strike-3, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#they

strike :: About 2 , 500 tugboat employees struck nine marine-transport companies in the Port of New York and New Jersey ./.
advmod(2-2, About-1)
nmod(struck-7, 2-2)
punct(struck-7, ,-3)
nummod(employees-6, 500-4)
compound(employees-6, tugboat-5)
nsubj(struck-7, employees-6)
root(ROOT-0, struck-7)
nummod(companies-10, nine-8)
compound(companies-10, marine-transport-9)
dobj(struck-7, companies-10)
case(Port-13, in-11)
det(Port-13, the-12)
nmod:in(struck-7, Port-13)
case(York-16, of-14)
compound(York-16, New-15)
nmod:of(Port-13, York-16)
cc(York-16, and-17)
compound(Jersey-19, New-18)
nmod:of(Port-13, Jersey-19)
conj:and(York-16, Jersey-19)
punct(struck-7, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#companies

strike :: To minimize that problem and to protect their official sponsors , Olympic authorities strike back at ambushes that go too far ./.
mark(minimize-2, To-1)
advcl(strike-14, minimize-2)
det(problem-4, that-3)
dobj(minimize-2, problem-4)
cc(minimize-2, and-5)
mark(protect-7, to-6)
conj:and(minimize-2, protect-7)
advcl(strike-14, protect-7)
nmod:poss(sponsors-10, their-8)
amod(sponsors-10, official-9)
dobj(protect-7, sponsors-10)
punct(strike-14, ,-11)
compound(authorities-13, Olympic-12)
nsubj(strike-14, authorities-13)
root(ROOT-0, strike-14)
advmod(strike-14, back-15)
case(ambushes-17, at-16)
nmod:at(strike-14, ambushes-17)
nsubj(go-19, ambushes-17)
ref(ambushes-17, that-18)
acl:relcl(ambushes-17, go-19)
advmod(far-21, too-20)
advmod(go-19, far-21)
punct(strike-14, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#authorities

strike :: A federal appeals court here struck down the law on Jan. 22 , saying the appointment of independent counsels by a special three-judge court violates the Constitution 's separation of powers ./.
det(court-4, A-1)
amod(court-4, federal-2)
compound(court-4, appeals-3)
nsubj(struck-6, court-4)
advmod(court-4, here-5)
root(ROOT-0, struck-6)
case(law-9, down-7)
det(law-9, the-8)
nmod:down(struck-6, law-9)
case(Jan.-11, on-10)
nmod:on(struck-6, Jan.-11)
nummod(Jan.-11, 22-12)
punct(struck-6, ,-13)
advcl(struck-6, saying-14)
det(appointment-16, the-15)
nsubj(counsels-19, appointment-16)
case(independent-18, of-17)
nmod:of(appointment-16, independent-18)
ccomp(saying-14, counsels-19)
case(court-24, by-20)
det(court-24, a-21)
amod(court-24, special-22)
amod(court-24, three-judge-23)
nmod:by(counsels-19, court-24)
ccomp(counsels-19, violates-25)
det(Constitution-27, the-26)
nmod:poss(separation-29, Constitution-27)
case(Constitution-27, 's-28)
dobj(violates-25, separation-29)
case(powers-31, of-30)
nmod:of(separation-29, powers-31)
punct(struck-6, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#court

strike :: Last March , Judge Alex Kozinski of the appeals court in San Francisco struck down a San Francisco plan earmarking 30 % of city contracts for minority-owned businesses and 10 % for firms owned by women ./.
amod(March-2, Last-1)
nmod:tmod(struck-14, March-2)
punct(struck-14, ,-3)
compound(Kozinski-6, Judge-4)
compound(Kozinski-6, Alex-5)
nsubj(struck-14, Kozinski-6)
case(court-10, of-7)
det(court-10, the-8)
compound(court-10, appeals-9)
nmod:of(Kozinski-6, court-10)
case(Francisco-13, in-11)
compound(Francisco-13, San-12)
nmod:in(court-10, Francisco-13)
root(ROOT-0, struck-14)
compound:prt(struck-14, down-15)
det(plan-19, a-16)
compound(plan-19, San-17)
compound(plan-19, Francisco-18)
dobj(struck-14, plan-19)
acl(plan-19, earmarking-20)
nummod(%-22, 30-21)
dobj(earmarking-20, %-22)
case(contracts-25, of-23)
compound(contracts-25, city-24)
nmod:of(%-22, contracts-25)
case(businesses-28, for-26)
amod(businesses-28, minority-owned-27)
nmod:for(contracts-25, businesses-28)
cc(%-22, and-29)
nummod(%-31, 10-30)
dobj(earmarking-20, %-31)
conj:and(%-22, %-31)
case(firms-33, for-32)
nmod:for(%-31, firms-33)
acl(firms-33, owned-34)
case(women-36, by-35)
nmod:by(owned-34, women-36)
punct(struck-14, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#plan

strike :: If Pan Am rejects arbitration , the Teamsters will be legally free to strike after a 30-day cooling-off period ./.
mark(rejects-4, If-1)
nsubj(rejects-4, Pan-2)
aux(rejects-4, Am-3)
advcl(free-12, rejects-4)
dobj(rejects-4, arbitration-5)
punct(free-12, ,-6)
det(Teamsters-8, the-7)
nsubj(free-12, Teamsters-8)
nsubj:xsubj(strike-14, Teamsters-8)
aux(free-12, will-9)
cop(free-12, be-10)
advmod(free-12, legally-11)
root(ROOT-0, free-12)
mark(strike-14, to-13)
xcomp(free-12, strike-14)
case(period-19, after-15)
det(period-19, a-16)
amod(period-19, 30-day-17)
amod(period-19, cooling-off-18)
nmod:after(strike-14, period-19)
punct(free-12, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#teamsters

strike :: Workers at General Motors Corp. 's truck assembly complex in Pontiac , Mich . , are threatening to strike for the second time in less than a year ./.
root(ROOT-0, Workers-1)
case(complex-9, at-2)
compound(Corp.-5, General-3)
compound(Corp.-5, Motors-4)
nmod:poss(complex-9, Corp.-5)
case(Corp.-5, 's-6)
compound(complex-9, truck-7)
compound(complex-9, assembly-8)
nmod:at(Workers-1, complex-9)
case(Pontiac-11, in-10)
nmod:in(complex-9, Pontiac-11)
punct(Pontiac-11, ,-12)
appos(Pontiac-11, Mich-13)
punct(Workers-1, .-14)
punct(threatening-3, ,-1)
aux(threatening-3, are-2)
root(ROOT-0, threatening-3)
mark(strike-5, to-4)
xcomp(threatening-3, strike-5)
case(time-9, for-6)
det(time-9, the-7)
amod(time-9, second-8)
nmod:for(strike-5, time-9)
case(less-11, in-10)
nmod:in(strike-5, less-11)
case(year-14, than-12)
det(year-14, a-13)
nmod:than(less-11, year-14)
punct(threatening-3, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#time

strike :: So far , two participants have died , a child has apparently been struck and killed , two racers have received paralyzing injuries and close to 30 more have been seriously hurt ./.
advmod(far-2, So-1)
advmod(died-7, far-2)
punct(died-7, ,-3)
nummod(participants-5, two-4)
nsubj(died-7, participants-5)
aux(died-7, have-6)
root(ROOT-0, died-7)
punct(died-7, ,-8)
det(child-10, a-9)
nsubjpass(struck-14, child-10)
nsubjpass(killed-16, child-10)
aux(struck-14, has-11)
advmod(struck-14, apparently-12)
auxpass(struck-14, been-13)
ccomp(died-7, struck-14)
cc(struck-14, and-15)
ccomp(died-7, killed-16)
conj:and(struck-14, killed-16)
punct(died-7, ,-17)
nummod(racers-19, two-18)
nsubj(received-21, racers-19)
aux(received-21, have-20)
parataxis(died-7, received-21)
dobj(received-21, paralyzing-22)
dobj(paralyzing-22, injuries-23)
cc(paralyzing-22, and-24)
dobj(received-21, close-25)
conj:and(paralyzing-22, close-25)
dep(30-27, to-26)
nmod(close-25, 30-27)
nsubjpass(hurt-32, more-28)
aux(hurt-32, have-29)
auxpass(hurt-32, been-30)
advmod(hurt-32, seriously-31)
ccomp(close-25, hurt-32)
punct(died-7, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#child

strike :: And although the firm has become involved in some hostile transactions in recent years , its representation of a major unsolicited bid by a foreign concern struck some takeover professionals as unusual ./.
cc(struck-27, And-1)
mark(become-6, although-2)
det(firm-4, the-3)
nsubj(become-6, firm-4)
aux(become-6, has-5)
advcl(struck-27, become-6)
xcomp(become-6, involved-7)
case(transactions-11, in-8)
det(transactions-11, some-9)
amod(transactions-11, hostile-10)
nmod:in(involved-7, transactions-11)
case(years-14, in-12)
amod(years-14, recent-13)
nmod:in(involved-7, years-14)
punct(struck-27, ,-15)
nmod:poss(representation-17, its-16)
nsubj(struck-27, representation-17)
case(bid-22, of-18)
det(bid-22, a-19)
amod(bid-22, major-20)
amod(bid-22, unsolicited-21)
nmod:of(representation-17, bid-22)
case(concern-26, by-23)
det(concern-26, a-24)
amod(concern-26, foreign-25)
nmod:by(bid-22, concern-26)
root(ROOT-0, struck-27)
det(professionals-30, some-28)
compound(professionals-30, takeover-29)
dobj(struck-27, professionals-30)
case(unusual-32, as-31)
advcl(struck-27, unusual-32)
punct(struck-27, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#professionals

strike :: It has become popular for West German conservatives , for example , to argue that the treaty strategically `` singularizes '' their country by virtue of the fact that after INF reductions , shorter-range Soviet missiles in East Germany will still be able to strike targets in West Germany ./.
nsubj(become-3, It-1)
nsubj:xsubj(argue-14, It-1)
aux(become-3, has-2)
root(ROOT-0, become-3)
xcomp(become-3, popular-4)
case(conservatives-8, for-5)
amod(German-7, West-6)
amod(conservatives-8, German-7)
nmod:for(become-3, conservatives-8)
punct(become-3, ,-9)
case(example-11, for-10)
nmod:for(become-3, example-11)
punct(become-3, ,-12)
mark(argue-14, to-13)
xcomp(become-3, argue-14)
mark(singularizes-20, that-15)
det(treaty-17, the-16)
nsubj(singularizes-20, treaty-17)
advmod(singularizes-20, strategically-18)
punct(singularizes-20, ``-19)
ccomp(argue-14, singularizes-20)
punct(singularizes-20, ''-21)
nmod:poss(country-23, their-22)
dobj(singularizes-20, country-23)
case(virtue-25, by-24)
nmod:by(singularizes-20, virtue-25)
case(fact-28, of-26)
det(fact-28, the-27)
nmod:of(virtue-25, fact-28)
mark(able-43, that-29)
case(reductions-32, after-30)
compound(reductions-32, INF-31)
nmod:after(able-43, reductions-32)
punct(able-43, ,-33)
amod(missiles-36, shorter-range-34)
amod(missiles-36, Soviet-35)
nsubj(able-43, missiles-36)
nsubj:xsubj(strike-45, missiles-36)
case(Germany-39, in-37)
compound(Germany-39, East-38)
nmod:in(missiles-36, Germany-39)
aux(able-43, will-40)
advmod(able-43, still-41)
cop(able-43, be-42)
ccomp(fact-28, able-43)
mark(strike-45, to-44)
xcomp(able-43, strike-45)
dobj(strike-45, targets-46)
case(Germany-49, in-47)
compound(Germany-49, West-48)
nmod:in(targets-46, Germany-49)
punct(become-3, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#targets

strike :: It was Jack Germond and Jules Witcover who divined his `` thunderstorm strategy '' -- he keeps wandering around waiting for lightning to strike ./.
nsubj(Germond-4, It-1)
cop(Germond-4, was-2)
compound(Germond-4, Jack-3)
root(ROOT-0, Germond-4)
nsubj(divined-9, Germond-4)
cc(Germond-4, and-5)
compound(Witcover-7, Jules-6)
conj:and(Germond-4, Witcover-7)
nsubj(divined-9, Witcover-7)
ref(Germond-4, who-8)
acl:relcl(Germond-4, divined-9)
nmod:poss(strategy-13, his-10)
punct(strategy-13, ``-11)
compound(strategy-13, thunderstorm-12)
dobj(divined-9, strategy-13)
punct(strategy-13, ''-14)
punct(Germond-4, ---15)
nsubj(keeps-17, he-16)
parataxis(Germond-4, keeps-17)
xcomp(keeps-17, wandering-18)
compound:prt(wandering-18, around-19)
xcomp(wandering-18, waiting-20)
mark(strike-24, for-21)
nsubj(strike-24, lightning-22)
mark(strike-24, to-23)
advcl(waiting-20, strike-24)
punct(Germond-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#lightning

strike :: The Senate approved a $ 1 trillion budget plan for fiscal 1989 that would increase federal spending about $ 45 billion and calls for a substantial anti-drug initiative that would violate a budget accord struck with the White House ./.
det(Senate-2, The-1)
nsubj(approved-3, Senate-2)
root(ROOT-0, approved-3)
det(plan-9, a-4)
amod(plan-9, $-5)
compound(trillion-7, 1-6)
nummod($-5, trillion-7)
compound(plan-9, budget-8)
dobj(approved-3, plan-9)
nsubj(increase-15, plan-9)
case(1989-12, for-10)
amod(1989-12, fiscal-11)
nmod:for(plan-9, 1989-12)
ref(plan-9, that-13)
aux(increase-15, would-14)
acl:relcl(plan-9, increase-15)
amod(spending-17, federal-16)
dobj(increase-15, spending-17)
advmod($-19, about-18)
dobj(spending-17, $-19)
compound(billion-21, 45-20)
nummod($-19, billion-21)
cc(spending-17, and-22)
dobj(increase-15, calls-23)
conj:and(spending-17, calls-23)
case(initiative-28, for-24)
det(initiative-28, a-25)
amod(initiative-28, substantial-26)
amod(initiative-28, anti-drug-27)
nmod:for(calls-23, initiative-28)
nsubj(violate-31, initiative-28)
ref(initiative-28, that-29)
aux(violate-31, would-30)
acl:relcl(initiative-28, violate-31)
det(accord-34, a-32)
compound(accord-34, budget-33)
dobj(violate-31, accord-34)
dep(violate-31, struck-35)
case(House-39, with-36)
det(House-39, the-37)
compound(House-39, White-38)
nmod:with(struck-35, House-39)
punct(approved-3, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#house

strike :: On the other hand , if the company 's rolling mills are struck , that could add ingot to the market ./.
case(hand-4, On-1)
det(hand-4, the-2)
amod(hand-4, other-3)
nmod:on(add-17, hand-4)
punct(add-17, ,-5)
mark(struck-13, if-6)
det(company-8, the-7)
nmod:poss(mills-11, company-8)
case(company-8, 's-9)
compound(mills-11, rolling-10)
nsubjpass(struck-13, mills-11)
auxpass(struck-13, are-12)
advcl(add-17, struck-13)
punct(add-17, ,-14)
nsubj(add-17, that-15)
aux(add-17, could-16)
root(ROOT-0, add-17)
dobj(add-17, ingot-18)
case(market-21, to-19)
det(market-21, the-20)
nmod:to(add-17, market-21)
punct(add-17, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#mills

strike :: The agreement apparently struck in Nicaragua between the Sandinistas and the Contras considerably discredits the alarms set off a few days ago by the Reagan administration over the Nicaraguan `` invasion '' of Honduras ./.
det(agreement-2, The-1)
nsubj(struck-4, agreement-2)
advmod(struck-4, apparently-3)
root(ROOT-0, struck-4)
case(Nicaragua-6, in-5)
nmod:in(struck-4, Nicaragua-6)
case(Sandinistas-9, between-7)
det(Sandinistas-9, the-8)
nmod:between(struck-4, Sandinistas-9)
cc(Sandinistas-9, and-10)
det(Contras-12, the-11)
nmod:between(struck-4, Contras-12)
conj:and(Sandinistas-9, Contras-12)
advmod(discredits-14, considerably-13)
xcomp(struck-4, discredits-14)
det(alarms-16, the-15)
nsubj(set-17, alarms-16)
ccomp(discredits-14, set-17)
compound:prt(set-17, off-18)
det(days-21, a-19)
amod(days-21, few-20)
nmod:npmod(ago-22, days-21)
advmod(set-17, ago-22)
case(administration-26, by-23)
det(administration-26, the-24)
compound(administration-26, Reagan-25)
nmod:by(set-17, administration-26)
case(invasion-31, over-27)
det(invasion-31, the-28)
amod(invasion-31, Nicaraguan-29)
punct(invasion-31, ``-30)
nmod:over(administration-26, invasion-31)
punct(invasion-31, ''-32)
case(Honduras-34, of-33)
nmod:of(invasion-31, Honduras-34)
punct(struck-4, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#agreement

strike :: About 5 , 000 union members struck five of Northern Telecom 's Canadian plants Feb. 29 , the day that talks broke off ./.
advmod(5-2, About-1)
nmod(struck-7, 5-2)
punct(struck-7, ,-3)
nummod(members-6, 000-4)
compound(members-6, union-5)
nsubj(struck-7, members-6)
root(ROOT-0, struck-7)
dobj(struck-7, five-8)
case(plants-14, of-9)
compound(Telecom-11, Northern-10)
nmod:poss(plants-14, Telecom-11)
case(Telecom-11, 's-12)
amod(plants-14, Canadian-13)
nmod:of(five-8, plants-14)
dep(five-8, Feb.-15)
nummod(Feb.-15, 29-16)
punct(Feb.-15, ,-17)
det(day-19, the-18)
appos(Feb.-15, day-19)
nsubj(talks-21, day-19)
ref(day-19, that-20)
acl:relcl(day-19, talks-21)
ccomp(talks-21, broke-22)
compound:prt(broke-22, off-23)
punct(struck-7, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#plants

strike :: The union , a Teamsters chapter , voted last month to strike over the contract stalemate , but instead has continued to negotiate sporadically since then with the company , a unit of St. Paul , Minn.-based NWA Inc ./.
det(union-2, The-1)
nsubj(voted-8, union-2)
nsubj:xsubj(strike-12, union-2)
nsubj(continued-21, union-2)
nsubj:xsubj(negotiate-23, union-2)
punct(union-2, ,-3)
det(chapter-6, a-4)
compound(chapter-6, Teamsters-5)
appos(union-2, chapter-6)
punct(union-2, ,-7)
root(ROOT-0, voted-8)
amod(month-10, last-9)
nmod:tmod(voted-8, month-10)
mark(strike-12, to-11)
xcomp(voted-8, strike-12)
compound:prt(strike-12, over-13)
det(stalemate-16, the-14)
compound(stalemate-16, contract-15)
dobj(strike-12, stalemate-16)
punct(voted-8, ,-17)
cc(voted-8, but-18)
advmod(continued-21, instead-19)
aux(continued-21, has-20)
conj:but(voted-8, continued-21)
mark(negotiate-23, to-22)
xcomp(continued-21, negotiate-23)
advmod(negotiate-23, sporadically-24)
case(then-26, since-25)
nmod:since(negotiate-23, then-26)
case(company-29, with-27)
det(company-29, the-28)
nmod:with(then-26, company-29)
punct(company-29, ,-30)
det(unit-32, a-31)
appos(company-29, unit-32)
case(Paul-35, of-33)
compound(Paul-35, St.-34)
nmod:of(unit-32, Paul-35)
punct(Paul-35, ,-36)
amod(Inc-39, Minn.-based-37)
compound(Inc-39, NWA-38)
appos(Paul-35, Inc-39)
punct(voted-8, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#stalemate

strike :: Gently rocking them swings the hammers , which sway back and forth like the tongues of bells to strike the chimes ./.
advmod(rocking-2, Gently-1)
csubj(swings-4, rocking-2)
dobj(rocking-2, them-3)
root(ROOT-0, swings-4)
det(hammers-6, the-5)
dobj(swings-4, hammers-6)
nsubj(sway-9, hammers-6)
nsubj:xsubj(strike-19, hammers-6)
punct(hammers-6, ,-7)
ref(hammers-6, which-8)
acl:relcl(hammers-6, sway-9)
advmod(sway-9, back-10)
cc(back-10, and-11)
advmod(sway-9, forth-12)
conj:and(back-10, forth-12)
case(tongues-15, like-13)
det(tongues-15, the-14)
nmod:like(sway-9, tongues-15)
case(bells-17, of-16)
nmod:of(tongues-15, bells-17)
mark(strike-19, to-18)
xcomp(sway-9, strike-19)
det(chimes-21, the-20)
dobj(strike-19, chimes-21)
punct(swings-4, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#chimes

strike :: Rep. Bosco failed to show Feb. 1 for the hearings in Fort Bragg , and in its edition for Feb. 3 the Advertiser struck back ./.
compound(Bosco-2, Rep.-1)
nsubj(failed-3, Bosco-2)
nsubj:xsubj(show-5, Bosco-2)
root(ROOT-0, failed-3)
mark(show-5, to-4)
xcomp(failed-3, show-5)
nmod:tmod(show-5, Feb.-6)
nummod(Feb.-6, 1-7)
case(hearings-10, for-8)
det(hearings-10, the-9)
nmod:for(show-5, hearings-10)
case(Bragg-13, in-11)
compound(Bragg-13, Fort-12)
nmod:in(hearings-10, Bragg-13)
punct(failed-3, ,-14)
cc(failed-3, and-15)
case(edition-18, in-16)
nmod:poss(edition-18, its-17)
nmod:in(struck-24, edition-18)
case(Feb.-20, for-19)
nmod:for(edition-18, Feb.-20)
nummod(Feb.-20, 3-21)
det(Advertiser-23, the-22)
nsubj(struck-24, Advertiser-23)
conj:and(failed-3, struck-24)
advmod(struck-24, back-25)
punct(failed-3, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#advertiser

strike :: Iran retaliated by firing two missiles that struck Baghdad , killing or injuring an unspecified number of people ./.
nsubj(retaliated-2, Iran-1)
root(ROOT-0, retaliated-2)
case(missiles-6, by-3)
compound(missiles-6, firing-4)
nummod(missiles-6, two-5)
nmod:by(retaliated-2, missiles-6)
nsubj(struck-8, missiles-6)
ref(missiles-6, that-7)
acl:relcl(missiles-6, struck-8)
dobj(struck-8, Baghdad-9)
punct(retaliated-2, ,-10)
advcl(retaliated-2, killing-11)
cc(killing-11, or-12)
advcl(retaliated-2, injuring-13)
conj:or(killing-11, injuring-13)
det(number-16, an-14)
amod(number-16, unspecified-15)
dobj(killing-11, number-16)
case(people-18, of-17)
nmod:of(number-16, people-18)
punct(retaliated-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#baghdad

strike :: Based on the evidence from the early contests -- including a surprisingly strong second-place finish in last weekend 's Maine caucuses -- his populist crusade against `` economic violence '' is striking a chord among some Democrats beyond his black base ./.
case(evidence-4, Based-1)
mwe(Based-1, on-2)
det(evidence-4, the-3)
root(ROOT-0, evidence-4)
case(contests-8, from-5)
det(contests-8, the-6)
amod(contests-8, early-7)
nmod:from(evidence-4, contests-8)
punct(contests-8, ---9)
case(finish-15, including-10)
det(finish-15, a-11)
advmod(strong-13, surprisingly-12)
amod(finish-15, strong-13)
amod(finish-15, second-place-14)
nmod:including(contests-8, finish-15)
case(caucuses-21, in-16)
amod(weekend-18, last-17)
nmod:poss(caucuses-21, weekend-18)
case(weekend-18, 's-19)
compound(caucuses-21, Maine-20)
nmod:in(finish-15, caucuses-21)
punct(contests-8, ---22)
nmod:poss(crusade-25, his-23)
amod(crusade-25, populist-24)
nsubj(striking-32, crusade-25)
case(violence-29, against-26)
punct(violence-29, ``-27)
amod(violence-29, economic-28)
nmod:against(crusade-25, violence-29)
punct(violence-29, ''-30)
aux(striking-32, is-31)
acl:relcl(contests-8, striking-32)
det(chord-34, a-33)
dobj(striking-32, chord-34)
case(Democrats-37, among-35)
det(Democrats-37, some-36)
nmod:among(chord-34, Democrats-37)
case(base-41, beyond-38)
nmod:poss(base-41, his-39)
amod(base-41, black-40)
nmod:beyond(striking-32, base-41)
punct(evidence-4, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#chord

strike :: Recently , an appeals court in San Francisco struck down a federal program requiring drug testing for railroad employees after accidents ./.
advmod(struck-9, Recently-1)
punct(struck-9, ,-2)
det(court-5, an-3)
compound(court-5, appeals-4)
nsubj(struck-9, court-5)
case(Francisco-8, in-6)
compound(Francisco-8, San-7)
nmod:in(court-5, Francisco-8)
root(ROOT-0, struck-9)
compound:prt(struck-9, down-10)
det(program-13, a-11)
amod(program-13, federal-12)
dobj(struck-9, program-13)
acl(program-13, requiring-14)
compound(testing-16, drug-15)
dobj(requiring-14, testing-16)
case(employees-19, for-17)
compound(employees-19, railroad-18)
nmod:for(testing-16, employees-19)
case(accidents-21, after-20)
nmod:after(requiring-14, accidents-21)
punct(struck-9, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#program

strike :: A spokesman for McAllister Brothers Inc . , one of the struck companies , said the company is manning its boats with replacement workers and management ./.
det(spokesman-2, A-1)
root(ROOT-0, spokesman-2)
case(Inc-6, for-3)
compound(Inc-6, McAllister-4)
compound(Inc-6, Brothers-5)
nmod:for(spokesman-2, Inc-6)
punct(spokesman-2, .-7)
punct(said-8, ,-1)
nsubj(said-8, one-2)
case(companies-6, of-3)
det(companies-6, the-4)
amod(companies-6, struck-5)
nmod:of(one-2, companies-6)
punct(said-8, ,-7)
root(ROOT-0, said-8)
det(company-10, the-9)
nsubj(manning-12, company-10)
aux(manning-12, is-11)
ccomp(said-8, manning-12)
nmod:poss(boats-14, its-13)
dobj(manning-12, boats-14)
case(workers-17, with-15)
compound(workers-17, replacement-16)
nmod:with(manning-12, workers-17)
cc(workers-17, and-18)
nmod:with(manning-12, management-19)
conj:and(workers-17, management-19)
punct(said-8, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#companies

strike :: But these corporate gains appear more like personal setbacks to Mr. Collyer and many of the other 32 , 500 British workers who struck Ford 's British plants eight days ago ./.
cc(appear-5, But-1)
det(gains-4, these-2)
amod(gains-4, corporate-3)
nsubj(appear-5, gains-4)
root(ROOT-0, appear-5)
advmod(setbacks-9, more-6)
case(setbacks-9, like-7)
amod(setbacks-9, personal-8)
nmod:like(appear-5, setbacks-9)
case(Collyer-12, to-10)
compound(Collyer-12, Mr.-11)
nmod:to(setbacks-9, Collyer-12)
cc(Collyer-12, and-13)
nmod:to(setbacks-9, many-14)
conj:and(Collyer-12, many-14)
acl(many-14, of-15)
root(of-15, the-16)
amod(the-16, other-17)
dep(other-17, 32-18)
punct(32-18, ,-19)
nummod(workers-22, 500-20)
amod(workers-22, British-21)
root(,-19, workers-22)
nsubj(struck-24, workers-22)
ref(workers-22, who-23)
acl:relcl(workers-22, struck-24)
nmod:poss(plants-28, Ford-25)
case(Ford-25, 's-26)
amod(plants-28, British-27)
dobj(struck-24, plants-28)
nummod(days-30, eight-29)
nmod:npmod(ago-31, days-30)
advmod(struck-24, ago-31)
punct(workers-22, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#plants

strike :: The feisty , 62-year-old director of the airline division of the Teamsters union wants 4 , 300 Pan Am reservationists , ticket agents , and office and other workers to strike Pan Am Corp. after a cooling-off period that ends Sunday ./.
det(director-5, The-1)
amod(director-5, feisty-2)
punct(director-5, ,-3)
amod(director-5, 62-year-old-4)
nsubj(wants-14, director-5)
case(division-9, of-6)
det(division-9, the-7)
compound(division-9, airline-8)
nmod:of(director-5, division-9)
case(union-13, of-10)
det(union-13, the-11)
compound(union-13, Teamsters-12)
nmod:of(division-9, union-13)
root(ROOT-0, wants-14)
dobj(wants-14, 4-15)
nsubj:xsubj(strike-31, 4-15)
punct(4-15, ,-16)
nummod(reservationists-20, 300-17)
compound(reservationists-20, Pan-18)
compound(reservationists-20, Am-19)
appos(4-15, reservationists-20)
punct(4-15, ,-21)
compound(agents-23, ticket-22)
dobj(wants-14, agents-23)
conj:and(4-15, agents-23)
nsubj:xsubj(strike-31, agents-23)
punct(4-15, ,-24)
cc(4-15, and-25)
compound(workers-29, office-26)
cc(office-26, and-27)
conj:and(office-26, other-28)
compound(workers-29, other-28)
dobj(wants-14, workers-29)
conj:and(4-15, workers-29)
nsubj:xsubj(strike-31, workers-29)
mark(strike-31, to-30)
xcomp(wants-14, strike-31)
compound(Corp.-34, Pan-32)
compound(Corp.-34, Am-33)
dobj(strike-31, Corp.-34)
case(period-38, after-35)
det(period-38, a-36)
amod(period-38, cooling-off-37)
nmod:after(strike-31, period-38)
nsubj(ends-40, period-38)
ref(period-38, that-39)
acl:relcl(period-38, ends-40)
nmod:tmod(ends-40, Sunday-41)
punct(wants-14, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#corp.

strike :: In addition to the requirement of a warrant , the court 's ruling also struck down the department 's drug-testing program on the ground that the tests themselves do n't reliably measure intoxication at a particular time before their administration ./.
case(requirement-5, In-1)
mwe(In-1, addition-2)
mwe(In-1, to-3)
det(requirement-5, the-4)
nmod:in_addition_to(struck-15, requirement-5)
case(warrant-8, of-6)
det(warrant-8, a-7)
nmod:of(requirement-5, warrant-8)
punct(struck-15, ,-9)
det(court-11, the-10)
nmod:poss(ruling-13, court-11)
case(court-11, 's-12)
nsubj(struck-15, ruling-13)
advmod(struck-15, also-14)
root(ROOT-0, struck-15)
compound:prt(struck-15, down-16)
det(department-18, the-17)
nmod:poss(program-21, department-18)
case(department-18, 's-19)
amod(program-21, drug-testing-20)
dobj(struck-15, program-21)
case(ground-24, on-22)
det(ground-24, the-23)
nmod:on(program-21, ground-24)
dep(ground-24, that-25)
det(tests-27, the-26)
dep(that-25, tests-27)
nsubj(measure-32, themselves-28)
aux(measure-32, do-29)
neg(measure-32, n't-30)
advmod(measure-32, reliably-31)
acl:relcl(tests-27, measure-32)
dobj(measure-32, intoxication-33)
case(time-37, at-34)
det(time-37, a-35)
amod(time-37, particular-36)
nmod:at(measure-32, time-37)
case(administration-40, before-38)
nmod:poss(administration-40, their-39)
nmod:before(time-37, administration-40)
punct(struck-15, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#program

strike :: So far it 's difficult to see that Mr. Kemp 's platform is striking a responsive chord in Iowa ./.
advmod(far-2, So-1)
advmod(difficult-5, far-2)
nsubj(difficult-5, it-3)
nsubj:xsubj(see-7, it-3)
cop(difficult-5, 's-4)
root(ROOT-0, difficult-5)
mark(see-7, to-6)
xcomp(difficult-5, see-7)
mark(striking-14, that-8)
compound(Kemp-10, Mr.-9)
nmod:poss(platform-12, Kemp-10)
case(Kemp-10, 's-11)
nsubj(striking-14, platform-12)
aux(striking-14, is-13)
ccomp(see-7, striking-14)
det(chord-17, a-15)
amod(chord-17, responsive-16)
dobj(striking-14, chord-17)
case(Iowa-19, in-18)
nmod:in(striking-14, Iowa-19)
punct(difficult-5, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#chord

strike :: ORANGE JUICE: Prices declined for the second consecutive day as fears of frost striking Florida 's citrus-growing area were further abated ./.
compound(JUICE-2, ORANGE-1)
root(ROOT-0, JUICE-2)
punct(JUICE-2, :-3)
nsubj(declined-5, Prices-4)
csubjpass(abated-22, declined-5)
case(day-10, for-6)
det(day-10, the-7)
amod(day-10, second-8)
amod(day-10, consecutive-9)
nmod:for(declined-5, day-10)
case(fears-12, as-11)
nmod:as(declined-5, fears-12)
case(area-19, of-13)
compound(Florida-16, frost-14)
amod(Florida-16, striking-15)
nmod:poss(area-19, Florida-16)
case(Florida-16, 's-17)
amod(area-19, citrus-growing-18)
nmod:of(fears-12, area-19)
auxpass(abated-22, were-20)
advmod(abated-22, further-21)
dep(JUICE-2, abated-22)
punct(JUICE-2, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#florida

strike :: The Transportation Department proposed a new auto-safety standard designed to give better protection to occupants in cars when they are struck from the side ./.
det(Department-3, The-1)
compound(Department-3, Transportation-2)
nsubj(proposed-4, Department-3)
root(ROOT-0, proposed-4)
det(standard-8, a-5)
amod(standard-8, new-6)
amod(standard-8, auto-safety-7)
dobj(proposed-4, standard-8)
acl(standard-8, designed-9)
mark(give-11, to-10)
xcomp(designed-9, give-11)
amod(protection-13, better-12)
dobj(give-11, protection-13)
case(occupants-15, to-14)
nmod:to(give-11, occupants-15)
case(cars-17, in-16)
nmod:in(occupants-15, cars-17)
advmod(struck-21, when-18)
nsubjpass(struck-21, they-19)
auxpass(struck-21, are-20)
advcl(give-11, struck-21)
case(side-24, from-22)
det(side-24, the-23)
nmod:from(struck-21, side-24)
punct(proposed-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#they

strike :: They were n't surprised that B.A.T wanted to continue its push into financial services , or that the big British company would strike while the U.S. dollar is depressed ./.
nsubjpass(surprised-4, They-1)
auxpass(surprised-4, were-2)
neg(surprised-4, n't-3)
root(ROOT-0, surprised-4)
mark(wanted-7, that-5)
nsubj(wanted-7, B.A.T-6)
nsubj:xsubj(continue-9, B.A.T-6)
ccomp(surprised-4, wanted-7)
mark(continue-9, to-8)
xcomp(wanted-7, continue-9)
nmod:poss(push-11, its-10)
dobj(continue-9, push-11)
case(services-14, into-12)
amod(services-14, financial-13)
nmod:into(push-11, services-14)
punct(wanted-7, ,-15)
cc(wanted-7, or-16)
mark(strike-23, that-17)
det(company-21, the-18)
amod(company-21, big-19)
amod(company-21, British-20)
nsubj(strike-23, company-21)
aux(strike-23, would-22)
ccomp(surprised-4, strike-23)
conj:or(wanted-7, strike-23)
mark(depressed-29, while-24)
det(dollar-27, the-25)
compound(dollar-27, U.S.-26)
nsubjpass(depressed-29, dollar-27)
auxpass(depressed-29, is-28)
advcl(strike-23, depressed-29)
punct(surprised-4, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#company

strike :: He said that parties looking to strike joint venture arrangements with Texaco `` want to know who they 're going to be dealing with in the future . ''/''
nsubj(said-2, He-1)
root(ROOT-0, said-2)
dep(said-2, that-3)
root(that-3, parties-4)
acl(parties-4, looking-5)
mark(strike-7, to-6)
xcomp(looking-5, strike-7)
amod(arrangements-10, joint-8)
compound(arrangements-10, venture-9)
dobj(strike-7, arrangements-10)
case(Texaco-12, with-11)
nmod:with(strike-7, Texaco-12)
punct(strike-7, ``-13)
xcomp(strike-7, want-14)
mark(know-16, to-15)
xcomp(want-14, know-16)
dobj(going-20, who-17)
nsubj:xsubj(dealing-23, who-17)
nsubj(going-20, they-18)
aux(going-20, 're-19)
ccomp(know-16, going-20)
mark(dealing-23, to-21)
aux(dealing-23, be-22)
xcomp(going-20, dealing-23)
case(future-27, with-24)
case(future-27, in-25)
det(future-27, the-26)
nmod:in(dealing-23, future-27)
punct(parties-4, .-28)
punct(parties-4, ''-29)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: strike#arrangements

strike :: The idea is to improve NATO 's ability to disrupt any breakthrough of its forward defenses -- by striking bridges , rail lines and other choke points -- and to strike deep inside Warsaw Pact defenses and supply lines ./.
det(idea-2, The-1)
nsubj(is-3, idea-2)
nsubj:xsubj(improve-5, idea-2)
root(ROOT-0, is-3)
mark(improve-5, to-4)
xcomp(is-3, improve-5)
nmod:poss(ability-8, NATO-6)
case(NATO-6, 's-7)
dobj(improve-5, ability-8)
mark(disrupt-10, to-9)
acl(ability-8, disrupt-10)
det(breakthrough-12, any-11)
dobj(disrupt-10, breakthrough-12)
case(defenses-16, of-13)
nmod:poss(defenses-16, its-14)
amod(defenses-16, forward-15)
nmod:of(breakthrough-12, defenses-16)
punct(improve-5, ---17)
case(bridges-20, by-18)
amod(bridges-20, striking-19)
nmod:by(improve-5, bridges-20)
punct(bridges-20, ,-21)
compound(lines-23, rail-22)
nmod:by(improve-5, lines-23)
conj:and(bridges-20, lines-23)
cc(bridges-20, and-24)
amod(points-27, other-25)
amod(points-27, choke-26)
nmod:by(improve-5, points-27)
conj:and(bridges-20, points-27)
punct(bridges-20, ---28)
cc(bridges-20, and-29)
mark(strike-31, to-30)
nmod:by(improve-5, strike-31)
conj:and(bridges-20, strike-31)
dobj(strike-31, deep-32)
case(defenses-36, inside-33)
compound(defenses-36, Warsaw-34)
compound(defenses-36, Pact-35)
nmod:inside(deep-32, defenses-36)
cc(defenses-36, and-37)
compound(lines-39, supply-38)
nmod:inside(deep-32, lines-39)
conj:and(defenses-36, lines-39)
punct(is-3, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#deep

strike :: And although the firm has become involved in some hostile transactions in recent years , its representation of a major unsolicited bid by a foreign concern struck some takeover professionals as unusual ./.
cc(struck-27, And-1)
mark(become-6, although-2)
det(firm-4, the-3)
nsubj(become-6, firm-4)
aux(become-6, has-5)
advcl(struck-27, become-6)
xcomp(become-6, involved-7)
case(transactions-11, in-8)
det(transactions-11, some-9)
amod(transactions-11, hostile-10)
nmod:in(involved-7, transactions-11)
case(years-14, in-12)
amod(years-14, recent-13)
nmod:in(involved-7, years-14)
punct(struck-27, ,-15)
nmod:poss(representation-17, its-16)
nsubj(struck-27, representation-17)
case(bid-22, of-18)
det(bid-22, a-19)
amod(bid-22, major-20)
amod(bid-22, unsolicited-21)
nmod:of(representation-17, bid-22)
case(concern-26, by-23)
det(concern-26, a-24)
amod(concern-26, foreign-25)
nmod:by(bid-22, concern-26)
root(ROOT-0, struck-27)
det(professionals-30, some-28)
compound(professionals-30, takeover-29)
dobj(struck-27, professionals-30)
case(unusual-32, as-31)
advcl(struck-27, unusual-32)
punct(struck-27, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#professionals

strike :: A heavy snowstorm struck the South , snarling travel and closing schools as a record cold wave continued in the Midwest and East ./.
det(snowstorm-3, A-1)
amod(snowstorm-3, heavy-2)
nsubj(struck-4, snowstorm-3)
root(ROOT-0, struck-4)
det(South-6, the-5)
dobj(struck-4, South-6)
punct(struck-4, ,-7)
advcl(struck-4, snarling-8)
compound(schools-12, travel-9)
cc(travel-9, and-10)
conj:and(travel-9, closing-11)
compound(schools-12, closing-11)
dobj(snarling-8, schools-12)
case(wave-17, as-13)
det(wave-17, a-14)
compound(wave-17, record-15)
amod(wave-17, cold-16)
nmod:as(snarling-8, wave-17)
acl(wave-17, continued-18)
case(Midwest-21, in-19)
det(Midwest-21, the-20)
nmod:in(continued-18, Midwest-21)
cc(Midwest-21, and-22)
nmod:in(continued-18, East-23)
conj:and(Midwest-21, East-23)
punct(struck-4, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#south

strike :: Pitching a baseball , it was agreed , is akin to striking a golf ball in that it is a complex act that only looks simple ./.
csubj(akin-10, Pitching-1)
det(baseball-3, a-2)
dobj(Pitching-1, baseball-3)
punct(agreed-7, ,-4)
nsubjpass(agreed-7, it-5)
auxpass(agreed-7, was-6)
parataxis(akin-10, agreed-7)
punct(agreed-7, ,-8)
cop(akin-10, is-9)
root(ROOT-0, akin-10)
mark(striking-12, to-11)
advcl(akin-10, striking-12)
det(ball-15, a-13)
compound(ball-15, golf-14)
dobj(striking-12, ball-15)
mark(act-22, in-16)
mark(act-22, that-17)
nsubj(act-22, it-18)
cop(act-22, is-19)
det(act-22, a-20)
amod(act-22, complex-21)
advcl(striking-12, act-22)
nsubj(looks-25, act-22)
ref(act-22, that-23)
advmod(looks-25, only-24)
acl:relcl(act-22, looks-25)
xcomp(looks-25, simple-26)
punct(akin-10, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#ball

strike :: At least three shotgun blasts struck Hans Tietmeyer 's chauffeur-driven limousine yesterday morning , police said , as he traveled from his suburban Bonn home ./.
case(least-2, At-1)
nmod:npmod(three-3, least-2)
nummod(blasts-5, three-3)
compound(blasts-5, shotgun-4)
nsubj(struck-6, blasts-5)
root(ROOT-0, struck-6)
compound(Tietmeyer-8, Hans-7)
nmod:poss(limousine-11, Tietmeyer-8)
case(Tietmeyer-8, 's-9)
amod(limousine-11, chauffeur-driven-10)
dobj(struck-6, limousine-11)
compound(morning-13, yesterday-12)
nmod:tmod(struck-6, morning-13)
punct(said-16, ,-14)
nsubj(said-16, police-15)
parataxis(struck-6, said-16)
punct(said-16, ,-17)
mark(traveled-20, as-18)
nsubj(traveled-20, he-19)
advcl(struck-6, traveled-20)
case(home-25, from-21)
nmod:poss(home-25, his-22)
amod(home-25, suburban-23)
compound(home-25, Bonn-24)
nmod:from(traveled-20, home-25)
punct(struck-6, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#limousine

strike :: For finishes , there 's his best shot , a roundhouse forehand that is better described as being launched than struck ./.
case(finishes-2, For-1)
nmod:for('s-5, finishes-2)
punct('s-5, ,-3)
expl('s-5, there-4)
root(ROOT-0, 's-5)
nmod:poss(shot-8, his-6)
amod(shot-8, best-7)
nsubj('s-5, shot-8)
punct(shot-8, ,-9)
det(forehand-12, a-10)
compound(forehand-12, roundhouse-11)
appos(shot-8, forehand-12)
nsubjpass(described-16, forehand-12)
ref(forehand-12, that-13)
auxpass(described-16, is-14)
advmod(described-16, better-15)
acl:relcl(forehand-12, described-16)
mark(launched-19, as-17)
auxpass(launched-19, being-18)
advcl(described-16, launched-19)
mark(struck-21, than-20)
advcl(launched-19, struck-21)
punct('s-5, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

strike :: Like tiny beacons at night , alligators ' eyes reflect a brilliant red when struck by a beam of light ./.
case(beacons-3, Like-1)
amod(beacons-3, tiny-2)
nmod:like(reflect-10, beacons-3)
case(night-5, at-4)
nmod:at(beacons-3, night-5)
punct(reflect-10, ,-6)
nmod:poss(eyes-9, alligators-7)
case(alligators-7, '-8)
nsubj(reflect-10, eyes-9)
root(ROOT-0, reflect-10)
det(red-13, a-11)
amod(red-13, brilliant-12)
dobj(reflect-10, red-13)
advmod(struck-15, when-14)
advcl(reflect-10, struck-15)
case(beam-18, by-16)
det(beam-18, a-17)
nmod:by(struck-15, beam-18)
case(light-20, of-19)
nmod:of(beam-18, light-20)
punct(reflect-10, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#beam

strike :: A powerful earthquake struck Nepal and eastern India , triggering landslides and floods and killing at least 500 people and injuring more than 3 , 000 ./.
det(earthquake-3, A-1)
amod(earthquake-3, powerful-2)
nsubj(struck-4, earthquake-3)
root(ROOT-0, struck-4)
dobj(struck-4, Nepal-5)
cc(Nepal-5, and-6)
compound(India-8, eastern-7)
dobj(struck-4, India-8)
conj:and(Nepal-5, India-8)
punct(struck-4, ,-9)
dep(struck-4, triggering-10)
dobj(triggering-10, landslides-11)
cc(landslides-11, and-12)
dobj(triggering-10, floods-13)
conj:and(landslides-11, floods-13)
cc(triggering-10, and-14)
dep(struck-4, killing-15)
conj:and(triggering-10, killing-15)
case(least-17, at-16)
nmod:npmod(500-18, least-17)
nummod(people-19, 500-18)
dobj(killing-15, people-19)
cc(triggering-10, and-20)
dep(struck-4, injuring-21)
conj:and(triggering-10, injuring-21)
advmod(3-24, more-22)
mwe(more-22, than-23)
dobj(injuring-21, 3-24)
punct(3-24, ,-25)
appos(3-24, 000-26)
punct(struck-4, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#nepal

strike :: The outlook for the Peruvian miners strike remained cloudy ./.
det(outlook-2, The-1)
nsubj(strike-7, outlook-2)
case(miners-6, for-3)
det(miners-6, the-4)
amod(miners-6, Peruvian-5)
nmod:for(outlook-2, miners-6)
root(ROOT-0, strike-7)
dep(strike-7, remained-8)
xcomp(remained-8, cloudy-9)
punct(strike-7, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#outlook

strike :: There , in 1986 , a black youth running for his life from a gang of bat-wielding whites was struck by an automobile and killed ./.
advmod(struck-20, There-1)
punct(struck-20, ,-2)
case(1986-4, in-3)
nmod:in(struck-20, 1986-4)
punct(struck-20, ,-5)
det(youth-8, a-6)
amod(youth-8, black-7)
nsubjpass(struck-20, youth-8)
acl(youth-8, running-9)
case(life-12, for-10)
nmod:poss(life-12, his-11)
nmod:for(running-9, life-12)
case(gang-15, from-13)
det(gang-15, a-14)
nmod:from(life-12, gang-15)
case(whites-18, of-16)
amod(whites-18, bat-wielding-17)
nmod:of(gang-15, whites-18)
auxpass(struck-20, was-19)
root(ROOT-0, struck-20)
case(automobile-23, by-21)
det(automobile-23, an-22)
nmod:agent(struck-20, automobile-23)
cc(automobile-23, and-24)
nmod:agent(struck-20, killed-25)
conj:and(automobile-23, killed-25)
punct(struck-20, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#youth

strike :: Israeli warplanes struck a Palestinian base in Lebanon ./.
amod(warplanes-2, Israeli-1)
nsubj(struck-3, warplanes-2)
root(ROOT-0, struck-3)
det(base-6, a-4)
amod(base-6, Palestinian-5)
dobj(struck-3, base-6)
case(Lebanon-8, in-7)
nmod:in(base-6, Lebanon-8)
punct(struck-3, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#base

strike :: Lightning seldom strikes twice in the same spot ./.
nsubj(strikes-3, Lightning-1)
advmod(strikes-3, seldom-2)
root(ROOT-0, strikes-3)
advmod(strikes-3, twice-4)
case(spot-8, in-5)
det(spot-8, the-6)
amod(spot-8, same-7)
nmod:in(strikes-3, spot-8)
punct(strikes-3, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: strike#lightning

stumble :: At the State Fair in Lincoln early this month , Mr. Karnes prompted a furor when he said , `` We need fewer farmers at this point in time , '' a remark that underlined his tendency to stumble into gaffes ./.
case(Fair-4, At-1)
det(Fair-4, the-2)
compound(Fair-4, State-3)
nmod:at(prompted-13, Fair-4)
case(Lincoln-6, in-5)
nmod:in(Fair-4, Lincoln-6)
advmod(month-9, early-7)
det(month-9, this-8)
nmod:tmod(Fair-4, month-9)
punct(prompted-13, ,-10)
compound(Karnes-12, Mr.-11)
nsubj(prompted-13, Karnes-12)
root(ROOT-0, prompted-13)
det(furor-15, a-14)
dobj(prompted-13, furor-15)
advmod(said-18, when-16)
nsubj(said-18, he-17)
advcl(prompted-13, said-18)
punct(said-18, ,-19)
punct(need-22, ``-20)
nsubj(need-22, We-21)
ccomp(said-18, need-22)
amod(farmers-24, fewer-23)
dobj(need-22, farmers-24)
case(point-27, at-25)
det(point-27, this-26)
nmod:at(need-22, point-27)
case(time-29, in-28)
nmod:in(need-22, time-29)
punct(prompted-13, ,-30)
root(,-30, ''-31)
det(remark-33, a-32)
root(''-31, remark-33)
nsubj(underlined-35, remark-33)
ref(remark-33, that-34)
acl:relcl(remark-33, underlined-35)
nmod:poss(tendency-37, his-36)
dobj(underlined-35, tendency-37)
mark(stumble-39, to-38)
acl(tendency-37, stumble-39)
case(gaffes-41, into-40)
nmod:into(stumble-39, gaffes-41)
punct(remark-33, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#gaffes

stumble :: People have been predicting Paramount would stumble ever since `` Beverly Hills Cop '' in 1984 ./.
nsubj(predicting-4, People-1)
aux(predicting-4, have-2)
aux(predicting-4, been-3)
root(ROOT-0, predicting-4)
nsubj(stumble-7, Paramount-5)
aux(stumble-7, would-6)
ccomp(predicting-4, stumble-7)
advmod(stumble-7, ever-8)
case(Cop-13, since-9)
punct(Cop-13, ``-10)
compound(Cop-13, Beverly-11)
compound(Cop-13, Hills-12)
nmod:since(stumble-7, Cop-13)
punct(Cop-13, ''-14)
case(1984-16, in-15)
nmod:in(Cop-13, 1984-16)
punct(predicting-4, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#paramount

stumble :: London share prices finished a bumpy session little changed Monday , after the market stumbled on news of an unexpected rise in U.K. interest rates ./.
compound(prices-3, London-1)
compound(prices-3, share-2)
nsubj(finished-4, prices-3)
root(ROOT-0, finished-4)
det(session-7, a-5)
amod(session-7, bumpy-6)
nsubj(changed-9, session-7)
advmod(changed-9, little-8)
ccomp(finished-4, changed-9)
nmod:tmod(changed-9, Monday-10)
punct(changed-9, ,-11)
mark(stumbled-15, after-12)
det(market-14, the-13)
nsubj(stumbled-15, market-14)
advcl(changed-9, stumbled-15)
case(news-17, on-16)
nmod:on(stumbled-15, news-17)
case(rise-21, of-18)
det(rise-21, an-19)
amod(rise-21, unexpected-20)
nmod:of(news-17, rise-21)
case(rates-25, in-22)
compound(rates-25, U.K.-23)
compound(rates-25, interest-24)
nmod:in(rise-21, rates-25)
punct(finished-4, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#market

stumble :: Sometimes it stumbled ./.
advmod(stumbled-3, Sometimes-1)
nsubj(stumbled-3, it-2)
root(ROOT-0, stumbled-3)
punct(stumbled-3, .-4)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#it

stumble :: Colgate Venture has stumbled , too ./.
compound(Venture-2, Colgate-1)
nsubj(stumbled-4, Venture-2)
aux(stumbled-4, has-3)
root(ROOT-0, stumbled-4)
punct(stumbled-4, ,-5)
advmod(stumbled-4, too-6)
punct(stumbled-4, .-7)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#venture

stumble :: The once high-flying company stumbled in 1986 when competition intensified in the mainframe market , and it has been revamping its product line since then ./.
det(company-4, The-1)
advmod(company-4, once-2)
amod(company-4, high-flying-3)
nsubj(stumbled-5, company-4)
root(ROOT-0, stumbled-5)
case(1986-7, in-6)
nmod:in(stumbled-5, 1986-7)
dep(stumbled-5, when-8)
dep(when-8, competition-9)
acl(competition-9, intensified-10)
case(market-14, in-11)
det(market-14, the-12)
compound(market-14, mainframe-13)
nmod:in(intensified-10, market-14)
punct(competition-9, ,-15)
cc(competition-9, and-16)
nsubj(revamping-20, it-17)
aux(revamping-20, has-18)
aux(revamping-20, been-19)
dep(when-8, revamping-20)
conj:and(competition-9, revamping-20)
nmod:poss(line-23, its-21)
compound(line-23, product-22)
dobj(revamping-20, line-23)
case(then-25, since-24)
nmod:since(revamping-20, then-25)
punct(stumbled-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#company

stumble :: But other stumbling blocks on the way to being a world-class news agency are not so simple , because they 're held in place by a half-century of political inertia ./.
cc(simple-17, But-1)
amod(blocks-4, other-2)
amod(blocks-4, stumbling-3)
nsubj(simple-17, blocks-4)
case(way-7, on-5)
det(way-7, the-6)
nmod:on(blocks-4, way-7)
mark(agency-13, to-8)
cop(agency-13, being-9)
det(agency-13, a-10)
amod(agency-13, world-class-11)
compound(agency-13, news-12)
acl(way-7, agency-13)
cop(simple-17, are-14)
neg(simple-17, not-15)
advmod(simple-17, so-16)
root(ROOT-0, simple-17)
punct(simple-17, ,-18)
mark(held-22, because-19)
nsubjpass(held-22, they-20)
auxpass(held-22, 're-21)
advcl(simple-17, held-22)
case(place-24, in-23)
nmod:in(held-22, place-24)
case(half-century-27, by-25)
det(half-century-27, a-26)
nmod:agent(held-22, half-century-27)
case(inertia-30, of-28)
amod(inertia-30, political-29)
nmod:of(half-century-27, inertia-30)
punct(simple-17, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#blocks

stumble :: In his excitement , he has stumbled into hot-dog territory with naivete , which is characteristic of the big , brash and growing metropolis on the banks of Lake Michigan ./.
case(excitement-3, In-1)
nmod:poss(excitement-3, his-2)
nmod:in(stumbled-7, excitement-3)
punct(stumbled-7, ,-4)
nsubj(stumbled-7, he-5)
aux(stumbled-7, has-6)
root(ROOT-0, stumbled-7)
case(territory-10, into-8)
amod(territory-10, hot-dog-9)
nmod:into(stumbled-7, territory-10)
case(naivete-12, with-11)
nmod:with(territory-10, naivete-12)
nsubj(characteristic-16, naivete-12)
punct(naivete-12, ,-13)
ref(naivete-12, which-14)
cop(characteristic-16, is-15)
acl:relcl(naivete-12, characteristic-16)
case(metropolis-24, of-17)
det(metropolis-24, the-18)
amod(metropolis-24, big-19)
punct(big-19, ,-20)
conj:and(big-19, brash-21)
amod(metropolis-24, brash-21)
cc(big-19, and-22)
conj:and(big-19, growing-23)
amod(metropolis-24, growing-23)
nmod:of(characteristic-16, metropolis-24)
case(banks-27, on-25)
det(banks-27, the-26)
nmod:on(metropolis-24, banks-27)
case(Michigan-30, of-28)
compound(Michigan-30, Lake-29)
nmod:of(banks-27, Michigan-30)
punct(stumbled-7, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#he

stumble :: Johnson & Johnson may have stumbled upon a Fountain of Youth cream , according to preliminary research released yesterday ./.
nsubj(stumbled-6, Johnson-1)
cc(Johnson-1, &-2)
conj:&(Johnson-1, Johnson-3)
nsubj(stumbled-6, Johnson-3)
aux(stumbled-6, may-4)
aux(stumbled-6, have-5)
root(ROOT-0, stumbled-6)
case(Fountain-9, upon-7)
det(Fountain-9, a-8)
nmod:upon(stumbled-6, Fountain-9)
case(cream-12, of-10)
compound(cream-12, Youth-11)
nmod:of(Fountain-9, cream-12)
punct(stumbled-6, ,-13)
case(research-17, according-14)
mwe(according-14, to-15)
amod(research-17, preliminary-16)
nmod:according_to(stumbled-6, research-17)
acl(research-17, released-18)
nmod:tmod(released-18, yesterday-19)
punct(stumbled-6, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#johnson

stumble :: A sales representative , who is trying out as an announcer , first talks too slowly , then stumbles when asked to speed up ./.
det(representative-3, A-1)
compound(representative-3, sales-2)
nsubj(trying-7, representative-3)
nsubj(stumbles-19, representative-3)
punct(representative-3, ,-4)
ref(representative-3, who-5)
aux(trying-7, is-6)
acl:relcl(representative-3, trying-7)
compound:prt(trying-7, out-8)
case(announcer-11, as-9)
det(announcer-11, an-10)
nmod:as(trying-7, announcer-11)
punct(representative-3, ,-12)
amod(talks-14, first-13)
appos(representative-3, talks-14)
advmod(slowly-16, too-15)
advmod(talks-14, slowly-16)
punct(representative-3, ,-17)
advmod(stumbles-19, then-18)
root(ROOT-0, stumbles-19)
advmod(asked-21, when-20)
advcl(stumbles-19, asked-21)
mark(speed-23, to-22)
xcomp(asked-21, speed-23)
compound:prt(speed-23, up-24)
punct(stumbles-19, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#representative

stumble :: The once high-flying company stumbled in 1986 when competition intensified in the mainframe market , and it has been revamping its product line since then ./.
det(company-4, The-1)
advmod(company-4, once-2)
amod(company-4, high-flying-3)
nsubj(stumbled-5, company-4)
root(ROOT-0, stumbled-5)
case(1986-7, in-6)
nmod:in(stumbled-5, 1986-7)
dep(stumbled-5, when-8)
dep(when-8, competition-9)
acl(competition-9, intensified-10)
case(market-14, in-11)
det(market-14, the-12)
compound(market-14, mainframe-13)
nmod:in(intensified-10, market-14)
punct(competition-9, ,-15)
cc(competition-9, and-16)
nsubj(revamping-20, it-17)
aux(revamping-20, has-18)
aux(revamping-20, been-19)
dep(when-8, revamping-20)
conj:and(competition-9, revamping-20)
nmod:poss(line-23, its-21)
compound(line-23, product-22)
dobj(revamping-20, line-23)
case(then-25, since-24)
nmod:since(revamping-20, then-25)
punct(stumbled-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#company

stumble :: With Iowa and New Hampshire behind them -- and victories for Rep. Richard Gephardt and Gov. Michael Dukakis -- the Democratic candidates now stumble South locked in a struggle that more and more experts and party leaders believe will go the distance ./.
case(Iowa-2, With-1)
nmod:with(stumble-24, Iowa-2)
cc(Iowa-2, and-3)
compound(Hampshire-5, New-4)
conj:and(Iowa-2, Hampshire-5)
nmod:with(stumble-24, Hampshire-5)
case(them-7, behind-6)
nmod:behind(Iowa-2, them-7)
punct(Iowa-2, ---8)
cc(Iowa-2, and-9)
conj:and(Iowa-2, victories-10)
nmod:with(stumble-24, victories-10)
case(Gephardt-14, for-11)
compound(Gephardt-14, Rep.-12)
compound(Gephardt-14, Richard-13)
nmod:for(victories-10, Gephardt-14)
cc(Gephardt-14, and-15)
compound(Dukakis-18, Gov.-16)
compound(Dukakis-18, Michael-17)
nmod:for(victories-10, Dukakis-18)
conj:and(Gephardt-14, Dukakis-18)
punct(stumble-24, ---19)
det(candidates-22, the-20)
amod(candidates-22, Democratic-21)
nsubj(stumble-24, candidates-22)
advmod(stumble-24, now-23)
root(ROOT-0, stumble-24)
advmod(locked-26, South-25)
xcomp(stumble-24, locked-26)
case(struggle-29, in-27)
det(struggle-29, a-28)
nmod:in(locked-26, struggle-29)
dobj(believe-38, struggle-29)
ref(struggle-29, that-30)
amod(experts-34, more-31)
cc(more-31, and-32)
conj:and(more-31, more-33)
amod(experts-34, more-33)
nsubj(believe-38, experts-34)
cc(experts-34, and-35)
compound(leaders-37, party-36)
conj:and(experts-34, leaders-37)
nsubj(believe-38, leaders-37)
acl:relcl(struggle-29, believe-38)
aux(go-40, will-39)
ccomp(believe-38, go-40)
det(distance-42, the-41)
dobj(go-40, distance-42)
punct(stumble-24, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#candidates

stumble :: But , he suspects , something may be happening: a steady disillusionment with Mr. Bush that grows out of his stumbling explanations of his role in the Iran-Contra affair , `` his loss of grace under pressure '' with TV 's Dan Rather and other factors ./.
cc(happening-9, But-1)
punct(suspects-4, ,-2)
nsubj(suspects-4, he-3)
parataxis(happening-9, suspects-4)
punct(suspects-4, ,-5)
nsubj(happening-9, something-6)
aux(happening-9, may-7)
aux(happening-9, be-8)
root(ROOT-0, happening-9)
punct(happening-9, :-10)
det(disillusionment-13, a-11)
amod(disillusionment-13, steady-12)
dep(happening-9, disillusionment-13)
nsubj(grows-18, disillusionment-13)
case(Bush-16, with-14)
compound(Bush-16, Mr.-15)
nmod:with(disillusionment-13, Bush-16)
ref(disillusionment-13, that-17)
acl:relcl(disillusionment-13, grows-18)
case(explanations-23, out-19)
mwe(out-19, of-20)
nmod:poss(explanations-23, his-21)
amod(explanations-23, stumbling-22)
nmod:out_of(grows-18, explanations-23)
case(role-26, of-24)
nmod:poss(role-26, his-25)
nmod:of(explanations-23, role-26)
case(affair-30, in-27)
det(affair-30, the-28)
compound(affair-30, Iran-Contra-29)
nmod:in(role-26, affair-30)
punct(disillusionment-13, ,-31)
punct(disillusionment-13, ``-32)
nmod:poss(loss-34, his-33)
dep(disillusionment-13, loss-34)
case(grace-36, of-35)
nmod:of(loss-34, grace-36)
case(pressure-38, under-37)
nmod:under(loss-34, pressure-38)
punct(pressure-38, ''-39)
case(Dan-43, with-40)
nmod:poss(Dan-43, TV-41)
case(TV-41, 's-42)
nmod:with(pressure-38, Dan-43)
amod(factors-47, Rather-44)
cc(Rather-44, and-45)
conj:and(Rather-44, other-46)
amod(factors-47, other-46)
dep(pressure-38, factors-47)
punct(happening-9, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#explanations

stumble :: He stumbled on a new act while attending a tent revival in Oklahoma in 1968 ./.
nsubj(stumbled-2, He-1)
root(ROOT-0, stumbled-2)
case(act-6, on-3)
det(act-6, a-4)
amod(act-6, new-5)
nmod:on(stumbled-2, act-6)
mark(attending-8, while-7)
advcl(stumbled-2, attending-8)
det(revival-11, a-9)
compound(revival-11, tent-10)
dobj(attending-8, revival-11)
case(Oklahoma-13, in-12)
nmod:in(revival-11, Oklahoma-13)
case(1968-15, in-14)
nmod:in(attending-8, 1968-15)
punct(stumbled-2, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#he

stumble :: Mr. Xu stumbles occasionally reading his lines and has to ask his wife for help ./.
compound(Xu-2, Mr.-1)
nsubj(stumbles-3, Xu-2)
nsubj(has-9, Xu-2)
nsubj:xsubj(ask-11, Xu-2)
root(ROOT-0, stumbles-3)
advmod(reading-5, occasionally-4)
xcomp(stumbles-3, reading-5)
nmod:poss(lines-7, his-6)
dobj(reading-5, lines-7)
cc(stumbles-3, and-8)
conj:and(stumbles-3, has-9)
mark(ask-11, to-10)
xcomp(has-9, ask-11)
nmod:poss(wife-13, his-12)
dobj(ask-11, wife-13)
case(help-15, for-14)
nmod:for(ask-11, help-15)
punct(stumbles-3, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#xu

stumble :: The government 's economic program , introduced with much enthusiasm at the beginning of the year , has stumbled clumsily from the start ./.
det(government-2, The-1)
nmod:poss(program-5, government-2)
case(government-2, 's-3)
amod(program-5, economic-4)
nsubj(stumbled-19, program-5)
punct(program-5, ,-6)
acl(program-5, introduced-7)
case(enthusiasm-10, with-8)
amod(enthusiasm-10, much-9)
nmod:with(introduced-7, enthusiasm-10)
case(beginning-13, at-11)
det(beginning-13, the-12)
nmod:at(enthusiasm-10, beginning-13)
case(year-16, of-14)
det(year-16, the-15)
nmod:of(beginning-13, year-16)
punct(program-5, ,-17)
aux(stumbled-19, has-18)
root(ROOT-0, stumbled-19)
advmod(stumbled-19, clumsily-20)
case(start-23, from-21)
det(start-23, the-22)
nmod:from(stumbled-19, start-23)
punct(stumbled-19, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#program

stumble :: The U.S. is stumbling toward another energy crisis thanks to public policies that discourage utilities from investing in new electric generating facilities , particularly nuclear ones ./.
det(U.S.-2, The-1)
nsubj(stumbling-4, U.S.-2)
aux(stumbling-4, is-3)
root(ROOT-0, stumbling-4)
case(crisis-8, toward-5)
det(crisis-8, another-6)
compound(crisis-8, energy-7)
nmod:toward(stumbling-4, crisis-8)
dobj(stumbling-4, thanks-9)
case(policies-12, to-10)
amod(policies-12, public-11)
nmod:to(thanks-9, policies-12)
nsubj(discourage-14, policies-12)
ref(policies-12, that-13)
acl:relcl(policies-12, discourage-14)
dobj(discourage-14, utilities-15)
mark(investing-17, from-16)
advcl(discourage-14, investing-17)
case(facilities-22, in-18)
amod(facilities-22, new-19)
compound(facilities-22, electric-20)
compound(facilities-22, generating-21)
nmod:in(investing-17, facilities-22)
punct(thanks-9, ,-23)
advmod(ones-26, particularly-24)
amod(ones-26, nuclear-25)
appos(thanks-9, ones-26)
punct(stumbling-4, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#thanks

stumble :: For the first century of its existence , the republic somehow managed to stumble along , winning independence , surviving civil war , without any pledge at all ./.
case(century-4, For-1)
det(century-4, the-2)
amod(century-4, first-3)
nmod:for(managed-12, century-4)
case(existence-7, of-5)
nmod:poss(existence-7, its-6)
nmod:of(century-4, existence-7)
punct(managed-12, ,-8)
det(republic-10, the-9)
nsubj(managed-12, republic-10)
nsubj:xsubj(stumble-14, republic-10)
advmod(managed-12, somehow-11)
root(ROOT-0, managed-12)
mark(stumble-14, to-13)
xcomp(managed-12, stumble-14)
advmod(stumble-14, along-15)
punct(stumble-14, ,-16)
xcomp(stumble-14, winning-17)
dobj(winning-17, independence-18)
punct(stumble-14, ,-19)
xcomp(stumble-14, surviving-20)
amod(war-22, civil-21)
dobj(surviving-20, war-22)
punct(stumble-14, ,-23)
case(pledge-26, without-24)
det(pledge-26, any-25)
nmod:without(stumble-14, pledge-26)
case(all-28, at-27)
nmod:at(pledge-26, all-28)
punct(managed-12, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#republic

stumble :: While insiders at Time and Warner did n't rule out a resumption of talks , they acknowledged that difficulties in structuring a transaction and valuing the various assets of both companies have presented stumbling blocks ./.
mark(rule-9, While-1)
nsubj(rule-9, insiders-2)
case(Time-4, at-3)
nmod:at(insiders-2, Time-4)
cc(Time-4, and-5)
nmod:at(insiders-2, Warner-6)
conj:and(Time-4, Warner-6)
aux(rule-9, did-7)
neg(rule-9, n't-8)
advcl(acknowledged-17, rule-9)
compound:prt(rule-9, out-10)
det(resumption-12, a-11)
dobj(rule-9, resumption-12)
case(talks-14, of-13)
nmod:of(resumption-12, talks-14)
punct(acknowledged-17, ,-15)
nsubj(acknowledged-17, they-16)
root(ROOT-0, acknowledged-17)
mark(presented-33, that-18)
nsubj(presented-33, difficulties-19)
mark(structuring-21, in-20)
acl(difficulties-19, structuring-21)
det(transaction-23, a-22)
dobj(structuring-21, transaction-23)
cc(structuring-21, and-24)
acl(difficulties-19, valuing-25)
conj:and(structuring-21, valuing-25)
det(assets-28, the-26)
amod(assets-28, various-27)
dobj(valuing-25, assets-28)
case(companies-31, of-29)
det(companies-31, both-30)
nmod:of(assets-28, companies-31)
aux(presented-33, have-32)
ccomp(acknowledged-17, presented-33)
amod(blocks-35, stumbling-34)
dobj(presented-33, blocks-35)
punct(acknowledged-17, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#blocks

stumble :: The accident began Sept. 13 , 1987 , when villagers in Goiania , Brazil , stumbled on some radiotherapy equipment abandoned by a former health clinic there ./.
det(accident-2, The-1)
nsubj(began-3, accident-2)
root(ROOT-0, began-3)
nmod:tmod(began-3, Sept.-4)
nummod(Sept.-4, 13-5)
punct(Sept.-4, ,-6)
nummod(Sept.-4, 1987-7)
punct(Sept.-4, ,-8)
advmod(stumbled-16, when-9)
nsubj(stumbled-16, villagers-10)
case(Goiania-12, in-11)
nmod:in(villagers-10, Goiania-12)
punct(Goiania-12, ,-13)
appos(Goiania-12, Brazil-14)
punct(Goiania-12, ,-15)
acl:relcl(Sept.-4, stumbled-16)
case(equipment-20, on-17)
det(equipment-20, some-18)
compound(equipment-20, radiotherapy-19)
nmod:on(stumbled-16, equipment-20)
acl(equipment-20, abandoned-21)
case(clinic-26, by-22)
det(clinic-26, a-23)
amod(clinic-26, former-24)
compound(clinic-26, health-25)
nmod:by(abandoned-21, clinic-26)
advmod(clinic-26, there-27)
punct(began-3, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#villagers

stumble :: For Latin America , which has generally stumbled through years of stagnation or low growth since it became mired in foreign debt in 1982 , Chile 's economic record is enviable ./.
case(America-3, For-1)
compound(America-3, Latin-2)
nsubj(stumbled-8, America-3)
nmod:for(enviable-31, America-3)
punct(America-3, ,-4)
ref(America-3, which-5)
aux(stumbled-8, has-6)
advmod(stumbled-8, generally-7)
acl:relcl(America-3, stumbled-8)
case(years-10, through-9)
nmod:through(stumbled-8, years-10)
case(stagnation-12, of-11)
nmod:of(years-10, stagnation-12)
cc(stagnation-12, or-13)
amod(growth-15, low-14)
nmod:of(years-10, growth-15)
conj:or(stagnation-12, growth-15)
mark(became-18, since-16)
nsubj(became-18, it-17)
advcl(stumbled-8, became-18)
xcomp(became-18, mired-19)
case(debt-22, in-20)
amod(debt-22, foreign-21)
nmod:in(mired-19, debt-22)
case(1982-24, in-23)
nmod:in(became-18, 1982-24)
punct(America-3, ,-25)
nmod:poss(record-29, Chile-26)
case(Chile-26, 's-27)
amod(record-29, economic-28)
nsubj(enviable-31, record-29)
cop(enviable-31, is-30)
root(ROOT-0, enviable-31)
punct(enviable-31, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#america

stumble :: Finding such a fecund gold field came as a surprise to Reynolds , which stumbled across the precious metal when it was looking for bauxite , a claylike substance that holds alumina , the basic ingredient in aluminum ingot ./.
csubj(came-7, Finding-1)
amod(field-6, such-2)
det(field-6, a-3)
amod(field-6, fecund-4)
compound(field-6, gold-5)
dobj(Finding-1, field-6)
root(ROOT-0, came-7)
case(surprise-10, as-8)
det(surprise-10, a-9)
nmod:as(came-7, surprise-10)
case(Reynolds-12, to-11)
nmod:to(surprise-10, Reynolds-12)
nsubj(stumbled-15, Reynolds-12)
punct(Reynolds-12, ,-13)
ref(Reynolds-12, which-14)
acl:relcl(Reynolds-12, stumbled-15)
case(metal-19, across-16)
det(metal-19, the-17)
amod(metal-19, precious-18)
nmod:across(stumbled-15, metal-19)
advmod(looking-23, when-20)
nsubj(looking-23, it-21)
aux(looking-23, was-22)
advcl(stumbled-15, looking-23)
case(bauxite-25, for-24)
nmod:for(looking-23, bauxite-25)
punct(bauxite-25, ,-26)
det(substance-29, a-27)
amod(substance-29, claylike-28)
appos(bauxite-25, substance-29)
nsubj(holds-31, substance-29)
ref(substance-29, that-30)
acl:relcl(substance-29, holds-31)
dobj(holds-31, alumina-32)
punct(alumina-32, ,-33)
det(ingredient-36, the-34)
amod(ingredient-36, basic-35)
appos(alumina-32, ingredient-36)
case(ingot-39, in-37)
compound(ingot-39, aluminum-38)
nmod:in(ingredient-36, ingot-39)
punct(came-7, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#reynolds

stumble :: But there were stumbling blocks from the start ./.
cc(were-3, But-1)
expl(were-3, there-2)
root(ROOT-0, were-3)
amod(blocks-5, stumbling-4)
nsubj(were-3, blocks-5)
case(start-8, from-6)
det(start-8, the-7)
nmod:from(blocks-5, start-8)
punct(were-3, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#blocks

stumble :: The short-sellers have come bounding in , waiting for the company to stumble ./.
det(short-sellers-2, The-1)
nsubj(come-4, short-sellers-2)
aux(come-4, have-3)
root(ROOT-0, come-4)
xcomp(come-4, bounding-5)
advmod(bounding-5, in-6)
punct(come-4, ,-7)
xcomp(come-4, waiting-8)
mark(stumble-13, for-9)
det(company-11, the-10)
nsubj(stumble-13, company-11)
mark(stumble-13, to-12)
advcl(waiting-8, stumble-13)
punct(come-4, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#company

stumble :: They 're stumbling through middle age beset by debts , boring jobs , needy parents , unloving children ./.
nsubj(stumbling-3, They-1)
aux(stumbling-3, 're-2)
root(ROOT-0, stumbling-3)
case(age-6, through-4)
amod(age-6, middle-5)
nmod:through(stumbling-3, age-6)
acl(age-6, beset-7)
case(debts-9, by-8)
nmod:by(beset-7, debts-9)
punct(debts-9, ,-10)
amod(jobs-12, boring-11)
conj(debts-9, jobs-12)
punct(debts-9, ,-13)
amod(parents-15, needy-14)
conj(debts-9, parents-15)
punct(debts-9, ,-16)
amod(children-18, unloving-17)
conj(debts-9, children-18)
punct(stumbling-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#they

stumble :: All this has left Theodore Levitt , the Harvard professor who popularized the theory , stumbling on Madison Avenue ./.
det:predet(this-2, All-1)
nsubj(left-4, this-2)
aux(left-4, has-3)
root(ROOT-0, left-4)
compound(Levitt-6, Theodore-5)
dobj(left-4, Levitt-6)
punct(Levitt-6, ,-7)
det(professor-10, the-8)
compound(professor-10, Harvard-9)
appos(Levitt-6, professor-10)
nsubj(popularized-12, professor-10)
ref(professor-10, who-11)
acl:relcl(professor-10, popularized-12)
det(theory-14, the-13)
dobj(popularized-12, theory-14)
punct(popularized-12, ,-15)
advcl(popularized-12, stumbling-16)
case(Avenue-19, on-17)
compound(Avenue-19, Madison-18)
nmod:on(stumbling-16, Avenue-19)
punct(left-4, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#avenue

stumble :: After rattling off Bell Atlantic , BellSouth and Southwestern Bell , he stumbled ./.
mark(rattling-2, After-1)
advcl(stumbled-13, rattling-2)
compound:prt(rattling-2, off-3)
compound(Atlantic-5, Bell-4)
dobj(rattling-2, Atlantic-5)
punct(Atlantic-5, ,-6)
dobj(rattling-2, BellSouth-7)
conj:and(Atlantic-5, BellSouth-7)
cc(Atlantic-5, and-8)
compound(Bell-10, Southwestern-9)
dobj(rattling-2, Bell-10)
conj:and(Atlantic-5, Bell-10)
punct(stumbled-13, ,-11)
nsubj(stumbled-13, he-12)
root(ROOT-0, stumbled-13)
punct(stumbled-13, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#he

stumble :: They do n't stumble over all the mentions of things like thermoplastics , the latest in feather-light composite materials , which replace metal in Stealth airframes ./.
nsubj(stumble-4, They-1)
aux(stumble-4, do-2)
neg(stumble-4, n't-3)
root(ROOT-0, stumble-4)
case(mentions-8, over-5)
det:predet(mentions-8, all-6)
det(mentions-8, the-7)
nmod:over(stumble-4, mentions-8)
case(things-10, of-9)
nmod:of(mentions-8, things-10)
case(thermoplastics-12, like-11)
nmod:like(things-10, thermoplastics-12)
punct(thermoplastics-12, ,-13)
det(latest-15, the-14)
appos(thermoplastics-12, latest-15)
case(materials-19, in-16)
amod(materials-19, feather-light-17)
amod(materials-19, composite-18)
nmod:in(latest-15, materials-19)
nsubj(replace-22, materials-19)
punct(materials-19, ,-20)
ref(materials-19, which-21)
acl:relcl(materials-19, replace-22)
dobj(replace-22, metal-23)
case(airframes-26, in-24)
compound(airframes-26, Stealth-25)
nmod:in(replace-22, airframes-26)
punct(stumble-4, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#they

stumble :: Six years ago , Mr. Slusher stumbled across Harry Fisher while reading about Medal of Honor winners ./.
nummod(years-2, Six-1)
nmod:npmod(ago-3, years-2)
advmod(stumbled-7, ago-3)
punct(stumbled-7, ,-4)
compound(Slusher-6, Mr.-5)
nsubj(stumbled-7, Slusher-6)
root(ROOT-0, stumbled-7)
case(Fisher-10, across-8)
compound(Fisher-10, Harry-9)
nmod:across(stumbled-7, Fisher-10)
mark(reading-12, while-11)
advcl(stumbled-7, reading-12)
case(Medal-14, about-13)
nmod:about(reading-12, Medal-14)
case(winners-17, of-15)
compound(winners-17, Honor-16)
nmod:of(Medal-14, winners-17)
punct(stumbled-7, .-18)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#slusher

stumble :: Then , the Organization of Petroleum Exporting Countries began to stumble , and a plunge in oil prices launched Apex on its final slide ./.
advmod(began-9, Then-1)
punct(began-9, ,-2)
det(Organization-4, the-3)
nsubj(began-9, Organization-4)
nsubj:xsubj(stumble-11, Organization-4)
case(Countries-8, of-5)
compound(Countries-8, Petroleum-6)
amod(Countries-8, Exporting-7)
nmod:of(Organization-4, Countries-8)
root(ROOT-0, began-9)
mark(stumble-11, to-10)
xcomp(began-9, stumble-11)
punct(began-9, ,-12)
cc(began-9, and-13)
det(plunge-15, a-14)
nsubj(launched-19, plunge-15)
case(prices-18, in-16)
compound(prices-18, oil-17)
nmod:in(plunge-15, prices-18)
conj:and(began-9, launched-19)
dobj(launched-19, Apex-20)
case(slide-24, on-21)
nmod:poss(slide-24, its-22)
amod(slide-24, final-23)
nmod:on(launched-19, slide-24)
punct(began-9, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#organization

stumble :: But while the Kremlin preaches openness , Russia 's $ 2.2 trillion economy stumbles along in darkness , its inner workings shrouded in secrecy and its inefficiencies masked by deceit , Western experts say ./.
cc(stumbles-14, But-1)
mark(preaches-5, while-2)
det(Kremlin-4, the-3)
nsubj(preaches-5, Kremlin-4)
advcl(stumbles-14, preaches-5)
dobj(preaches-5, openness-6)
punct(stumbles-14, ,-7)
nmod:poss(economy-13, Russia-8)
case(Russia-8, 's-9)
amod(economy-13, $-10)
compound(trillion-12, 2.2-11)
nummod($-10, trillion-12)
nsubj(stumbles-14, economy-13)
dep(say-34, stumbles-14)
advmod(stumbles-14, along-15)
case(darkness-17, in-16)
nmod:in(stumbles-14, darkness-17)
punct(stumbles-14, ,-18)
nmod:poss(workings-21, its-19)
amod(workings-21, inner-20)
nsubj(shrouded-22, workings-21)
ccomp(stumbles-14, shrouded-22)
case(secrecy-24, in-23)
nmod:in(shrouded-22, secrecy-24)
cc(secrecy-24, and-25)
nmod:poss(inefficiencies-27, its-26)
nmod:in(shrouded-22, inefficiencies-27)
conj:and(secrecy-24, inefficiencies-27)
acl(secrecy-24, masked-28)
case(deceit-30, by-29)
nmod:by(masked-28, deceit-30)
punct(stumbles-14, ,-31)
amod(experts-33, Western-32)
nsubj(say-34, experts-33)
root(ROOT-0, say-34)
punct(say-34, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#economy

stumble :: In 1813 , a Welsh missionary named Thomas Jones stumbled across the hills into Meghalaya and began pushing the native Khasis , who today make up half the population , along the rocky path toward modernization and Christianity ./.
case(1813-2, In-1)
root(ROOT-0, 1813-2)
punct(1813-2, ,-3)
det(missionary-6, a-4)
compound(missionary-6, Welsh-5)
root(,-3, missionary-6)
acl(missionary-6, named-7)
compound(Jones-9, Thomas-8)
nsubj(stumbled-10, Jones-9)
nsubj(began-17, Jones-9)
ccomp(named-7, stumbled-10)
case(hills-13, across-11)
det(hills-13, the-12)
nmod:across(stumbled-10, hills-13)
case(Meghalaya-15, into-14)
nmod:into(stumbled-10, Meghalaya-15)
cc(stumbled-10, and-16)
ccomp(named-7, began-17)
conj:and(stumbled-10, began-17)
xcomp(began-17, pushing-18)
det(Khasis-21, the-19)
amod(Khasis-21, native-20)
dobj(pushing-18, Khasis-21)
nsubj(make-25, Khasis-21)
punct(Khasis-21, ,-22)
ref(Khasis-21, who-23)
dep(make-25, today-24)
acl:relcl(Khasis-21, make-25)
compound:prt(make-25, up-26)
det:predet(population-29, half-27)
det(population-29, the-28)
dobj(make-25, population-29)
punct(Khasis-21, ,-30)
case(path-34, along-31)
det(path-34, the-32)
compound(path-34, rocky-33)
nmod:along(pushing-18, path-34)
case(modernization-36, toward-35)
nmod:toward(path-34, modernization-36)
cc(modernization-36, and-37)
nmod:toward(path-34, Christianity-38)
conj:and(modernization-36, Christianity-38)
punct(missionary-6, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#jones

stumble :: But expert systems stumble on many problems involving fuzzy data , since they require too many rules covering too many variations ./.
cc(stumble-4, But-1)
amod(systems-3, expert-2)
nsubj(stumble-4, systems-3)
root(ROOT-0, stumble-4)
case(problems-7, on-5)
amod(problems-7, many-6)
nmod:on(stumble-4, problems-7)
acl(problems-7, involving-8)
amod(data-10, fuzzy-9)
dobj(involving-8, data-10)
punct(stumble-4, ,-11)
mark(require-14, since-12)
nsubj(require-14, they-13)
advcl(stumble-4, require-14)
advmod(many-16, too-15)
amod(rules-17, many-16)
dobj(require-14, rules-17)
acl(rules-17, covering-18)
advmod(many-20, too-19)
amod(variations-21, many-20)
dobj(covering-18, variations-21)
punct(stumble-4, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#systems

stumble :: He stumbles home in the middle of yet another rainy , drugged night and tries to kill himself by guzzling iodine ./.
nsubj(stumbles-2, He-1)
nsubj(tries-15, He-1)
nsubj:xsubj(kill-17, He-1)
root(ROOT-0, stumbles-2)
dobj(stumbles-2, home-3)
case(middle-6, in-4)
det(middle-6, the-5)
nmod:in(stumbles-2, middle-6)
case(night-13, of-7)
advmod(night-13, yet-8)
det(night-13, another-9)
amod(night-13, rainy-10)
punct(night-13, ,-11)
amod(night-13, drugged-12)
nmod:of(middle-6, night-13)
cc(stumbles-2, and-14)
conj:and(stumbles-2, tries-15)
mark(kill-17, to-16)
xcomp(tries-15, kill-17)
dobj(kill-17, himself-18)
mark(guzzling-20, by-19)
advcl(kill-17, guzzling-20)
dobj(guzzling-20, iodine-21)
punct(stumbles-2, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#home

stumble :: In 1936 a German chemist , Gerhard Schrader , stumbled on a phosphorus compound extremely poisonous to insects ./.
case(1936-2, In-1)
nmod:in(stumbled-10, 1936-2)
det(chemist-5, a-3)
amod(chemist-5, German-4)
nsubj(stumbled-10, chemist-5)
punct(chemist-5, ,-6)
compound(Schrader-8, Gerhard-7)
appos(chemist-5, Schrader-8)
punct(chemist-5, ,-9)
root(ROOT-0, stumbled-10)
case(compound-14, on-11)
det(compound-14, a-12)
compound(compound-14, phosphorus-13)
nmod:on(stumbled-10, compound-14)
advmod(poisonous-16, extremely-15)
amod(compound-14, poisonous-16)
case(insects-18, to-17)
nmod:to(poisonous-16, insects-18)
punct(stumbled-10, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#chemist

stumble :: `` From an issuer 's perspective , this is a market that occasionally stumbles over the truth but quickly picks itself up and hurries on as if nothing has happened , '' said Joseph Fichera , a vice president at Smith Barney , Harris Upham & Co . , paraphrasing Winston Churchill ./.
punct(said-33, ``-1)
case(perspective-6, From-2)
det(issuer-4, an-3)
nmod:poss(perspective-6, issuer-4)
case(issuer-4, 's-5)
nmod:from(market-11, perspective-6)
punct(market-11, ,-7)
nsubj(market-11, this-8)
cop(market-11, is-9)
det(market-11, a-10)
nsubj(stumbles-14, market-11)
nsubj(picks-20, market-11)
ccomp(said-33, market-11)
ref(market-11, that-12)
advmod(stumbles-14, occasionally-13)
acl:relcl(market-11, stumbles-14)
case(truth-17, over-15)
det(truth-17, the-16)
nmod:over(stumbles-14, truth-17)
cc(stumbles-14, but-18)
advmod(picks-20, quickly-19)
acl:relcl(market-11, picks-20)
conj:but(stumbles-14, picks-20)
dobj(picks-20, itself-21)
compound:prt(picks-20, up-22)
cc(picks-20, and-23)
conj:but(stumbles-14, hurries-24)
conj:and(picks-20, hurries-24)
mark(happened-30, on-25)
mark(happened-30, as-26)
mwe(as-26, if-27)
nsubj(happened-30, nothing-28)
aux(happened-30, has-29)
acl(hurries-24, happened-30)
punct(said-33, ,-31)
punct(said-33, ''-32)
root(ROOT-0, said-33)
compound(Fichera-35, Joseph-34)
nsubj(said-33, Fichera-35)
punct(Fichera-35, ,-36)
det(president-39, a-37)
compound(president-39, vice-38)
appos(Fichera-35, president-39)
case(Upham-45, at-40)
compound(Upham-45, Smith-41)
compound(Upham-45, Barney-42)
punct(Upham-45, ,-43)
nmod:at(president-39, Harris-44)
conj:&(Upham-45, Harris-44)
nmod:at(president-39, Upham-45)
cc(Upham-45, &-46)
nmod:at(president-39, Co-47)
conj:&(Upham-45, Co-47)
punct(said-33, .-48)
root(ROOT-0, ,-1)
root(,-1, paraphrasing-2)
compound(Churchill-4, Winston-3)
dobj(paraphrasing-2, Churchill-4)
punct(paraphrasing-2, .-5)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#market

stumble :: But Sen. Quayle stumbled twice during the day trying to explain his decision to enter the National Guard in 1969 during the Vietnam War ./.
cc(stumbled-4, But-1)
compound(Quayle-3, Sen.-2)
nsubj(stumbled-4, Quayle-3)
root(ROOT-0, stumbled-4)
advmod(stumbled-4, twice-5)
case(day-8, during-6)
det(day-8, the-7)
nmod:during(stumbled-4, day-8)
acl(day-8, trying-9)
mark(explain-11, to-10)
xcomp(trying-9, explain-11)
nmod:poss(decision-13, his-12)
dobj(explain-11, decision-13)
mark(enter-15, to-14)
acl(decision-13, enter-15)
det(Guard-18, the-16)
compound(Guard-18, National-17)
dobj(enter-15, Guard-18)
case(1969-20, in-19)
nmod:in(enter-15, 1969-20)
case(War-24, during-21)
det(War-24, the-22)
compound(War-24, Vietnam-23)
nmod:during(enter-15, War-24)
punct(stumbled-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#quayle

stumble :: Many American firms are stumbling badly , and most of their problems appear to stem from their mistaken assumption that what works at home will work in Britain ./.
amod(firms-3, Many-1)
amod(firms-3, American-2)
nsubj(stumbling-5, firms-3)
aux(stumbling-5, are-4)
root(ROOT-0, stumbling-5)
advmod(stumbling-5, badly-6)
punct(stumbling-5, ,-7)
cc(stumbling-5, and-8)
nsubj(appear-13, most-9)
nsubj:xsubj(stem-15, most-9)
case(problems-12, of-10)
nmod:poss(problems-12, their-11)
nmod:of(most-9, problems-12)
conj:and(stumbling-5, appear-13)
mark(stem-15, to-14)
xcomp(appear-13, stem-15)
case(assumption-19, from-16)
nmod:poss(assumption-19, their-17)
amod(assumption-19, mistaken-18)
nmod:from(stem-15, assumption-19)
mark(work-26, that-20)
det(works-22, what-21)
nsubj(work-26, works-22)
case(home-24, at-23)
nmod:at(works-22, home-24)
aux(work-26, will-25)
ccomp(assumption-19, work-26)
case(Britain-28, in-27)
nmod:in(work-26, Britain-28)
punct(stumbling-5, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#firms

stumble :: Despite such advantages , News Corp. has occasionally stumbled ./.
case(advantages-3, Despite-1)
amod(advantages-3, such-2)
nmod:despite(stumbled-9, advantages-3)
punct(stumbled-9, ,-4)
compound(Corp.-6, News-5)
nsubj(stumbled-9, Corp.-6)
aux(stumbled-9, has-7)
advmod(stumbled-9, occasionally-8)
root(ROOT-0, stumbled-9)
punct(stumbled-9, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#corp.

stumble :: Chaus said it rebounded the next year , gaining other retail accounts , but since then the company has stumbled on a flurry of problems typical of those hurting the industry ./.
nsubj(said-2, Chaus-1)
root(ROOT-0, said-2)
nsubj(rebounded-4, it-3)
ccomp(said-2, rebounded-4)
det(year-7, the-5)
amod(year-7, next-6)
nmod:tmod(rebounded-4, year-7)
punct(rebounded-4, ,-8)
advcl(rebounded-4, gaining-9)
amod(accounts-12, other-10)
amod(accounts-12, retail-11)
dobj(gaining-9, accounts-12)
punct(rebounded-4, ,-13)
cc(rebounded-4, but-14)
case(then-16, since-15)
nmod:since(stumbled-20, then-16)
det(company-18, the-17)
nsubj(stumbled-20, company-18)
aux(stumbled-20, has-19)
ccomp(said-2, stumbled-20)
conj:but(rebounded-4, stumbled-20)
case(flurry-23, on-21)
det(flurry-23, a-22)
nmod:on(stumbled-20, flurry-23)
case(problems-25, of-24)
nmod:of(flurry-23, problems-25)
amod(problems-25, typical-26)
case(those-28, of-27)
nmod:of(typical-26, those-28)
acl(those-28, hurting-29)
det(industry-31, the-30)
dobj(hurting-29, industry-31)
punct(said-2, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#company

stumble :: But Arkansas Gov. Clinton stumbles with his long-winded nominating speech ./.
cc(stumbles-5, But-1)
compound(Clinton-4, Arkansas-2)
compound(Clinton-4, Gov.-3)
nsubj(stumbles-5, Clinton-4)
root(ROOT-0, stumbles-5)
case(speech-10, with-6)
nmod:poss(speech-10, his-7)
amod(speech-10, long-winded-8)
amod(speech-10, nominating-9)
nmod:with(stumbles-5, speech-10)
punct(stumbles-5, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#clinton

stumble :: The top leadership has stumbled repeatedly in development of force structure and use of force as it pursues an unfocused , open-ended commitment in the Gulf , and yet is questioned by the media only in the vaguest terms , while the military that must put such concepts into practice is left holding the bag when things go wrong ./.
det(leadership-3, The-1)
amod(leadership-3, top-2)
nsubj(stumbled-5, leadership-3)
nsubjpass(questioned-31, leadership-3)
aux(stumbled-5, has-4)
root(ROOT-0, stumbled-5)
advmod(stumbled-5, repeatedly-6)
case(development-8, in-7)
nmod:in(stumbled-5, development-8)
case(structure-11, of-9)
compound(structure-11, force-10)
nmod:of(development-8, structure-11)
cc(development-8, and-12)
nmod:in(stumbled-5, use-13)
conj:and(development-8, use-13)
case(force-15, of-14)
nmod:of(use-13, force-15)
mark(pursues-18, as-16)
nsubj(pursues-18, it-17)
advcl(stumbled-5, pursues-18)
det(commitment-23, an-19)
amod(commitment-23, unfocused-20)
punct(commitment-23, ,-21)
amod(commitment-23, open-ended-22)
dobj(pursues-18, commitment-23)
case(Gulf-26, in-24)
det(Gulf-26, the-25)
nmod:in(commitment-23, Gulf-26)
punct(stumbled-5, ,-27)
cc(stumbled-5, and-28)
advmod(questioned-31, yet-29)
auxpass(questioned-31, is-30)
conj:and(stumbled-5, questioned-31)
case(media-34, by-32)
det(media-34, the-33)
nmod:agent(questioned-31, media-34)
advmod(terms-39, only-35)
case(terms-39, in-36)
det(terms-39, the-37)
amod(terms-39, vaguest-38)
nmod:in(questioned-31, terms-39)
punct(stumbled-5, ,-40)
mark(left-52, while-41)
det(military-43, the-42)
nsubj(put-46, military-43)
nsubjpass(left-52, military-43)
ref(military-43, that-44)
aux(put-46, must-45)
acl:relcl(military-43, put-46)
amod(concepts-48, such-47)
dobj(put-46, concepts-48)
case(practice-50, into-49)
nmod:into(put-46, practice-50)
auxpass(left-52, is-51)
advcl(stumbled-5, left-52)
xcomp(left-52, holding-53)
det(bag-55, the-54)
dobj(holding-53, bag-55)
advmod(go-58, when-56)
nsubj(go-58, things-57)
advcl(left-52, go-58)
xcomp(go-58, wrong-59)
punct(stumbled-5, .-60)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#leadership

stumble :: Knight-Ridder stumbled in one past push into information services ./.
nsubj(stumbled-2, Knight-Ridder-1)
root(ROOT-0, stumbled-2)
case(push-6, in-3)
nummod(push-6, one-4)
amod(push-6, past-5)
nmod:in(stumbled-2, push-6)
case(services-9, into-7)
compound(services-9, information-8)
nmod:into(push-6, services-9)
punct(stumbled-2, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#knight-ridder

stumble :: But the future of the bill remained unclear as the Senate stumbled forward on its version of the measure without the leadership of Lloyd Bentsen , the chairman of the Senate Finance Committee ./.
cc(remained-7, But-1)
det(future-3, the-2)
nsubj(remained-7, future-3)
case(bill-6, of-4)
det(bill-6, the-5)
nmod:of(future-3, bill-6)
root(ROOT-0, remained-7)
xcomp(remained-7, unclear-8)
mark(stumbled-12, as-9)
det(Senate-11, the-10)
nsubj(stumbled-12, Senate-11)
advcl(remained-7, stumbled-12)
advmod(stumbled-12, forward-13)
case(version-16, on-14)
nmod:poss(version-16, its-15)
nmod:on(stumbled-12, version-16)
case(measure-19, of-17)
det(measure-19, the-18)
nmod:of(version-16, measure-19)
case(leadership-22, without-20)
det(leadership-22, the-21)
nmod:without(version-16, leadership-22)
case(Bentsen-25, of-23)
compound(Bentsen-25, Lloyd-24)
nmod:of(leadership-22, Bentsen-25)
punct(Bentsen-25, ,-26)
det(chairman-28, the-27)
appos(Bentsen-25, chairman-28)
case(Committee-33, of-29)
det(Committee-33, the-30)
compound(Committee-33, Senate-31)
compound(Committee-33, Finance-32)
nmod:of(chairman-28, Committee-33)
punct(remained-7, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#senate

stumble :: Peter Lynch , who runs Fidelity Investments ' mammoth Magellan Fund , said the recent performance of the big funds , which stumbled badly late last year , should shoot down the theory that they are `` over the hill . ''/''
compound(Lynch-2, Peter-1)
nsubj(runs-5, Lynch-2)
nsubj(said-13, Lynch-2)
punct(Lynch-2, ,-3)
ref(Lynch-2, who-4)
acl:relcl(Lynch-2, runs-5)
compound(Investments-7, Fidelity-6)
nmod:poss(Fund-11, Investments-7)
case(Investments-7, '-8)
amod(Fund-11, mammoth-9)
compound(Fund-11, Magellan-10)
dobj(runs-5, Fund-11)
punct(Lynch-2, ,-12)
root(ROOT-0, said-13)
det(performance-16, the-14)
amod(performance-16, recent-15)
nsubj(shoot-30, performance-16)
case(funds-20, of-17)
det(funds-20, the-18)
amod(funds-20, big-19)
nmod:of(performance-16, funds-20)
nsubj(stumbled-23, funds-20)
punct(funds-20, ,-21)
ref(funds-20, which-22)
acl:relcl(funds-20, stumbled-23)
advmod(stumbled-23, badly-24)
amod(year-27, late-25)
amod(year-27, last-26)
nmod:tmod(stumbled-23, year-27)
punct(funds-20, ,-28)
aux(shoot-30, should-29)
ccomp(said-13, shoot-30)
case(theory-33, down-31)
det(theory-33, the-32)
nmod:down(shoot-30, theory-33)
mark(hill-40, that-34)
nsubj(hill-40, they-35)
cop(hill-40, are-36)
punct(hill-40, ``-37)
case(hill-40, over-38)
det(hill-40, the-39)
ccomp(theory-33, hill-40)
punct(said-13, .-41)
punct(said-13, ''-42)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: stumble#funds

stumble :: Drafters want to clear up areas of confusion: Some filers this year stumbled over standard deductions on the 1040 long form or over the 1040EZ box asking if they could be claimed as anyone else 's dependents ./.
nsubj(want-2, Drafters-1)
nsubj:xsubj(clear-4, Drafters-1)
root(ROOT-0, want-2)
mark(clear-4, to-3)
xcomp(want-2, clear-4)
compound:prt(clear-4, up-5)
dobj(clear-4, areas-6)
case(confusion-8, of-7)
nmod:of(areas-6, confusion-8)
punct(want-2, :-9)
det(filers-11, Some-10)
nsubj(stumbled-14, filers-11)
det(year-13, this-12)
nmod:tmod(stumbled-14, year-13)
parataxis(want-2, stumbled-14)
case(deductions-17, over-15)
amod(deductions-17, standard-16)
nmod:over(stumbled-14, deductions-17)
nmod:over(stumbled-14, deductions-17')
conj:or(deductions-17, deductions-17')
case(form-22, on-18)
det(form-22, the-19)
nummod(form-22, 1040-20)
amod(form-22, long-21)
nmod:on(deductions-17, form-22)
cc(deductions-17, or-23)
case(box-27, over-24)
det(box-27, the-25)
amod(box-27, 1040EZ-26)
nmod:over(deductions-17', box-27)
acl(deductions-17, asking-28)
mark(claimed-33, if-29)
nsubjpass(claimed-33, they-30)
aux(claimed-33, could-31)
auxpass(claimed-33, be-32)
advcl(asking-28, claimed-33)
case(dependents-38, as-34)
nmod:poss(dependents-38, anyone-35)
amod(anyone-35, else-36)
case(anyone-35, 's-37)
nmod:as(claimed-33, dependents-38)
punct(want-2, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#filers

stumble :: Even when trying to right itself , Merrill stumbled ./.
advmod(when-2, Even-1)
advmod(trying-3, when-2)
advcl(stumbled-9, trying-3)
case(itself-6, to-4)
amod(itself-6, right-5)
nmod:to(trying-3, itself-6)
punct(stumbled-9, ,-7)
nsubj(stumbled-9, Merrill-8)
root(ROOT-0, stumbled-9)
punct(stumbled-9, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#merrill

stumble :: Lazuli , an itinerant peddler , who stumbles into the kingdom singing one of the prettiest tunes ever composed for any operetta , `` My little star , '' is nearly sacrificed to this nutjob , before the mayhem ends on a cheerful note with Lazuli standing next to a goo-goo-eyed princess ./.
nsubj(stumbles-8, Lazuli-1)
nsubjpass(sacrificed-32, Lazuli-1)
punct(Lazuli-1, ,-2)
det(peddler-5, an-3)
amod(peddler-5, itinerant-4)
appos(Lazuli-1, peddler-5)
punct(Lazuli-1, ,-6)
ref(Lazuli-1, who-7)
acl:relcl(Lazuli-1, stumbles-8)
case(singing-12, into-9)
det(singing-12, the-10)
compound(singing-12, kingdom-11)
nmod:into(stumbles-8, singing-12)
nummod(singing-12, one-13)
case(tunes-17, of-14)
det(tunes-17, the-15)
amod(tunes-17, prettiest-16)
nmod:of(singing-12, tunes-17)
advmod(composed-19, ever-18)
acl(tunes-17, composed-19)
case(operetta-22, for-20)
det(operetta-22, any-21)
nmod:for(composed-19, operetta-22)
punct(Lazuli-1, ,-23)
punct(star-27, ``-24)
nmod:poss(star-27, My-25)
amod(star-27, little-26)
appos(Lazuli-1, star-27)
punct(star-27, ,-28)
punct(star-27, ''-29)
auxpass(sacrificed-32, is-30)
advmod(sacrificed-32, nearly-31)
root(ROOT-0, sacrificed-32)
case(nutjob-35, to-33)
det(nutjob-35, this-34)
nmod:to(sacrificed-32, nutjob-35)
punct(sacrificed-32, ,-36)
mark(ends-40, before-37)
det(mayhem-39, the-38)
nsubj(ends-40, mayhem-39)
advcl(sacrificed-32, ends-40)
case(note-44, on-41)
det(note-44, a-42)
amod(note-44, cheerful-43)
nmod:on(ends-40, note-44)
case(standing-47, with-45)
amod(standing-47, Lazuli-46)
nmod:with(note-44, standing-47)
case(princess-52, next-48)
mwe(next-48, to-49)
det(princess-52, a-50)
amod(princess-52, goo-goo-eyed-51)
nmod:next_to(standing-47, princess-52)
punct(sacrificed-32, .-53)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#lazuli

stumble :: What is problematic about the Jersey City takeover is that this strategy may come to be seen as a forceful example of can-do government types trying to solve the ills of a failing or stumbling school system ./.
root(ROOT-0, What-1)
cop(What-1, is-2)
nsubj(What-1, problematic-3)
case(takeover-8, about-4)
det(takeover-8, the-5)
compound(takeover-8, Jersey-6)
compound(takeover-8, City-7)
nmod:about(problematic-3, takeover-8)
dep(What-1, is-9)
mark(come-14, that-10)
det(strategy-12, this-11)
nsubj(come-14, strategy-12)
nsubjpass:xsubj(seen-17, strategy-12)
aux(come-14, may-13)
ccomp(is-9, come-14)
mark(seen-17, to-15)
auxpass(seen-17, be-16)
xcomp(come-14, seen-17)
case(example-21, as-18)
det(example-21, a-19)
amod(example-21, forceful-20)
nmod:as(seen-17, example-21)
case(types-25, of-22)
amod(types-25, can-do-23)
compound(types-25, government-24)
nmod:of(example-21, types-25)
acl(types-25, trying-26)
mark(solve-28, to-27)
xcomp(trying-26, solve-28)
det(ills-30, the-29)
dobj(solve-28, ills-30)
case(system-37, of-31)
det(system-37, a-32)
amod(system-37, failing-33)
cc(failing-33, or-34)
conj:or(failing-33, stumbling-35)
amod(system-37, stumbling-35)
compound(system-37, school-36)
nmod:of(ills-30, system-37)
punct(What-1, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#system

stumble :: After an initial advance , the market stumbled briefly as investors responded to its strength by taking profits ./.
case(advance-4, After-1)
det(advance-4, an-2)
amod(advance-4, initial-3)
nmod:after(stumbled-8, advance-4)
punct(stumbled-8, ,-5)
det(market-7, the-6)
nsubj(stumbled-8, market-7)
root(ROOT-0, stumbled-8)
advmod(stumbled-8, briefly-9)
mark(responded-12, as-10)
nsubj(responded-12, investors-11)
advcl(stumbled-8, responded-12)
case(strength-15, to-13)
nmod:poss(strength-15, its-14)
nmod:to(responded-12, strength-15)
mark(taking-17, by-16)
advcl(responded-12, taking-17)
dobj(taking-17, profits-18)
punct(stumbled-8, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#market

stumble :: Prime Minister Noboru Takeshita has stumbled , but not seriously enough to affect his six-month-old government ./.
compound(Takeshita-4, Prime-1)
compound(Takeshita-4, Minister-2)
compound(Takeshita-4, Noboru-3)
nsubj(stumbled-6, Takeshita-4)
nsubj(enough-11, Takeshita-4)
nsubj:xsubj(affect-13, Takeshita-4)
aux(stumbled-6, has-5)
root(ROOT-0, stumbled-6)
punct(stumbled-6, ,-7)
cc(stumbled-6, but-8)
neg(enough-11, not-9)
advmod(enough-11, seriously-10)
conj:but(stumbled-6, enough-11)
mark(affect-13, to-12)
xcomp(enough-11, affect-13)
nmod:poss(government-16, his-14)
amod(government-16, six-month-old-15)
dobj(affect-13, government-16)
punct(stumbled-6, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#takeshita

stumble :: And though he remains the favorite , Mr. Dukakis seems to have stumbled on occasion when pressed by Mr. Gore ./.
cc(seems-10, And-1)
mark(remains-4, though-2)
nsubj(remains-4, he-3)
advcl(seems-10, remains-4)
det(favorite-6, the-5)
xcomp(remains-4, favorite-6)
punct(seems-10, ,-7)
compound(Dukakis-9, Mr.-8)
nsubj(seems-10, Dukakis-9)
nsubj:xsubj(stumbled-13, Dukakis-9)
root(ROOT-0, seems-10)
mark(stumbled-13, to-11)
aux(stumbled-13, have-12)
xcomp(seems-10, stumbled-13)
case(occasion-15, on-14)
nmod:on(stumbled-13, occasion-15)
advmod(pressed-17, when-16)
advcl(stumbled-13, pressed-17)
case(Gore-20, by-18)
compound(Gore-20, Mr.-19)
nmod:by(pressed-17, Gore-20)
punct(seems-10, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#dukakis

stumble :: The candidate best positioned to achieve that level -- Massachusetts Gov. Michael Dukakis -- stumbled badly in the Illinois primary on Tuesday and now faces a formidable challenge: He must win half the remaining delegates up for grabs just to get 40 % , or 1 , 665 delegates ./.
det(candidate-2, The-1)
nsubj(positioned-4, candidate-2)
nsubj:xsubj(achieve-6, candidate-2)
advmod(positioned-4, best-3)
root(ROOT-0, positioned-4)
mark(achieve-6, to-5)
xcomp(positioned-4, achieve-6)
det(level-8, that-7)
dobj(achieve-6, level-8)
punct(positioned-4, ---9)
compound(Dukakis-13, Massachusetts-10)
compound(Dukakis-13, Gov.-11)
compound(Dukakis-13, Michael-12)
dep(positioned-4, Dukakis-13)
punct(stumbled-15, ---14)
dep(Dukakis-13, stumbled-15)
advmod(stumbled-15, badly-16)
case(Illinois-19, in-17)
det(Illinois-19, the-18)
nmod:in(stumbled-15, Illinois-19)
amod(Illinois-19, primary-20)
case(Tuesday-22, on-21)
nmod:on(stumbled-15, Tuesday-22)
cc(stumbled-15, and-23)
advmod(faces-25, now-24)
dep(Dukakis-13, faces-25)
conj:and(stumbled-15, faces-25)
det(challenge-28, a-26)
amod(challenge-28, formidable-27)
dobj(faces-25, challenge-28)
punct(stumbled-15, :-29)
nsubj(win-32, He-30)
aux(win-32, must-31)
parataxis(stumbled-15, win-32)
det:predet(delegates-36, half-33)
det(delegates-36, the-34)
amod(delegates-36, remaining-35)
dobj(win-32, delegates-36)
case(grabs-39, up-37)
case(grabs-39, for-38)
nmod:for(win-32, grabs-39)
advmod(get-42, just-40)
mark(get-42, to-41)
advcl(win-32, get-42)
nummod(%-44, 40-43)
dobj(get-42, %-44)
punct(%-44, ,-45)
cc(%-44, or-46)
dobj(get-42, 1-47)
conj:or(%-44, 1-47)
punct(%-44, ,-48)
nummod(delegates-50, 665-49)
appos(%-44, delegates-50)
punct(positioned-4, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#illinois

stumble :: The Geneva talks stumbled on two issues: U.S. insistence that Moscow promise not to arm the Afghan regime after withdrawal and Pakistan 's demand that an interim government be established , including Afghan resistance fighters ./.
det(talks-3, The-1)
compound(talks-3, Geneva-2)
nsubj(stumbled-4, talks-3)
root(ROOT-0, stumbled-4)
case(issues-7, on-5)
nummod(issues-7, two-6)
nmod:on(stumbled-4, issues-7)
punct(issues-7, :-8)
compound(insistence-10, U.S.-9)
dep(issues-7, insistence-10)
dep(insistence-10, that-11)
compound(promise-13, Moscow-12)
dep(that-11, promise-13)
neg(arm-16, not-14)
mark(arm-16, to-15)
acl(promise-13, arm-16)
det(regime-19, the-17)
amod(regime-19, Afghan-18)
dobj(arm-16, regime-19)
case(withdrawal-21, after-20)
nmod:after(arm-16, withdrawal-21)
cc(arm-16, and-22)
nmod:poss(demand-25, Pakistan-23)
case(Pakistan-23, 's-24)
acl(promise-13, demand-25)
conj:and(arm-16, demand-25)
mark(established-31, that-26)
det(government-29, an-27)
amod(government-29, interim-28)
nsubjpass(established-31, government-29)
auxpass(established-31, be-30)
ccomp(demand-25, established-31)
punct(demand-25, ,-32)
case(fighters-36, including-33)
amod(fighters-36, Afghan-34)
compound(fighters-36, resistance-35)
nmod:including(demand-25, fighters-36)
punct(stumbled-4, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#talks

stumble :: Holly Farms ' experience is a classic example of how a food company can stumble in launching a product ./.
compound(Farms-2, Holly-1)
nmod:poss(experience-4, Farms-2)
case(Farms-2, '-3)
nsubj(example-8, experience-4)
cop(example-8, is-5)
det(example-8, a-6)
amod(example-8, classic-7)
root(ROOT-0, example-8)
mark(stumble-15, of-9)
advmod(stumble-15, how-10)
det(company-13, a-11)
compound(company-13, food-12)
nsubj(stumble-15, company-13)
aux(stumble-15, can-14)
acl(example-8, stumble-15)
mark(launching-17, in-16)
advcl(stumble-15, launching-17)
det(product-19, a-18)
dobj(launching-17, product-19)
punct(example-8, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#company

stumble :: But the next morning , a thin farmer from a nearby ranch who stumbled into the Contras ' campsite told a different story ./.
cc(told-20, But-1)
det(morning-4, the-2)
amod(morning-4, next-3)
nsubj(told-20, morning-4)
punct(morning-4, ,-5)
det(farmer-8, a-6)
amod(farmer-8, thin-7)
appos(morning-4, farmer-8)
case(ranch-12, from-9)
det(ranch-12, a-10)
amod(ranch-12, nearby-11)
nmod:from(farmer-8, ranch-12)
nsubj(stumbled-14, ranch-12)
ref(ranch-12, who-13)
acl:relcl(ranch-12, stumbled-14)
case(campsite-19, into-15)
det(Contras-17, the-16)
nmod:poss(campsite-19, Contras-17)
case(Contras-17, '-18)
nmod:into(stumbled-14, campsite-19)
root(ROOT-0, told-20)
det(story-23, a-21)
amod(story-23, different-22)
dobj(told-20, story-23)
punct(told-20, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#ranch

stumble :: It is a world in which everyone plagiarizes , but some prosper while others stumble ./.
nsubj(world-4, It-1)
cop(world-4, is-2)
det(world-4, a-3)
root(ROOT-0, world-4)
nmod:in(plagiarizes-8, world-4)
case(which-6, in-5)
ref(world-4, which-6)
nsubj(plagiarizes-8, everyone-7)
acl:relcl(world-4, plagiarizes-8)
punct(world-4, ,-9)
cc(world-4, but-10)
nsubj(prosper-12, some-11)
conj:but(world-4, prosper-12)
nmod:in(plagiarizes-8, prosper-12)
mark(stumble-15, while-13)
nsubj(stumble-15, others-14)
advcl(prosper-12, stumble-15)
punct(world-4, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#others

stumble :: As exchange-listed issues plummeted , OTC stocks merely stumbled -- relatively speaking ./.
mark(plummeted-4, As-1)
amod(issues-3, exchange-listed-2)
nsubj(plummeted-4, issues-3)
advcl(stumbled-9, plummeted-4)
punct(stumbled-9, ,-5)
compound(stocks-7, OTC-6)
nsubj(stumbled-9, stocks-7)
advmod(stumbled-9, merely-8)
root(ROOT-0, stumbled-9)
punct(stumbled-9, ---10)
advmod(speaking-12, relatively-11)
ccomp(stumbled-9, speaking-12)
punct(stumbled-9, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#stocks

stumble :: A Reichmann official makes clear that Mr. Campeau ca n't afford to stumble ./.
det(official-3, A-1)
compound(official-3, Reichmann-2)
nsubj(makes-4, official-3)
root(ROOT-0, makes-4)
xcomp(makes-4, clear-5)
mark(afford-11, that-6)
compound(Campeau-8, Mr.-7)
nsubj(afford-11, Campeau-8)
nsubj:xsubj(stumble-13, Campeau-8)
aux(afford-11, ca-9)
neg(afford-11, n't-10)
ccomp(clear-5, afford-11)
mark(stumble-13, to-12)
xcomp(afford-11, stumble-13)
punct(makes-4, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#campeau

stumble :: Every morning he stumbles into work still a wreck from the drugs and booze of the night before , clearly contemptuous of the drudgery set before him ./.
det(morning-2, Every-1)
nmod:tmod(stumbles-4, morning-2)
nsubj(stumbles-4, he-3)
root(ROOT-0, stumbles-4)
case(work-6, into-5)
nmod:into(stumbles-4, work-6)
advmod(wreck-9, still-7)
det(wreck-9, a-8)
dobj(stumbles-4, wreck-9)
case(drugs-12, from-10)
det(drugs-12, the-11)
nmod:from(wreck-9, drugs-12)
cc(drugs-12, and-13)
nmod:from(wreck-9, booze-14)
conj:and(drugs-12, booze-14)
case(night-17, of-15)
det(night-17, the-16)
nmod:of(drugs-12, night-17)
advmod(wreck-9, before-18)
punct(wreck-9, ,-19)
advmod(contemptuous-21, clearly-20)
amod(wreck-9, contemptuous-21)
case(drudgery-24, of-22)
det(drudgery-24, the-23)
nmod:of(contemptuous-21, drudgery-24)
acl(drudgery-24, set-25)
case(him-27, before-26)
nmod:before(set-25, him-27)
punct(stumbles-4, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#wreck

stumble :: Mr. Dukakis is generally cast in that role , but he has stumbled badly twice in a row -- in Illinois and now in Michigan ./.
compound(Dukakis-2, Mr.-1)
nsubjpass(cast-5, Dukakis-2)
auxpass(cast-5, is-3)
advmod(cast-5, generally-4)
root(ROOT-0, cast-5)
case(role-8, in-6)
det(role-8, that-7)
nmod:in(cast-5, role-8)
punct(cast-5, ,-9)
cc(cast-5, but-10)
nsubj(stumbled-13, he-11)
aux(stumbled-13, has-12)
conj:but(cast-5, stumbled-13)
advmod(stumbled-13, badly-14)
advmod(stumbled-13, twice-15)
case(row-18, in-16)
det(row-18, a-17)
nmod:in(stumbled-13, row-18)
nmod:in(stumbled-13, row-18')
conj:and(row-18, row-18')
punct(row-18, ---19)
case(Illinois-21, in-20)
nmod:in(row-18, Illinois-21)
cc(row-18, and-22)
advmod(Michigan-25, now-23)
case(Michigan-25, in-24)
nmod:in(row-18', Michigan-25)
punct(cast-5, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#he

stumble :: `` Our view is that the economy is going to stumble and stagger through 1988 , '' he said , `` and then we think the best bet is that we 'll slip into a recession in 1989 . ''/''
punct(said-19, ``-1)
nmod:poss(view-3, Our-2)
nsubj(is-4, view-3)
ccomp(said-19, is-4)
mark(going-9, that-5)
det(economy-7, the-6)
nsubj(going-9, economy-7)
nsubj:xsubj(stumble-11, economy-7)
aux(going-9, is-8)
ccomp(is-4, going-9)
mark(stumble-11, to-10)
xcomp(going-9, stumble-11)
cc(stumble-11, and-12)
xcomp(going-9, stagger-13)
conj:and(stumble-11, stagger-13)
case(1988-15, through-14)
nmod:through(stumble-11, 1988-15)
punct(said-19, ,-16)
punct(said-19, ''-17)
nsubj(said-19, he-18)
root(ROOT-0, said-19)
punct(said-19, ,-20)
punct(said-19, ``-21)
cc(said-19, and-22)
advmod(think-25, then-23)
nsubj(think-25, we-24)
conj:and(said-19, think-25)
det(bet-28, the-26)
amod(bet-28, best-27)
nsubj(is-29, bet-28)
ccomp(think-25, is-29)
mark(slip-33, that-30)
nsubj(slip-33, we-31)
aux(slip-33, 'll-32)
ccomp(is-29, slip-33)
case(recession-36, into-34)
det(recession-36, a-35)
nmod:into(slip-33, recession-36)
case(1989-38, in-37)
nmod:in(slip-33, 1989-38)
punct(said-19, .-39)
punct(said-19, ''-40)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: stumble#economy

stumble :: Then the sports market stumbled in the months leading up to bidding for summer rights , which were awarded in October 1985 ./.
advmod(stumbled-5, Then-1)
det(market-4, the-2)
compound(market-4, sports-3)
nsubj(stumbled-5, market-4)
root(ROOT-0, stumbled-5)
case(months-8, in-6)
det(months-8, the-7)
nmod:in(stumbled-5, months-8)
acl(months-8, leading-9)
case(bidding-12, up-10)
case(bidding-12, to-11)
nmod:to(leading-9, bidding-12)
nsubjpass(awarded-19, bidding-12)
case(rights-15, for-13)
compound(rights-15, summer-14)
nmod:for(bidding-12, rights-15)
punct(bidding-12, ,-16)
ref(bidding-12, which-17)
auxpass(awarded-19, were-18)
acl:relcl(bidding-12, awarded-19)
case(October-21, in-20)
nmod:in(awarded-19, October-21)
nummod(October-21, 1985-22)
punct(stumbled-5, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#market

stumble :: I ca n't locate it in two hours of stumbling around Acha , even though I ask a dozen passers-by ./.
nsubj(locate-4, I-1)
aux(locate-4, ca-2)
neg(locate-4, n't-3)
root(ROOT-0, locate-4)
dobj(locate-4, it-5)
case(hours-8, in-6)
nummod(hours-8, two-7)
nmod:in(locate-4, hours-8)
mark(stumbling-10, of-9)
acl(hours-8, stumbling-10)
case(Acha-12, around-11)
nmod:around(stumbling-10, Acha-12)
punct(locate-4, ,-13)
advmod(ask-17, even-14)
mark(ask-17, though-15)
nsubj(ask-17, I-16)
advcl(locate-4, ask-17)
det(passers-by-20, a-18)
compound(passers-by-20, dozen-19)
dobj(ask-17, passers-by-20)
punct(locate-4, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#acha

stumble :: But the Army stumbled in getting the project off the ground , and by the time the Army was nearing key decisions on the project , Defense Secretary Frank Carlucci 's budget ax fell ./.
cc(stumbled-4, But-1)
det(Army-3, the-2)
nsubj(stumbled-4, Army-3)
root(ROOT-0, stumbled-4)
mark(getting-6, in-5)
advcl(stumbled-4, getting-6)
det(project-8, the-7)
dobj(getting-6, project-8)
case(ground-11, off-9)
det(ground-11, the-10)
nmod:off(getting-6, ground-11)
punct(stumbled-4, ,-12)
cc(stumbled-4, and-13)
case(time-16, by-14)
det(time-16, the-15)
nmod:by(fell-34, time-16)
det(Army-18, the-17)
nsubj(nearing-20, Army-18)
aux(nearing-20, was-19)
acl:relcl(time-16, nearing-20)
amod(decisions-22, key-21)
dobj(nearing-20, decisions-22)
case(project-25, on-23)
det(project-25, the-24)
nmod:on(decisions-22, project-25)
punct(fell-34, ,-26)
compound(Carlucci-30, Defense-27)
compound(Carlucci-30, Secretary-28)
compound(Carlucci-30, Frank-29)
nmod:poss(ax-33, Carlucci-30)
case(Carlucci-30, 's-31)
compound(ax-33, budget-32)
nsubj(fell-34, ax-33)
conj:and(stumbled-4, fell-34)
punct(stumbled-4, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#army

stumble :: His vocal pyrotechnics command the stage even when he is disappearing in a puff of smoke , magically reappearing on a flying crane , or battling hairy monsters who look like they just stumbled in from MTV 's `` Headbangers ' Ball . ''/''
nmod:poss(pyrotechnics-3, His-1)
amod(pyrotechnics-3, vocal-2)
nsubj(command-4, pyrotechnics-3)
root(ROOT-0, command-4)
det(stage-6, the-5)
dobj(command-4, stage-6)
advmod(when-8, even-7)
advmod(disappearing-11, when-8)
nsubj(disappearing-11, he-9)
aux(disappearing-11, is-10)
advcl(command-4, disappearing-11)
case(puff-14, in-12)
det(puff-14, a-13)
nmod:in(disappearing-11, puff-14)
case(smoke-16, of-15)
nmod:of(puff-14, smoke-16)
punct(command-4, ,-17)
advmod(reappearing-19, magically-18)
ccomp(command-4, reappearing-19)
case(crane-23, on-20)
det(crane-23, a-21)
amod(crane-23, flying-22)
nmod:on(reappearing-19, crane-23)
punct(reappearing-19, ,-24)
cc(reappearing-19, or-25)
ccomp(command-4, battling-26)
conj:or(reappearing-19, battling-26)
amod(monsters-28, hairy-27)
dobj(battling-26, monsters-28)
nsubj(look-30, monsters-28)
ref(monsters-28, who-29)
acl:relcl(monsters-28, look-30)
mark(stumbled-34, like-31)
nsubj(stumbled-34, they-32)
advmod(stumbled-34, just-33)
advcl(look-30, stumbled-34)
compound:prt(stumbled-34, in-35)
case(Ball-42, from-36)
nmod:poss(Ball-42, MTV-37)
case(MTV-37, 's-38)
punct(Ball-42, ``-39)
nmod:poss(Ball-42, Headbangers-40)
case(Headbangers-40, '-41)
nmod:from(stumbled-34, Ball-42)
punct(command-4, .-43)
punct(command-4, ''-44)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: stumble#they

stumble :: Clark , in another deft portrait -RRB- up and down their odd homestead -- a huge , moss-covered boiler , Snopishly decorated with old car seats and broken machines -- and seemed worn and winded by the time he stumbles upon Brunnhilde on the airstrip ./.
root(ROOT-0, Clark-1)
punct(Clark-1, ,-2)
case(portrait-6, in-3)
det(portrait-6, another-4)
amod(portrait-6, deft-5)
root(,-2, portrait-6)
punct(portrait-6, -RRB--7)
advmod(portrait-6, up-8)
cc(up-8, and-9)
advmod(portrait-6, down-10)
conj:and(up-8, down-10)
nmod:poss(homestead-13, their-11)
amod(homestead-13, odd-12)
dep(portrait-6, homestead-13)
punct(homestead-13, ---14)
det(boiler-19, a-15)
amod(boiler-19, huge-16)
punct(boiler-19, ,-17)
amod(boiler-19, moss-covered-18)
dep(homestead-13, boiler-19)
punct(boiler-19, ,-20)
advmod(decorated-22, Snopishly-21)
acl(boiler-19, decorated-22)
case(seats-26, with-23)
amod(seats-26, old-24)
compound(seats-26, car-25)
nmod:with(decorated-22, seats-26)
cc(seats-26, and-27)
amod(machines-29, broken-28)
nmod:with(decorated-22, machines-29)
conj:and(seats-26, machines-29)
punct(homestead-13, ---30)
cc(portrait-6, and-31)
root(,-2, seemed-32)
conj:and(portrait-6, seemed-32)
xcomp(seemed-32, worn-33)
cc(portrait-6, and-34)
root(,-2, winded-35)
conj:and(portrait-6, winded-35)
case(time-38, by-36)
det(time-38, the-37)
nmod:by(winded-35, time-38)
nsubj(stumbles-40, he-39)
acl:relcl(time-38, stumbles-40)
case(Brunnhilde-42, upon-41)
nmod:upon(stumbles-40, Brunnhilde-42)
case(airstrip-45, on-43)
det(airstrip-45, the-44)
nmod:on(stumbles-40, airstrip-45)
punct(portrait-6, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#he

stumble :: Certain Salt Lake City hotels , in fact , have all three -- restaurants , beer bars and private clubs -- which means that patrons stumbling from one to the other may feel they have disappeared in the Bermuda Triangle , the rules being as stupefying as the booze ./.
amod(hotels-5, Certain-1)
compound(hotels-5, Salt-2)
compound(hotels-5, Lake-3)
compound(hotels-5, City-4)
nsubj(have-10, hotels-5)
punct(have-10, ,-6)
case(fact-8, in-7)
nmod:in(have-10, fact-8)
punct(have-10, ,-9)
root(ROOT-0, have-10)
advmod(three-12, all-11)
dobj(have-10, three-12)
nsubj(means-23, three-12)
punct(three-12, ---13)
dep(three-12, restaurants-14)
punct(restaurants-14, ,-15)
compound(bars-17, beer-16)
dep(three-12, bars-17)
conj:and(restaurants-14, bars-17)
cc(restaurants-14, and-18)
amod(clubs-20, private-19)
dep(three-12, clubs-20)
conj:and(restaurants-14, clubs-20)
punct(three-12, ---21)
ref(three-12, which-22)
acl:relcl(three-12, means-23)
mark(feel-33, that-24)
nsubj(feel-33, patrons-25)
acl(patrons-25, stumbling-26)
case(one-28, from-27)
nmod:from(stumbling-26, one-28)
case(other-31, to-29)
det(other-31, the-30)
nmod:to(one-28, other-31)
aux(feel-33, may-32)
ccomp(means-23, feel-33)
nsubj(disappeared-36, they-34)
aux(disappeared-36, have-35)
ccomp(feel-33, disappeared-36)
case(Triangle-40, in-37)
det(Triangle-40, the-38)
compound(Triangle-40, Bermuda-39)
nmod:in(disappeared-36, Triangle-40)
punct(have-10, ,-41)
det(rules-43, the-42)
nsubj(stupefying-46, rules-43)
cop(stupefying-46, being-44)
advmod(stupefying-46, as-45)
parataxis(have-10, stupefying-46)
case(booze-49, as-47)
det(booze-49, the-48)
nmod:as(stupefying-46, booze-49)
punct(have-10, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#one

stumble :: By the time `` Trovatore '' stumbled in for the last time two weeks ago , only the Heimlich maneuver could have helped Franco Bonanome get through `` Di quella pira '' ; an old buzz saw , Fiorenza Cossotto , was rasping away at the gypsy 's music ; and Leona Mitchell drifted from pillar to pillar and all too often from the score ./.
case(time-3, By-1)
det(time-3, the-2)
nmod:by(helped-23, time-3)
punct(Trovatore-5, ``-4)
nsubj(stumbled-7, Trovatore-5)
punct(Trovatore-5, ''-6)
acl:relcl(time-3, stumbled-7)
compound:prt(stumbled-7, in-8)
case(time-12, for-9)
det(time-12, the-10)
amod(time-12, last-11)
nmod:for(stumbled-7, time-12)
nummod(weeks-14, two-13)
nmod:npmod(ago-15, weeks-14)
advmod(stumbled-7, ago-15)
punct(helped-23, ,-16)
advmod(maneuver-20, only-17)
det(maneuver-20, the-18)
compound(maneuver-20, Heimlich-19)
nsubj(helped-23, maneuver-20)
aux(helped-23, could-21)
aux(helped-23, have-22)
root(ROOT-0, helped-23)
compound(Bonanome-25, Franco-24)
nsubj(get-26, Bonanome-25)
ccomp(helped-23, get-26)
case(pira-31, through-27)
punct(pira-31, ``-28)
compound(pira-31, Di-29)
compound(pira-31, quella-30)
nmod:through(get-26, pira-31)
punct(pira-31, ''-32)
punct(pira-31, ;-33)
det(saw-37, an-34)
amod(saw-37, old-35)
compound(saw-37, buzz-36)
nsubj(rasping-43, saw-37)
punct(saw-37, ,-38)
compound(Cossotto-40, Fiorenza-39)
appos(saw-37, Cossotto-40)
punct(saw-37, ,-41)
aux(rasping-43, was-42)
nmod:through(get-26, rasping-43)
conj:and(pira-31, rasping-43)
advmod(rasping-43, away-44)
case(music-49, at-45)
det(gypsy-47, the-46)
nmod:poss(music-49, gypsy-47)
case(gypsy-47, 's-48)
nmod:at(rasping-43, music-49)
punct(pira-31, ;-50)
cc(pira-31, and-51)
compound(Mitchell-53, Leona-52)
nsubj(drifted-54, Mitchell-53)
nmod:through(get-26, drifted-54)
conj:and(pira-31, drifted-54)
case(pillar-56, from-55)
nmod:from(drifted-54, pillar-56)
case(pillar-58, to-57)
nmod:to(drifted-54, pillar-58)
cc(drifted-54, and-59)
advmod(often-62, all-60)
advmod(often-62, too-61)
conj:and(pira-31, often-62)
conj:and(drifted-54, often-62)
case(score-65, from-63)
det(score-65, the-64)
nmod:from(often-62, score-65)
punct(helped-23, .-66)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#trovatore

stumble :: Mike Trial , a passenger on the ill-fated fishing trip , testified in probate court last May that Mrs. Von Bergen stumbled into him on the deck of the boat and that they fell overboard ./.
compound(Trial-2, Mike-1)
nsubj(testified-12, Trial-2)
punct(Trial-2, ,-3)
det(passenger-5, a-4)
appos(Trial-2, passenger-5)
case(trip-10, on-6)
det(trip-10, the-7)
amod(trip-10, ill-fated-8)
compound(trip-10, fishing-9)
nmod:on(passenger-5, trip-10)
punct(Trial-2, ,-11)
root(ROOT-0, testified-12)
case(court-15, in-13)
compound(court-15, probate-14)
nmod:in(testified-12, court-15)
amod(May-17, last-16)
nmod:tmod(testified-12, May-17)
mark(stumbled-22, that-18)
compound(Bergen-21, Mrs.-19)
compound(Bergen-21, Von-20)
nsubj(stumbled-22, Bergen-21)
ccomp(testified-12, stumbled-22)
case(him-24, into-23)
nmod:into(stumbled-22, him-24)
case(deck-27, on-25)
det(deck-27, the-26)
nmod:on(stumbled-22, deck-27)
case(boat-30, of-28)
det(boat-30, the-29)
nmod:of(deck-27, boat-30)
cc(stumbled-22, and-31)
mark(fell-34, that-32)
nsubj(fell-34, they-33)
ccomp(testified-12, fell-34)
conj:and(stumbled-22, fell-34)
advmod(fell-34, overboard-35)
punct(testified-12, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: stumble#bergen

target :: Heinz is targeting such countries as Germany , France and Portugal for growth in anticipation of the European Community 's plan to eliminate trade barriers within the 12-nation trading bloc by the end of 1992 , the spokesman added ./.
nsubj(targeting-3, Heinz-1)
aux(targeting-3, is-2)
ccomp(added-39, targeting-3)
amod(countries-5, such-4)
dobj(targeting-3, countries-5)
case(Germany-7, as-6)
nmod:as(targeting-3, Germany-7)
punct(Germany-7, ,-8)
nmod:as(targeting-3, France-9)
conj:and(Germany-7, France-9)
cc(Germany-7, and-10)
nmod:as(targeting-3, Portugal-11)
conj:and(Germany-7, Portugal-11)
case(growth-13, for-12)
nmod:for(targeting-3, growth-13)
case(anticipation-15, in-14)
nmod:in(growth-13, anticipation-15)
case(plan-21, of-16)
det(Community-19, the-17)
compound(Community-19, European-18)
nmod:poss(plan-21, Community-19)
case(Community-19, 's-20)
nmod:of(anticipation-15, plan-21)
mark(eliminate-23, to-22)
acl(plan-21, eliminate-23)
compound(barriers-25, trade-24)
dobj(eliminate-23, barriers-25)
case(bloc-30, within-26)
det(bloc-30, the-27)
amod(bloc-30, 12-nation-28)
compound(bloc-30, trading-29)
nmod:within(eliminate-23, bloc-30)
case(end-33, by-31)
det(end-33, the-32)
nmod:by(eliminate-23, end-33)
case(1992-35, of-34)
nmod:of(end-33, 1992-35)
punct(added-39, ,-36)
det(spokesman-38, the-37)
nsubj(added-39, spokesman-38)
root(ROOT-0, added-39)
punct(added-39, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#countries

target :: `` He likes to live dangerously , '' says Patrick Minford , a University of Liverpool economist who wants Mr. Lawson to return to exact targeting of money-supply growth ./.
punct(says-9, ``-1)
nsubj(likes-3, He-2)
nsubj:xsubj(live-5, He-2)
ccomp(says-9, likes-3)
mark(live-5, to-4)
xcomp(likes-3, live-5)
advmod(live-5, dangerously-6)
punct(says-9, ,-7)
punct(says-9, ''-8)
root(ROOT-0, says-9)
compound(Minford-11, Patrick-10)
nsubj(says-9, Minford-11)
punct(Minford-11, ,-12)
det(University-14, a-13)
appos(Minford-11, University-14)
nsubj(wants-19, University-14)
case(economist-17, of-15)
compound(economist-17, Liverpool-16)
nmod:of(University-14, economist-17)
ref(University-14, who-18)
acl:relcl(University-14, wants-19)
compound(Lawson-21, Mr.-20)
dobj(wants-19, Lawson-21)
nsubj:xsubj(return-23, Lawson-21)
mark(return-23, to-22)
xcomp(wants-19, return-23)
case(targeting-26, to-24)
amod(targeting-26, exact-25)
nmod:to(return-23, targeting-26)
case(growth-29, of-27)
amod(growth-29, money-supply-28)
nmod:of(targeting-26, growth-29)
punct(says-9, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#growth

target :: In addition to representing the approximately 1 , 300 wineries in this country , the association also is targeting for membership thousands more wine-grape growers , according to Richard Feeney , the group 's executive director ./.
case(representing-4, In-1)
mwe(In-1, addition-2)
mwe(In-1, to-3)
root(ROOT-0, representing-4)
dobj(representing-4, the-5)
advmod(1-7, approximately-6)
dep(the-5, 1-7)
punct(1-7, ,-8)
nummod(wineries-10, 300-9)
root(,-8, wineries-10)
case(country-13, in-11)
det(country-13, this-12)
nmod:in(wineries-10, country-13)
punct(wineries-10, ,-14)
det(association-16, the-15)
nsubj(targeting-19, association-16)
advmod(targeting-19, also-17)
aux(targeting-19, is-18)
acl:relcl(wineries-10, targeting-19)
case(thousands-22, for-20)
compound(thousands-22, membership-21)
nmod:for(targeting-19, thousands-22)
advmod(wine-grape-24, more-23)
amod(growers-25, wine-grape-24)
dobj(targeting-19, growers-25)
punct(targeting-19, ,-26)
case(Feeney-30, according-27)
mwe(according-27, to-28)
compound(Feeney-30, Richard-29)
nmod:according_to(targeting-19, Feeney-30)
punct(Feeney-30, ,-31)
det(group-33, the-32)
nmod:poss(director-36, group-33)
case(group-33, 's-34)
compound(director-36, executive-35)
appos(Feeney-30, director-36)
punct(wineries-10, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#growers

target :: Traditions die hard , and the Fed has n't shaken its habit of targeting the real economy -- under the notion that inflation , too much money chasing too few goods , is prevented by curtailing the production of goods ./.
nsubj(die-2, Traditions-1)
root(ROOT-0, die-2)
advmod(die-2, hard-3)
punct(die-2, ,-4)
cc(die-2, and-5)
det(Fed-7, the-6)
nsubj(shaken-10, Fed-7)
aux(shaken-10, has-8)
neg(shaken-10, n't-9)
conj:and(die-2, shaken-10)
nmod:poss(habit-12, its-11)
dobj(shaken-10, habit-12)
mark(targeting-14, of-13)
acl(habit-12, targeting-14)
det(economy-17, the-15)
amod(economy-17, real-16)
dobj(targeting-14, economy-17)
punct(shaken-10, ---18)
case(notion-21, under-19)
det(notion-21, the-20)
nmod:under(shaken-10, notion-21)
mark(prevented-34, that-22)
dep(prevented-34, inflation-23)
punct(prevented-34, ,-24)
advmod(much-26, too-25)
amod(money-27, much-26)
nsubjpass(prevented-34, money-27)
acl(money-27, chasing-28)
advmod(few-30, too-29)
amod(goods-31, few-30)
dobj(chasing-28, goods-31)
punct(prevented-34, ,-32)
auxpass(prevented-34, is-33)
ccomp(notion-21, prevented-34)
mark(curtailing-36, by-35)
advcl(prevented-34, curtailing-36)
det(production-38, the-37)
dobj(curtailing-36, production-38)
case(goods-40, of-39)
nmod:of(production-38, goods-40)
punct(die-2, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#economy

target :: He code-names companies targeted for possible acquisition with B-words , like batman , bellini -LRB- `` a wonderful combination of champagne and peach juice '' -RRB- and baccarat -LRB- the gambling game -RRB- simply because `` it struck me as an interesting strategem . ''/''
nsubj(code-names-2, He-1)
root(ROOT-0, code-names-2)
dobj(code-names-2, companies-3)
acl(companies-3, targeted-4)
case(acquisition-7, for-5)
amod(acquisition-7, possible-6)
nmod:for(targeted-4, acquisition-7)
case(B-words-9, with-8)
nmod:with(acquisition-7, B-words-9)
punct(companies-3, ,-10)
case(batman-12, like-11)
nmod:like(companies-3, batman-12)
punct(batman-12, ,-13)
appos(batman-12, bellini-14)
punct(combination-19, -LRB--15)
punct(combination-19, ``-16)
det(combination-19, a-17)
amod(combination-19, wonderful-18)
dep(batman-12, combination-19)
case(champagne-21, of-20)
nmod:of(combination-19, champagne-21)
cc(champagne-21, and-22)
compound(juice-24, peach-23)
nmod:of(combination-19, juice-24)
conj:and(champagne-21, juice-24)
punct(combination-19, ''-25)
punct(combination-19, -RRB--26)
cc(batman-12, and-27)
nmod:like(companies-3, baccarat-28)
conj:and(batman-12, baccarat-28)
punct(game-32, -LRB--29)
det(game-32, the-30)
compound(game-32, gambling-31)
appos(baccarat-28, game-32)
punct(game-32, -RRB--33)
advmod(code-names-2, simply-34)
mark(struck-38, because-35)
punct(struck-38, ``-36)
nsubj(struck-38, it-37)
advcl(code-names-2, struck-38)
dobj(struck-38, me-39)
case(strategem-43, as-40)
det(strategem-43, an-41)
amod(strategem-43, interesting-42)
nmod:as(struck-38, strategem-43)
punct(code-names-2, .-44)
punct(code-names-2, ''-45)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: target#acquisition

target :: Wells Rich will handle corporate advertising and `` market image and solutions advertising , '' targeted mainly at other businesses ./.
compound(Rich-2, Wells-1)
nsubj(handle-4, Rich-2)
aux(handle-4, will-3)
root(ROOT-0, handle-4)
amod(advertising-6, corporate-5)
dobj(handle-4, advertising-6)
cc(advertising-6, and-7)
punct(image-10, ``-8)
compound(image-10, market-9)
dobj(handle-4, image-10)
conj:and(advertising-6, image-10)
cc(image-10, and-11)
compound(advertising-13, solutions-12)
conj:and(advertising-6, advertising-13)
conj:and(image-10, advertising-13)
punct(handle-4, ,-14)
punct(handle-4, ''-15)
dep(handle-4, targeted-16)
advmod(targeted-16, mainly-17)
case(businesses-20, at-18)
amod(businesses-20, other-19)
nmod:at(targeted-16, businesses-20)
punct(handle-4, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#businesses

target :: Because genetic targeting marries sophisticated organic chemistry with molecular genetics , Gilead says it sidesteps some of the messier problems of conventional biotechnology -- particularly the manufacture of human proteins ./.
mark(says-13, Because-1)
ccomp(says-13, genetic-2)
dep(genetic-2, targeting-3)
compound(chemistry-7, marries-4)
amod(chemistry-7, sophisticated-5)
amod(chemistry-7, organic-6)
dobj(targeting-3, chemistry-7)
case(genetics-10, with-8)
amod(genetics-10, molecular-9)
nmod:with(targeting-3, genetics-10)
punct(says-13, ,-11)
nsubj(says-13, Gilead-12)
root(ROOT-0, says-13)
nsubj(sidesteps-15, it-14)
ccomp(says-13, sidesteps-15)
dobj(sidesteps-15, some-16)
case(problems-20, of-17)
det(problems-20, the-18)
compound(problems-20, messier-19)
nmod:of(some-16, problems-20)
case(biotechnology-23, of-21)
amod(biotechnology-23, conventional-22)
nmod:of(problems-20, biotechnology-23)
punct(some-16, ---24)
advmod(manufacture-27, particularly-25)
det(manufacture-27, the-26)
dep(some-16, manufacture-27)
case(proteins-30, of-28)
amod(proteins-30, human-29)
nmod:of(manufacture-27, proteins-30)
punct(says-13, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#chemistry

target :: The main problem , though , is that 80 % of all retirement housing now on the market targets the wealthy -- yet that group makes up just 20 % of all elderly people , says Gordon M. Johnson , a Los Angeles retirement-housing specialist with Laventhol & Horwath , a Philadelphia-based accounting firm that studies real estate ./.
det(problem-3, The-1)
amod(problem-3, main-2)
nsubj(is-7, problem-3)
punct(is-7, ,-4)
advmod(is-7, though-5)
punct(is-7, ,-6)
ccomp(says-36, is-7)
mark(targets-19, that-8)
nummod(%-10, 80-9)
nsubj(targets-19, %-10)
case(housing-14, of-11)
det(housing-14, all-12)
compound(housing-14, retirement-13)
nmod:of(%-10, housing-14)
advmod(market-18, now-15)
case(market-18, on-16)
det(market-18, the-17)
nmod:on(%-10, market-18)
ccomp(is-7, targets-19)
det(wealthy-21, the-20)
dobj(targets-19, wealthy-21)
punct(targets-19, ---22)
advmod(makes-26, yet-23)
mark(makes-26, that-24)
nsubj(makes-26, group-25)
advcl(targets-19, makes-26)
compound:prt(makes-26, up-27)
advmod(20-29, just-28)
nummod(%-30, 20-29)
dobj(makes-26, %-30)
case(people-34, of-31)
det(people-34, all-32)
amod(people-34, elderly-33)
nmod:of(%-30, people-34)
punct(says-36, ,-35)
root(ROOT-0, says-36)
compound(Johnson-39, Gordon-37)
compound(Johnson-39, M.-38)
nsubj(says-36, Johnson-39)
punct(Johnson-39, ,-40)
det(specialist-45, a-41)
compound(specialist-45, Los-42)
compound(specialist-45, Angeles-43)
compound(specialist-45, retirement-housing-44)
appos(Johnson-39, specialist-45)
case(Laventhol-47, with-46)
nmod:with(specialist-45, Laventhol-47)
cc(Laventhol-47, &-48)
nmod:with(specialist-45, Horwath-49)
conj:&(Laventhol-47, Horwath-49)
punct(Laventhol-47, ,-50)
det(firm-54, a-51)
amod(firm-54, Philadelphia-based-52)
compound(firm-54, accounting-53)
appos(Laventhol-47, firm-54)
nsubj(studies-56, firm-54)
ref(firm-54, that-55)
acl:relcl(firm-54, studies-56)
amod(estate-58, real-57)
dobj(studies-56, estate-58)
punct(says-36, .-59)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#wealthy

target :: Also , our regulatory conceptions would suggest monetary-policy tools of the European central bank be designed so that they enabled effective targeting of the monetary variables without recourse to quantitative controls -LRB- or other direct interventions in financial markets -RRB- ./.
advmod(suggest-7, Also-1)
punct(suggest-7, ,-2)
nmod:poss(conceptions-5, our-3)
amod(conceptions-5, regulatory-4)
nsubj(suggest-7, conceptions-5)
aux(suggest-7, would-6)
root(ROOT-0, suggest-7)
compound(tools-9, monetary-policy-8)
nsubjpass(designed-16, tools-9)
case(bank-14, of-10)
det(bank-14, the-11)
amod(bank-14, European-12)
compound(bank-14, central-13)
nmod:of(tools-9, bank-14)
auxpass(designed-16, be-15)
ccomp(suggest-7, designed-16)
mark(enabled-20, so-17)
mwe(so-17, that-18)
nsubj(enabled-20, they-19)
advcl(designed-16, enabled-20)
amod(targeting-22, effective-21)
dobj(enabled-20, targeting-22)
case(variables-26, of-23)
det(variables-26, the-24)
amod(variables-26, monetary-25)
nmod:of(targeting-22, variables-26)
case(recourse-28, without-27)
nmod:without(targeting-22, recourse-28)
case(controls-31, to-29)
amod(controls-31, quantitative-30)
nmod:to(recourse-28, controls-31)
punct(interventions-36, -LRB--32)
cc(interventions-36, or-33)
amod(interventions-36, other-34)
amod(interventions-36, direct-35)
dep(controls-31, interventions-36)
case(markets-39, in-37)
amod(markets-39, financial-38)
nmod:in(interventions-36, markets-39)
punct(interventions-36, -RRB--40)
punct(suggest-7, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#variables

target :: In its drive for more minority students , Stanford joined forces with UCLA , the University of California at Berkeley and the University of Southern California to sponsor a forum targeting blacks and Hispanics ; about 200 prospective students attended the event ./.
case(drive-3, In-1)
nmod:poss(drive-3, its-2)
nmod:in(joined-10, drive-3)
case(students-7, for-4)
amod(students-7, more-5)
compound(students-7, minority-6)
nmod:for(drive-3, students-7)
punct(joined-10, ,-8)
nsubj(joined-10, Stanford-9)
root(ROOT-0, joined-10)
dobj(joined-10, forces-11)
case(UCLA-13, with-12)
nmod:with(joined-10, UCLA-13)
punct(UCLA-13, ,-14)
det(University-16, the-15)
nmod:with(joined-10, University-16)
conj:and(UCLA-13, University-16)
case(California-18, of-17)
nmod:of(University-16, California-18)
case(Berkeley-20, at-19)
nmod:at(University-16, Berkeley-20)
cc(UCLA-13, and-21)
det(University-23, the-22)
nmod:with(joined-10, University-23)
conj:and(UCLA-13, University-23)
case(California-26, of-24)
compound(California-26, Southern-25)
nmod:of(University-23, California-26)
mark(sponsor-28, to-27)
advcl(joined-10, sponsor-28)
det(forum-30, a-29)
dobj(sponsor-28, forum-30)
acl(forum-30, targeting-31)
dobj(targeting-31, blacks-32)
cc(blacks-32, and-33)
dobj(targeting-31, Hispanics-34)
conj:and(blacks-32, Hispanics-34)
punct(joined-10, ;-35)
advmod(200-37, about-36)
nummod(students-39, 200-37)
amod(students-39, prospective-38)
nsubj(attended-40, students-39)
parataxis(joined-10, attended-40)
det(event-42, the-41)
dobj(attended-40, event-42)
punct(joined-10, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#blacks

target :: The study also showed that different organisms ' stress proteins are chemically similar-raising the possibility that vaccines made with the proteins might prime immune cells to target many disease-causing organisms ./.
det(study-2, The-1)
nsubj(showed-4, study-2)
advmod(showed-4, also-3)
root(ROOT-0, showed-4)
mark(similar-raising-13, that-5)
amod(organisms-7, different-6)
nmod:poss(proteins-10, organisms-7)
case(organisms-7, '-8)
compound(proteins-10, stress-9)
nsubj(similar-raising-13, proteins-10)
aux(similar-raising-13, are-11)
advmod(similar-raising-13, chemically-12)
ccomp(showed-4, similar-raising-13)
det(possibility-15, the-14)
dobj(similar-raising-13, possibility-15)
dep(possibility-15, that-16)
dobj(that-16, vaccines-17)
acl(vaccines-17, made-18)
case(proteins-21, with-19)
det(proteins-21, the-20)
nmod:with(made-18, proteins-21)
acl(vaccines-17, might-22)
amod(cells-25, prime-23)
amod(cells-25, immune-24)
dobj(might-22, cells-25)
mark(target-27, to-26)
acl(cells-25, target-27)
amod(organisms-30, many-28)
amod(organisms-30, disease-causing-29)
dobj(target-27, organisms-30)
punct(showed-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#organisms

target :: Luby 's Cafeterias Inc . , San Antonio , Texas , is targeting the Midwest after recently inching out of its Deep South stronghold into Arizona ./.
nmod:poss(Inc-4, Luby-1)
case(Luby-1, 's-2)
compound(Inc-4, Cafeterias-3)
root(ROOT-0, Inc-4)
punct(Inc-4, .-5)
punct(targeting-8, ,-1)
compound(Antonio-3, San-2)
nsubj(targeting-8, Antonio-3)
punct(Antonio-3, ,-4)
appos(Antonio-3, Texas-5)
punct(Antonio-3, ,-6)
aux(targeting-8, is-7)
root(ROOT-0, targeting-8)
det(Midwest-10, the-9)
dobj(targeting-8, Midwest-10)
mark(inching-13, after-11)
advmod(inching-13, recently-12)
advcl(targeting-8, inching-13)
case(stronghold-19, out-14)
mwe(out-14, of-15)
nmod:poss(stronghold-19, its-16)
amod(stronghold-19, Deep-17)
amod(stronghold-19, South-18)
nmod:out_of(inching-13, stronghold-19)
case(Arizona-21, into-20)
nmod:into(inching-13, Arizona-21)
punct(targeting-8, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#midwest

target :: While this is clearly incompatible with the Fez plan , the Algiers resolutions merely criticized the U.S. policy for its Israeli bias without targeting the Shultz plan specifically ./.
mark(incompatible-5, While-1)
nsubj(incompatible-5, this-2)
cop(incompatible-5, is-3)
advmod(incompatible-5, clearly-4)
advcl(criticized-15, incompatible-5)
case(plan-9, with-6)
det(plan-9, the-7)
compound(plan-9, Fez-8)
nmod:with(incompatible-5, plan-9)
punct(criticized-15, ,-10)
det(resolutions-13, the-11)
compound(resolutions-13, Algiers-12)
nsubj(criticized-15, resolutions-13)
advmod(criticized-15, merely-14)
root(ROOT-0, criticized-15)
det(policy-18, the-16)
compound(policy-18, U.S.-17)
dobj(criticized-15, policy-18)
case(bias-22, for-19)
nmod:poss(bias-22, its-20)
amod(bias-22, Israeli-21)
nmod:for(policy-18, bias-22)
mark(targeting-24, without-23)
advcl(criticized-15, targeting-24)
det(plan-27, the-25)
compound(plan-27, Shultz-26)
dobj(targeting-24, plan-27)
advmod(targeting-24, specifically-28)
punct(criticized-15, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#plan

target :: The firm 's list also targets several truly out-of-favor stocks , namely Primerica , the financial-services concern , and retailers Dayton Hudson and Zayre ./.
det(firm-2, The-1)
nmod:poss(list-4, firm-2)
case(firm-2, 's-3)
nsubj(targets-6, list-4)
advmod(targets-6, also-5)
root(ROOT-0, targets-6)
amod(stocks-10, several-7)
advmod(out-of-favor-9, truly-8)
amod(stocks-10, out-of-favor-9)
dobj(targets-6, stocks-10)
punct(stocks-10, ,-11)
advmod(Primerica-13, namely-12)
appos(stocks-10, Primerica-13)
punct(Primerica-13, ,-14)
det(concern-17, the-15)
compound(concern-17, financial-services-16)
appos(Primerica-13, concern-17)
punct(Primerica-13, ,-18)
cc(Primerica-13, and-19)
compound(Hudson-22, retailers-20)
compound(Hudson-22, Dayton-21)
appos(stocks-10, Hudson-22)
conj:and(Primerica-13, Hudson-22)
cc(Hudson-22, and-23)
conj:and(Primerica-13, Zayre-24)
conj:and(Hudson-22, Zayre-24)
punct(targets-6, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#stocks

target :: You allege that there still remain hundreds of state-owned companies targeted for privatization , bureaucratic delays in trade movements and aid flows , high tariffs , and a land-reform movement that may promote unemployment ./.
nsubj(allege-2, You-1)
root(ROOT-0, allege-2)
mark(remain-6, that-3)
expl(remain-6, there-4)
advmod(remain-6, still-5)
ccomp(allege-2, remain-6)
nsubj(remain-6, hundreds-7)
case(companies-10, of-8)
amod(companies-10, state-owned-9)
nmod:of(hundreds-7, companies-10)
acl(companies-10, targeted-11)
case(privatization-13, for-12)
nmod:for(targeted-11, privatization-13)
punct(hundreds-7, ,-14)
amod(delays-16, bureaucratic-15)
nsubj(remain-6, delays-16)
conj:and(hundreds-7, delays-16)
case(movements-19, in-17)
compound(movements-19, trade-18)
nmod:in(delays-16, movements-19)
cc(movements-19, and-20)
compound(flows-22, aid-21)
nmod:in(delays-16, flows-22)
conj:and(movements-19, flows-22)
punct(hundreds-7, ,-23)
amod(tariffs-25, high-24)
nsubj(remain-6, tariffs-25)
conj:and(hundreds-7, tariffs-25)
punct(hundreds-7, ,-26)
cc(hundreds-7, and-27)
det(movement-30, a-28)
amod(movement-30, land-reform-29)
nsubj(remain-6, movement-30)
conj:and(hundreds-7, movement-30)
nsubj(promote-33, movement-30)
ref(movement-30, that-31)
aux(promote-33, may-32)
acl:relcl(movement-30, promote-33)
dobj(promote-33, unemployment-34)
punct(allege-2, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#privatization

target :: I have authored a bill to implement community-based gang violence intervention programs that would target elementary and junior high schools most affected by gang violence , providing job training , family and individual counseling and other techniques to limit the appeal of gangs and to teach vulnerable youngsters not to need to depend on drugs or gangs ./.
nsubj(authored-3, I-1)
aux(authored-3, have-2)
root(ROOT-0, authored-3)
det(bill-5, a-4)
dobj(authored-3, bill-5)
mark(implement-7, to-6)
acl(bill-5, implement-7)
amod(programs-12, community-based-8)
compound(programs-12, gang-9)
compound(programs-12, violence-10)
compound(programs-12, intervention-11)
dobj(implement-7, programs-12)
nsubj(target-15, programs-12)
ref(programs-12, that-13)
aux(target-15, would-14)
acl:relcl(programs-12, target-15)
amod(schools-20, elementary-16)
cc(elementary-16, and-17)
conj:and(elementary-16, junior-18)
amod(schools-20, junior-18)
amod(schools-20, high-19)
dobj(target-15, schools-20)
advmod(affected-22, most-21)
acl(schools-20, affected-22)
case(violence-25, by-23)
compound(violence-25, gang-24)
nmod:by(affected-22, violence-25)
punct(authored-3, ,-26)
advcl(authored-3, providing-27)
compound(training-29, job-28)
dobj(providing-27, training-29)
punct(training-29, ,-30)
dobj(providing-27, family-31)
conj:and(training-29, family-31)
cc(training-29, and-32)
amod(counseling-34, individual-33)
dobj(providing-27, counseling-34)
conj:and(training-29, counseling-34)
cc(counseling-34, and-35)
amod(techniques-37, other-36)
conj:and(training-29, techniques-37)
conj:and(counseling-34, techniques-37)
mark(limit-39, to-38)
advcl(providing-27, limit-39)
det(appeal-41, the-40)
dobj(limit-39, appeal-41)
case(gangs-43, of-42)
nmod:of(appeal-41, gangs-43)
cc(limit-39, and-44)
mark(teach-46, to-45)
advcl(providing-27, teach-46)
conj:and(limit-39, teach-46)
amod(youngsters-48, vulnerable-47)
dobj(teach-46, youngsters-48)
nsubj:xsubj(need-51, youngsters-48)
neg(need-51, not-49)
mark(need-51, to-50)
xcomp(teach-46, need-51)
mark(depend-53, to-52)
xcomp(need-51, depend-53)
case(drugs-55, on-54)
nmod:on(depend-53, drugs-55)
cc(drugs-55, or-56)
nmod:on(depend-53, gangs-57)
conj:or(drugs-55, gangs-57)
punct(authored-3, .-58)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#schools

target :: Three new funds targeted toward Japanese , Asian and European investors will prompt a fresh influx of foreign cash into the Thai stock market ./.
nummod(funds-3, Three-1)
amod(funds-3, new-2)
nsubj(prompt-13, funds-3)
acl(funds-3, targeted-4)
case(investors-11, toward-5)
amod(investors-11, Japanese-6)
punct(Japanese-6, ,-7)
conj:and(Japanese-6, Asian-8)
amod(investors-11, Asian-8)
cc(Japanese-6, and-9)
conj:and(Japanese-6, European-10)
amod(investors-11, European-10)
nmod:toward(targeted-4, investors-11)
aux(prompt-13, will-12)
root(ROOT-0, prompt-13)
det(influx-16, a-14)
amod(influx-16, fresh-15)
dobj(prompt-13, influx-16)
case(cash-19, of-17)
amod(cash-19, foreign-18)
nmod:of(influx-16, cash-19)
case(market-24, into-20)
det(market-24, the-21)
compound(market-24, Thai-22)
compound(market-24, stock-23)
nmod:into(prompt-13, market-24)
punct(prompt-13, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#investors

target :: They emerged with a 20-year program targeted to three Michigan communities: Battle Creek , an impoverished rural area and a segment of innercity Detroit ./.
nsubj(emerged-2, They-1)
root(ROOT-0, emerged-2)
case(program-6, with-3)
det(program-6, a-4)
amod(program-6, 20-year-5)
nmod:with(emerged-2, program-6)
acl(program-6, targeted-7)
case(communities-11, to-8)
nummod(communities-11, three-9)
compound(communities-11, Michigan-10)
nmod:to(targeted-7, communities-11)
punct(emerged-2, :-12)
compound(Creek-14, Battle-13)
dep(emerged-2, Creek-14)
punct(Creek-14, ,-15)
det(area-19, an-16)
amod(area-19, impoverished-17)
amod(area-19, rural-18)
appos(Creek-14, area-19)
cc(area-19, and-20)
det(segment-22, a-21)
appos(Creek-14, segment-22)
conj:and(area-19, segment-22)
case(Detroit-25, of-23)
compound(Detroit-25, innercity-24)
nmod:of(segment-22, Detroit-25)
punct(emerged-2, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#communities

target :: L.A. Style , a monthly with a circulation of about 50 , 000 , is one of several trend-seeking publications such as Taxi and Details that grew rapidly in recent years by targeting upscale readers in search of the latest nightspots , restaurants and fashions ./.
compound(Style-2, L.A.-1)
nsubj(one-16, Style-2)
punct(Style-2, ,-3)
det(monthly-5, a-4)
appos(Style-2, monthly-5)
case(circulation-8, with-6)
det(circulation-8, a-7)
nmod:with(monthly-5, circulation-8)
case(50-11, of-9)
advmod(50-11, about-10)
nmod:of(circulation-8, 50-11)
punct(50-11, ,-12)
appos(50-11, 000-13)
punct(50-11, ,-14)
cop(one-16, is-15)
root(ROOT-0, one-16)
case(publications-20, of-17)
amod(publications-20, several-18)
amod(publications-20, trend-seeking-19)
nmod:of(one-16, publications-20)
nsubj(grew-27, publications-20)
case(Taxi-23, such-21)
mwe(such-21, as-22)
nmod:such_as(publications-20, Taxi-23)
cc(Taxi-23, and-24)
nmod:such_as(publications-20, Details-25)
conj:and(Taxi-23, Details-25)
ref(publications-20, that-26)
acl:relcl(publications-20, grew-27)
advmod(grew-27, rapidly-28)
case(years-31, in-29)
amod(years-31, recent-30)
nmod:in(grew-27, years-31)
mark(targeting-33, by-32)
advcl(grew-27, targeting-33)
amod(readers-35, upscale-34)
dobj(targeting-33, readers-35)
case(search-37, in-36)
nmod:in(targeting-33, search-37)
case(nightspots-41, of-38)
det(nightspots-41, the-39)
amod(nightspots-41, latest-40)
nmod:of(search-37, nightspots-41)
punct(nightspots-41, ,-42)
nmod:of(search-37, restaurants-43)
conj:and(nightspots-41, restaurants-43)
cc(nightspots-41, and-44)
nmod:of(search-37, fashions-45)
conj:and(nightspots-41, fashions-45)
punct(one-16, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#readers

target :: Federal prosecutors in Texas , California and Florida are particularly burdened with bank fraud investigations , many targeting savings and loans that failed after speculative lending binges ./.
amod(prosecutors-2, Federal-1)
nsubjpass(burdened-11, prosecutors-2)
case(Texas-4, in-3)
nmod:in(prosecutors-2, Texas-4)
punct(Texas-4, ,-5)
nmod:in(prosecutors-2, California-6)
conj:and(Texas-4, California-6)
cc(Texas-4, and-7)
nmod:in(prosecutors-2, Florida-8)
conj:and(Texas-4, Florida-8)
auxpass(burdened-11, are-9)
advmod(burdened-11, particularly-10)
root(ROOT-0, burdened-11)
case(investigations-15, with-12)
compound(investigations-15, bank-13)
compound(investigations-15, fraud-14)
nmod:with(burdened-11, investigations-15)
punct(burdened-11, ,-16)
amod(savings-19, many-17)
amod(savings-19, targeting-18)
dobj(burdened-11, savings-19)
nsubj(failed-23, savings-19)
cc(savings-19, and-20)
dobj(burdened-11, loans-21)
conj:and(savings-19, loans-21)
nsubj(failed-23, loans-21)
ref(savings-19, that-22)
acl:relcl(savings-19, failed-23)
case(binges-27, after-24)
amod(binges-27, speculative-25)
compound(binges-27, lending-26)
nmod:after(failed-23, binges-27)
punct(burdened-11, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#savings

target :: The agency uses company-kept injury records to target inspections to work sites where injuries are most likely to occur , a system that Rep. Lantos contends provides irresponsible firms `` a premium for cheating , '' but that OSHA believes is the most effective use of its resources ./.
det(agency-2, The-1)
nsubj(uses-3, agency-2)
root(ROOT-0, uses-3)
amod(records-6, company-kept-4)
compound(records-6, injury-5)
dobj(uses-3, records-6)
mark(target-8, to-7)
advcl(uses-3, target-8)
dobj(target-8, inspections-9)
mark(work-11, to-10)
advcl(target-8, work-11)
dobj(work-11, sites-12)
advmod(likely-17, where-13)
nsubj(likely-17, injuries-14)
nsubj:xsubj(occur-19, injuries-14)
cop(likely-17, are-15)
advmod(likely-17, most-16)
acl:relcl(sites-12, likely-17)
mark(occur-19, to-18)
xcomp(likely-17, occur-19)
punct(uses-3, ,-20)
det(system-22, a-21)
dobj(uses-3, system-22)
dobj(contends-26, system-22)
ref(system-22, that-23)
compound(Lantos-25, Rep.-24)
nsubj(contends-26, Lantos-25)
acl:relcl(system-22, contends-26)
ccomp(contends-26, provides-27)
amod(firms-29, irresponsible-28)
dobj(provides-27, firms-29)
punct(premium-32, ``-30)
det(premium-32, a-31)
dep(firms-29, premium-32)
case(cheating-34, for-33)
nmod:for(premium-32, cheating-34)
punct(premium-32, ,-35)
punct(premium-32, ''-36)
cc(premium-32, but-37)
dobj(believes-40, that-38)
nsubj(believes-40, OSHA-39)
dep(firms-29, believes-40)
conj:but(premium-32, believes-40)
cop(use-45, is-41)
det(use-45, the-42)
advmod(effective-44, most-43)
amod(use-45, effective-44)
ccomp(believes-40, use-45)
case(resources-48, of-46)
nmod:poss(resources-48, its-47)
nmod:of(use-45, resources-48)
punct(uses-3, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#inspections

target :: Second , if politicians think that the Fed is targeting economic growth , they will blame the Fed if the economy slows ./.
dep(blame-16, Second-1)
punct(blame-16, ,-2)
mark(think-5, if-3)
nsubj(think-5, politicians-4)
advcl(blame-16, think-5)
mark(targeting-10, that-6)
det(Fed-8, the-7)
nsubj(targeting-10, Fed-8)
aux(targeting-10, is-9)
ccomp(think-5, targeting-10)
amod(growth-12, economic-11)
dobj(targeting-10, growth-12)
punct(blame-16, ,-13)
nsubj(blame-16, they-14)
aux(blame-16, will-15)
root(ROOT-0, blame-16)
det(Fed-18, the-17)
dobj(blame-16, Fed-18)
mark(slows-22, if-19)
det(economy-21, the-20)
nsubj(slows-22, economy-21)
advcl(blame-16, slows-22)
punct(blame-16, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#growth

target :: IBM targeted the EC Commission for special attention ./.
nsubj(targeted-2, IBM-1)
root(ROOT-0, targeted-2)
det(Commission-5, the-3)
compound(Commission-5, EC-4)
dobj(targeted-2, Commission-5)
case(attention-8, for-6)
amod(attention-8, special-7)
nmod:for(targeted-2, attention-8)
punct(targeted-2, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#commission

target :: Some Democrats already oppose the bill as too watered-down ; that sentiment could grow if Rostenkowski and Bentsen agree in talks next week to remove the plant-closing notification provision targeted by Reagan ./.
det(Democrats-2, Some-1)
nsubj(oppose-4, Democrats-2)
advmod(oppose-4, already-3)
root(ROOT-0, oppose-4)
det(bill-6, the-5)
dobj(oppose-4, bill-6)
case(watered-down-9, as-7)
advmod(watered-down-9, too-8)
advcl(oppose-4, watered-down-9)
punct(oppose-4, ;-10)
det(sentiment-12, that-11)
nsubj(grow-14, sentiment-12)
aux(grow-14, could-13)
parataxis(oppose-4, grow-14)
mark(agree-19, if-15)
nsubj(agree-19, Rostenkowski-16)
nsubj:xsubj(remove-25, Rostenkowski-16)
cc(Rostenkowski-16, and-17)
conj:and(Rostenkowski-16, Bentsen-18)
nsubj(agree-19, Bentsen-18)
nsubj:xsubj(remove-25, Bentsen-18)
advcl(grow-14, agree-19)
case(talks-21, in-20)
nmod:in(agree-19, talks-21)
amod(week-23, next-22)
nmod:tmod(agree-19, week-23)
mark(remove-25, to-24)
xcomp(agree-19, remove-25)
det(provision-29, the-26)
amod(provision-29, plant-closing-27)
compound(provision-29, notification-28)
dobj(remove-25, provision-29)
acl(provision-29, targeted-30)
case(Reagan-32, by-31)
nmod:by(targeted-30, Reagan-32)
punct(oppose-4, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#reagan

target :: More sophisticated groups of pickpockets and scam artists are also targeting airports , police say ./.
advmod(sophisticated-2, More-1)
amod(groups-3, sophisticated-2)
nsubj(targeting-11, groups-3)
case(pickpockets-5, of-4)
nmod:of(groups-3, pickpockets-5)
cc(pickpockets-5, and-6)
compound(artists-8, scam-7)
nmod:of(groups-3, artists-8)
conj:and(pickpockets-5, artists-8)
aux(targeting-11, are-9)
advmod(targeting-11, also-10)
ccomp(say-15, targeting-11)
dobj(targeting-11, airports-12)
punct(say-15, ,-13)
nsubj(say-15, police-14)
root(ROOT-0, say-15)
punct(say-15, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#airports

target :: But this month S & P is trying to take the real estate world by storm , with a marketing campaign targeting 200 , 000 real estate brokers , appraisers and portfolio managers ./.
cc(trying-8, But-1)
det(month-3, this-2)
nmod:tmod(trying-8, month-3)
nsubj(trying-8, S-4)
nsubj:xsubj(take-10, S-4)
cc(S-4, &-5)
conj:&(S-4, P-6)
nsubj(trying-8, P-6)
nsubj:xsubj(take-10, P-6)
aux(trying-8, is-7)
root(ROOT-0, trying-8)
mark(take-10, to-9)
xcomp(trying-8, take-10)
det(world-14, the-11)
amod(world-14, real-12)
compound(world-14, estate-13)
dobj(take-10, world-14)
case(storm-16, by-15)
nmod:by(take-10, storm-16)
punct(take-10, ,-17)
case(campaign-21, with-18)
det(campaign-21, a-19)
compound(campaign-21, marketing-20)
nmod:with(take-10, campaign-21)
acl(campaign-21, targeting-22)
nummod(managers-33, 200-23)
punct(200-23, ,-24)
nummod(brokers-28, 000-25)
amod(brokers-28, real-26)
compound(brokers-28, estate-27)
conj:and(200-23, brokers-28)
nummod(managers-33, brokers-28)
punct(200-23, ,-29)
conj:and(200-23, appraisers-30)
nummod(managers-33, appraisers-30)
cc(200-23, and-31)
conj:and(200-23, portfolio-32)
nummod(managers-33, portfolio-32)
dobj(targeting-22, managers-33)
punct(trying-8, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#managers

target :: Also targeted for cuts would be IBM 's payroll and products ./.
advmod(targeted-2, Also-1)
csubj(payroll-9, targeted-2)
case(cuts-4, for-3)
nmod:for(targeted-2, cuts-4)
aux(payroll-9, would-5)
cop(payroll-9, be-6)
nmod:poss(payroll-9, IBM-7)
case(IBM-7, 's-8)
root(ROOT-0, payroll-9)
cc(payroll-9, and-10)
conj:and(payroll-9, products-11)
punct(payroll-9, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#cuts

target :: Philip Morris also has $ 1.5 billion in available cash and the ability to acquire more funding if necessary , although people close to the company said some of the funds available are targeted for other corporate purposes and for expenses related to the proposed acquisition ./.
compound(Morris-2, Philip-1)
nsubj(has-4, Morris-2)
advmod(has-4, also-3)
root(ROOT-0, has-4)
dobj(has-4, $-5)
compound(billion-7, 1.5-6)
nummod($-5, billion-7)
case(cash-10, in-8)
amod(cash-10, available-9)
nmod:in($-5, cash-10)
cc(has-4, and-11)
det(ability-13, the-12)
conj:and(has-4, ability-13)
mark(acquire-15, to-14)
acl(ability-13, acquire-15)
amod(funding-17, more-16)
dobj(acquire-15, funding-17)
mark(necessary-19, if-18)
advcl(acquire-15, necessary-19)
punct(has-4, ,-20)
mark(said-27, although-21)
nsubj(said-27, people-22)
case(company-26, close-23)
mwe(close-23, to-24)
det(company-26, the-25)
nmod:close_to(people-22, company-26)
advcl(has-4, said-27)
nsubjpass(targeted-34, some-28)
nsubjpass(targeted-34', some-28)
case(funds-31, of-29)
det(funds-31, the-30)
nmod:of(some-28, funds-31)
amod(funds-31, available-32)
auxpass(targeted-34, are-33)
ccomp(said-27, targeted-34)
ccomp(said-27, targeted-34')
conj:and(targeted-34, targeted-34')
case(purposes-38, for-35)
amod(purposes-38, other-36)
amod(purposes-38, corporate-37)
nmod:for(targeted-34, purposes-38)
cc(targeted-34, and-39)
case(expenses-41, for-40)
nmod:for(targeted-34', expenses-41)
acl(expenses-41, related-42)
case(acquisition-46, to-43)
det(acquisition-46, the-44)
amod(acquisition-46, proposed-45)
nmod:to(related-42, acquisition-46)
punct(has-4, .-47)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#some

target :: The results of the study will be used by nonprofit groups eager to identify potential donors and will be incorporated into advertisements for the `` Give Five '' program that will be targeted next year to young professionals , Mr. O'Connell says ./.
det(results-2, The-1)
nsubjpass(used-8, results-2)
nsubjpass(incorporated-20, results-2)
case(study-5, of-3)
det(study-5, the-4)
nmod:of(results-2, study-5)
aux(used-8, will-6)
auxpass(used-8, be-7)
ccomp(says-42, used-8)
case(groups-11, by-9)
amod(groups-11, nonprofit-10)
nmod:agent(used-8, groups-11)
amod(groups-11, eager-12)
mark(identify-14, to-13)
xcomp(eager-12, identify-14)
amod(donors-16, potential-15)
dobj(identify-14, donors-16)
cc(used-8, and-17)
aux(incorporated-20, will-18)
auxpass(incorporated-20, be-19)
conj:and(used-8, incorporated-20)
ccomp(says-42, incorporated-20)
case(advertisements-22, into-21)
nmod:into(incorporated-20, advertisements-22)
case(program-29, for-23)
det(program-29, the-24)
punct(program-29, ``-25)
compound(program-29, Give-26)
nummod(program-29, Five-27)
punct(program-29, ''-28)
nmod:for(incorporated-20, program-29)
nsubjpass(targeted-33, program-29)
ref(program-29, that-30)
aux(targeted-33, will-31)
auxpass(targeted-33, be-32)
acl:relcl(program-29, targeted-33)
amod(year-35, next-34)
nmod:tmod(targeted-33, year-35)
case(professionals-38, to-36)
amod(professionals-38, young-37)
nmod:to(targeted-33, professionals-38)
punct(says-42, ,-39)
compound(O'Connell-41, Mr.-40)
nsubj(says-42, O'Connell-41)
root(ROOT-0, says-42)
punct(says-42, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#program

target :: The company has targeted the electroplating industry for several reasons ./.
det(company-2, The-1)
nsubj(targeted-4, company-2)
aux(targeted-4, has-3)
root(ROOT-0, targeted-4)
det(industry-7, the-5)
amod(industry-7, electroplating-6)
dobj(targeted-4, industry-7)
case(reasons-10, for-8)
amod(reasons-10, several-9)
nmod:for(targeted-4, reasons-10)
punct(targeted-4, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#industry

target :: The Justice Department matched this effort by forming an Environmental Crimes Unit and by targeting environmental crime as a high priority for FBI investigations ./.
det(Department-3, The-1)
compound(Department-3, Justice-2)
nsubj(matched-4, Department-3)
root(ROOT-0, matched-4)
det(effort-6, this-5)
dobj(matched-4, effort-6)
mark(forming-8, by-7)
advcl(matched-4, forming-8)
det(Unit-12, an-9)
amod(Unit-12, Environmental-10)
compound(Unit-12, Crimes-11)
dobj(forming-8, Unit-12)
cc(forming-8, and-13)
mark(targeting-15, by-14)
advcl(matched-4, targeting-15)
conj:and(forming-8, targeting-15)
amod(crime-17, environmental-16)
dobj(targeting-15, crime-17)
case(priority-21, as-18)
det(priority-21, a-19)
amod(priority-21, high-20)
nmod:as(targeting-15, priority-21)
case(investigations-24, for-22)
compound(investigations-24, FBI-23)
nmod:for(priority-21, investigations-24)
punct(matched-4, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#crime

target :: Both praise this ad for its clean identification of an issue that matters to an audience targeted by the Democrats ./.
det(praise-2, Both-1)
root(ROOT-0, praise-2)
det(ad-4, this-3)
dep(praise-2, ad-4)
case(identification-8, for-5)
nmod:poss(identification-8, its-6)
amod(identification-8, clean-7)
nmod:for(ad-4, identification-8)
case(issue-11, of-9)
det(issue-11, an-10)
nmod:of(identification-8, issue-11)
nsubj(matters-13, issue-11)
ref(issue-11, that-12)
acl:relcl(issue-11, matters-13)
case(audience-16, to-14)
det(audience-16, an-15)
nmod:to(matters-13, audience-16)
acl(audience-16, targeted-17)
case(Democrats-20, by-18)
det(Democrats-20, the-19)
nmod:by(targeted-17, Democrats-20)
punct(praise-2, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#democrats

target :: Out of 2 , 500 patented Soviet technologies available , Lic-Con has targeted 10 for the U.S. market initially , including a ceramic spray-coating process ; a non-explosive powder for excavating rock ; and a water-resistant concrete binding agent ./.
root(ROOT-0, Out-1)
dep(Out-1, of-2)
root(of-2, 2-3)
punct(2-3, ,-4)
nummod(technologies-8, 500-5)
amod(technologies-8, patented-6)
amod(technologies-8, Soviet-7)
root(,-4, technologies-8)
amod(technologies-8, available-9)
punct(technologies-8, ,-10)
nsubj(targeted-13, Lic-Con-11)
aux(targeted-13, has-12)
acl:relcl(technologies-8, targeted-13)
dobj(targeted-13, 10-14)
case(market-18, for-15)
det(market-18, the-16)
compound(market-18, U.S.-17)
nmod:for(targeted-13, market-18)
advmod(market-18, initially-19)
punct(technologies-8, ,-20)
case(process-25, including-21)
det(process-25, a-22)
amod(process-25, ceramic-23)
compound(process-25, spray-coating-24)
nmod:including(technologies-8, process-25)
punct(technologies-8, ;-26)
det(powder-29, a-27)
amod(powder-29, non-explosive-28)
root(,-4, powder-29)
conj:and(technologies-8, powder-29)
case(rock-32, for-30)
amod(rock-32, excavating-31)
nmod:for(powder-29, rock-32)
punct(technologies-8, ;-33)
cc(technologies-8, and-34)
det(agent-39, a-35)
amod(agent-39, water-resistant-36)
compound(agent-39, concrete-37)
compound(agent-39, binding-38)
root(,-4, agent-39)
conj:and(technologies-8, agent-39)
punct(technologies-8, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#10

target :: Since May , he has hired a marketing consultant , a creative director and a new marketing manager to help Hanover use its consumer lists more effectively , targeting only those consumers most likely to buy ./.
case(May-2, Since-1)
nmod:since(hired-6, May-2)
punct(hired-6, ,-3)
nsubj(hired-6, he-4)
aux(hired-6, has-5)
root(ROOT-0, hired-6)
det(consultant-9, a-7)
compound(consultant-9, marketing-8)
dobj(hired-6, consultant-9)
punct(consultant-9, ,-10)
det(director-13, a-11)
amod(director-13, creative-12)
dobj(hired-6, director-13)
conj:and(consultant-9, director-13)
cc(consultant-9, and-14)
det(manager-18, a-15)
amod(manager-18, new-16)
compound(manager-18, marketing-17)
dobj(hired-6, manager-18)
conj:and(consultant-9, manager-18)
mark(help-20, to-19)
acl(consultant-9, help-20)
nsubj(use-22, Hanover-21)
ccomp(help-20, use-22)
nmod:poss(consumer-24, its-23)
dobj(use-22, consumer-24)
dep(hired-6, lists-25)
advmod(effectively-27, more-26)
advmod(lists-25, effectively-27)
punct(lists-25, ,-28)
xcomp(lists-25, targeting-29)
advmod(consumers-32, only-30)
det(consumers-32, those-31)
dobj(targeting-29, consumers-32)
advmod(likely-34, most-33)
xcomp(targeting-29, likely-34)
mark(buy-36, to-35)
xcomp(likely-34, buy-36)
punct(hired-6, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#consumers

target :: In a letter sent yesterday to the German media , the terrorist group said Mr. Tietmeyer , who was unharmed in the attack , has been targeted because of his central role in sustaining the world 's `` imperialist '' financial system ./.
case(letter-3, In-1)
det(letter-3, a-2)
nmod:in(said-14, letter-3)
acl(letter-3, sent-4)
nmod:tmod(sent-4, yesterday-5)
case(media-9, to-6)
det(media-9, the-7)
amod(media-9, German-8)
nmod:to(sent-4, media-9)
punct(said-14, ,-10)
det(group-13, the-11)
amod(group-13, terrorist-12)
nsubj(said-14, group-13)
root(ROOT-0, said-14)
compound(Tietmeyer-16, Mr.-15)
nsubj(unharmed-20, Tietmeyer-16)
nsubjpass(targeted-27, Tietmeyer-16)
punct(Tietmeyer-16, ,-17)
ref(Tietmeyer-16, who-18)
cop(unharmed-20, was-19)
acl:relcl(Tietmeyer-16, unharmed-20)
case(attack-23, in-21)
det(attack-23, the-22)
nmod:in(unharmed-20, attack-23)
punct(Tietmeyer-16, ,-24)
aux(targeted-27, has-25)
auxpass(targeted-27, been-26)
ccomp(said-14, targeted-27)
case(role-32, because-28)
mwe(because-28, of-29)
nmod:poss(role-32, his-30)
amod(role-32, central-31)
nmod:because_of(targeted-27, role-32)
mark(sustaining-34, in-33)
acl(role-32, sustaining-34)
det(world-36, the-35)
nmod:poss(system-42, world-36)
case(world-36, 's-37)
punct(system-42, ``-38)
compound(system-42, imperialist-39)
punct(system-42, ''-40)
amod(system-42, financial-41)
dobj(sustaining-34, system-42)
punct(said-14, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#tietmeyer

target :: Terry Knowles , special agent in charge of the Sacramento FBI office , declined to say why California was targeted or provide other details ./.
compound(Knowles-2, Terry-1)
nsubj(declined-14, Knowles-2)
nsubj:xsubj(say-16, Knowles-2)
punct(Knowles-2, ,-3)
amod(agent-5, special-4)
appos(Knowles-2, agent-5)
case(charge-7, in-6)
nmod:in(agent-5, charge-7)
case(office-12, of-8)
det(office-12, the-9)
compound(office-12, Sacramento-10)
compound(office-12, FBI-11)
nmod:of(charge-7, office-12)
punct(Knowles-2, ,-13)
root(ROOT-0, declined-14)
mark(say-16, to-15)
xcomp(declined-14, say-16)
advmod(targeted-20, why-17)
nsubjpass(targeted-20, California-18)
nsubj(provide-22, California-18)
auxpass(targeted-20, was-19)
dep(say-16, targeted-20)
cc(targeted-20, or-21)
dep(say-16, provide-22)
conj:or(targeted-20, provide-22)
amod(details-24, other-23)
dobj(provide-22, details-24)
punct(declined-14, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#california

target :: Last month , South Korea 's Ministry of Trade and Industry put semiconductors at the top of a list of seven high-technology industries that it has targeted for rapid development over the next five years , starting in 1989 ./.
amod(month-2, Last-1)
nmod:tmod(put-12, month-2)
punct(put-12, ,-3)
compound(Korea-5, South-4)
nmod:poss(Ministry-7, Korea-5)
case(Korea-5, 's-6)
nsubj(put-12, Ministry-7)
case(Trade-9, of-8)
nmod:of(Ministry-7, Trade-9)
cc(Trade-9, and-10)
nmod:of(Ministry-7, Industry-11)
conj:and(Trade-9, Industry-11)
root(ROOT-0, put-12)
dobj(put-12, semiconductors-13)
case(top-16, at-14)
det(top-16, the-15)
nmod:at(put-12, top-16)
case(list-19, of-17)
det(list-19, a-18)
nmod:of(top-16, list-19)
dobj(targeted-27, list-19)
case(industries-23, of-20)
nummod(industries-23, seven-21)
compound(industries-23, high-technology-22)
nmod:of(list-19, industries-23)
ref(list-19, that-24)
nsubj(targeted-27, it-25)
aux(targeted-27, has-26)
acl:relcl(list-19, targeted-27)
case(development-30, for-28)
amod(development-30, rapid-29)
nmod:for(targeted-27, development-30)
case(years-35, over-31)
det(years-35, the-32)
amod(years-35, next-33)
nummod(years-35, five-34)
nmod:over(development-30, years-35)
punct(targeted-27, ,-36)
xcomp(targeted-27, starting-37)
case(1989-39, in-38)
nmod:in(starting-37, 1989-39)
punct(put-12, .-40)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#industries

target :: Two more of Sassy magazine 's largest advertisers have been targeted for a letterwriting campaign by Liberty Report , a newspaper published by Rev. Jerry Falwell 's Moral Majority ./.
nummod(more-2, Two-1)
nsubjpass(targeted-11, more-2)
case(advertisers-8, of-3)
amod(magazine-5, Sassy-4)
nmod:poss(advertisers-8, magazine-5)
case(magazine-5, 's-6)
amod(advertisers-8, largest-7)
nmod:of(more-2, advertisers-8)
aux(targeted-11, have-9)
auxpass(targeted-11, been-10)
root(ROOT-0, targeted-11)
case(campaign-15, for-12)
det(campaign-15, a-13)
amod(campaign-15, letterwriting-14)
nmod:for(targeted-11, campaign-15)
case(Report-18, by-16)
compound(Report-18, Liberty-17)
nmod:by(campaign-15, Report-18)
punct(Report-18, ,-19)
det(newspaper-21, a-20)
appos(Report-18, newspaper-21)
acl(newspaper-21, published-22)
case(Majority-29, by-23)
compound(Falwell-26, Rev.-24)
compound(Falwell-26, Jerry-25)
nmod:poss(Majority-29, Falwell-26)
case(Falwell-26, 's-27)
amod(Majority-29, Moral-28)
nmod:by(published-22, Majority-29)
punct(targeted-11, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#more

target :: `` Now , we are totally changing our marketing to target those people , '' says Mr. Goldstein ./.
punct(changing-7, ``-1)
advmod(changing-7, Now-2)
punct(changing-7, ,-3)
nsubj(changing-7, we-4)
aux(changing-7, are-5)
advmod(changing-7, totally-6)
dep(says-16, changing-7)
nmod:poss(marketing-9, our-8)
dobj(changing-7, marketing-9)
mark(target-11, to-10)
advcl(changing-7, target-11)
det(people-13, those-12)
dobj(target-11, people-13)
punct(changing-7, ,-14)
punct(changing-7, ''-15)
root(ROOT-0, says-16)
compound(Goldstein-18, Mr.-17)
nsubj(says-16, Goldstein-18)
punct(says-16, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#people

target :: Carnival seems ahead of the pack in targeting younger customers ./.
nsubj(seems-2, Carnival-1)
root(ROOT-0, seems-2)
advmod(seems-2, ahead-3)
case(pack-6, of-4)
det(pack-6, the-5)
nmod:of(ahead-3, pack-6)
mark(targeting-8, in-7)
acl(pack-6, targeting-8)
amod(customers-10, younger-9)
dobj(targeting-8, customers-10)
punct(seems-2, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#customers

target :: One of the most striking examples of the trend is Gilead Sciences Inc. in Foster City , Calif . , a company devoted exclusively to genetic targeting ./.
nsubj(Inc.-13, One-1)
case(examples-6, of-2)
det(examples-6, the-3)
advmod(striking-5, most-4)
amod(examples-6, striking-5)
nmod:of(One-1, examples-6)
case(trend-9, of-7)
det(trend-9, the-8)
nmod:of(examples-6, trend-9)
cop(Inc.-13, is-10)
compound(Inc.-13, Gilead-11)
compound(Inc.-13, Sciences-12)
root(ROOT-0, Inc.-13)
case(City-16, in-14)
compound(City-16, Foster-15)
nmod:in(Inc.-13, City-16)
punct(City-16, ,-17)
appos(City-16, Calif-18)
punct(Inc.-13, .-19)
root(ROOT-0, ,-1)
det(company-3, a-2)
root(,-1, company-3)
amod(company-3, devoted-4)
advmod(targeting-8, exclusively-5)
case(targeting-8, to-6)
amod(targeting-8, genetic-7)
nmod:to(devoted-4, targeting-8)
punct(company-3, .-9)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

target :: By hitching a ride on these proteins , drugs can be very narrowly targeted to attack diseased cells , Mr. McCamant says ./.
mark(hitching-2, By-1)
advcl(targeted-14, hitching-2)
det(ride-4, a-3)
dobj(hitching-2, ride-4)
case(proteins-7, on-5)
det(proteins-7, these-6)
nmod:on(ride-4, proteins-7)
punct(targeted-14, ,-8)
nsubjpass(targeted-14, drugs-9)
nsubj:xsubj(attack-16, drugs-9)
aux(targeted-14, can-10)
auxpass(targeted-14, be-11)
advmod(narrowly-13, very-12)
advmod(targeted-14, narrowly-13)
ccomp(says-22, targeted-14)
mark(attack-16, to-15)
xcomp(targeted-14, attack-16)
amod(cells-18, diseased-17)
dobj(attack-16, cells-18)
punct(says-22, ,-19)
compound(McCamant-21, Mr.-20)
nsubj(says-22, McCamant-21)
root(ROOT-0, says-22)
punct(says-22, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#drugs

target :: Xoma , for example , is targeting T-4 cells to combat certain diseases associated with bone marrow transplants ./.
nsubj(targeting-7, Xoma-1)
punct(targeting-7, ,-2)
case(example-4, for-3)
nmod:for(targeting-7, example-4)
punct(targeting-7, ,-5)
aux(targeting-7, is-6)
root(ROOT-0, targeting-7)
compound(cells-9, T-4-8)
dobj(targeting-7, cells-9)
mark(combat-11, to-10)
advcl(targeting-7, combat-11)
amod(diseases-13, certain-12)
dobj(combat-11, diseases-13)
acl(diseases-13, associated-14)
case(transplants-18, with-15)
compound(transplants-18, bone-16)
compound(transplants-18, marrow-17)
nmod:with(associated-14, transplants-18)
punct(targeting-7, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#cells

target :: It more narrowly targets assistance to low-income families by subsidizing day care for families with less than 100 % of a state 's median income , down from 115 % ./.
nsubj(targets-4, It-1)
advmod(narrowly-3, more-2)
advmod(targets-4, narrowly-3)
root(ROOT-0, targets-4)
dobj(targets-4, assistance-5)
case(families-8, to-6)
amod(families-8, low-income-7)
nmod:to(assistance-5, families-8)
mark(subsidizing-10, by-9)
advcl(targets-4, subsidizing-10)
compound(care-12, day-11)
dobj(subsidizing-10, care-12)
case(families-14, for-13)
nmod:for(subsidizing-10, families-14)
case(%-19, with-15)
advmod(100-18, less-16)
mwe(less-16, than-17)
nummod(%-19, 100-18)
nmod:with(families-14, %-19)
case(income-25, of-20)
det(state-22, a-21)
nmod:poss(income-25, state-22)
case(state-22, 's-23)
amod(income-25, median-24)
nmod:of(%-19, income-25)
punct(subsidizing-10, ,-26)
advmod(subsidizing-10, down-27)
case(%-30, from-28)
nummod(%-30, 115-29)
nmod:from(down-27, %-30)
punct(targets-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#assistance

target :: Federal thrift-industry regulators have targeted it as one of hundreds of failing S & Ls in the Southwest that it intends to merge with other , better-capitalized institutions as part of a broad plan to restructure the industry ./.
amod(regulators-3, Federal-1)
compound(regulators-3, thrift-industry-2)
nsubj(targeted-5, regulators-3)
aux(targeted-5, have-4)
root(ROOT-0, targeted-5)
dobj(targeted-5, it-6)
case(one-8, as-7)
nmod:as(targeted-5, one-8)
case(hundreds-10, of-9)
nmod:of(one-8, hundreds-10)
case(S-13, of-11)
amod(S-13, failing-12)
nmod:of(hundreds-10, S-13)
cc(S-13, &-14)
nmod:of(hundreds-10, Ls-15)
conj:&(S-13, Ls-15)
case(Southwest-18, in-16)
det(Southwest-18, the-17)
nmod:in(hundreds-10, Southwest-18)
dobj(intends-21, Southwest-18)
nsubj:xsubj(merge-23, Southwest-18)
ref(Southwest-18, that-19)
nsubj(intends-21, it-20)
acl:relcl(Southwest-18, intends-21)
mark(merge-23, to-22)
xcomp(intends-21, merge-23)
case(institutions-28, with-24)
amod(institutions-28, other-25)
punct(institutions-28, ,-26)
amod(institutions-28, better-capitalized-27)
nmod:with(merge-23, institutions-28)
case(part-30, as-29)
nmod:as(merge-23, part-30)
case(plan-34, of-31)
det(plan-34, a-32)
amod(plan-34, broad-33)
nmod:of(part-30, plan-34)
mark(restructure-36, to-35)
acl(plan-34, restructure-36)
det(industry-38, the-37)
dobj(restructure-36, industry-38)
punct(targeted-5, .-39)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#it

target :: The EPA has targeted hundreds of sites across the country for cleanup of hazardous materials under its Superfund program ./.
det(EPA-2, The-1)
nsubj(targeted-4, EPA-2)
aux(targeted-4, has-3)
root(ROOT-0, targeted-4)
dobj(targeted-4, hundreds-5)
case(sites-7, of-6)
nmod:of(hundreds-5, sites-7)
case(country-10, across-8)
det(country-10, the-9)
nmod:across(targeted-4, country-10)
case(cleanup-12, for-11)
nmod:for(country-10, cleanup-12)
case(materials-15, of-13)
amod(materials-15, hazardous-14)
nmod:of(cleanup-12, materials-15)
case(program-19, under-16)
nmod:poss(program-19, its-17)
compound(program-19, Superfund-18)
nmod:under(targeted-4, program-19)
punct(targeted-4, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#sites

target :: This money would also be targeted to those who truly need it ./.
det(money-2, This-1)
nsubjpass(targeted-6, money-2)
aux(targeted-6, would-3)
advmod(targeted-6, also-4)
auxpass(targeted-6, be-5)
root(ROOT-0, targeted-6)
case(those-8, to-7)
nmod:to(targeted-6, those-8)
nsubj(need-11, those-8)
ref(those-8, who-9)
advmod(need-11, truly-10)
acl:relcl(those-8, need-11)
dobj(need-11, it-12)
punct(targeted-6, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#money

target :: If so , human cells may also make similar proteins -- potentially confusing immune cells that target foreign stress proteins and inducing them to attack a person 's own cells ./.
mark(so-2, If-1)
advmod(make-8, so-2)
punct(make-8, ,-3)
amod(cells-5, human-4)
nsubj(make-8, cells-5)
aux(make-8, may-6)
advmod(make-8, also-7)
root(ROOT-0, make-8)
amod(proteins-10, similar-9)
dobj(make-8, proteins-10)
punct(cells-15, ---11)
advmod(confusing-13, potentially-12)
amod(cells-15, confusing-13)
amod(cells-15, immune-14)
dep(proteins-10, cells-15)
nsubj(target-17, cells-15)
nsubj(inducing-22, cells-15)
ref(cells-15, that-16)
acl:relcl(cells-15, target-17)
amod(proteins-20, foreign-18)
compound(proteins-20, stress-19)
dobj(target-17, proteins-20)
cc(target-17, and-21)
acl:relcl(cells-15, inducing-22)
conj:and(target-17, inducing-22)
dobj(inducing-22, them-23)
nsubj:xsubj(attack-25, them-23)
mark(attack-25, to-24)
xcomp(inducing-22, attack-25)
det(person-27, a-26)
nmod:poss(cells-30, person-27)
case(person-27, 's-28)
amod(cells-30, own-29)
dobj(attack-25, cells-30)
punct(make-8, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#proteins

target :: One reason for success: Proponents targeted only companies held largely by institutions , says John Wilcox of proxy solicitor Georgeson & Co ./.
nummod(reason-2, One-1)
nsubj(says-15, reason-2)
case(success-4, for-3)
nmod:for(reason-2, success-4)
punct(reason-2, :-5)
dep(reason-2, Proponents-6)
acl(Proponents-6, targeted-7)
advmod(companies-9, only-8)
dobj(targeted-7, companies-9)
acl(companies-9, held-10)
advmod(held-10, largely-11)
case(institutions-13, by-12)
nmod:by(held-10, institutions-13)
punct(reason-2, ,-14)
root(ROOT-0, says-15)
compound(Wilcox-17, John-16)
nsubj(says-15, Wilcox-17)
case(Georgeson-21, of-18)
compound(Georgeson-21, proxy-19)
compound(Georgeson-21, solicitor-20)
nmod:of(Wilcox-17, Georgeson-21)
cc(Georgeson-21, &-22)
nmod:of(Wilcox-17, Co-23)
conj:&(Georgeson-21, Co-23)
punct(says-15, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#companies

target :: Advertised with pictures of frolicking yuppies and the slogan `` Jazz is born -- Macintosh boogies , '' Jazz disappointed business users and never captured the new market Lotus targeted ./.
dep(users-22, Advertised-1)
case(pictures-3, with-2)
nmod:with(Advertised-1, pictures-3)
case(yuppies-6, of-4)
amod(yuppies-6, frolicking-5)
nmod:of(pictures-3, yuppies-6)
cc(yuppies-6, and-7)
det(slogan-9, the-8)
nmod:of(pictures-3, slogan-9)
conj:and(yuppies-6, slogan-9)
punct(Jazz-11, ``-10)
nsubjpass(born-13, Jazz-11)
auxpass(born-13, is-12)
acl:relcl(slogan-9, born-13)
punct(slogan-9, ---14)
compound(boogies-16, Macintosh-15)
dep(slogan-9, boogies-16)
punct(users-22, ,-17)
punct(users-22, ''-18)
compound(users-22, Jazz-19)
amod(users-22, disappointed-20)
compound(users-22, business-21)
root(ROOT-0, users-22)
cc(users-22, and-23)
neg(captured-25, never-24)
conj:and(users-22, captured-25)
det(Lotus-29, the-26)
amod(Lotus-29, new-27)
compound(Lotus-29, market-28)
nsubj(targeted-30, Lotus-29)
ccomp(captured-25, targeted-30)
punct(users-22, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#lotus

target :: Mr. Lee has targeted three of the former Japanese banks ./.
compound(Lee-2, Mr.-1)
nsubj(targeted-4, Lee-2)
aux(targeted-4, has-3)
root(ROOT-0, targeted-4)
dobj(targeted-4, three-5)
case(banks-10, of-6)
det(banks-10, the-7)
amod(banks-10, former-8)
amod(banks-10, Japanese-9)
nmod:of(three-5, banks-10)
punct(targeted-4, .-11)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#banks

target :: But critics say too much competition is emerging in the business for the tiny population targeted ./.
cc(say-3, But-1)
nsubj(say-3, critics-2)
root(ROOT-0, say-3)
advmod(much-5, too-4)
amod(competition-6, much-5)
nsubj(emerging-8, competition-6)
aux(emerging-8, is-7)
ccomp(say-3, emerging-8)
case(business-11, in-9)
det(business-11, the-10)
nmod:in(emerging-8, business-11)
case(population-15, for-12)
det(population-15, the-13)
amod(population-15, tiny-14)
nmod:for(emerging-8, population-15)
acl(population-15, targeted-16)
punct(say-3, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

target :: However , there is no targeting to areas where soil erosion affects watersheds ./.
advmod(is-4, However-1)
punct(is-4, ,-2)
expl(is-4, there-3)
root(ROOT-0, is-4)
neg(targeting-6, no-5)
nsubj(is-4, targeting-6)
case(areas-8, to-7)
nmod:to(targeting-6, areas-8)
advmod(affects-12, where-9)
compound(erosion-11, soil-10)
nsubj(affects-12, erosion-11)
acl:relcl(areas-8, affects-12)
dobj(affects-12, watersheds-13)
punct(is-4, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#areas

target :: Most of the banks specifically have targeted marketing campaigns at profitable small companies . -LRB- Separately , Dai-Ichi Kangyo said it will name Ichiro Nakamura , now a vice president , as chairman , succeeding Tetsuya Fujimori ./.
nsubj(targeted-7, Most-1)
case(banks-4, of-2)
det(banks-4, the-3)
nmod:of(Most-1, banks-4)
advmod(targeted-7, specifically-5)
aux(targeted-7, have-6)
root(ROOT-0, targeted-7)
compound(campaigns-9, marketing-8)
dobj(targeted-7, campaigns-9)
case(companies-13, at-10)
amod(companies-13, profitable-11)
amod(companies-13, small-12)
nmod:at(campaigns-9, companies-13)
punct(targeted-7, .-14)
punct(said-6, -LRB--1)
advmod(said-6, Separately-2)
punct(said-6, ,-3)
compound(Kangyo-5, Dai-Ichi-4)
nsubj(said-6, Kangyo-5)
root(ROOT-0, said-6)
nsubj(name-9, it-7)
aux(name-9, will-8)
ccomp(said-6, name-9)
compound(Nakamura-11, Ichiro-10)
dobj(name-9, Nakamura-11)
punct(Nakamura-11, ,-12)
advmod(president-16, now-13)
det(president-16, a-14)
compound(president-16, vice-15)
appos(Nakamura-11, president-16)
punct(Nakamura-11, ,-17)
case(chairman-19, as-18)
nmod:as(name-9, chairman-19)
punct(said-6, ,-20)
xcomp(said-6, succeeding-21)
compound(Fujimori-23, Tetsuya-22)
dobj(succeeding-21, Fujimori-23)
punct(said-6, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#campaigns

target :: It is targeted at space testing of SDI technologies ./.
nsubjpass(targeted-3, It-1)
auxpass(targeted-3, is-2)
root(ROOT-0, targeted-3)
case(testing-6, at-4)
compound(testing-6, space-5)
nmod:at(targeted-3, testing-6)
case(technologies-9, of-7)
compound(technologies-9, SDI-8)
nmod:of(testing-6, technologies-9)
punct(targeted-3, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#it

target :: Vitro Corp . , a unit of Penn Central Corp . , won a $ 22.3 million Navy contract for shipboard missile targeting equipment ./.
compound(Corp-2, Vitro-1)
root(ROOT-0, Corp-2)
punct(Corp-2, .-3)
root(ROOT-0, ,-1)
det(unit-3, a-2)
root(,-1, unit-3)
case(Corp-7, of-4)
compound(Corp-7, Penn-5)
compound(Corp-7, Central-6)
nmod:of(unit-3, Corp-7)
punct(unit-3, .-8)
punct(won-2, ,-1)
root(ROOT-0, won-2)
det(contract-8, a-3)
amod(contract-8, $-4)
compound(million-6, 22.3-5)
nummod($-4, million-6)
compound(contract-8, Navy-7)
dobj(won-2, contract-8)
case(missile-11, for-9)
compound(missile-11, shipboard-10)
nmod:for(contract-8, missile-11)
acl(missile-11, targeting-12)
dobj(targeting-12, equipment-13)
punct(won-2, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#equipment

target :: There 's also New Media Network , which plans to target videocassette buyers instead of renters ./.
expl('s-2, There-1)
root(ROOT-0, 's-2)
advmod('s-2, also-3)
amod(Network-6, New-4)
compound(Network-6, Media-5)
nsubj('s-2, Network-6)
nsubj(plans-9, Network-6)
nsubj:xsubj(target-11, Network-6)
punct(Network-6, ,-7)
ref(Network-6, which-8)
acl:relcl(Network-6, plans-9)
mark(target-11, to-10)
xcomp(plans-9, target-11)
compound(buyers-13, videocassette-12)
dobj(target-11, buyers-13)
case(renters-16, instead-14)
mwe(instead-14, of-15)
nmod:instead_of(target-11, renters-16)
punct('s-2, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#buyers

target :: In April 1981 , the task force targeted some 30 regulatory changes -- reducing the cost of producing automobiles by more than a billion dollars a year without compromising legitimate regulatory protections ./.
case(April-2, In-1)
nmod:in(targeted-8, April-2)
nummod(April-2, 1981-3)
punct(targeted-8, ,-4)
det(force-7, the-5)
compound(force-7, task-6)
nsubj(targeted-8, force-7)
root(ROOT-0, targeted-8)
advmod(30-10, some-9)
nummod(changes-12, 30-10)
amod(changes-12, regulatory-11)
dobj(targeted-8, changes-12)
punct(targeted-8, ---13)
parataxis(targeted-8, reducing-14)
det(cost-16, the-15)
dobj(reducing-14, cost-16)
mark(producing-18, of-17)
acl(cost-16, producing-18)
dobj(producing-18, automobiles-19)
case(dollars-25, by-20)
advmod(billion-24, more-21)
mwe(more-21, than-22)
advmod(billion-24, a-23)
nummod(dollars-25, billion-24)
nmod:by(producing-18, dollars-25)
det(year-27, a-26)
nmod:npmod(dollars-25, year-27)
mark(compromising-29, without-28)
advcl(reducing-14, compromising-29)
amod(protections-32, legitimate-30)
amod(protections-32, regulatory-31)
dobj(compromising-29, protections-32)
punct(targeted-8, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#changes

target :: But although Motorola , with its new chips , seems to be targeting the fledgling RISC-chip market opened by Sun and others , its fiercest competitor remains microprocessor powerhouse Intel Corp . , analysts say ./.
cc(remains-27, But-1)
mark(seems-10, although-2)
nsubj(seems-10, Motorola-3)
nsubj:xsubj(targeting-13, Motorola-3)
punct(Motorola-3, ,-4)
case(chips-8, with-5)
nmod:poss(chips-8, its-6)
amod(chips-8, new-7)
nmod:with(Motorola-3, chips-8)
punct(Motorola-3, ,-9)
advcl(remains-27, seems-10)
mark(targeting-13, to-11)
aux(targeting-13, be-12)
xcomp(seems-10, targeting-13)
det(market-17, the-14)
compound(market-17, fledgling-15)
compound(market-17, RISC-chip-16)
dobj(targeting-13, market-17)
acl(market-17, opened-18)
case(Sun-20, by-19)
nmod:by(opened-18, Sun-20)
cc(Sun-20, and-21)
nmod:by(opened-18, others-22)
conj:and(Sun-20, others-22)
punct(remains-27, ,-23)
nmod:poss(competitor-26, its-24)
amod(competitor-26, fiercest-25)
nsubj(remains-27, competitor-26)
root(ROOT-0, remains-27)
compound(Corp-31, microprocessor-28)
compound(Corp-31, powerhouse-29)
compound(Corp-31, Intel-30)
xcomp(remains-27, Corp-31)
punct(remains-27, .-32)
punct(say-3, ,-1)
nsubj(say-3, analysts-2)
root(ROOT-0, say-3)
punct(say-3, .-4)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#market

target :: The Agriculture Department announced late Monday that it had targeted the Soviet Union for an additional one million metric tons of subsidized wheat , bringing to 8.8 million metric tons the amount of U.S. wheat offered to the Soviet Union since October ./.
det(Department-3, The-1)
compound(Department-3, Agriculture-2)
nsubj(announced-4, Department-3)
root(ROOT-0, announced-4)
amod(Monday-6, late-5)
nmod:tmod(announced-4, Monday-6)
mark(targeted-10, that-7)
nsubj(targeted-10, it-8)
aux(targeted-10, had-9)
ccomp(announced-4, targeted-10)
det(Union-13, the-11)
compound(Union-13, Soviet-12)
dobj(targeted-10, Union-13)
case(tons-20, for-14)
det(tons-20, an-15)
amod(tons-20, additional-16)
compound(million-18, one-17)
nummod(tons-20, million-18)
amod(tons-20, metric-19)
nmod:for(targeted-10, tons-20)
case(wheat-23, of-21)
amod(wheat-23, subsidized-22)
nmod:of(tons-20, wheat-23)
punct(targeted-10, ,-24)
xcomp(targeted-10, bringing-25)
case(tons-30, to-26)
compound(million-28, 8.8-27)
nummod(tons-30, million-28)
amod(tons-30, metric-29)
nmod:to(bringing-25, tons-30)
det(amount-32, the-31)
dobj(bringing-25, amount-32)
case(wheat-35, of-33)
compound(wheat-35, U.S.-34)
nmod:of(amount-32, wheat-35)
acl(amount-32, offered-36)
case(Union-40, to-37)
det(Union-40, the-38)
compound(Union-40, Soviet-39)
nmod:to(offered-36, Union-40)
case(October-42, since-41)
nmod:since(offered-36, October-42)
punct(announced-4, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#union

target :: Yet under a Start regime , the committee report said , `` The Soviet incentive to cheat could increase because of a greater difficulty in meeting targeting requirements '' in Europe and the U.S. Mr. Boren urged a big new investment to improve U.S. intelligence collection ./.
advmod(increase-19, Yet-1)
case(regime-5, under-2)
det(regime-5, a-3)
compound(regime-5, Start-4)
nmod:under(increase-19, regime-5)
punct(said-10, ,-6)
det(report-9, the-7)
compound(report-9, committee-8)
nsubj(said-10, report-9)
parataxis(increase-19, said-10)
punct(said-10, ,-11)
punct(increase-19, ``-12)
det(incentive-15, The-13)
amod(incentive-15, Soviet-14)
nsubj(increase-19, incentive-15)
mark(cheat-17, to-16)
acl(incentive-15, cheat-17)
aux(increase-19, could-18)
root(ROOT-0, increase-19)
case(difficulty-24, because-20)
mwe(because-20, of-21)
det(difficulty-24, a-22)
amod(difficulty-24, greater-23)
nmod:because_of(increase-19, difficulty-24)
mark(meeting-26, in-25)
acl(difficulty-24, meeting-26)
compound(requirements-28, targeting-27)
dobj(meeting-26, requirements-28)
punct(difficulty-24, ''-29)
case(Europe-31, in-30)
nmod:in(difficulty-24, Europe-31)
cc(Europe-31, and-32)
det(U.S.-34, the-33)
nmod:in(difficulty-24, U.S.-34)
conj:and(Europe-31, U.S.-34)
punct(increase-19, .-35)
compound(Boren-2, Mr.-1)
nsubj(urged-3, Boren-2)
root(ROOT-0, urged-3)
det(investment-7, a-4)
amod(investment-7, big-5)
amod(investment-7, new-6)
dobj(urged-3, investment-7)
nsubj:xsubj(improve-9, investment-7)
mark(improve-9, to-8)
xcomp(urged-3, improve-9)
compound(collection-12, U.S.-10)
compound(collection-12, intelligence-11)
dobj(improve-9, collection-12)
punct(urged-3, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

target :: `` Nothing less than targeted , mandated reductions in acid-rain emissions in the U.S . '' will satisfy Canada , Mr. Mulroney said in his prepared remarks ./.
root(ROOT-0, ``-1)
root(``-1, Nothing-2)
amod(Nothing-2, less-3)
mark(targeted-5, than-4)
advcl(less-3, targeted-5)
punct(Nothing-2, ,-6)
amod(reductions-8, mandated-7)
root(,-6, reductions-8)
case(emissions-11, in-9)
compound(emissions-11, acid-rain-10)
nmod:in(reductions-8, emissions-11)
case(U.S-14, in-12)
det(U.S-14, the-13)
nmod:in(reductions-8, U.S-14)
punct(reductions-8, .-15)
punct(reductions-8, ''-16)
aux(satisfy-2, will-1)
ccomp(said-7, satisfy-2)
dobj(satisfy-2, Canada-3)
punct(said-7, ,-4)
compound(Mulroney-6, Mr.-5)
nsubj(said-7, Mulroney-6)
root(ROOT-0, said-7)
case(remarks-11, in-8)
nmod:poss(remarks-11, his-9)
amod(remarks-11, prepared-10)
nmod:in(said-7, remarks-11)
punct(said-7, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

target :: He says he will work to improve the quality of education black children receive , and that he will target certain black school districts for special support ./.
nsubj(says-2, He-1)
root(ROOT-0, says-2)
nsubj(work-5, he-3)
nsubj:xsubj(improve-7, he-3)
aux(work-5, will-4)
ccomp(says-2, work-5)
mark(improve-7, to-6)
xcomp(work-5, improve-7)
det(quality-9, the-8)
dobj(improve-7, quality-9)
case(children-13, of-10)
compound(children-13, education-11)
amod(children-13, black-12)
nmod:of(quality-9, children-13)
dep(work-5, receive-14)
punct(work-5, ,-15)
cc(work-5, and-16)
mark(target-20, that-17)
nsubj(target-20, he-18)
aux(target-20, will-19)
ccomp(says-2, target-20)
conj:and(work-5, target-20)
amod(districts-24, certain-21)
amod(districts-24, black-22)
compound(districts-24, school-23)
dobj(target-20, districts-24)
case(support-27, for-25)
amod(support-27, special-26)
nmod:for(target-20, support-27)
punct(says-2, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#districts

target :: Mr. Story thinks Mr. Holmes a Court will soon target acquisitions ./.
compound(Story-2, Mr.-1)
nsubj(thinks-3, Story-2)
root(ROOT-0, thinks-3)
compound(Holmes-5, Mr.-4)
dobj(thinks-3, Holmes-5)
det(Court-7, a-6)
nsubj(target-10, Court-7)
aux(target-10, will-8)
advmod(target-10, soon-9)
acl:relcl(Holmes-5, target-10)
dobj(target-10, acquisitions-11)
punct(thinks-3, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#acquisitions

target :: These programs target the 34 million Americans who , according to the National Institutes of Health , need to lose 35 pounds or more ./.
det(programs-2, These-1)
nsubj(target-3, programs-2)
root(ROOT-0, target-3)
det(Americans-7, the-4)
compound(million-6, 34-5)
nummod(Americans-7, million-6)
dobj(target-3, Americans-7)
nsubj(need-18, Americans-7)
nsubj:xsubj(lose-20, Americans-7)
ref(Americans-7, who-8)
punct(need-18, ,-9)
case(Institutes-14, according-10)
mwe(according-10, to-11)
det(Institutes-14, the-12)
compound(Institutes-14, National-13)
nmod:according_to(need-18, Institutes-14)
case(Health-16, of-15)
nmod:of(Institutes-14, Health-16)
punct(need-18, ,-17)
acl:relcl(Americans-7, need-18)
mark(lose-20, to-19)
xcomp(need-18, lose-20)
nummod(pounds-22, 35-21)
dobj(lose-20, pounds-22)
cc(more-24, or-23)
nummod(pounds-22, more-24)
punct(target-3, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#americans

target :: Programs targeted for `` possible privatization '' include some Postal Service operations and the management of minimum-security prisons ./.
nsubj(include-8, Programs-1)
acl(Programs-1, targeted-2)
case(privatization-6, for-3)
punct(privatization-6, ``-4)
amod(privatization-6, possible-5)
nmod:for(targeted-2, privatization-6)
punct(privatization-6, ''-7)
root(ROOT-0, include-8)
det(operations-12, some-9)
amod(operations-12, Postal-10)
compound(operations-12, Service-11)
dobj(include-8, operations-12)
cc(operations-12, and-13)
det(management-15, the-14)
dobj(include-8, management-15)
conj:and(operations-12, management-15)
case(prisons-18, of-16)
amod(prisons-18, minimum-security-17)
nmod:of(management-15, prisons-18)
punct(include-8, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#privatization

target :: But to improve its profitability , it recently targeted mid-sized businesses as well ./.
cc(targeted-9, But-1)
mark(improve-3, to-2)
advcl(targeted-9, improve-3)
nmod:poss(profitability-5, its-4)
dobj(improve-3, profitability-5)
punct(targeted-9, ,-6)
nsubj(targeted-9, it-7)
advmod(targeted-9, recently-8)
root(ROOT-0, targeted-9)
amod(businesses-11, mid-sized-10)
dobj(targeted-9, businesses-11)
advmod(targeted-9, as-12)
mwe(as-12, well-13)
punct(targeted-9, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#businesses

target :: Thus , Japanese companies would have to fight it out with foreign rivals that are targeting the same niche , including Fokker B.V. of the Netherlands , British Aerospace PLC , MBB and Boeing ./.
advmod(have-6, Thus-1)
punct(have-6, ,-2)
amod(companies-4, Japanese-3)
nsubj(have-6, companies-4)
nsubj:xsubj(fight-8, companies-4)
aux(have-6, would-5)
root(ROOT-0, have-6)
mark(fight-8, to-7)
xcomp(have-6, fight-8)
dobj(fight-8, it-9)
compound:prt(fight-8, out-10)
case(rivals-13, with-11)
amod(rivals-13, foreign-12)
nmod:with(fight-8, rivals-13)
nsubj(targeting-16, rivals-13)
ref(rivals-13, that-14)
aux(targeting-16, are-15)
acl:relcl(rivals-13, targeting-16)
det(niche-19, the-17)
amod(niche-19, same-18)
dobj(targeting-16, niche-19)
punct(niche-19, ,-20)
case(B.V.-23, including-21)
compound(B.V.-23, Fokker-22)
nmod:including(niche-19, B.V.-23)
case(Netherlands-26, of-24)
det(Netherlands-26, the-25)
nmod:of(B.V.-23, Netherlands-26)
punct(B.V.-23, ,-27)
compound(PLC-30, British-28)
compound(PLC-30, Aerospace-29)
nmod:including(niche-19, PLC-30)
conj:and(B.V.-23, PLC-30)
punct(B.V.-23, ,-31)
nmod:including(niche-19, MBB-32)
conj:and(B.V.-23, MBB-32)
cc(B.V.-23, and-33)
nmod:including(niche-19, Boeing-34)
conj:and(B.V.-23, Boeing-34)
punct(have-6, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#niche

target :: The number of annual inspections remains unchanged , however , mainly because many more are targeted on the construction industry , where inspections require fewer manhours than they do in manufacturing ./.
det(number-2, The-1)
nsubj(remains-6, number-2)
case(inspections-5, of-3)
amod(inspections-5, annual-4)
nmod:of(number-2, inspections-5)
root(ROOT-0, remains-6)
xcomp(remains-6, unchanged-7)
punct(remains-6, ,-8)
advmod(remains-6, however-9)
punct(remains-6, ,-10)
advmod(targeted-16, mainly-11)
mark(targeted-16, because-12)
amod(more-14, many-13)
nsubjpass(targeted-16, more-14)
auxpass(targeted-16, are-15)
advcl(remains-6, targeted-16)
case(industry-20, on-17)
det(industry-20, the-18)
compound(industry-20, construction-19)
nmod:on(targeted-16, industry-20)
punct(industry-20, ,-21)
advmod(require-24, where-22)
nsubj(require-24, inspections-23)
acl:relcl(industry-20, require-24)
amod(manhours-26, fewer-25)
dobj(require-24, manhours-26)
mark(do-29, than-27)
nsubj(do-29, they-28)
advcl(manhours-26, do-29)
case(manufacturing-31, in-30)
nmod:in(do-29, manufacturing-31)
punct(remains-6, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#more

target :: Olds is n't the only advertiser targeting Southern California with such campaigns ./.
nsubj(advertiser-6, Olds-1)
cop(advertiser-6, is-2)
neg(advertiser-6, n't-3)
det(advertiser-6, the-4)
amod(advertiser-6, only-5)
root(ROOT-0, advertiser-6)
acl(advertiser-6, targeting-7)
compound(California-9, Southern-8)
dobj(targeting-7, California-9)
case(campaigns-12, with-10)
amod(campaigns-12, such-11)
nmod:with(targeting-7, campaigns-12)
punct(advertiser-6, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#california

target :: Plastics , an area that Dow has targeted for growth , contributed strongly to the results for the quarter and the year , Dow said ./.
nsubj(contributed-12, Plastics-1)
punct(Plastics-1, ,-2)
det(area-4, an-3)
appos(Plastics-1, area-4)
dobj(targeted-8, area-4)
ref(area-4, that-5)
nsubj(targeted-8, Dow-6)
aux(targeted-8, has-7)
acl:relcl(area-4, targeted-8)
case(growth-10, for-9)
nmod:for(targeted-8, growth-10)
punct(Plastics-1, ,-11)
ccomp(said-25, contributed-12)
advmod(contributed-12, strongly-13)
case(results-16, to-14)
det(results-16, the-15)
nmod:to(contributed-12, results-16)
case(quarter-19, for-17)
det(quarter-19, the-18)
nmod:for(results-16, quarter-19)
cc(quarter-19, and-20)
det(year-22, the-21)
nmod:for(results-16, year-22)
conj:and(quarter-19, year-22)
punct(said-25, ,-23)
nsubj(said-25, Dow-24)
root(ROOT-0, said-25)
punct(said-25, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#area

target :: And on March 3 , Seven Days , a weekly , will begin distributing 50 , 000 free copies to specially targeted Manhattan residents with a median income of $ 63 , 000 ./.
cc(begin-13, And-1)
case(March-3, on-2)
nmod:on(begin-13, March-3)
nummod(March-3, 3-4)
punct(March-3, ,-5)
nummod(March-3, Seven-6)
dep(March-3, Days-7)
punct(begin-13, ,-8)
det(weekly-10, a-9)
dep(begin-13, weekly-10)
punct(begin-13, ,-11)
aux(begin-13, will-12)
root(ROOT-0, begin-13)
xcomp(begin-13, distributing-14)
dobj(distributing-14, 50-15)
punct(50-15, ,-16)
nummod(copies-19, 000-17)
amod(copies-19, free-18)
appos(50-15, copies-19)
case(residents-24, to-20)
advmod(targeted-22, specially-21)
amod(residents-24, targeted-22)
compound(residents-24, Manhattan-23)
nmod:to(copies-19, residents-24)
case(income-28, with-25)
det(income-28, a-26)
amod(income-28, median-27)
nmod:with(copies-19, income-28)
case(63-31, of-29)
dep(63-31, $-30)
nmod:of(income-28, 63-31)
punct(63-31, ,-32)
appos(63-31, 000-33)
punct(begin-13, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#residents

target :: Last summer , Mr. Sheehy targeted Farmers , America 's seventh-largest property and casualty insurer , for a possible acquisition ./.
amod(summer-2, Last-1)
nmod:tmod(targeted-6, summer-2)
punct(targeted-6, ,-3)
compound(Sheehy-5, Mr.-4)
nsubj(targeted-6, Sheehy-5)
root(ROOT-0, targeted-6)
dobj(targeted-6, Farmers-7)
punct(Farmers-7, ,-8)
nmod:poss(property-12, America-9)
case(America-9, 's-10)
amod(property-12, seventh-largest-11)
appos(Farmers-7, property-12)
cc(property-12, and-13)
compound(insurer-15, casualty-14)
appos(Farmers-7, insurer-15)
conj:and(property-12, insurer-15)
punct(Farmers-7, ,-16)
case(acquisition-20, for-17)
det(acquisition-20, a-18)
amod(acquisition-20, possible-19)
nmod:for(targeted-6, acquisition-20)
punct(targeted-6, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#farmers

target :: After losing overseas business to Japanese rivals in recent years , U.S. construction and engineering concerns are starting to worry that their home turf now is being targeted by aggressive Japanese builders ./.
mark(losing-2, After-1)
advcl(starting-18, losing-2)
amod(business-4, overseas-3)
dobj(losing-2, business-4)
case(rivals-7, to-5)
amod(rivals-7, Japanese-6)
nmod:to(losing-2, rivals-7)
case(years-10, in-8)
amod(years-10, recent-9)
nmod:in(losing-2, years-10)
punct(starting-18, ,-11)
compound(construction-13, U.S.-12)
nsubj(starting-18, construction-13)
nsubj:xsubj(worry-20, construction-13)
cc(construction-13, and-14)
compound(concerns-16, engineering-15)
conj:and(construction-13, concerns-16)
nsubj(starting-18, concerns-16)
nsubj:xsubj(worry-20, concerns-16)
aux(starting-18, are-17)
root(ROOT-0, starting-18)
mark(worry-20, to-19)
xcomp(starting-18, worry-20)
mark(targeted-28, that-21)
nmod:poss(turf-24, their-22)
compound(turf-24, home-23)
nsubjpass(targeted-28, turf-24)
advmod(targeted-28, now-25)
aux(targeted-28, is-26)
auxpass(targeted-28, being-27)
ccomp(worry-20, targeted-28)
case(builders-32, by-29)
amod(builders-32, aggressive-30)
amod(builders-32, Japanese-31)
nmod:agent(targeted-28, builders-32)
punct(starting-18, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#turf

target :: It targets a very different crowd from the white-collar clientele of Federal 's `` front-door '' document-delivery business , and the company has had to fine-tune its marketing ./.
nsubj(targets-2, It-1)
root(ROOT-0, targets-2)
det(crowd-6, a-3)
advmod(different-5, very-4)
amod(crowd-6, different-5)
dobj(targets-2, crowd-6)
case(clientele-10, from-7)
det(clientele-10, the-8)
amod(clientele-10, white-collar-9)
nmod:from(targets-2, clientele-10)
case(business-18, of-11)
nmod:poss(business-18, Federal-12)
case(Federal-12, 's-13)
punct(business-18, ``-14)
amod(business-18, front-door-15)
punct(business-18, ''-16)
compound(business-18, document-delivery-17)
nmod:of(clientele-10, business-18)
punct(targets-2, ,-19)
cc(targets-2, and-20)
det(company-22, the-21)
nsubj(had-24, company-22)
nsubj:xsubj(fine-tune-26, company-22)
aux(had-24, has-23)
conj:and(targets-2, had-24)
mark(fine-tune-26, to-25)
xcomp(had-24, fine-tune-26)
nmod:poss(marketing-28, its-27)
dobj(fine-tune-26, marketing-28)
punct(targets-2, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#crowd

target :: They use list cleaning and other computer-based targeting techniques to find interested prospects and to eliminate non-interested prospects ./.
nsubj(use-2, They-1)
root(ROOT-0, use-2)
compound(cleaning-4, list-3)
dobj(use-2, cleaning-4)
cc(cleaning-4, and-5)
amod(techniques-9, other-6)
amod(techniques-9, computer-based-7)
compound(techniques-9, targeting-8)
dobj(use-2, techniques-9)
conj:and(cleaning-4, techniques-9)
mark(find-11, to-10)
advcl(use-2, find-11)
amod(prospects-13, interested-12)
dobj(find-11, prospects-13)
cc(find-11, and-14)
mark(eliminate-16, to-15)
advcl(use-2, eliminate-16)
conj:and(find-11, eliminate-16)
amod(prospects-18, non-interested-17)
dobj(eliminate-16, prospects-18)
punct(use-2, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

target :: If the `` done deal '' is undone by one of the regulatory bodies , he expects back-up bidders to move in and has targeted a worstcase price of $ 22 a share ./.
mark(undone-8, If-1)
det(deal-5, the-2)
punct(deal-5, ``-3)
amod(deal-5, done-4)
nsubjpass(undone-8, deal-5)
punct(deal-5, ''-6)
auxpass(undone-8, is-7)
advcl(expects-17, undone-8)
case(one-10, by-9)
nmod:agent(undone-8, one-10)
case(bodies-14, of-11)
det(bodies-14, the-12)
amod(bodies-14, regulatory-13)
nmod:of(one-10, bodies-14)
punct(expects-17, ,-15)
nsubj(expects-17, he-16)
nsubj(targeted-25, he-16)
root(ROOT-0, expects-17)
amod(bidders-19, back-up-18)
dobj(expects-17, bidders-19)
nsubj:xsubj(move-21, bidders-19)
mark(move-21, to-20)
xcomp(expects-17, move-21)
nmod(move-21, in-22)
cc(expects-17, and-23)
aux(targeted-25, has-24)
conj:and(expects-17, targeted-25)
det(price-28, a-26)
compound(price-28, worstcase-27)
dobj(targeted-25, price-28)
case(22-31, of-29)
dep(22-31, $-30)
nmod:of(price-28, 22-31)
det(share-33, a-32)
nmod:npmod(22-31, share-33)
punct(expects-17, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#22

target :: `` Nothing less than targeted , mandated reductions in acid-rain emissions in the U.S . '' will satisfy Canada , Mr. Mulroney said in his prepared remarks ./.
root(ROOT-0, ``-1)
root(``-1, Nothing-2)
amod(Nothing-2, less-3)
mark(targeted-5, than-4)
advcl(less-3, targeted-5)
punct(Nothing-2, ,-6)
amod(reductions-8, mandated-7)
root(,-6, reductions-8)
case(emissions-11, in-9)
compound(emissions-11, acid-rain-10)
nmod:in(reductions-8, emissions-11)
case(U.S-14, in-12)
det(U.S-14, the-13)
nmod:in(reductions-8, U.S-14)
punct(reductions-8, .-15)
punct(reductions-8, ''-16)
aux(satisfy-2, will-1)
ccomp(said-7, satisfy-2)
dobj(satisfy-2, Canada-3)
punct(said-7, ,-4)
compound(Mulroney-6, Mr.-5)
nsubj(said-7, Mulroney-6)
root(ROOT-0, said-7)
case(remarks-11, in-8)
nmod:poss(remarks-11, his-9)
amod(remarks-11, prepared-10)
nmod:in(said-7, remarks-11)
punct(said-7, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

target :: We have large deficits because government has been unable to restrain increases in payments to individuals , a large amount of which is not targeted to help the poor ./.
nsubj(have-2, We-1)
root(ROOT-0, have-2)
amod(deficits-4, large-3)
dobj(have-2, deficits-4)
mark(unable-9, because-5)
nsubj(unable-9, government-6)
nsubj:xsubj(restrain-11, government-6)
aux(unable-9, has-7)
cop(unable-9, been-8)
advcl(have-2, unable-9)
mark(restrain-11, to-10)
xcomp(unable-9, restrain-11)
dobj(restrain-11, increases-12)
case(payments-14, in-13)
nmod:in(increases-12, payments-14)
case(individuals-16, to-15)
nmod:to(payments-14, individuals-16)
nmod:of(amount-20, individuals-16)
punct(individuals-16, ,-17)
det(amount-20, a-18)
amod(amount-20, large-19)
nsubjpass(targeted-25, amount-20)
nsubj:xsubj(help-27, amount-20)
case(which-22, of-21)
ref(individuals-16, which-22)
auxpass(targeted-25, is-23)
neg(targeted-25, not-24)
acl:relcl(individuals-16, targeted-25)
mark(help-27, to-26)
xcomp(targeted-25, help-27)
det(poor-29, the-28)
dobj(help-27, poor-29)
punct(have-2, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#amount

target :: The peace lobby , which targeted the B-1 , virtually compelled President Carter to cancel the plane , made the MX inevitable and got the B-1 anyway ./.
det(lobby-3, The-1)
compound(lobby-3, peace-2)
nsubj(targeted-6, lobby-3)
nsubj(compelled-11, lobby-3)
nsubj(made-19, lobby-3)
nsubj(got-24, lobby-3)
punct(lobby-3, ,-4)
ref(lobby-3, which-5)
acl:relcl(lobby-3, targeted-6)
det(B-1-8, the-7)
dobj(targeted-6, B-1-8)
punct(lobby-3, ,-9)
advmod(compelled-11, virtually-10)
root(ROOT-0, compelled-11)
compound(Carter-13, President-12)
dobj(compelled-11, Carter-13)
nsubj:xsubj(cancel-15, Carter-13)
mark(cancel-15, to-14)
xcomp(compelled-11, cancel-15)
det(plane-17, the-16)
dobj(cancel-15, plane-17)
punct(compelled-11, ,-18)
conj:and(compelled-11, made-19)
det(MX-21, the-20)
nsubj(inevitable-22, MX-21)
xcomp(made-19, inevitable-22)
cc(compelled-11, and-23)
conj:and(compelled-11, got-24)
det(B-1-26, the-25)
dobj(got-24, B-1-26)
advmod(got-24, anyway-27)
punct(compelled-11, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#b-1

target :: Union Pacific , for instance , gained 1 3 4 to 64 on speculation that it might be targeted by acquirers who want to obtain the company 's petroleum holdings ./.
compound(Pacific-2, Union-1)
nsubj(gained-7, Pacific-2)
punct(gained-7, ,-3)
case(instance-5, for-4)
nmod:for(gained-7, instance-5)
punct(gained-7, ,-6)
root(ROOT-0, gained-7)
compound(3-9, 1-8)
nummod(4-10, 3-9)
dobj(gained-7, 4-10)
case(64-12, to-11)
nmod:to(gained-7, 64-12)
case(speculation-14, on-13)
nmod:on(gained-7, speculation-14)
mark(targeted-19, that-15)
nsubjpass(targeted-19, it-16)
aux(targeted-19, might-17)
auxpass(targeted-19, be-18)
ccomp(speculation-14, targeted-19)
case(acquirers-21, by-20)
nmod:agent(targeted-19, acquirers-21)
nsubj(want-23, acquirers-21)
nsubj:xsubj(obtain-25, acquirers-21)
ref(acquirers-21, who-22)
acl:relcl(acquirers-21, want-23)
mark(obtain-25, to-24)
xcomp(want-23, obtain-25)
det(company-27, the-26)
nmod:poss(holdings-30, company-27)
case(company-27, 's-28)
compound(holdings-30, petroleum-29)
dobj(obtain-25, holdings-30)
punct(gained-7, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#it

target :: Still , the administration proposal is perceived as part of a broader rethinking about venture capital targeted explicitly at minority businesses ./.
advmod(perceived-7, Still-1)
punct(perceived-7, ,-2)
det(proposal-5, the-3)
compound(proposal-5, administration-4)
nsubjpass(perceived-7, proposal-5)
auxpass(perceived-7, is-6)
root(ROOT-0, perceived-7)
case(part-9, as-8)
nmod:as(perceived-7, part-9)
case(rethinking-13, of-10)
det(rethinking-13, a-11)
amod(rethinking-13, broader-12)
nmod:of(part-9, rethinking-13)
case(capital-16, about-14)
compound(capital-16, venture-15)
nmod:about(rethinking-13, capital-16)
acl(rethinking-13, targeted-17)
advmod(targeted-17, explicitly-18)
case(businesses-21, at-19)
compound(businesses-21, minority-20)
nmod:at(targeted-17, businesses-21)
punct(perceived-7, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#businesses

target :: It also was the buyer of Safeway Stores Inc . , another grocery chain unsuccessfully targeted by the Hafts ./.
nsubj(buyer-5, It-1)
advmod(buyer-5, also-2)
cop(buyer-5, was-3)
det(buyer-5, the-4)
root(ROOT-0, buyer-5)
case(Inc-9, of-6)
compound(Inc-9, Safeway-7)
compound(Inc-9, Stores-8)
nmod:of(buyer-5, Inc-9)
punct(buyer-5, .-10)
root(ROOT-0, ,-1)
det(chain-4, another-2)
compound(chain-4, grocery-3)
root(,-1, chain-4)
advmod(targeted-6, unsuccessfully-5)
acl(chain-4, targeted-6)
case(Hafts-9, by-7)
det(Hafts-9, the-8)
nmod:by(targeted-6, Hafts-9)
punct(chain-4, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#hafts

target :: Dole strategists are targeting areas of Missouri , Oklahoma , Maryland and North Carolina ./.
compound(strategists-2, Dole-1)
nsubj(targeting-4, strategists-2)
aux(targeting-4, are-3)
root(ROOT-0, targeting-4)
dobj(targeting-4, areas-5)
case(Missouri-7, of-6)
nmod:of(areas-5, Missouri-7)
punct(Missouri-7, ,-8)
nmod:of(areas-5, Oklahoma-9)
conj:and(Missouri-7, Oklahoma-9)
punct(Missouri-7, ,-10)
nmod:of(areas-5, Maryland-11)
conj:and(Missouri-7, Maryland-11)
cc(Missouri-7, and-12)
compound(Carolina-14, North-13)
nmod:of(areas-5, Carolina-14)
conj:and(Missouri-7, Carolina-14)
punct(targeting-4, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#missouri

target :: `` The Japanese have shown a talent for targeting a sector of technology , while U.S. industry plays a game of takeover and restructure , '' Mr. Quigg said ./.
punct(said-29, ``-1)
det(Japanese-3, The-2)
nsubj(shown-5, Japanese-3)
aux(shown-5, have-4)
ccomp(said-29, shown-5)
det(talent-7, a-6)
dobj(shown-5, talent-7)
mark(targeting-9, for-8)
acl(talent-7, targeting-9)
det(sector-11, a-10)
dobj(targeting-9, sector-11)
case(technology-13, of-12)
nmod:of(sector-11, technology-13)
punct(shown-5, ,-14)
mark(plays-18, while-15)
compound(industry-17, U.S.-16)
nsubj(plays-18, industry-17)
advcl(shown-5, plays-18)
det(game-20, a-19)
dobj(plays-18, game-20)
case(takeover-22, of-21)
nmod:of(game-20, takeover-22)
cc(takeover-22, and-23)
nmod:of(game-20, restructure-24)
conj:and(takeover-22, restructure-24)
punct(said-29, ,-25)
punct(said-29, ''-26)
compound(Quigg-28, Mr.-27)
nsubj(said-29, Quigg-28)
root(ROOT-0, said-29)
punct(said-29, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#technology

target :: But to improve its profitability , it recently targeted mid-sized businesses as well ./.
cc(targeted-9, But-1)
mark(improve-3, to-2)
advcl(targeted-9, improve-3)
nmod:poss(profitability-5, its-4)
dobj(improve-3, profitability-5)
punct(targeted-9, ,-6)
nsubj(targeted-9, it-7)
advmod(targeted-9, recently-8)
root(ROOT-0, targeted-9)
amod(businesses-11, mid-sized-10)
dobj(targeted-9, businesses-11)
advmod(targeted-9, as-12)
mwe(as-12, well-13)
punct(targeted-9, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#businesses

target :: Unions representing reporters and press operators also are likely to be targeted , union sources said ./.
nsubj(likely-9, Unions-1)
nsubjpass:xsubj(targeted-12, Unions-1)
acl(Unions-1, representing-2)
dobj(representing-2, reporters-3)
cc(reporters-3, and-4)
compound(operators-6, press-5)
dobj(representing-2, operators-6)
conj:and(reporters-3, operators-6)
advmod(likely-9, also-7)
cop(likely-9, are-8)
ccomp(said-16, likely-9)
mark(targeted-12, to-10)
auxpass(targeted-12, be-11)
xcomp(likely-9, targeted-12)
punct(said-16, ,-13)
compound(sources-15, union-14)
nsubj(said-16, sources-15)
root(ROOT-0, said-16)
punct(said-16, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#be

target :: In moving against the 28-year-old Mr. Schmuckler , the CFTC staff targeted one of Wall Street 's computerized-trading wizards ./.
mark(moving-2, In-1)
advcl(targeted-12, moving-2)
case(Schmuckler-7, against-3)
det(Schmuckler-7, the-4)
amod(Schmuckler-7, 28-year-old-5)
compound(Schmuckler-7, Mr.-6)
nmod:against(moving-2, Schmuckler-7)
punct(targeted-12, ,-8)
det(staff-11, the-9)
compound(staff-11, CFTC-10)
nsubj(targeted-12, staff-11)
root(ROOT-0, targeted-12)
dobj(targeted-12, one-13)
case(wizards-19, of-14)
compound(Street-16, Wall-15)
nmod:poss(wizards-19, Street-16)
case(Street-16, 's-17)
amod(wizards-19, computerized-trading-18)
nmod:of(one-13, wizards-19)
punct(targeted-12, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#wizards

target :: Sematech , as the venture is called , is the U.S. chip industry 's answer to Japan 's government-aided efforts to target the semiconductor industry for global domination ./.
nsubj(answer-15, Sematech-1)
punct(answer-15, ,-2)
mark(called-7, as-3)
det(venture-5, the-4)
nsubjpass(called-7, venture-5)
auxpass(called-7, is-6)
dep(answer-15, called-7)
punct(answer-15, ,-8)
cop(answer-15, is-9)
det(industry-13, the-10)
compound(industry-13, U.S.-11)
compound(industry-13, chip-12)
nmod:poss(answer-15, industry-13)
case(industry-13, 's-14)
root(ROOT-0, answer-15)
case(efforts-20, to-16)
nmod:poss(efforts-20, Japan-17)
case(Japan-17, 's-18)
amod(efforts-20, government-aided-19)
nmod:to(answer-15, efforts-20)
mark(target-22, to-21)
acl(efforts-20, target-22)
det(industry-25, the-23)
compound(industry-25, semiconductor-24)
dobj(target-22, industry-25)
case(domination-28, for-26)
amod(domination-28, global-27)
nmod:for(target-22, domination-28)
punct(answer-15, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#industry

target :: Before midnight , it had targeted the National Aeronautics and Space Administration Ames Research Center in California 's Silicon Valley , as well as the University of Pittsburgh and the Los Alamos National Laboratory in New Mexico ./.
case(midnight-2, Before-1)
nmod:before(targeted-6, midnight-2)
punct(targeted-6, ,-3)
nsubj(targeted-6, it-4)
aux(targeted-6, had-5)
root(ROOT-0, targeted-6)
det(Aeronautics-9, the-7)
compound(Aeronautics-9, National-8)
dobj(targeted-6, Aeronautics-9)
cc(Aeronautics-9, and-10)
compound(Center-15, Space-11)
compound(Center-15, Administration-12)
compound(Center-15, Ames-13)
compound(Center-15, Research-14)
dobj(targeted-6, Center-15)
conj:and(Aeronautics-9, Center-15)
case(Valley-20, in-16)
nmod:poss(Valley-20, California-17)
case(California-17, 's-18)
compound(Valley-20, Silicon-19)
nmod:in(Aeronautics-9, Valley-20)
punct(Aeronautics-9, ,-21)
cc(Aeronautics-9, as-22)
mwe(as-22, well-23)
mwe(as-22, as-24)
det(University-26, the-25)
dobj(targeted-6, University-26)
conj:and(Aeronautics-9, University-26)
case(Pittsburgh-28, of-27)
nmod:of(University-26, Pittsburgh-28)
cc(University-26, and-29)
det(Laboratory-34, the-30)
compound(Laboratory-34, Los-31)
compound(Laboratory-34, Alamos-32)
compound(Laboratory-34, National-33)
conj:and(Aeronautics-9, Laboratory-34)
conj:and(University-26, Laboratory-34)
case(Mexico-37, in-35)
compound(Mexico-37, New-36)
nmod:in(Laboratory-34, Mexico-37)
punct(targeted-6, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#aeronautics

target :: While the chief contracting officer in the cruise-missile office , Mr. Parkin in 1982 helped Mr. Galvin get a $ 225 , 964 contract to study the targeting equipment for the Tomahawk missile , according to the Navy and Mr. Parkin ./.
mark(helped-15, While-1)
det(officer-5, the-2)
compound(officer-5, chief-3)
amod(officer-5, contracting-4)
nsubj(helped-15, officer-5)
case(office-9, in-6)
det(office-9, the-7)
amod(office-9, cruise-missile-8)
nmod:in(officer-5, office-9)
punct(officer-5, ,-10)
compound(Parkin-12, Mr.-11)
appos(officer-5, Parkin-12)
case(1982-14, in-13)
nmod:in(Parkin-12, 1982-14)
root(ROOT-0, helped-15)
compound(Galvin-17, Mr.-16)
nsubj(get-18, Galvin-17)
ccomp(helped-15, get-18)
det(225-21, a-19)
dep(225-21, $-20)
dobj(get-18, 225-21)
punct(225-21, ,-22)
nummod(contract-24, 964-23)
appos(225-21, contract-24)
mark(study-26, to-25)
acl(contract-24, study-26)
det(equipment-29, the-27)
amod(equipment-29, targeting-28)
dobj(study-26, equipment-29)
case(missile-33, for-30)
det(missile-33, the-31)
compound(missile-33, Tomahawk-32)
nmod:for(equipment-29, missile-33)
punct(helped-15, ,-34)
case(Navy-38, according-35)
mwe(according-35, to-36)
det(Navy-38, the-37)
nmod:according_to(helped-15, Navy-38)
cc(Navy-38, and-39)
compound(Parkin-41, Mr.-40)
nmod:according_to(helped-15, Parkin-41)
conj:and(Navy-38, Parkin-41)
punct(helped-15, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#equipment

target :: A former Navy intelligence aide said the U.S. targeted the French Embassy when it bombed Libya in 1986 ./.
det(aide-5, A-1)
amod(aide-5, former-2)
compound(aide-5, Navy-3)
compound(aide-5, intelligence-4)
nsubj(said-6, aide-5)
root(ROOT-0, said-6)
det(U.S.-8, the-7)
nsubj(targeted-9, U.S.-8)
ccomp(said-6, targeted-9)
det(Embassy-12, the-10)
amod(Embassy-12, French-11)
dobj(targeted-9, Embassy-12)
advmod(bombed-15, when-13)
nsubj(bombed-15, it-14)
advcl(targeted-9, bombed-15)
dobj(bombed-15, Libya-16)
case(1986-18, in-17)
nmod:in(bombed-15, 1986-18)
punct(said-6, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#embassy

target :: Col. North again proposed luring Col. Gadhafi to a spot where bombers could target him ./.
compound(North-2, Col.-1)
nsubj(proposed-4, North-2)
advmod(proposed-4, again-3)
root(ROOT-0, proposed-4)
xcomp(proposed-4, luring-5)
compound(Gadhafi-7, Col.-6)
dobj(luring-5, Gadhafi-7)
case(spot-10, to-8)
det(spot-10, a-9)
nmod:to(luring-5, spot-10)
advmod(target-14, where-11)
nsubj(target-14, bombers-12)
aux(target-14, could-13)
acl:relcl(spot-10, target-14)
dobj(target-14, him-15)
punct(proposed-4, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#him

target :: Moreover , it could eliminate U.S. dependency on overseas bases , since the lasers would be based on U.S. terra firma and the targeting systems would be space-based ./.
advmod(eliminate-5, Moreover-1)
punct(eliminate-5, ,-2)
nsubj(eliminate-5, it-3)
aux(eliminate-5, could-4)
csubj(space-based-28, eliminate-5)
compound(dependency-7, U.S.-6)
dobj(eliminate-5, dependency-7)
case(bases-10, on-8)
amod(bases-10, overseas-9)
nmod:on(eliminate-5, bases-10)
punct(eliminate-5, ,-11)
mark(based-17, since-12)
det(lasers-14, the-13)
nsubjpass(based-17, lasers-14)
aux(based-17, would-15)
auxpass(based-17, be-16)
advcl(eliminate-5, based-17)
case(firma-21, on-18)
compound(firma-21, U.S.-19)
compound(firma-21, terra-20)
nmod:on(based-17, firma-21)
cc(firma-21, and-22)
det(systems-25, the-23)
amod(systems-25, targeting-24)
nmod:on(based-17, systems-25)
conj:and(firma-21, systems-25)
aux(space-based-28, would-26)
cop(space-based-28, be-27)
root(ROOT-0, space-based-28)
punct(space-based-28, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: target#systems

touch :: Mr. Rowland `` touched on the matter '' of a possible stake purchase again last week , according to Sir Michael ./.
compound(Rowland-2, Mr.-1)
nsubj(touched-4, Rowland-2)
punct(touched-4, ``-3)
root(ROOT-0, touched-4)
case(matter-7, on-5)
det(matter-7, the-6)
nmod:on(touched-4, matter-7)
punct(matter-7, ''-8)
case(purchase-13, of-9)
det(purchase-13, a-10)
amod(purchase-13, possible-11)
compound(purchase-13, stake-12)
nmod:of(matter-7, purchase-13)
advmod(purchase-13, again-14)
amod(week-16, last-15)
nmod:tmod(purchase-13, week-16)
punct(touched-4, ,-17)
case(Michael-21, according-18)
mwe(according-18, to-19)
compound(Michael-21, Sir-20)
nmod:according_to(touched-4, Michael-21)
punct(touched-4, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#rowland

touch :: The Mulroney administration was touched by scandal early on ./.
det(administration-3, The-1)
compound(administration-3, Mulroney-2)
nsubjpass(touched-5, administration-3)
auxpass(touched-5, was-4)
root(ROOT-0, touched-5)
case(scandal-7, by-6)
nmod:agent(touched-5, scandal-7)
advmod(on-9, early-8)
nmod(touched-5, on-9)
punct(touched-5, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#administration

touch :: `` You lose elections if you touch these things . ''/''
root(ROOT-0, ``-1)
nsubj(lose-3, You-2)
root(``-1, lose-3)
dobj(lose-3, elections-4)
mark(touch-7, if-5)
nsubj(touch-7, you-6)
advcl(lose-3, touch-7)
det(things-9, these-8)
dobj(touch-7, things-9)
punct(lose-3, .-10)
punct(lose-3, ''-11)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: touch#things

touch :: Investors ' fears have touched the bonds of companies not immediately identified as takeover targets ./.
nmod:poss(fears-3, Investors-1)
case(Investors-1, '-2)
nsubj(touched-5, fears-3)
aux(touched-5, have-4)
root(ROOT-0, touched-5)
det(bonds-7, the-6)
dobj(touched-5, bonds-7)
case(companies-9, of-8)
nmod:of(bonds-7, companies-9)
neg(identified-12, not-10)
advmod(identified-12, immediately-11)
acl(bonds-7, identified-12)
case(targets-15, as-13)
compound(targets-15, takeover-14)
nmod:as(identified-12, targets-15)
punct(touched-5, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#bonds

touch :: Why `` wait six weeks and get something you have n't picked up and touched , when you can get something equivalent or better today ? '' she asks ./.
advmod(wait-3, Why-1)
punct(wait-3, ``-2)
root(ROOT-0, wait-3)
nummod(weeks-5, six-4)
nmod:tmod(wait-3, weeks-5)
cc(wait-3, and-6)
conj:and(wait-3, get-7)
dobj(get-7, something-8)
nsubj(picked-12, you-9)
nsubj(touched-15, you-9)
aux(picked-12, have-10)
neg(picked-12, n't-11)
acl:relcl(something-8, picked-12)
compound:prt(picked-12, up-13)
cc(picked-12, and-14)
acl:relcl(something-8, touched-15)
conj:and(picked-12, touched-15)
punct(wait-3, ,-16)
advmod(get-20, when-17)
nsubj(get-20, you-18)
aux(get-20, can-19)
advcl(wait-3, get-20)
dobj(get-20, something-21)
amod(something-21, equivalent-22)
cc(something-21, or-23)
dobj(get-20, better-24)
conj:or(something-21, better-24)
dep(better-24, today-25)
punct(wait-3, ?-26)
punct(wait-3, ''-27)
nsubj(asks-2, she-1)
root(ROOT-0, asks-2)
punct(asks-2, .-3)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#you

touch :: And if you ever find one of these busy bees working for you , do n't hesitate to add to his load that frightful project that no one else will touch ./.
cc(hesitate-17, And-1)
mark(find-5, if-2)
nsubj(find-5, you-3)
advmod(find-5, ever-4)
advcl(hesitate-17, find-5)
dobj(find-5, one-6)
case(bees-10, of-7)
det(bees-10, these-8)
amod(bees-10, busy-9)
nmod:of(one-6, bees-10)
acl(bees-10, working-11)
case(you-13, for-12)
nmod:for(working-11, you-13)
punct(hesitate-17, ,-14)
aux(hesitate-17, do-15)
neg(hesitate-17, n't-16)
root(ROOT-0, hesitate-17)
mark(add-19, to-18)
xcomp(hesitate-17, add-19)
case(load-22, to-20)
nmod:poss(load-22, his-21)
nmod:to(add-19, load-22)
dobj(add-19, that-23)
amod(project-25, frightful-24)
dep(that-23, project-25)
mark(touch-31, that-26)
neg(one-28, no-27)
nsubj(touch-31, one-28)
advmod(one-28, else-29)
aux(touch-31, will-30)
ccomp(project-25, touch-31)
punct(hesitate-17, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#one

touch :: Increasingly he will be the leper nobody wants to touch . ''/''
advmod(nobody-7, Increasingly-1)
nsubj(nobody-7, he-2)
aux(nobody-7, will-3)
cop(nobody-7, be-4)
det(nobody-7, the-5)
compound(nobody-7, leper-6)
root(ROOT-0, nobody-7)
acl(nobody-7, wants-8)
mark(touch-10, to-9)
xcomp(wants-8, touch-10)
punct(nobody-7, .-11)
punct(nobody-7, ''-12)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

touch :: Mr. Lawson touched only briefly on what he called `` the current-account scare , '' saying the government would `` overcome that just as we have overcome every other problem we have faced '' since taking office ./.
compound(Lawson-2, Mr.-1)
nsubj(touched-3, Lawson-2)
root(ROOT-0, touched-3)
advmod(briefly-5, only-4)
advmod(touched-3, briefly-5)
mark(called-9, on-6)
dobj(called-9, what-7)
nsubj(called-9, he-8)
advcl(touched-3, called-9)
punct(scare-13, ``-10)
det(scare-13, the-11)
amod(scare-13, current-account-12)
xcomp(called-9, scare-13)
punct(touched-3, ,-14)
punct(touched-3, ''-15)
xcomp(touched-3, saying-16)
det(government-18, the-17)
nsubj(overcome-21, government-18)
aux(overcome-21, would-19)
punct(overcome-21, ``-20)
ccomp(saying-16, overcome-21)
dobj(overcome-21, that-22)
advmod(overcome-27, just-23)
mark(overcome-27, as-24)
nsubj(overcome-27, we-25)
aux(overcome-27, have-26)
advcl(overcome-21, overcome-27)
det(problem-30, every-28)
amod(problem-30, other-29)
dobj(overcome-27, problem-30)
nsubj(faced-33, we-31)
aux(faced-33, have-32)
acl:relcl(problem-30, faced-33)
punct(faced-33, ''-34)
mark(taking-36, since-35)
advcl(faced-33, taking-36)
dobj(taking-36, office-37)
punct(touched-3, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#lawson

touch :: When realistic paintings such as these were first viewed , by an educated class surfeited with romanticism and an upcoming middle class newly exposed to museums , they caused such commotion that for the first time in history police were necessary to keep people from touching the pictures ./.
advmod(viewed-9, When-1)
amod(paintings-3, realistic-2)
nsubjpass(viewed-9, paintings-3)
case(these-6, such-4)
mwe(such-4, as-5)
nmod:such_as(paintings-3, these-6)
auxpass(viewed-9, were-7)
advmod(viewed-9, first-8)
advcl(caused-29, viewed-9)
punct(caused-29, ,-10)
case(class-14, by-11)
det(class-14, an-12)
amod(class-14, educated-13)
nmod:by(caused-29, class-14)
acl(class-14, surfeited-15)
case(romanticism-17, with-16)
nmod:with(surfeited-15, romanticism-17)
cc(romanticism-17, and-18)
det(class-22, an-19)
amod(class-22, upcoming-20)
amod(class-22, middle-21)
nmod:with(surfeited-15, class-22)
conj:and(romanticism-17, class-22)
advmod(exposed-24, newly-23)
acl(class-22, exposed-24)
case(museums-26, to-25)
nmod:to(exposed-24, museums-26)
punct(caused-29, ,-27)
nsubj(caused-29, they-28)
root(ROOT-0, caused-29)
amod(commotion-31, such-30)
dobj(caused-29, commotion-31)
nsubj(necessary-41, commotion-31)
nsubj:xsubj(keep-43, commotion-31)
ref(commotion-31, that-32)
case(time-36, for-33)
det(time-36, the-34)
amod(time-36, first-35)
nmod:for(necessary-41, time-36)
case(police-39, in-37)
compound(police-39, history-38)
nmod:in(time-36, police-39)
cop(necessary-41, were-40)
acl:relcl(commotion-31, necessary-41)
mark(keep-43, to-42)
xcomp(necessary-41, keep-43)
dobj(keep-43, people-44)
mark(touching-46, from-45)
advcl(keep-43, touching-46)
det(pictures-48, the-47)
dobj(touching-46, pictures-48)
punct(caused-29, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#pictures

touch :: The failure of a rocket joint touched off the January 1986 explosion that killed the seven Challenger astronauts ./.
det(failure-2, The-1)
nsubj(touched-7, failure-2)
case(joint-6, of-3)
det(joint-6, a-4)
compound(joint-6, rocket-5)
nmod:of(failure-2, joint-6)
root(ROOT-0, touched-7)
compound:prt(touched-7, off-8)
det(explosion-12, the-9)
compound(explosion-12, January-10)
nummod(explosion-12, 1986-11)
dobj(touched-7, explosion-12)
nsubj(killed-14, explosion-12)
ref(explosion-12, that-13)
acl:relcl(explosion-12, killed-14)
det(astronauts-18, the-15)
nummod(astronauts-18, seven-16)
compound(astronauts-18, Challenger-17)
dobj(killed-14, astronauts-18)
punct(touched-7, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#explosion

touch :: It says that only unexpectedly bad developments , such as another stock-market crash the size of last October 's , or a sudden surge in oil prices , might damp confidence or touch off a spurt in inflation that might frighten governments into choking off the recovery by raising interest rates significantly ./.
nsubj(says-2, It-1)
root(ROOT-0, says-2)
mark(damp-30, that-3)
advmod(bad-6, only-4)
advmod(bad-6, unexpectedly-5)
amod(developments-7, bad-6)
nsubj(damp-30, developments-7)
nsubj(touch-33, developments-7)
punct(developments-7, ,-8)
case(crash-13, such-9)
mwe(such-9, as-10)
det(crash-13, another-11)
compound(crash-13, stock-market-12)
nmod:such_as(developments-7, crash-13)
det(size-15, the-14)
dep(crash-13, size-15)
case(October-18, of-16)
amod(October-18, last-17)
nmod:'s(size-15, October-18)
case(October-18, 's-19)
punct(size-15, ,-20)
cc(size-15, or-21)
det(surge-24, a-22)
amod(surge-24, sudden-23)
dep(crash-13, surge-24)
conj:or(size-15, surge-24)
case(prices-27, in-25)
compound(prices-27, oil-26)
nmod:in(surge-24, prices-27)
punct(developments-7, ,-28)
aux(damp-30, might-29)
ccomp(says-2, damp-30)
dobj(damp-30, confidence-31)
cc(damp-30, or-32)
ccomp(says-2, touch-33)
conj:or(damp-30, touch-33)
compound:prt(touch-33, off-34)
det(spurt-36, a-35)
dobj(touch-33, spurt-36)
nsubj(frighten-41, spurt-36)
case(inflation-38, in-37)
nmod:in(spurt-36, inflation-38)
ref(spurt-36, that-39)
aux(frighten-41, might-40)
acl:relcl(spurt-36, frighten-41)
dobj(frighten-41, governments-42)
mark(choking-44, into-43)
advcl(frighten-41, choking-44)
compound:prt(choking-44, off-45)
det(recovery-47, the-46)
dobj(choking-44, recovery-47)
mark(raising-49, by-48)
advcl(choking-44, raising-49)
compound(rates-51, interest-50)
dobj(raising-49, rates-51)
advmod(raising-49, significantly-52)
punct(says-2, .-53)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#spurt

touch :: This version stated that `` the other two men in the plane died , probably before Lt. Bush touched the water . ''/''
det(version-2, This-1)
nsubj(stated-3, version-2)
root(ROOT-0, stated-3)
mark(died-13, that-4)
punct(died-13, ``-5)
det(men-9, the-6)
amod(men-9, other-7)
nummod(men-9, two-8)
nsubj(died-13, men-9)
case(plane-12, in-10)
det(plane-12, the-11)
nmod:in(men-9, plane-12)
ccomp(stated-3, died-13)
punct(died-13, ,-14)
advmod(touched-19, probably-15)
mark(touched-19, before-16)
compound(Bush-18, Lt.-17)
nsubj(touched-19, Bush-18)
advcl(died-13, touched-19)
det(water-21, the-20)
dobj(touched-19, water-21)
punct(stated-3, .-22)
punct(stated-3, ''-23)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: touch#water

touch :: The union crew worked 35 ; the rest of the time it was forced to wait -- for someone to come back from the restroom or for a journeyman to become available to do work an apprentice could easily have done but was not allowed to touch ./.
det(crew-3, The-1)
compound(crew-3, union-2)
nsubj(worked-4, crew-3)
root(ROOT-0, worked-4)
dobj(worked-4, 35-5)
punct(worked-4, ;-6)
det(rest-8, the-7)
parataxis(worked-4, rest-8)
case(time-11, of-9)
det(time-11, the-10)
nmod:of(rest-8, time-11)
nsubjpass(forced-14, it-12)
nsubj:xsubj(wait-16, it-12)
auxpass(forced-14, was-13)
acl:relcl(time-11, forced-14)
mark(wait-16, to-15)
xcomp(forced-14, wait-16)
punct(come-21, ---17)
mark(come-21, for-18)
nsubj(come-21, someone-19)
mark(come-21, to-20)
dep(rest-8, come-21)
advmod(come-21, back-22)
case(restroom-25, from-23)
det(restroom-25, the-24)
nmod:from(come-21, restroom-25)
cc(come-21, or-26)
mark(become-31, for-27)
det(journeyman-29, a-28)
nsubj(become-31, journeyman-29)
mark(become-31, to-30)
dep(rest-8, become-31)
conj:or(come-21, become-31)
xcomp(become-31, available-32)
mark(do-34, to-33)
xcomp(available-32, do-34)
nsubjpass(done-41, work-35)
nsubjpass(allowed-45, work-35)
nsubj:xsubj(touch-47, work-35)
det(apprentice-37, an-36)
dobj(work-35, apprentice-37)
aux(done-41, could-38)
advmod(done-41, easily-39)
aux(done-41, have-40)
dep(do-34, done-41)
cc(done-41, but-42)
auxpass(allowed-45, was-43)
neg(allowed-45, not-44)
dep(do-34, allowed-45)
conj:but(done-41, allowed-45)
mark(touch-47, to-46)
xcomp(allowed-45, touch-47)
punct(worked-4, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#work

touch :: New England Telephone says the campaign makes it the first local phone company to break with the `` reach out and touch someone '' style of advertising popularized by Ma Bell ./.
compound(Telephone-3, New-1)
compound(Telephone-3, England-2)
nsubj(says-4, Telephone-3)
root(ROOT-0, says-4)
det(campaign-6, the-5)
nsubj(makes-7, campaign-6)
ccomp(says-4, makes-7)
nsubj(company-13, it-8)
det(company-13, the-9)
amod(company-13, first-10)
amod(company-13, local-11)
compound(company-13, phone-12)
xcomp(makes-7, company-13)
mark(break-15, to-14)
acl(company-13, break-15)
mark(reach-19, with-16)
nsubj(reach-19, the-17)
nsubj(touch-22, the-17)
punct(reach-19, ``-18)
advcl(break-15, reach-19)
compound:prt(reach-19, out-20)
cc(reach-19, and-21)
advcl(break-15, touch-22)
conj:and(reach-19, touch-22)
compound(style-25, someone-23)
punct(style-25, ''-24)
dobj(touch-22, style-25)
case(advertising-27, of-26)
nmod:of(style-25, advertising-27)
dep(touch-22, popularized-28)
case(Bell-31, by-29)
compound(Bell-31, Ma-30)
nmod:by(popularized-28, Bell-31)
punct(says-4, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#advertising

touch :: At state dinners , the president pours wine for his guests , but in adherence to Islam never touches a drop himself ./.
case(dinners-3, At-1)
compound(dinners-3, state-2)
nmod:at(pours-7, dinners-3)
punct(pours-7, ,-4)
det(president-6, the-5)
nsubj(pours-7, president-6)
nsubj(touches-19, president-6)
root(ROOT-0, pours-7)
dobj(pours-7, wine-8)
case(guests-11, for-9)
nmod:poss(guests-11, his-10)
nmod:for(pours-7, guests-11)
punct(pours-7, ,-12)
cc(pours-7, but-13)
case(adherence-15, in-14)
nmod:in(touches-19, adherence-15)
case(Islam-17, to-16)
nmod:to(adherence-15, Islam-17)
neg(touches-19, never-18)
conj:but(pours-7, touches-19)
det(drop-21, a-20)
dobj(touches-19, drop-21)
nmod:npmod(drop-21, himself-22)
punct(pours-7, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#drop

touch :: It also neglected to mention that not only is it self-funding through a payroll tax but includes safeguards to assure that general revenue will not be touched to underwrite the costs ./.
nsubj(neglected-3, It-1)
nsubj:xsubj(mention-5, It-1)
nsubj(includes-17, It-1)
advmod(neglected-3, also-2)
root(ROOT-0, neglected-3)
mark(mention-5, to-4)
xcomp(neglected-3, mention-5)
nsubj(self-funding-11, that-6)
neg(only-8, not-7)
cc:preconj(self-funding-11, only-8)
cop(self-funding-11, is-9)
nsubj(self-funding-11, it-10)
ccomp(mention-5, self-funding-11)
case(tax-15, through-12)
det(tax-15, a-13)
compound(tax-15, payroll-14)
nmod:through(self-funding-11, tax-15)
cc(neglected-3, but-16)
conj:but(neglected-3, includes-17)
dobj(includes-17, safeguards-18)
mark(assure-20, to-19)
acl(safeguards-18, assure-20)
mark(touched-27, that-21)
amod(revenue-23, general-22)
nsubjpass(touched-27, revenue-23)
nsubj:xsubj(underwrite-29, revenue-23)
aux(touched-27, will-24)
neg(touched-27, not-25)
auxpass(touched-27, be-26)
ccomp(assure-20, touched-27)
mark(underwrite-29, to-28)
xcomp(touched-27, underwrite-29)
det(costs-31, the-30)
dobj(underwrite-29, costs-31)
punct(neglected-3, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#revenue

touch :: Like many Hollywood families , the Reagans have long had an almost touching faith in astrological mumbo jumbo ./.
case(families-4, Like-1)
amod(families-4, many-2)
compound(families-4, Hollywood-3)
nmod:like(had-10, families-4)
punct(had-10, ,-5)
det(Reagans-7, the-6)
nsubj(had-10, Reagans-7)
aux(had-10, have-8)
advmod(had-10, long-9)
root(ROOT-0, had-10)
det(faith-14, an-11)
advmod(touching-13, almost-12)
amod(faith-14, touching-13)
dobj(had-10, faith-14)
case(jumbo-18, in-15)
amod(jumbo-18, astrological-16)
nmod:npmod(jumbo-18, mumbo-17)
nmod:in(faith-14, jumbo-18)
punct(had-10, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#faith

touch :: In the past month , the company 's shares have been bouncing around in the mid-to-high $ 50s and touched $ 60 ./.
case(month-4, In-1)
det(month-4, the-2)
amod(month-4, past-3)
nmod:in(bouncing-12, month-4)
punct(bouncing-12, ,-5)
det(company-7, the-6)
nmod:poss(shares-9, company-7)
case(company-7, 's-8)
nsubj(bouncing-12, shares-9)
nsubj(touched-20, shares-9)
aux(bouncing-12, have-10)
aux(bouncing-12, been-11)
root(ROOT-0, bouncing-12)
advmod(bouncing-12, around-13)
case(50s-18, in-14)
det(50s-18, the-15)
amod(50s-18, mid-to-high-16)
dep(50s-18, $-17)
nmod:in(bouncing-12, 50s-18)
cc(bouncing-12, and-19)
conj:and(bouncing-12, touched-20)
dep(60-22, $-21)
dobj(touched-20, 60-22)
punct(bouncing-12, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#60

touch :: One of those touched by the scandal was Schuyler Colfax , who happened to be Grant 's vice president ./.
nsubj(Colfax-10, One-1)
case(those-3, of-2)
nmod:of(One-1, those-3)
acl(those-3, touched-4)
case(scandal-7, by-5)
det(scandal-7, the-6)
nmod:by(touched-4, scandal-7)
cop(Colfax-10, was-8)
compound(Colfax-10, Schuyler-9)
root(ROOT-0, Colfax-10)
nsubj(happened-13, Colfax-10)
nsubj:xsubj(president-19, Colfax-10)
punct(Colfax-10, ,-11)
ref(Colfax-10, who-12)
acl:relcl(Colfax-10, happened-13)
mark(president-19, to-14)
cop(president-19, be-15)
nmod:poss(president-19, Grant-16)
case(Grant-16, 's-17)
compound(president-19, vice-18)
xcomp(happened-13, president-19)
punct(Colfax-10, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#scandal

touch :: The teams can get as close to the carcasses as they want to , but ca n't touch ./.
det(teams-2, The-1)
nsubj(get-4, teams-2)
nsubj(touch-18, teams-2)
aux(get-4, can-3)
root(ROOT-0, get-4)
advmod(carcasses-9, as-5)
case(carcasses-9, close-6)
mwe(close-6, to-7)
det(carcasses-9, the-8)
nmod:close_to(get-4, carcasses-9)
mark(want-12, as-10)
nsubj(want-12, they-11)
nsubj:xsubj(to-13, they-11)
advcl(carcasses-9, want-12)
xcomp(want-12, to-13)
punct(get-4, ,-14)
cc(get-4, but-15)
aux(touch-18, ca-16)
neg(touch-18, n't-17)
conj:but(get-4, touch-18)
punct(get-4, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#teams

touch :: At one of the technical sessions that led to the Managua meeting , Lenin Cerna , the notorious former state security chief and now vice-minister of the Interior Ministry , learned that a commercial jet carrying several Contras to Costa Rica from Honduras had touched down briefly in Managua ./.
case(one-2, At-1)
nmod:at(learned-31, one-2)
case(sessions-6, of-3)
det(sessions-6, the-4)
amod(sessions-6, technical-5)
nmod:of(one-2, sessions-6)
nsubj(led-8, sessions-6)
ref(sessions-6, that-7)
acl:relcl(sessions-6, led-8)
case(meeting-12, to-9)
det(meeting-12, the-10)
compound(meeting-12, Managua-11)
nmod:to(led-8, meeting-12)
punct(learned-31, ,-13)
compound(Cerna-15, Lenin-14)
nsubj(learned-31, Cerna-15)
punct(Cerna-15, ,-16)
det(chief-22, the-17)
amod(chief-22, notorious-18)
amod(chief-22, former-19)
compound(chief-22, state-20)
compound(chief-22, security-21)
appos(Cerna-15, chief-22)
cc(chief-22, and-23)
advmod(vice-minister-25, now-24)
appos(Cerna-15, vice-minister-25)
conj:and(chief-22, vice-minister-25)
case(Ministry-29, of-26)
det(Ministry-29, the-27)
compound(Ministry-29, Interior-28)
nmod:of(chief-22, Ministry-29)
punct(Cerna-15, ,-30)
root(ROOT-0, learned-31)
mark(touched-45, that-32)
det(jet-35, a-33)
amod(jet-35, commercial-34)
nsubj(touched-45, jet-35)
acl(jet-35, carrying-36)
amod(Contras-38, several-37)
dobj(carrying-36, Contras-38)
case(Rica-41, to-39)
compound(Rica-41, Costa-40)
nmod:to(carrying-36, Rica-41)
case(Honduras-43, from-42)
nmod:from(carrying-36, Honduras-43)
aux(touched-45, had-44)
ccomp(learned-31, touched-45)
compound:prt(touched-45, down-46)
dobj(touched-45, briefly-47)
case(Managua-49, in-48)
nmod:in(briefly-47, Managua-49)
punct(learned-31, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#briefly

touch :: The official , a member of the trade ministry 's Mideast and Africa office , said that `` fundamentally , '' the presidents accepted the request for caution but that the talks did n't touch on any specific measures for slowing trade with South Africa ./.
det(official-2, The-1)
nsubj(said-16, official-2)
punct(official-2, ,-3)
det(member-5, a-4)
appos(official-2, member-5)
case(Mideast-11, of-6)
det(ministry-9, the-7)
compound(ministry-9, trade-8)
nmod:poss(Mideast-11, ministry-9)
case(ministry-9, 's-10)
nmod:of(member-5, Mideast-11)
cc(Mideast-11, and-12)
compound(office-14, Africa-13)
nmod:of(member-5, office-14)
conj:and(Mideast-11, office-14)
punct(official-2, ,-15)
root(ROOT-0, said-16)
mark(accepted-24, that-17)
punct(accepted-24, ``-18)
advmod(accepted-24, fundamentally-19)
punct(accepted-24, ,-20)
punct(accepted-24, ''-21)
det(presidents-23, the-22)
nsubj(accepted-24, presidents-23)
ccomp(said-16, accepted-24)
det(request-26, the-25)
dobj(accepted-24, request-26)
case(caution-28, for-27)
nmod:for(request-26, caution-28)
cc(accepted-24, but-29)
mark(touch-35, that-30)
det(talks-32, the-31)
nsubj(touch-35, talks-32)
aux(touch-35, did-33)
neg(touch-35, n't-34)
ccomp(said-16, touch-35)
conj:but(accepted-24, touch-35)
case(measures-39, on-36)
det(measures-39, any-37)
amod(measures-39, specific-38)
nmod:on(touch-35, measures-39)
mark(slowing-41, for-40)
acl(measures-39, slowing-41)
dobj(slowing-41, trade-42)
case(Africa-45, with-43)
compound(Africa-45, South-44)
nmod:with(slowing-41, Africa-45)
punct(said-16, .-46)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#talks

touch :: It 's fine to touch down in Tel Aviv , in Cairo , in Amman ./.
nsubj(fine-3, It-1)
nsubj:xsubj(touch-5, It-1)
cop(fine-3, 's-2)
root(ROOT-0, fine-3)
mark(touch-5, to-4)
xcomp(fine-3, touch-5)
compound:prt(touch-5, down-6)
case(Aviv-9, in-7)
compound(Aviv-9, Tel-8)
nmod:in(touch-5, Aviv-9)
punct(touch-5, ,-10)
case(Cairo-12, in-11)
nmod:in(touch-5, Cairo-12)
punct(touch-5, ,-13)
case(Amman-15, in-14)
nmod:in(touch-5, Amman-15)
punct(fine-3, .-16)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#it

touch :: For years cable touted itself as the incubator for new kinds of shows the networks would n't touch -- like `` Shandling , '' rejected initially by the networks partly for its quirks: The star plays himself and talks to the audience more than he talks to the cast ./.
case(years-2, For-1)
nmod:for(touted-4, years-2)
nsubj(touted-4, cable-3)
root(ROOT-0, touted-4)
dobj(touted-4, itself-5)
case(incubator-8, as-6)
det(incubator-8, the-7)
nmod:as(touted-4, incubator-8)
case(kinds-11, for-9)
amod(kinds-11, new-10)
nmod:for(incubator-8, kinds-11)
case(shows-13, of-12)
nmod:of(kinds-11, shows-13)
det(networks-15, the-14)
nsubj(touch-18, networks-15)
aux(touch-18, would-16)
neg(touch-18, n't-17)
dep(touted-4, touch-18)
punct(touch-18, ---19)
case(Shandling-22, like-20)
punct(Shandling-22, ``-21)
nmod:like(touch-18, Shandling-22)
punct(Shandling-22, ,-23)
punct(Shandling-22, ''-24)
acl(Shandling-22, rejected-25)
advmod(rejected-25, initially-26)
case(networks-29, by-27)
det(networks-29, the-28)
nmod:by(rejected-25, networks-29)
advmod(quirks-33, partly-30)
case(quirks-33, for-31)
nmod:poss(quirks-33, its-32)
nmod:for(rejected-25, quirks-33)
punct(touch-18, :-34)
det(star-36, The-35)
nsubj(plays-37, star-36)
parataxis(touch-18, plays-37)
dobj(plays-37, himself-38)
cc(plays-37, and-39)
parataxis(touch-18, talks-40)
conj:and(plays-37, talks-40)
case(audience-43, to-41)
det(audience-43, the-42)
nmod:to(talks-40, audience-43)
amod(talks-40, more-44)
mark(talks-47, than-45)
nsubj(talks-47, he-46)
advcl(more-44, talks-47)
case(cast-50, to-48)
det(cast-50, the-49)
nmod:to(talks-47, cast-50)
punct(touted-4, .-51)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#networks

touch :: As it is , the current capacity utilization rate of about 83 % at the nation 's factories `` typically touches off a capital spending boom . ''/''
mark(is-3, As-1)
nsubj(is-3, it-2)
advcl(touches-21, is-3)
punct(touches-21, ,-4)
det(rate-9, the-5)
amod(rate-9, current-6)
compound(rate-9, capacity-7)
compound(rate-9, utilization-8)
nsubj(touches-21, rate-9)
case(%-13, of-10)
advmod(83-12, about-11)
nummod(%-13, 83-12)
nmod:of(rate-9, %-13)
case(factories-18, at-14)
det(nation-16, the-15)
nmod:poss(factories-18, nation-16)
case(nation-16, 's-17)
nmod:at(rate-9, factories-18)
punct(touches-21, ``-19)
advmod(touches-21, typically-20)
root(ROOT-0, touches-21)
compound:prt(touches-21, off-22)
det(boom-26, a-23)
compound(boom-26, capital-24)
compound(boom-26, spending-25)
dobj(touches-21, boom-26)
punct(touches-21, .-27)
punct(touches-21, ''-28)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: touch#boom

touch :: The rebuff touched off a panic at British Caledonian , where a bidding war was considered crucial to getting the highest price ./.
det(rebuff-2, The-1)
nsubj(touched-3, rebuff-2)
root(ROOT-0, touched-3)
compound:prt(touched-3, off-4)
det(panic-6, a-5)
dobj(touched-3, panic-6)
case(Caledonian-9, at-7)
amod(Caledonian-9, British-8)
nmod:at(panic-6, Caledonian-9)
punct(Caledonian-9, ,-10)
advmod(considered-16, where-11)
det(war-14, a-12)
compound(war-14, bidding-13)
nsubjpass(considered-16, war-14)
auxpass(considered-16, was-15)
acl:relcl(Caledonian-9, considered-16)
xcomp(considered-16, crucial-17)
mark(getting-19, to-18)
advcl(crucial-17, getting-19)
det(price-22, the-20)
amod(price-22, highest-21)
dobj(getting-19, price-22)
punct(touched-3, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#panic

touch :: `` People are a little afraid to touch steels because they 've been up so much lately , '' said one dealer ./.
punct(said-20, ``-1)
nsubj(afraid-6, People-2)
nsubj:xsubj(touch-8, People-2)
cop(afraid-6, are-3)
det(little-5, a-4)
nmod:npmod(afraid-6, little-5)
ccomp(said-20, afraid-6)
mark(touch-8, to-7)
xcomp(afraid-6, touch-8)
dobj(touch-8, steels-9)
mark(lately-17, because-10)
nsubj(lately-17, they-11)
aux(lately-17, 've-12)
cop(lately-17, been-13)
dep(much-16, up-14)
advmod(much-16, so-15)
advmod(lately-17, much-16)
advcl(afraid-6, lately-17)
punct(said-20, ,-18)
punct(said-20, ''-19)
root(ROOT-0, said-20)
nummod(dealer-22, one-21)
nsubj(said-20, dealer-22)
punct(said-20, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#steels

touch :: Still , it 's a flinty character indeed who would n't be touched by this delicately crafted piece of work ./.
advmod(character-7, Still-1)
punct(character-7, ,-2)
nsubj(character-7, it-3)
cop(character-7, 's-4)
det(character-7, a-5)
amod(character-7, flinty-6)
root(ROOT-0, character-7)
nsubjpass(touched-13, character-7)
advmod(character-7, indeed-8)
ref(character-7, who-9)
aux(touched-13, would-10)
neg(touched-13, n't-11)
auxpass(touched-13, be-12)
acl:relcl(character-7, touched-13)
case(piece-18, by-14)
det(piece-18, this-15)
advmod(crafted-17, delicately-16)
amod(piece-18, crafted-17)
nmod:agent(touched-13, piece-18)
case(work-20, of-19)
nmod:of(piece-18, work-20)
punct(character-7, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#character

touch :: Mr. Norris added that silver 's sharp fall can be attributed to a series of technical levels that it hit , touching off heavy selling by commodity funds ./.
compound(Norris-2, Mr.-1)
nsubj(added-3, Norris-2)
root(ROOT-0, added-3)
mark(attributed-11, that-4)
nmod:poss(fall-8, silver-5)
case(silver-5, 's-6)
amod(fall-8, sharp-7)
nsubjpass(attributed-11, fall-8)
aux(attributed-11, can-9)
auxpass(attributed-11, be-10)
ccomp(added-3, attributed-11)
case(series-14, to-12)
det(series-14, a-13)
nmod:to(attributed-11, series-14)
dobj(hit-20, series-14)
case(levels-17, of-15)
amod(levels-17, technical-16)
nmod:of(series-14, levels-17)
ref(series-14, that-18)
nsubj(hit-20, it-19)
acl:relcl(series-14, hit-20)
punct(series-14, ,-21)
acl(series-14, touching-22)
compound:prt(touching-22, off-23)
amod(selling-25, heavy-24)
dobj(touching-22, selling-25)
case(funds-28, by-26)
compound(funds-28, commodity-27)
nmod:by(selling-25, funds-28)
punct(added-3, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#selling

touch :: Though Mr. Calvino never wrote his sixth `` memo '' and in all probability would have touched up the text before publication , this last will and testament -- in all its wayward , digressive , allusive idiosyncracy -- is presumably as close as we 'll ever get to the intellectual autobiography of a writer whose significance seems likely to last well into that coming millennium he addresses so warmly in these lectures ./.
mark(wrote-5, Though-1)
compound(Calvino-3, Mr.-2)
nsubj(wrote-5, Calvino-3)
neg(wrote-5, never-4)
advcl(close-43, wrote-5)
nmod:poss(memo-9, his-6)
amod(memo-9, sixth-7)
punct(memo-9, ``-8)
nsubj(touched-17, memo-9)
punct(memo-9, ''-10)
cc(memo-9, and-11)
case(probability-14, in-12)
det(probability-14, all-13)
conj:and(memo-9, probability-14)
nsubj(touched-17, probability-14)
aux(touched-17, would-15)
aux(touched-17, have-16)
ccomp(wrote-5, touched-17)
compound:prt(touched-17, up-18)
det(text-20, the-19)
dobj(touched-17, text-20)
case(publication-22, before-21)
nmod:before(touched-17, publication-22)
punct(close-43, ,-23)
det(will-26, this-24)
amod(will-26, last-25)
nsubj(close-43, will-26)
cc(will-26, and-27)
conj:and(will-26, testament-28)
nsubj(close-43, testament-28)
punct(idiosyncracy-38, ---29)
case(idiosyncracy-38, in-30)
det:predet(idiosyncracy-38, all-31)
nmod:poss(idiosyncracy-38, its-32)
amod(idiosyncracy-38, wayward-33)
punct(wayward-33, ,-34)
dep(wayward-33, digressive-35)
punct(wayward-33, ,-36)
dep(wayward-33, allusive-37)
nmod:in(will-26, idiosyncracy-38)
punct(idiosyncracy-38, ---39)
cop(close-43, is-40)
advmod(close-43, presumably-41)
advmod(close-43, as-42)
root(ROOT-0, close-43)
mark(get-48, as-44)
nsubj(get-48, we-45)
aux(get-48, 'll-46)
advmod(get-48, ever-47)
advcl(close-43, get-48)
case(autobiography-52, to-49)
det(autobiography-52, the-50)
amod(autobiography-52, intellectual-51)
nmod:to(get-48, autobiography-52)
case(writer-55, of-53)
det(writer-55, a-54)
nmod:of(autobiography-52, writer-55)
nmod:poss(significance-57, writer-55)
ref(writer-55, whose-56)
nsubj(seems-58, significance-57)
acl:relcl(writer-55, seems-58)
xcomp(seems-58, likely-59)
mark(last-61, to-60)
xcomp(likely-59, last-61)
advmod(last-61, well-62)
advmod(last-61, into-63)
dep(into-63, that-64)
acl(that-64, coming-65)
xcomp(coming-65, millennium-66)
nsubj(addresses-68, he-67)
acl:relcl(millennium-66, addresses-68)
advmod(warmly-70, so-69)
advmod(addresses-68, warmly-70)
case(lectures-73, in-71)
det(lectures-73, these-72)
nmod:in(addresses-68, lectures-73)
punct(close-43, .-74)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#text

touch :: In another , they pondered why an observer was `` touched '' by the sight of a woman who took a cup from a fountain , drank water from it and then rinsed it out ./.
case(another-2, In-1)
nmod:in(pondered-5, another-2)
punct(pondered-5, ,-3)
nsubj(pondered-5, they-4)
nsubj(drank-27, they-4)
nsubj(rinsed-33, they-4)
root(ROOT-0, pondered-5)
advmod(touched-11, why-6)
det(observer-8, an-7)
nsubjpass(touched-11, observer-8)
auxpass(touched-11, was-9)
punct(touched-11, ``-10)
advcl(pondered-5, touched-11)
punct(touched-11, ''-12)
case(sight-15, by-13)
det(sight-15, the-14)
nmod:agent(touched-11, sight-15)
case(woman-18, of-16)
det(woman-18, a-17)
nmod:of(sight-15, woman-18)
nsubj(took-20, woman-18)
ref(woman-18, who-19)
acl:relcl(woman-18, took-20)
det(cup-22, a-21)
dobj(took-20, cup-22)
case(fountain-25, from-23)
det(fountain-25, a-24)
nmod:from(took-20, fountain-25)
punct(pondered-5, ,-26)
conj:and(pondered-5, drank-27)
dobj(drank-27, water-28)
case(it-30, from-29)
nmod:from(drank-27, it-30)
cc(pondered-5, and-31)
advmod(rinsed-33, then-32)
conj:and(pondered-5, rinsed-33)
dobj(rinsed-33, it-34)
compound:prt(rinsed-33, out-35)
punct(pondered-5, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#observer

touch :: As it is , the current capacity utilization rate of about 83 % at the nation 's factories `` typically touches off a capital spending boom . ''/''
mark(is-3, As-1)
nsubj(is-3, it-2)
advcl(touches-21, is-3)
punct(touches-21, ,-4)
det(rate-9, the-5)
amod(rate-9, current-6)
compound(rate-9, capacity-7)
compound(rate-9, utilization-8)
nsubj(touches-21, rate-9)
case(%-13, of-10)
advmod(83-12, about-11)
nummod(%-13, 83-12)
nmod:of(rate-9, %-13)
case(factories-18, at-14)
det(nation-16, the-15)
nmod:poss(factories-18, nation-16)
case(nation-16, 's-17)
nmod:at(rate-9, factories-18)
punct(touches-21, ``-19)
advmod(touches-21, typically-20)
root(ROOT-0, touches-21)
compound:prt(touches-21, off-22)
det(boom-26, a-23)
compound(boom-26, capital-24)
compound(boom-26, spending-25)
dobj(touches-21, boom-26)
punct(touches-21, .-27)
punct(touches-21, ''-28)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: touch#boom

touch :: `` They 're afraid program trading will touch off another free fall and they 've been through that before . ''/''
root(ROOT-0, ``-1)
nsubj(trading-6, They-2)
cop(trading-6, 're-3)
amod(trading-6, afraid-4)
compound(trading-6, program-5)
root(``-1, trading-6)
aux(touch-8, will-7)
dep(trading-6, touch-8)
compound:prt(touch-8, off-9)
det(fall-12, another-10)
amod(fall-12, free-11)
dobj(touch-8, fall-12)
cc(touch-8, and-13)
nsubj(that-18, they-14)
aux(that-18, 've-15)
cop(that-18, been-16)
case(that-18, through-17)
dep(trading-6, that-18)
conj:and(touch-8, that-18)
advmod(that-18, before-19)
punct(trading-6, .-20)
punct(trading-6, ''-21)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: touch#fall

touch :: Wang & Wang has submitted a lengthy document to the court in support of New York Chinese , saying , `` The controversy is touching upon and threatening the very cornerstone of U.S. policy and trade relations with Taiwan . ''/''
nsubj(submitted-5, Wang-1)
cc(Wang-1, &-2)
conj:&(Wang-1, Wang-3)
nsubj(submitted-5, Wang-3)
aux(submitted-5, has-4)
root(ROOT-0, submitted-5)
det(document-8, a-6)
amod(document-8, lengthy-7)
dobj(submitted-5, document-8)
case(court-11, to-9)
det(court-11, the-10)
nmod:to(submitted-5, court-11)
case(support-13, in-12)
nmod:in(submitted-5, support-13)
case(Chinese-17, of-14)
compound(Chinese-17, New-15)
compound(Chinese-17, York-16)
nmod:of(support-13, Chinese-17)
punct(submitted-5, ,-18)
xcomp(submitted-5, saying-19)
punct(saying-19, ,-20)
punct(saying-19, ``-21)
det(controversy-23, The-22)
nsubj(touching-25, controversy-23)
nsubj(touching-25', controversy-23)
aux(touching-25, is-24)
ccomp(saying-19, touching-25)
ccomp(saying-19, touching-25')
conj:and(touching-25, touching-25')
case(cornerstone-31, upon-26)
cc(upon-26, and-27)
conj:and(upon-26, threatening-28)
det(cornerstone-31, the-29)
amod(cornerstone-31, very-30)
nmod:threatening(touching-25', cornerstone-31)
nmod:upon(touching-25, cornerstone-31)
case(policy-34, of-32)
compound(policy-34, U.S.-33)
nmod:of(cornerstone-31, policy-34)
cc(policy-34, and-35)
compound(relations-37, trade-36)
nmod:of(cornerstone-31, relations-37)
conj:and(policy-34, relations-37)
case(Taiwan-39, with-38)
nmod:with(cornerstone-31, Taiwan-39)
punct(submitted-5, .-40)
punct(submitted-5, ''-41)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: touch#controversy

touch :: The dollar ended slightly higher against the other major currencies as profit-taking helped it bounce back after it dipped below 1.8000 marks and touched 126.00 yen in early Asia trading ./.
det(dollar-2, The-1)
nsubj(ended-3, dollar-2)
root(ROOT-0, ended-3)
advmod(higher-5, slightly-4)
advmod(ended-3, higher-5)
case(currencies-10, against-6)
det(currencies-10, the-7)
amod(currencies-10, other-8)
amod(currencies-10, major-9)
nmod:against(ended-3, currencies-10)
mark(helped-13, as-11)
nsubj(helped-13, profit-taking-12)
advcl(ended-3, helped-13)
nsubj(bounce-15, it-14)
ccomp(helped-13, bounce-15)
advmod(bounce-15, back-16)
mark(dipped-19, after-17)
nsubj(dipped-19, it-18)
nsubj(touched-24, it-18)
advcl(bounce-15, dipped-19)
case(marks-22, below-20)
nummod(marks-22, 1.8000-21)
nmod:below(dipped-19, marks-22)
cc(dipped-19, and-23)
advcl(bounce-15, touched-24)
conj:and(dipped-19, touched-24)
nummod(yen-26, 126.00-25)
dobj(touched-24, yen-26)
case(trading-30, in-27)
amod(trading-30, early-28)
compound(trading-30, Asia-29)
nmod:in(touched-24, trading-30)
punct(ended-3, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#yen

touch :: Given Oslin 's acting skill , the money was particularly well-invested in her videos , mini-movies really ; the touching one for `` 80 's Ladies '' plays like `` The Big Chill '' in four minutes ./.
case(skill-5, Given-1)
nmod:poss(skill-5, Oslin-2)
case(Oslin-2, 's-3)
amod(skill-5, acting-4)
nmod:given(well-invested-11, skill-5)
punct(well-invested-11, ,-6)
det(money-8, the-7)
nsubj(well-invested-11, money-8)
cop(well-invested-11, was-9)
advmod(well-invested-11, particularly-10)
root(ROOT-0, well-invested-11)
case(videos-14, in-12)
nmod:poss(videos-14, her-13)
nmod:in(well-invested-11, videos-14)
punct(well-invested-11, ,-15)
dobj(well-invested-11, mini-movies-16)
advmod(mini-movies-16, really-17)
punct(mini-movies-16, ;-18)
det(one-21, the-19)
amod(one-21, touching-20)
nsubj(plays-28, one-21)
case(Ladies-26, for-22)
punct(Ladies-26, ``-23)
nmod:poss(Ladies-26, 80-24)
case(80-24, 's-25)
nmod:for(one-21, Ladies-26)
punct(Ladies-26, ''-27)
parataxis(mini-movies-16, plays-28)
case(Chill-33, like-29)
punct(Chill-33, ``-30)
det(Chill-33, The-31)
amod(Chill-33, Big-32)
nmod:like(plays-28, Chill-33)
punct(Chill-33, ''-34)
case(minutes-37, in-35)
nummod(minutes-37, four-36)
nmod:in(plays-28, minutes-37)
punct(well-invested-11, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#one

touch :: And some of the slice-of-life vignettes and profiles -LRB- the Viet Vet who 's out on the Florida streets fighting against AIDS ; the recycling center run by the homeless -RRB- are not only interesting , but touching as well ./.
cc(interesting-35, And-1)
nsubj(interesting-35, some-2)
nsubj(touching-38, some-2)
case(vignettes-6, of-3)
det(vignettes-6, the-4)
amod(vignettes-6, slice-of-life-5)
nmod:of(some-2, vignettes-6)
cc(vignettes-6, and-7)
nmod:of(some-2, profiles-8)
conj:and(vignettes-6, profiles-8)
punct(Vet-12, -LRB--9)
det(Vet-12, the-10)
compound(Vet-12, Viet-11)
appos(some-2, Vet-12)
nsubj(out-15, Vet-12)
ref(Vet-12, who-13)
cop(out-15, 's-14)
acl:relcl(Vet-12, out-15)
case(streets-19, on-16)
det(streets-19, the-17)
compound(streets-19, Florida-18)
nmod:on(out-15, streets-19)
acl(streets-19, fighting-20)
case(AIDS-22, against-21)
nmod:against(fighting-20, AIDS-22)
punct(Vet-12, ;-23)
det(center-26, the-24)
compound(center-26, recycling-25)
dep(Vet-12, center-26)
acl(center-26, run-27)
case(homeless-30, by-28)
det(homeless-30, the-29)
nmod:by(run-27, homeless-30)
punct(Vet-12, -RRB--31)
cop(interesting-35, are-32)
neg(only-34, not-33)
cc:preconj(interesting-35, only-34)
root(ROOT-0, interesting-35)
punct(interesting-35, ,-36)
cc(interesting-35, but-37)
conj:but(interesting-35, touching-38)
advmod(touching-38, as-39)
mwe(as-39, well-40)
punct(interesting-35, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#some

touch :: And although the Dukakis camp says it wo n't touch corporate funds , state parties are n't so fussy ./.
cc(fussy-19, And-1)
mark(says-6, although-2)
det(camp-5, the-3)
compound(camp-5, Dukakis-4)
nsubj(says-6, camp-5)
advcl(fussy-19, says-6)
nsubj(touch-10, it-7)
aux(touch-10, wo-8)
neg(touch-10, n't-9)
ccomp(says-6, touch-10)
amod(funds-12, corporate-11)
dobj(touch-10, funds-12)
punct(fussy-19, ,-13)
compound(parties-15, state-14)
nsubj(fussy-19, parties-15)
cop(fussy-19, are-16)
neg(fussy-19, n't-17)
advmod(fussy-19, so-18)
root(ROOT-0, fussy-19)
punct(fussy-19, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#funds

touch :: Nor is the model 's skin touched up to unnatural perfection ./.
cc(touched-7, Nor-1)
aux(touched-7, is-2)
det(model-4, the-3)
nmod:poss(skin-6, model-4)
case(model-4, 's-5)
nsubj(touched-7, skin-6)
root(ROOT-0, touched-7)
compound:prt(touched-7, up-8)
case(perfection-11, to-9)
amod(perfection-11, unnatural-10)
nmod:to(touched-7, perfection-11)
punct(touched-7, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#skin

touch :: The work should have touched a nerve here because of the Korean government 's effort to hide , for the duration of the Olympics , a popular variety of Seoul food -- namely , dog meat ./.
det(work-2, The-1)
nsubj(touched-5, work-2)
aux(touched-5, should-3)
aux(touched-5, have-4)
root(ROOT-0, touched-5)
det(nerve-7, a-6)
dobj(touched-5, nerve-7)
advmod(touched-5, here-8)
case(effort-15, because-9)
mwe(because-9, of-10)
det(government-13, the-11)
amod(government-13, Korean-12)
nmod:poss(effort-15, government-13)
case(government-13, 's-14)
nmod:because_of(touched-5, effort-15)
mark(hide-17, to-16)
acl(effort-15, hide-17)
punct(effort-15, ,-18)
case(duration-21, for-19)
det(duration-21, the-20)
nmod:for(effort-15, duration-21)
case(Olympics-24, of-22)
det(Olympics-24, the-23)
nmod:of(duration-21, Olympics-24)
punct(Olympics-24, ,-25)
det(variety-28, a-26)
amod(variety-28, popular-27)
appos(Olympics-24, variety-28)
case(food-31, of-29)
compound(food-31, Seoul-30)
nmod:of(variety-28, food-31)
punct(effort-15, ---32)
advmod(effort-15, namely-33)
punct(effort-15, ,-34)
compound(meat-36, dog-35)
appos(effort-15, meat-36)
punct(touched-5, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#nerve

touch :: He will certainly take great offense to my description of the Taiwanese as being not much in tune with the outside world , betting gleefully with stocks that no foreign fund manager would touch , and happily oblivious to what the history of financial markets has taught the rest of mankind ./.
nsubj(take-4, He-1)
nsubj(oblivious-38, He-1)
aux(take-4, will-2)
advmod(take-4, certainly-3)
root(ROOT-0, take-4)
amod(offense-6, great-5)
dobj(take-4, offense-6)
case(description-9, to-7)
nmod:poss(description-9, my-8)
nmod:to(take-4, description-9)
case(Taiwanese-12, of-10)
det(Taiwanese-12, the-11)
nmod:of(description-9, Taiwanese-12)
mark(tune-18, as-13)
cop(tune-18, being-14)
neg(much-16, not-15)
advmod(tune-18, much-16)
case(tune-18, in-17)
advcl(take-4, tune-18)
case(world-22, with-19)
det(world-22, the-20)
amod(world-22, outside-21)
nmod:with(tune-18, world-22)
punct(take-4, ,-23)
xcomp(take-4, betting-24)
advmod(betting-24, gleefully-25)
case(stocks-27, with-26)
nmod:with(betting-24, stocks-27)
dobj(touch-34, stocks-27)
ref(stocks-27, that-28)
neg(manager-32, no-29)
amod(manager-32, foreign-30)
compound(manager-32, fund-31)
nsubj(touch-34, manager-32)
aux(touch-34, would-33)
acl:relcl(stocks-27, touch-34)
punct(take-4, ,-35)
cc(take-4, and-36)
advmod(oblivious-38, happily-37)
conj:and(take-4, oblivious-38)
mark(taught-47, to-39)
dobj(taught-47, what-40)
det(history-42, the-41)
nsubj(taught-47, history-42)
case(markets-45, of-43)
amod(markets-45, financial-44)
nmod:of(history-42, markets-45)
aux(taught-47, has-46)
advcl(oblivious-38, taught-47)
det(rest-49, the-48)
dobj(taught-47, rest-49)
case(mankind-51, of-50)
nmod:of(rest-49, mankind-51)
punct(take-4, .-52)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#stocks

touch :: `` If the dollar stays at about the same level , that means the Bank of Japan has some room not to raise the discount rate , '' he said , `` which means maybe it 's safe to touch the interest-rate sensitive sectors . ''/''
punct(said-30, ``-1)
mark(stays-5, If-2)
det(dollar-4, the-3)
nsubj(stays-5, dollar-4)
advcl(means-13, stays-5)
case(level-10, at-6)
amod(level-10, about-7)
det(level-10, the-8)
amod(level-10, same-9)
nmod:at(stays-5, level-10)
punct(means-13, ,-11)
nsubj(means-13, that-12)
ccomp(said-30, means-13)
det(Bank-15, the-14)
nsubj(has-18, Bank-15)
case(Japan-17, of-16)
nmod:of(Bank-15, Japan-17)
ccomp(means-13, has-18)
det(room-20, some-19)
dobj(has-18, room-20)
neg(raise-23, not-21)
mark(raise-23, to-22)
acl(room-20, raise-23)
det(rate-26, the-24)
compound(rate-26, discount-25)
dobj(raise-23, rate-26)
punct(said-30, ,-27)
punct(said-30, ''-28)
nsubj(said-30, he-29)
root(ROOT-0, said-30)
punct(said-30, ,-31)
punct(said-30, ``-32)
nsubj(means-34, which-33)
ccomp(said-30, means-34)
advmod(safe-38, maybe-35)
nsubj(safe-38, it-36)
nsubj:xsubj(touch-40, it-36)
cop(safe-38, 's-37)
ccomp(means-34, safe-38)
mark(touch-40, to-39)
xcomp(safe-38, touch-40)
det(sectors-44, the-41)
compound(sectors-44, interest-rate-42)
amod(sectors-44, sensitive-43)
dobj(touch-40, sectors-44)
punct(said-30, .-45)
punct(said-30, ''-46)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: touch#sectors

touch :: Western military planners will call for the unilateral reduction of short-range nuclear systems that were n't touched by the recent superpower arms treaty , according to Gen. John Galvin , supreme Allied commander in Europe ./.
amod(planners-3, Western-1)
amod(planners-3, military-2)
nsubj(call-5, planners-3)
aux(call-5, will-4)
root(ROOT-0, call-5)
case(reduction-9, for-6)
det(reduction-9, the-7)
amod(reduction-9, unilateral-8)
nmod:for(call-5, reduction-9)
case(systems-13, of-10)
amod(systems-13, short-range-11)
amod(systems-13, nuclear-12)
nmod:of(reduction-9, systems-13)
nsubjpass(touched-17, systems-13)
ref(systems-13, that-14)
auxpass(touched-17, were-15)
neg(touched-17, n't-16)
acl:relcl(systems-13, touched-17)
case(treaty-23, by-18)
det(treaty-23, the-19)
amod(treaty-23, recent-20)
compound(treaty-23, superpower-21)
compound(treaty-23, arms-22)
nmod:agent(touched-17, treaty-23)
punct(call-5, ,-24)
case(Galvin-29, according-25)
mwe(according-25, to-26)
compound(Galvin-29, Gen.-27)
compound(Galvin-29, John-28)
nmod:according_to(call-5, Galvin-29)
punct(Galvin-29, ,-30)
compound(commander-33, supreme-31)
compound(commander-33, Allied-32)
appos(Galvin-29, commander-33)
case(Europe-35, in-34)
nmod:in(commander-33, Europe-35)
punct(call-5, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#systems

touch :: Should any child with a telephone be able to reach out and touch `` Missy , '' the star of one Megaquest vignette , as she writhes ecstatically on a restaurant table filled with fresh fruit ?/.
aux(able-8, Should-1)
det(child-3, any-2)
nsubj(able-8, child-3)
nsubj:xsubj(reach-10, child-3)
case(telephone-6, with-4)
det(telephone-6, a-5)
nmod:with(child-3, telephone-6)
cop(able-8, be-7)
root(ROOT-0, able-8)
mark(reach-10, to-9)
xcomp(able-8, reach-10)
compound:prt(reach-10, out-11)
cc(reach-10, and-12)
xcomp(able-8, touch-13)
conj:and(reach-10, touch-13)
punct(Missy-15, ``-14)
dobj(reach-10, Missy-15)
punct(Missy-15, ,-16)
punct(Missy-15, ''-17)
det(star-19, the-18)
dep(Missy-15, star-19)
case(vignette-23, of-20)
nummod(vignette-23, one-21)
compound(vignette-23, Megaquest-22)
nmod:of(star-19, vignette-23)
punct(able-8, ,-24)
mark(writhes-27, as-25)
nsubj(writhes-27, she-26)
advcl(able-8, writhes-27)
advmod(writhes-27, ecstatically-28)
case(table-32, on-29)
det(table-32, a-30)
compound(table-32, restaurant-31)
nmod:on(writhes-27, table-32)
acl(table-32, filled-33)
case(fruit-36, with-34)
amod(fruit-36, fresh-35)
nmod:with(filled-33, fruit-36)
punct(able-8, ?-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

touch :: He can be oblivious to how calculated he sometimes appears , yet he can also touch people , as when , at the close of the Louisville rally Saturday , he brought forward Georgia Powers , a black Kentucky state senator ./.
nsubj(oblivious-4, He-1)
nsubj:xsubj(calculated-7, He-1)
aux(oblivious-4, can-2)
cop(oblivious-4, be-3)
root(ROOT-0, oblivious-4)
mark(calculated-7, to-5)
advmod(calculated-7, how-6)
xcomp(oblivious-4, calculated-7)
nsubj(appears-10, he-8)
advmod(appears-10, sometimes-9)
ccomp(calculated-7, appears-10)
punct(oblivious-4, ,-11)
advmod(touch-16, yet-12)
nsubj(touch-16, he-13)
aux(touch-16, can-14)
advmod(touch-16, also-15)
ccomp(oblivious-4, touch-16)
dobj(touch-16, people-17)
punct(touch-16, ,-18)
advmod(when-20, as-19)
advmod(brought-32, when-20)
punct(brought-32, ,-21)
case(close-24, at-22)
det(close-24, the-23)
nmod:at(Saturday-29, close-24)
case(rally-28, of-25)
det(rally-28, the-26)
compound(rally-28, Louisville-27)
nmod:of(close-24, rally-28)
nmod:tmod(brought-32, Saturday-29)
punct(brought-32, ,-30)
nsubj(brought-32, he-31)
advcl(touch-16, brought-32)
advmod(Powers-35, forward-33)
compound(Powers-35, Georgia-34)
dobj(brought-32, Powers-35)
punct(Powers-35, ,-36)
det(senator-41, a-37)
amod(senator-41, black-38)
compound(senator-41, Kentucky-39)
compound(senator-41, state-40)
appos(Powers-35, senator-41)
punct(oblivious-4, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#people

touch :: The new show , Mr. Stoddard believes , `` touches something , consciously or unconsciously , that is about a lot of women 's lives . ''/''
det(show-3, The-1)
amod(show-3, new-2)
root(ROOT-0, show-3)
punct(believes-7, ,-4)
compound(Stoddard-6, Mr.-5)
nsubj(believes-7, Stoddard-6)
dep(show-3, believes-7)
punct(believes-7, ,-8)
punct(something-11, ``-9)
compound(something-11, touches-10)
dobj(believes-7, something-11)
nsubj(lot-21, something-11)
punct(something-11, ,-12)
advmod(something-11, consciously-13)
cc(consciously-13, or-14)
advmod(something-11, unconsciously-15)
conj:or(consciously-13, unconsciously-15)
punct(something-11, ,-16)
ref(something-11, that-17)
cop(lot-21, is-18)
advmod(lot-21, about-19)
det(lot-21, a-20)
acl:relcl(something-11, lot-21)
case(lives-25, of-22)
nmod:poss(lives-25, women-23)
case(women-23, 's-24)
nmod:of(lot-21, lives-25)
punct(show-3, .-26)
punct(show-3, ''-27)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

touch :: Issues of race and racism would seem to be central to the Duke Ellington story , but film maker Carter touches on them only enough to tantalize us , no more ./.
nsubj(seem-7, Issues-1)
nsubj:xsubj(central-10, Issues-1)
case(race-3, of-2)
nmod:of(Issues-1, race-3)
cc(race-3, and-4)
nmod:of(Issues-1, racism-5)
conj:and(race-3, racism-5)
aux(seem-7, would-6)
root(ROOT-0, seem-7)
mark(central-10, to-8)
cop(central-10, be-9)
xcomp(seem-7, central-10)
case(story-15, to-11)
det(story-15, the-12)
compound(story-15, Duke-13)
compound(story-15, Ellington-14)
nmod:to(central-10, story-15)
punct(seem-7, ,-16)
cc(seem-7, but-17)
compound(touches-21, film-18)
compound(touches-21, maker-19)
compound(touches-21, Carter-20)
conj:but(seem-7, touches-21)
case(them-23, on-22)
nmod:on(touches-21, them-23)
advmod(enough-25, only-24)
advmod(touches-21, enough-25)
mark(tantalize-27, to-26)
xcomp(enough-25, tantalize-27)
dobj(tantalize-27, us-28)
punct(tantalize-27, ,-29)
neg(more-31, no-30)
advmod(tantalize-27, more-31)
punct(seem-7, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#them

touch :: It also promises to touch off a contest to succeed Mr. Sarni among the three group vice presidents ./.
nsubj(promises-3, It-1)
nsubj:xsubj(touch-5, It-1)
advmod(promises-3, also-2)
root(ROOT-0, promises-3)
mark(touch-5, to-4)
xcomp(promises-3, touch-5)
compound:prt(touch-5, off-6)
det(contest-8, a-7)
dobj(touch-5, contest-8)
mark(succeed-10, to-9)
acl(contest-8, succeed-10)
compound(Sarni-12, Mr.-11)
dobj(succeed-10, Sarni-12)
case(presidents-18, among-13)
det(presidents-18, the-14)
nummod(presidents-18, three-15)
compound(presidents-18, group-16)
compound(presidents-18, vice-17)
nmod:among(succeed-10, presidents-18)
punct(promises-3, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#contest

touch :: Western diplomats and other observers say the Northrop situation could be a test case of how far the government of South Korea 's newly elected President Roh Tae Woo will go in investigating questionable matters that touch his old friend and political patron , former President Chun ./.
amod(diplomats-2, Western-1)
nsubj(say-6, diplomats-2)
cc(diplomats-2, and-3)
amod(observers-5, other-4)
conj:and(diplomats-2, observers-5)
nsubj(say-6, observers-5)
root(ROOT-0, say-6)
det(situation-9, the-7)
compound(situation-9, Northrop-8)
nsubj(case-14, situation-9)
aux(case-14, could-10)
cop(case-14, be-11)
det(case-14, a-12)
compound(case-14, test-13)
ccomp(say-6, case-14)
mark(go-31, of-15)
advmod(far-17, how-16)
advmod(go-31, far-17)
det(government-19, the-18)
nsubj(go-31, government-19)
case(Woo-29, of-20)
compound(Korea-22, South-21)
nmod:poss(Woo-29, Korea-22)
case(Korea-22, 's-23)
advmod(elected-25, newly-24)
amod(Woo-29, elected-25)
compound(Woo-29, President-26)
compound(Woo-29, Roh-27)
compound(Woo-29, Tae-28)
nmod:of(government-19, Woo-29)
aux(go-31, will-30)
acl(case-14, go-31)
mark(investigating-33, in-32)
advcl(go-31, investigating-33)
amod(matters-35, questionable-34)
dobj(investigating-33, matters-35)
nsubj(touch-37, matters-35)
ref(matters-35, that-36)
acl:relcl(matters-35, touch-37)
nmod:poss(friend-40, his-38)
amod(friend-40, old-39)
dobj(touch-37, friend-40)
cc(friend-40, and-41)
amod(patron-43, political-42)
dobj(touch-37, patron-43)
conj:and(friend-40, patron-43)
punct(friend-40, ,-44)
amod(Chun-47, former-45)
compound(Chun-47, President-46)
appos(friend-40, Chun-47)
punct(say-6, .-48)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#friend

touch :: Sponsored by the Independence Institute of Colorado , `` Classrooms for the Free Society '' sought to assess something scarcely touched by the press , but which may decide the role America will play in the world within a decade or two ./.
advcl(sought-16, Sponsored-1)
case(Institute-5, by-2)
det(Institute-5, the-3)
compound(Institute-5, Independence-4)
nmod:by(Sponsored-1, Institute-5)
case(Colorado-7, of-6)
nmod:of(Institute-5, Colorado-7)
punct(sought-16, ,-8)
punct(sought-16, ``-9)
nsubj(sought-16, Classrooms-10)
nsubj:xsubj(assess-18, Classrooms-10)
case(Society-14, for-11)
det(Society-14, the-12)
amod(Society-14, Free-13)
nmod:for(Classrooms-10, Society-14)
punct(Society-14, ''-15)
root(ROOT-0, sought-16)
mark(assess-18, to-17)
xcomp(sought-16, assess-18)
dobj(assess-18, something-19)
advmod(touched-21, scarcely-20)
acl(something-19, touched-21)
case(press-24, by-22)
det(press-24, the-23)
nmod:by(touched-21, press-24)
punct(assess-18, ,-25)
cc(assess-18, but-26)
nsubj(decide-29, which-27)
aux(decide-29, may-28)
xcomp(sought-16, decide-29)
conj:but(assess-18, decide-29)
det(role-31, the-30)
dobj(decide-29, role-31)
nsubj(play-34, America-32)
aux(play-34, will-33)
acl:relcl(role-31, play-34)
case(world-37, in-35)
det(world-37, the-36)
nmod:in(play-34, world-37)
case(decade-40, within-38)
det(decade-40, a-39)
nmod:within(play-34, decade-40)
cc(two-42, or-41)
nummod(decade-40, two-42)
punct(sought-16, .-43)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#press

touch :: At a recent Los Angeles fund-raiser , the governor touched a chord when he invoked his immigrant heritage ./.
case(fund-raiser-6, At-1)
det(fund-raiser-6, a-2)
amod(fund-raiser-6, recent-3)
compound(fund-raiser-6, Los-4)
compound(fund-raiser-6, Angeles-5)
nmod:at(touched-10, fund-raiser-6)
punct(touched-10, ,-7)
det(governor-9, the-8)
nsubj(touched-10, governor-9)
root(ROOT-0, touched-10)
det(chord-12, a-11)
dobj(touched-10, chord-12)
advmod(invoked-15, when-13)
nsubj(invoked-15, he-14)
advcl(touched-10, invoked-15)
nmod:poss(heritage-18, his-16)
amod(heritage-18, immigrant-17)
dobj(invoked-15, heritage-18)
punct(touched-10, .-19)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#chord

touch :: `` This issue touches all Californians -- it 's the biggest economic prop around -- and he 's got to deal with it , '' says Mervin Field , the non-partisan California pollster ./.
punct(says-26, ``-1)
det(issue-3, This-2)
nsubj(touches-4, issue-3)
ccomp(says-26, touches-4)
det(Californians-6, all-5)
dobj(touches-4, Californians-6)
punct(touches-4, ---7)
nsubj(prop-13, it-8)
cop(prop-13, 's-9)
det(prop-13, the-10)
amod(prop-13, biggest-11)
amod(prop-13, economic-12)
parataxis(touches-4, prop-13)
advmod(prop-13, around-14)
punct(prop-13, ---15)
cc(touches-4, and-16)
nsubjpass(got-19, he-17)
nsubj:xsubj(deal-21, he-17)
auxpass(got-19, 's-18)
conj:and(touches-4, got-19)
ccomp(says-26, got-19)
mark(deal-21, to-20)
xcomp(got-19, deal-21)
case(it-23, with-22)
nmod:with(deal-21, it-23)
punct(says-26, ,-24)
punct(says-26, ''-25)
root(ROOT-0, says-26)
compound(Field-28, Mervin-27)
nsubj(says-26, Field-28)
punct(Field-28, ,-29)
det(pollster-33, the-30)
amod(pollster-33, non-partisan-31)
compound(pollster-33, California-32)
appos(Field-28, pollster-33)
punct(says-26, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#californians

touch :: A coup attempt last August against the government of President Corazon Aquino touched off fears here that her government -- and newly won democracy in the Philippines -- were in danger ./.
det(attempt-3, A-1)
compound(attempt-3, coup-2)
nsubj(touched-13, attempt-3)
amod(August-5, last-4)
nmod:tmod(attempt-3, August-5)
case(government-8, against-6)
det(government-8, the-7)
nmod:against(attempt-3, government-8)
case(Aquino-12, of-9)
compound(Aquino-12, President-10)
compound(Aquino-12, Corazon-11)
nmod:of(government-8, Aquino-12)
root(ROOT-0, touched-13)
compound:prt(touched-13, off-14)
dobj(touched-13, fears-15)
advmod(fears-15, here-16)
mark(danger-31, that-17)
nmod:poss(government-19, her-18)
nsubj(danger-31, government-19)
punct(won-23, ---20)
cc(won-23, and-21)
advmod(won-23, newly-22)
dep(government-19, won-23)
dobj(won-23, democracy-24)
case(Philippines-27, in-25)
det(Philippines-27, the-26)
nmod:in(won-23, Philippines-27)
punct(won-23, ---28)
cop(danger-31, were-29)
case(danger-31, in-30)
ccomp(fears-15, danger-31)
punct(touched-13, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#fears

touch :: Other House members touched by scandal were locked in tight races ./.
amod(members-3, Other-1)
compound(members-3, House-2)
nsubjpass(locked-8, members-3)
acl(members-3, touched-4)
case(scandal-6, by-5)
nmod:by(touched-4, scandal-6)
auxpass(locked-8, were-7)
root(ROOT-0, locked-8)
case(races-11, in-9)
amod(races-11, tight-10)
nmod:in(locked-8, races-11)
punct(locked-8, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#scandal

touch :: In the past several elections , the Republicans have had a lock on victory by piecing together 109 electoral votes from Dixie -LRB- excluding Texas -RRB- , 107 from the West -LRB- excluding Hawaii -RRB- and enough from the Great Plains and a handful of other dependable GOP redoubts to get more than the 270 needed for election -- before even touching the populous industrial states and Texas ./.
case(elections-5, In-1)
det(elections-5, the-2)
amod(elections-5, past-3)
amod(elections-5, several-4)
nmod:in(had-10, elections-5)
punct(had-10, ,-6)
det(Republicans-8, the-7)
nsubj(had-10, Republicans-8)
aux(had-10, have-9)
root(ROOT-0, had-10)
det(lock-12, a-11)
dobj(had-10, lock-12)
case(victory-14, on-13)
nmod:on(lock-12, victory-14)
mark(piecing-16, by-15)
advcl(had-10, piecing-16)
advmod(piecing-16, together-17)
nummod(votes-20, 109-18)
amod(votes-20, electoral-19)
dobj(piecing-16, votes-20)
case(Dixie-22, from-21)
nmod:from(votes-20, Dixie-22)
punct(Texas-25, -LRB--23)
case(Texas-25, excluding-24)
nmod:excluding(Dixie-22, Texas-25)
punct(Texas-25, -RRB--26)
punct(votes-20, ,-27)
dobj(piecing-16, 107-28)
conj:and(votes-20, 107-28)
case(West-31, from-29)
det(West-31, the-30)
nmod:from(107-28, West-31)
punct(Hawaii-34, -LRB--32)
case(Hawaii-34, excluding-33)
nmod:excluding(107-28, Hawaii-34)
punct(Hawaii-34, -RRB--35)
cc(votes-20, and-36)
dobj(piecing-16, enough-37)
conj:and(votes-20, enough-37)
case(Plains-41, from-38)
det(Plains-41, the-39)
compound(Plains-41, Great-40)
nmod:from(enough-37, Plains-41)
cc(Plains-41, and-42)
det(handful-44, a-43)
nmod:from(enough-37, handful-44)
conj:and(Plains-41, handful-44)
case(redoubts-49, of-45)
amod(redoubts-49, other-46)
amod(redoubts-49, dependable-47)
compound(redoubts-49, GOP-48)
nmod:of(handful-44, redoubts-49)
mark(get-51, to-50)
xcomp(enough-37, get-51)
dobj(get-51, more-52)
case(270-55, than-53)
det(270-55, the-54)
nmod:than(more-52, 270-55)
acl(270-55, needed-56)
case(election-58, for-57)
nmod:for(needed-56, election-58)
punct(get-51, ---59)
mark(touching-62, before-60)
advmod(touching-62, even-61)
advcl(get-51, touching-62)
det(states-66, the-63)
amod(states-66, populous-64)
amod(states-66, industrial-65)
dobj(touching-62, states-66)
cc(states-66, and-67)
dobj(touching-62, Texas-68)
conj:and(states-66, Texas-68)
punct(had-10, .-69)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#states

touch :: The September Ginnie Mae 9 % issue closed at 94 30 32 , up 6 32 , after touching a high of 95 14 32 ./.
det(issue-7, The-1)
compound(issue-7, September-2)
compound(issue-7, Ginnie-3)
compound(issue-7, Mae-4)
compound(%-6, 9-5)
amod(issue-7, %-6)
nsubj(closed-8, issue-7)
root(ROOT-0, closed-8)
case(32-12, at-9)
compound(30-11, 94-10)
nummod(32-12, 30-11)
nmod:at(closed-8, 32-12)
punct(closed-8, ,-13)
advmod(closed-8, up-14)
compound(32-16, 6-15)
nmod:npmod(up-14, 32-16)
punct(closed-8, ,-17)
mark(touching-19, after-18)
advcl(closed-8, touching-19)
det(high-21, a-20)
dobj(touching-19, high-21)
case(32-25, of-22)
compound(14-24, 95-23)
nummod(32-25, 14-24)
nmod:of(high-21, 32-25)
punct(closed-8, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#32

touch :: But a mechanic ca n't see or touch a short circuit in a microprocessor , says J.S. Kiple , manager of technical training for Chrysler 's service and parts operations ./.
cc(see-6, But-1)
det(mechanic-3, a-2)
nsubj(see-6, mechanic-3)
nsubj(touch-8, mechanic-3)
aux(see-6, ca-4)
neg(see-6, n't-5)
ccomp(says-16, see-6)
cc(see-6, or-7)
conj:or(see-6, touch-8)
ccomp(says-16, touch-8)
det(circuit-11, a-9)
amod(circuit-11, short-10)
dobj(see-6, circuit-11)
case(microprocessor-14, in-12)
det(microprocessor-14, a-13)
nmod:in(circuit-11, microprocessor-14)
punct(says-16, ,-15)
root(ROOT-0, says-16)
compound(Kiple-18, J.S.-17)
nsubj(says-16, Kiple-18)
punct(Kiple-18, ,-19)
appos(Kiple-18, manager-20)
case(training-23, of-21)
amod(training-23, technical-22)
nmod:of(manager-20, training-23)
case(service-27, for-24)
nmod:poss(service-27, Chrysler-25)
case(Chrysler-25, 's-26)
nmod:for(training-23, service-27)
cc(service-27, and-28)
compound(operations-30, parts-29)
nmod:for(training-23, operations-30)
conj:and(service-27, operations-30)
punct(says-16, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#mechanic

touch :: `` People in Washington touch cheek-to-cheek quite often , '' says Effi Barry , wife of the city 's mayor , Marion Barry Jr ./.
punct(says-11, ``-1)
ccomp(says-11, People-2)
case(cheek-to-cheek-6, in-3)
compound(cheek-to-cheek-6, Washington-4)
compound(cheek-to-cheek-6, touch-5)
nmod:in(People-2, cheek-to-cheek-6)
advmod(often-8, quite-7)
advmod(People-2, often-8)
punct(says-11, ,-9)
punct(says-11, ''-10)
root(ROOT-0, says-11)
compound(Barry-13, Effi-12)
nsubj(says-11, Barry-13)
punct(Barry-13, ,-14)
appos(Barry-13, wife-15)
case(mayor-20, of-16)
det(city-18, the-17)
nmod:poss(mayor-20, city-18)
case(city-18, 's-19)
nmod:of(wife-15, mayor-20)
punct(Barry-13, ,-21)
compound(Jr-24, Marion-22)
compound(Jr-24, Barry-23)
appos(Barry-13, Jr-24)
punct(says-11, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

touch :: Another regular , bundled in a brown cape , his feet wrapped in cloth , was seen touching all the bread in the basket `` hoping no one else will eat it , '' says Mrs. Howell ./.
det(regular-2, Another-1)
nsubjpass(seen-17, regular-2)
punct(regular-2, ,-3)
acl(regular-2, bundled-4)
case(cape-8, in-5)
det(cape-8, a-6)
amod(cape-8, brown-7)
nmod:in(bundled-4, cape-8)
punct(regular-2, ,-9)
nmod:poss(feet-11, his-10)
nsubj(wrapped-12, feet-11)
dep(regular-2, wrapped-12)
case(cloth-14, in-13)
nmod:in(wrapped-12, cloth-14)
punct(regular-2, ,-15)
auxpass(seen-17, was-16)
ccomp(says-35, seen-17)
xcomp(seen-17, touching-18)
det:predet(bread-21, all-19)
det(bread-21, the-20)
dobj(touching-18, bread-21)
case(basket-24, in-22)
det(basket-24, the-23)
nmod:in(bread-21, basket-24)
punct(hoping-26, ``-25)
xcomp(touching-18, hoping-26)
neg(one-28, no-27)
nsubj(eat-31, one-28)
advmod(one-28, else-29)
aux(eat-31, will-30)
ccomp(hoping-26, eat-31)
dobj(eat-31, it-32)
punct(says-35, ,-33)
punct(says-35, ''-34)
root(ROOT-0, says-35)
compound(Howell-37, Mrs.-36)
nsubj(says-35, Howell-37)
punct(says-35, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#bread

touch :: Where CBS or ABC harped on religious freedom over footage of Ronald Reagan visiting an orthodox church , `` Vremya '' stated that Mr. Reagan `` touched upon the question of religion , '' and a deputy in charge responded , `` these issues . .. are now being looked into carefully . ''/''
advmod(harped-5, Where-1)
nsubj(harped-5, CBS-2)
cc(CBS-2, or-3)
conj:or(CBS-2, ABC-4)
nsubj(harped-5, ABC-4)
advcl(stated-22, harped-5)
case(freedom-8, on-6)
amod(freedom-8, religious-7)
nmod:on(harped-5, freedom-8)
case(footage-10, over-9)
nmod:over(harped-5, footage-10)
case(Reagan-13, of-11)
compound(Reagan-13, Ronald-12)
nmod:of(footage-10, Reagan-13)
acl(footage-10, visiting-14)
det(church-17, an-15)
amod(church-17, orthodox-16)
dobj(visiting-14, church-17)
punct(stated-22, ,-18)
punct(stated-22, ``-19)
nsubj(stated-22, Vremya-20)
punct(stated-22, ''-21)
root(ROOT-0, stated-22)
mark(touched-27, that-23)
compound(Reagan-25, Mr.-24)
nsubj(touched-27, Reagan-25)
punct(touched-27, ``-26)
ccomp(stated-22, touched-27)
case(question-30, upon-28)
det(question-30, the-29)
nmod:upon(touched-27, question-30)
case(religion-32, of-31)
nmod:of(question-30, religion-32)
punct(stated-22, ,-33)
punct(stated-22, ''-34)
cc(stated-22, and-35)
det(deputy-37, a-36)
nsubj(responded-40, deputy-37)
case(charge-39, in-38)
nmod:in(deputy-37, charge-39)
conj:and(stated-22, responded-40)
punct(responded-40, ,-41)
punct(responded-40, ``-42)
det(issues-44, these-43)
dobj(responded-40, issues-44)
punct(responded-40, .-45)
punct(stated-22, .-46)
punct(stated-22, .-47)
aux(looked-4, are-1)
advmod(looked-4, now-2)
auxpass(looked-4, being-3)
root(ROOT-0, looked-4)
case(carefully-6, into-5)
nmod:into(looked-4, carefully-6)
punct(looked-4, .-7)
punct(looked-4, ''-8)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: touch#reagan

touch :: The thaw in U.S.-Soviet relations has touched many areas of Soviet life ./.
det(thaw-2, The-1)
nsubj(touched-7, thaw-2)
case(relations-5, in-3)
amod(relations-5, U.S.-Soviet-4)
nmod:in(thaw-2, relations-5)
aux(touched-7, has-6)
root(ROOT-0, touched-7)
amod(areas-9, many-8)
dobj(touched-7, areas-9)
case(life-12, of-10)
amod(life-12, Soviet-11)
nmod:of(areas-9, life-12)
punct(touched-7, .-13)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#life

touch :: At the Chicago seminar , a participant named Jackie says: `` I like to touch their arm and say their name ./.
case(seminar-4, At-1)
det(seminar-4, the-2)
compound(seminar-4, Chicago-3)
nmod:at(says-10, seminar-4)
punct(says-10, ,-5)
det(participant-7, a-6)
nsubj(says-10, participant-7)
acl(participant-7, named-8)
xcomp(named-8, Jackie-9)
root(ROOT-0, says-10)
punct(says-10, :-11)
punct(says-10, ``-12)
nsubj(like-14, I-13)
nsubj:xsubj(touch-16, I-13)
ccomp(says-10, like-14)
mark(touch-16, to-15)
xcomp(like-14, touch-16)
nmod:poss(arm-18, their-17)
dobj(touch-16, arm-18)
cc(touch-16, and-19)
xcomp(like-14, say-20)
conj:and(touch-16, say-20)
nmod:poss(name-22, their-21)
dobj(say-20, name-22)
punct(says-10, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#arm

touch :: While Graphic Technology 's labels must be touched by the hand-held computer , Telepanel 's labels need n't be ./.
mark(touched-8, While-1)
amod(Technology-3, Graphic-2)
nmod:poss(labels-5, Technology-3)
case(Technology-3, 's-4)
nsubjpass(touched-8, labels-5)
aux(touched-8, must-6)
auxpass(touched-8, be-7)
advcl(need-17, touched-8)
case(computer-12, by-9)
det(computer-12, the-10)
amod(computer-12, hand-held-11)
nmod:agent(touched-8, computer-12)
punct(need-17, ,-13)
nmod:poss(labels-16, Telepanel-14)
case(Telepanel-14, 's-15)
nsubj(need-17, labels-16)
root(ROOT-0, need-17)
neg(be-19, n't-18)
ccomp(need-17, be-19)
punct(need-17, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#labels

touch :: Most of the pressure on the currency came in overseas trading , where the dollar touched a six-year low against the pound ./.
nsubj(came-8, Most-1)
case(pressure-4, of-2)
det(pressure-4, the-3)
nmod:of(Most-1, pressure-4)
case(currency-7, on-5)
det(currency-7, the-6)
nmod:on(pressure-4, currency-7)
root(ROOT-0, came-8)
case(trading-11, in-9)
amod(trading-11, overseas-10)
nmod:in(came-8, trading-11)
punct(trading-11, ,-12)
advmod(touched-16, where-13)
det(dollar-15, the-14)
nsubj(touched-16, dollar-15)
acl:relcl(trading-11, touched-16)
det(low-19, a-17)
amod(low-19, six-year-18)
dobj(touched-16, low-19)
case(pound-22, against-20)
det(pound-22, the-21)
nmod:against(low-19, pound-22)
punct(came-8, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#low

touch :: The indictment touches only lightly on the role Israel played in helping shape the Iran initiative , apparently reflecting the difficulties that Mr. Walsh and his staff encountered in obtaining documents or testimony from the Israeli government ./.
det(indictment-2, The-1)
nsubj(touches-3, indictment-2)
root(ROOT-0, touches-3)
advmod(lightly-5, only-4)
advmod(touches-3, lightly-5)
case(role-8, on-6)
det(role-8, the-7)
nmod:on(touches-3, role-8)
nsubj(played-10, Israel-9)
acl:relcl(role-8, played-10)
mark(helping-12, in-11)
advcl(played-10, helping-12)
ccomp(helping-12, shape-13)
det(initiative-16, the-14)
compound(initiative-16, Iran-15)
dobj(shape-13, initiative-16)
punct(touches-3, ,-17)
advmod(reflecting-19, apparently-18)
advcl(touches-3, reflecting-19)
det(difficulties-21, the-20)
dobj(reflecting-19, difficulties-21)
dobj(encountered-28, difficulties-21)
ref(difficulties-21, that-22)
compound(Walsh-24, Mr.-23)
nsubj(encountered-28, Walsh-24)
cc(Walsh-24, and-25)
nmod:poss(staff-27, his-26)
conj:and(Walsh-24, staff-27)
nsubj(encountered-28, staff-27)
acl:relcl(difficulties-21, encountered-28)
mark(obtaining-30, in-29)
advcl(encountered-28, obtaining-30)
dobj(obtaining-30, documents-31)
cc(documents-31, or-32)
dobj(obtaining-30, testimony-33)
conj:or(documents-31, testimony-33)
case(government-37, from-34)
det(government-37, the-35)
amod(government-37, Israeli-36)
nmod:from(obtaining-30, government-37)
punct(touches-3, .-38)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#indictment

touch :: A sudden flush of buy or sell orders touched off by a single index-arbitrage program typically involves $ 25 million of trading -- and sometimes far more ./.
det(flush-3, A-1)
amod(flush-3, sudden-2)
nsubj(touched-9, flush-3)
case(orders-8, of-4)
compound(orders-8, buy-5)
cc(buy-5, or-6)
conj:or(buy-5, sell-7)
compound(orders-8, sell-7)
nmod:of(flush-3, orders-8)
root(ROOT-0, touched-9)
compound:prt(touched-9, off-10)
case(program-15, by-11)
det(program-15, a-12)
amod(program-15, single-13)
compound(program-15, index-arbitrage-14)
nmod:by(touched-9, program-15)
advmod(involves-17, typically-16)
dep(touched-9, involves-17)
dobj(involves-17, $-18)
compound(million-20, 25-19)
nummod($-18, million-20)
case(trading-22, of-21)
nmod:of($-18, trading-22)
punct(involves-17, ---23)
cc(involves-17, and-24)
advmod(more-27, sometimes-25)
advmod(more-27, far-26)
dep(touched-9, more-27)
conj:and(involves-17, more-27)
punct(touched-9, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#flush

touch :: As late as Wednesday night , jets carrying signatures were still touching down at the airport in Brasilia , and motorcades were flowing into town ./.
advmod(late-2, As-1)
advmod(touching-12, late-2)
case(night-5, as-3)
compound(night-5, Wednesday-4)
nmod:as(late-2, night-5)
punct(touching-12, ,-6)
nsubj(touching-12, jets-7)
acl(jets-7, carrying-8)
dobj(carrying-8, signatures-9)
aux(touching-12, were-10)
advmod(touching-12, still-11)
root(ROOT-0, touching-12)
compound:prt(touching-12, down-13)
case(airport-16, at-14)
det(airport-16, the-15)
nmod:at(touching-12, airport-16)
case(Brasilia-18, in-17)
nmod:in(touching-12, Brasilia-18)
punct(touching-12, ,-19)
cc(touching-12, and-20)
nsubj(flowing-23, motorcades-21)
aux(flowing-23, were-22)
conj:and(touching-12, flowing-23)
case(town-25, into-24)
nmod:into(flowing-23, town-25)
punct(touching-12, .-26)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#jets

touch :: The New York Stock Exchange composite index also touched a high since the crash but pulled back to close at 144.82 , up 0.28 but below its Oct. 21 level of 145.02 ./.
det(index-7, The-1)
compound(index-7, New-2)
compound(index-7, York-3)
compound(index-7, Stock-4)
compound(index-7, Exchange-5)
compound(index-7, composite-6)
nsubj(touched-9, index-7)
nsubj(pulled-16, index-7)
nsubj:xsubj(close-19, index-7)
advmod(touched-9, also-8)
root(ROOT-0, touched-9)
det(high-11, a-10)
dobj(touched-9, high-11)
case(crash-14, since-12)
det(crash-14, the-13)
nmod:since(touched-9, crash-14)
cc(touched-9, but-15)
conj:but(touched-9, pulled-16)
advmod(pulled-16, back-17)
mark(close-19, to-18)
xcomp(pulled-16, close-19)
case(144.82-21, at-20)
nmod:at(close-19, 144.82-21)
punct(close-19, ,-22)
case(0.28-24, up-23)
advmod(close-19, 0.28-24)
cc(0.28-24, but-25)
case(level-30, below-26)
nmod:poss(level-30, its-27)
compound(level-30, Oct.-28)
nummod(level-30, 21-29)
advmod(close-19, level-30)
conj:but(0.28-24, level-30)
case(145.02-32, of-31)
nmod:of(level-30, 145.02-32)
punct(touched-9, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#high

touch :: The U.S. military stood by its claims that intruders entered a fuel-storage area at a military base in Panama , touching off a two-hour firefight Tuesday night , but said it has uncovered no evidence so far to support the story ./.
det(military-3, The-1)
compound(military-3, U.S.-2)
nsubj(stood-4, military-3)
nsubj(said-30, military-3)
root(ROOT-0, stood-4)
case(claims-7, by-5)
nmod:poss(claims-7, its-6)
nmod:by(stood-4, claims-7)
mark(entered-10, that-8)
nsubj(entered-10, intruders-9)
ccomp(claims-7, entered-10)
det(area-13, a-11)
compound(area-13, fuel-storage-12)
dobj(entered-10, area-13)
case(base-17, at-14)
det(base-17, a-15)
amod(base-17, military-16)
nmod:at(entered-10, base-17)
case(Panama-19, in-18)
nmod:in(base-17, Panama-19)
punct(entered-10, ,-20)
advcl(entered-10, touching-21)
compound:prt(touching-21, off-22)
det(firefight-25, a-23)
amod(firefight-25, two-hour-24)
dobj(touching-21, firefight-25)
compound(night-27, Tuesday-26)
nmod:tmod(touching-21, night-27)
punct(stood-4, ,-28)
cc(stood-4, but-29)
conj:but(stood-4, said-30)
nsubj(uncovered-33, it-31)
aux(uncovered-33, has-32)
ccomp(said-30, uncovered-33)
neg(evidence-35, no-34)
dobj(uncovered-33, evidence-35)
advmod(far-37, so-36)
advmod(uncovered-33, far-37)
mark(support-39, to-38)
advcl(uncovered-33, support-39)
det(story-41, the-40)
dobj(support-39, story-41)
punct(stood-4, .-42)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#firefight

touch :: How Dillard tries to sell its wares will need some touching up , too ./.
advmod(tries-3, How-1)
nsubj(tries-3, Dillard-2)
nsubj:xsubj(sell-5, Dillard-2)
csubj(need-9, tries-3)
mark(sell-5, to-4)
xcomp(tries-3, sell-5)
nmod:poss(wares-7, its-6)
dobj(sell-5, wares-7)
aux(need-9, will-8)
root(ROOT-0, need-9)
nsubj(touching-11, some-10)
ccomp(need-9, touching-11)
compound:prt(touching-11, up-12)
punct(touching-11, ,-13)
advmod(touching-11, too-14)
punct(need-9, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#some

touch :: American , a unit of Fort Worth , Texas-based AMR Corp . , touched off the latest round of increases last week , when it proposed raising all discount fares except for so-called MaxSavers , the industry 's lowest fare level ./.
root(ROOT-0, American-1)
punct(American-1, ,-2)
det(unit-4, a-3)
appos(American-1, unit-4)
case(Worth-7, of-5)
compound(Worth-7, Fort-6)
nmod:of(unit-4, Worth-7)
punct(American-1, ,-8)
amod(Corp-11, Texas-based-9)
compound(Corp-11, AMR-10)
appos(American-1, Corp-11)
punct(American-1, .-12)
punct(touched-2, ,-1)
root(ROOT-0, touched-2)
compound:prt(touched-2, off-3)
det(round-6, the-4)
amod(round-6, latest-5)
dobj(touched-2, round-6)
case(increases-8, of-7)
nmod:of(round-6, increases-8)
amod(week-10, last-9)
nmod:tmod(level-29, week-10)
punct(level-29, ,-11)
advmod(proposed-14, when-12)
nsubj(proposed-14, it-13)
advcl(level-29, proposed-14)
xcomp(proposed-14, raising-15)
det(fares-18, all-16)
compound(fares-18, discount-17)
dobj(raising-15, fares-18)
case(MaxSavers-22, except-19)
mwe(except-19, for-20)
amod(MaxSavers-22, so-called-21)
nmod:except_for(raising-15, MaxSavers-22)
punct(level-29, ,-23)
det(industry-25, the-24)
nmod:poss(level-29, industry-25)
case(industry-25, 's-26)
amod(level-29, lowest-27)
compound(level-29, fare-28)
dep(touched-2, level-29)
punct(touched-2, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#increases

touch :: But the burglar did n't touch her coat , car stereo or Walkman radio ./.
cc(touch-6, But-1)
det(burglar-3, the-2)
nsubj(touch-6, burglar-3)
aux(touch-6, did-4)
neg(touch-6, n't-5)
root(ROOT-0, touch-6)
nmod:poss(coat-8, her-7)
dobj(touch-6, coat-8)
punct(coat-8, ,-9)
compound(stereo-11, car-10)
dobj(touch-6, stereo-11)
conj:or(coat-8, stereo-11)
cc(coat-8, or-12)
compound(radio-14, Walkman-13)
dobj(touch-6, radio-14)
conj:or(coat-8, radio-14)
punct(touch-6, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#coat

touch :: Mr. Groner touches down at the Orlando airport at 5:54 a.m . , and a dumpster-size container carrying our package is rolled onto a truck bound for a sorting center in Longwood , Fla ./.
compound(Groner-2, Mr.-1)
nsubj(touches-3, Groner-2)
root(ROOT-0, touches-3)
compound:prt(touches-3, down-4)
case(airport-8, at-5)
det(airport-8, the-6)
compound(airport-8, Orlando-7)
nmod:at(touches-3, airport-8)
case(5:54-10, at-9)
nmod:at(touches-3, 5:54-10)
advmod(5:54-10, a.m-11)
punct(touches-3, .-12)
punct(container-5, ,-1)
cc(container-5, and-2)
det(container-5, a-3)
amod(container-5, dumpster-size-4)
dep(rolled-10, container-5)
acl(container-5, carrying-6)
nmod:poss(package-8, our-7)
dobj(carrying-6, package-8)
auxpass(rolled-10, is-9)
root(ROOT-0, rolled-10)
case(truck-13, onto-11)
det(truck-13, a-12)
nmod:onto(rolled-10, truck-13)
acl(truck-13, bound-14)
case(center-18, for-15)
det(center-18, a-16)
amod(center-18, sorting-17)
nmod:for(bound-14, center-18)
case(Longwood-20, in-19)
nmod:in(center-18, Longwood-20)
punct(Longwood-20, ,-21)
appos(Longwood-20, Fla-22)
punct(rolled-10, .-23)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#groner

touch :: The New York Stock Exchange composite index also touched a high since the crash but pulled back to close at 144.82 , up 0.28 but below its Oct. 21 level of 145.02 ./.
det(index-7, The-1)
compound(index-7, New-2)
compound(index-7, York-3)
compound(index-7, Stock-4)
compound(index-7, Exchange-5)
compound(index-7, composite-6)
nsubj(touched-9, index-7)
nsubj(pulled-16, index-7)
nsubj:xsubj(close-19, index-7)
advmod(touched-9, also-8)
root(ROOT-0, touched-9)
det(high-11, a-10)
dobj(touched-9, high-11)
case(crash-14, since-12)
det(crash-14, the-13)
nmod:since(touched-9, crash-14)
cc(touched-9, but-15)
conj:but(touched-9, pulled-16)
advmod(pulled-16, back-17)
mark(close-19, to-18)
xcomp(pulled-16, close-19)
case(144.82-21, at-20)
nmod:at(close-19, 144.82-21)
punct(close-19, ,-22)
case(0.28-24, up-23)
advmod(close-19, 0.28-24)
cc(0.28-24, but-25)
case(level-30, below-26)
nmod:poss(level-30, its-27)
compound(level-30, Oct.-28)
nummod(level-30, 21-29)
advmod(close-19, level-30)
conj:but(0.28-24, level-30)
case(145.02-32, of-31)
nmod:of(level-30, 145.02-32)
punct(touched-9, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#high

touch :: For the superstitious , Ms. Frese explains , it 's supposed to ward off evil: Legend holds that witches ca n't touch it and survive ./.
case(superstitious-3, For-1)
det(superstitious-3, the-2)
nmod:for(explains-7, superstitious-3)
punct(explains-7, ,-4)
compound(Frese-6, Ms.-5)
nsubj(explains-7, Frese-6)
root(ROOT-0, explains-7)
punct(explains-7, ,-8)
nsubjpass(supposed-11, it-9)
nsubj:xsubj(ward-13, it-9)
auxpass(supposed-11, 's-10)
parataxis(explains-7, supposed-11)
mark(ward-13, to-12)
xcomp(supposed-11, ward-13)
compound:prt(ward-13, off-14)
dobj(ward-13, evil-15)
punct(explains-7, :-16)
nsubj(holds-18, Legend-17)
parataxis(explains-7, holds-18)
mark(touch-23, that-19)
nsubj(touch-23, witches-20)
nsubj(survive-26, witches-20)
aux(touch-23, ca-21)
neg(touch-23, n't-22)
ccomp(holds-18, touch-23)
dobj(touch-23, it-24)
cc(touch-23, and-25)
ccomp(holds-18, survive-26)
conj:and(touch-23, survive-26)
punct(explains-7, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#it

touch :: `` It is combined with a lot of information , and is visually well done -- although if you watched it ten times , you might laugh at all the hands touching . ''/''
root(ROOT-0, ``-1)
nsubjpass(combined-4, It-2)
nsubjpass(done-15, It-2)
auxpass(combined-4, is-3)
root(``-1, combined-4)
case(lot-7, with-5)
det(lot-7, a-6)
nmod:with(combined-4, lot-7)
case(information-9, of-8)
nmod:of(lot-7, information-9)
punct(combined-4, ,-10)
cc(combined-4, and-11)
auxpass(done-15, is-12)
advmod(done-15, visually-13)
advmod(done-15, well-14)
root(``-1, done-15)
conj:and(combined-4, done-15)
punct(done-15, ---16)
mark(laugh-27, although-17)
mark(watched-20, if-18)
nsubj(watched-20, you-19)
advcl(laugh-27, watched-20)
dobj(watched-20, it-21)
nummod(times-23, ten-22)
nmod:tmod(watched-20, times-23)
punct(laugh-27, ,-24)
nsubj(laugh-27, you-25)
aux(laugh-27, might-26)
advcl(done-15, laugh-27)
case(hands-31, at-28)
det:predet(hands-31, all-29)
det(hands-31, the-30)
nmod:at(laugh-27, hands-31)
acl(hands-31, touching-32)
punct(combined-4, .-33)
punct(combined-4, ''-34)
root(ROOT-0, /-1)
punct(/-1, ''-2)
No match found

touch :: Stones are laid close together , generally slanting inward , with each stone touching as many others as possible ./.
nsubjpass(laid-3, Stones-1)
auxpass(laid-3, are-2)
root(ROOT-0, laid-3)
advmod(together-5, close-4)
advmod(laid-3, together-5)
punct(laid-3, ,-6)
advmod(slanting-8, generally-7)
xcomp(laid-3, slanting-8)
advmod(slanting-8, inward-9)
punct(slanting-8, ,-10)
mark(touching-14, with-11)
det(stone-13, each-12)
nsubj(touching-14, stone-13)
advcl(slanting-8, touching-14)
case(others-17, as-15)
amod(others-17, many-16)
nmod:as(touching-14, others-17)
case(possible-19, as-18)
advcl(touching-14, possible-19)
punct(laid-3, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#stone

touch :: Even when men and women dance together , they never touch ./.
advmod(dance-6, Even-1)
advmod(dance-6, when-2)
nsubj(dance-6, men-3)
cc(men-3, and-4)
conj:and(men-3, women-5)
nsubj(dance-6, women-5)
advcl(touch-11, dance-6)
advmod(dance-6, together-7)
punct(touch-11, ,-8)
nsubj(touch-11, they-9)
neg(touch-11, never-10)
root(ROOT-0, touch-11)
punct(touch-11, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#they

touch :: Indeed , one imagines her taking almost malicious pleasure in her cleverness at assigning Ms. Oppens to play harpsichord , an instrument she had barely touched before , in the `` Concerto for harpsichord , flute , oboe , clarinet , violin and cello '' that Manuel de Falla wrote for Wanda Landowska in 1923 ./.
advmod(imagines-4, Indeed-1)
punct(imagines-4, ,-2)
nsubj(imagines-4, one-3)
root(ROOT-0, imagines-4)
nmod:poss(taking-6, her-5)
dobj(imagines-4, taking-6)
advmod(malicious-8, almost-7)
amod(pleasure-9, malicious-8)
dobj(taking-6, pleasure-9)
case(cleverness-12, in-10)
nmod:poss(cleverness-12, her-11)
nmod:in(taking-6, cleverness-12)
mark(assigning-14, at-13)
acl(taking-6, assigning-14)
compound(Oppens-16, Ms.-15)
dobj(assigning-14, Oppens-16)
nsubj:xsubj(play-18, Oppens-16)
mark(play-18, to-17)
xcomp(assigning-14, play-18)
dobj(play-18, harpsichord-19)
punct(harpsichord-19, ,-20)
det(instrument-22, an-21)
appos(harpsichord-19, instrument-22)
nsubj(touched-26, she-23)
aux(touched-26, had-24)
advmod(touched-26, barely-25)
acl:relcl(instrument-22, touched-26)
advmod(touched-26, before-27)
punct(harpsichord-19, ,-28)
case(Concerto-32, in-29)
det(Concerto-32, the-30)
punct(Concerto-32, ``-31)
nmod:in(play-18, Concerto-32)
dobj(wrote-50, Concerto-32)
case(harpsichord-34, for-33)
nmod:for(Concerto-32, harpsichord-34)
punct(harpsichord-34, ,-35)
nmod:for(Concerto-32, flute-36)
conj:and(harpsichord-34, flute-36)
punct(harpsichord-34, ,-37)
nmod:for(Concerto-32, oboe-38)
conj:and(harpsichord-34, oboe-38)
punct(harpsichord-34, ,-39)
nmod:for(Concerto-32, clarinet-40)
conj:and(harpsichord-34, clarinet-40)
punct(harpsichord-34, ,-41)
nmod:for(Concerto-32, violin-42)
conj:and(harpsichord-34, violin-42)
cc(harpsichord-34, and-43)
nmod:for(Concerto-32, cello-44)
conj:and(harpsichord-34, cello-44)
punct(Concerto-32, ''-45)
ref(Concerto-32, that-46)
compound(Falla-49, Manuel-47)
amod(Falla-49, de-48)
nsubj(wrote-50, Falla-49)
acl:relcl(Concerto-32, wrote-50)
case(Landowska-53, for-51)
compound(Landowska-53, Wanda-52)
nmod:for(wrote-50, Landowska-53)
case(1923-55, in-54)
nmod:in(wrote-50, 1923-55)
punct(imagines-4, .-56)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#she

touch :: If one of the wheels comes off the chariot and the center wheel must touch down , the nation will see a man to the left of Walter Mondale , far to the left of Jimmy Carter , and not too far to the right of George McGovern ./.
mark(comes-6, If-1)
nsubj(comes-6, one-2)
case(wheels-5, of-3)
det(wheels-5, the-4)
nmod:of(one-2, wheels-5)
advcl(see-21, comes-6)
compound:prt(comes-6, off-7)
det(chariot-9, the-8)
nsubj(touch-15, chariot-9)
cc(chariot-9, and-10)
det(wheel-13, the-11)
compound(wheel-13, center-12)
conj:and(chariot-9, wheel-13)
nsubj(touch-15, wheel-13)
aux(touch-15, must-14)
ccomp(comes-6, touch-15)
compound:prt(touch-15, down-16)
punct(see-21, ,-17)
det(nation-19, the-18)
nsubj(see-21, nation-19)
aux(see-21, will-20)
root(ROOT-0, see-21)
det(man-23, a-22)
dobj(see-21, man-23)
case(left-26, to-24)
det(left-26, the-25)
nmod:to(man-23, left-26)
case(Mondale-29, of-27)
compound(Mondale-29, Walter-28)
nmod:of(left-26, Mondale-29)
punct(man-23, ,-30)
advmod(left-34, far-31)
case(left-34, to-32)
det(left-34, the-33)
dobj(see-21, left-34)
conj:and(man-23, left-34)
case(Carter-37, of-35)
compound(Carter-37, Jimmy-36)
nmod:of(left-34, Carter-37)
punct(man-23, ,-38)
cc(man-23, and-39)
neg(far-42, not-40)
advmod(far-42, too-41)
dobj(see-21, far-42)
conj:and(man-23, far-42)
case(right-45, to-43)
det(right-45, the-44)
nmod:to(far-42, right-45)
case(McGovern-48, of-46)
compound(McGovern-48, George-47)
nmod:of(right-45, McGovern-48)
punct(see-21, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#chariot

touch :: A player could n't let the knees touch the ground , for two reasons -- one a matter of protocol , the other practical ./.
det(player-2, A-1)
nsubj(let-5, player-2)
aux(let-5, could-3)
neg(let-5, n't-4)
root(ROOT-0, let-5)
det(knees-7, the-6)
nsubj(touch-8, knees-7)
ccomp(let-5, touch-8)
det(ground-10, the-9)
dobj(touch-8, ground-10)
punct(touch-8, ,-11)
case(reasons-14, for-12)
nummod(reasons-14, two-13)
nmod:for(touch-8, reasons-14)
punct(reasons-14, ---15)
nummod(matter-18, one-16)
det(matter-18, a-17)
dep(reasons-14, matter-18)
case(protocol-20, of-19)
nmod:of(matter-18, protocol-20)
punct(matter-18, ,-21)
det(practical-24, the-22)
amod(practical-24, other-23)
appos(matter-18, practical-24)
punct(let-5, .-25)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#ground

touch :: To find out the time , a user simply touches a button and the screen displays the time and date ./.
mark(find-2, To-1)
advcl(touches-10, find-2)
compound:prt(find-2, out-3)
det(time-5, the-4)
dobj(find-2, time-5)
punct(touches-10, ,-6)
det(user-8, a-7)
nsubj(touches-10, user-8)
advmod(touches-10, simply-9)
root(ROOT-0, touches-10)
det(button-12, a-11)
nsubj(displays-16, button-12)
cc(button-12, and-13)
det(screen-15, the-14)
conj:and(button-12, screen-15)
nsubj(displays-16, screen-15)
ccomp(touches-10, displays-16)
det(time-18, the-17)
dobj(displays-16, time-18)
cc(time-18, and-19)
dobj(displays-16, date-20)
conj:and(time-18, date-20)
punct(touches-10, .-21)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#user

touch :: Now when a NATO ship touches the land between the Baltic and North seas , Denmark will notify the ship 's embassy the visit must `` take place in agreement with the rules laid down by the Danish government . ''/''
advmod(notify-18, Now-1)
advmod(touches-6, when-2)
det(ship-5, a-3)
compound(ship-5, NATO-4)
nsubj(touches-6, ship-5)
advcl(notify-18, touches-6)
det(land-8, the-7)
dobj(touches-6, land-8)
case(seas-14, between-9)
det(seas-14, the-10)
amod(seas-14, Baltic-11)
cc(Baltic-11, and-12)
conj:and(Baltic-11, North-13)
amod(seas-14, North-13)
nmod:between(land-8, seas-14)
punct(notify-18, ,-15)
nsubj(notify-18, Denmark-16)
aux(notify-18, will-17)
root(ROOT-0, notify-18)
det(ship-20, the-19)
nmod:poss(embassy-22, ship-20)
case(ship-20, 's-21)
iobj(notify-18, embassy-22)
det(visit-24, the-23)
nsubj(take-27, visit-24)
aux(take-27, must-25)
punct(take-27, ``-26)
ccomp(notify-18, take-27)
dobj(take-27, place-28)
case(agreement-30, in-29)
nmod:in(take-27, agreement-30)
case(rules-33, with-31)
det(rules-33, the-32)
nmod:with(agreement-30, rules-33)
acl(rules-33, laid-34)
compound:prt(laid-34, down-35)
case(government-39, by-36)
det(government-39, the-37)
amod(government-39, Danish-38)
nmod:by(laid-34, government-39)
punct(notify-18, .-40)
punct(notify-18, ''-41)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: touch#land

touch :: Of course , none or only some of the rules apply to Utah 's private clubs -LRB- open to out-of-towners at a $ 5 fee -RRB- and beer bars , which sell setups and uncork wine but ca n't touch the liquor that you are free to bring in ./.
case(course-2, Of-1)
nmod:of(apply-11, course-2)
punct(apply-11, ,-3)
nsubj(apply-11, none-4)
cc(none-4, or-5)
advmod(some-7, only-6)
conj:or(none-4, some-7)
nsubj(apply-11, some-7)
case(rules-10, of-8)
det(rules-10, the-9)
nmod:of(some-7, rules-10)
root(ROOT-0, apply-11)
case(clubs-16, to-12)
nmod:poss(clubs-16, Utah-13)
case(Utah-13, 's-14)
amod(clubs-16, private-15)
nmod:to(apply-11, clubs-16)
punct(open-18, -LRB--17)
dep(clubs-16, open-18)
case(out-of-towners-20, to-19)
nmod:to(open-18, out-of-towners-20)
case(fee-25, at-21)
det(fee-25, a-22)
amod(fee-25, $-23)
compound($-23, 5-24)
nmod:at(open-18, fee-25)
punct(open-18, -RRB--26)
cc(clubs-16, and-27)
compound(bars-29, beer-28)
nmod:to(apply-11, bars-29)
conj:and(clubs-16, bars-29)
nsubj(sell-32, bars-29)
nsubj(uncork-35, bars-29)
nsubj(touch-40, bars-29)
punct(bars-29, ,-30)
ref(bars-29, which-31)
acl:relcl(bars-29, sell-32)
dobj(sell-32, setups-33)
cc(sell-32, and-34)
acl:relcl(bars-29, uncork-35)
conj:and(sell-32, uncork-35)
dobj(uncork-35, wine-36)
cc(sell-32, but-37)
aux(touch-40, ca-38)
neg(touch-40, n't-39)
acl:relcl(bars-29, touch-40)
conj:but(sell-32, touch-40)
det(liquor-42, the-41)
dobj(touch-40, liquor-42)
mark(free-46, that-43)
nsubj(free-46, you-44)
nsubj:xsubj(bring-48, you-44)
cop(free-46, are-45)
ccomp(liquor-42, free-46)
mark(bring-48, to-47)
xcomp(free-46, bring-48)
compound:prt(bring-48, in-49)
punct(apply-11, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: touch#liquor

vaporize :: One look at her pudgy face , shot to make her seem like a powder-brained Kewpie doll , vaporizes whatever credibility Jamie 's anguish might have had ./.
nummod(look-2, One-1)
root(ROOT-0, look-2)
case(face-6, at-3)
nmod:poss(face-6, her-4)
amod(face-6, pudgy-5)
nmod:at(look-2, face-6)
punct(look-2, ,-7)
acl(look-2, shot-8)
mark(make-10, to-9)
xcomp(shot-8, make-10)
nsubj(seem-12, her-11)
ccomp(make-10, seem-12)
case(doll-17, like-13)
det(doll-17, a-14)
amod(doll-17, powder-brained-15)
compound(doll-17, Kewpie-16)
nmod:like(seem-12, doll-17)
punct(seem-12, ,-18)
xcomp(seem-12, vaporizes-19)
dobj(had-27, whatever-20)
compound(Jamie-22, credibility-21)
nmod:poss(anguish-24, Jamie-22)
case(Jamie-22, 's-23)
nsubj(had-27, anguish-24)
aux(had-27, might-25)
aux(had-27, have-26)
ccomp(vaporizes-19, had-27)
punct(look-2, .-28)
root(ROOT-0, /-1)
punct(/-1, .-2)
No match found

vaporize :: A `` guide to business technique , '' yes ; the `` autobiography '' of a tycoon , sure ; a volume of `` management tips , '' you bet ; but to hear the publishing world tell it , the vulgar GRQ book is a thing of the past , having vaporized like those screwy financial schemes cooked up by the likes of Ralph Kramden and Ed Norton ./.
det(guide-3, A-1)
punct(guide-3, ``-2)
root(ROOT-0, guide-3)
case(technique-6, to-4)
compound(technique-6, business-5)
nmod:to(guide-3, technique-6)
punct(guide-3, ,-7)
punct(guide-3, ''-8)
advmod(guide-3, yes-9)
punct(guide-3, ;-10)
det(autobiography-13, the-11)
punct(autobiography-13, ``-12)
dep(guide-3, autobiography-13)
punct(autobiography-13, ''-14)
case(tycoon-17, of-15)
det(tycoon-17, a-16)
nmod:of(autobiography-13, tycoon-17)
punct(autobiography-13, ,-18)
amod(autobiography-13, sure-19)
punct(guide-3, ;-20)
det(volume-22, a-21)
dep(guide-3, volume-22)
case(tips-26, of-23)
punct(tips-26, ``-24)
compound(tips-26, management-25)
nmod:of(volume-22, tips-26)
punct(tips-26, ,-27)
punct(tips-26, ''-28)
nsubj(bet-30, you-29)
dep(tips-26, bet-30)
punct(guide-3, ;-31)
cc(guide-3, but-32)
mark(hear-34, to-33)
conj:but(guide-3, hear-34)
det(world-37, the-35)
compound(world-37, publishing-36)
dobj(hear-34, world-37)
dep(hear-34, tell-38)
dobj(tell-38, it-39)
punct(hear-34, ,-40)
det(book-44, the-41)
amod(book-44, vulgar-42)
compound(book-44, GRQ-43)
nsubj(thing-47, book-44)
cop(thing-47, is-45)
det(thing-47, a-46)
parataxis(hear-34, thing-47)
case(past-50, of-48)
det(past-50, the-49)
nmod:of(thing-47, past-50)
punct(hear-34, ,-51)
aux(vaporized-53, having-52)
advcl(hear-34, vaporized-53)
case(schemes-58, like-54)
det(schemes-58, those-55)
amod(schemes-58, screwy-56)
amod(schemes-58, financial-57)
nmod:like(vaporized-53, schemes-58)
acl(schemes-58, cooked-59)
compound:prt(cooked-59, up-60)
case(likes-63, by-61)
det(likes-63, the-62)
nmod:by(cooked-59, likes-63)
case(Kramden-66, of-64)
compound(Kramden-66, Ralph-65)
nmod:of(likes-63, Kramden-66)
cc(Kramden-66, and-67)
compound(Norton-69, Ed-68)
nmod:of(likes-63, Norton-69)
conj:and(Kramden-66, Norton-69)
punct(guide-3, .-70)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: vaporize#schemes

vaporize :: The poison , mostly vaporized in the heat , pushed past a relief valve , through the pipelines and out the vent tower ./.
det(poison-2, The-1)
nsubj(pushed-10, poison-2)
nsubj(pushed-10', poison-2)
punct(poison-2, ,-3)
advmod(vaporized-5, mostly-4)
acl(poison-2, vaporized-5)
case(heat-8, in-6)
det(heat-8, the-7)
nmod:in(vaporized-5, heat-8)
punct(poison-2, ,-9)
root(ROOT-0, pushed-10)
conj:and(pushed-10, pushed-10')
case(valve-14, past-11)
det(valve-14, a-12)
compound(valve-14, relief-13)
nmod:past(pushed-10, valve-14)
punct(pushed-10, ,-15)
case(pipelines-18, through-16)
det(pipelines-18, the-17)
nmod:through(pushed-10, pipelines-18)
cc(pushed-10, and-19)
case(tower-23, out-20)
det(tower-23, the-21)
amod(tower-23, vent-22)
nmod:out(pushed-10', tower-23)
punct(pushed-10, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: vaporize#heat

vaporize :: First , there will be `` the last warning , '' a Hiroshima-size nuclear shot , or bigger , to vaporize part of the advancing armor ./.
advmod(warning-9, First-1)
punct(warning-9, ,-2)
expl(warning-9, there-3)
aux(warning-9, will-4)
cop(warning-9, be-5)
punct(warning-9, ``-6)
det(warning-9, the-7)
amod(warning-9, last-8)
root(ROOT-0, warning-9)
punct(warning-9, ,-10)
root(,-10, ''-11)
det(shot-15, a-12)
amod(shot-15, Hiroshima-size-13)
amod(shot-15, nuclear-14)
root(''-11, shot-15)
punct(shot-15, ,-16)
cc(shot-15, or-17)
root(''-11, bigger-18)
conj:or(shot-15, bigger-18)
punct(shot-15, ,-19)
mark(vaporize-21, to-20)
acl(shot-15, vaporize-21)
dobj(vaporize-21, part-22)
case(armor-26, of-23)
det(armor-26, the-24)
amod(armor-26, advancing-25)
nmod:of(part-22, armor-26)
punct(shot-15, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: vaporize#armor

vaporize :: `` He said that if everyone who had a gun to his head pulled the trigger at the same time , he would vaporize , '' recalls one meeting participant ./.
punct(said-3, ``-1)
nsubj(said-3, He-2)
dep(recalls-27, said-3)
mark(vaporize-24, that-4)
mark(pulled-14, if-5)
nsubj(had-8, everyone-6)
nsubj(pulled-14, everyone-6)
ref(everyone-6, who-7)
acl:relcl(everyone-6, had-8)
det(gun-10, a-9)
dobj(had-8, gun-10)
case(head-13, to-11)
nmod:poss(head-13, his-12)
nmod:to(gun-10, head-13)
advcl(vaporize-24, pulled-14)
det(trigger-16, the-15)
dobj(pulled-14, trigger-16)
case(time-20, at-17)
det(time-20, the-18)
amod(time-20, same-19)
nmod:at(pulled-14, time-20)
punct(vaporize-24, ,-21)
nsubj(vaporize-24, he-22)
aux(vaporize-24, would-23)
ccomp(said-3, vaporize-24)
punct(vaporize-24, ,-25)
punct(vaporize-24, ''-26)
root(ROOT-0, recalls-27)
nummod(participant-30, one-28)
compound(participant-30, meeting-29)
nsubj(recalls-27, participant-30)
punct(recalls-27, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: vaporize#he

vaporize :: But the Baylor Research Foundation in Dallas soon will unveil a technique for using this versatile laser to vaporize tumors without hurting the surrounding healthy cells ./.
cc(unveil-10, But-1)
det(Foundation-5, the-2)
compound(Foundation-5, Baylor-3)
compound(Foundation-5, Research-4)
nsubj(unveil-10, Foundation-5)
case(Dallas-7, in-6)
nmod:in(Foundation-5, Dallas-7)
advmod(unveil-10, soon-8)
aux(unveil-10, will-9)
root(ROOT-0, unveil-10)
det(technique-12, a-11)
dobj(unveil-10, technique-12)
mark(using-14, for-13)
acl(technique-12, using-14)
det(laser-17, this-15)
amod(laser-17, versatile-16)
dobj(using-14, laser-17)
mark(vaporize-19, to-18)
advcl(using-14, vaporize-19)
dobj(vaporize-19, tumors-20)
mark(hurting-22, without-21)
advcl(vaporize-19, hurting-22)
det(cells-26, the-23)
amod(cells-26, surrounding-24)
amod(cells-26, healthy-25)
dobj(hurting-22, cells-26)
punct(unveil-10, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: vaporize#tumors

vaporize :: In one spectacular 508-point swan dive Oct. 19 , the industrial average crashed back to the level it first surpassed in March 1986 , vaporizing the stunning advances of the intervening months -- along with many investors ' paper profits ./.
case(dive-6, In-1)
nummod(dive-6, one-2)
amod(dive-6, spectacular-3)
amod(dive-6, 508-point-4)
compound(dive-6, swan-5)
root(ROOT-0, dive-6)
nmod:tmod(dive-6, Oct.-7)
nummod(Oct.-7, 19-8)
punct(Oct.-7, ,-9)
det(average-12, the-10)
amod(average-12, industrial-11)
nsubj(crashed-13, average-12)
acl:relcl(Oct.-7, crashed-13)
advmod(crashed-13, back-14)
case(level-17, to-15)
det(level-17, the-16)
nmod:to(back-14, level-17)
nsubj(surpassed-20, it-18)
advmod(surpassed-20, first-19)
acl:relcl(level-17, surpassed-20)
case(March-22, in-21)
nmod:in(surpassed-20, March-22)
nummod(March-22, 1986-23)
punct(Oct.-7, ,-24)
acl(Oct.-7, vaporizing-25)
det(advances-28, the-26)
amod(advances-28, stunning-27)
dobj(vaporizing-25, advances-28)
case(months-32, of-29)
det(months-32, the-30)
amod(months-32, intervening-31)
nmod:of(advances-28, months-32)
punct(profits-40, ---33)
case(profits-40, along-34)
mwe(along-34, with-35)
amod(investors-37, many-36)
nmod:poss(profits-40, investors-37)
case(investors-37, '-38)
compound(profits-40, paper-39)
nmod:along_with(advances-28, profits-40)
punct(dive-6, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: vaporize#advances

wither :: That means just patching their patches , like some farmer making do with a secondhand tractor , until they wither away ./.
nsubj(means-2, That-1)
root(ROOT-0, means-2)
advmod(patching-4, just-3)
ccomp(means-2, patching-4)
nmod:poss(patches-6, their-5)
dobj(patching-4, patches-6)
punct(patching-4, ,-7)
case(farmer-10, like-8)
det(farmer-10, some-9)
nmod:like(patching-4, farmer-10)
acl(farmer-10, making-11)
dobj(making-11, do-12)
case(tractor-16, with-13)
det(tractor-16, a-14)
amod(tractor-16, secondhand-15)
nmod:with(do-12, tractor-16)
punct(patching-4, ,-17)
mark(wither-20, until-18)
nsubj(wither-20, they-19)
advcl(patching-4, wither-20)
advmod(wither-20, away-21)
punct(means-2, .-22)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#they

wither :: Some disheartened resistance commanders , after exhausting their stockpiles , strike private peace deals with Afghan leader Najibullah in exchange for control of minor fiefdoms ; other rebel leaders wither away ./.
det(commanders-4, Some-1)
amod(commanders-4, disheartened-2)
compound(commanders-4, resistance-3)
root(ROOT-0, commanders-4)
punct(commanders-4, ,-5)
mark(exhausting-7, after-6)
root(,-5, exhausting-7)
nmod:poss(stockpiles-9, their-8)
dobj(exhausting-7, stockpiles-9)
punct(exhausting-7, ,-10)
compound(deals-14, strike-11)
amod(deals-14, private-12)
compound(deals-14, peace-13)
root(,-10, deals-14)
case(Najibullah-18, with-15)
compound(Najibullah-18, Afghan-16)
compound(Najibullah-18, leader-17)
nmod:with(deals-14, Najibullah-18)
case(exchange-20, in-19)
nmod:in(deals-14, exchange-20)
case(control-22, for-21)
nmod:for(exchange-20, control-22)
case(fiefdoms-25, of-23)
amod(fiefdoms-25, minor-24)
nmod:of(control-22, fiefdoms-25)
punct(deals-14, ;-26)
amod(leaders-29, other-27)
compound(leaders-29, rebel-28)
nsubj(wither-30, leaders-29)
parataxis(deals-14, wither-30)
advmod(wither-30, away-31)
punct(deals-14, .-32)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#leaders

wither :: It is that whatever tendencies any of them might have to talk turkey to the voters is withered by the clear evidence that the voters are not yet ready to hear it ./.
nsubj(is-2, It-1)
csubjpass(withered-18, is-2)
mark(have-10, that-3)
det(tendencies-5, whatever-4)
dobj(have-10, tendencies-5)
nsubj:xsubj(talk-12, tendencies-5)
nsubj(have-10, any-6)
case(them-8, of-7)
nmod:of(any-6, them-8)
aux(have-10, might-9)
ccomp(is-2, have-10)
mark(talk-12, to-11)
xcomp(have-10, talk-12)
dobj(talk-12, turkey-13)
case(voters-16, to-14)
det(voters-16, the-15)
nmod:to(talk-12, voters-16)
auxpass(withered-18, is-17)
root(ROOT-0, withered-18)
case(evidence-22, by-19)
det(evidence-22, the-20)
amod(evidence-22, clear-21)
nmod:agent(withered-18, evidence-22)
mark(ready-29, that-23)
det(voters-25, the-24)
nsubj(ready-29, voters-25)
nsubj:xsubj(hear-31, voters-25)
cop(ready-29, are-26)
neg(ready-29, not-27)
advmod(ready-29, yet-28)
ccomp(evidence-22, ready-29)
mark(hear-31, to-30)
xcomp(ready-29, hear-31)
dobj(hear-31, it-32)
punct(withered-18, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#is

wither :: It is that whatever tendencies any of them might have to talk turkey to the voters is withered by the clear evidence that the voters are not yet ready to hear it ./.
nsubj(is-2, It-1)
csubjpass(withered-18, is-2)
mark(have-10, that-3)
det(tendencies-5, whatever-4)
dobj(have-10, tendencies-5)
nsubj:xsubj(talk-12, tendencies-5)
nsubj(have-10, any-6)
case(them-8, of-7)
nmod:of(any-6, them-8)
aux(have-10, might-9)
ccomp(is-2, have-10)
mark(talk-12, to-11)
xcomp(have-10, talk-12)
dobj(talk-12, turkey-13)
case(voters-16, to-14)
det(voters-16, the-15)
nmod:to(talk-12, voters-16)
auxpass(withered-18, is-17)
root(ROOT-0, withered-18)
case(evidence-22, by-19)
det(evidence-22, the-20)
amod(evidence-22, clear-21)
nmod:agent(withered-18, evidence-22)
mark(ready-29, that-23)
det(voters-25, the-24)
nsubj(ready-29, voters-25)
nsubj:xsubj(hear-31, voters-25)
cop(ready-29, are-26)
neg(ready-29, not-27)
advmod(ready-29, yet-28)
ccomp(evidence-22, ready-29)
mark(hear-31, to-30)
xcomp(ready-29, hear-31)
dobj(hear-31, it-32)
punct(withered-18, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#is

wither :: Love shrank and withered , and all that remained was a quickening of the pulse , a rise in blood pressure and stomach contractions chasing each other in a horrible loneliness ; the loneliness of the wave absorbed by the sand , which never returns to the sea ./.
nsubj(shrank-2, Love-1)
nsubj(withered-4, Love-1)
root(ROOT-0, shrank-2)
cc(shrank-2, and-3)
conj:and(shrank-2, withered-4)
punct(shrank-2, ,-5)
cc(shrank-2, and-6)
nsubj(remained-9, all-7)
nsubj(quickening-12, all-7)
ref(all-7, that-8)
acl:relcl(all-7, remained-9)
cop(quickening-12, was-10)
det(quickening-12, a-11)
conj:and(shrank-2, quickening-12)
case(pulse-15, of-13)
det(pulse-15, the-14)
nmod:of(quickening-12, pulse-15)
punct(quickening-12, ,-16)
det(rise-18, a-17)
dobj(quickening-12, rise-18)
case(pressure-21, in-19)
compound(pressure-21, blood-20)
nmod:in(rise-18, pressure-21)
cc(pressure-21, and-22)
compound(contractions-24, stomach-23)
nmod:in(rise-18, contractions-24)
conj:and(pressure-21, contractions-24)
acl(rise-18, chasing-25)
det(other-27, each-26)
dobj(chasing-25, other-27)
case(loneliness-31, in-28)
det(loneliness-31, a-29)
amod(loneliness-31, horrible-30)
nmod:in(chasing-25, loneliness-31)
punct(shrank-2, ;-32)
det(loneliness-34, the-33)
dep(shrank-2, loneliness-34)
case(wave-37, of-35)
det(wave-37, the-36)
nmod:of(loneliness-34, wave-37)
acl(wave-37, absorbed-38)
case(sand-41, by-39)
det(sand-41, the-40)
nmod:by(absorbed-38, sand-41)
nsubj(returns-45, sand-41)
punct(sand-41, ,-42)
ref(sand-41, which-43)
neg(returns-45, never-44)
acl:relcl(sand-41, returns-45)
case(sea-48, to-46)
det(sea-48, the-47)
nmod:to(returns-45, sea-48)
punct(shrank-2, .-49)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#love

wither :: Because of crop failure , farmers are expected to abandon 14 million acres this fall , considerably more than they wrote off in 1986 , when drought withered crops in the South ./.
case(failure-4, Because-1)
mwe(Because-1, of-2)
compound(failure-4, crop-3)
nmod:because_of(expected-8, failure-4)
punct(expected-8, ,-5)
nsubjpass(expected-8, farmers-6)
nsubj:xsubj(abandon-10, farmers-6)
auxpass(expected-8, are-7)
root(ROOT-0, expected-8)
mark(abandon-10, to-9)
xcomp(expected-8, abandon-10)
compound(million-12, 14-11)
nummod(acres-13, million-12)
dobj(abandon-10, acres-13)
det(fall-15, this-14)
nmod:tmod(abandon-10, fall-15)
punct(abandon-10, ,-16)
advmod(more-18, considerably-17)
advmod(abandon-10, more-18)
mark(wrote-21, than-19)
nsubj(wrote-21, they-20)
advcl(more-18, wrote-21)
compound:prt(wrote-21, off-22)
case(1986-24, in-23)
nmod:in(wrote-21, 1986-24)
punct(1986-24, ,-25)
advmod(withered-28, when-26)
nsubj(withered-28, drought-27)
acl:relcl(1986-24, withered-28)
dobj(withered-28, crops-29)
case(South-32, in-30)
det(South-32, the-31)
nmod:in(withered-28, South-32)
punct(expected-8, .-33)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#crops

wither :: Southeastern poultry producers fear withering soybean supplies will force up prices on other commodities ./.
amod(producers-3, Southeastern-1)
compound(producers-3, poultry-2)
nsubj(fear-4, producers-3)
root(ROOT-0, fear-4)
csubj(force-9, withering-5)
compound(supplies-7, soybean-6)
dobj(withering-5, supplies-7)
aux(force-9, will-8)
ccomp(fear-4, force-9)
compound:prt(force-9, up-10)
dobj(force-9, prices-11)
case(commodities-14, on-12)
amod(commodities-14, other-13)
nmod:on(prices-11, commodities-14)
punct(fear-4, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#supplies

wither :: The debate for the rematch was so withering that Nissan Motor Co. used a news clip of Mr. Tucker 's criticisms in its bid to keep the UAW out of its Tennessee plant ./.
det(debate-2, The-1)
nsubj(withering-8, debate-2)
case(rematch-5, for-3)
det(rematch-5, the-4)
nmod:for(debate-2, rematch-5)
cop(withering-8, was-6)
advmod(withering-8, so-7)
root(ROOT-0, withering-8)
mark(used-13, that-9)
compound(Co.-12, Nissan-10)
compound(Co.-12, Motor-11)
nsubj(used-13, Co.-12)
ccomp(withering-8, used-13)
det(clip-16, a-14)
compound(clip-16, news-15)
dobj(used-13, clip-16)
case(criticisms-21, of-17)
compound(Tucker-19, Mr.-18)
nmod:poss(criticisms-21, Tucker-19)
case(Tucker-19, 's-20)
nmod:of(clip-16, criticisms-21)
case(bid-24, in-22)
nmod:poss(bid-24, its-23)
nmod:in(used-13, bid-24)
mark(keep-26, to-25)
acl(bid-24, keep-26)
det(UAW-28, the-27)
dobj(keep-26, UAW-28)
case(plant-33, out-29)
mwe(out-29, of-30)
nmod:poss(plant-33, its-31)
compound(plant-33, Tennessee-32)
nmod:out_of(keep-26, plant-33)
punct(withering-8, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#debate

wither :: Mr. Galvin 's interest in the condo subsequently withered ./.
compound(Galvin-2, Mr.-1)
nmod:poss(interest-4, Galvin-2)
case(Galvin-2, 's-3)
nsubj(withered-9, interest-4)
case(condo-7, in-5)
det(condo-7, the-6)
nmod:in(interest-4, condo-7)
advmod(withered-9, subsequently-8)
root(ROOT-0, withered-9)
punct(withered-9, .-10)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#interest

wither :: Since spring , foreign sales had withered as the drought pushed U.S. grain prices even further above world rates ./.
case(spring-2, Since-1)
nmod:since(withered-7, spring-2)
punct(withered-7, ,-3)
amod(sales-5, foreign-4)
nsubj(withered-7, sales-5)
aux(withered-7, had-6)
root(ROOT-0, withered-7)
mark(pushed-11, as-8)
det(drought-10, the-9)
nsubj(pushed-11, drought-10)
advcl(withered-7, pushed-11)
compound(prices-14, U.S.-12)
compound(prices-14, grain-13)
dobj(pushed-11, prices-14)
advmod(further-16, even-15)
advmod(rates-19, further-16)
case(rates-19, above-17)
compound(rates-19, world-18)
nmod:above(pushed-11, rates-19)
punct(withered-7, .-20)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#sales

wither :: In 1962 , when a fierce drought withered even the thorn trees , he sold his emaciated camels and moved , along with many others , to Tamanrasset ./.
case(1962-2, In-1)
nmod:in(sold-15, 1962-2)
punct(sold-15, ,-3)
advmod(withered-8, when-4)
det(drought-7, a-5)
amod(drought-7, fierce-6)
nsubj(withered-8, drought-7)
advcl(sold-15, withered-8)
advmod(trees-12, even-9)
det(trees-12, the-10)
compound(trees-12, thorn-11)
dobj(withered-8, trees-12)
punct(sold-15, ,-13)
nsubj(sold-15, he-14)
nsubj(moved-20, he-14)
root(ROOT-0, sold-15)
nmod:poss(camels-18, his-16)
amod(camels-18, emaciated-17)
dobj(sold-15, camels-18)
cc(sold-15, and-19)
conj:and(sold-15, moved-20)
punct(moved-20, ,-21)
case(others-25, along-22)
mwe(along-22, with-23)
amod(others-25, many-24)
nmod:along_with(moved-20, others-25)
punct(moved-20, ,-26)
case(Tamanrasset-28, to-27)
nmod:to(moved-20, Tamanrasset-28)
punct(sold-15, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#trees

wither :: And Jackson adviser Roger Wilkins warned that `` trust and loyalty are bound to wither '' if the lines of communication between the two camps are not kept open ./.
cc(warned-6, And-1)
compound(Wilkins-5, Jackson-2)
compound(Wilkins-5, adviser-3)
compound(Wilkins-5, Roger-4)
nsubj(warned-6, Wilkins-5)
root(ROOT-0, warned-6)
mark(bound-13, that-7)
punct(bound-13, ``-8)
nsubjpass(bound-13, trust-9)
nsubj:xsubj(wither-15, trust-9)
cc(trust-9, and-10)
conj:and(trust-9, loyalty-11)
nsubjpass(bound-13, loyalty-11)
nsubj:xsubj(wither-15, loyalty-11)
auxpass(bound-13, are-12)
ccomp(warned-6, bound-13)
mark(wither-15, to-14)
xcomp(bound-13, wither-15)
punct(wither-15, ''-16)
mark(kept-28, if-17)
det(lines-19, the-18)
nsubjpass(kept-28, lines-19)
case(communication-21, of-20)
nmod:of(lines-19, communication-21)
case(camps-25, between-22)
det(camps-25, the-23)
nummod(camps-25, two-24)
nmod:between(communication-21, camps-25)
auxpass(kept-28, are-26)
neg(kept-28, not-27)
advcl(wither-15, kept-28)
xcomp(kept-28, open-29)
punct(warned-6, .-30)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#trust

wither :: Elsewhere , the nation 's worst drought in a half-century may be searing crops and withering dreams , but farmers here on the High Plains and in a handful of other spots around the nation where rain is plentiful are rediscovering the truism that clouds can have silver linings ./.
advmod(crops-14, Elsewhere-1)
punct(crops-14, ,-2)
det(nation-4, the-3)
nmod:poss(drought-7, nation-4)
case(nation-4, 's-5)
amod(drought-7, worst-6)
nsubj(crops-14, drought-7)
nsubj(withering-16, drought-7)
case(half-century-10, in-8)
det(half-century-10, a-9)
nmod:in(drought-7, half-century-10)
aux(crops-14, may-11)
cop(crops-14, be-12)
amod(crops-14, searing-13)
root(ROOT-0, crops-14)
cc(crops-14, and-15)
conj:and(crops-14, withering-16)
dobj(withering-16, dreams-17)
punct(crops-14, ,-18)
cc(crops-14, but-19)
nsubj(rediscovering-41, farmers-20)
advmod(farmers-20, here-21)
case(Plains-25, on-22)
det(Plains-25, the-23)
amod(Plains-25, High-24)
nmod:on(farmers-20, Plains-25)
cc(farmers-20, and-26)
case(handful-29, in-27)
det(handful-29, a-28)
conj:and(farmers-20, handful-29)
nsubj(rediscovering-41, handful-29)
case(spots-32, of-30)
amod(spots-32, other-31)
nmod:of(handful-29, spots-32)
case(nation-35, around-33)
det(nation-35, the-34)
nmod:around(spots-32, nation-35)
advmod(plentiful-39, where-36)
nsubj(plentiful-39, rain-37)
cop(plentiful-39, is-38)
acl:relcl(nation-35, plentiful-39)
aux(rediscovering-41, are-40)
conj:and(crops-14, rediscovering-41)
det(truism-43, the-42)
dobj(rediscovering-41, truism-43)
mark(have-47, that-44)
nsubj(have-47, clouds-45)
aux(have-47, can-46)
ccomp(truism-43, have-47)
amod(linings-49, silver-48)
dobj(have-47, linings-49)
punct(crops-14, .-50)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#dreams

wither :: The drought that has withered crops in many states is tragic for farmers , but is unlikely to cause acute problems for the nation 's economy ./.
det(drought-2, The-1)
nsubj(withered-5, drought-2)
nsubj(tragic-11, drought-2)
nsubj(unlikely-17, drought-2)
nsubj:xsubj(cause-19, drought-2)
ref(drought-2, that-3)
aux(withered-5, has-4)
acl:relcl(drought-2, withered-5)
dobj(withered-5, crops-6)
case(states-9, in-7)
amod(states-9, many-8)
nmod:in(withered-5, states-9)
cop(tragic-11, is-10)
root(ROOT-0, tragic-11)
case(farmers-13, for-12)
nmod:for(tragic-11, farmers-13)
punct(tragic-11, ,-14)
cc(tragic-11, but-15)
cop(unlikely-17, is-16)
conj:but(tragic-11, unlikely-17)
mark(cause-19, to-18)
xcomp(unlikely-17, cause-19)
amod(problems-21, acute-20)
dobj(cause-19, problems-21)
case(economy-26, for-22)
det(nation-24, the-23)
nmod:poss(economy-26, nation-24)
case(nation-24, 's-25)
nmod:for(problems-21, economy-26)
punct(tragic-11, .-27)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#crops

wither :: Economists ' food-inflation forecasts have been heating up as crops wither in the Midwest ./.
nmod:poss(forecasts-4, Economists-1)
case(Economists-1, '-2)
compound(forecasts-4, food-inflation-3)
nsubj(heating-7, forecasts-4)
aux(heating-7, have-5)
aux(heating-7, been-6)
root(ROOT-0, heating-7)
compound:prt(heating-7, up-8)
mark(wither-11, as-9)
nsubj(wither-11, crops-10)
advcl(heating-7, wither-11)
case(Midwest-14, in-12)
det(Midwest-14, the-13)
nmod:in(wither-11, Midwest-14)
punct(heating-7, .-15)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#crops

wither :: The dry weather that 's withering much of the nation 's crop land already has sent many commodity prices soaring past the highs set during the 1983 drought ./.
det(weather-3, The-1)
amod(weather-3, dry-2)
nsubj(withering-6, weather-3)
nsubj(sent-16, weather-3)
ref(weather-3, that-4)
aux(withering-6, 's-5)
acl:relcl(weather-3, withering-6)
dobj(withering-6, much-7)
case(land-13, of-8)
det(nation-10, the-9)
nmod:poss(land-13, nation-10)
case(nation-10, 's-11)
compound(land-13, crop-12)
nmod:of(much-7, land-13)
advmod(sent-16, already-14)
aux(sent-16, has-15)
root(ROOT-0, sent-16)
amod(prices-19, many-17)
compound(prices-19, commodity-18)
nsubj(soaring-20, prices-19)
dep(sent-16, soaring-20)
case(highs-23, past-21)
det(highs-23, the-22)
nmod:past(soaring-20, highs-23)
acl(highs-23, set-24)
case(drought-28, during-25)
det(drought-28, the-26)
nummod(drought-28, 1983-27)
nmod:during(set-24, drought-28)
punct(sent-16, .-29)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#land

wither :: They remember how the boom in small stocks withered in March under the glare of bull-market publicity ; some portfolio managers back then were complaining that the public excitement over little stocks was a bit overdone ./.
nsubj(remember-2, They-1)
root(ROOT-0, remember-2)
advmod(remember-2, how-3)
det(boom-5, the-4)
dep(how-3, boom-5)
case(stocks-8, in-6)
amod(stocks-8, small-7)
nmod:in(boom-5, stocks-8)
acl(stocks-8, withered-9)
case(March-11, in-10)
nmod:in(withered-9, March-11)
case(glare-14, under-12)
det(glare-14, the-13)
nmod:under(withered-9, glare-14)
case(publicity-17, of-15)
compound(publicity-17, bull-market-16)
nmod:of(glare-14, publicity-17)
punct(boom-5, ;-18)
det(managers-21, some-19)
compound(managers-21, portfolio-20)
nsubj(complaining-25, managers-21)
advmod(then-23, back-22)
advmod(complaining-25, then-23)
aux(complaining-25, were-24)
parataxis(boom-5, complaining-25)
mark(overdone-36, that-26)
det(excitement-29, the-27)
amod(excitement-29, public-28)
nsubjpass(overdone-36, excitement-29)
case(stocks-32, over-30)
amod(stocks-32, little-31)
nmod:over(excitement-29, stocks-32)
auxpass(overdone-36, was-33)
det(bit-35, a-34)
nmod:npmod(overdone-36, bit-35)
ccomp(complaining-25, overdone-36)
punct(remember-2, .-37)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#march

wither :: But that bid withered after the Oct. 19 stock market crash ./.
root(ROOT-0, But-1)
det(bid-3, that-2)
dep(But-1, bid-3)
acl(bid-3, withered-4)
case(crash-11, after-5)
det(crash-11, the-6)
compound(crash-11, Oct.-7)
nummod(crash-11, 19-8)
compound(crash-11, stock-9)
compound(crash-11, market-10)
nmod:after(withered-4, crash-11)
punct(But-1, .-12)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#crash

wither :: Mr. Borge ridicules anti-government marchers and muses about establishing a `` museum of political parties '' to show future generations what some of the more-conservative groups were like , since he expects them to wither under the forces of history ./.
compound(Borge-2, Mr.-1)
nsubj(ridicules-3, Borge-2)
root(ROOT-0, ridicules-3)
amod(marchers-5, anti-government-4)
dobj(ridicules-3, marchers-5)
cc(marchers-5, and-6)
dobj(ridicules-3, muses-7)
conj:and(marchers-5, muses-7)
mark(establishing-9, about-8)
advcl(ridicules-3, establishing-9)
det(museum-12, a-10)
punct(museum-12, ``-11)
dobj(establishing-9, museum-12)
case(parties-15, of-13)
amod(parties-15, political-14)
nmod:of(museum-12, parties-15)
punct(museum-12, ''-16)
mark(show-18, to-17)
advcl(establishing-9, show-18)
amod(generations-20, future-19)
dobj(show-18, generations-20)
dobj(like-28, generations-20)
ref(generations-20, what-21)
nsubj(like-28, some-22)
case(groups-26, of-23)
det(groups-26, the-24)
amod(groups-26, more-conservative-25)
nmod:of(some-22, groups-26)
cop(like-28, were-27)
acl:relcl(generations-20, like-28)
punct(ridicules-3, ,-29)
mark(expects-32, since-30)
nsubj(expects-32, he-31)
advcl(ridicules-3, expects-32)
dobj(expects-32, them-33)
nsubj:xsubj(wither-35, them-33)
mark(wither-35, to-34)
xcomp(expects-32, wither-35)
case(forces-38, under-36)
det(forces-38, the-37)
nmod:under(wither-35, forces-38)
case(history-40, of-39)
nmod:of(forces-38, history-40)
punct(ridicules-3, .-41)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#them

wither :: The nation 's cattle herd is withering ./.
det(nation-2, The-1)
nmod:poss(herd-5, nation-2)
case(nation-2, 's-3)
compound(herd-5, cattle-4)
nsubj(withering-7, herd-5)
aux(withering-7, is-6)
root(ROOT-0, withering-7)
punct(withering-7, .-8)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#herd

wither :: Describing the hospital-room scene on the day of the assassination attempt , where doctors and technicians were racing to save the life of the stricken leader of the free world , Mr. Speakes volunteers that though President Reagan was a robust 70-year-old , `` he had the body of an older man , with a bit of flab and withered muscles that are dead giveaways that the body is not quite what it used to be . ''/''
advcl(volunteers-34, Describing-1)
det(scene-4, the-2)
amod(scene-4, hospital-room-3)
dobj(Describing-1, scene-4)
case(day-7, on-5)
det(day-7, the-6)
nmod:on(Describing-1, day-7)
case(attempt-11, of-8)
det(attempt-11, the-9)
compound(attempt-11, assassination-10)
nmod:of(day-7, attempt-11)
punct(attempt-11, ,-12)
advmod(racing-18, where-13)
nsubj(racing-18, doctors-14)
nsubj:xsubj(save-20, doctors-14)
cc(doctors-14, and-15)
conj:and(doctors-14, technicians-16)
nsubj(racing-18, technicians-16)
nsubj:xsubj(save-20, technicians-16)
aux(racing-18, were-17)
acl:relcl(attempt-11, racing-18)
mark(save-20, to-19)
xcomp(racing-18, save-20)
det(life-22, the-21)
dobj(save-20, life-22)
case(leader-26, of-23)
det(leader-26, the-24)
amod(leader-26, stricken-25)
nmod:of(life-22, leader-26)
case(world-30, of-27)
det(world-30, the-28)
amod(world-30, free-29)
nmod:of(leader-26, world-30)
punct(volunteers-34, ,-31)
compound(Speakes-33, Mr.-32)
nsubj(volunteers-34, Speakes-33)
root(ROOT-0, volunteers-34)
mark(had-46, that-35)
mark(70-year-old-42, though-36)
compound(Reagan-38, President-37)
nsubj(70-year-old-42, Reagan-38)
cop(70-year-old-42, was-39)
det(70-year-old-42, a-40)
amod(70-year-old-42, robust-41)
advcl(had-46, 70-year-old-42)
punct(had-46, ,-43)
punct(had-46, ``-44)
nsubj(had-46, he-45)
ccomp(volunteers-34, had-46)
det(body-48, the-47)
dobj(had-46, body-48)
case(man-52, of-49)
det(man-52, an-50)
amod(man-52, older-51)
nmod:of(body-48, man-52)
punct(had-46, ,-53)
case(bit-56, with-54)
det(bit-56, a-55)
nmod:with(had-46, bit-56)
nsubj(giveaways-65, bit-56)
case(flab-58, of-57)
nmod:of(bit-56, flab-58)
cc(flab-58, and-59)
amod(muscles-61, withered-60)
nmod:of(bit-56, muscles-61)
conj:and(flab-58, muscles-61)
ref(bit-56, that-62)
cop(giveaways-65, are-63)
amod(giveaways-65, dead-64)
acl:relcl(bit-56, giveaways-65)
mark(used-74, that-66)
det(body-68, the-67)
nsubjpass(used-74, body-68)
auxpass(used-74, is-69)
neg(used-74, not-70)
advmod(used-74, quite-71)
dobj(used-74, what-72)
nsubj:xsubj(be-76, what-72)
nsubjpass(used-74, it-73)
ccomp(giveaways-65, used-74)
mark(be-76, to-75)
xcomp(used-74, be-76)
punct(volunteers-34, .-77)
punct(volunteers-34, ''-78)
root(ROOT-0, /-1)
punct(/-1, ''-2)
Return str :: wither#muscles

wither :: But the OTC market was withering badly near the close and traders said if there was more time prices would have fallen further ./.
cc(withering-6, But-1)
det(market-4, the-2)
compound(market-4, OTC-3)
nsubj(withering-6, market-4)
aux(withering-6, was-5)
root(ROOT-0, withering-6)
advmod(withering-6, badly-7)
case(close-10, near-8)
det(close-10, the-9)
nmod:near(withering-6, close-10)
cc(close-10, and-11)
nmod:near(withering-6, traders-12)
conj:and(close-10, traders-12)
dep(withering-6, said-13)
mark(was-16, if-14)
expl(was-16, there-15)
advcl(said-13, was-16)
amod(prices-19, more-17)
compound(prices-19, time-18)
nsubj(fallen-22, prices-19)
aux(fallen-22, would-20)
aux(fallen-22, have-21)
ccomp(was-16, fallen-22)
advmod(fallen-22, further-23)
punct(withering-6, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#market

wither :: But the ANC has grown , and black supremacist breakaway groups have withered ./.
cc(grown-5, But-1)
det(ANC-3, the-2)
nsubj(grown-5, ANC-3)
aux(grown-5, has-4)
root(ROOT-0, grown-5)
punct(grown-5, ,-6)
cc(grown-5, and-7)
amod(groups-11, black-8)
compound(groups-11, supremacist-9)
amod(groups-11, breakaway-10)
nsubj(withered-13, groups-11)
aux(withered-13, have-12)
conj:and(grown-5, withered-13)
punct(grown-5, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#groups

wither :: The combination was supposed to make First RepublicBank Texas 's dominant financial institution ; instead , its $ 24.1 billion loan portfolio has withered in the state 's hard-scrabble economy ./.
det(combination-2, The-1)
nsubjpass(supposed-4, combination-2)
nsubj:xsubj(make-6, combination-2)
auxpass(supposed-4, was-3)
root(ROOT-0, supposed-4)
mark(make-6, to-5)
xcomp(supposed-4, make-6)
amod(Texas-9, First-7)
compound(Texas-9, RepublicBank-8)
nmod:poss(institution-13, Texas-9)
case(Texas-9, 's-10)
amod(institution-13, dominant-11)
amod(institution-13, financial-12)
dobj(make-6, institution-13)
punct(supposed-4, ;-14)
advmod(withered-24, instead-15)
punct(withered-24, ,-16)
nmod:poss(portfolio-22, its-17)
amod(portfolio-22, $-18)
compound(billion-20, 24.1-19)
nummod($-18, billion-20)
compound(portfolio-22, loan-21)
nsubj(withered-24, portfolio-22)
aux(withered-24, has-23)
parataxis(supposed-4, withered-24)
case(economy-30, in-25)
det(state-27, the-26)
nmod:poss(economy-30, state-27)
case(state-27, 's-28)
amod(economy-30, hard-scrabble-29)
nmod:in(withered-24, economy-30)
punct(supposed-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#portfolio

wither :: After sketching a realistic scenario of a prolonged U.S. invasion of Nicaragua , in which hostile media coverage begins to wither initial public support , Mr. Rusher asks whether controls -- even prior restraint -- ca n't legitimately be invoked by the commander-in-chief in order to maintain `` morale '' at home ./.
mark(sketching-2, After-1)
advcl(asks-28, sketching-2)
det(scenario-5, a-3)
amod(scenario-5, realistic-4)
dobj(sketching-2, scenario-5)
case(invasion-10, of-6)
det(invasion-10, a-7)
amod(invasion-10, prolonged-8)
compound(invasion-10, U.S.-9)
nmod:of(scenario-5, invasion-10)
nmod:in(begins-19, invasion-10)
case(Nicaragua-12, of-11)
nmod:of(invasion-10, Nicaragua-12)
punct(invasion-10, ,-13)
case(which-15, in-14)
ref(invasion-10, which-15)
amod(coverage-18, hostile-16)
compound(coverage-18, media-17)
nsubj(begins-19, coverage-18)
nsubj:xsubj(wither-21, coverage-18)
acl:relcl(invasion-10, begins-19)
mark(wither-21, to-20)
xcomp(begins-19, wither-21)
amod(support-24, initial-22)
amod(support-24, public-23)
dobj(wither-21, support-24)
punct(asks-28, ,-25)
compound(Rusher-27, Mr.-26)
nsubj(asks-28, Rusher-27)
root(ROOT-0, asks-28)
mark(invoked-40, whether-29)
nsubjpass(invoked-40, controls-30)
punct(restraint-34, ---31)
advmod(restraint-34, even-32)
amod(restraint-34, prior-33)
dep(controls-30, restraint-34)
punct(restraint-34, ---35)
aux(invoked-40, ca-36)
neg(invoked-40, n't-37)
advmod(invoked-40, legitimately-38)
auxpass(invoked-40, be-39)
ccomp(asks-28, invoked-40)
case(commander-in-chief-43, by-41)
det(commander-in-chief-43, the-42)
nmod:agent(invoked-40, commander-in-chief-43)
mark(maintain-47, in-44)
mwe(in-44, order-45)
mark(maintain-47, to-46)
advcl(invoked-40, maintain-47)
punct(morale-49, ``-48)
dobj(maintain-47, morale-49)
punct(morale-49, ''-50)
case(home-52, at-51)
nmod:at(morale-49, home-52)
punct(asks-28, .-53)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#support

wither :: Their primary concern is that the latest campaign , like many others before it , will soon wither away , leaving the gangs firmly in control and more contemptuous of the law than ever ./.
nmod:poss(concern-3, Their-1)
amod(concern-3, primary-2)
nsubj(is-4, concern-3)
root(ROOT-0, is-4)
mark(wither-18, that-5)
det(campaign-8, the-6)
amod(campaign-8, latest-7)
nsubj(wither-18, campaign-8)
punct(wither-18, ,-9)
case(others-12, like-10)
amod(others-12, many-11)
nmod:like(wither-18, others-12)
case(it-14, before-13)
nmod:before(others-12, it-14)
punct(wither-18, ,-15)
aux(wither-18, will-16)
advmod(wither-18, soon-17)
ccomp(is-4, wither-18)
advmod(wither-18, away-19)
punct(wither-18, ,-20)
advcl(wither-18, leaving-21)
det(gangs-23, the-22)
dobj(leaving-21, gangs-23)
advmod(leaving-21, firmly-24)
case(control-26, in-25)
nmod:in(leaving-21, control-26)
cc(control-26, and-27)
advmod(contemptuous-29, more-28)
nmod:in(leaving-21, contemptuous-29)
conj:and(control-26, contemptuous-29)
case(law-32, of-30)
det(law-32, the-31)
nmod:of(contemptuous-29, law-32)
case(ever-34, than-33)
nmod:than(leaving-21, ever-34)
punct(is-4, .-35)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#campaign

wither :: But by 1985 the boom was over , and sales had withered to $ 100 million ./.
cc(over-7, But-1)
case(1985-3, by-2)
nmod:by(over-7, 1985-3)
det(boom-5, the-4)
nsubj(over-7, boom-5)
cop(over-7, was-6)
root(ROOT-0, over-7)
punct(over-7, ,-8)
cc(over-7, and-9)
nsubj(withered-12, sales-10)
aux(withered-12, had-11)
conj:and(over-7, withered-12)
case($-14, to-13)
nmod:to(withered-12, $-14)
compound(million-16, 100-15)
nummod($-14, million-16)
punct(over-7, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#sales

wither :: Indeed , thanks to a well-oiled political machine and skilled manipulation of Panamanian nationalism and class rivalries , Gen. Noriega may well remain in charge for months , even under withering pressure from the U.S ./.
advmod(remain-23, Indeed-1)
punct(remain-23, ,-2)
advcl(remain-23, thanks-3)
case(machine-8, to-4)
det(machine-8, a-5)
amod(machine-8, well-oiled-6)
amod(machine-8, political-7)
nmod:to(thanks-3, machine-8)
cc(machine-8, and-9)
amod(manipulation-11, skilled-10)
nmod:to(thanks-3, manipulation-11)
conj:and(machine-8, manipulation-11)
case(nationalism-14, of-12)
amod(nationalism-14, Panamanian-13)
nmod:of(machine-8, nationalism-14)
cc(nationalism-14, and-15)
compound(rivalries-17, class-16)
nmod:of(machine-8, rivalries-17)
conj:and(nationalism-14, rivalries-17)
punct(remain-23, ,-18)
compound(Noriega-20, Gen.-19)
nsubj(remain-23, Noriega-20)
aux(remain-23, may-21)
advmod(remain-23, well-22)
root(ROOT-0, remain-23)
case(charge-25, in-24)
nmod:in(remain-23, charge-25)
case(months-27, for-26)
nmod:for(remain-23, months-27)
punct(remain-23, ,-28)
advmod(pressure-32, even-29)
case(pressure-32, under-30)
amod(pressure-32, withering-31)
nmod:under(remain-23, pressure-32)
case(U.S-35, from-33)
det(U.S-35, the-34)
nmod:from(pressure-32, U.S-35)
punct(remain-23, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#pressure

wither :: That , analysts say , is largely because most of the banking and financial issues went into the crash at low prices , having withered from their highs in the summer of 1986 ./.
nsubj(went-16, That-1)
nsubj:xsubj(withered-25, That-1)
punct(say-4, ,-2)
nsubj(say-4, analysts-3)
parataxis(went-16, say-4)
punct(say-4, ,-5)
cop(went-16, is-6)
advmod(went-16, largely-7)
mark(went-16, because-8)
nsubj(went-16, most-9)
nsubj:xsubj(withered-25, most-9)
case(issues-15, of-10)
det(issues-15, the-11)
compound(issues-15, banking-12)
cc(banking-12, and-13)
conj:and(banking-12, financial-14)
compound(issues-15, financial-14)
nmod:of(most-9, issues-15)
root(ROOT-0, went-16)
case(crash-19, into-17)
det(crash-19, the-18)
nmod:into(went-16, crash-19)
case(prices-22, at-20)
amod(prices-22, low-21)
nmod:at(went-16, prices-22)
punct(went-16, ,-23)
aux(withered-25, having-24)
xcomp(went-16, withered-25)
case(highs-28, from-26)
nmod:poss(highs-28, their-27)
nmod:from(withered-25, highs-28)
case(summer-31, in-29)
det(summer-31, the-30)
nmod:in(withered-25, summer-31)
case(1986-33, of-32)
nmod:of(summer-31, 1986-33)
punct(went-16, .-34)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#that

wither :: Like many recent LBOs gone public , however , Days Inns had begun to wither even before the market crash , as investor interest in small issues began to wane ./.
case(LBOs-4, Like-1)
amod(LBOs-4, many-2)
amod(LBOs-4, recent-3)
nmod:like(begun-13, LBOs-4)
acl(LBOs-4, gone-5)
xcomp(gone-5, public-6)
punct(begun-13, ,-7)
advmod(begun-13, however-8)
punct(begun-13, ,-9)
compound(Inns-11, Days-10)
nsubj(begun-13, Inns-11)
nsubj:xsubj(wither-15, Inns-11)
aux(begun-13, had-12)
root(ROOT-0, begun-13)
mark(wither-15, to-14)
xcomp(begun-13, wither-15)
advmod(crash-20, even-16)
case(crash-20, before-17)
det(crash-20, the-18)
compound(crash-20, market-19)
nmod:before(wither-15, crash-20)
punct(begun-13, ,-21)
mark(began-28, as-22)
compound(interest-24, investor-23)
nsubj(began-28, interest-24)
nsubj:xsubj(wane-30, interest-24)
case(issues-27, in-25)
amod(issues-27, small-26)
nmod:in(interest-24, issues-27)
advcl(begun-13, began-28)
mark(wane-30, to-29)
xcomp(began-28, wane-30)
punct(begun-13, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#inns

wither :: Compact and vital , feisty as ever , the maestro shows no signs of withering into one of those grand old men of legend who creak to the podium , radiating aura but little else ./.
ccomp(shows-11, Compact-1)
cc(Compact-1, and-2)
conj:and(Compact-1, vital-3)
ccomp(shows-11, vital-3)
punct(Compact-1, ,-4)
conj:and(Compact-1, feisty-5)
ccomp(shows-11, feisty-5)
case(ever-7, as-6)
advcl(feisty-5, ever-7)
punct(shows-11, ,-8)
det(maestro-10, the-9)
nsubj(shows-11, maestro-10)
root(ROOT-0, shows-11)
neg(signs-13, no-12)
dobj(shows-11, signs-13)
mark(withering-15, of-14)
acl(signs-13, withering-15)
case(one-17, into-16)
nmod:into(withering-15, one-17)
case(men-22, of-18)
det(men-22, those-19)
amod(men-22, grand-20)
amod(men-22, old-21)
nmod:of(one-17, men-22)
nsubj(creak-26, men-22)
case(legend-24, of-23)
nmod:of(men-22, legend-24)
ref(men-22, who-25)
acl:relcl(men-22, creak-26)
case(podium-29, to-27)
det(podium-29, the-28)
nmod:to(creak-26, podium-29)
punct(shows-11, ,-30)
advcl(shows-11, radiating-31)
dobj(radiating-31, aura-32)
cc(aura-32, but-33)
dobj(radiating-31, little-34)
conj:but(aura-32, little-34)
advmod(little-34, else-35)
punct(shows-11, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#one

wither :: And in a withering critique of Wall Street 's performance , the report shows that key participants -- including some major firms , stock exchange specialists and portfolio insurers -- not only failed to stem the chaos , but helped make it worse ./.
cc(shows-14, And-1)
case(critique-5, in-2)
det(critique-5, a-3)
amod(critique-5, withering-4)
nmod:in(shows-14, critique-5)
case(performance-10, of-6)
compound(Street-8, Wall-7)
nmod:poss(performance-10, Street-8)
case(Street-8, 's-9)
nmod:of(critique-5, performance-10)
punct(shows-14, ,-11)
det(report-13, the-12)
nsubj(shows-14, report-13)
nsubj(helped-40, report-13)
root(ROOT-0, shows-14)
mark(failed-33, that-15)
amod(participants-17, key-16)
nsubj(failed-33, participants-17)
nsubj:xsubj(stem-35, participants-17)
punct(firms-22, ---18)
case(firms-22, including-19)
det(firms-22, some-20)
amod(firms-22, major-21)
nmod:including(participants-17, firms-22)
punct(firms-22, ,-23)
compound(specialists-26, stock-24)
compound(specialists-26, exchange-25)
nmod:including(participants-17, specialists-26)
conj:and(firms-22, specialists-26)
cc(firms-22, and-27)
compound(insurers-29, portfolio-28)
nmod:including(participants-17, insurers-29)
conj:and(firms-22, insurers-29)
punct(firms-22, ---30)
neg(only-32, not-31)
cc:preconj(failed-33, only-32)
ccomp(shows-14, failed-33)
mark(stem-35, to-34)
xcomp(failed-33, stem-35)
det(chaos-37, the-36)
dobj(stem-35, chaos-37)
punct(shows-14, ,-38)
cc(shows-14, but-39)
conj:but(shows-14, helped-40)
ccomp(helped-40, make-41)
nsubj(worse-43, it-42)
xcomp(make-41, worse-43)
punct(shows-14, .-44)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#critique

wither :: But the OTC market was withering badly near the close and traders said if there was more time prices would have fallen further ./.
cc(withering-6, But-1)
det(market-4, the-2)
compound(market-4, OTC-3)
nsubj(withering-6, market-4)
aux(withering-6, was-5)
root(ROOT-0, withering-6)
advmod(withering-6, badly-7)
case(close-10, near-8)
det(close-10, the-9)
nmod:near(withering-6, close-10)
cc(close-10, and-11)
nmod:near(withering-6, traders-12)
conj:and(close-10, traders-12)
dep(withering-6, said-13)
mark(was-16, if-14)
expl(was-16, there-15)
advcl(said-13, was-16)
amod(prices-19, more-17)
compound(prices-19, time-18)
nsubj(fallen-22, prices-19)
aux(fallen-22, would-20)
aux(fallen-22, have-21)
ccomp(was-16, fallen-22)
advmod(fallen-22, further-23)
punct(withering-6, .-24)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#market

wither :: But the ANC has grown , and black supremacist breakaway groups have withered ./.
cc(grown-5, But-1)
det(ANC-3, the-2)
nsubj(grown-5, ANC-3)
aux(grown-5, has-4)
root(ROOT-0, grown-5)
punct(grown-5, ,-6)
cc(grown-5, and-7)
amod(groups-11, black-8)
compound(groups-11, supremacist-9)
amod(groups-11, breakaway-10)
nsubj(withered-13, groups-11)
aux(withered-13, have-12)
conj:and(grown-5, withered-13)
punct(grown-5, .-14)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#groups

wither :: The combination was supposed to make First RepublicBank Texas 's dominant financial institution ; instead , its $ 24.1 billion loan portfolio has withered in the state 's hard-scrabble economy ./.
det(combination-2, The-1)
nsubjpass(supposed-4, combination-2)
nsubj:xsubj(make-6, combination-2)
auxpass(supposed-4, was-3)
root(ROOT-0, supposed-4)
mark(make-6, to-5)
xcomp(supposed-4, make-6)
amod(Texas-9, First-7)
compound(Texas-9, RepublicBank-8)
nmod:poss(institution-13, Texas-9)
case(Texas-9, 's-10)
amod(institution-13, dominant-11)
amod(institution-13, financial-12)
dobj(make-6, institution-13)
punct(supposed-4, ;-14)
advmod(withered-24, instead-15)
punct(withered-24, ,-16)
nmod:poss(portfolio-22, its-17)
amod(portfolio-22, $-18)
compound(billion-20, 24.1-19)
nummod($-18, billion-20)
compound(portfolio-22, loan-21)
nsubj(withered-24, portfolio-22)
aux(withered-24, has-23)
parataxis(supposed-4, withered-24)
case(economy-30, in-25)
det(state-27, the-26)
nmod:poss(economy-30, state-27)
case(state-27, 's-28)
amod(economy-30, hard-scrabble-29)
nmod:in(withered-24, economy-30)
punct(supposed-4, .-31)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#portfolio

wither :: Indeed , thanks to a well-oiled political machine and skilled manipulation of Panamanian nationalism and class rivalries , Gen. Noriega may well remain in charge for months , even under withering pressure from the U.S ./.
advmod(remain-23, Indeed-1)
punct(remain-23, ,-2)
advcl(remain-23, thanks-3)
case(machine-8, to-4)
det(machine-8, a-5)
amod(machine-8, well-oiled-6)
amod(machine-8, political-7)
nmod:to(thanks-3, machine-8)
cc(machine-8, and-9)
amod(manipulation-11, skilled-10)
nmod:to(thanks-3, manipulation-11)
conj:and(machine-8, manipulation-11)
case(nationalism-14, of-12)
amod(nationalism-14, Panamanian-13)
nmod:of(machine-8, nationalism-14)
cc(nationalism-14, and-15)
compound(rivalries-17, class-16)
nmod:of(machine-8, rivalries-17)
conj:and(nationalism-14, rivalries-17)
punct(remain-23, ,-18)
compound(Noriega-20, Gen.-19)
nsubj(remain-23, Noriega-20)
aux(remain-23, may-21)
advmod(remain-23, well-22)
root(ROOT-0, remain-23)
case(charge-25, in-24)
nmod:in(remain-23, charge-25)
case(months-27, for-26)
nmod:for(remain-23, months-27)
punct(remain-23, ,-28)
advmod(pressure-32, even-29)
case(pressure-32, under-30)
amod(pressure-32, withering-31)
nmod:under(remain-23, pressure-32)
case(U.S-35, from-33)
det(U.S-35, the-34)
nmod:from(pressure-32, U.S-35)
punct(remain-23, .-36)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#pressure

wither :: But by 1985 the boom was over , and sales had withered to $ 100 million ./.
cc(over-7, But-1)
case(1985-3, by-2)
nmod:by(over-7, 1985-3)
det(boom-5, the-4)
nsubj(over-7, boom-5)
cop(over-7, was-6)
root(ROOT-0, over-7)
punct(over-7, ,-8)
cc(over-7, and-9)
nsubj(withered-12, sales-10)
aux(withered-12, had-11)
conj:and(over-7, withered-12)
case($-14, to-13)
nmod:to(withered-12, $-14)
compound(million-16, 100-15)
nummod($-14, million-16)
punct(over-7, .-17)
root(ROOT-0, /-1)
punct(/-1, .-2)
Return str :: wither#sales